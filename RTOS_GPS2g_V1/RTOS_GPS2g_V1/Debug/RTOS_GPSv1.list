
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012400  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016f0  080124c0  080124c0  000224c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bb0  08013bb0  00030308  2**0
                  CONTENTS
  4 .ARM          00000000  08013bb0  08013bb0  00030308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013bb0  08013bb0  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013bb0  08013bb0  00023bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013bb4  08013bb4  00023bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  08013bb8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000631c  20000308  08013ec0  00030308  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006624  08013ec0  00036624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040906  00000000  00000000  00030373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e65  00000000  00000000  00070c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001ba77  00000000  00000000  00076ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001be8  00000000  00000000  00092558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000031e8  00000000  00000000  00094140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000621f  00000000  00000000  00097328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000395f0  00000000  00000000  0009d547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000abf22  00000000  00000000  000d6b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007648  00000000  00000000  00182a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0018a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000308 	.word	0x20000308
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080124a8 	.word	0x080124a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000030c 	.word	0x2000030c
 8000104:	080124a8 	.word	0x080124a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	08012578 	.word	0x08012578
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	080125b8 	.word	0x080125b8

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	080125f8 	.word	0x080125f8
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <Debug_Tx>:



static void Debug_Tx(char _out[]){

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003288:	220c      	movs	r2, #12
static void Debug_Tx(char _out[]){
 800328a:	b530      	push	{r4, r5, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800328c:	4d0b      	ldr	r5, [pc, #44]	; (80032bc <Debug_Tx+0x34>)
static void Debug_Tx(char _out[]){
 800328e:	b083      	sub	sp, #12
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003290:	682b      	ldr	r3, [r5, #0]
static void Debug_Tx(char _out[]){
 8003292:	0004      	movs	r4, r0
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003294:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003296:	f7fc ff37 	bl	8000108 <strlen>
 800329a:	0021      	movs	r1, r4
 800329c:	b282      	uxth	r2, r0
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <Debug_Tx+0x38>)
 80032a0:	0028      	movs	r0, r5
 80032a2:	f007 fc9b 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <Debug_Tx+0x3c>)
 80032a8:	a901      	add	r1, sp, #4
 80032aa:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80032ac:	2202      	movs	r2, #2
 80032ae:	230a      	movs	r3, #10
 80032b0:	0028      	movs	r0, r5
 80032b2:	f007 fc93 	bl	800abdc <HAL_UART_Transmit>


}
 80032b6:	b003      	add	sp, #12
 80032b8:	bd30      	pop	{r4, r5, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	200049ac 	.word	0x200049ac
 80032c0:	00001388 	.word	0x00001388
 80032c4:	00000a0d 	.word	0x00000a0d

080032c8 <StartTask02>:
{
 80032c8:	b510      	push	{r4, lr}
while(1){osDelay(1);
 80032ca:	2001      	movs	r0, #1
 80032cc:	f007 ffaa 	bl	800b224 <osDelay>
 80032d0:	e7fb      	b.n	80032ca <StartTask02+0x2>
 80032d2:	46c0      	nop			; (mov r8, r8)

080032d4 <readAcc.isra.0>:





static float* readAcc(){
 80032d4:	b5f0      	push	{r4, r5, r6, r7, lr}

	ACC_GYRO_data[0]=0;
 80032d6:	2300      	movs	r3, #0
static float* readAcc(){
 80032d8:	46de      	mov	lr, fp
 80032da:	4657      	mov	r7, sl
 80032dc:	464e      	mov	r6, r9
 80032de:	4645      	mov	r5, r8
	ACC_GYRO_data[0]=0;
 80032e0:	4c4d      	ldr	r4, [pc, #308]	; (8003418 <readAcc.isra.0+0x144>)
static float* readAcc(){
 80032e2:	b5e0      	push	{r5, r6, r7, lr}
	ACC_GYRO_data[0]=0;
 80032e4:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=0;
 80032e6:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=0;
 80032e8:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=0;
 80032ea:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=0;
 80032ec:	6123      	str	r3, [r4, #16]
	ACC_GYRO_data[5]=0;
 80032ee:	6163      	str	r3, [r4, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80032f0:	23fa      	movs	r3, #250	; 0xfa
static float* readAcc(){
 80032f2:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	469b      	mov	fp, r3
 80032f8:	9302      	str	r3, [sp, #8]
 80032fa:	2306      	movs	r3, #6
 80032fc:	4e47      	ldr	r6, [pc, #284]	; (800341c <readAcc.isra.0+0x148>)
 80032fe:	ad04      	add	r5, sp, #16
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	9500      	str	r5, [sp, #0]
 8003304:	223b      	movs	r2, #59	; 0x3b
 8003306:	21d0      	movs	r1, #208	; 0xd0
 8003308:	0030      	movs	r0, r6
 800330a:	3b05      	subs	r3, #5
 800330c:	f005 fcba 	bl	8008c84 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003310:	8828      	ldrh	r0, [r5, #0]
 8003312:	4b43      	ldr	r3, [pc, #268]	; (8003420 <readAcc.isra.0+0x14c>)
 8003314:	ba42      	rev16	r2, r0
 8003316:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003318:	886b      	ldrh	r3, [r5, #2]
 800331a:	bac0      	revsh	r0, r0
 800331c:	ba5a      	rev16	r2, r3
 800331e:	bad9      	revsh	r1, r3
 8003320:	4b40      	ldr	r3, [pc, #256]	; (8003424 <readAcc.isra.0+0x150>)
 8003322:	4689      	mov	r9, r1
 8003324:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003326:	88ab      	ldrh	r3, [r5, #4]
 8003328:	ba5a      	rev16	r2, r3
 800332a:	bad9      	revsh	r1, r3
 800332c:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <readAcc.isra.0+0x154>)
 800332e:	468a      	mov	sl, r1
 8003330:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8003332:	4a3e      	ldr	r2, [pc, #248]	; (800342c <readAcc.isra.0+0x158>)
 8003334:	4690      	mov	r8, r2
 8003336:	f7ff fe65 	bl	8003004 <__aeabi_i2d>
 800333a:	4b3d      	ldr	r3, [pc, #244]	; (8003430 <readAcc.isra.0+0x15c>)
 800333c:	2200      	movs	r2, #0
 800333e:	f7fe ffc9 	bl	80022d4 <__aeabi_dmul>
 8003342:	f7ff fefd 	bl	8003140 <__aeabi_d2f>
 8003346:	4642      	mov	r2, r8
 8003348:	6010      	str	r0, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800334a:	4648      	mov	r0, r9
 800334c:	f7ff fe5a 	bl	8003004 <__aeabi_i2d>
 8003350:	4b37      	ldr	r3, [pc, #220]	; (8003430 <readAcc.isra.0+0x15c>)
 8003352:	2200      	movs	r2, #0
 8003354:	f7fe ffbe 	bl	80022d4 <__aeabi_dmul>
 8003358:	f7ff fef2 	bl	8003140 <__aeabi_d2f>
	Az = Accel_Z_RAW/16384.0;
 800335c:	4a35      	ldr	r2, [pc, #212]	; (8003434 <readAcc.isra.0+0x160>)
	Ay = Accel_Y_RAW/16384.0;
 800335e:	4f36      	ldr	r7, [pc, #216]	; (8003438 <readAcc.isra.0+0x164>)
	Az = Accel_Z_RAW/16384.0;
 8003360:	4691      	mov	r9, r2
	Ay = Accel_Y_RAW/16384.0;
 8003362:	6038      	str	r0, [r7, #0]
	Az = Accel_Z_RAW/16384.0;
 8003364:	4650      	mov	r0, sl
 8003366:	f7ff fe4d 	bl	8003004 <__aeabi_i2d>
 800336a:	2200      	movs	r2, #0
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <readAcc.isra.0+0x15c>)
 800336e:	f7fe ffb1 	bl	80022d4 <__aeabi_dmul>
 8003372:	f7ff fee5 	bl	8003140 <__aeabi_d2f>
 8003376:	464a      	mov	r2, r9


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8003378:	2306      	movs	r3, #6
	Az = Accel_Z_RAW/16384.0;
 800337a:	6010      	str	r0, [r2, #0]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800337c:	465a      	mov	r2, fp
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	9500      	str	r5, [sp, #0]
 8003384:	2243      	movs	r2, #67	; 0x43
 8003386:	21d0      	movs	r1, #208	; 0xd0
 8003388:	0030      	movs	r0, r6
 800338a:	3b05      	subs	r3, #5
 800338c:	f005 fc7a 	bl	8008c84 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003390:	8828      	ldrh	r0, [r5, #0]
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <readAcc.isra.0+0x168>)
 8003394:	886e      	ldrh	r6, [r5, #2]
 8003396:	ba42      	rev16	r2, r0
 8003398:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800339a:	4b29      	ldr	r3, [pc, #164]	; (8003440 <readAcc.isra.0+0x16c>)
 800339c:	88ad      	ldrh	r5, [r5, #4]
 800339e:	ba72      	rev16	r2, r6
 80033a0:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <readAcc.isra.0+0x170>)
 80033a4:	ba6a      	rev16	r2, r5
 80033a6:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 80033a8:	bac0      	revsh	r0, r0
 80033aa:	f7ff fe2b 	bl	8003004 <__aeabi_i2d>
 80033ae:	2200      	movs	r2, #0
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <readAcc.isra.0+0x174>)
 80033b2:	f7fe fb95 	bl	8001ae0 <__aeabi_ddiv>
 80033b6:	f7ff fec3 	bl	8003140 <__aeabi_d2f>
 80033ba:	4b24      	ldr	r3, [pc, #144]	; (800344c <readAcc.isra.0+0x178>)
 80033bc:	baf6      	revsh	r6, r6
 80033be:	4682      	mov	sl, r0
 80033c0:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80033c2:	0030      	movs	r0, r6
 80033c4:	f7ff fe1e 	bl	8003004 <__aeabi_i2d>
 80033c8:	2200      	movs	r2, #0
 80033ca:	4b1f      	ldr	r3, [pc, #124]	; (8003448 <readAcc.isra.0+0x174>)
 80033cc:	f7fe fb88 	bl	8001ae0 <__aeabi_ddiv>
 80033d0:	f7ff feb6 	bl	8003140 <__aeabi_d2f>
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <readAcc.isra.0+0x17c>)
 80033d6:	baed      	revsh	r5, r5
 80033d8:	1c06      	adds	r6, r0, #0
 80033da:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80033dc:	0028      	movs	r0, r5
 80033de:	f7ff fe11 	bl	8003004 <__aeabi_i2d>
 80033e2:	2200      	movs	r2, #0
 80033e4:	4b18      	ldr	r3, [pc, #96]	; (8003448 <readAcc.isra.0+0x174>)
 80033e6:	f7fe fb7b 	bl	8001ae0 <__aeabi_ddiv>
 80033ea:	f7ff fea9 	bl	8003140 <__aeabi_d2f>
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <readAcc.isra.0+0x180>)
	ACC_GYRO_data[0]=Ax;
	ACC_GYRO_data[1]=Ay;
	ACC_GYRO_data[2]=Az;
	ACC_GYRO_data[3]=Gx;
	ACC_GYRO_data[4]=Gy;
 80033f0:	6126      	str	r6, [r4, #16]
	Gz = Gyro_Z_RAW/131.0;
 80033f2:	6018      	str	r0, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 80033f4:	4643      	mov	r3, r8
 80033f6:	681b      	ldr	r3, [r3, #0]
	ACC_GYRO_data[5]=Gz;
 80033f8:	6160      	str	r0, [r4, #20]
	ACC_GYRO_data[0]=Ax;
 80033fa:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=Ay;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=Az;
 8003400:	464b      	mov	r3, r9
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=Gx;
 8003406:	4653      	mov	r3, sl
 8003408:	60e3      	str	r3, [r4, #12]
	return(ACC_GYRO_data);

	//sprintf (buf, "%.2f", Ax);
}
 800340a:	b007      	add	sp, #28
 800340c:	bcf0      	pop	{r4, r5, r6, r7}
 800340e:	46bb      	mov	fp, r7
 8003410:	46b2      	mov	sl, r6
 8003412:	46a9      	mov	r9, r5
 8003414:	46a0      	mov	r8, r4
 8003416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003418:	20000324 	.word	0x20000324
 800341c:	20004780 	.word	0x20004780
 8003420:	20000358 	.word	0x20000358
 8003424:	2000035a 	.word	0x2000035a
 8003428:	2000035c 	.word	0x2000035c
 800342c:	20000360 	.word	0x20000360
 8003430:	3f100000 	.word	0x3f100000
 8003434:	20000368 	.word	0x20000368
 8003438:	20000364 	.word	0x20000364
 800343c:	20001d7c 	.word	0x20001d7c
 8003440:	20001d7e 	.word	0x20001d7e
 8003444:	20001d80 	.word	0x20001d80
 8003448:	40606000 	.word	0x40606000
 800344c:	20001d74 	.word	0x20001d74
 8003450:	20001d78 	.word	0x20001d78
 8003454:	20001d84 	.word	0x20001d84

08003458 <StartTask03>:
 8003458:	b510      	push	{r4, lr}
 800345a:	2001      	movs	r0, #1
 800345c:	f007 fee2 	bl	800b224 <osDelay>
 8003460:	e7fb      	b.n	800345a <StartTask03+0x2>
 8003462:	46c0      	nop			; (mov r8, r8)

08003464 <SendGSMCode>:
	HAL_Delay(200);
	SET_PWRKEY(0);
}

void SendGSMCode(const char cmd[])
{
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	46c6      	mov	lr, r8

	memset(GSMData, 0, 4500);
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003468:	270c      	movs	r7, #12
{
 800346a:	0005      	movs	r5, r0
 800346c:	b500      	push	{lr}
	memset(GSMData, 0, 4500);
 800346e:	2100      	movs	r1, #0
{
 8003470:	b082      	sub	sp, #8
	memset(GSMData, 0, 4500);
 8003472:	4a24      	ldr	r2, [pc, #144]	; (8003504 <SendGSMCode+0xa0>)
 8003474:	4824      	ldr	r0, [pc, #144]	; (8003508 <SendGSMCode+0xa4>)
 8003476:	f00b fa85 	bl	800e984 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800347a:	4b24      	ldr	r3, [pc, #144]	; (800350c <SendGSMCode+0xa8>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800347c:	4e24      	ldr	r6, [pc, #144]	; (8003510 <SendGSMCode+0xac>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800347e:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003480:	2201      	movs	r2, #1
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003482:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003484:	4923      	ldr	r1, [pc, #140]	; (8003514 <SendGSMCode+0xb0>)
 8003486:	0030      	movs	r0, r6
 8003488:	f007 fd76 	bl	800af78 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 100);
 800348c:	4c22      	ldr	r4, [pc, #136]	; (8003518 <SendGSMCode+0xb4>)
 800348e:	2264      	movs	r2, #100	; 0x64
 8003490:	2100      	movs	r1, #0
 8003492:	0020      	movs	r0, r4
 8003494:	f00b fa76 	bl	800e984 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 8003498:	0028      	movs	r0, r5
 800349a:	f7fc fe35 	bl	8000108 <strlen>
 800349e:	4b1f      	ldr	r3, [pc, #124]	; (800351c <SendGSMCode+0xb8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <SendGSMCode+0x46>
 80034a6:	285a      	cmp	r0, #90	; 0x5a
 80034a8:	d818      	bhi.n	80034dc <SendGSMCode+0x78>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 80034aa:	0029      	movs	r1, r5
 80034ac:	0020      	movs	r0, r4
 80034ae:	f00b fb2f 	bl	800eb10 <stpcpy>
	strcat(GSMTXC, "\r\n");
 80034b2:	491b      	ldr	r1, [pc, #108]	; (8003520 <SendGSMCode+0xbc>)
 80034b4:	2203      	movs	r2, #3
 80034b6:	f00b fc37 	bl	800ed28 <memcpy>




static void GSM_Tx(const char _out[]){
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034ba:	220c      	movs	r2, #12
 80034bc:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80034be:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034c0:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80034c2:	f7fc fe21 	bl	8000108 <strlen>
 80034c6:	2396      	movs	r3, #150	; 0x96
 80034c8:	b282      	uxth	r2, r0
 80034ca:	0021      	movs	r1, r4
 80034cc:	0030      	movs	r0, r6
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	f007 fb84 	bl	800abdc <HAL_UART_Transmit>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
	// return GSM_Rx();
}
 80034d4:	b002      	add	sp, #8
 80034d6:	bc80      	pop	{r7}
 80034d8:	46b8      	mov	r8, r7
 80034da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <SendGSMCode+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80034de:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034e0:	4698      	mov	r8, r3
 80034e2:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80034e4:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80034e6:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80034e8:	490f      	ldr	r1, [pc, #60]	; (8003528 <SendGSMCode+0xc4>)
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <SendGSMCode+0xc8>)
 80034ec:	f007 fb76 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <SendGSMCode+0xcc>)
 80034f2:	a901      	add	r1, sp, #4
 80034f4:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80034f6:	2202      	movs	r2, #2
 80034f8:	230a      	movs	r3, #10
 80034fa:	4640      	mov	r0, r8
 80034fc:	f007 fb6e 	bl	800abdc <HAL_UART_Transmit>
}
 8003500:	e7d3      	b.n	80034aa <SendGSMCode+0x46>
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	00001194 	.word	0x00001194
 8003508:	200006c8 	.word	0x200006c8
 800350c:	20004918 	.word	0x20004918
 8003510:	20004884 	.word	0x20004884
 8003514:	200006c4 	.word	0x200006c4
 8003518:	20001d10 	.word	0x20001d10
 800351c:	200000c4 	.word	0x200000c4
 8003520:	08012658 	.word	0x08012658
 8003524:	200049ac 	.word	0x200049ac
 8003528:	08012638 	.word	0x08012638
 800352c:	00001388 	.word	0x00001388
 8003530:	00000a0d 	.word	0x00000a0d

08003534 <SendGSMCodeL>:
	GSM_Tx(cmd);
	// return GSM_Rx();
}

void SendGSMCodeL(const char cmd[])
{
 8003534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003536:	46c6      	mov	lr, r8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003538:	270c      	movs	r7, #12
{
 800353a:	0005      	movs	r5, r0
 800353c:	b500      	push	{lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800353e:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <SendGSMCodeL+0xa0>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003540:	4e25      	ldr	r6, [pc, #148]	; (80035d8 <SendGSMCodeL+0xa4>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003542:	681b      	ldr	r3, [r3, #0]
{
 8003544:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003546:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003548:	2201      	movs	r2, #1
 800354a:	4924      	ldr	r1, [pc, #144]	; (80035dc <SendGSMCodeL+0xa8>)
 800354c:	0030      	movs	r0, r6
 800354e:	f007 fd13 	bl	800af78 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 8003552:	2100      	movs	r1, #0
 8003554:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <SendGSMCodeL+0xac>)
 8003556:	4823      	ldr	r0, [pc, #140]	; (80035e4 <SendGSMCodeL+0xb0>)
 8003558:	f00b fa14 	bl	800e984 <memset>
	memset(GSMTXC, 0, 100);
 800355c:	4c22      	ldr	r4, [pc, #136]	; (80035e8 <SendGSMCodeL+0xb4>)
 800355e:	2264      	movs	r2, #100	; 0x64
 8003560:	2100      	movs	r1, #0
 8003562:	0020      	movs	r0, r4
 8003564:	f00b fa0e 	bl	800e984 <memset>
	if ((strlen(cmd) > 90) && (debug == 1))
 8003568:	0028      	movs	r0, r5
 800356a:	f7fc fdcd 	bl	8000108 <strlen>
 800356e:	285a      	cmp	r0, #90	; 0x5a
 8003570:	d903      	bls.n	800357a <SendGSMCodeL+0x46>
 8003572:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <SendGSMCodeL+0xb8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d018      	beq.n	80035ac <SendGSMCodeL+0x78>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 800357a:	0029      	movs	r1, r5
 800357c:	0020      	movs	r0, r4
 800357e:	f00b fac7 	bl	800eb10 <stpcpy>
	strcat(GSMTXC, "\r\n");
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <SendGSMCodeL+0xbc>)
 8003584:	2203      	movs	r2, #3
 8003586:	f00b fbcf 	bl	800ed28 <memcpy>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800358a:	220c      	movs	r2, #12
 800358c:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800358e:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003590:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003592:	f7fc fdb9 	bl	8000108 <strlen>
 8003596:	2396      	movs	r3, #150	; 0x96
 8003598:	b282      	uxth	r2, r0
 800359a:	0021      	movs	r1, r4
 800359c:	0030      	movs	r0, r6
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	f007 fb1c 	bl	800abdc <HAL_UART_Transmit>
	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);

	// return GSM_RxL();
}
 80035a4:	b002      	add	sp, #8
 80035a6:	bc80      	pop	{r7}
 80035a8:	46b8      	mov	r8, r7
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <SendGSMCodeL+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80035ae:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80035b0:	4698      	mov	r8, r3
 80035b2:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80035b4:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80035b6:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80035b8:	490f      	ldr	r1, [pc, #60]	; (80035f8 <SendGSMCodeL+0xc4>)
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <SendGSMCodeL+0xc8>)
 80035bc:	f007 fb0e 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <SendGSMCodeL+0xcc>)
 80035c2:	a901      	add	r1, sp, #4
 80035c4:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80035c6:	2202      	movs	r2, #2
 80035c8:	230a      	movs	r3, #10
 80035ca:	4640      	mov	r0, r8
 80035cc:	f007 fb06 	bl	800abdc <HAL_UART_Transmit>
}
 80035d0:	e7d3      	b.n	800357a <SendGSMCodeL+0x46>
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	20004918 	.word	0x20004918
 80035d8:	20004884 	.word	0x20004884
 80035dc:	200006c4 	.word	0x200006c4
 80035e0:	000003de 	.word	0x000003de
 80035e4:	200006c8 	.word	0x200006c8
 80035e8:	20001d10 	.word	0x20001d10
 80035ec:	200000c4 	.word	0x200000c4
 80035f0:	08012658 	.word	0x08012658
 80035f4:	200049ac 	.word	0x200049ac
 80035f8:	08012638 	.word	0x08012638
 80035fc:	00001388 	.word	0x00001388
 8003600:	00000a0d 	.word	0x00000a0d

08003604 <SendGSMData>:

void SendGSMData(const char data[])
{
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003606:	270c      	movs	r7, #12
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <SendGSMData+0x68>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800360a:	4c19      	ldr	r4, [pc, #100]	; (8003670 <SendGSMData+0x6c>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800360c:	681b      	ldr	r3, [r3, #0]
{
 800360e:	b083      	sub	sp, #12
 8003610:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003612:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003614:	2201      	movs	r2, #1
 8003616:	0020      	movs	r0, r4
 8003618:	4916      	ldr	r1, [pc, #88]	; (8003674 <SendGSMData+0x70>)
 800361a:	f007 fcad 	bl	800af78 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 4500);
 800361e:	2100      	movs	r1, #0
 8003620:	4a15      	ldr	r2, [pc, #84]	; (8003678 <SendGSMData+0x74>)
 8003622:	4816      	ldr	r0, [pc, #88]	; (800367c <SendGSMData+0x78>)
 8003624:	f00b f9ae 	bl	800e984 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 8003628:	466b      	mov	r3, sp
 800362a:	2202      	movs	r2, #2
 800362c:	2100      	movs	r1, #0
 800362e:	1d58      	adds	r0, r3, #5
 8003630:	f00b f9a8 	bl	800e984 <memset>
	end[0] = 0x1A;
 8003634:	231a      	movs	r3, #26
	memset(end, 0, 3);
 8003636:	ae01      	add	r6, sp, #4
	end[0] = 0x1A;
 8003638:	7033      	strb	r3, [r6, #0]
	//memset(_out,0,strlen(_out));
}

static void GSM_TxL(const char _out[]){

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800363a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 800363c:	0028      	movs	r0, r5
	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800363e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 8003640:	f7fc fd62 	bl	8000108 <strlen>
 8003644:	0029      	movs	r1, r5
 8003646:	b282      	uxth	r2, r0
 8003648:	4b0d      	ldr	r3, [pc, #52]	; (8003680 <SendGSMData+0x7c>)
 800364a:	0020      	movs	r0, r4
 800364c:	f007 fac6 	bl	800abdc <HAL_UART_Transmit>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003650:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003652:	0030      	movs	r0, r6
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003654:	621f      	str	r7, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 8003656:	f7fc fd57 	bl	8000108 <strlen>
 800365a:	2396      	movs	r3, #150	; 0x96
 800365c:	b282      	uxth	r2, r0
 800365e:	0031      	movs	r1, r6
 8003660:	0020      	movs	r0, r4
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	f007 faba 	bl	800abdc <HAL_UART_Transmit>
	// strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
	GSM_Tx((char *)end);

	// return GSM_Rx();
}
 8003668:	b003      	add	sp, #12
 800366a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800366c:	20004918 	.word	0x20004918
 8003670:	20004884 	.word	0x20004884
 8003674:	200006c4 	.word	0x200006c4
 8003678:	00001194 	.word	0x00001194
 800367c:	200006c8 	.word	0x200006c8
 8003680:	00001388 	.word	0x00001388

08003684 <EndTransfer>:

void EndTransfer()
{
 8003684:	b570      	push	{r4, r5, r6, lr}

	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003686:	260c      	movs	r6, #12
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <EndTransfer+0x50>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800368a:	4c13      	ldr	r4, [pc, #76]	; (80036d8 <EndTransfer+0x54>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800368c:	681b      	ldr	r3, [r3, #0]
{
 800368e:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 8003690:	621e      	str	r6, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003692:	2201      	movs	r2, #1
 8003694:	0020      	movs	r0, r4
 8003696:	4911      	ldr	r1, [pc, #68]	; (80036dc <EndTransfer+0x58>)
 8003698:	f007 fc6e 	bl	800af78 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 990);
 800369c:	2100      	movs	r1, #0
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <EndTransfer+0x5c>)
 80036a0:	4810      	ldr	r0, [pc, #64]	; (80036e4 <EndTransfer+0x60>)
 80036a2:	f00b f96f 	bl	800e984 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 80036a6:	466b      	mov	r3, sp
 80036a8:	2202      	movs	r2, #2
 80036aa:	2100      	movs	r1, #0
 80036ac:	1d58      	adds	r0, r3, #5
 80036ae:	f00b f969 	bl	800e984 <memset>
	end[0] = 0x1A;
 80036b2:	231a      	movs	r3, #26
	memset(end, 0, 3);
 80036b4:	ad01      	add	r5, sp, #4
	end[0] = 0x1A;
 80036b6:	702b      	strb	r3, [r5, #0]
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036b8:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80036ba:	0028      	movs	r0, r5
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80036bc:	621e      	str	r6, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 80036be:	f7fc fd23 	bl	8000108 <strlen>
 80036c2:	2396      	movs	r3, #150	; 0x96
 80036c4:	b282      	uxth	r2, r0
 80036c6:	0029      	movs	r1, r5
 80036c8:	0020      	movs	r0, r4
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	f007 fa86 	bl	800abdc <HAL_UART_Transmit>
	GSM_Tx((char *)end);
	// return GSM_Rx();
}
 80036d0:	b002      	add	sp, #8
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	20004918 	.word	0x20004918
 80036d8:	20004884 	.word	0x20004884
 80036dc:	200006c4 	.word	0x200006c4
 80036e0:	000003de 	.word	0x000003de
 80036e4:	200006c8 	.word	0x200006c8

080036e8 <waitForResponse>:
int waitForResponse(const char* expectedResponse, int timeout) {
 80036e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ea:	b083      	sub	sp, #12
 80036ec:	0006      	movs	r6, r0
 80036ee:	000d      	movs	r5, r1
	//memset(GSMReply3, 0, 500);
    int ret=0;

	int stT = HAL_GetTick();
 80036f0:	f004 f97a 	bl	80079e8 <HAL_GetTick>
 80036f4:	4f1c      	ldr	r7, [pc, #112]	; (8003768 <waitForResponse+0x80>)
 80036f6:	0004      	movs	r4, r0
	while (((HAL_GetTick() - stT) <= timeout)){
 80036f8:	e005      	b.n	8003706 <waitForResponse+0x1e>
		//HAL_UART_Receive(&huart1, (uint8_t*)(GSMReply3 + rxBufferIndex), 1, HAL_MAX_DELAY);
        //rxBufferIndex++;
		//strlen(GSMData)
        if (strstr(GSMData, expectedResponse) != NULL) {
 80036fa:	0031      	movs	r1, r6
 80036fc:	0038      	movs	r0, r7
 80036fe:	f00b f9f1 	bl	800eae4 <strstr>
 8003702:	2800      	cmp	r0, #0
 8003704:	d12d      	bne.n	8003762 <waitForResponse+0x7a>
	while (((HAL_GetTick() - stT) <= timeout)){
 8003706:	f004 f96f 	bl	80079e8 <HAL_GetTick>
 800370a:	1b00      	subs	r0, r0, r4
 800370c:	42a8      	cmp	r0, r5
 800370e:	d9f4      	bls.n	80036fa <waitForResponse+0x12>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003710:	260c      	movs	r6, #12
 8003712:	4c16      	ldr	r4, [pc, #88]	; (800376c <waitForResponse+0x84>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003714:	2216      	movs	r2, #22
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003716:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003718:	4915      	ldr	r1, [pc, #84]	; (8003770 <waitForResponse+0x88>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800371a:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800371c:	0020      	movs	r0, r4
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <waitForResponse+0x8c>)
 8003720:	f007 fa5c 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003724:	466b      	mov	r3, sp
 8003726:	4d14      	ldr	r5, [pc, #80]	; (8003778 <waitForResponse+0x90>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003728:	2202      	movs	r2, #2
 800372a:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800372c:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800372e:	0020      	movs	r0, r4
 8003730:	230a      	movs	r3, #10
 8003732:	f007 fa53 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003736:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003738:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800373a:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800373c:	f7fc fce4 	bl	8000108 <strlen>
 8003740:	0039      	movs	r1, r7
 8003742:	b282      	uxth	r2, r0
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <waitForResponse+0x8c>)
 8003746:	0020      	movs	r0, r4
 8003748:	f007 fa48 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800374c:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800374e:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003750:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003752:	0020      	movs	r0, r4
 8003754:	230a      	movs	r3, #10
 8003756:	a901      	add	r1, sp, #4
 8003758:	f007 fa40 	bl	800abdc <HAL_UART_Transmit>
    int ret=0;
 800375c:	2000      	movs	r0, #0
        }
    }
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
	return ret;

}
 800375e:	b003      	add	sp, #12
 8003760:	bdf0      	pop	{r4, r5, r6, r7, pc}
        	ret=1;
 8003762:	2001      	movs	r0, #1
	return ret;
 8003764:	e7fb      	b.n	800375e <waitForResponse+0x76>
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	200006c8 	.word	0x200006c8
 800376c:	200049ac 	.word	0x200049ac
 8003770:	08012760 	.word	0x08012760
 8003774:	00001388 	.word	0x00001388
 8003778:	00000a0d 	.word	0x00000a0d

0800377c <GetGSMReply>:

char *GetGSMReply(int extra, const char *find, int gap, const char *LineEnd, const char *ErrorMsg, int timeout, const char *finChar)
{
 800377c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800377e:	46de      	mov	lr, fp
 8003780:	4657      	mov	r7, sl
 8003782:	4645      	mov	r5, r8
 8003784:	464e      	mov	r6, r9
 8003786:	b5e0      	push	{r5, r6, r7, lr}
 8003788:	469b      	mov	fp, r3
	memset(GSMReply, 0, 100);
 800378a:	4b82      	ldr	r3, [pc, #520]	; (8003994 <GetGSMReply+0x218>)
{
 800378c:	b087      	sub	sp, #28
	memset(GSMReply, 0, 100);
 800378e:	0018      	movs	r0, r3
{
 8003790:	9100      	str	r1, [sp, #0]
 8003792:	9201      	str	r2, [sp, #4]
	memset(GSMReply, 0, 100);
 8003794:	2100      	movs	r1, #0
 8003796:	2264      	movs	r2, #100	; 0x64
 8003798:	4698      	mov	r8, r3
{
 800379a:	9e11      	ldr	r6, [sp, #68]	; 0x44
	memset(GSMReply, 0, 100);
 800379c:	f00b f8f2 	bl	800e984 <memset>
	memset(GSMInData, 0, 1000);
 80037a0:	22fa      	movs	r2, #250	; 0xfa
 80037a2:	4f7d      	ldr	r7, [pc, #500]	; (8003998 <GetGSMReply+0x21c>)
 80037a4:	2100      	movs	r1, #0
 80037a6:	0092      	lsls	r2, r2, #2
 80037a8:	0038      	movs	r0, r7
 80037aa:	f00b f8eb 	bl	800e984 <memset>
	gsmER=0;
 80037ae:	4b7b      	ldr	r3, [pc, #492]	; (800399c <GetGSMReply+0x220>)
 80037b0:	469a      	mov	sl, r3
 80037b2:	2300      	movs	r3, #0
 80037b4:	4652      	mov	r2, sl
 80037b6:	6013      	str	r3, [r2, #0]
	int stT = HAL_GetTick();
 80037b8:	f004 f916 	bl	80079e8 <HAL_GetTick>
					}
				}
			}
			else
			{
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 80037bc:	4b78      	ldr	r3, [pc, #480]	; (80039a0 <GetGSMReply+0x224>)
	int stT = HAL_GetTick();
 80037be:	0004      	movs	r4, r0
		if (strlen(GSMData) > 0   )
 80037c0:	4d78      	ldr	r5, [pc, #480]	; (80039a4 <GetGSMReply+0x228>)
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 80037c2:	9302      	str	r3, [sp, #8]
	while (((HAL_GetTick() - stT) <= timeout))
 80037c4:	e005      	b.n	80037d2 <GetGSMReply+0x56>
		HAL_Delay(70);
 80037c6:	2046      	movs	r0, #70	; 0x46
 80037c8:	f004 f914 	bl	80079f4 <HAL_Delay>
		if (strlen(GSMData) > 0   )
 80037cc:	782b      	ldrb	r3, [r5, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d113      	bne.n	80037fa <GetGSMReply+0x7e>
	while (((HAL_GetTick() - stT) <= timeout))
 80037d2:	f004 f909 	bl	80079e8 <HAL_GetTick>
 80037d6:	1b00      	subs	r0, r0, r4
 80037d8:	4286      	cmp	r6, r0
 80037da:	d2f4      	bcs.n	80037c6 <GetGSMReply+0x4a>
	//Debug_Tx(GSMInData);
	//Debug_Tx("****gsmdata");
	//Debug_Tx(GSMData);
	//Debug_Tx("****gsmreply");
	//Debug_Tx(GSMReply);
	if (strlen(GSMReply) < 1)
 80037dc:	4643      	mov	r3, r8
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d043      	beq.n	800386c <GetGSMReply+0xf0>
		// Debug_Tx(GSMData);
		// Debug_Tx("****");
		// Debug_Tx(GSMReply);
		// Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 80037e4:	2064      	movs	r0, #100	; 0x64
 80037e6:	f004 f905 	bl	80079f4 <HAL_Delay>
	// if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
 80037ea:	4640      	mov	r0, r8
}
 80037ec:	b007      	add	sp, #28
 80037ee:	bcf0      	pop	{r4, r5, r6, r7}
 80037f0:	46bb      	mov	fp, r7
 80037f2:	46b2      	mov	sl, r6
 80037f4:	46a9      	mov	r9, r5
 80037f6:	46a0      	mov	r8, r4
 80037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( strlen(GSMData) >900) {Debug_Tx("GSM Data oveload");HAL_Delay(5000);memset(GSMData, 0, 4500);
 80037fa:	0028      	movs	r0, r5
 80037fc:	f7fc fc84 	bl	8000108 <strlen>
 8003800:	23e1      	movs	r3, #225	; 0xe1
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4298      	cmp	r0, r3
 8003806:	d900      	bls.n	800380a <GetGSMReply+0x8e>
 8003808:	e08a      	b.n	8003920 <GetGSMReply+0x1a4>
			strcpy(GSMInData, GSMData);
 800380a:	0029      	movs	r1, r5
 800380c:	1c42      	adds	r2, r0, #1
 800380e:	0038      	movs	r0, r7
 8003810:	f00b fa8a 	bl	800ed28 <memcpy>
			char *pq = strstr(GSMInData, finChar);
 8003814:	0038      	movs	r0, r7
 8003816:	9912      	ldr	r1, [sp, #72]	; 0x48
 8003818:	f00b f964 	bl	800eae4 <strstr>
			if ((pq != NULL))
 800381c:	2800      	cmp	r0, #0
 800381e:	d050      	beq.n	80038c2 <GetGSMReply+0x146>
				if ((strlen(find) < 1))
 8003820:	9b00      	ldr	r3, [sp, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d100      	bne.n	800382a <GetGSMReply+0xae>
 8003828:	e095      	b.n	8003956 <GetGSMReply+0x1da>
				char *p = strstr(GSMInData, find);
 800382a:	0038      	movs	r0, r7
 800382c:	9900      	ldr	r1, [sp, #0]
 800382e:	f00b f959 	bl	800eae4 <strstr>
				if ((strlen(LineEnd) < 1))
 8003832:	465b      	mov	r3, fp
 8003834:	781b      	ldrb	r3, [r3, #0]
				char *p = strstr(GSMInData, find);
 8003836:	4681      	mov	r9, r0
				if ((strlen(LineEnd) < 1))
 8003838:	2b00      	cmp	r3, #0
 800383a:	d100      	bne.n	800383e <GetGSMReply+0xc2>
 800383c:	e099      	b.n	8003972 <GetGSMReply+0x1f6>
					if ((strstr(GSMInData, LineEnd) != NULL))
 800383e:	4659      	mov	r1, fp
 8003840:	0038      	movs	r0, r7
 8003842:	f00b f94f 	bl	800eae4 <strstr>
 8003846:	2800      	cmp	r0, #0
 8003848:	d00c      	beq.n	8003864 <GetGSMReply+0xe8>
						if ((strlen(p + gap) > strlen(LineEnd)))
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	469c      	mov	ip, r3
 800384e:	44e1      	add	r9, ip
 8003850:	4648      	mov	r0, r9
 8003852:	f7fc fc59 	bl	8000108 <strlen>
 8003856:	9003      	str	r0, [sp, #12]
 8003858:	4658      	mov	r0, fp
 800385a:	f7fc fc55 	bl	8000108 <strlen>
 800385e:	9b03      	ldr	r3, [sp, #12]
 8003860:	4283      	cmp	r3, r0
 8003862:	d84d      	bhi.n	8003900 <GetGSMReply+0x184>
			gsmER = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	4652      	mov	r2, sl
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e7b2      	b.n	80037d2 <GetGSMReply+0x56>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800386c:	260c      	movs	r6, #12
 800386e:	4c4e      	ldr	r4, [pc, #312]	; (80039a8 <GetGSMReply+0x22c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003870:	9810      	ldr	r0, [sp, #64]	; 0x40
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003872:	6823      	ldr	r3, [r4, #0]
	char newline[2] = "\r\n";
 8003874:	4d4d      	ldr	r5, [pc, #308]	; (80039ac <GetGSMReply+0x230>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003876:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003878:	f7fc fc46 	bl	8000108 <strlen>
 800387c:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <GetGSMReply+0x234>)
 800387e:	b282      	uxth	r2, r0
 8003880:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003882:	0020      	movs	r0, r4
 8003884:	f007 f9aa 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003888:	ab04      	add	r3, sp, #16
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800388a:	2202      	movs	r2, #2
 800388c:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 800388e:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003890:	0020      	movs	r0, r4
 8003892:	230a      	movs	r3, #10
 8003894:	f007 f9a2 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003898:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800389a:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800389c:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800389e:	f7fc fc33 	bl	8000108 <strlen>
 80038a2:	0039      	movs	r1, r7
 80038a4:	b282      	uxth	r2, r0
 80038a6:	4b42      	ldr	r3, [pc, #264]	; (80039b0 <GetGSMReply+0x234>)
 80038a8:	0020      	movs	r0, r4
 80038aa:	f007 f997 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80038ae:	ab04      	add	r3, sp, #16
 80038b0:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80038b2:	2202      	movs	r2, #2
 80038b4:	230a      	movs	r3, #10
 80038b6:	0020      	movs	r0, r4
 80038b8:	a905      	add	r1, sp, #20
 80038ba:	f007 f98f 	bl	800abdc <HAL_UART_Transmit>
		return "";
 80038be:	483d      	ldr	r0, [pc, #244]	; (80039b4 <GetGSMReply+0x238>)
}
 80038c0:	e794      	b.n	80037ec <GetGSMReply+0x70>
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 80038c2:	0038      	movs	r0, r7
 80038c4:	9902      	ldr	r1, [sp, #8]
 80038c6:	f00b f90d 	bl	800eae4 <strstr>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d105      	bne.n	80038da <GetGSMReply+0x15e>
 80038ce:	0038      	movs	r0, r7
 80038d0:	4939      	ldr	r1, [pc, #228]	; (80039b8 <GetGSMReply+0x23c>)
 80038d2:	f00b f907 	bl	800eae4 <strstr>
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d0c4      	beq.n	8003864 <GetGSMReply+0xe8>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80038da:	220c      	movs	r2, #12
 80038dc:	4c32      	ldr	r4, [pc, #200]	; (80039a8 <GetGSMReply+0x22c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80038de:	4937      	ldr	r1, [pc, #220]	; (80039bc <GetGSMReply+0x240>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80038e0:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80038e2:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80038e4:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80038e6:	4b32      	ldr	r3, [pc, #200]	; (80039b0 <GetGSMReply+0x234>)
 80038e8:	3a03      	subs	r2, #3
 80038ea:	f007 f977 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <GetGSMReply+0x230>)
 80038f0:	a905      	add	r1, sp, #20
 80038f2:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80038f4:	2202      	movs	r2, #2
 80038f6:	230a      	movs	r3, #10
 80038f8:	0020      	movs	r0, r4
 80038fa:	f007 f96f 	bl	800abdc <HAL_UART_Transmit>
}
 80038fe:	e76d      	b.n	80037dc <GetGSMReply+0x60>
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 8003900:	4648      	mov	r0, r9
 8003902:	2200      	movs	r2, #0
 8003904:	4659      	mov	r1, fp
 8003906:	f00b f8e8 	bl	800eada <strtok_r>
 800390a:	4681      	mov	r9, r0
							if (strlen(p1) < 88)
 800390c:	f7fc fbfc 	bl	8000108 <strlen>
 8003910:	2857      	cmp	r0, #87	; 0x57
 8003912:	d8a7      	bhi.n	8003864 <GetGSMReply+0xe8>
								strcpy(GSMReply, p1);
 8003914:	1c42      	adds	r2, r0, #1
 8003916:	4649      	mov	r1, r9
 8003918:	4640      	mov	r0, r8
 800391a:	f00b fa05 	bl	800ed28 <memcpy>
								break;
 800391e:	e75d      	b.n	80037dc <GetGSMReply+0x60>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003920:	220c      	movs	r2, #12
 8003922:	4c21      	ldr	r4, [pc, #132]	; (80039a8 <GetGSMReply+0x22c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003924:	4926      	ldr	r1, [pc, #152]	; (80039c0 <GetGSMReply+0x244>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <GetGSMReply+0x234>)
 800392c:	3204      	adds	r2, #4
 800392e:	0020      	movs	r0, r4
 8003930:	f007 f954 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <GetGSMReply+0x230>)
 8003936:	a905      	add	r1, sp, #20
 8003938:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800393a:	2202      	movs	r2, #2
 800393c:	230a      	movs	r3, #10
 800393e:	0020      	movs	r0, r4
 8003940:	f007 f94c 	bl	800abdc <HAL_UART_Transmit>
					HAL_Delay(5000);memset(GSMData, 0, 4500);
 8003944:	481a      	ldr	r0, [pc, #104]	; (80039b0 <GetGSMReply+0x234>)
 8003946:	f004 f855 	bl	80079f4 <HAL_Delay>
 800394a:	2100      	movs	r1, #0
 800394c:	0028      	movs	r0, r5
 800394e:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <GetGSMReply+0x248>)
 8003950:	f00b f818 	bl	800e984 <memset>
								break;}
 8003954:	e742      	b.n	80037dc <GetGSMReply+0x60>
					if( strlen(pq) >95) {Debug_Tx("GSM Data oveload2");
 8003956:	4681      	mov	r9, r0
 8003958:	f7fc fbd6 	bl	8000108 <strlen>
 800395c:	0002      	movs	r2, r0
 800395e:	285f      	cmp	r0, #95	; 0x5f
 8003960:	d912      	bls.n	8003988 <GetGSMReply+0x20c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003962:	220c      	movs	r2, #12
 8003964:	4c10      	ldr	r4, [pc, #64]	; (80039a8 <GetGSMReply+0x22c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003966:	4918      	ldr	r1, [pc, #96]	; (80039c8 <GetGSMReply+0x24c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800396c:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <GetGSMReply+0x234>)
 800396e:	3205      	adds	r2, #5
 8003970:	e7dd      	b.n	800392e <GetGSMReply+0x1b2>
					if( strlen(p) >95) {Debug_Tx("GSM Data oveload3");
 8003972:	f7fc fbc9 	bl	8000108 <strlen>
 8003976:	0002      	movs	r2, r0
 8003978:	285f      	cmp	r0, #95	; 0x5f
 800397a:	d905      	bls.n	8003988 <GetGSMReply+0x20c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800397c:	220c      	movs	r2, #12
 800397e:	4c0a      	ldr	r4, [pc, #40]	; (80039a8 <GetGSMReply+0x22c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003980:	4912      	ldr	r1, [pc, #72]	; (80039cc <GetGSMReply+0x250>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003986:	e7f1      	b.n	800396c <GetGSMReply+0x1f0>
					strcpy(GSMReply, p);
 8003988:	4649      	mov	r1, r9
 800398a:	4640      	mov	r0, r8
 800398c:	3201      	adds	r2, #1
 800398e:	f00b f9cb 	bl	800ed28 <memcpy>
					break;
 8003992:	e723      	b.n	80037dc <GetGSMReply+0x60>
 8003994:	20001ca8 	.word	0x20001ca8
 8003998:	200018c0 	.word	0x200018c0
 800399c:	20004558 	.word	0x20004558
 80039a0:	080127b4 	.word	0x080127b4
 80039a4:	200006c8 	.word	0x200006c8
 80039a8:	200049ac 	.word	0x200049ac
 80039ac:	00000a0d 	.word	0x00000a0d
 80039b0:	00001388 	.word	0x00001388
 80039b4:	08012bf4 	.word	0x08012bf4
 80039b8:	080127bc 	.word	0x080127bc
 80039bc:	080127c4 	.word	0x080127c4
 80039c0:	08012778 	.word	0x08012778
 80039c4:	00001194 	.word	0x00001194
 80039c8:	0801278c 	.word	0x0801278c
 80039cc:	080127a0 	.word	0x080127a0

080039d0 <GSMSigQuality>:

int GSMSigQuality()
{
	GSMSignal = 0;
 80039d0:	2300      	movs	r3, #0
{
 80039d2:	b530      	push	{r4, r5, lr}
	GSMSignal = 0;
 80039d4:	4c2a      	ldr	r4, [pc, #168]	; (8003a80 <GSMSigQuality+0xb0>)
{
 80039d6:	b087      	sub	sp, #28
	SendGSMCode(" AT+CSQ");
 80039d8:	482a      	ldr	r0, [pc, #168]	; (8003a84 <GSMSigQuality+0xb4>)
	GSMSignal = 0;
 80039da:	6023      	str	r3, [r4, #0]
	SendGSMCode(" AT+CSQ");
 80039dc:	f7ff fd42 	bl	8003464 <SendGSMCode>
	HAL_Delay(100);
 80039e0:	2064      	movs	r0, #100	; 0x64
 80039e2:	f004 f807 	bl	80079f4 <HAL_Delay>
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 80039e6:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <GSMSigQuality+0xb8>)
 80039e8:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <GSMSigQuality+0xbc>)
 80039ea:	9202      	str	r2, [sp, #8]
 80039ec:	4a28      	ldr	r2, [pc, #160]	; (8003a90 <GSMSigQuality+0xc0>)
 80039ee:	4929      	ldr	r1, [pc, #164]	; (8003a94 <GSMSigQuality+0xc4>)
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	2000      	movs	r0, #0
 80039f4:	9201      	str	r2, [sp, #4]
 80039f6:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <GSMSigQuality+0xc8>)
 80039f8:	9200      	str	r2, [sp, #0]
 80039fa:	2205      	movs	r2, #5
 80039fc:	f7ff febe 	bl	800377c <GetGSMReply>
 8003a00:	2100      	movs	r1, #0
 8003a02:	f009 ff31 	bl	800d868 <strtod>
 8003a06:	f7ff fb9b 	bl	8003140 <__aeabi_d2f>

	if (GSMSignal > 5)
 8003a0a:	4924      	ldr	r1, [pc, #144]	; (8003a9c <GSMSigQuality+0xcc>)
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8003a0c:	6020      	str	r0, [r4, #0]
	if (GSMSignal > 5)
 8003a0e:	f7fc fd71 	bl	80004f4 <__aeabi_fcmpgt>
 8003a12:	2800      	cmp	r0, #0
 8003a14:	d01b      	beq.n	8003a4e <GSMSigQuality+0x7e>
	}
}

static void SET_LED_NET(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 8003a16:	2201      	movs	r2, #1
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4821      	ldr	r0, [pc, #132]	; (8003aa0 <GSMSigQuality+0xd0>)
 8003a1c:	f004 feb2 	bl	8008784 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a20:	220c      	movs	r2, #12
 8003a22:	4d20      	ldr	r5, [pc, #128]	; (8003aa4 <GSMSigQuality+0xd4>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003a24:	4920      	ldr	r1, [pc, #128]	; (8003aa8 <GSMSigQuality+0xd8>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a26:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003a28:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a2a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <GSMSigQuality+0xdc>)
 8003a2e:	3a04      	subs	r2, #4
 8003a30:	f007 f8d4 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <GSMSigQuality+0xe0>)
 8003a36:	a905      	add	r1, sp, #20
 8003a38:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	230a      	movs	r3, #10
 8003a3e:	0028      	movs	r0, r5
 8003a40:	f007 f8cc 	bl	800abdc <HAL_UART_Transmit>
		//	RestartGSM();
		//restartGSMuart();
		//Debug_Tx("GSMTRstarted");
		SET_LED_NET(0);
	}
	return (GSMSignal); // must be higher than 5 ,range 0-33
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	f7fd fc31 	bl	80012ac <__aeabi_f2iz>
}
 8003a4a:	b007      	add	sp, #28
 8003a4c:	bd30      	pop	{r4, r5, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a4e:	220c      	movs	r2, #12
 8003a50:	4d14      	ldr	r5, [pc, #80]	; (8003aa4 <GSMSigQuality+0xd4>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003a52:	4918      	ldr	r1, [pc, #96]	; (8003ab4 <GSMSigQuality+0xe4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a54:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003a56:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003a58:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003a5a:	4b14      	ldr	r3, [pc, #80]	; (8003aac <GSMSigQuality+0xdc>)
 8003a5c:	3201      	adds	r2, #1
 8003a5e:	f007 f8bd 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <GSMSigQuality+0xe0>)
 8003a64:	a905      	add	r1, sp, #20
 8003a66:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003a68:	2202      	movs	r2, #2
 8003a6a:	230a      	movs	r3, #10
 8003a6c:	0028      	movs	r0, r5
 8003a6e:	f007 f8b5 	bl	800abdc <HAL_UART_Transmit>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2102      	movs	r1, #2
 8003a76:	480a      	ldr	r0, [pc, #40]	; (8003aa0 <GSMSigQuality+0xd0>)
 8003a78:	f004 fe84 	bl	8008784 <HAL_GPIO_WritePin>
 8003a7c:	e7e2      	b.n	8003a44 <GSMSigQuality+0x74>
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	20001d0c 	.word	0x20001d0c
 8003a84:	080127d0 	.word	0x080127d0
 8003a88:	080127e4 	.word	0x080127e4
 8003a8c:	080127d8 	.word	0x080127d8
 8003a90:	200000c8 	.word	0x200000c8
 8003a94:	080127dc 	.word	0x080127dc
 8003a98:	080127e8 	.word	0x080127e8
 8003a9c:	40a00000 	.word	0x40a00000
 8003aa0:	50000c00 	.word	0x50000c00
 8003aa4:	200049ac 	.word	0x200049ac
 8003aa8:	08012808 	.word	0x08012808
 8003aac:	00001388 	.word	0x00001388
 8003ab0:	00000a0d 	.word	0x00000a0d
 8003ab4:	08012814 	.word	0x08012814

08003ab8 <GSMSimOperator>:

char *GSMSimOperator()
{
 8003ab8:	b500      	push	{lr}

	SendGSMCode("  AT+COPS?");
 8003aba:	4809      	ldr	r0, [pc, #36]	; (8003ae0 <GSMSimOperator+0x28>)
{
 8003abc:	b085      	sub	sp, #20
	SendGSMCode("  AT+COPS?");
 8003abe:	f7ff fcd1 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8003ac2:	4a08      	ldr	r2, [pc, #32]	; (8003ae4 <GSMSimOperator+0x2c>)
 8003ac4:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <GSMSimOperator+0x30>)
 8003ac6:	9202      	str	r2, [sp, #8]
 8003ac8:	4a08      	ldr	r2, [pc, #32]	; (8003aec <GSMSimOperator+0x34>)
 8003aca:	4909      	ldr	r1, [pc, #36]	; (8003af0 <GSMSimOperator+0x38>)
 8003acc:	9201      	str	r2, [sp, #4]
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <GSMSimOperator+0x3c>)
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	9200      	str	r2, [sp, #0]
 8003ad4:	220c      	movs	r2, #12
 8003ad6:	f7ff fe51 	bl	800377c <GetGSMReply>
}
 8003ada:	b005      	add	sp, #20
 8003adc:	bd00      	pop	{pc}
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	08012824 	.word	0x08012824
 8003ae4:	080128d8 	.word	0x080128d8
 8003ae8:	080128cc 	.word	0x080128cc
 8003aec:	00001388 	.word	0x00001388
 8003af0:	08012830 	.word	0x08012830
 8003af4:	08012838 	.word	0x08012838

08003af8 <GSMIMEI>:

	return (0);
}

char *GSMIMEI()
{
 8003af8:	b500      	push	{lr}
	SendGSMCode(" AT+QGSN");
 8003afa:	4809      	ldr	r0, [pc, #36]	; (8003b20 <GSMIMEI+0x28>)
{
 8003afc:	b085      	sub	sp, #20
	SendGSMCode(" AT+QGSN");
 8003afe:	f7ff fcb1 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <GSMIMEI+0x2c>)
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <GSMIMEI+0x30>)
 8003b06:	9202      	str	r2, [sp, #8]
 8003b08:	4a08      	ldr	r2, [pc, #32]	; (8003b2c <GSMIMEI+0x34>)
 8003b0a:	4909      	ldr	r1, [pc, #36]	; (8003b30 <GSMIMEI+0x38>)
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	2000      	movs	r0, #0
 8003b10:	9201      	str	r2, [sp, #4]
 8003b12:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <GSMIMEI+0x3c>)
 8003b14:	9200      	str	r2, [sp, #0]
 8003b16:	2208      	movs	r2, #8
 8003b18:	f7ff fe30 	bl	800377c <GetGSMReply>
}
 8003b1c:	b005      	add	sp, #20
 8003b1e:	bd00      	pop	{pc}
 8003b20:	0801285c 	.word	0x0801285c
 8003b24:	080128d8 	.word	0x080128d8
 8003b28:	080128cc 	.word	0x080128cc
 8003b2c:	200000c8 	.word	0x200000c8
 8003b30:	08012868 	.word	0x08012868
 8003b34:	08012870 	.word	0x08012870

08003b38 <StartTCPConnection>:
*/
	return 0;
}

void StartTCPConnection(int n)
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	46ce      	mov	lr, r9
 8003b3c:	4647      	mov	r7, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b3e:	220c      	movs	r2, #12
 8003b40:	b580      	push	{r7, lr}
 8003b42:	4d3a      	ldr	r5, [pc, #232]	; (8003c2c <StartTCPConnection+0xf4>)
 8003b44:	b087      	sub	sp, #28
 8003b46:	682b      	ldr	r3, [r5, #0]
 8003b48:	0006      	movs	r6, r0
 8003b4a:	621a      	str	r2, [r3, #32]
 8003b4c:	4691      	mov	r9, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003b4e:	4938      	ldr	r1, [pc, #224]	; (8003c30 <StartTCPConnection+0xf8>)
 8003b50:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <StartTCPConnection+0xfc>)
 8003b52:	320e      	adds	r2, #14
 8003b54:	0028      	movs	r0, r5
 8003b56:	f007 f841 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003b5a:	466b      	mov	r3, sp
 8003b5c:	4f36      	ldr	r7, [pc, #216]	; (8003c38 <StartTCPConnection+0x100>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b5e:	a905      	add	r1, sp, #20
 8003b60:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003b62:	829f      	strh	r7, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b64:	0028      	movs	r0, r5
 8003b66:	230a      	movs	r3, #10
 8003b68:	f007 f838 	bl	800abdc <HAL_UART_Transmit>
	Debug_Tx("Conncting Session with IP:");
	Debug_Tx(ip[n]);
 8003b6c:	00b3      	lsls	r3, r6, #2
 8003b6e:	4698      	mov	r8, r3
 8003b70:	199b      	adds	r3, r3, r6
 8003b72:	009a      	lsls	r2, r3, #2
 8003b74:	189b      	adds	r3, r3, r2
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b76:	464a      	mov	r2, r9
 8003b78:	4c30      	ldr	r4, [pc, #192]	; (8003c3c <StartTCPConnection+0x104>)
 8003b7a:	18e4      	adds	r4, r4, r3
 8003b7c:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003b7e:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003b80:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003b82:	f7fc fac1 	bl	8000108 <strlen>
 8003b86:	0021      	movs	r1, r4
 8003b88:	b282      	uxth	r2, r0
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <StartTCPConnection+0xfc>)
 8003b8c:	0028      	movs	r0, r5
 8003b8e:	f007 f825 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003b92:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b94:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003b96:	829f      	strh	r7, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003b98:	0028      	movs	r0, r5
 8003b9a:	230a      	movs	r3, #10
 8003b9c:	a905      	add	r1, sp, #20
 8003b9e:	f007 f81d 	bl	800abdc <HAL_UART_Transmit>
	int ck = 1;
	if (strlen(ip[n]) > 4)
 8003ba2:	0020      	movs	r0, r4
 8003ba4:	f7fc fab0 	bl	8000108 <strlen>
 8003ba8:	2804      	cmp	r0, #4
 8003baa:	d804      	bhi.n	8003bb6 <StartTCPConnection+0x7e>
		}
		else {tcp_stat[n]=0;}
	}


}
 8003bac:	b007      	add	sp, #28
 8003bae:	bcc0      	pop	{r6, r7}
 8003bb0:	46b9      	mov	r9, r7
 8003bb2:	46b0      	mov	r8, r6
 8003bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SendGSMCode("AT+QISRVC=1");
 8003bb6:	4822      	ldr	r0, [pc, #136]	; (8003c40 <StartTCPConnection+0x108>)
 8003bb8:	f7ff fc54 	bl	8003464 <SendGSMCode>
		HAL_Delay(1500);
 8003bbc:	4821      	ldr	r0, [pc, #132]	; (8003c44 <StartTCPConnection+0x10c>)
 8003bbe:	f003 ff19 	bl	80079f4 <HAL_Delay>
		memset(GSMDataC, 0, 100);
 8003bc2:	4d21      	ldr	r5, [pc, #132]	; (8003c48 <StartTCPConnection+0x110>)
 8003bc4:	2264      	movs	r2, #100	; 0x64
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	0028      	movs	r0, r5
 8003bca:	f00a fedb 	bl	800e984 <memset>
		sprintf(GSMDataC, (char *)" AT+QIOPEN=%d,\"TCP\",\"",n);
 8003bce:	0032      	movs	r2, r6
 8003bd0:	491e      	ldr	r1, [pc, #120]	; (8003c4c <StartTCPConnection+0x114>)
 8003bd2:	0028      	movs	r0, r5
 8003bd4:	f00a fe6a 	bl	800e8ac <siprintf>
		strcat(GSMDataC,ip[n]);
 8003bd8:	0021      	movs	r1, r4
 8003bda:	0028      	movs	r0, r5
 8003bdc:	f00a feda 	bl	800e994 <strcat>
		tcp_stat[n]=0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	4642      	mov	r2, r8
 8003be4:	4e1a      	ldr	r6, [pc, #104]	; (8003c50 <StartTCPConnection+0x118>)
		gprsok = 0;
 8003be6:	4c1b      	ldr	r4, [pc, #108]	; (8003c54 <StartTCPConnection+0x11c>)
		tcp_stat[n]=0;
 8003be8:	5193      	str	r3, [r2, r6]
			SendGSMCode(GSMDataC);
 8003bea:	0028      	movs	r0, r5
		gprsok = 0;
 8003bec:	6023      	str	r3, [r4, #0]
			SendGSMCode(GSMDataC);
 8003bee:	f7ff fc39 	bl	8003464 <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN TCP Connection open ", gpsto_net, "CONNECT OK"));
 8003bf2:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <StartTCPConnection+0x120>)
 8003bf4:	4919      	ldr	r1, [pc, #100]	; (8003c5c <StartTCPConnection+0x124>)
 8003bf6:	9302      	str	r3, [sp, #8]
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <StartTCPConnection+0x128>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2000      	movs	r0, #0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <StartTCPConnection+0x12c>)
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	000b      	movs	r3, r1
 8003c08:	f7ff fdb8 	bl	800377c <GetGSMReply>
 8003c0c:	f7fc fa7c 	bl	8000108 <strlen>
 8003c10:	6020      	str	r0, [r4, #0]
		if(gprsok>0){
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d102      	bne.n	8003c1c <StartTCPConnection+0xe4>
		else {tcp_stat[n]=0;}
 8003c16:	4643      	mov	r3, r8
 8003c18:	5198      	str	r0, [r3, r6]
}
 8003c1a:	e7c7      	b.n	8003bac <StartTCPConnection+0x74>
			tcp_stat[n]=1;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4642      	mov	r2, r8
			HAL_Delay(500);
 8003c20:	20fa      	movs	r0, #250	; 0xfa
			tcp_stat[n]=1;
 8003c22:	5193      	str	r3, [r2, r6]
			HAL_Delay(500);
 8003c24:	0040      	lsls	r0, r0, #1
 8003c26:	f003 fee5 	bl	80079f4 <HAL_Delay>
 8003c2a:	e7bf      	b.n	8003bac <StartTCPConnection+0x74>
 8003c2c:	200049ac 	.word	0x200049ac
 8003c30:	08012890 	.word	0x08012890
 8003c34:	00001388 	.word	0x00001388
 8003c38:	00000a0d 	.word	0x00000a0d
 8003c3c:	200000d0 	.word	0x200000d0
 8003c40:	080128ac 	.word	0x080128ac
 8003c44:	000005dc 	.word	0x000005dc
 8003c48:	2000185c 	.word	0x2000185c
 8003c4c:	080128b8 	.word	0x080128b8
 8003c50:	20004a98 	.word	0x20004a98
 8003c54:	200040dc 	.word	0x200040dc
 8003c58:	080128d0 	.word	0x080128d0
 8003c5c:	08012bf4 	.word	0x08012bf4
 8003c60:	200000cc 	.word	0x200000cc
 8003c64:	080128dc 	.word	0x080128dc

08003c68 <StopTCPConnection>:
void StopTCPConnection(int n)
{
	int ck = 1;
	gprsok = 0;
 8003c68:	2300      	movs	r3, #0
{
 8003c6a:	b570      	push	{r4, r5, r6, lr}
	if (strlen(ip[n]) > 4)
 8003c6c:	0085      	lsls	r5, r0, #2
	gprsok = 0;
 8003c6e:	4e16      	ldr	r6, [pc, #88]	; (8003cc8 <StopTCPConnection+0x60>)
	if (strlen(ip[n]) > 4)
 8003c70:	182a      	adds	r2, r5, r0
	gprsok = 0;
 8003c72:	6033      	str	r3, [r6, #0]
	if (strlen(ip[n]) > 4)
 8003c74:	0091      	lsls	r1, r2, #2
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <StopTCPConnection+0x64>)
 8003c78:	1852      	adds	r2, r2, r1
{
 8003c7a:	0004      	movs	r4, r0
 8003c7c:	b084      	sub	sp, #16
	if (strlen(ip[n]) > 4)
 8003c7e:	1898      	adds	r0, r3, r2
 8003c80:	f7fc fa42 	bl	8000108 <strlen>
 8003c84:	2804      	cmp	r0, #4
 8003c86:	d919      	bls.n	8003cbc <StopTCPConnection+0x54>
	{
		while ((ck > 0) && (gprsok < 1))
		{
			ck = ck - 1;
			sprintf(GSMDataC, (char *)" AT+QICLOSE=%d",n);
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <StopTCPConnection+0x68>)
 8003c8a:	0022      	movs	r2, r4
 8003c8c:	001c      	movs	r4, r3
 8003c8e:	0018      	movs	r0, r3
 8003c90:	4910      	ldr	r1, [pc, #64]	; (8003cd4 <StopTCPConnection+0x6c>)
 8003c92:	f00a fe0b 	bl	800e8ac <siprintf>
			SendGSMCode(GSMDataC);
 8003c96:	0020      	movs	r0, r4
 8003c98:	f7ff fbe4 	bl	8003464 <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <StopTCPConnection+0x70>)
 8003c9e:	490f      	ldr	r1, [pc, #60]	; (8003cdc <StopTCPConnection+0x74>)
 8003ca0:	9302      	str	r3, [sp, #8]
 8003ca2:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <StopTCPConnection+0x78>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2005      	movs	r0, #5
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <StopTCPConnection+0x7c>)
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	000b      	movs	r3, r1
 8003cb2:	f7ff fd63 	bl	800377c <GetGSMReply>
 8003cb6:	f7fc fa27 	bl	8000108 <strlen>
 8003cba:	6030      	str	r0, [r6, #0]

		}
	}
	tcp_stat[n]=0;
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <StopTCPConnection+0x80>)
 8003cc0:	515a      	str	r2, [r3, r5]
}
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bd70      	pop	{r4, r5, r6, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	200040dc 	.word	0x200040dc
 8003ccc:	200000d0 	.word	0x200000d0
 8003cd0:	2000185c 	.word	0x2000185c
 8003cd4:	08012904 	.word	0x08012904
 8003cd8:	08012914 	.word	0x08012914
 8003cdc:	08012bf4 	.word	0x08012bf4
 8003ce0:	200000c8 	.word	0x200000c8
 8003ce4:	08012920 	.word	0x08012920
 8003ce8:	20004a98 	.word	0x20004a98

08003cec <SendTCPdata>:
void SendTCPdata(char *data,int n)
{
 8003cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cee:	46de      	mov	lr, fp
 8003cf0:	4645      	mov	r5, r8
 8003cf2:	4657      	mov	r7, sl
 8003cf4:	464e      	mov	r6, r9
 8003cf6:	b5e0      	push	{r5, r6, r7, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003cf8:	250c      	movs	r5, #12
 8003cfa:	4ee0      	ldr	r6, [pc, #896]	; (800407c <SendTCPdata+0x390>)
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	6833      	ldr	r3, [r6, #0]
 8003d00:	4680      	mov	r8, r0
 8003d02:	621d      	str	r5, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d04:	220b      	movs	r2, #11
 8003d06:	4bde      	ldr	r3, [pc, #888]	; (8004080 <SendTCPdata+0x394>)
 8003d08:	000f      	movs	r7, r1
 8003d0a:	0030      	movs	r0, r6
 8003d0c:	49dd      	ldr	r1, [pc, #884]	; (8004084 <SendTCPdata+0x398>)
 8003d0e:	f006 ff65 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003d12:	466b      	mov	r3, sp
 8003d14:	4cdc      	ldr	r4, [pc, #880]	; (8004088 <SendTCPdata+0x39c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d16:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003d18:	809c      	strh	r4, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d1a:	a901      	add	r1, sp, #4
 8003d1c:	230a      	movs	r3, #10
 8003d1e:	0030      	movs	r0, r6
 8003d20:	f006 ff5c 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d24:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d26:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003d28:	621d      	str	r5, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003d2a:	f7fc f9ed 	bl	8000108 <strlen>
 8003d2e:	4641      	mov	r1, r8
 8003d30:	b282      	uxth	r2, r0
 8003d32:	4bd3      	ldr	r3, [pc, #844]	; (8004080 <SendTCPdata+0x394>)
 8003d34:	0030      	movs	r0, r6
 8003d36:	f006 ff51 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003d3a:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d3c:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003d3e:	809c      	strh	r4, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003d40:	0030      	movs	r0, r6
 8003d42:	230a      	movs	r3, #10
 8003d44:	a901      	add	r1, sp, #4
 8003d46:	f006 ff49 	bl	800abdc <HAL_UART_Transmit>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003d4a:	4cd0      	ldr	r4, [pc, #832]	; (800408c <SendTCPdata+0x3a0>)
 8003d4c:	3d02      	subs	r5, #2
 8003d4e:	7823      	ldrb	r3, [r4, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d103      	bne.n	8003d5c <SendTCPdata+0x70>
 8003d54:	e00e      	b.n	8003d74 <SendTCPdata+0x88>
 8003d56:	3d01      	subs	r5, #1
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	d00b      	beq.n	8003d74 <SendTCPdata+0x88>
		memset(GSMData, 0, 4500);
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4acc      	ldr	r2, [pc, #816]	; (8004090 <SendTCPdata+0x3a4>)
 8003d60:	0020      	movs	r0, r4
 8003d62:	f00a fe0f 	bl	800e984 <memset>
		HAL_Delay(2000);
 8003d66:	20fa      	movs	r0, #250	; 0xfa
 8003d68:	00c0      	lsls	r0, r0, #3
 8003d6a:	f003 fe43 	bl	80079f4 <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003d6e:	7823      	ldrb	r3, [r4, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <SendTCPdata+0x6a>
	Debug_Tx("DATATOSEND:");Debug_Tx(data);
	//HAL_Delay(10000);
	Wait_gsmClear(10);

	int ck = 1;
	if (strlen(ip[n]) > 4)
 8003d74:	00bb      	lsls	r3, r7, #2
 8003d76:	4699      	mov	r9, r3
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	4dc6      	ldr	r5, [pc, #792]	; (8004094 <SendTCPdata+0x3a8>)
 8003d7c:	009a      	lsls	r2, r3, #2
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	18ed      	adds	r5, r5, r3
 8003d82:	0028      	movs	r0, r5
 8003d84:	f7fc f9c0 	bl	8000108 <strlen>
 8003d88:	2804      	cmp	r0, #4
 8003d8a:	d956      	bls.n	8003e3a <SendTCPdata+0x14e>
	{
		if (tcp_stat[n] <1)	{ StartTCPConnection(n);}
 8003d8c:	464a      	mov	r2, r9
 8003d8e:	4bc2      	ldr	r3, [pc, #776]	; (8004098 <SendTCPdata+0x3ac>)
 8003d90:	469a      	mov	sl, r3
 8003d92:	58d3      	ldr	r3, [r2, r3]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	dd57      	ble.n	8003e48 <SendTCPdata+0x15c>
		if (tcp_stat[n] > 0)
		{
			ck = 1;
			gprsok = 0;
 8003d98:	4bc0      	ldr	r3, [pc, #768]	; (800409c <SendTCPdata+0x3b0>)
			//while ((ck > 0) && (gprsok < 1))
			{
				ck = ck - 1;

				sprintf(GSMDataC, (char *)" AT+QISEND=%d,%d",n,strlen(data)+1);
 8003d9a:	4640      	mov	r0, r8
			gprsok = 0;
 8003d9c:	4699      	mov	r9, r3
 8003d9e:	2300      	movs	r3, #0
 8003da0:	469a      	mov	sl, r3
 8003da2:	464b      	mov	r3, r9
 8003da4:	4652      	mov	r2, sl
 8003da6:	601a      	str	r2, [r3, #0]
				sprintf(GSMDataC, (char *)" AT+QISEND=%d,%d",n,strlen(data)+1);
 8003da8:	f7fc f9ae 	bl	8000108 <strlen>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	48bc      	ldr	r0, [pc, #752]	; (80040a0 <SendTCPdata+0x3b4>)
 8003db0:	003a      	movs	r2, r7
 8003db2:	4683      	mov	fp, r0
 8003db4:	49bb      	ldr	r1, [pc, #748]	; (80040a4 <SendTCPdata+0x3b8>)
 8003db6:	f00a fd79 	bl	800e8ac <siprintf>
				//memset(GSMData, 0, 4500);
				SendGSMCode(GSMDataC);
 8003dba:	4658      	mov	r0, fp
 8003dbc:	f7ff fb52 	bl	8003464 <SendGSMCode>
				gprsok = waitForResponse(">",9000);
 8003dc0:	48b9      	ldr	r0, [pc, #740]	; (80040a8 <SendTCPdata+0x3bc>)
 8003dc2:	49ba      	ldr	r1, [pc, #744]	; (80040ac <SendTCPdata+0x3c0>)
 8003dc4:	f7ff fc90 	bl	80036e8 <waitForResponse>
 8003dc8:	464b      	mov	r3, r9
 8003dca:	6018      	str	r0, [r3, #0]
				//gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data input1", 4000, ">"));
			}
			if (gprsok > 0)
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	dc00      	bgt.n	8003dd2 <SendTCPdata+0xe6>
 8003dd0:	e0e5      	b.n	8003f9e <SendTCPdata+0x2b2>
			{
				ck = 1;
				gprsok = 0;
 8003dd2:	4652      	mov	r2, sl
				//while ((ck > 0) && (gprsok < 1))
				{
					ck = ck - 1;
					//memset(GSMData, 0, 4500);
					SendGSMData(data); // Debug_Tx(GSMData);
 8003dd4:	4640      	mov	r0, r8
				gprsok = 0;
 8003dd6:	601a      	str	r2, [r3, #0]
					SendGSMData(data); // Debug_Tx(GSMData);
 8003dd8:	f7ff fc14 	bl	8003604 <SendGSMData>
					gprsok = waitForResponse("SEND OK",18000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 8003ddc:	48b4      	ldr	r0, [pc, #720]	; (80040b0 <SendTCPdata+0x3c4>)
 8003dde:	49b5      	ldr	r1, [pc, #724]	; (80040b4 <SendTCPdata+0x3c8>)
 8003de0:	f7ff fc82 	bl	80036e8 <waitForResponse>
 8003de4:	464b      	mov	r3, r9
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003de6:	220c      	movs	r2, #12
 8003de8:	6018      	str	r0, [r3, #0]
 8003dea:	6833      	ldr	r3, [r6, #0]

				}
				if (gprsok<1){
 8003dec:	2800      	cmp	r0, #0
 8003dee:	dd61      	ble.n	8003eb4 <SendTCPdata+0x1c8>
 8003df0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003df2:	49b1      	ldr	r1, [pc, #708]	; (80040b8 <SendTCPdata+0x3cc>)
 8003df4:	4ba2      	ldr	r3, [pc, #648]	; (8004080 <SendTCPdata+0x394>)
 8003df6:	3a04      	subs	r2, #4
 8003df8:	0030      	movs	r0, r6
 8003dfa:	f006 feef 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003dfe:	466a      	mov	r2, sp
 8003e00:	4ba1      	ldr	r3, [pc, #644]	; (8004088 <SendTCPdata+0x39c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e02:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 8003e04:	8093      	strh	r3, [r2, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e06:	a901      	add	r1, sp, #4
 8003e08:	230a      	movs	r3, #10
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f006 fee6 	bl	800abdc <HAL_UART_Transmit>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003e10:	7823      	ldrb	r3, [r4, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d011      	beq.n	8003e3a <SendTCPdata+0x14e>
 8003e16:	250a      	movs	r5, #10
 8003e18:	e003      	b.n	8003e22 <SendTCPdata+0x136>
 8003e1a:	3d01      	subs	r5, #1
 8003e1c:	2d00      	cmp	r5, #0
 8003e1e:	d100      	bne.n	8003e22 <SendTCPdata+0x136>
 8003e20:	e0aa      	b.n	8003f78 <SendTCPdata+0x28c>
		memset(GSMData, 0, 4500);
 8003e22:	2100      	movs	r1, #0
 8003e24:	4a9a      	ldr	r2, [pc, #616]	; (8004090 <SendTCPdata+0x3a4>)
 8003e26:	0020      	movs	r0, r4
 8003e28:	f00a fdac 	bl	800e984 <memset>
		HAL_Delay(2000);
 8003e2c:	20fa      	movs	r0, #250	; 0xfa
 8003e2e:	00c0      	lsls	r0, r0, #3
 8003e30:	f003 fde0 	bl	80079f4 <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003e34:	7823      	ldrb	r3, [r4, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ef      	bne.n	8003e1a <SendTCPdata+0x12e>
		}
	}



}
 8003e3a:	b003      	add	sp, #12
 8003e3c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e3e:	46bb      	mov	fp, r7
 8003e40:	46b2      	mov	sl, r6
 8003e42:	46a9      	mov	r9, r5
 8003e44:	46a0      	mov	r8, r4
 8003e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tcp_stat[n] <1)	{ StartTCPConnection(n);}
 8003e48:	0038      	movs	r0, r7
 8003e4a:	f7ff fe75 	bl	8003b38 <StartTCPConnection>
		if (tcp_stat[n] > 0)
 8003e4e:	4653      	mov	r3, sl
 8003e50:	464a      	mov	r2, r9
 8003e52:	58d3      	ldr	r3, [r2, r3]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	dc9f      	bgt.n	8003d98 <SendTCPdata+0xac>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e58:	220c      	movs	r2, #12
 8003e5a:	6833      	ldr	r3, [r6, #0]
 8003e5c:	4690      	mov	r8, r2
 8003e5e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e60:	0030      	movs	r0, r6
 8003e62:	4996      	ldr	r1, [pc, #600]	; (80040bc <SendTCPdata+0x3d0>)
 8003e64:	4b86      	ldr	r3, [pc, #536]	; (8004080 <SendTCPdata+0x394>)
 8003e66:	3224      	adds	r2, #36	; 0x24
 8003e68:	f006 feb8 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003e6c:	466b      	mov	r3, sp
 8003e6e:	4c86      	ldr	r4, [pc, #536]	; (8004088 <SendTCPdata+0x39c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e70:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003e72:	809c      	strh	r4, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e74:	2202      	movs	r2, #2
 8003e76:	230a      	movs	r3, #10
 8003e78:	0030      	movs	r0, r6
 8003e7a:	f006 feaf 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e7e:	4642      	mov	r2, r8
 8003e80:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e82:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003e84:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003e86:	f7fc f93f 	bl	8000108 <strlen>
 8003e8a:	0029      	movs	r1, r5
 8003e8c:	b282      	uxth	r2, r0
 8003e8e:	4b7c      	ldr	r3, [pc, #496]	; (8004080 <SendTCPdata+0x394>)
 8003e90:	0030      	movs	r0, r6
 8003e92:	f006 fea3 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003e96:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e98:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003e9a:	809c      	strh	r4, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003e9c:	a901      	add	r1, sp, #4
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	0030      	movs	r0, r6
 8003ea2:	f006 fe9b 	bl	800abdc <HAL_UART_Transmit>
}

void ResetTCP(int n)
{
	//EndTransfer();
	StopTCPConnection(n);
 8003ea6:	0038      	movs	r0, r7
 8003ea8:	f7ff fede 	bl	8003c68 <StopTCPConnection>
	StartTCPConnection(n);
 8003eac:	0038      	movs	r0, r7
 8003eae:	f7ff fe43 	bl	8003b38 <StartTCPConnection>
}
 8003eb2:	e7c2      	b.n	8003e3a <SendTCPdata+0x14e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003eb4:	4690      	mov	r8, r2
 8003eb6:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003eb8:	4981      	ldr	r1, [pc, #516]	; (80040c0 <SendTCPdata+0x3d4>)
 8003eba:	4b71      	ldr	r3, [pc, #452]	; (8004080 <SendTCPdata+0x394>)
 8003ebc:	3227      	adds	r2, #39	; 0x27
 8003ebe:	0030      	movs	r0, r6
 8003ec0:	f006 fe8c 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003ec4:	466b      	mov	r3, sp
 8003ec6:	4f70      	ldr	r7, [pc, #448]	; (8004088 <SendTCPdata+0x39c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ec8:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003eca:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ecc:	a901      	add	r1, sp, #4
 8003ece:	230a      	movs	r3, #10
 8003ed0:	0030      	movs	r0, r6
 8003ed2:	f006 fe83 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ed6:	4642      	mov	r2, r8
 8003ed8:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003eda:	497a      	ldr	r1, [pc, #488]	; (80040c4 <SendTCPdata+0x3d8>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003edc:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ede:	0030      	movs	r0, r6
 8003ee0:	4b67      	ldr	r3, [pc, #412]	; (8004080 <SendTCPdata+0x394>)
 8003ee2:	3228      	adds	r2, #40	; 0x28
 8003ee4:	4689      	mov	r9, r1
 8003ee6:	f006 fe79 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003eea:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003eec:	a901      	add	r1, sp, #4
 8003eee:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003ef0:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003ef2:	0030      	movs	r0, r6
 8003ef4:	230a      	movs	r3, #10
 8003ef6:	f006 fe71 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003efa:	4642      	mov	r2, r8
 8003efc:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003efe:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f00:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f02:	f7fc f901 	bl	8000108 <strlen>
 8003f06:	0029      	movs	r1, r5
 8003f08:	b282      	uxth	r2, r0
 8003f0a:	4b5d      	ldr	r3, [pc, #372]	; (8004080 <SendTCPdata+0x394>)
 8003f0c:	0030      	movs	r0, r6
 8003f0e:	f006 fe65 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f12:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f14:	a901      	add	r1, sp, #4
 8003f16:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003f18:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f1a:	0030      	movs	r0, r6
 8003f1c:	230a      	movs	r3, #10
 8003f1e:	f006 fe5d 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f22:	4642      	mov	r2, r8
 8003f24:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f26:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f28:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f2a:	f7fc f8ed 	bl	8000108 <strlen>
 8003f2e:	0021      	movs	r1, r4
 8003f30:	b282      	uxth	r2, r0
 8003f32:	4b53      	ldr	r3, [pc, #332]	; (8004080 <SendTCPdata+0x394>)
 8003f34:	0030      	movs	r0, r6
 8003f36:	f006 fe51 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f3a:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f3c:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003f3e:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f40:	a901      	add	r1, sp, #4
 8003f42:	230a      	movs	r3, #10
 8003f44:	0030      	movs	r0, r6
 8003f46:	f006 fe49 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f4a:	4642      	mov	r2, r8
 8003f4c:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f4e:	4649      	mov	r1, r9
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f50:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003f52:	0030      	movs	r0, r6
 8003f54:	4b4a      	ldr	r3, [pc, #296]	; (8004080 <SendTCPdata+0x394>)
 8003f56:	3228      	adds	r2, #40	; 0x28
 8003f58:	f006 fe40 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003f5c:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f5e:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8003f60:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003f62:	a901      	add	r1, sp, #4
 8003f64:	230a      	movs	r3, #10
 8003f66:	0030      	movs	r0, r6
 8003f68:	f006 fe38 	bl	800abdc <HAL_UART_Transmit>
					EndTransfer();
 8003f6c:	f7ff fb8a 	bl	8003684 <EndTransfer>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003f70:	7823      	ldrb	r3, [r4, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d100      	bne.n	8003f78 <SendTCPdata+0x28c>
 8003f76:	e760      	b.n	8003e3a <SendTCPdata+0x14e>
 8003f78:	250a      	movs	r5, #10
 8003f7a:	e003      	b.n	8003f84 <SendTCPdata+0x298>
 8003f7c:	3d01      	subs	r5, #1
 8003f7e:	2d00      	cmp	r5, #0
 8003f80:	d100      	bne.n	8003f84 <SendTCPdata+0x298>
 8003f82:	e75a      	b.n	8003e3a <SendTCPdata+0x14e>
		memset(GSMData, 0, 4500);
 8003f84:	2100      	movs	r1, #0
 8003f86:	4a42      	ldr	r2, [pc, #264]	; (8004090 <SendTCPdata+0x3a4>)
 8003f88:	0020      	movs	r0, r4
 8003f8a:	f00a fcfb 	bl	800e984 <memset>
		HAL_Delay(2000);
 8003f8e:	20fa      	movs	r0, #250	; 0xfa
 8003f90:	00c0      	lsls	r0, r0, #3
 8003f92:	f003 fd2f 	bl	80079f4 <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8003f96:	7823      	ldrb	r3, [r4, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ef      	bne.n	8003f7c <SendTCPdata+0x290>
 8003f9c:	e74d      	b.n	8003e3a <SendTCPdata+0x14e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003f9e:	220c      	movs	r2, #12
 8003fa0:	6833      	ldr	r3, [r6, #0]
 8003fa2:	4691      	mov	r9, r2
 8003fa4:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fa6:	4948      	ldr	r1, [pc, #288]	; (80040c8 <SendTCPdata+0x3dc>)
 8003fa8:	4b35      	ldr	r3, [pc, #212]	; (8004080 <SendTCPdata+0x394>)
 8003faa:	3218      	adds	r2, #24
 8003fac:	0030      	movs	r0, r6
 8003fae:	f006 fe15 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <SendTCPdata+0x39c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fb4:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003fb6:	4698      	mov	r8, r3
 8003fb8:	466b      	mov	r3, sp
 8003fba:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fbc:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 8003fbe:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fc0:	230a      	movs	r3, #10
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f006 fe0a 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fc8:	464a      	mov	r2, r9
 8003fca:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fcc:	493d      	ldr	r1, [pc, #244]	; (80040c4 <SendTCPdata+0x3d8>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fce:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003fd0:	0030      	movs	r0, r6
 8003fd2:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <SendTCPdata+0x394>)
 8003fd4:	3228      	adds	r2, #40	; 0x28
 8003fd6:	468a      	mov	sl, r1
 8003fd8:	f006 fe00 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003fdc:	4642      	mov	r2, r8
 8003fde:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fe0:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8003fe2:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003fe4:	0030      	movs	r0, r6
 8003fe6:	230a      	movs	r3, #10
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f006 fdf7 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003fee:	464a      	mov	r2, r9
 8003ff0:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ff2:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003ff4:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8003ff6:	f7fc f887 	bl	8000108 <strlen>
 8003ffa:	0029      	movs	r1, r5
 8003ffc:	b282      	uxth	r2, r0
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <SendTCPdata+0x394>)
 8004000:	0030      	movs	r0, r6
 8004002:	f006 fdeb 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004006:	4642      	mov	r2, r8
 8004008:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800400a:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800400c:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800400e:	0030      	movs	r0, r6
 8004010:	230a      	movs	r3, #10
 8004012:	2202      	movs	r2, #2
 8004014:	f006 fde2 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004018:	464a      	mov	r2, r9
 800401a:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800401c:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800401e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004020:	f7fc f872 	bl	8000108 <strlen>
 8004024:	0021      	movs	r1, r4
 8004026:	b282      	uxth	r2, r0
 8004028:	4b15      	ldr	r3, [pc, #84]	; (8004080 <SendTCPdata+0x394>)
 800402a:	0030      	movs	r0, r6
 800402c:	f006 fdd6 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004030:	4642      	mov	r2, r8
 8004032:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004034:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8004036:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004038:	0030      	movs	r0, r6
 800403a:	230a      	movs	r3, #10
 800403c:	2202      	movs	r2, #2
 800403e:	f006 fdcd 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004042:	464a      	mov	r2, r9
 8004044:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004046:	4651      	mov	r1, sl
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004048:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800404a:	0030      	movs	r0, r6
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <SendTCPdata+0x394>)
 800404e:	3228      	adds	r2, #40	; 0x28
 8004050:	f006 fdc4 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004054:	4642      	mov	r2, r8
 8004056:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004058:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800405a:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800405c:	0030      	movs	r0, r6
 800405e:	230a      	movs	r3, #10
 8004060:	2202      	movs	r2, #2
 8004062:	f006 fdbb 	bl	800abdc <HAL_UART_Transmit>
				EndTransfer();
 8004066:	f7ff fb0d 	bl	8003684 <EndTransfer>
				HAL_Delay(5000);
 800406a:	4805      	ldr	r0, [pc, #20]	; (8004080 <SendTCPdata+0x394>)
 800406c:	f003 fcc2 	bl	80079f4 <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 8004070:	220a      	movs	r2, #10
 8004072:	7823      	ldrb	r3, [r4, #0]
 8004074:	4690      	mov	r8, r2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d12f      	bne.n	80040da <SendTCPdata+0x3ee>
 800407a:	e03a      	b.n	80040f2 <SendTCPdata+0x406>
 800407c:	200049ac 	.word	0x200049ac
 8004080:	00001388 	.word	0x00001388
 8004084:	08012944 	.word	0x08012944
 8004088:	00000a0d 	.word	0x00000a0d
 800408c:	200006c8 	.word	0x200006c8
 8004090:	00001194 	.word	0x00001194
 8004094:	200000d0 	.word	0x200000d0
 8004098:	20004a98 	.word	0x20004a98
 800409c:	200040dc 	.word	0x200040dc
 80040a0:	2000185c 	.word	0x2000185c
 80040a4:	08012950 	.word	0x08012950
 80040a8:	08012964 	.word	0x08012964
 80040ac:	00002328 	.word	0x00002328
 80040b0:	08012968 	.word	0x08012968
 80040b4:	00004650 	.word	0x00004650
 80040b8:	080129dc 	.word	0x080129dc
 80040bc:	08012a2c 	.word	0x08012a2c
 80040c0:	08012970 	.word	0x08012970
 80040c4:	080129a4 	.word	0x080129a4
 80040c8:	080129e8 	.word	0x080129e8
 80040cc:	2301      	movs	r3, #1
 80040ce:	425b      	negs	r3, r3
 80040d0:	469c      	mov	ip, r3
 80040d2:	44e0      	add	r8, ip
 80040d4:	4643      	mov	r3, r8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <SendTCPdata+0x406>
		memset(GSMData, 0, 4500);
 80040da:	2100      	movs	r1, #0
 80040dc:	4a1f      	ldr	r2, [pc, #124]	; (800415c <SendTCPdata+0x470>)
 80040de:	0020      	movs	r0, r4
 80040e0:	f00a fc50 	bl	800e984 <memset>
		HAL_Delay(2000);
 80040e4:	20fa      	movs	r0, #250	; 0xfa
 80040e6:	00c0      	lsls	r0, r0, #3
 80040e8:	f003 fc84 	bl	80079f4 <HAL_Delay>
	while ((strlen(GSMData) > 0) && (i> 0))
 80040ec:	7823      	ldrb	r3, [r4, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1ec      	bne.n	80040cc <SendTCPdata+0x3e0>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80040f2:	220c      	movs	r2, #12
 80040f4:	6833      	ldr	r3, [r6, #0]
 80040f6:	4691      	mov	r9, r2
 80040f8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80040fa:	4919      	ldr	r1, [pc, #100]	; (8004160 <SendTCPdata+0x474>)
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <SendTCPdata+0x478>)
 80040fe:	320c      	adds	r2, #12
 8004100:	0030      	movs	r0, r6
 8004102:	f006 fd6b 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004106:	4b18      	ldr	r3, [pc, #96]	; (8004168 <SendTCPdata+0x47c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004108:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800410a:	4698      	mov	r8, r3
 800410c:	466b      	mov	r3, sp
 800410e:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004110:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 8004112:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004114:	230a      	movs	r3, #10
 8004116:	2202      	movs	r2, #2
 8004118:	f006 fd60 	bl	800abdc <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800411c:	464a      	mov	r2, r9
 800411e:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004120:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004122:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004124:	f7fb fff0 	bl	8000108 <strlen>
 8004128:	0029      	movs	r1, r5
 800412a:	b282      	uxth	r2, r0
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <SendTCPdata+0x478>)
 800412e:	0030      	movs	r0, r6
 8004130:	f006 fd54 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004134:	466b      	mov	r3, sp
 8004136:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004138:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800413a:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800413c:	0030      	movs	r0, r6
 800413e:	230a      	movs	r3, #10
 8004140:	2202      	movs	r2, #2
 8004142:	f006 fd4b 	bl	800abdc <HAL_UART_Transmit>
	StopTCPConnection(n);
 8004146:	0038      	movs	r0, r7
 8004148:	f7ff fd8e 	bl	8003c68 <StopTCPConnection>
	StartTCPConnection(n);
 800414c:	0038      	movs	r0, r7
 800414e:	f7ff fcf3 	bl	8003b38 <StartTCPConnection>
	while ((strlen(GSMData) > 0) && (i> 0))
 8004152:	7823      	ldrb	r3, [r4, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d000      	beq.n	800415a <SendTCPdata+0x46e>
 8004158:	e70e      	b.n	8003f78 <SendTCPdata+0x28c>
 800415a:	e66e      	b.n	8003e3a <SendTCPdata+0x14e>
 800415c:	00001194 	.word	0x00001194
 8004160:	08012a10 	.word	0x08012a10
 8004164:	00001388 	.word	0x00001388
 8004168:	00000a0d 	.word	0x00000a0d

0800416c <GSMCellInfo>:
	memset(SS0, 0, 4);
 800416c:	4bc2      	ldr	r3, [pc, #776]	; (8004478 <GSMCellInfo+0x30c>)
{
 800416e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004170:	4657      	mov	r7, sl
	memset(SS0, 0, 4);
 8004172:	469a      	mov	sl, r3
{
 8004174:	46de      	mov	lr, fp
 8004176:	464e      	mov	r6, r9
 8004178:	4645      	mov	r5, r8
	memset(SS0, 0, 4);
 800417a:	2300      	movs	r3, #0
 800417c:	4652      	mov	r2, sl
{
 800417e:	b5e0      	push	{r5, r6, r7, lr}
	memset(SS1, 0, 4);
 8004180:	4cbe      	ldr	r4, [pc, #760]	; (800447c <GSMCellInfo+0x310>)
	memset(SS2, 0, 4);
 8004182:	4dbf      	ldr	r5, [pc, #764]	; (8004480 <GSMCellInfo+0x314>)
	memset(SS3, 0, 4);
 8004184:	4ebf      	ldr	r6, [pc, #764]	; (8004484 <GSMCellInfo+0x318>)
	memset(SS0, 0, 4);
 8004186:	8053      	strh	r3, [r2, #2]
	memset(SS4, 0, 4);
 8004188:	4abf      	ldr	r2, [pc, #764]	; (8004488 <GSMCellInfo+0x31c>)
	memset(SS1, 0, 4);
 800418a:	8063      	strh	r3, [r4, #2]
	memset(SS2, 0, 4);
 800418c:	806b      	strh	r3, [r5, #2]
	memset(SS4, 0, 4);
 800418e:	8053      	strh	r3, [r2, #2]
	memset(SS3, 0, 4);
 8004190:	8073      	strh	r3, [r6, #2]
	memset(MCC0, 0, 5);
 8004192:	4bbe      	ldr	r3, [pc, #760]	; (800448c <GSMCellInfo+0x320>)
{
 8004194:	b0a1      	sub	sp, #132	; 0x84
	memset(MCC0, 0, 5);
 8004196:	2100      	movs	r1, #0
	memset(SS4, 0, 4);
 8004198:	9218      	str	r2, [sp, #96]	; 0x60
	memset(MCC0, 0, 5);
 800419a:	1c98      	adds	r0, r3, #2
 800419c:	2203      	movs	r2, #3
 800419e:	4698      	mov	r8, r3
	memset(SS1, 0, 4);
 80041a0:	941b      	str	r4, [sp, #108]	; 0x6c
	memset(SS2, 0, 4);
 80041a2:	951c      	str	r5, [sp, #112]	; 0x70
	memset(SS3, 0, 4);
 80041a4:	961d      	str	r6, [sp, #116]	; 0x74
	memset(MCC0, 0, 5);
 80041a6:	f00a fbed 	bl	800e984 <memset>
	memset(MNC0, 0, 5);
 80041aa:	4bb9      	ldr	r3, [pc, #740]	; (8004490 <GSMCellInfo+0x324>)
 80041ac:	2203      	movs	r2, #3
 80041ae:	2100      	movs	r1, #0
 80041b0:	1c98      	adds	r0, r3, #2
 80041b2:	469b      	mov	fp, r3
 80041b4:	f00a fbe6 	bl	800e984 <memset>
	memset(LAC0, 0, 6);
 80041b8:	4bb6      	ldr	r3, [pc, #728]	; (8004494 <GSMCellInfo+0x328>)
 80041ba:	2204      	movs	r2, #4
 80041bc:	1c98      	adds	r0, r3, #2
 80041be:	2100      	movs	r1, #0
 80041c0:	9311      	str	r3, [sp, #68]	; 0x44
 80041c2:	f00a fbdf 	bl	800e984 <memset>
	memset(LAC1, 0, 6);
 80041c6:	48b4      	ldr	r0, [pc, #720]	; (8004498 <GSMCellInfo+0x32c>)
 80041c8:	2204      	movs	r2, #4
 80041ca:	2100      	movs	r1, #0
 80041cc:	9019      	str	r0, [sp, #100]	; 0x64
 80041ce:	3002      	adds	r0, #2
 80041d0:	f00a fbd8 	bl	800e984 <memset>
	memset(LAC2, 0, 6);
 80041d4:	4fb1      	ldr	r7, [pc, #708]	; (800449c <GSMCellInfo+0x330>)
 80041d6:	2204      	movs	r2, #4
 80041d8:	2100      	movs	r1, #0
 80041da:	1cb8      	adds	r0, r7, #2
 80041dc:	971a      	str	r7, [sp, #104]	; 0x68
 80041de:	f00a fbd1 	bl	800e984 <memset>
	memset(LAC3, 0, 6);
 80041e2:	49af      	ldr	r1, [pc, #700]	; (80044a0 <GSMCellInfo+0x334>)
 80041e4:	2204      	movs	r2, #4
 80041e6:	9112      	str	r1, [sp, #72]	; 0x48
 80041e8:	1c88      	adds	r0, r1, #2
 80041ea:	2100      	movs	r1, #0
 80041ec:	f00a fbca 	bl	800e984 <memset>
	memset(LAC4, 0, 6);
 80041f0:	4bac      	ldr	r3, [pc, #688]	; (80044a4 <GSMCellInfo+0x338>)
 80041f2:	2204      	movs	r2, #4
 80041f4:	1c98      	adds	r0, r3, #2
 80041f6:	2100      	movs	r1, #0
 80041f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80041fa:	f00a fbc3 	bl	800e984 <memset>
	memset(CID4, 0, 6);
 80041fe:	4faa      	ldr	r7, [pc, #680]	; (80044a8 <GSMCellInfo+0x33c>)
 8004200:	2204      	movs	r2, #4
 8004202:	2100      	movs	r1, #0
 8004204:	1cb8      	adds	r0, r7, #2
 8004206:	9714      	str	r7, [sp, #80]	; 0x50
 8004208:	f00a fbbc 	bl	800e984 <memset>
	memset(CID3, 0, 6);
 800420c:	48a7      	ldr	r0, [pc, #668]	; (80044ac <GSMCellInfo+0x340>)
 800420e:	2204      	movs	r2, #4
 8004210:	2100      	movs	r1, #0
 8004212:	9015      	str	r0, [sp, #84]	; 0x54
 8004214:	3002      	adds	r0, #2
 8004216:	f00a fbb5 	bl	800e984 <memset>
	memset(CID2, 0, 6);
 800421a:	4aa5      	ldr	r2, [pc, #660]	; (80044b0 <GSMCellInfo+0x344>)
 800421c:	2100      	movs	r1, #0
 800421e:	9216      	str	r2, [sp, #88]	; 0x58
 8004220:	1c90      	adds	r0, r2, #2
 8004222:	2204      	movs	r2, #4
 8004224:	f00a fbae 	bl	800e984 <memset>
	memset(CID1, 0, 6);
 8004228:	4ba2      	ldr	r3, [pc, #648]	; (80044b4 <GSMCellInfo+0x348>)
 800422a:	2204      	movs	r2, #4
 800422c:	1c98      	adds	r0, r3, #2
 800422e:	2100      	movs	r1, #0
 8004230:	9317      	str	r3, [sp, #92]	; 0x5c
 8004232:	f00a fba7 	bl	800e984 <memset>
	memset(CID0, 0, 6);
 8004236:	4fa0      	ldr	r7, [pc, #640]	; (80044b8 <GSMCellInfo+0x34c>)
 8004238:	2204      	movs	r2, #4
 800423a:	2100      	movs	r1, #0
 800423c:	1cb8      	adds	r0, r7, #2
 800423e:	f00a fba1 	bl	800e984 <memset>
	strcpy(MCC0, "x\0");
 8004242:	2378      	movs	r3, #120	; 0x78
 8004244:	4641      	mov	r1, r8
 8004246:	800b      	strh	r3, [r1, #0]
	strcpy(MNC0, "x\0");
 8004248:	4659      	mov	r1, fp
 800424a:	800b      	strh	r3, [r1, #0]
	strcpy(LAC0, "x\0");
 800424c:	9911      	ldr	r1, [sp, #68]	; 0x44
	strcpy(SS4, "x\0");
 800424e:	9a18      	ldr	r2, [sp, #96]	; 0x60
	strcpy(LAC0, "x\0");
 8004250:	800b      	strh	r3, [r1, #0]
	strcpy(SS0, "x\0");
 8004252:	4651      	mov	r1, sl
	strcpy(SS4, "x\0");
 8004254:	8013      	strh	r3, [r2, #0]
	strcpy(LAC4, "x\0");
 8004256:	9a13      	ldr	r2, [sp, #76]	; 0x4c
	strcpy(SS0, "x\0");
 8004258:	800b      	strh	r3, [r1, #0]
	strcpy(LAC4, "x\0");
 800425a:	8013      	strh	r3, [r2, #0]
	memset(GSMData, 0, 800);
 800425c:	22c8      	movs	r2, #200	; 0xc8
	strcpy(LAC2, "x\0");
 800425e:	991a      	ldr	r1, [sp, #104]	; 0x68
	strcpy(SS1, "x\0");
 8004260:	8023      	strh	r3, [r4, #0]
	strcpy(LAC2, "x\0");
 8004262:	800b      	strh	r3, [r1, #0]
	strcpy(CID1, "x\0");
 8004264:	9c17      	ldr	r4, [sp, #92]	; 0x5c
	strcpy(LAC1, "x\0");
 8004266:	9819      	ldr	r0, [sp, #100]	; 0x64
	strcpy(LAC3, "x\0");
 8004268:	9912      	ldr	r1, [sp, #72]	; 0x48
	strcpy(CID1, "x\0");
 800426a:	8023      	strh	r3, [r4, #0]
	strcpy(LAC1, "x\0");
 800426c:	8003      	strh	r3, [r0, #0]
	strcpy(LAC3, "x\0");
 800426e:	800b      	strh	r3, [r1, #0]
	strcpy(CID3, "x\0");
 8004270:	9815      	ldr	r0, [sp, #84]	; 0x54
	strcpy(CID4, "x\0");
 8004272:	9914      	ldr	r1, [sp, #80]	; 0x50
	strcpy(CID2, "x\0");
 8004274:	9c16      	ldr	r4, [sp, #88]	; 0x58
	strcpy(SS2, "x\0");
 8004276:	802b      	strh	r3, [r5, #0]
	strcpy(CID3, "x\0");
 8004278:	8003      	strh	r3, [r0, #0]
	strcpy(CID4, "x\0");
 800427a:	800b      	strh	r3, [r1, #0]
	strcpy(CID0, "x\0");
 800427c:	803b      	strh	r3, [r7, #0]
	strcpy(CID2, "x\0");
 800427e:	8023      	strh	r3, [r4, #0]
	strcpy(SS3, "x\0");
 8004280:	8033      	strh	r3, [r6, #0]
	memset(GSMData, 0, 800);
 8004282:	4b8e      	ldr	r3, [pc, #568]	; (80044bc <GSMCellInfo+0x350>)
 8004284:	2100      	movs	r1, #0
 8004286:	0018      	movs	r0, r3
 8004288:	0092      	lsls	r2, r2, #2
 800428a:	4699      	mov	r9, r3
 800428c:	f00a fb7a 	bl	800e984 <memset>
	SendGSMCodeL(" AT+QENG?");
 8004290:	488b      	ldr	r0, [pc, #556]	; (80044c0 <GSMCellInfo+0x354>)
 8004292:	f7ff f94f 	bl	8003534 <SendGSMCodeL>
	HAL_Delay(500);
 8004296:	20fa      	movs	r0, #250	; 0xfa
 8004298:	0040      	lsls	r0, r0, #1
 800429a:	f003 fbab 	bl	80079f4 <HAL_Delay>
	char *m0 = strstr(GSMData, "+QENG: 0");
 800429e:	4648      	mov	r0, r9
 80042a0:	4988      	ldr	r1, [pc, #544]	; (80044c4 <GSMCellInfo+0x358>)
 80042a2:	f00a fc1f 	bl	800eae4 <strstr>
 80042a6:	1e05      	subs	r5, r0, #0
 80042a8:	901e      	str	r0, [sp, #120]	; 0x78
	if ((m0 != NULL) && (strlen(m0) > 1))
 80042aa:	d014      	beq.n	80042d6 <GSMCellInfo+0x16a>
 80042ac:	f7fb ff2c 	bl	8000108 <strlen>
 80042b0:	2801      	cmp	r0, #1
 80042b2:	d910      	bls.n	80042d6 <GSMCellInfo+0x16a>
 80042b4:	4b84      	ldr	r3, [pc, #528]	; (80044c8 <GSMCellInfo+0x35c>)
 80042b6:	0028      	movs	r0, r5
		int k = 0;
 80042b8:	2400      	movs	r4, #0
 80042ba:	001d      	movs	r5, r3
 80042bc:	4e83      	ldr	r6, [pc, #524]	; (80044cc <GSMCellInfo+0x360>)
		while ((part = strtok_r(m0, ",", &m0)))
 80042be:	0031      	movs	r1, r6
 80042c0:	aa1e      	add	r2, sp, #120	; 0x78
 80042c2:	f00a fc0a 	bl	800eada <strtok_r>
 80042c6:	1e01      	subs	r1, r0, #0
 80042c8:	d01a      	beq.n	8004300 <GSMCellInfo+0x194>
			if (k == 1)
 80042ca:	2c07      	cmp	r4, #7
 80042cc:	d900      	bls.n	80042d0 <GSMCellInfo+0x164>
 80042ce:	e070      	b.n	80043b2 <GSMCellInfo+0x246>
 80042d0:	00a3      	lsls	r3, r4, #2
 80042d2:	58eb      	ldr	r3, [r5, r3]
 80042d4:	469f      	mov	pc, r3
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042d6:	220c      	movs	r2, #12
 80042d8:	4c7d      	ldr	r4, [pc, #500]	; (80044d0 <GSMCellInfo+0x364>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042da:	497e      	ldr	r1, [pc, #504]	; (80044d4 <GSMCellInfo+0x368>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042dc:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042de:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80042e0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80042e2:	4b7d      	ldr	r3, [pc, #500]	; (80044d8 <GSMCellInfo+0x36c>)
 80042e4:	3219      	adds	r2, #25
 80042e6:	f006 fc79 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80042ea:	ab1f      	add	r3, sp, #124	; 0x7c
 80042ec:	469a      	mov	sl, r3
 80042ee:	4652      	mov	r2, sl
 80042f0:	4b7a      	ldr	r3, [pc, #488]	; (80044dc <GSMCellInfo+0x370>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80042f2:	4651      	mov	r1, sl
	char newline[2] = "\r\n";
 80042f4:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80042f6:	0020      	movs	r0, r4
 80042f8:	230a      	movs	r3, #10
 80042fa:	2202      	movs	r2, #2
 80042fc:	f006 fc6e 	bl	800abdc <HAL_UART_Transmit>
	char *m1 = strstr(GSMData, "+QENG: 1");
 8004300:	4648      	mov	r0, r9
 8004302:	4977      	ldr	r1, [pc, #476]	; (80044e0 <GSMCellInfo+0x374>)
 8004304:	f00a fbee 	bl	800eae4 <strstr>
 8004308:	1e04      	subs	r4, r0, #0
 800430a:	901f      	str	r0, [sp, #124]	; 0x7c
	if ((m1 != NULL) && (strlen(m1) > 1))
 800430c:	d019      	beq.n	8004342 <GSMCellInfo+0x1d6>
 800430e:	f7fb fefb 	bl	8000108 <strlen>
 8004312:	2801      	cmp	r0, #1
 8004314:	d915      	bls.n	8004342 <GSMCellInfo+0x1d6>
 8004316:	ab1f      	add	r3, sp, #124	; 0x7c
 8004318:	469a      	mov	sl, r3
 800431a:	4b72      	ldr	r3, [pc, #456]	; (80044e4 <GSMCellInfo+0x378>)
 800431c:	0020      	movs	r0, r4
 800431e:	46b9      	mov	r9, r7
		int k = 0;
 8004320:	2500      	movs	r5, #0
 8004322:	4654      	mov	r4, sl
 8004324:	001f      	movs	r7, r3
 8004326:	4e69      	ldr	r6, [pc, #420]	; (80044cc <GSMCellInfo+0x360>)
		while ((part = strtok_r(m1, ",", &m1)))
 8004328:	0031      	movs	r1, r6
 800432a:	0022      	movs	r2, r4
 800432c:	f00a fbd5 	bl	800eada <strtok_r>
 8004330:	1e01      	subs	r1, r0, #0
 8004332:	d005      	beq.n	8004340 <GSMCellInfo+0x1d4>
			if (k == 3)
 8004334:	1eeb      	subs	r3, r5, #3
 8004336:	2b25      	cmp	r3, #37	; 0x25
 8004338:	d859      	bhi.n	80043ee <GSMCellInfo+0x282>
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	58fb      	ldr	r3, [r7, r3]
 800433e:	469f      	mov	pc, r3
 8004340:	464f      	mov	r7, r9
	memset(gsminfo, 0, 80);
 8004342:	4c69      	ldr	r4, [pc, #420]	; (80044e8 <GSMCellInfo+0x37c>)
 8004344:	2250      	movs	r2, #80	; 0x50
 8004346:	2100      	movs	r1, #0
 8004348:	0020      	movs	r0, r4
 800434a:	f00a fb1b 	bl	800e984 <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
 800434e:	4b67      	ldr	r3, [pc, #412]	; (80044ec <GSMCellInfo+0x380>)
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	f7fc ffab 	bl	80012ac <__aeabi_f2iz>
 8004356:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004358:	0002      	movs	r2, r0
 800435a:	930e      	str	r3, [sp, #56]	; 0x38
 800435c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800435e:	0020      	movs	r0, r4
 8004360:	930d      	str	r3, [sp, #52]	; 0x34
 8004362:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004364:	4962      	ldr	r1, [pc, #392]	; (80044f0 <GSMCellInfo+0x384>)
 8004366:	930c      	str	r3, [sp, #48]	; 0x30
 8004368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800436a:	9702      	str	r7, [sp, #8]
 800436c:	930b      	str	r3, [sp, #44]	; 0x2c
 800436e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004370:	930a      	str	r3, [sp, #40]	; 0x28
 8004372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004374:	9309      	str	r3, [sp, #36]	; 0x24
 8004376:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004378:	9308      	str	r3, [sp, #32]
 800437a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800437c:	9307      	str	r3, [sp, #28]
 800437e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004380:	9306      	str	r3, [sp, #24]
 8004382:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004384:	9305      	str	r3, [sp, #20]
 8004386:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004388:	9304      	str	r3, [sp, #16]
 800438a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800438c:	9303      	str	r3, [sp, #12]
 800438e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	465b      	mov	r3, fp
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	4643      	mov	r3, r8
 8004398:	f00a fa88 	bl	800e8ac <siprintf>
}
 800439c:	0020      	movs	r0, r4
 800439e:	b021      	add	sp, #132	; 0x84
 80043a0:	bcf0      	pop	{r4, r5, r6, r7}
 80043a2:	46bb      	mov	fp, r7
 80043a4:	46b2      	mov	sl, r6
 80043a6:	46a9      	mov	r9, r5
 80043a8:	46a0      	mov	r8, r4
 80043aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(MCC0, part);
 80043ac:	4640      	mov	r0, r8
 80043ae:	f00a fca8 	bl	800ed02 <strcpy>
		while ((part = strtok_r(m0, ",", &m0)))
 80043b2:	981e      	ldr	r0, [sp, #120]	; 0x78
			k++;
 80043b4:	3401      	adds	r4, #1
 80043b6:	e782      	b.n	80042be <GSMCellInfo+0x152>
				strcpy(SS0, part);
 80043b8:	4650      	mov	r0, sl
 80043ba:	f00a fca2 	bl	800ed02 <strcpy>
			k++;
 80043be:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80043c0:	981e      	ldr	r0, [sp, #120]	; 0x78
 80043c2:	e77c      	b.n	80042be <GSMCellInfo+0x152>
				strcpy(CID0, part);
 80043c4:	0038      	movs	r0, r7
 80043c6:	f00a fc9c 	bl	800ed02 <strcpy>
			k++;
 80043ca:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80043cc:	981e      	ldr	r0, [sp, #120]	; 0x78
 80043ce:	e776      	b.n	80042be <GSMCellInfo+0x152>
				strcpy(LAC0, part);
 80043d0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80043d2:	f00a fc96 	bl	800ed02 <strcpy>
			k++;
 80043d6:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80043d8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80043da:	e770      	b.n	80042be <GSMCellInfo+0x152>
				strcpy(MNC0, part);
 80043dc:	4658      	mov	r0, fp
 80043de:	f00a fc90 	bl	800ed02 <strcpy>
			k++;
 80043e2:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80043e4:	981e      	ldr	r0, [sp, #120]	; 0x78
 80043e6:	e76a      	b.n	80042be <GSMCellInfo+0x152>
				strcpy(SS1, part);
 80043e8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80043ea:	f00a fc8a 	bl	800ed02 <strcpy>
		while ((part = strtok_r(m1, ",", &m1)))
 80043ee:	981f      	ldr	r0, [sp, #124]	; 0x7c
			k++;
 80043f0:	3501      	adds	r5, #1
 80043f2:	e799      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(CID4, part);
 80043f4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80043f6:	f00a fc84 	bl	800ed02 <strcpy>
			k++;
 80043fa:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80043fc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80043fe:	e793      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(LAC4, part);
 8004400:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004402:	f00a fc7e 	bl	800ed02 <strcpy>
			k++;
 8004406:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004408:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800440a:	e78d      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(SS4, part);
 800440c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800440e:	f00a fc78 	bl	800ed02 <strcpy>
			k++;
 8004412:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004414:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004416:	e787      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(CID3, part);
 8004418:	9815      	ldr	r0, [sp, #84]	; 0x54
 800441a:	f00a fc72 	bl	800ed02 <strcpy>
			k++;
 800441e:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004420:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004422:	e781      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(LAC3, part);
 8004424:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004426:	f00a fc6c 	bl	800ed02 <strcpy>
			k++;
 800442a:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800442c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800442e:	e77b      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(SS3, part);
 8004430:	981d      	ldr	r0, [sp, #116]	; 0x74
 8004432:	f00a fc66 	bl	800ed02 <strcpy>
			k++;
 8004436:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004438:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800443a:	e775      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(CID2, part);
 800443c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800443e:	f00a fc60 	bl	800ed02 <strcpy>
			k++;
 8004442:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004444:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004446:	e76f      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(LAC2, part);
 8004448:	981a      	ldr	r0, [sp, #104]	; 0x68
 800444a:	f00a fc5a 	bl	800ed02 <strcpy>
			k++;
 800444e:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004450:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004452:	e769      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(SS2, part);
 8004454:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004456:	f00a fc54 	bl	800ed02 <strcpy>
			k++;
 800445a:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 800445c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800445e:	e763      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(CID1, part);
 8004460:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004462:	f00a fc4e 	bl	800ed02 <strcpy>
			k++;
 8004466:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004468:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800446a:	e75d      	b.n	8004328 <GSMCellInfo+0x1bc>
				strcpy(LAC1, part);
 800446c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800446e:	f00a fc48 	bl	800ed02 <strcpy>
			k++;
 8004472:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8004474:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8004476:	e757      	b.n	8004328 <GSMCellInfo+0x1bc>
 8004478:	20003ef4 	.word	0x20003ef4
 800447c:	20003ef8 	.word	0x20003ef8
 8004480:	20003efc 	.word	0x20003efc
 8004484:	20003f00 	.word	0x20003f00
 8004488:	20003f04 	.word	0x20003f04
 800448c:	20001e68 	.word	0x20001e68
 8004490:	20001e70 	.word	0x20001e70
 8004494:	20001e3c 	.word	0x20001e3c
 8004498:	20001e44 	.word	0x20001e44
 800449c:	20001e4c 	.word	0x20001e4c
 80044a0:	20001e54 	.word	0x20001e54
 80044a4:	20001e5c 	.word	0x20001e5c
 80044a8:	2000038c 	.word	0x2000038c
 80044ac:	20000384 	.word	0x20000384
 80044b0:	2000037c 	.word	0x2000037c
 80044b4:	20000374 	.word	0x20000374
 80044b8:	2000036c 	.word	0x2000036c
 80044bc:	200006c8 	.word	0x200006c8
 80044c0:	08012a60 	.word	0x08012a60
 80044c4:	08012a6c 	.word	0x08012a6c
 80044c8:	08012ae0 	.word	0x08012ae0
 80044cc:	080127d8 	.word	0x080127d8
 80044d0:	200049ac 	.word	0x200049ac
 80044d4:	08012a78 	.word	0x08012a78
 80044d8:	00001388 	.word	0x00001388
 80044dc:	00000a0d 	.word	0x00000a0d
 80044e0:	08012aa0 	.word	0x08012aa0
 80044e4:	08012b00 	.word	0x08012b00
 80044e8:	2000455c 	.word	0x2000455c
 80044ec:	20001d0c 	.word	0x20001d0c
 80044f0:	08012aac 	.word	0x08012aac

080044f4 <ProcessTCPAll>:
}

void ProcessTCPAll(char *data, int n)
{
 80044f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f6:	46ce      	mov	lr, r9
 80044f8:	4647      	mov	r7, r8
 80044fa:	b580      	push	{r7, lr}
	//int tcpSENDDATA = tic();


	if (tcp_stat[n] > 0)
 80044fc:	4b3c      	ldr	r3, [pc, #240]	; (80045f0 <ProcessTCPAll+0xfc>)
 80044fe:	008d      	lsls	r5, r1, #2
 8004500:	58eb      	ldr	r3, [r5, r3]
{
 8004502:	0006      	movs	r6, r0
 8004504:	000c      	movs	r4, r1
 8004506:	b083      	sub	sp, #12
	if (tcp_stat[n] > 0)
 8004508:	2b00      	cmp	r3, #0
 800450a:	dc0e      	bgt.n	800452a <ProcessTCPAll+0x36>
		Debug_Tx(ip[n]);
		SendTCPdata(data,n);
	}
	else
	{
		if (debug == 1)
 800450c:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <ProcessTCPAll+0x100>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d03f      	beq.n	8004594 <ProcessTCPAll+0xa0>
	StopTCPConnection(n);
 8004514:	0020      	movs	r0, r4
 8004516:	f7ff fba7 	bl	8003c68 <StopTCPConnection>
	StartTCPConnection(n);
 800451a:	0020      	movs	r0, r4
 800451c:	f7ff fb0c 	bl	8003b38 <StartTCPConnection>
			Debug_Tx("Error: server Not connected ");
			Debug_Tx(ip[n]);
		}
		ResetTCP(n);
	}
}
 8004520:	b003      	add	sp, #12
 8004522:	bcc0      	pop	{r6, r7}
 8004524:	46b9      	mov	r9, r7
 8004526:	46b0      	mov	r8, r6
 8004528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800452a:	220c      	movs	r2, #12
 800452c:	4f32      	ldr	r7, [pc, #200]	; (80045f8 <ProcessTCPAll+0x104>)
 800452e:	4691      	mov	r9, r2
 8004530:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004532:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004534:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004536:	4931      	ldr	r1, [pc, #196]	; (80045fc <ProcessTCPAll+0x108>)
 8004538:	4b31      	ldr	r3, [pc, #196]	; (8004600 <ProcessTCPAll+0x10c>)
 800453a:	3207      	adds	r2, #7
 800453c:	f006 fb4e 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004540:	4b30      	ldr	r3, [pc, #192]	; (8004604 <ProcessTCPAll+0x110>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004542:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8004544:	4698      	mov	r8, r3
 8004546:	466b      	mov	r3, sp
 8004548:	4642      	mov	r2, r8
		Debug_Tx(ip[n]);
 800454a:	192d      	adds	r5, r5, r4
 800454c:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800454e:	0038      	movs	r0, r7
 8004550:	230a      	movs	r3, #10
 8004552:	2202      	movs	r2, #2
 8004554:	f006 fb42 	bl	800abdc <HAL_UART_Transmit>
 8004558:	00aa      	lsls	r2, r5, #2
 800455a:	18ad      	adds	r5, r5, r2
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800455c:	464a      	mov	r2, r9
 800455e:	4b2a      	ldr	r3, [pc, #168]	; (8004608 <ProcessTCPAll+0x114>)
 8004560:	195d      	adds	r5, r3, r5
 8004562:	683b      	ldr	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004564:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004566:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004568:	f7fb fdce 	bl	8000108 <strlen>
 800456c:	0029      	movs	r1, r5
 800456e:	b282      	uxth	r2, r0
 8004570:	4b23      	ldr	r3, [pc, #140]	; (8004600 <ProcessTCPAll+0x10c>)
 8004572:	0038      	movs	r0, r7
 8004574:	f006 fb32 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004578:	466b      	mov	r3, sp
 800457a:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800457c:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800457e:	809a      	strh	r2, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004580:	0038      	movs	r0, r7
 8004582:	230a      	movs	r3, #10
 8004584:	2202      	movs	r2, #2
 8004586:	f006 fb29 	bl	800abdc <HAL_UART_Transmit>
		SendTCPdata(data,n);
 800458a:	0021      	movs	r1, r4
 800458c:	0030      	movs	r0, r6
 800458e:	f7ff fbad 	bl	8003cec <SendTCPdata>
 8004592:	e7c5      	b.n	8004520 <ProcessTCPAll+0x2c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004594:	220c      	movs	r2, #12
 8004596:	4e18      	ldr	r6, [pc, #96]	; (80045f8 <ProcessTCPAll+0x104>)
 8004598:	4690      	mov	r8, r2
 800459a:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800459c:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800459e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80045a0:	491a      	ldr	r1, [pc, #104]	; (800460c <ProcessTCPAll+0x118>)
 80045a2:	4b17      	ldr	r3, [pc, #92]	; (8004600 <ProcessTCPAll+0x10c>)
 80045a4:	3210      	adds	r2, #16
 80045a6:	f006 fb19 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80045aa:	466b      	mov	r3, sp
 80045ac:	4f15      	ldr	r7, [pc, #84]	; (8004604 <ProcessTCPAll+0x110>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80045ae:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 80045b0:	809f      	strh	r7, [r3, #4]
			Debug_Tx(ip[n]);
 80045b2:	192d      	adds	r5, r5, r4
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80045b4:	230a      	movs	r3, #10
 80045b6:	2202      	movs	r2, #2
 80045b8:	0030      	movs	r0, r6
 80045ba:	f006 fb0f 	bl	800abdc <HAL_UART_Transmit>
 80045be:	00aa      	lsls	r2, r5, #2
 80045c0:	18ad      	adds	r5, r5, r2
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80045c2:	4642      	mov	r2, r8
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <ProcessTCPAll+0x114>)
 80045c6:	195d      	adds	r5, r3, r5
 80045c8:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80045ca:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80045cc:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80045ce:	f7fb fd9b 	bl	8000108 <strlen>
 80045d2:	0029      	movs	r1, r5
 80045d4:	b282      	uxth	r2, r0
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <ProcessTCPAll+0x10c>)
 80045d8:	0030      	movs	r0, r6
 80045da:	f006 faff 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80045de:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80045e0:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80045e2:	809f      	strh	r7, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80045e4:	0030      	movs	r0, r6
 80045e6:	230a      	movs	r3, #10
 80045e8:	a901      	add	r1, sp, #4
 80045ea:	f006 faf7 	bl	800abdc <HAL_UART_Transmit>
}
 80045ee:	e791      	b.n	8004514 <ProcessTCPAll+0x20>
 80045f0:	20004a98 	.word	0x20004a98
 80045f4:	200000c4 	.word	0x200000c4
 80045f8:	200049ac 	.word	0x200049ac
 80045fc:	08012bc4 	.word	0x08012bc4
 8004600:	00001388 	.word	0x00001388
 8004604:	00000a0d 	.word	0x00000a0d
 8004608:	200000d0 	.word	0x200000d0
 800460c:	08012bd8 	.word	0x08012bd8

08004610 <SetupGPRS>:
	}
	return smsok;
}

void SetupGPRS(char *apn)
{
 8004610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004612:	4657      	mov	r7, sl
 8004614:	464e      	mov	r6, r9
 8004616:	4645      	mov	r5, r8
 8004618:	46de      	mov	lr, fp

	int ck = 5;

	gprsok = 0;
 800461a:	2300      	movs	r3, #0
{
 800461c:	b5e0      	push	{r5, r6, r7, lr}
 800461e:	4680      	mov	r8, r0
	gprsok = 0;
 8004620:	2505      	movs	r5, #5
 8004622:	4f33      	ldr	r7, [pc, #204]	; (80046f0 <SetupGPRS+0xe0>)
{
 8004624:	b08b      	sub	sp, #44	; 0x2c
	gprsok = 0;
 8004626:	603b      	str	r3, [r7, #0]
	while ((ck > 0) && (gprsok < 1))
 8004628:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <SetupGPRS+0xe4>)
 800462a:	4c33      	ldr	r4, [pc, #204]	; (80046f8 <SetupGPRS+0xe8>)
 800462c:	9306      	str	r3, [sp, #24]
 800462e:	4b33      	ldr	r3, [pc, #204]	; (80046fc <SetupGPRS+0xec>)
 8004630:	4e33      	ldr	r6, [pc, #204]	; (8004700 <SetupGPRS+0xf0>)
 8004632:	469b      	mov	fp, r3
 8004634:	4b33      	ldr	r3, [pc, #204]	; (8004704 <SetupGPRS+0xf4>)
		{
			// gprsok=0;
			// HAL_Delay(4000);

			SendGSMCode(" AT+QIMODE=0");
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8004636:	9705      	str	r7, [sp, #20]
 8004638:	469a      	mov	sl, r3
 800463a:	4b33      	ldr	r3, [pc, #204]	; (8004708 <SetupGPRS+0xf8>)
 800463c:	4699      	mov	r9, r3
 800463e:	4b33      	ldr	r3, [pc, #204]	; (800470c <SetupGPRS+0xfc>)
 8004640:	9307      	str	r3, [sp, #28]
			SendGSMCode(" AT+QIMODE=0");
 8004642:	4b33      	ldr	r3, [pc, #204]	; (8004710 <SetupGPRS+0x100>)
 8004644:	9308      	str	r3, [sp, #32]
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8004646:	4b33      	ldr	r3, [pc, #204]	; (8004714 <SetupGPRS+0x104>)
 8004648:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_Delay(2000);
 800464a:	20fa      	movs	r0, #250	; 0xfa
 800464c:	00c0      	lsls	r0, r0, #3
 800464e:	f003 f9d1 	bl	80079f4 <HAL_Delay>
		memset(GSMDataC, 0, 100);
 8004652:	0020      	movs	r0, r4
 8004654:	2100      	movs	r1, #0
 8004656:	2258      	movs	r2, #88	; 0x58
 8004658:	300c      	adds	r0, #12
 800465a:	f00a f993 	bl	800e984 <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 800465e:	0022      	movs	r2, r4
 8004660:	9b06      	ldr	r3, [sp, #24]
 8004662:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004664:	c283      	stmia	r2!, {r0, r1, r7}
		strcat(GSMDataC, apn);
 8004666:	0020      	movs	r0, r4
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 8004668:	881b      	ldrh	r3, [r3, #0]
		strcat(GSMDataC, apn);
 800466a:	4641      	mov	r1, r8
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 800466c:	81a3      	strh	r3, [r4, #12]
		strcat(GSMDataC, apn);
 800466e:	300e      	adds	r0, #14
 8004670:	f00a fa4e 	bl	800eb10 <stpcpy>
		strcat(GSMDataC, "\",\"\",\"\",0");
 8004674:	220a      	movs	r2, #10
 8004676:	4659      	mov	r1, fp
 8004678:	f00a fb56 	bl	800ed28 <memcpy>
		SendGSMCode(GSMDataC);
 800467c:	0020      	movs	r0, r4
 800467e:	f7fe fef1 	bl	8003464 <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 8004682:	4653      	mov	r3, sl
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	464b      	mov	r3, r9
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2200      	movs	r2, #0
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	9b07      	ldr	r3, [sp, #28]
 8004690:	0031      	movs	r1, r6
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	2000      	movs	r0, #0
 8004696:	0033      	movs	r3, r6
 8004698:	f7ff f870 	bl	800377c <GetGSMReply>
 800469c:	f7fb fd34 	bl	8000108 <strlen>
 80046a0:	9b05      	ldr	r3, [sp, #20]
 80046a2:	6018      	str	r0, [r3, #0]
		if (gprsok > 0)
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d109      	bne.n	80046bc <SetupGPRS+0xac>
	while ((ck > 0) && (gprsok < 1))
 80046a8:	3d01      	subs	r5, #1
 80046aa:	2d00      	cmp	r5, #0
 80046ac:	d1cd      	bne.n	800464a <SetupGPRS+0x3a>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 80046ae:	b00b      	add	sp, #44	; 0x2c
 80046b0:	bcf0      	pop	{r4, r5, r6, r7}
 80046b2:	46bb      	mov	fp, r7
 80046b4:	46b2      	mov	sl, r6
 80046b6:	46a9      	mov	r9, r5
 80046b8:	46a0      	mov	r8, r4
 80046ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SendGSMCode(" AT+QIMODE=0");
 80046bc:	9808      	ldr	r0, [sp, #32]
 80046be:	f7fe fed1 	bl	8003464 <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 80046c2:	4653      	mov	r3, sl
 80046c4:	9302      	str	r3, [sp, #8]
 80046c6:	464b      	mov	r3, r9
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2200      	movs	r2, #0
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d0:	0031      	movs	r1, r6
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2000      	movs	r0, #0
 80046d6:	0033      	movs	r3, r6
 80046d8:	f7ff f850 	bl	800377c <GetGSMReply>
 80046dc:	f7fb fd14 	bl	8000108 <strlen>
 80046e0:	9b05      	ldr	r3, [sp, #20]
	while ((ck > 0) && (gprsok < 1))
 80046e2:	3d01      	subs	r5, #1
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 80046e4:	6018      	str	r0, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	d0e1      	beq.n	80046ae <SetupGPRS+0x9e>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	ddad      	ble.n	800464a <SetupGPRS+0x3a>
 80046ee:	e7de      	b.n	80046ae <SetupGPRS+0x9e>
 80046f0:	200040dc 	.word	0x200040dc
 80046f4:	08012bf8 	.word	0x08012bf8
 80046f8:	2000185c 	.word	0x2000185c
 80046fc:	08012c08 	.word	0x08012c08
 8004700:	08012bf4 	.word	0x08012bf4
 8004704:	080128d8 	.word	0x080128d8
 8004708:	200000c8 	.word	0x200000c8
 800470c:	08012c14 	.word	0x08012c14
 8004710:	08012c34 	.word	0x08012c34
 8004714:	08012c44 	.word	0x08012c44

08004718 <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	46de      	mov	lr, fp
 800471c:	4657      	mov	r7, sl
 800471e:	464e      	mov	r6, r9
 8004720:	4645      	mov	r5, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004722:	220c      	movs	r2, #12
 8004724:	b5e0      	push	{r5, r6, r7, lr}
 8004726:	4ea3      	ldr	r6, [pc, #652]	; (80049b4 <ShiftGSMProfile+0x29c>)
 8004728:	b089      	sub	sp, #36	; 0x24
 800472a:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800472c:	49a2      	ldr	r1, [pc, #648]	; (80049b8 <ShiftGSMProfile+0x2a0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800472e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004730:	0030      	movs	r0, r6
 8004732:	4ba2      	ldr	r3, [pc, #648]	; (80049bc <ShiftGSMProfile+0x2a4>)
 8004734:	3224      	adds	r2, #36	; 0x24
 8004736:	f006 fa51 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800473a:	4ba1      	ldr	r3, [pc, #644]	; (80049c0 <ShiftGSMProfile+0x2a8>)
 800473c:	af07      	add	r7, sp, #28
 800473e:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004740:	2202      	movs	r2, #2
 8004742:	230a      	movs	r3, #10
 8004744:	0039      	movs	r1, r7
 8004746:	0030      	movs	r0, r6
 8004748:	f006 fa48 	bl	800abdc <HAL_UART_Transmit>
	// Debug_Tx(GSMSimOperator());

	// Debug_Tx("______________setup stk_____________________________");
	int ck = 10;
	ook = 0;
	while ((ck > 0) && (ook < 1))
 800474c:	4b9d      	ldr	r3, [pc, #628]	; (80049c4 <ShiftGSMProfile+0x2ac>)
	int ck = 10;
 800474e:	250a      	movs	r5, #10
 8004750:	4699      	mov	r9, r3
 8004752:	4b9d      	ldr	r3, [pc, #628]	; (80049c8 <ShiftGSMProfile+0x2b0>)
 8004754:	4c9d      	ldr	r4, [pc, #628]	; (80049cc <ShiftGSMProfile+0x2b4>)
 8004756:	469a      	mov	sl, r3
 8004758:	4b9d      	ldr	r3, [pc, #628]	; (80049d0 <ShiftGSMProfile+0x2b8>)
 800475a:	4698      	mov	r8, r3
 800475c:	4b9d      	ldr	r3, [pc, #628]	; (80049d4 <ShiftGSMProfile+0x2bc>)
 800475e:	469b      	mov	fp, r3
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004760:	4b9d      	ldr	r3, [pc, #628]	; (80049d8 <ShiftGSMProfile+0x2c0>)
 8004762:	9305      	str	r3, [sp, #20]
 8004764:	e002      	b.n	800476c <ShiftGSMProfile+0x54>
	while ((ck > 0) && (ook < 1))
 8004766:	2d00      	cmp	r5, #0
 8004768:	d100      	bne.n	800476c <ShiftGSMProfile+0x54>
 800476a:	e093      	b.n	8004894 <ShiftGSMProfile+0x17c>
	{
		HAL_Delay(3000);
 800476c:	489b      	ldr	r0, [pc, #620]	; (80049dc <ShiftGSMProfile+0x2c4>)
 800476e:	f003 f941 	bl	80079f4 <HAL_Delay>
		ck = ck - 1;
		SendGSMCode(" AT+QSTK=1");
 8004772:	4648      	mov	r0, r9
 8004774:	f7fe fe76 	bl	8003464 <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8004778:	4653      	mov	r3, sl
 800477a:	9302      	str	r3, [sp, #8]
 800477c:	4643      	mov	r3, r8
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2200      	movs	r2, #0
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	465b      	mov	r3, fp
 8004786:	0021      	movs	r1, r4
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2000      	movs	r0, #0
 800478c:	0023      	movs	r3, r4
		ck = ck - 1;
 800478e:	3d01      	subs	r5, #1
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8004790:	f7fe fff4 	bl	800377c <GetGSMReply>
 8004794:	f7fb fcb8 	bl	8000108 <strlen>
		if (ook > 0)
 8004798:	2800      	cmp	r0, #0
 800479a:	d0e4      	beq.n	8004766 <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800479c:	220c      	movs	r2, #12
 800479e:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80047a0:	9905      	ldr	r1, [sp, #20]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80047a2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80047a4:	0030      	movs	r0, r6
 80047a6:	4b85      	ldr	r3, [pc, #532]	; (80049bc <ShiftGSMProfile+0x2a4>)
 80047a8:	3229      	adds	r2, #41	; 0x29
 80047aa:	f006 fa17 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80047ae:	4b84      	ldr	r3, [pc, #528]	; (80049c0 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80047b0:	2202      	movs	r2, #2
 80047b2:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 80047b4:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80047b6:	0030      	movs	r0, r6
 80047b8:	230a      	movs	r3, #10
 80047ba:	f006 fa0f 	bl	800abdc <HAL_UART_Transmit>
		{
			Debug_Tx("______________Setup Menu_____________________________");
			ook = 0;
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 80047be:	4888      	ldr	r0, [pc, #544]	; (80049e0 <ShiftGSMProfile+0x2c8>)
 80047c0:	f7fe fe50 	bl	8003464 <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", gpsto_net, "OK"));
 80047c4:	4653      	mov	r3, sl
 80047c6:	9302      	str	r3, [sp, #8]
 80047c8:	4643      	mov	r3, r8
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2200      	movs	r2, #0
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	4b84      	ldr	r3, [pc, #528]	; (80049e4 <ShiftGSMProfile+0x2cc>)
 80047d2:	0021      	movs	r1, r4
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2000      	movs	r0, #0
 80047d8:	0023      	movs	r3, r4
 80047da:	f7fe ffcf 	bl	800377c <GetGSMReply>
 80047de:	f7fb fc93 	bl	8000108 <strlen>
 80047e2:	9004      	str	r0, [sp, #16]
			HAL_Delay(3000);
 80047e4:	487d      	ldr	r0, [pc, #500]	; (80049dc <ShiftGSMProfile+0x2c4>)
 80047e6:	f003 f905 	bl	80079f4 <HAL_Delay>
			if (ook > 0)
 80047ea:	9b04      	ldr	r3, [sp, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ba      	beq.n	8004766 <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80047f0:	220c      	movs	r2, #12
 80047f2:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80047f4:	497c      	ldr	r1, [pc, #496]	; (80049e8 <ShiftGSMProfile+0x2d0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80047f6:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80047f8:	0030      	movs	r0, r6
 80047fa:	4b70      	ldr	r3, [pc, #448]	; (80049bc <ShiftGSMProfile+0x2a4>)
 80047fc:	3231      	adds	r2, #49	; 0x31
 80047fe:	f006 f9ed 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004802:	4b6f      	ldr	r3, [pc, #444]	; (80049c0 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004804:	2202      	movs	r2, #2
 8004806:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004808:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800480a:	0030      	movs	r0, r6
 800480c:	230a      	movs	r3, #10
 800480e:	f006 f9e5 	bl	800abdc <HAL_UART_Transmit>
			{
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
				ook = 0;
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 8004812:	4876      	ldr	r0, [pc, #472]	; (80049ec <ShiftGSMProfile+0x2d4>)
 8004814:	f7fe fe26 	bl	8003464 <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 8004818:	4653      	mov	r3, sl
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	4643      	mov	r3, r8
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2200      	movs	r2, #0
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	4b72      	ldr	r3, [pc, #456]	; (80049f0 <ShiftGSMProfile+0x2d8>)
 8004826:	0021      	movs	r1, r4
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2000      	movs	r0, #0
 800482c:	0023      	movs	r3, r4
 800482e:	f7fe ffa5 	bl	800377c <GetGSMReply>
 8004832:	f7fb fc69 	bl	8000108 <strlen>
				if (ook > 0)
 8004836:	2800      	cmp	r0, #0
 8004838:	d095      	beq.n	8004766 <ShiftGSMProfile+0x4e>
				{

					if (GSMProf == 0)
 800483a:	4b6e      	ldr	r3, [pc, #440]	; (80049f4 <ShiftGSMProfile+0x2dc>)
 800483c:	9304      	str	r3, [sp, #16]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d068      	beq.n	8004916 <ShiftGSMProfile+0x1fe>
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
						GSMProf = 1;
					}
					else if (GSMProf == 1)
 8004844:	2b01      	cmp	r3, #1
 8004846:	d100      	bne.n	800484a <ShiftGSMProfile+0x132>
 8004848:	e08f      	b.n	800496a <ShiftGSMProfile+0x252>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800484a:	220c      	movs	r2, #12
 800484c:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800484e:	496a      	ldr	r1, [pc, #424]	; (80049f8 <ShiftGSMProfile+0x2e0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004850:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004852:	0030      	movs	r0, r6
 8004854:	4b59      	ldr	r3, [pc, #356]	; (80049bc <ShiftGSMProfile+0x2a4>)
 8004856:	3225      	adds	r2, #37	; 0x25
 8004858:	f006 f9c0 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800485c:	4b58      	ldr	r3, [pc, #352]	; (80049c0 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800485e:	2202      	movs	r2, #2
 8004860:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004862:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004864:	0030      	movs	r0, r6
 8004866:	230a      	movs	r3, #10
 8004868:	f006 f9b8 	bl	800abdc <HAL_UART_Transmit>
					}
					if (ook > 0)
					{
						Debug_Tx("_____________Refresh_____________________________");
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 800486c:	4863      	ldr	r0, [pc, #396]	; (80049fc <ShiftGSMProfile+0x2e4>)
 800486e:	f7fe fdf9 	bl	8003464 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh", gpsto_net, "OK"));
 8004872:	4653      	mov	r3, sl
 8004874:	9302      	str	r3, [sp, #8]
 8004876:	4643      	mov	r3, r8
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	4b60      	ldr	r3, [pc, #384]	; (8004a00 <ShiftGSMProfile+0x2e8>)
 8004880:	0021      	movs	r1, r4
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2000      	movs	r0, #0
 8004886:	0023      	movs	r3, r4
 8004888:	f7fe ff78 	bl	800377c <GetGSMReply>
 800488c:	f7fb fc3c 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 8004890:	2d00      	cmp	r5, #0
 8004892:	d13d      	bne.n	8004910 <ShiftGSMProfile+0x1f8>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004894:	220c      	movs	r2, #12
 8004896:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004898:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800489a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800489c:	4959      	ldr	r1, [pc, #356]	; (8004a04 <ShiftGSMProfile+0x2ec>)
 800489e:	4b47      	ldr	r3, [pc, #284]	; (80049bc <ShiftGSMProfile+0x2a4>)
 80048a0:	3225      	adds	r2, #37	; 0x25
 80048a2:	f006 f99b 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80048a6:	4b46      	ldr	r3, [pc, #280]	; (80049c0 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80048a8:	0039      	movs	r1, r7
 80048aa:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80048ac:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80048ae:	0030      	movs	r0, r6
 80048b0:	230a      	movs	r3, #10
 80048b2:	f006 f993 	bl	800abdc <HAL_UART_Transmit>
	ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+QPOWD=1");
 80048b6:	4b54      	ldr	r3, [pc, #336]	; (8004a08 <ShiftGSMProfile+0x2f0>)
 80048b8:	0018      	movs	r0, r3
 80048ba:	4698      	mov	r8, r3
 80048bc:	f7fe fdd2 	bl	8003464 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 80048c0:	4f52      	ldr	r7, [pc, #328]	; (8004a0c <ShiftGSMProfile+0x2f4>)
 80048c2:	4e53      	ldr	r6, [pc, #332]	; (8004a10 <ShiftGSMProfile+0x2f8>)
 80048c4:	9702      	str	r7, [sp, #8]
 80048c6:	6833      	ldr	r3, [r6, #0]
 80048c8:	4d52      	ldr	r5, [pc, #328]	; (8004a14 <ShiftGSMProfile+0x2fc>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	0021      	movs	r1, r4
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	200f      	movs	r0, #15
 80048d2:	0023      	movs	r3, r4
 80048d4:	9500      	str	r5, [sp, #0]
 80048d6:	f7fe ff51 	bl	800377c <GetGSMReply>
 80048da:	f7fb fc15 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 80048de:	2800      	cmp	r0, #0
 80048e0:	d10c      	bne.n	80048fc <ShiftGSMProfile+0x1e4>
		SendGSMCode(" AT+QPOWD=1");
 80048e2:	4640      	mov	r0, r8
 80048e4:	f7fe fdbe 	bl	8003464 <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 80048e8:	9702      	str	r7, [sp, #8]
 80048ea:	6833      	ldr	r3, [r6, #0]
 80048ec:	2200      	movs	r2, #0
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	0021      	movs	r1, r4
 80048f2:	0023      	movs	r3, r4
 80048f4:	200f      	movs	r0, #15
 80048f6:	9500      	str	r5, [sp, #0]
 80048f8:	f7fe ff40 	bl	800377c <GetGSMReply>
	}
	HAL_Delay(6000);
 80048fc:	4846      	ldr	r0, [pc, #280]	; (8004a18 <ShiftGSMProfile+0x300>)
 80048fe:	f003 f879 	bl	80079f4 <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 8004902:	b009      	add	sp, #36	; 0x24
 8004904:	bcf0      	pop	{r4, r5, r6, r7}
 8004906:	46bb      	mov	fp, r7
 8004908:	46b2      	mov	sl, r6
 800490a:	46a9      	mov	r9, r5
 800490c:	46a0      	mov	r8, r4
 800490e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((ck > 0) && (ook < 1))
 8004910:	2800      	cmp	r0, #0
 8004912:	d1bf      	bne.n	8004894 <ShiftGSMProfile+0x17c>
 8004914:	e72a      	b.n	800476c <ShiftGSMProfile+0x54>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004916:	220c      	movs	r2, #12
 8004918:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800491a:	4940      	ldr	r1, [pc, #256]	; (8004a1c <ShiftGSMProfile+0x304>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800491c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800491e:	0030      	movs	r0, r6
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <ShiftGSMProfile+0x2a4>)
 8004922:	3234      	adds	r2, #52	; 0x34
 8004924:	f006 f95a 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004928:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800492a:	2202      	movs	r2, #2
 800492c:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 800492e:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004930:	0030      	movs	r0, r6
 8004932:	230a      	movs	r3, #10
 8004934:	f006 f952 	bl	800abdc <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 8004938:	4839      	ldr	r0, [pc, #228]	; (8004a20 <ShiftGSMProfile+0x308>)
 800493a:	f7fe fd93 	bl	8003464 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
 800493e:	4653      	mov	r3, sl
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	4643      	mov	r3, r8
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <ShiftGSMProfile+0x30c>)
 800494c:	0021      	movs	r1, r4
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2000      	movs	r0, #0
 8004952:	0023      	movs	r3, r4
 8004954:	f7fe ff12 	bl	800377c <GetGSMReply>
 8004958:	f7fb fbd6 	bl	8000108 <strlen>
						GSMProf = 1;
 800495c:	2301      	movs	r3, #1
 800495e:	9a04      	ldr	r2, [sp, #16]
 8004960:	6013      	str	r3, [r2, #0]
					if (ook > 0)
 8004962:	2800      	cmp	r0, #0
 8004964:	d100      	bne.n	8004968 <ShiftGSMProfile+0x250>
 8004966:	e6fe      	b.n	8004766 <ShiftGSMProfile+0x4e>
 8004968:	e76f      	b.n	800484a <ShiftGSMProfile+0x132>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800496a:	220c      	movs	r2, #12
 800496c:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800496e:	492e      	ldr	r1, [pc, #184]	; (8004a28 <ShiftGSMProfile+0x310>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004970:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004972:	0030      	movs	r0, r6
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <ShiftGSMProfile+0x2a4>)
 8004976:	3236      	adds	r2, #54	; 0x36
 8004978:	f006 f930 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800497e:	2202      	movs	r2, #2
 8004980:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8004982:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004984:	0030      	movs	r0, r6
 8004986:	230a      	movs	r3, #10
 8004988:	f006 f928 	bl	800abdc <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 800498c:	4827      	ldr	r0, [pc, #156]	; (8004a2c <ShiftGSMProfile+0x314>)
 800498e:	f7fe fd69 	bl	8003464 <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", gpsto_net, "OK"));
 8004992:	4653      	mov	r3, sl
 8004994:	9302      	str	r3, [sp, #8]
 8004996:	4643      	mov	r3, r8
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <ShiftGSMProfile+0x318>)
 80049a0:	0021      	movs	r1, r4
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2000      	movs	r0, #0
 80049a6:	0023      	movs	r3, r4
 80049a8:	f7fe fee8 	bl	800377c <GetGSMReply>
 80049ac:	f7fb fbac 	bl	8000108 <strlen>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e7d4      	b.n	800495e <ShiftGSMProfile+0x246>
 80049b4:	200049ac 	.word	0x200049ac
 80049b8:	08012c68 	.word	0x08012c68
 80049bc:	00001388 	.word	0x00001388
 80049c0:	00000a0d 	.word	0x00000a0d
 80049c4:	08012c9c 	.word	0x08012c9c
 80049c8:	080128d8 	.word	0x080128d8
 80049cc:	08012bf4 	.word	0x08012bf4
 80049d0:	200000cc 	.word	0x200000cc
 80049d4:	08012ca8 	.word	0x08012ca8
 80049d8:	08012d34 	.word	0x08012d34
 80049dc:	00000bb8 	.word	0x00000bb8
 80049e0:	08012d6c 	.word	0x08012d6c
 80049e4:	08012d94 	.word	0x08012d94
 80049e8:	08012db4 	.word	0x08012db4
 80049ec:	08012df4 	.word	0x08012df4
 80049f0:	08012e14 	.word	0x08012e14
 80049f4:	2000009c 	.word	0x2000009c
 80049f8:	08012f58 	.word	0x08012f58
 80049fc:	08012f8c 	.word	0x08012f8c
 8004a00:	08012fb4 	.word	0x08012fb4
 8004a04:	08012cc4 	.word	0x08012cc4
 8004a08:	08012cf8 	.word	0x08012cf8
 8004a0c:	08012d04 	.word	0x08012d04
 8004a10:	200000c8 	.word	0x200000c8
 8004a14:	08012d18 	.word	0x08012d18
 8004a18:	00001770 	.word	0x00001770
 8004a1c:	08012e38 	.word	0x08012e38
 8004a20:	08012e7c 	.word	0x08012e7c
 8004a24:	08012ea8 	.word	0x08012ea8
 8004a28:	08012ec8 	.word	0x08012ec8
 8004a2c:	08012f0c 	.word	0x08012f0c
 8004a30:	08012f38 	.word	0x08012f38

08004a34 <InitGSM>:

void InitGSM()
{
 8004a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a36:	46de      	mov	lr, fp
 8004a38:	4645      	mov	r5, r8
 8004a3a:	4657      	mov	r7, sl
 8004a3c:	464e      	mov	r6, r9
 8004a3e:	b5e0      	push	{r5, r6, r7, lr}
	// RestartGSM();
	HAL_Delay(5000);
 8004a40:	48c6      	ldr	r0, [pc, #792]	; (8004d5c <InitGSM+0x328>)
{
 8004a42:	b087      	sub	sp, #28
	HAL_Delay(5000);
 8004a44:	f002 ffd6 	bl	80079f4 <HAL_Delay>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 8004a48:	4bc5      	ldr	r3, [pc, #788]	; (8004d60 <InitGSM+0x32c>)
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	f7fe fd09 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 8004a52:	4bc4      	ldr	r3, [pc, #784]	; (8004d64 <InitGSM+0x330>)
 8004a54:	4fc4      	ldr	r7, [pc, #784]	; (8004d68 <InitGSM+0x334>)
 8004a56:	9302      	str	r3, [sp, #8]
 8004a58:	4cc4      	ldr	r4, [pc, #784]	; (8004d6c <InitGSM+0x338>)
 8004a5a:	4698      	mov	r8, r3
 8004a5c:	4dc4      	ldr	r5, [pc, #784]	; (8004d70 <InitGSM+0x33c>)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2200      	movs	r2, #0
 8004a62:	0021      	movs	r1, r4
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	200f      	movs	r0, #15
 8004a68:	0023      	movs	r3, r4
 8004a6a:	9500      	str	r5, [sp, #0]
 8004a6c:	f7fe fe86 	bl	800377c <GetGSMReply>
 8004a70:	f7fb fb4a 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d10d      	bne.n	8004a94 <InitGSM+0x60>
		SendGSMCode(" ATE0");
 8004a78:	4648      	mov	r0, r9
 8004a7a:	f7fe fcf3 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 8004a7e:	4643      	mov	r3, r8
 8004a80:	9302      	str	r3, [sp, #8]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	0021      	movs	r1, r4
 8004a8a:	0023      	movs	r3, r4
 8004a8c:	200f      	movs	r0, #15
 8004a8e:	9500      	str	r5, [sp, #0]
 8004a90:	f7fe fe74 	bl	800377c <GetGSMReply>
{
 8004a94:	2302      	movs	r3, #2
 8004a96:	469a      	mov	sl, r3
 8004a98:	4db6      	ldr	r5, [pc, #728]	; (8004d74 <InitGSM+0x340>)
 8004a9a:	4eb7      	ldr	r6, [pc, #732]	; (8004d78 <InitGSM+0x344>)
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8004a9c:	0028      	movs	r0, r5
 8004a9e:	f7fe fce1 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004aa2:	4643      	mov	r3, r8
 8004aa4:	9302      	str	r3, [sp, #8]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	0021      	movs	r1, r4
 8004aae:	0023      	movs	r3, r4
 8004ab0:	200f      	movs	r0, #15
 8004ab2:	9600      	str	r6, [sp, #0]
 8004ab4:	f7fe fe62 	bl	800377c <GetGSMReply>
	while ((ck > 0) && (i < 1))
 8004ab8:	4653      	mov	r3, sl
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d000      	beq.n	8004ac0 <InitGSM+0x8c>
 8004abe:	e118      	b.n	8004cf2 <InitGSM+0x2be>
	}

	HAL_Delay(2000);
 8004ac0:	20fa      	movs	r0, #250	; 0xfa
 8004ac2:	00c0      	lsls	r0, r0, #3
 8004ac4:	f002 ff96 	bl	80079f4 <HAL_Delay>
	ShiftGSMProfile();
 8004ac8:	f7ff fe26 	bl	8004718 <ShiftGSMProfile>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 8004acc:	4648      	mov	r0, r9
 8004ace:	f7fe fcc9 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8004ad2:	4643      	mov	r3, r8
 8004ad4:	9302      	str	r3, [sp, #8]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	9301      	str	r3, [sp, #4]
 8004adc:	4ba7      	ldr	r3, [pc, #668]	; (8004d7c <InitGSM+0x348>)
 8004ade:	0021      	movs	r1, r4
 8004ae0:	469a      	mov	sl, r3
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	200a      	movs	r0, #10
 8004ae6:	0023      	movs	r3, r4
 8004ae8:	f7fe fe48 	bl	800377c <GetGSMReply>
 8004aec:	f7fb fb0c 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d10e      	bne.n	8004b12 <InitGSM+0xde>
		SendGSMCode(" ATE0");
 8004af4:	4648      	mov	r0, r9
 8004af6:	f7fe fcb5 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8004afa:	4643      	mov	r3, r8
 8004afc:	9302      	str	r3, [sp, #8]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2200      	movs	r2, #0
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	4653      	mov	r3, sl
 8004b06:	0021      	movs	r1, r4
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	200a      	movs	r0, #10
 8004b0c:	0023      	movs	r3, r4
 8004b0e:	f7fe fe35 	bl	800377c <GetGSMReply>
{
 8004b12:	2302      	movs	r3, #2
 8004b14:	4699      	mov	r9, r3
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8004b16:	0028      	movs	r0, r5
 8004b18:	f7fe fca4 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004b1c:	4643      	mov	r3, r8
 8004b1e:	9302      	str	r3, [sp, #8]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	0021      	movs	r1, r4
 8004b28:	0023      	movs	r3, r4
 8004b2a:	200a      	movs	r0, #10
 8004b2c:	9600      	str	r6, [sp, #0]
 8004b2e:	f7fe fe25 	bl	800377c <GetGSMReply>
	while ((ck > 0) && (i < 1))
 8004b32:	464b      	mov	r3, r9
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d000      	beq.n	8004b3a <InitGSM+0x106>
 8004b38:	e0d3      	b.n	8004ce2 <InitGSM+0x2ae>
 8004b3a:	4b91      	ldr	r3, [pc, #580]	; (8004d80 <InitGSM+0x34c>)
 8004b3c:	260a      	movs	r6, #10
 8004b3e:	469a      	mov	sl, r3
 8004b40:	4b90      	ldr	r3, [pc, #576]	; (8004d84 <InitGSM+0x350>)
 8004b42:	4699      	mov	r9, r3
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
		// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
		if (i > 0)
		{
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 8004b44:	4b90      	ldr	r3, [pc, #576]	; (8004d88 <InitGSM+0x354>)
 8004b46:	469b      	mov	fp, r3
 8004b48:	e002      	b.n	8004b50 <InitGSM+0x11c>
	while ((ck > 0) && (i < 1))
 8004b4a:	2e00      	cmp	r6, #0
 8004b4c:	d100      	bne.n	8004b50 <InitGSM+0x11c>
 8004b4e:	e0c1      	b.n	8004cd4 <InitGSM+0x2a0>
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 8004b50:	4650      	mov	r0, sl
 8004b52:	f7fe fc87 	bl	8003464 <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 8004b56:	4643      	mov	r3, r8
 8004b58:	9302      	str	r3, [sp, #8]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	464b      	mov	r3, r9
 8004b62:	0021      	movs	r1, r4
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	2005      	movs	r0, #5
 8004b68:	0023      	movs	r3, r4
 8004b6a:	f7fe fe07 	bl	800377c <GetGSMReply>
 8004b6e:	f7fb facb 	bl	8000108 <strlen>
 8004b72:	0005      	movs	r5, r0
		HAL_Delay(1000);
 8004b74:	20fa      	movs	r0, #250	; 0xfa
 8004b76:	0080      	lsls	r0, r0, #2
		ck = ck - 1;
 8004b78:	3e01      	subs	r6, #1
		HAL_Delay(1000);
 8004b7a:	f002 ff3b 	bl	80079f4 <HAL_Delay>
		if (i > 0)
 8004b7e:	2d00      	cmp	r5, #0
 8004b80:	d0e3      	beq.n	8004b4a <InitGSM+0x116>
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 8004b82:	4658      	mov	r0, fp
 8004b84:	f7fe fc6e 	bl	8003464 <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 8004b88:	4643      	mov	r3, r8
 8004b8a:	9302      	str	r3, [sp, #8]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	4b7e      	ldr	r3, [pc, #504]	; (8004d8c <InitGSM+0x358>)
 8004b94:	0021      	movs	r1, r4
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	2000      	movs	r0, #0
 8004b9a:	0023      	movs	r3, r4
 8004b9c:	f7fe fdee 	bl	800377c <GetGSMReply>
 8004ba0:	f7fb fab2 	bl	8000108 <strlen>

			if (i > 0)
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d0d0      	beq.n	8004b4a <InitGSM+0x116>
			{
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 8004ba8:	4879      	ldr	r0, [pc, #484]	; (8004d90 <InitGSM+0x35c>)
 8004baa:	f7fe fc5b 	bl	8003464 <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 8004bae:	4643      	mov	r3, r8
 8004bb0:	9302      	str	r3, [sp, #8]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	4b76      	ldr	r3, [pc, #472]	; (8004d94 <InitGSM+0x360>)
 8004bba:	0021      	movs	r1, r4
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	0023      	movs	r3, r4
 8004bc2:	f7fe fddb 	bl	800377c <GetGSMReply>
 8004bc6:	f7fb fa9f 	bl	8000108 <strlen>

				if (i > 0)
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0bd      	beq.n	8004b4a <InitGSM+0x116>
				{
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 8004bce:	4872      	ldr	r0, [pc, #456]	; (8004d98 <InitGSM+0x364>)
 8004bd0:	f7fe fc48 	bl	8003464 <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 8004bd4:	4643      	mov	r3, r8
 8004bd6:	9302      	str	r3, [sp, #8]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	4b6f      	ldr	r3, [pc, #444]	; (8004d9c <InitGSM+0x368>)
 8004be0:	0021      	movs	r1, r4
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	2000      	movs	r0, #0
 8004be6:	0023      	movs	r3, r4
 8004be8:	f7fe fdc8 	bl	800377c <GetGSMReply>
 8004bec:	f7fb fa8c 	bl	8000108 <strlen>
					if (i > 0)
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d0aa      	beq.n	8004b4a <InitGSM+0x116>
					{
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 8004bf4:	486a      	ldr	r0, [pc, #424]	; (8004da0 <InitGSM+0x36c>)
 8004bf6:	f7fe fc35 	bl	8003464 <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 8004bfa:	4643      	mov	r3, r8
 8004bfc:	9302      	str	r3, [sp, #8]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2200      	movs	r2, #0
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	4b67      	ldr	r3, [pc, #412]	; (8004da4 <InitGSM+0x370>)
 8004c06:	0021      	movs	r1, r4
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	0023      	movs	r3, r4
 8004c0e:	f7fe fdb5 	bl	800377c <GetGSMReply>
 8004c12:	f7fb fa79 	bl	8000108 <strlen>
						if (i > 0)
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d097      	beq.n	8004b4a <InitGSM+0x116>
						{
							HAL_Delay(3000);
 8004c1a:	4863      	ldr	r0, [pc, #396]	; (8004da8 <InitGSM+0x374>)
 8004c1c:	f002 feea 	bl	80079f4 <HAL_Delay>
							// SendGSMCode(" AT+CSMP=17,167,0,16");
							// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CSMP=17,167,0,16  SMS Text mode parameter ",10));
							if (i > 0)
							{
								SendGSMCode(" AT+QENG=1,4");
 8004c20:	4862      	ldr	r0, [pc, #392]	; (8004dac <InitGSM+0x378>)
 8004c22:	f7fe fc1f 	bl	8003464 <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 8004c26:	4643      	mov	r3, r8
 8004c28:	9302      	str	r3, [sp, #8]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	4b5f      	ldr	r3, [pc, #380]	; (8004db0 <InitGSM+0x37c>)
 8004c32:	0021      	movs	r1, r4
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2000      	movs	r0, #0
 8004c38:	0023      	movs	r3, r4
 8004c3a:	f7fe fd9f 	bl	800377c <GetGSMReply>
 8004c3e:	f7fb fa63 	bl	8000108 <strlen>

								if (i > 0)
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d081      	beq.n	8004b4a <InitGSM+0x116>
								{

									HAL_Delay(1000);
 8004c46:	20fa      	movs	r0, #250	; 0xfa
 8004c48:	0080      	lsls	r0, r0, #2
 8004c4a:	f002 fed3 	bl	80079f4 <HAL_Delay>
									if (GSMProf == 0)
 8004c4e:	4b59      	ldr	r3, [pc, #356]	; (8004db4 <InitGSM+0x380>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004c50:	4d59      	ldr	r5, [pc, #356]	; (8004db8 <InitGSM+0x384>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d054      	beq.n	8004d02 <InitGSM+0x2ce>
									{
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
										SetupGPRS("taisysnet"); // taisysnet");
									}
									else if (GSMProf == 1)
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d068      	beq.n	8004d2e <InitGSM+0x2fa>
 8004c5c:	ae05      	add	r6, sp, #20
									{
										Debug_Tx("_____________BSNL APN SET_____________________________");
										SetupGPRS("bsnlnet"); // taisysnet");
									}
									HAL_Delay(1000);
 8004c5e:	20fa      	movs	r0, #250	; 0xfa
 8004c60:	0080      	lsls	r0, r0, #2
 8004c62:	f002 fec7 	bl	80079f4 <HAL_Delay>
 8004c66:	220c      	movs	r2, #12
 8004c68:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004c6a:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004c6c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004c6e:	4953      	ldr	r1, [pc, #332]	; (8004dbc <InitGSM+0x388>)
 8004c70:	4b3a      	ldr	r3, [pc, #232]	; (8004d5c <InitGSM+0x328>)
 8004c72:	322c      	adds	r2, #44	; 0x2c
 8004c74:	f005 ffb2 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004c78:	4b51      	ldr	r3, [pc, #324]	; (8004dc0 <InitGSM+0x38c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004c7a:	0031      	movs	r1, r6
 8004c7c:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8004c7e:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004c80:	0028      	movs	r0, r5
 8004c82:	230a      	movs	r3, #10
 8004c84:	f005 ffaa 	bl	800abdc <HAL_UART_Transmit>

									Debug_Tx("_____________Operator again_____________________________");
									// Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 8004c88:	20fa      	movs	r0, #250	; 0xfa
 8004c8a:	0080      	lsls	r0, r0, #2
 8004c8c:	f002 feb2 	bl	80079f4 <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8004c90:	4e4c      	ldr	r6, [pc, #304]	; (8004dc4 <InitGSM+0x390>)
 8004c92:	0030      	movs	r0, r6
 8004c94:	f7fe fbe6 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8004c98:	4643      	mov	r3, r8
 8004c9a:	9302      	str	r3, [sp, #8]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	4d4a      	ldr	r5, [pc, #296]	; (8004dc8 <InitGSM+0x394>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	0021      	movs	r1, r4
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	0023      	movs	r3, r4
 8004caa:	9500      	str	r5, [sp, #0]
 8004cac:	f7fe fd66 	bl	800377c <GetGSMReply>
									SetTCPMux();
									HAL_Delay(1000);
 8004cb0:	20fa      	movs	r0, #250	; 0xfa
 8004cb2:	0080      	lsls	r0, r0, #2
 8004cb4:	f002 fe9e 	bl	80079f4 <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8004cb8:	0030      	movs	r0, r6
 8004cba:	f7fe fbd3 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8004cbe:	4643      	mov	r3, r8
 8004cc0:	9302      	str	r3, [sp, #8]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	0021      	movs	r1, r4
 8004cca:	0023      	movs	r3, r4
 8004ccc:	2000      	movs	r0, #0
 8004cce:	9500      	str	r5, [sp, #0]
 8004cd0:	f7fe fd54 	bl	800377c <GetGSMReply>
					}
				}
			}
		}
	}
}
 8004cd4:	b007      	add	sp, #28
 8004cd6:	bcf0      	pop	{r4, r5, r6, r7}
 8004cd8:	46bb      	mov	fp, r7
 8004cda:	46b2      	mov	sl, r6
 8004cdc:	46a9      	mov	r9, r5
 8004cde:	46a0      	mov	r8, r4
 8004ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004ce2:	f7fb fa11 	bl	8000108 <strlen>
		ck = ck - 1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4699      	mov	r9, r3
	while ((ck > 0) && (i < 1))
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d100      	bne.n	8004cf0 <InitGSM+0x2bc>
 8004cee:	e712      	b.n	8004b16 <InitGSM+0xe2>
 8004cf0:	e723      	b.n	8004b3a <InitGSM+0x106>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8004cf2:	f7fb fa09 	bl	8000108 <strlen>
		ck = ck - 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	469a      	mov	sl, r3
	while ((ck > 0) && (i < 1))
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d100      	bne.n	8004d00 <InitGSM+0x2cc>
 8004cfe:	e6cd      	b.n	8004a9c <InitGSM+0x68>
 8004d00:	e6de      	b.n	8004ac0 <InitGSM+0x8c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d02:	220c      	movs	r2, #12
 8004d04:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004d06:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d08:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004d0a:	4930      	ldr	r1, [pc, #192]	; (8004dcc <InitGSM+0x398>)
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <InitGSM+0x328>)
 8004d0e:	322c      	adds	r2, #44	; 0x2c
 8004d10:	f005 ff64 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004d14:	4b2a      	ldr	r3, [pc, #168]	; (8004dc0 <InitGSM+0x38c>)
 8004d16:	ae05      	add	r6, sp, #20
 8004d18:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	230a      	movs	r3, #10
 8004d1e:	0031      	movs	r1, r6
 8004d20:	0028      	movs	r0, r5
 8004d22:	f005 ff5b 	bl	800abdc <HAL_UART_Transmit>
										SetupGPRS("taisysnet"); // taisysnet");
 8004d26:	482a      	ldr	r0, [pc, #168]	; (8004dd0 <InitGSM+0x39c>)
 8004d28:	f7ff fc72 	bl	8004610 <SetupGPRS>
 8004d2c:	e797      	b.n	8004c5e <InitGSM+0x22a>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d2e:	220c      	movs	r2, #12
 8004d30:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004d32:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004d34:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004d36:	4927      	ldr	r1, [pc, #156]	; (8004dd4 <InitGSM+0x3a0>)
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <InitGSM+0x328>)
 8004d3a:	322a      	adds	r2, #42	; 0x2a
 8004d3c:	f005 ff4e 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004d40:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <InitGSM+0x38c>)
 8004d42:	ae05      	add	r6, sp, #20
 8004d44:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004d46:	2202      	movs	r2, #2
 8004d48:	230a      	movs	r3, #10
 8004d4a:	0031      	movs	r1, r6
 8004d4c:	0028      	movs	r0, r5
 8004d4e:	f005 ff45 	bl	800abdc <HAL_UART_Transmit>
										SetupGPRS("bsnlnet"); // taisysnet");
 8004d52:	4821      	ldr	r0, [pc, #132]	; (8004dd8 <InitGSM+0x3a4>)
 8004d54:	f7ff fc5c 	bl	8004610 <SetupGPRS>
 8004d58:	e781      	b.n	8004c5e <InitGSM+0x22a>
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	00001388 	.word	0x00001388
 8004d60:	08012fd0 	.word	0x08012fd0
 8004d64:	080128d8 	.word	0x080128d8
 8004d68:	200000c8 	.word	0x200000c8
 8004d6c:	08012bf4 	.word	0x08012bf4
 8004d70:	08012fd8 	.word	0x08012fd8
 8004d74:	0801275c 	.word	0x0801275c
 8004d78:	08012fec 	.word	0x08012fec
 8004d7c:	08013000 	.word	0x08013000
 8004d80:	08013014 	.word	0x08013014
 8004d84:	08013020 	.word	0x08013020
 8004d88:	08013048 	.word	0x08013048
 8004d8c:	08013054 	.word	0x08013054
 8004d90:	0801307c 	.word	0x0801307c
 8004d94:	08013088 	.word	0x08013088
 8004d98:	080130a4 	.word	0x080130a4
 8004d9c:	080130b0 	.word	0x080130b0
 8004da0:	080130e0 	.word	0x080130e0
 8004da4:	080130f0 	.word	0x080130f0
 8004da8:	00000bb8 	.word	0x00000bb8
 8004dac:	0801311c 	.word	0x0801311c
 8004db0:	0801312c 	.word	0x0801312c
 8004db4:	2000009c 	.word	0x2000009c
 8004db8:	200049ac 	.word	0x200049ac
 8004dbc:	080131dc 	.word	0x080131dc
 8004dc0:	00000a0d 	.word	0x00000a0d
 8004dc4:	08012b98 	.word	0x08012b98
 8004dc8:	08012ba4 	.word	0x08012ba4
 8004dcc:	08013154 	.word	0x08013154
 8004dd0:	08013190 	.word	0x08013190
 8004dd4:	0801319c 	.word	0x0801319c
 8004dd8:	080131d4 	.word	0x080131d4

08004ddc <SPI_flash_get_device_ID>:

void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
}

void SPI_flash_get_device_ID( ) {
 8004ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dde:	46de      	mov	lr, fp
 8004de0:	4657      	mov	r7, sl
 8004de2:	464e      	mov	r6, r9
 8004de4:	4645      	mov	r5, r8
    SPI_flash_cs_low;
 8004de6:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_get_device_ID( ) {
 8004de8:	b5e0      	push	{r5, r6, r7, lr}
    SPI_flash_cs_low;
 8004dea:	05db      	lsls	r3, r3, #23
void SPI_flash_get_device_ID( ) {
 8004dec:	b0a3      	sub	sp, #140	; 0x8c
    SPI_flash_cs_low;
 8004dee:	0018      	movs	r0, r3
 8004df0:	2200      	movs	r2, #0
 8004df2:	2110      	movs	r1, #16
 8004df4:	469a      	mov	sl, r3
 8004df6:	f003 fcc5 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8004dfa:	2390      	movs	r3, #144	; 0x90
 8004dfc:	ad09      	add	r5, sp, #36	; 0x24
 8004dfe:	702b      	strb	r3, [r5, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e00:	23fa      	movs	r3, #250	; 0xfa
 8004e02:	4f62      	ldr	r7, [pc, #392]	; (8004f8c <SPI_flash_get_device_ID+0x1b0>)
 8004e04:	0029      	movs	r1, r5
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	2201      	movs	r2, #1
 8004e0a:	0038      	movs	r0, r7
 8004e0c:	4699      	mov	r9, r3
 8004e0e:	f004 ff1d 	bl	8009c4c <HAL_SPI_Transmit>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8004e12:	2300      	movs	r3, #0
    aa[1]=0;
    aa[2]=0;
    aa[3]=0;
    aa[4]=0;
 8004e14:	ac06      	add	r4, sp, #24
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004e16:	0021      	movs	r1, r4
    aa[0]=0;
 8004e18:	9306      	str	r3, [sp, #24]
    aa[4]=0;
 8004e1a:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	464b      	mov	r3, r9
 8004e20:	0038      	movs	r0, r7
 8004e22:	f004 ff13 	bl	8009c4c <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004e26:	464a      	mov	r2, r9
 8004e28:	2302      	movs	r3, #2
 8004e2a:	0021      	movs	r1, r4
 8004e2c:	9200      	str	r2, [sp, #0]
 8004e2e:	0038      	movs	r0, r7
 8004e30:	0022      	movs	r2, r4
 8004e32:	f004 ffd7 	bl	8009de4 <HAL_SPI_TransmitReceive>
    aa[5]=0;
    SPI_flash_sent_address (aa);
    SPI_flash_TransmitReceive(aa, 2);
    SPI_flash_cs_high;
 8004e36:	4650      	mov	r0, sl
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2110      	movs	r1, #16
 8004e3c:	f003 fca2 	bl	8008784 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8004e40:	7863      	ldrb	r3, [r4, #1]
 8004e42:	7822      	ldrb	r2, [r4, #0]
 8004e44:	4952      	ldr	r1, [pc, #328]	; (8004f90 <SPI_flash_get_device_ID+0x1b4>)
 8004e46:	0028      	movs	r0, r5
 8004e48:	f009 fd30 	bl	800e8ac <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e4c:	4a51      	ldr	r2, [pc, #324]	; (8004f94 <SPI_flash_get_device_ID+0x1b8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004e4e:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e50:	4690      	mov	r8, r2
 8004e52:	6813      	ldr	r3, [r2, #0]
 8004e54:	220c      	movs	r2, #12
 8004e56:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004e58:	f7fb f956 	bl	8000108 <strlen>
 8004e5c:	494e      	ldr	r1, [pc, #312]	; (8004f98 <SPI_flash_get_device_ID+0x1bc>)
 8004e5e:	b282      	uxth	r2, r0
 8004e60:	468b      	mov	fp, r1
 8004e62:	000b      	movs	r3, r1
 8004e64:	4640      	mov	r0, r8
 8004e66:	0029      	movs	r1, r5
 8004e68:	f005 feb8 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004e6c:	494b      	ldr	r1, [pc, #300]	; (8004f9c <SPI_flash_get_device_ID+0x1c0>)
 8004e6e:	ae05      	add	r6, sp, #20
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004e70:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004e72:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004e74:	2202      	movs	r2, #2
 8004e76:	0031      	movs	r1, r6
 8004e78:	4640      	mov	r0, r8
 8004e7a:	f005 feaf 	bl	800abdc <HAL_UART_Transmit>
    Debug_Tx((char*)bufd);

    SPI_flash_cs_low;
 8004e7e:	4650      	mov	r0, sl
 8004e80:	2200      	movs	r2, #0
 8004e82:	2110      	movs	r1, #16
 8004e84:	f003 fc7e 	bl	8008784 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8004e88:	239f      	movs	r3, #159	; 0x9f
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e8a:	0031      	movs	r1, r6
 8004e8c:	7033      	strb	r3, [r6, #0]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	464b      	mov	r3, r9
 8004e92:	0038      	movs	r0, r7
 8004e94:	f004 feda 	bl	8009c4c <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004e98:	2300      	movs	r3, #0
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004e9a:	4648      	mov	r0, r9
       aa[1]=0;
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
 8004e9c:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004e9e:	0022      	movs	r2, r4
 8004ea0:	0021      	movs	r1, r4
       aa[0]=0;
 8004ea2:	9306      	str	r3, [sp, #24]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004ea4:	9000      	str	r0, [sp, #0]
 8004ea6:	3303      	adds	r3, #3
 8004ea8:	0038      	movs	r0, r7
 8004eaa:	f004 ff9b 	bl	8009de4 <HAL_SPI_TransmitReceive>
       aa[5]=0;
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
       SPI_flash_cs_high;
 8004eae:	4650      	mov	r0, sl
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	f003 fc66 	bl	8008784 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8004eb8:	78a0      	ldrb	r0, [r4, #2]
 8004eba:	7863      	ldrb	r3, [r4, #1]
 8004ebc:	7822      	ldrb	r2, [r4, #0]
 8004ebe:	4938      	ldr	r1, [pc, #224]	; (8004fa0 <SPI_flash_get_device_ID+0x1c4>)
 8004ec0:	9000      	str	r0, [sp, #0]
 8004ec2:	0028      	movs	r0, r5
 8004ec4:	f009 fcf2 	bl	800e8ac <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ec8:	4640      	mov	r0, r8
 8004eca:	220c      	movs	r2, #12
 8004ecc:	6803      	ldr	r3, [r0, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004ece:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ed0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004ed2:	f7fb f919 	bl	8000108 <strlen>
 8004ed6:	465b      	mov	r3, fp
 8004ed8:	0029      	movs	r1, r5
 8004eda:	b282      	uxth	r2, r0
 8004edc:	4640      	mov	r0, r8
 8004ede:	f005 fe7d 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004ee2:	492e      	ldr	r1, [pc, #184]	; (8004f9c <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004ee4:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004ee6:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004ee8:	2202      	movs	r2, #2
 8004eea:	0031      	movs	r1, r6
 8004eec:	4640      	mov	r0, r8
 8004eee:	f005 fe75 	bl	800abdc <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);



       SPI_flash_cs_low;
 8004ef2:	4650      	mov	r0, sl
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2110      	movs	r1, #16
 8004ef8:	f003 fc44 	bl	8008784 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8004efc:	234b      	movs	r3, #75	; 0x4b
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004efe:	0031      	movs	r1, r6
 8004f00:	7033      	strb	r3, [r6, #0]
 8004f02:	2201      	movs	r2, #1
 8004f04:	464b      	mov	r3, r9
 8004f06:	0038      	movs	r0, r7
 8004f08:	f004 fea0 	bl	8009c4c <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8004f0c:	2300      	movs	r3, #0
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
       aa[5]=0;
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8004f0e:	0021      	movs	r1, r4
       aa[0]=0;
 8004f10:	9306      	str	r3, [sp, #24]
       aa[4]=0;
 8004f12:	80a3      	strh	r3, [r4, #4]
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8004f14:	2204      	movs	r2, #4
 8004f16:	464b      	mov	r3, r9
 8004f18:	0038      	movs	r0, r7
 8004f1a:	f004 fe97 	bl	8009c4c <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8004f1e:	464b      	mov	r3, r9
 8004f20:	0022      	movs	r2, r4
 8004f22:	0021      	movs	r1, r4
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	0038      	movs	r0, r7
 8004f28:	2306      	movs	r3, #6
 8004f2a:	f004 ff5b 	bl	8009de4 <HAL_SPI_TransmitReceive>
       SPI_flash_TransmitReceive(aa, 6);
       SPI_flash_cs_high;
 8004f2e:	4650      	mov	r0, sl
 8004f30:	2201      	movs	r2, #1
 8004f32:	2110      	movs	r1, #16
 8004f34:	f003 fc26 	bl	8008784 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 8004f38:	7960      	ldrb	r0, [r4, #5]
 8004f3a:	7863      	ldrb	r3, [r4, #1]
 8004f3c:	7822      	ldrb	r2, [r4, #0]
 8004f3e:	9003      	str	r0, [sp, #12]
 8004f40:	7920      	ldrb	r0, [r4, #4]
 8004f42:	4918      	ldr	r1, [pc, #96]	; (8004fa4 <SPI_flash_get_device_ID+0x1c8>)
 8004f44:	9002      	str	r0, [sp, #8]
 8004f46:	78e0      	ldrb	r0, [r4, #3]
 8004f48:	9001      	str	r0, [sp, #4]
 8004f4a:	78a0      	ldrb	r0, [r4, #2]
 8004f4c:	9000      	str	r0, [sp, #0]
 8004f4e:	0028      	movs	r0, r5
 8004f50:	f009 fcac 	bl	800e8ac <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004f54:	4643      	mov	r3, r8
 8004f56:	220c      	movs	r2, #12
 8004f58:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004f5a:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004f5c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8004f5e:	f7fb f8d3 	bl	8000108 <strlen>
 8004f62:	465b      	mov	r3, fp
 8004f64:	0029      	movs	r1, r5
 8004f66:	b282      	uxth	r2, r0
 8004f68:	4640      	mov	r0, r8
 8004f6a:	f005 fe37 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8004f6e:	490b      	ldr	r1, [pc, #44]	; (8004f9c <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004f70:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8004f72:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8004f74:	2202      	movs	r2, #2
 8004f76:	0031      	movs	r1, r6
 8004f78:	4640      	mov	r0, r8
 8004f7a:	f005 fe2f 	bl	800abdc <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);
}
 8004f7e:	b023      	add	sp, #140	; 0x8c
 8004f80:	bcf0      	pop	{r4, r5, r6, r7}
 8004f82:	46bb      	mov	fp, r7
 8004f84:	46b2      	mov	sl, r6
 8004f86:	46a9      	mov	r9, r5
 8004f88:	46a0      	mov	r8, r4
 8004f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f8c:	200047d4 	.word	0x200047d4
 8004f90:	08013218 	.word	0x08013218
 8004f94:	200049ac 	.word	0x200049ac
 8004f98:	00001388 	.word	0x00001388
 8004f9c:	00000a0d 	.word	0x00000a0d
 8004fa0:	08013238 	.word	0x08013238
 8004fa4:	08013254 	.word	0x08013254

08004fa8 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8004fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    SPI_flash_cs_low;
 8004faa:	24a0      	movs	r4, #160	; 0xa0
 8004fac:	05e4      	lsls	r4, r4, #23
void SPI_flash_Sector_Erase(uint8_t* address) {
 8004fae:	b083      	sub	sp, #12
 8004fb0:	0007      	movs	r7, r0
    SPI_flash_cs_low;
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	0020      	movs	r0, r4
 8004fb6:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004fb8:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 8004fba:	f003 fbe3 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8004fbe:	466a      	mov	r2, sp
 8004fc0:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004fc2:	4669      	mov	r1, sp
 8004fc4:	4d23      	ldr	r5, [pc, #140]	; (8005054 <SPI_flash_Sector_Erase+0xac>)
 8004fc6:	00b6      	lsls	r6, r6, #2
 8004fc8:	71d3      	strb	r3, [r2, #7]
 8004fca:	0028      	movs	r0, r5
 8004fcc:	0033      	movs	r3, r6
 8004fce:	2201      	movs	r2, #1
 8004fd0:	3107      	adds	r1, #7
 8004fd2:	f004 fe3b 	bl	8009c4c <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8004fd6:	0020      	movs	r0, r4
 8004fd8:	2201      	movs	r2, #1
 8004fda:	2110      	movs	r1, #16
 8004fdc:	f003 fbd2 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8004fe0:	0020      	movs	r0, r4
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2110      	movs	r1, #16
 8004fe6:	f003 fbcd 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8004fea:	466a      	mov	r2, sp
 8004fec:	2320      	movs	r3, #32
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004fee:	4669      	mov	r1, sp
 8004ff0:	71d3      	strb	r3, [r2, #7]
 8004ff2:	0028      	movs	r0, r5
 8004ff4:	0033      	movs	r3, r6
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	3107      	adds	r1, #7
 8004ffa:	f004 fe27 	bl	8009c4c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8004ffe:	0033      	movs	r3, r6
 8005000:	0039      	movs	r1, r7
 8005002:	2203      	movs	r2, #3
 8005004:	0028      	movs	r0, r5
 8005006:	f004 fe21 	bl	8009c4c <HAL_SPI_Transmit>
    SPI_flash_sent_address (address);
    SPI_flash_cs_high;
 800500a:	0020      	movs	r0, r4
 800500c:	2201      	movs	r2, #1
 800500e:	2110      	movs	r1, #16
 8005010:	f003 fbb8 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8005014:	0020      	movs	r0, r4
 8005016:	2200      	movs	r2, #0
 8005018:	2110      	movs	r1, #16
 800501a:	f003 fbb3 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 800501e:	466a      	mov	r2, sp
 8005020:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005022:	4669      	mov	r1, sp
 8005024:	71d3      	strb	r3, [r2, #7]
 8005026:	0028      	movs	r0, r5
 8005028:	0033      	movs	r3, r6
 800502a:	2201      	movs	r2, #1
 800502c:	3107      	adds	r1, #7
 800502e:	f004 fe0d 	bl	8009c4c <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8005032:	0020      	movs	r0, r4
 8005034:	2201      	movs	r2, #1
 8005036:	2110      	movs	r1, #16
 8005038:	f003 fba4 	bl	8008784 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800503c:	220c      	movs	r2, #12
 800503e:	4806      	ldr	r0, [pc, #24]	; (8005058 <SPI_flash_Sector_Erase+0xb0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8005040:	4906      	ldr	r1, [pc, #24]	; (800505c <SPI_flash_Sector_Erase+0xb4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005042:	6803      	ldr	r3, [r0, #0]
 8005044:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8005046:	2396      	movs	r3, #150	; 0x96
 8005048:	0032      	movs	r2, r6
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	f005 fe38 	bl	800acc0 <HAL_UART_Receive>
    SPI_flash_Write_Disable();
    //HAL_Delay(100);
	Debug_Rx();
}
 8005050:	b003      	add	sp, #12
 8005052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005054:	200047d4 	.word	0x200047d4
 8005058:	200049ac 	.word	0x200049ac
 800505c:	20004a40 	.word	0x20004a40

08005060 <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 8005060:	b570      	push	{r4, r5, r6, lr}
    SPI_flash_cs_low;
 8005062:	24a0      	movs	r4, #160	; 0xa0
 8005064:	05e4      	lsls	r4, r4, #23
void SPI_flash_Chip_Erase(){
 8005066:	b082      	sub	sp, #8
    SPI_flash_cs_low;
 8005068:	0020      	movs	r0, r4
 800506a:	2200      	movs	r2, #0
 800506c:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800506e:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 8005070:	f003 fb88 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8005074:	466a      	mov	r2, sp
 8005076:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005078:	4669      	mov	r1, sp
 800507a:	4d1c      	ldr	r5, [pc, #112]	; (80050ec <SPI_flash_Chip_Erase+0x8c>)
 800507c:	00b6      	lsls	r6, r6, #2
 800507e:	71d3      	strb	r3, [r2, #7]
 8005080:	0028      	movs	r0, r5
 8005082:	0033      	movs	r3, r6
 8005084:	2201      	movs	r2, #1
 8005086:	3107      	adds	r1, #7
 8005088:	f004 fde0 	bl	8009c4c <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 800508c:	0020      	movs	r0, r4
 800508e:	2201      	movs	r2, #1
 8005090:	2110      	movs	r1, #16
 8005092:	f003 fb77 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8005096:	0020      	movs	r0, r4
 8005098:	2200      	movs	r2, #0
 800509a:	2110      	movs	r1, #16
 800509c:	f003 fb72 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 80050a0:	466a      	mov	r2, sp
 80050a2:	23c7      	movs	r3, #199	; 0xc7
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80050a4:	4669      	mov	r1, sp
 80050a6:	71d3      	strb	r3, [r2, #7]
 80050a8:	0028      	movs	r0, r5
 80050aa:	0033      	movs	r3, r6
 80050ac:	2201      	movs	r2, #1
 80050ae:	3107      	adds	r1, #7
 80050b0:	f004 fdcc 	bl	8009c4c <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 80050b4:	0020      	movs	r0, r4
 80050b6:	2201      	movs	r2, #1
 80050b8:	2110      	movs	r1, #16
 80050ba:	f003 fb63 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 80050be:	0020      	movs	r0, r4
 80050c0:	2200      	movs	r2, #0
 80050c2:	2110      	movs	r1, #16
 80050c4:	f003 fb5e 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 80050c8:	466a      	mov	r2, sp
 80050ca:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80050cc:	4669      	mov	r1, sp
 80050ce:	71d3      	strb	r3, [r2, #7]
 80050d0:	0028      	movs	r0, r5
 80050d2:	0033      	movs	r3, r6
 80050d4:	2201      	movs	r2, #1
 80050d6:	3107      	adds	r1, #7
 80050d8:	f004 fdb8 	bl	8009c4c <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 80050dc:	2201      	movs	r2, #1
 80050de:	2110      	movs	r1, #16
 80050e0:	0020      	movs	r0, r4
 80050e2:	f003 fb4f 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
}
 80050e6:	b002      	add	sp, #8
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	200047d4 	.word	0x200047d4

080050f0 <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 80050f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050f2:	46ce      	mov	lr, r9
 80050f4:	4647      	mov	r7, r8
    SPI_flash_cs_low;
 80050f6:	26a0      	movs	r6, #160	; 0xa0
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 80050f8:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 80050fa:	05f6      	lsls	r6, r6, #23
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 80050fc:	b085      	sub	sp, #20
 80050fe:	000f      	movs	r7, r1
 8005100:	4681      	mov	r9, r0
 8005102:	4690      	mov	r8, r2
    SPI_flash_cs_low;
 8005104:	0030      	movs	r0, r6
 8005106:	2200      	movs	r2, #0
 8005108:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800510a:	25fa      	movs	r5, #250	; 0xfa
    SPI_flash_cs_low;
 800510c:	f003 fb3a 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8005110:	466a      	mov	r2, sp
 8005112:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005114:	210f      	movs	r1, #15
 8005116:	4c29      	ldr	r4, [pc, #164]	; (80051bc <SPI_flash_Page_Program+0xcc>)
 8005118:	00ad      	lsls	r5, r5, #2
 800511a:	73d3      	strb	r3, [r2, #15]
 800511c:	4469      	add	r1, sp
 800511e:	002b      	movs	r3, r5
 8005120:	2201      	movs	r2, #1
 8005122:	0020      	movs	r0, r4
 8005124:	f004 fd92 	bl	8009c4c <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8005128:	0030      	movs	r0, r6
 800512a:	2201      	movs	r2, #1
 800512c:	2110      	movs	r1, #16
 800512e:	f003 fb29 	bl	8008784 <HAL_GPIO_WritePin>
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8005132:	0030      	movs	r0, r6
 8005134:	2200      	movs	r2, #0
 8005136:	2110      	movs	r1, #16
 8005138:	f003 fb24 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 800513c:	466a      	mov	r2, sp
 800513e:	2302      	movs	r3, #2
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005140:	210f      	movs	r1, #15
 8005142:	73d3      	strb	r3, [r2, #15]
 8005144:	4469      	add	r1, sp
 8005146:	002b      	movs	r3, r5
 8005148:	2201      	movs	r2, #1
 800514a:	0020      	movs	r0, r4
 800514c:	f004 fd7e 	bl	8009c4c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8005150:	002b      	movs	r3, r5
 8005152:	4649      	mov	r1, r9
 8005154:	2203      	movs	r2, #3
 8005156:	0020      	movs	r0, r4
 8005158:	f004 fd78 	bl	8009c4c <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 800515c:	4643      	mov	r3, r8
 800515e:	003a      	movs	r2, r7
 8005160:	0039      	movs	r1, r7
 8005162:	0020      	movs	r0, r4
 8005164:	9500      	str	r5, [sp, #0]
 8005166:	f004 fe3d 	bl	8009de4 <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address (data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 800516a:	0030      	movs	r0, r6
 800516c:	2201      	movs	r2, #1
 800516e:	2110      	movs	r1, #16
 8005170:	f003 fb08 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8005174:	0030      	movs	r0, r6
 8005176:	2200      	movs	r2, #0
 8005178:	2110      	movs	r1, #16
 800517a:	f003 fb03 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 800517e:	466a      	mov	r2, sp
 8005180:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005182:	210f      	movs	r1, #15
 8005184:	73d3      	strb	r3, [r2, #15]
 8005186:	4469      	add	r1, sp
 8005188:	002b      	movs	r3, r5
 800518a:	2201      	movs	r2, #1
 800518c:	0020      	movs	r0, r4
 800518e:	f004 fd5d 	bl	8009c4c <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8005192:	0030      	movs	r0, r6
 8005194:	2201      	movs	r2, #1
 8005196:	2110      	movs	r1, #16
 8005198:	f003 faf4 	bl	8008784 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800519c:	220c      	movs	r2, #12
 800519e:	4808      	ldr	r0, [pc, #32]	; (80051c0 <SPI_flash_Page_Program+0xd0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 80051a0:	4908      	ldr	r1, [pc, #32]	; (80051c4 <SPI_flash_Page_Program+0xd4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80051a2:	6803      	ldr	r3, [r0, #0]
 80051a4:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 80051a6:	2396      	movs	r3, #150	; 0x96
 80051a8:	002a      	movs	r2, r5
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	f005 fd88 	bl	800acc0 <HAL_UART_Receive>
    SPI_flash_Write_Disable();

	Debug_Rx();
    //HAL_Delay(1);
}
 80051b0:	b005      	add	sp, #20
 80051b2:	bcc0      	pop	{r6, r7}
 80051b4:	46b9      	mov	r9, r7
 80051b6:	46b0      	mov	r8, r6
 80051b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	200047d4 	.word	0x200047d4
 80051c0:	200049ac 	.word	0x200049ac
 80051c4:	20004a40 	.word	0x20004a40

080051c8 <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 80051c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ca:	46ce      	mov	lr, r9
 80051cc:	4647      	mov	r7, r8
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 80051ce:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 80051d0:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 80051d2:	05db      	lsls	r3, r3, #23
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 80051d4:	b085      	sub	sp, #20
 80051d6:	000d      	movs	r5, r1
 80051d8:	4680      	mov	r8, r0
 80051da:	0016      	movs	r6, r2
    SPI_flash_cs_low;
 80051dc:	0018      	movs	r0, r3
 80051de:	2200      	movs	r2, #0
 80051e0:	2110      	movs	r1, #16
 80051e2:	4699      	mov	r9, r3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80051e4:	27fa      	movs	r7, #250	; 0xfa
    SPI_flash_cs_low;
 80051e6:	f003 facd 	bl	8008784 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 80051ea:	210f      	movs	r1, #15
 80051ec:	2303      	movs	r3, #3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80051ee:	4c10      	ldr	r4, [pc, #64]	; (8005230 <SPI_flash_Read_Data+0x68>)
 80051f0:	4469      	add	r1, sp
 80051f2:	00bf      	lsls	r7, r7, #2
 80051f4:	700b      	strb	r3, [r1, #0]
 80051f6:	2201      	movs	r2, #1
 80051f8:	003b      	movs	r3, r7
 80051fa:	0020      	movs	r0, r4
 80051fc:	f004 fd26 	bl	8009c4c <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8005200:	003b      	movs	r3, r7
 8005202:	4641      	mov	r1, r8
 8005204:	2203      	movs	r2, #3
 8005206:	0020      	movs	r0, r4
 8005208:	f004 fd20 	bl	8009c4c <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 800520c:	0033      	movs	r3, r6
 800520e:	002a      	movs	r2, r5
 8005210:	0029      	movs	r1, r5
 8005212:	0020      	movs	r0, r4
 8005214:	9700      	str	r7, [sp, #0]
 8005216:	f004 fde5 	bl	8009de4 <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address(data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 800521a:	2201      	movs	r2, #1
 800521c:	2110      	movs	r1, #16
 800521e:	4648      	mov	r0, r9
 8005220:	f003 fab0 	bl	8008784 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8005224:	b005      	add	sp, #20
 8005226:	bcc0      	pop	{r6, r7}
 8005228:	46b9      	mov	r9, r7
 800522a:	46b0      	mov	r8, r6
 800522c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	200047d4 	.word	0x200047d4

08005234 <ReadQdata>:

}



int ReadQdata() {
 8005234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005236:	46d6      	mov	lr, sl
 8005238:	464f      	mov	r7, r9
 800523a:	4646      	mov	r6, r8
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 800523c:	2280      	movs	r2, #128	; 0x80
int ReadQdata() {
 800523e:	b5c0      	push	{r6, r7, lr}
	memset(ReadMData,0,4096);
 8005240:	4c3e      	ldr	r4, [pc, #248]	; (800533c <ReadQdata+0x108>)
 8005242:	2100      	movs	r1, #0
int ReadQdata() {
 8005244:	b0c0      	sub	sp, #256	; 0x100
	memset(ReadMData,0,4096);
 8005246:	0152      	lsls	r2, r2, #5
 8005248:	0020      	movs	r0, r4
 800524a:	f009 fb9b 	bl	800e984 <memset>
	memset(ReadMDataS,0,4096);
 800524e:	2280      	movs	r2, #128	; 0x80
 8005250:	4f3b      	ldr	r7, [pc, #236]	; (8005340 <ReadQdata+0x10c>)
 8005252:	0152      	lsls	r2, r2, #5
 8005254:	2100      	movs	r1, #0
 8005256:	0038      	movs	r0, r7
 8005258:	f009 fb94 	bl	800e984 <memset>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 800525c:	4b39      	ldr	r3, [pc, #228]	; (8005344 <ReadQdata+0x110>)
 800525e:	4698      	mov	r8, r3
 8005260:	4642      	mov	r2, r8
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	7852      	ldrb	r2, [r2, #1]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 800526a:	4a37      	ldr	r2, [pc, #220]	; (8005348 <ReadQdata+0x114>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 800526c:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 800526e:	4293      	cmp	r3, r2
 8005270:	dd50      	ble.n	8005314 <ReadQdata+0xe0>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8005272:	4642      	mov	r2, r8
	WrtAdd[0]=addi/(256*256);
 8005274:	4641      	mov	r1, r8
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8005276:	7892      	ldrb	r2, [r2, #2]
 8005278:	260f      	movs	r6, #15
 800527a:	18d3      	adds	r3, r2, r3
 800527c:	3b01      	subs	r3, #1
	WrtAdd[0]=addi/(256*256);
 800527e:	141a      	asrs	r2, r3, #16
 8005280:	700a      	strb	r2, [r1, #0]
		return 0;
	}
	incrimentAddress2(-1);
	int len=WrtAdd[1]%16;
	len=len+1;
	WrtAdd[1]=WrtAdd[1]/16;
 8005282:	22f0      	movs	r2, #240	; 0xf0
	WrtAdd[1]=(addi%(256*256))/256;
 8005284:	121b      	asrs	r3, r3, #8
	len=len+1;
 8005286:	401e      	ands	r6, r3
	WrtAdd[1]=WrtAdd[1]*16;
 8005288:	4013      	ands	r3, r2
 800528a:	704b      	strb	r3, [r1, #1]
	WrtAdd[2]=0;
 800528c:	2300      	movs	r3, #0
 800528e:	3601      	adds	r6, #1
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8005290:	0232      	lsls	r2, r6, #8
	WrtAdd[2]=0;
 8005292:	708b      	strb	r3, [r1, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8005294:	4640      	mov	r0, r8
 8005296:	0021      	movs	r1, r4
 8005298:	b292      	uxth	r2, r2
 800529a:	f7ff ff95 	bl	80051c8 <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 800529e:	4b2b      	ldr	r3, [pc, #172]	; (800534c <ReadQdata+0x118>)
		memset(temp,0,256);
		for (int j=0;j<256;j++){
 80052a0:	2580      	movs	r5, #128	; 0x80
 80052a2:	469a      	mov	sl, r3
			if (temp[j]==255){
				temp[j]=0;
				break;
			}
		}
		temp[255]=0;
 80052a4:	4b2a      	ldr	r3, [pc, #168]	; (8005350 <ReadQdata+0x11c>)
 80052a6:	3e01      	subs	r6, #1
 80052a8:	4699      	mov	r9, r3
 80052aa:	0236      	lsls	r6, r6, #8
 80052ac:	1934      	adds	r4, r6, r4
		for (int j=0;j<256;j++){
 80052ae:	006d      	lsls	r5, r5, #1
		memset(temp,0,256);
 80052b0:	2100      	movs	r1, #0
 80052b2:	22ff      	movs	r2, #255	; 0xff
 80052b4:	4668      	mov	r0, sp
 80052b6:	f009 fb65 	bl	800e984 <memset>
		for (int j=0;j<256;j++){
 80052ba:	4669      	mov	r1, sp
 80052bc:	2300      	movs	r3, #0
 80052be:	e003      	b.n	80052c8 <ReadQdata+0x94>
 80052c0:	3301      	adds	r3, #1
 80052c2:	3101      	adds	r1, #1
 80052c4:	42ab      	cmp	r3, r5
 80052c6:	d006      	beq.n	80052d6 <ReadQdata+0xa2>
			temp[j]=ReadMData[(len-i)*256+j];
 80052c8:	5ce2      	ldrb	r2, [r4, r3]
 80052ca:	700a      	strb	r2, [r1, #0]
			if (temp[j]==255){
 80052cc:	2aff      	cmp	r2, #255	; 0xff
 80052ce:	d1f7      	bne.n	80052c0 <ReadQdata+0x8c>
				temp[j]=0;
 80052d0:	2200      	movs	r2, #0
 80052d2:	4669      	mov	r1, sp
 80052d4:	54ca      	strb	r2, [r1, r3]
		temp[255]=0;
 80052d6:	23ff      	movs	r3, #255	; 0xff
 80052d8:	2200      	movs	r2, #0
 80052da:	4669      	mov	r1, sp
 80052dc:	0038      	movs	r0, r7
 80052de:	54ca      	strb	r2, [r1, r3]
		strcat(ReadMDataS,temp);
 80052e0:	f7fa ff12 	bl	8000108 <strlen>
	for (int i=1;i<=len;i++){
 80052e4:	3e01      	subs	r6, #1
		strcat(ReadMDataS,temp);
 80052e6:	4669      	mov	r1, sp
 80052e8:	1838      	adds	r0, r7, r0
 80052ea:	f009 fc11 	bl	800eb10 <stpcpy>
	for (int i=1;i<=len;i++){
 80052ee:	3c01      	subs	r4, #1
		strcat(ReadMDataS,"\r\n");
 80052f0:	2203      	movs	r2, #3
 80052f2:	4651      	mov	r1, sl
	for (int i=1;i<=len;i++){
 80052f4:	3eff      	subs	r6, #255	; 0xff
		strcat(ReadMDataS,"\r\n");
 80052f6:	f009 fd17 	bl	800ed28 <memcpy>
	for (int i=1;i<=len;i++){
 80052fa:	3cff      	subs	r4, #255	; 0xff
 80052fc:	454e      	cmp	r6, r9
 80052fe:	d1d7      	bne.n	80052b0 <ReadQdata+0x7c>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 8005300:	4640      	mov	r0, r8
 8005302:	f7ff fe51 	bl	8004fa8 <SPI_flash_Sector_Erase>
	return 1;
 8005306:	2001      	movs	r0, #1
}
 8005308:	b040      	add	sp, #256	; 0x100
 800530a:	bce0      	pop	{r5, r6, r7}
 800530c:	46ba      	mov	sl, r7
 800530e:	46b1      	mov	r9, r6
 8005310:	46a8      	mov	r8, r5
 8005312:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005314:	220c      	movs	r2, #12
 8005316:	4c0f      	ldr	r4, [pc, #60]	; (8005354 <ReadQdata+0x120>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005318:	490f      	ldr	r1, [pc, #60]	; (8005358 <ReadQdata+0x124>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800531a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800531c:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800531e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005320:	4b0e      	ldr	r3, [pc, #56]	; (800535c <ReadQdata+0x128>)
 8005322:	f005 fc5b 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8005326:	466a      	mov	r2, sp
 8005328:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <ReadQdata+0x12c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800532a:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 800532c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800532e:	0020      	movs	r0, r4
 8005330:	230a      	movs	r3, #10
 8005332:	2202      	movs	r2, #2
 8005334:	f005 fc52 	bl	800abdc <HAL_UART_Transmit>
		return 0;
 8005338:	2000      	movs	r0, #0
}
 800533a:	e7e5      	b.n	8005308 <ReadQdata+0xd4>
 800533c:	20001ea4 	.word	0x20001ea4
 8005340:	20002ea4 	.word	0x20002ea4
 8005344:	200000c0 	.word	0x200000c0
 8005348:	000300ff 	.word	0x000300ff
 800534c:	08012658 	.word	0x08012658
 8005350:	ffffff00 	.word	0xffffff00
 8005354:	200049ac 	.word	0x200049ac
 8005358:	08013278 	.word	0x08013278
 800535c:	00001388 	.word	0x00001388
 8005360:	00000a0d 	.word	0x00000a0d

08005364 <InitMEMQ>:

void InitMEMQ(){
 8005364:	b570      	push	{r4, r5, r6, lr}
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8005366:	4d24      	ldr	r5, [pc, #144]	; (80053f8 <InitMEMQ+0x94>)
void InitMEMQ(){
 8005368:	b0c0      	sub	sp, #256	; 0x100
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 800536a:	782b      	ldrb	r3, [r5, #0]
 800536c:	786a      	ldrb	r2, [r5, #1]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 8005372:	4a22      	ldr	r2, [pc, #136]	; (80053fc <InitMEMQ+0x98>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8005374:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 8005376:	4293      	cmp	r3, r2
 8005378:	dd01      	ble.n	800537e <InitMEMQ+0x1a>
		for(i=0;i<2;i++){
			ReadQdata();
		}
	}

}
 800537a:	b040      	add	sp, #256	; 0x100
 800537c:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800537e:	220c      	movs	r2, #12
 8005380:	4c1f      	ldr	r4, [pc, #124]	; (8005400 <InitMEMQ+0x9c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005382:	4920      	ldr	r1, [pc, #128]	; (8005404 <InitMEMQ+0xa0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005384:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005386:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005388:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800538a:	4b1f      	ldr	r3, [pc, #124]	; (8005408 <InitMEMQ+0xa4>)
 800538c:	320f      	adds	r2, #15
 800538e:	f005 fc25 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8005392:	466a      	mov	r2, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005394:	0020      	movs	r0, r4
		for(i=0;i<5;i++){
 8005396:	2400      	movs	r4, #0
	char newline[2] = "\r\n";
 8005398:	4b1c      	ldr	r3, [pc, #112]	; (800540c <InitMEMQ+0xa8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800539a:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 800539c:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800539e:	230a      	movs	r3, #10
 80053a0:	2202      	movs	r2, #2
 80053a2:	f005 fc1b 	bl	800abdc <HAL_UART_Transmit>
 80053a6:	4e1a      	ldr	r6, [pc, #104]	; (8005410 <InitMEMQ+0xac>)
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 80053a8:	0022      	movs	r2, r4
 80053aa:	0023      	movs	r3, r4
 80053ac:	0031      	movs	r1, r6
 80053ae:	4668      	mov	r0, sp
 80053b0:	f009 fa7c 	bl	800e8ac <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 80053b4:	4668      	mov	r0, sp
 80053b6:	f7fa fea7 	bl	8000108 <strlen>
 80053ba:	3001      	adds	r0, #1
 80053bc:	b282      	uxth	r2, r0
	if (len<255){
 80053be:	2afe      	cmp	r2, #254	; 0xfe
 80053c0:	d907      	bls.n	80053d2 <InitMEMQ+0x6e>
		for(i=0;i<5;i++){
 80053c2:	3401      	adds	r4, #1
 80053c4:	2c05      	cmp	r4, #5
 80053c6:	d1ef      	bne.n	80053a8 <InitMEMQ+0x44>
			ReadQdata();
 80053c8:	f7ff ff34 	bl	8005234 <ReadQdata>
 80053cc:	f7ff ff32 	bl	8005234 <ReadQdata>
}
 80053d0:	e7d3      	b.n	800537a <InitMEMQ+0x16>
		SPI_flash_Page_Program(WrtAdd, data,len);
 80053d2:	4669      	mov	r1, sp
 80053d4:	0028      	movs	r0, r5
 80053d6:	f7ff fe8b 	bl	80050f0 <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 80053da:	782b      	ldrb	r3, [r5, #0]
 80053dc:	786a      	ldrb	r2, [r5, #1]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	189b      	adds	r3, r3, r2
 80053e2:	78aa      	ldrb	r2, [r5, #2]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	189b      	adds	r3, r3, r2
 80053e8:	3301      	adds	r3, #1
 80053ea:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 80053ec:	141a      	asrs	r2, r3, #16
 80053ee:	702a      	strb	r2, [r5, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 80053f0:	121a      	asrs	r2, r3, #8
 80053f2:	706a      	strb	r2, [r5, #1]
	WrtAdd[2]=(addi)%256;
 80053f4:	70ab      	strb	r3, [r5, #2]
}
 80053f6:	e7e4      	b.n	80053c2 <InitMEMQ+0x5e>
 80053f8:	200000c0 	.word	0x200000c0
 80053fc:	000300ff 	.word	0x000300ff
 8005400:	200049ac 	.word	0x200049ac
 8005404:	08013288 	.word	0x08013288
 8005408:	00001388 	.word	0x00001388
 800540c:	00000a0d 	.word	0x00000a0d
 8005410:	080132a4 	.word	0x080132a4

08005414 <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8005414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005416:	46de      	mov	lr, fp
 8005418:	4657      	mov	r7, sl
 800541a:	464e      	mov	r6, r9
 800541c:	4645      	mov	r5, r8
 800541e:	b5e0      	push	{r5, r6, r7, lr}
 8005420:	4c60      	ldr	r4, [pc, #384]	; (80055a4 <writeConfig+0x190>)
 8005422:	4699      	mov	r9, r3
 8005424:	44a5      	add	sp, r4
 8005426:	9bd0      	ldr	r3, [sp, #832]	; 0x340
 8005428:	4692      	mov	sl, r2
 800542a:	4698      	mov	r8, r3
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 800542c:	4b5e      	ldr	r3, [pc, #376]	; (80055a8 <writeConfig+0x194>)
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 800542e:	000f      	movs	r7, r1
	uint8_t add[]={0x00,0x00,0x00};
 8005430:	881a      	ldrh	r2, [r3, #0]
 8005432:	a902      	add	r1, sp, #8
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8005434:	9ece      	ldr	r6, [sp, #824]	; 0x338
 8005436:	9dcf      	ldr	r5, [sp, #828]	; 0x33c
	uint8_t add[]={0x00,0x00,0x00};
 8005438:	808a      	strh	r2, [r1, #4]

	SPI_flash_Read_Data(add , data1 , 256);
 800543a:	2280      	movs	r2, #128	; 0x80
	uint8_t add[]={0x00,0x00,0x00};
 800543c:	789b      	ldrb	r3, [r3, #2]
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 800543e:	4683      	mov	fp, r0
	uint8_t add[]={0x00,0x00,0x00};
 8005440:	718b      	strb	r3, [r1, #6]
	SPI_flash_Read_Data(add , data1 , 256);
 8005442:	0052      	lsls	r2, r2, #1
 8005444:	a904      	add	r1, sp, #16
 8005446:	a803      	add	r0, sp, #12
 8005448:	f7ff febe 	bl	80051c8 <SPI_flash_Read_Data>
	add[1]=0x01;
 800544c:	2301      	movs	r3, #1
 800544e:	aa02      	add	r2, sp, #8
 8005450:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data2 , 256);
 8005452:	2280      	movs	r2, #128	; 0x80
 8005454:	a944      	add	r1, sp, #272	; 0x110
 8005456:	0052      	lsls	r2, r2, #1
 8005458:	a803      	add	r0, sp, #12
 800545a:	f7ff feb5 	bl	80051c8 <SPI_flash_Read_Data>
	add[1]=0x02;
 800545e:	2302      	movs	r3, #2
 8005460:	aa02      	add	r2, sp, #8
 8005462:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data3 , 256);
 8005464:	2280      	movs	r2, #128	; 0x80
 8005466:	a984      	add	r1, sp, #528	; 0x210
 8005468:	0052      	lsls	r2, r2, #1
 800546a:	a803      	add	r0, sp, #12
 800546c:	f7ff feac 	bl	80051c8 <SPI_flash_Read_Data>



	int i=0;
	int j=0;
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8005470:	465b      	mov	r3, fp
	SPI_flash_Read_Data(add , data3 , 256);
 8005472:	2401      	movs	r4, #1
 8005474:	3b01      	subs	r3, #1
 8005476:	9301      	str	r3, [sp, #4]
		data1[j+i]=RegNo[i];
 8005478:	9b01      	ldr	r3, [sp, #4]
 800547a:	aa02      	add	r2, sp, #8
 800547c:	5d1b      	ldrb	r3, [r3, r4]
 800547e:	3207      	adds	r2, #7
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8005480:	4658      	mov	r0, fp
		data1[j+i]=RegNo[i];
 8005482:	5513      	strb	r3, [r2, r4]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8005484:	f7fa fe40 	bl	8000108 <strlen>
 8005488:	42a0      	cmp	r0, r4
 800548a:	d302      	bcc.n	8005492 <writeConfig+0x7e>
 800548c:	3401      	adds	r4, #1
 800548e:	2c11      	cmp	r4, #17
 8005490:	d1f2      	bne.n	8005478 <writeConfig+0x64>
 8005492:	2400      	movs	r4, #0
 8005494:	e001      	b.n	800549a <writeConfig+0x86>
	}
	j=j+RegNoLen;

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8005496:	2c64      	cmp	r4, #100	; 0x64
 8005498:	d009      	beq.n	80054ae <writeConfig+0x9a>
		data1[j+i]=INSMS[i];
 800549a:	5d3a      	ldrb	r2, [r7, r4]
 800549c:	ab04      	add	r3, sp, #16
 800549e:	191b      	adds	r3, r3, r4
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 80054a0:	0038      	movs	r0, r7
		data1[j+i]=INSMS[i];
 80054a2:	741a      	strb	r2, [r3, #16]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 80054a4:	3401      	adds	r4, #1
 80054a6:	f7fa fe2f 	bl	8000108 <strlen>
 80054aa:	42a0      	cmp	r0, r4
 80054ac:	d2f3      	bcs.n	8005496 <writeConfig+0x82>
 80054ae:	2700      	movs	r7, #0
 80054b0:	ac21      	add	r4, sp, #132	; 0x84
 80054b2:	e001      	b.n	80054b8 <writeConfig+0xa4>
	}
	j=j+INSMSLen;

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 80054b4:	2f3c      	cmp	r7, #60	; 0x3c
 80054b6:	d008      	beq.n	80054ca <writeConfig+0xb6>
		data1[j+i]=OUTSMS[i];
 80054b8:	4653      	mov	r3, sl
 80054ba:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 80054bc:	4650      	mov	r0, sl
		data1[j+i]=OUTSMS[i];
 80054be:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 80054c0:	3701      	adds	r7, #1
 80054c2:	f7fa fe21 	bl	8000108 <strlen>
 80054c6:	42b8      	cmp	r0, r7
 80054c8:	d2f4      	bcs.n	80054b4 <writeConfig+0xa0>
 80054ca:	ab02      	add	r3, sp, #8
 80054cc:	469c      	mov	ip, r3
 80054ce:	2301      	movs	r3, #1
 80054d0:	2408      	movs	r4, #8
 80054d2:	425b      	negs	r3, r3
 80054d4:	34ff      	adds	r4, #255	; 0xff
 80054d6:	444b      	add	r3, r9
 80054d8:	2701      	movs	r7, #1
 80054da:	469a      	mov	sl, r3
 80054dc:	4464      	add	r4, ip
 80054de:	e002      	b.n	80054e6 <writeConfig+0xd2>
	}
	j=0;
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 80054e0:	3701      	adds	r7, #1
 80054e2:	2f29      	cmp	r7, #41	; 0x29
 80054e4:	d007      	beq.n	80054f6 <writeConfig+0xe2>
		data2[j+i]=EmgIP[i];
 80054e6:	4653      	mov	r3, sl
 80054e8:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 80054ea:	4648      	mov	r0, r9
		data2[j+i]=EmgIP[i];
 80054ec:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 80054ee:	f7fa fe0b 	bl	8000108 <strlen>
 80054f2:	42b8      	cmp	r0, r7
 80054f4:	d2f4      	bcs.n	80054e0 <writeConfig+0xcc>
 80054f6:	2700      	movs	r7, #0
 80054f8:	ac4e      	add	r4, sp, #312	; 0x138
 80054fa:	e001      	b.n	8005500 <writeConfig+0xec>
	}
	j=j+EmgIPLen;

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 80054fc:	2f28      	cmp	r7, #40	; 0x28
 80054fe:	d007      	beq.n	8005510 <writeConfig+0xfc>
		data2[j+i]=RegIP[i];
 8005500:	5df3      	ldrb	r3, [r6, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8005502:	0030      	movs	r0, r6
		data2[j+i]=RegIP[i];
 8005504:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8005506:	3701      	adds	r7, #1
 8005508:	f7fa fdfe 	bl	8000108 <strlen>
 800550c:	4287      	cmp	r7, r0
 800550e:	d9f5      	bls.n	80054fc <writeConfig+0xe8>
 8005510:	2600      	movs	r6, #0
 8005512:	ac58      	add	r4, sp, #352	; 0x160
 8005514:	e001      	b.n	800551a <writeConfig+0x106>
	}
	j=j+RegIPLen;


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8005516:	2e28      	cmp	r6, #40	; 0x28
 8005518:	d007      	beq.n	800552a <writeConfig+0x116>
		data2[j+i]=TrackIP[i];
 800551a:	5dab      	ldrb	r3, [r5, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 800551c:	0028      	movs	r0, r5
		data2[j+i]=TrackIP[i];
 800551e:	55a3      	strb	r3, [r4, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8005520:	3601      	adds	r6, #1
 8005522:	f7fa fdf1 	bl	8000108 <strlen>
 8005526:	42b0      	cmp	r0, r6
 8005528:	d2f5      	bcs.n	8005516 <writeConfig+0x102>
 800552a:	ab02      	add	r3, sp, #8
 800552c:	469c      	mov	ip, r3
	}
	j=0;


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 800552e:	2702      	movs	r7, #2
 8005530:	4643      	mov	r3, r8
 8005532:	4d1e      	ldr	r5, [pc, #120]	; (80055ac <writeConfig+0x198>)
 8005534:	2401      	movs	r4, #1
 8005536:	4465      	add	r5, ip
 8005538:	1e5e      	subs	r6, r3, #1
 800553a:	37ff      	adds	r7, #255	; 0xff
 800553c:	e002      	b.n	8005544 <writeConfig+0x130>
 800553e:	3401      	adds	r4, #1
 8005540:	42bc      	cmp	r4, r7
 8005542:	d006      	beq.n	8005552 <writeConfig+0x13e>
		data3[j+i]=OtherData[i];
 8005544:	5d33      	ldrb	r3, [r6, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 8005546:	4640      	mov	r0, r8
		data3[j+i]=OtherData[i];
 8005548:	552b      	strb	r3, [r5, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 800554a:	f7fa fddd 	bl	8000108 <strlen>
 800554e:	42a0      	cmp	r0, r4
 8005550:	d2f5      	bcs.n	800553e <writeConfig+0x12a>
	}
	j=j+OtherDataLen;


	add[1]=0x00;
 8005552:	2300      	movs	r3, #0
 8005554:	aa02      	add	r2, sp, #8
 8005556:	7153      	strb	r3, [r2, #5]

	SPI_flash_Sector_Erase(add);
 8005558:	a803      	add	r0, sp, #12
 800555a:	f7ff fd25 	bl	8004fa8 <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	a904      	add	r1, sp, #16
 8005562:	a803      	add	r0, sp, #12
 8005564:	0052      	lsls	r2, r2, #1
 8005566:	f7ff fdc3 	bl	80050f0 <SPI_flash_Page_Program>
	add[1]=0x01;
 800556a:	2301      	movs	r3, #1
 800556c:	aa02      	add	r2, sp, #8
 800556e:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data2,256);
 8005570:	2280      	movs	r2, #128	; 0x80
 8005572:	a944      	add	r1, sp, #272	; 0x110
 8005574:	a803      	add	r0, sp, #12
 8005576:	0052      	lsls	r2, r2, #1
 8005578:	f7ff fdba 	bl	80050f0 <SPI_flash_Page_Program>
	add[1]=0x02;
 800557c:	2302      	movs	r3, #2
 800557e:	aa02      	add	r2, sp, #8
 8005580:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data3,256);
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	a803      	add	r0, sp, #12
 8005586:	0052      	lsls	r2, r2, #1
 8005588:	a984      	add	r1, sp, #528	; 0x210
 800558a:	f7ff fdb1 	bl	80050f0 <SPI_flash_Page_Program>
	return 1;

}
 800558e:	2001      	movs	r0, #1
 8005590:	23c5      	movs	r3, #197	; 0xc5
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	449d      	add	sp, r3
 8005596:	bcf0      	pop	{r4, r5, r6, r7}
 8005598:	46bb      	mov	fp, r7
 800559a:	46b2      	mov	sl, r6
 800559c:	46a9      	mov	r9, r5
 800559e:	46a0      	mov	r8, r4
 80055a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	fffffcec 	.word	0xfffffcec
 80055a8:	080124c0 	.word	0x080124c0
 80055ac:	00000207 	.word	0x00000207

080055b0 <readRegNo>:



char* readRegNo(){
 80055b0:	b510      	push	{r4, lr}
 80055b2:	b082      	sub	sp, #8
	uint8_t add4[]={0x00, 0x00,0x00};
 80055b4:	4669      	mov	r1, sp
 80055b6:	4b0d      	ldr	r3, [pc, #52]	; (80055ec <readRegNo+0x3c>)

    memset(dataR,0,256);
 80055b8:	4c0d      	ldr	r4, [pc, #52]	; (80055f0 <readRegNo+0x40>)
	uint8_t add4[]={0x00, 0x00,0x00};
 80055ba:	881a      	ldrh	r2, [r3, #0]
    memset(dataR,0,256);
 80055bc:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 80055be:	808a      	strh	r2, [r1, #4]
    memset(dataR,0,256);
 80055c0:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 80055c2:	789b      	ldrb	r3, [r3, #2]
    memset(dataR,0,256);
 80055c4:	0052      	lsls	r2, r2, #1
	uint8_t add4[]={0x00, 0x00,0x00};
 80055c6:	718b      	strb	r3, [r1, #6]
    memset(dataR,0,256);
 80055c8:	2100      	movs	r1, #0
 80055ca:	f009 f9db 	bl	800e984 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 80055ce:	a801      	add	r0, sp, #4
 80055d0:	2210      	movs	r2, #16
 80055d2:	0021      	movs	r1, r4
 80055d4:	f7ff fdf8 	bl	80051c8 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 80055d8:	0020      	movs	r0, r4
 80055da:	f7fa fd95 	bl	8000108 <strlen>
 80055de:	2801      	cmp	r0, #1
 80055e0:	d800      	bhi.n	80055e4 <readRegNo+0x34>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
	}
	else{
		return "--Err RegNo--";
 80055e2:	4c04      	ldr	r4, [pc, #16]	; (80055f4 <readRegNo+0x44>)
	}

}
 80055e4:	0020      	movs	r0, r4
 80055e6:	b002      	add	sp, #8
 80055e8:	bd10      	pop	{r4, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	080124c0 	.word	0x080124c0
 80055f0:	20003f60 	.word	0x20003f60
 80055f4:	0801337c 	.word	0x0801337c

080055f8 <detectAcc>:


int detectAcc(){
 80055f8:	b570      	push	{r4, r5, r6, lr}
	readAcc();
 80055fa:	f7fd fe6b 	bl	80032d4 <readAcc.isra.0>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 80055fe:	4c14      	ldr	r4, [pc, #80]	; (8005650 <detectAcc+0x58>)
 8005600:	6861      	ldr	r1, [r4, #4]
 8005602:	6820      	ldr	r0, [r4, #0]
 8005604:	f7fa fffa 	bl	80005fc <__aeabi_fadd>
 8005608:	68a1      	ldr	r1, [r4, #8]
 800560a:	f7fa fff7 	bl	80005fc <__aeabi_fadd>
 800560e:	4911      	ldr	r1, [pc, #68]	; (8005654 <detectAcc+0x5c>)
 8005610:	1c05      	adds	r5, r0, #0
 8005612:	f7fa ff6f 	bl	80004f4 <__aeabi_fcmpgt>
 8005616:	2800      	cmp	r0, #0
 8005618:	d115      	bne.n	8005646 <detectAcc+0x4e>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 800561a:	490f      	ldr	r1, [pc, #60]	; (8005658 <detectAcc+0x60>)
 800561c:	1c28      	adds	r0, r5, #0
 800561e:	f7fa ff55 	bl	80004cc <__aeabi_fcmplt>
 8005622:	2800      	cmp	r0, #0
 8005624:	d111      	bne.n	800564a <detectAcc+0x52>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 8005626:	6921      	ldr	r1, [r4, #16]
 8005628:	68e0      	ldr	r0, [r4, #12]
 800562a:	f7fa ffe7 	bl	80005fc <__aeabi_fadd>
 800562e:	6961      	ldr	r1, [r4, #20]
 8005630:	f7fa ffe4 	bl	80005fc <__aeabi_fadd>
 8005634:	4907      	ldr	r1, [pc, #28]	; (8005654 <detectAcc+0x5c>)
 8005636:	f7fa ff5d 	bl	80004f4 <__aeabi_fcmpgt>


	return 0;
 800563a:	1e43      	subs	r3, r0, #1
 800563c:	4198      	sbcs	r0, r3
 800563e:	4243      	negs	r3, r0
 8005640:	2003      	movs	r0, #3
 8005642:	4018      	ands	r0, r3
}
 8005644:	bd70      	pop	{r4, r5, r6, pc}
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8005646:	2001      	movs	r0, #1
 8005648:	e7fc      	b.n	8005644 <detectAcc+0x4c>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 800564a:	2002      	movs	r0, #2
 800564c:	e7fa      	b.n	8005644 <detectAcc+0x4c>
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	20000324 	.word	0x20000324
 8005654:	44fa0000 	.word	0x44fa0000
 8005658:	c4fa0000 	.word	0xc4fa0000

0800565c <initGPS>:
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 800565c:	2300      	movs	r3, #0
void initGPS(){
 800565e:	b570      	push	{r4, r5, r6, lr}
	GPSInfo.lat=0.0;
 8005660:	4c0d      	ldr	r4, [pc, #52]	; (8005698 <initGPS+0x3c>)
	GPSInfo.pdop=0.0;
	GPSInfo.head=0.0;
	GPSInfo.speed=0.0;
	GPSInfo.fix=0;
	GPSInfo.sat=0;
	strcpy(GPSInfo.latD,"x");
 8005662:	2678      	movs	r6, #120	; 0x78
	strcpy(GPSInfo.lonD,"x");
 8005664:	0020      	movs	r0, r4
	GPSInfo.lat=0.0;
 8005666:	6023      	str	r3, [r4, #0]
	GPSInfo.lon=0.0;
 8005668:	6063      	str	r3, [r4, #4]
	GPSInfo.alt=0.0;
 800566a:	60a3      	str	r3, [r4, #8]
	GPSInfo.hdop=0.0;
 800566c:	60e3      	str	r3, [r4, #12]
	GPSInfo.pdop=0.0;
 800566e:	6123      	str	r3, [r4, #16]
	GPSInfo.head=0.0;
 8005670:	6163      	str	r3, [r4, #20]
	GPSInfo.speed=0.0;
 8005672:	61a3      	str	r3, [r4, #24]
	GPSInfo.fix=0;
 8005674:	2300      	movs	r3, #0
	strcpy(GPSInfo.lonD,"x");
 8005676:	4d09      	ldr	r5, [pc, #36]	; (800569c <initGPS+0x40>)
	strcpy(GPSInfo.latD,"x");
 8005678:	8526      	strh	r6, [r4, #40]	; 0x28
	strcpy(GPSInfo.lonD,"x");
 800567a:	0029      	movs	r1, r5
 800567c:	2202      	movs	r2, #2
 800567e:	302b      	adds	r0, #43	; 0x2b
	GPSInfo.fix=0;
 8005680:	61e3      	str	r3, [r4, #28]
	GPSInfo.sat=0;
 8005682:	6223      	str	r3, [r4, #32]
	strcpy(GPSInfo.lonD,"x");
 8005684:	f009 fb50 	bl	800ed28 <memcpy>
	strcpy(GPSInfo.time,"x");
	strcpy(GPSInfo.date,"x");
 8005688:	0020      	movs	r0, r4
 800568a:	0029      	movs	r1, r5
	strcpy(GPSInfo.time,"x");
 800568c:	85e6      	strh	r6, [r4, #46]	; 0x2e
	strcpy(GPSInfo.date,"x");
 800568e:	2202      	movs	r2, #2
 8005690:	303d      	adds	r0, #61	; 0x3d
 8005692:	f009 fb49 	bl	800ed28 <memcpy>
}
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	20000674 	.word	0x20000674
 800569c:	0801338c 	.word	0x0801338c

080056a0 <getGPSString>:
void getGPSString(){
 80056a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a2:	46c6      	mov	lr, r8
 80056a4:	b500      	push	{lr}
	memset(gpsDataRet,0,70);
 80056a6:	4e29      	ldr	r6, [pc, #164]	; (800574c <getGPSString+0xac>)
 80056a8:	2246      	movs	r2, #70	; 0x46
 80056aa:	2100      	movs	r1, #0
 80056ac:	0030      	movs	r0, r6
void getGPSString(){
 80056ae:	b096      	sub	sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 80056b0:	f009 f968 	bl	800e984 <memset>

	if(GPSInfo.fix==1){
 80056b4:	4c26      	ldr	r4, [pc, #152]	; (8005750 <getGPSString+0xb0>)
 80056b6:	69e3      	ldr	r3, [r4, #28]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d040      	beq.n	800573e <getGPSString+0x9e>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 80056bc:	2200      	movs	r2, #0
 80056be:	2104      	movs	r1, #4
 80056c0:	4824      	ldr	r0, [pc, #144]	; (8005754 <getGPSString+0xb4>)
 80056c2:	f003 f85f 	bl	8008784 <HAL_GPIO_WritePin>
	}




	sprintf(gpsDataRet, "%1d,%s,%s,%0.6f,%1s,%0.6f,%s,%0.1f,%0.2f,%d,%0.1f,%0.1f,%0.1f",
 80056c6:	233d      	movs	r3, #61	; 0x3d
 80056c8:	68e0      	ldr	r0, [r4, #12]
 80056ca:	4698      	mov	r8, r3
 80056cc:	f7fd fcf0 	bl	80030b0 <__aeabi_f2d>
 80056d0:	69e7      	ldr	r7, [r4, #28]
 80056d2:	9014      	str	r0, [sp, #80]	; 0x50
 80056d4:	9115      	str	r1, [sp, #84]	; 0x54
 80056d6:	6920      	ldr	r0, [r4, #16]
 80056d8:	f7fd fcea 	bl	80030b0 <__aeabi_f2d>
 80056dc:	9012      	str	r0, [sp, #72]	; 0x48
 80056de:	9113      	str	r1, [sp, #76]	; 0x4c
 80056e0:	68a0      	ldr	r0, [r4, #8]
 80056e2:	f7fd fce5 	bl	80030b0 <__aeabi_f2d>
 80056e6:	9010      	str	r0, [sp, #64]	; 0x40
 80056e8:	9111      	str	r1, [sp, #68]	; 0x44
 80056ea:	6a23      	ldr	r3, [r4, #32]
 80056ec:	4d1a      	ldr	r5, [pc, #104]	; (8005758 <getGPSString+0xb8>)
 80056ee:	930e      	str	r3, [sp, #56]	; 0x38
 80056f0:	6960      	ldr	r0, [r4, #20]
 80056f2:	f7fd fcdd 	bl	80030b0 <__aeabi_f2d>
 80056f6:	900c      	str	r0, [sp, #48]	; 0x30
 80056f8:	910d      	str	r1, [sp, #52]	; 0x34
 80056fa:	69a0      	ldr	r0, [r4, #24]
 80056fc:	f7fd fcd8 	bl	80030b0 <__aeabi_f2d>
 8005700:	0023      	movs	r3, r4
 8005702:	900a      	str	r0, [sp, #40]	; 0x28
 8005704:	910b      	str	r1, [sp, #44]	; 0x2c
 8005706:	332b      	adds	r3, #43	; 0x2b
 8005708:	9308      	str	r3, [sp, #32]
 800570a:	6860      	ldr	r0, [r4, #4]
 800570c:	f7fd fcd0 	bl	80030b0 <__aeabi_f2d>
 8005710:	0023      	movs	r3, r4
 8005712:	9006      	str	r0, [sp, #24]
 8005714:	9107      	str	r1, [sp, #28]
 8005716:	3328      	adds	r3, #40	; 0x28
 8005718:	9304      	str	r3, [sp, #16]
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	f7fd fcc8 	bl	80030b0 <__aeabi_f2d>
 8005720:	44a0      	add	r8, r4
 8005722:	342e      	adds	r4, #46	; 0x2e
 8005724:	9002      	str	r0, [sp, #8]
 8005726:	9103      	str	r1, [sp, #12]
 8005728:	4643      	mov	r3, r8
 800572a:	003a      	movs	r2, r7
 800572c:	0029      	movs	r1, r5
 800572e:	0030      	movs	r0, r6
 8005730:	9400      	str	r4, [sp, #0]
 8005732:	f009 f8bb 	bl	800e8ac <siprintf>
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
}
 8005736:	b016      	add	sp, #88	; 0x58
 8005738:	bc80      	pop	{r7}
 800573a:	46b8      	mov	r8, r7
 800573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 800573e:	2201      	movs	r2, #1
 8005740:	2104      	movs	r1, #4
 8005742:	4804      	ldr	r0, [pc, #16]	; (8005754 <getGPSString+0xb4>)
 8005744:	f003 f81e 	bl	8008784 <HAL_GPIO_WritePin>
}
 8005748:	e7bd      	b.n	80056c6 <getGPSString+0x26>
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	200044c8 	.word	0x200044c8
 8005750:	20000674 	.word	0x20000674
 8005754:	50000c00 	.word	0x50000c00
 8005758:	08013390 	.word	0x08013390

0800575c <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 800575c:	b510      	push	{r4, lr}
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 800575e:	212a      	movs	r1, #42	; 0x2a
uint8_t nmea_valid_checksum(const char *message) {
 8005760:	0004      	movs	r4, r0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8005762:	f009 f924 	bl	800e9ae <strchr>
 8005766:	2100      	movs	r1, #0
 8005768:	2210      	movs	r2, #16
 800576a:	3001      	adds	r0, #1
 800576c:	f008 f914 	bl	800d998 <strtol>

    char p;
    uint8_t sum = 0;
    ++message;
    while ((p = *message++) != '*') {
 8005770:	7863      	ldrb	r3, [r4, #1]
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8005772:	b2c1      	uxtb	r1, r0
    while ((p = *message++) != '*') {
 8005774:	2b2a      	cmp	r3, #42	; 0x2a
 8005776:	d00c      	beq.n	8005792 <nmea_valid_checksum+0x36>
    uint8_t sum = 0;
 8005778:	2200      	movs	r2, #0
 800577a:	3402      	adds	r4, #2
    while ((p = *message++) != '*') {
 800577c:	3401      	adds	r4, #1
        sum ^= p;
 800577e:	405a      	eors	r2, r3
    while ((p = *message++) != '*') {
 8005780:	1e63      	subs	r3, r4, #1
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b2a      	cmp	r3, #42	; 0x2a
 8005786:	d1f9      	bne.n	800577c <nmea_valid_checksum+0x20>
    }

    if (sum != checksum) {
 8005788:	1a88      	subs	r0, r1, r2
 800578a:	4243      	negs	r3, r0
 800578c:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
}
 800578e:	b2c0      	uxtb	r0, r0
 8005790:	bd10      	pop	{r4, pc}
    uint8_t sum = 0;
 8005792:	2200      	movs	r2, #0
 8005794:	e7f8      	b.n	8005788 <nmea_valid_checksum+0x2c>
 8005796:	46c0      	nop			; (mov r8, r8)

08005798 <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 8005798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800579a:	46ce      	mov	lr, r9
 800579c:	4647      	mov	r7, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800579e:	220c      	movs	r2, #12
 80057a0:	b580      	push	{r7, lr}
 80057a2:	4e36      	ldr	r6, [pc, #216]	; (800587c <TestMEM+0xe4>)
 80057a4:	b087      	sub	sp, #28
 80057a6:	6833      	ldr	r3, [r6, #0]
	char newline[2] = "\r\n";
 80057a8:	ad05      	add	r5, sp, #20
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80057aa:	621a      	str	r2, [r3, #32]
 80057ac:	4690      	mov	r8, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80057ae:	4934      	ldr	r1, [pc, #208]	; (8005880 <TestMEM+0xe8>)
 80057b0:	4b34      	ldr	r3, [pc, #208]	; (8005884 <TestMEM+0xec>)
	char newline[2] = "\r\n";
 80057b2:	4f35      	ldr	r7, [pc, #212]	; (8005888 <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80057b4:	3215      	adds	r2, #21
 80057b6:	0030      	movs	r0, r6
 80057b8:	f005 fa10 	bl	800abdc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80057bc:	230a      	movs	r3, #10
 80057be:	2202      	movs	r2, #2
 80057c0:	0029      	movs	r1, r5
 80057c2:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 80057c4:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80057c6:	f005 fa09 	bl	800abdc <HAL_UART_Transmit>
	int i=0;
	Debug_Tx("------------------Testing Memory:");
	for(i=0;i<1;i++){
		SPI_flash_get_device_ID( );
 80057ca:	f7ff fb07 	bl	8004ddc <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 80057ce:	4c2f      	ldr	r4, [pc, #188]	; (800588c <TestMEM+0xf4>)
 80057d0:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <TestMEM+0xf8>)
 80057d2:	0022      	movs	r2, r4
 80057d4:	320c      	adds	r2, #12
 80057d6:	4691      	mov	r9, r2
 80057d8:	2268      	movs	r2, #104	; 0x68
 80057da:	4694      	mov	ip, r2
 80057dc:	44a4      	add	ip, r4
 80057de:	4662      	mov	r2, ip
 80057e0:	0021      	movs	r1, r4
 80057e2:	0020      	movs	r0, r4
 80057e4:	3134      	adds	r1, #52	; 0x34
 80057e6:	9202      	str	r2, [sp, #8]
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	464a      	mov	r2, r9
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	3058      	adds	r0, #88	; 0x58
 80057f0:	f7ff fe10 	bl	8005414 <writeConfig>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80057f4:	4642      	mov	r2, r8
 80057f6:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80057f8:	4926      	ldr	r1, [pc, #152]	; (8005894 <TestMEM+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80057fa:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80057fc:	0030      	movs	r0, r6
 80057fe:	4b21      	ldr	r3, [pc, #132]	; (8005884 <TestMEM+0xec>)
 8005800:	3203      	adds	r2, #3
 8005802:	f005 f9eb 	bl	800abdc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005806:	230a      	movs	r3, #10
 8005808:	2202      	movs	r2, #2
 800580a:	0029      	movs	r1, r5
 800580c:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 800580e:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005810:	f005 f9e4 	bl	800abdc <HAL_UART_Transmit>
    memset(dataR,0,256);
 8005814:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 8005816:	8823      	ldrh	r3, [r4, #0]
    memset(dataR,0,256);
 8005818:	2100      	movs	r1, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 800581a:	802b      	strh	r3, [r5, #0]
 800581c:	78a3      	ldrb	r3, [r4, #2]
    memset(dataR,0,256);
 800581e:	4c1e      	ldr	r4, [pc, #120]	; (8005898 <TestMEM+0x100>)
 8005820:	0052      	lsls	r2, r2, #1
 8005822:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 8005824:	70ab      	strb	r3, [r5, #2]
    memset(dataR,0,256);
 8005826:	f009 f8ad 	bl	800e984 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 800582a:	0028      	movs	r0, r5
 800582c:	2210      	movs	r2, #16
 800582e:	0021      	movs	r1, r4
 8005830:	f7ff fcca 	bl	80051c8 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8005834:	0020      	movs	r0, r4
 8005836:	f7fa fc67 	bl	8000108 <strlen>
 800583a:	2801      	cmp	r0, #1
 800583c:	d800      	bhi.n	8005840 <TestMEM+0xa8>
		return "--Err RegNo--";
 800583e:	4c17      	ldr	r4, [pc, #92]	; (800589c <TestMEM+0x104>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005840:	220c      	movs	r2, #12
 8005842:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005844:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8005846:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8005848:	f7fa fc5e 	bl	8000108 <strlen>
 800584c:	0021      	movs	r1, r4
 800584e:	b282      	uxth	r2, r0
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <TestMEM+0xec>)
 8005852:	0030      	movs	r0, r6
 8005854:	f005 f9c2 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8005858:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800585a:	2202      	movs	r2, #2
 800585c:	0029      	movs	r1, r5
	char newline[2] = "\r\n";
 800585e:	802b      	strh	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8005860:	0030      	movs	r0, r6
 8005862:	230a      	movs	r3, #10
 8005864:	f005 f9ba 	bl	800abdc <HAL_UART_Transmit>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 8005868:	20fa      	movs	r0, #250	; 0xfa
 800586a:	00c0      	lsls	r0, r0, #3
 800586c:	f002 f8c2 	bl	80079f4 <HAL_Delay>

	}


}
 8005870:	b007      	add	sp, #28
 8005872:	bcc0      	pop	{r6, r7}
 8005874:	46b9      	mov	r9, r7
 8005876:	46b0      	mov	r8, r6
 8005878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	200049ac 	.word	0x200049ac
 8005880:	080133d0 	.word	0x080133d0
 8005884:	00001388 	.word	0x00001388
 8005888:	00000a0d 	.word	0x00000a0d
 800588c:	080124c0 	.word	0x080124c0
 8005890:	080133f4 	.word	0x080133f4
 8005894:	08013404 	.word	0x08013404
 8005898:	20003f60 	.word	0x20003f60
 800589c:	0801337c 	.word	0x0801337c

080058a0 <SystemClock_Config>:
{
 80058a0:	b500      	push	{lr}
 80058a2:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80058a4:	2234      	movs	r2, #52	; 0x34
 80058a6:	2100      	movs	r1, #0
 80058a8:	a805      	add	r0, sp, #20
 80058aa:	f009 f86b 	bl	800e984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80058ae:	2210      	movs	r2, #16
 80058b0:	2100      	movs	r1, #0
 80058b2:	a801      	add	r0, sp, #4
 80058b4:	f009 f866 	bl	800e984 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80058b8:	2080      	movs	r0, #128	; 0x80
 80058ba:	0080      	lsls	r0, r0, #2
 80058bc:	f003 fb78 	bl	8008fb0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80058c0:	2302      	movs	r3, #2
 80058c2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80058c4:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80058c6:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80058c8:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80058ca:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058cc:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80058ce:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80058d0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80058d2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80058d4:	f003 fb9c 	bl	8009010 <HAL_RCC_OscConfig>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d001      	beq.n	80058e0 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80058dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80058de:	e7fe      	b.n	80058de <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058e0:	2307      	movs	r3, #7
 80058e2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058e4:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80058e6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058e8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058ea:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80058ec:	2100      	movs	r1, #0
 80058ee:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80058f0:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80058f2:	f003 fe3d 	bl	8009570 <HAL_RCC_ClockConfig>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d001      	beq.n	80058fe <SystemClock_Config+0x5e>
 80058fa:	b672      	cpsid	i
  while (1)
 80058fc:	e7fe      	b.n	80058fc <SystemClock_Config+0x5c>
}
 80058fe:	b013      	add	sp, #76	; 0x4c
 8005900:	bd00      	pop	{pc}
 8005902:	46c0      	nop			; (mov r8, r8)

08005904 <main>:
{
 8005904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005906:	46de      	mov	lr, fp
 8005908:	4657      	mov	r7, sl
 800590a:	464e      	mov	r6, r9
 800590c:	4645      	mov	r5, r8
 800590e:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005910:	2704      	movs	r7, #4
{
 8005912:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8005914:	f002 f848 	bl	80079a8 <HAL_Init>
  SystemClock_Config();
 8005918:	f7ff ffc2 	bl	80058a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800591c:	2214      	movs	r2, #20
 800591e:	2100      	movs	r1, #0
 8005920:	a807      	add	r0, sp, #28
 8005922:	f009 f82f 	bl	800e984 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005926:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005928:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800592a:	4dd4      	ldr	r5, [pc, #848]	; (8005c7c <main+0x378>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800592c:	4690      	mov	r8, r2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800592e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005930:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005932:	433b      	orrs	r3, r7
 8005934:	636b      	str	r3, [r5, #52]	; 0x34
 8005936:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005938:	4cd1      	ldr	r4, [pc, #836]	; (8005c80 <main+0x37c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800593a:	403b      	ands	r3, r7
 800593c:	9302      	str	r3, [sp, #8]
 800593e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005940:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005942:	0021      	movs	r1, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005944:	4313      	orrs	r3, r2
 8005946:	636b      	str	r3, [r5, #52]	; 0x34
 8005948:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 800594a:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800594c:	4013      	ands	r3, r2
 800594e:	9303      	str	r3, [sp, #12]
 8005950:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005952:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005954:	4333      	orrs	r3, r6
 8005956:	636b      	str	r3, [r5, #52]	; 0x34
 8005958:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800595a:	4033      	ands	r3, r6
 800595c:	9304      	str	r3, [sp, #16]
 800595e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005960:	2302      	movs	r3, #2
 8005962:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005964:	431a      	orrs	r2, r3
 8005966:	636a      	str	r2, [r5, #52]	; 0x34
 8005968:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800596a:	4013      	ands	r3, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800596c:	2208      	movs	r2, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800596e:	9305      	str	r3, [sp, #20]
 8005970:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005972:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005974:	4691      	mov	r9, r2
 8005976:	4313      	orrs	r3, r2
 8005978:	636b      	str	r3, [r5, #52]	; 0x34
 800597a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800597c:	4013      	ands	r3, r2
 800597e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005980:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005982:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8005984:	f002 fefe 	bl	8008784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8005988:	2200      	movs	r2, #0
 800598a:	21c0      	movs	r1, #192	; 0xc0
 800598c:	48bd      	ldr	r0, [pc, #756]	; (8005c84 <main+0x380>)
 800598e:	f002 fef9 	bl	8008784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8005992:	2200      	movs	r2, #0
 8005994:	2107      	movs	r1, #7
 8005996:	48bc      	ldr	r0, [pc, #752]	; (8005c88 <main+0x384>)
 8005998:	f002 fef4 	bl	8008784 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 800599c:	238e      	movs	r3, #142	; 0x8e
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	2200      	movs	r2, #0
 80059a2:	0019      	movs	r1, r3
 80059a4:	48b9      	ldr	r0, [pc, #740]	; (8005c8c <main+0x388>)
 80059a6:	469b      	mov	fp, r3
 80059a8:	f002 feec 	bl	8008784 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ac:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 80059ae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b0:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b2:	a907      	add	r1, sp, #28
 80059b4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059b6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059ba:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059bc:	f002 fdd6 	bl	800856c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80059c0:	23f2      	movs	r3, #242	; 0xf2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c2:	48b2      	ldr	r0, [pc, #712]	; (8005c8c <main+0x388>)
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80059c4:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c6:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80059c8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059ca:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059cc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ce:	f002 fdcd 	bl	800856c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80059d2:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d4:	48ad      	ldr	r0, [pc, #692]	; (8005c8c <main+0x388>)
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80059d6:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 80059da:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059dc:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 80059de:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e0:	f002 fdc4 	bl	800856c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80059e4:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059e6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80059e8:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059ea:	a907      	add	r1, sp, #28
 80059ec:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 80059ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059f0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 80059f2:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f4:	f002 fdba 	bl	800856c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80059f8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fa:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 80059fc:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fe:	a907      	add	r1, sp, #28
 8005a00:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8005a02:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a04:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a06:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a08:	f002 fdb0 	bl	800856c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8005a0c:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a0e:	489d      	ldr	r0, [pc, #628]	; (8005c84 <main+0x380>)
 8005a10:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8005a12:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a14:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a16:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a18:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a1a:	f002 fda7 	bl	800856c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8005a1e:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a20:	4899      	ldr	r0, [pc, #612]	; (8005c88 <main+0x384>)
 8005a22:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 8005a24:	469a      	mov	sl, r3
 8005a26:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a28:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a2c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a2e:	f002 fd9d 	bl	800856c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8005a32:	465b      	mov	r3, fp
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a34:	4895      	ldr	r0, [pc, #596]	; (8005c8c <main+0x388>)
 8005a36:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 8005a38:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a3a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a40:	f002 fd94 	bl	800856c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a44:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005a46:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a48:	4333      	orrs	r3, r6
 8005a4a:	63ab      	str	r3, [r5, #56]	; 0x38
 8005a4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005a4e:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a50:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005a52:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8005a58:	f002 fb60 	bl	800811c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005a5c:	2009      	movs	r0, #9
 8005a5e:	f002 fb8f 	bl	8008180 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 8005a62:	2200      	movs	r2, #0
 8005a64:	2103      	movs	r1, #3
 8005a66:	200a      	movs	r0, #10
 8005a68:	f002 fb58 	bl	800811c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005a6c:	200a      	movs	r0, #10
 8005a6e:	f002 fb87 	bl	8008180 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 8005a72:	2200      	movs	r2, #0
 8005a74:	2103      	movs	r1, #3
 8005a76:	200b      	movs	r0, #11
 8005a78:	f002 fb50 	bl	800811c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8005a7c:	200b      	movs	r0, #11
 8005a7e:	f002 fb7f 	bl	8008180 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8005a82:	220c      	movs	r2, #12
 8005a84:	2100      	movs	r1, #0
 8005a86:	a807      	add	r0, sp, #28
 8005a88:	f008 ff7c 	bl	800e984 <memset>
  hadc1.Instance = ADC1;
 8005a8c:	4d80      	ldr	r5, [pc, #512]	; (8005c90 <main+0x38c>)
 8005a8e:	4b81      	ldr	r3, [pc, #516]	; (8005c94 <main+0x390>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005a90:	4642      	mov	r2, r8
  hadc1.Instance = ADC1;
 8005a92:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	05db      	lsls	r3, r3, #23
 8005a98:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	039b      	lsls	r3, r3, #14
 8005a9e:	612b      	str	r3, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005aa0:	2300      	movs	r3, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005aa2:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005aa4:	320c      	adds	r2, #12
 8005aa6:	54ab      	strb	r3, [r5, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005aa8:	0028      	movs	r0, r5
  hadc1.Init.OversamplingMode = DISABLE;
 8005aaa:	3210      	adds	r2, #16
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005aac:	832c      	strh	r4, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005aae:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ab0:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ab2:	616f      	str	r7, [r5, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005ab4:	76ab      	strb	r3, [r5, #26]
  hadc1.Init.NbrOfConversion = 4;
 8005ab6:	61ef      	str	r7, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ab8:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005aba:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005abc:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8005abe:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8005ac0:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8005ac2:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8005ac4:	64ec      	str	r4, [r5, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005ac6:	f001 ffb3 	bl	8007a30 <HAL_ADC_Init>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d001      	beq.n	8005ad2 <main+0x1ce>
 8005ace:	b672      	cpsid	i
  while (1)
 8005ad0:	e7fe      	b.n	8005ad0 <main+0x1cc>
  sConfig.Channel = ADC_CHANNEL_1;
 8005ad2:	4b71      	ldr	r3, [pc, #452]	; (8005c98 <main+0x394>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8005ad4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ad6:	a907      	add	r1, sp, #28
 8005ad8:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8005ada:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8005adc:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ade:	f002 f923 	bl	8007d28 <HAL_ADC_ConfigChannel>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d001      	beq.n	8005aea <main+0x1e6>
 8005ae6:	b672      	cpsid	i
  while (1)
 8005ae8:	e7fe      	b.n	8005ae8 <main+0x1e4>
  sConfig.Channel = ADC_CHANNEL_9;
 8005aea:	4b6c      	ldr	r3, [pc, #432]	; (8005c9c <main+0x398>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005aec:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 8005aee:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005af0:	464b      	mov	r3, r9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005af2:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8005af4:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005af6:	f002 f917 	bl	8007d28 <HAL_ADC_ConfigChannel>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	d001      	beq.n	8005b02 <main+0x1fe>
 8005afe:	b672      	cpsid	i
  while (1)
 8005b00:	e7fe      	b.n	8005b00 <main+0x1fc>
  sConfig.Channel = ADC_CHANNEL_11;
 8005b02:	4b67      	ldr	r3, [pc, #412]	; (8005ca0 <main+0x39c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b04:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 8005b06:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005b08:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b0a:	a907      	add	r1, sp, #28
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8005b0c:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b0e:	f002 f90b 	bl	8007d28 <HAL_ADC_ConfigChannel>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d001      	beq.n	8005b1a <main+0x216>
 8005b16:	b672      	cpsid	i
  while (1)
 8005b18:	e7fe      	b.n	8005b18 <main+0x214>
  hi2c1.Instance = I2C1;
 8005b1a:	4c62      	ldr	r4, [pc, #392]	; (8005ca4 <main+0x3a0>)
 8005b1c:	4b62      	ldr	r3, [pc, #392]	; (8005ca8 <main+0x3a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8005b1e:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8005b20:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8005b22:	4b62      	ldr	r3, [pc, #392]	; (8005cac <main+0x3a8>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b24:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005b26:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005b28:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b2a:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b2c:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b2e:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000E14;
 8005b30:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b32:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b34:	f002 ff12 	bl	800895c <HAL_I2C_Init>
 8005b38:	1e01      	subs	r1, r0, #0
 8005b3a:	d001      	beq.n	8005b40 <main+0x23c>
 8005b3c:	b672      	cpsid	i
  while (1)
 8005b3e:	e7fe      	b.n	8005b3e <main+0x23a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005b40:	0020      	movs	r0, r4
 8005b42:	f003 f9e1 	bl	8008f08 <HAL_I2CEx_ConfigAnalogFilter>
 8005b46:	1e01      	subs	r1, r0, #0
 8005b48:	d001      	beq.n	8005b4e <main+0x24a>
 8005b4a:	b672      	cpsid	i
  while (1)
 8005b4c:	e7fe      	b.n	8005b4c <main+0x248>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005b4e:	0020      	movs	r0, r4
 8005b50:	f003 fa00 	bl	8008f54 <HAL_I2CEx_ConfigDigitalFilter>
 8005b54:	1e02      	subs	r2, r0, #0
 8005b56:	d001      	beq.n	8005b5c <main+0x258>
 8005b58:	b672      	cpsid	i
  while (1)
 8005b5a:	e7fe      	b.n	8005b5a <main+0x256>
  hspi1.Instance = SPI1;
 8005b5c:	4b54      	ldr	r3, [pc, #336]	; (8005cb0 <main+0x3ac>)
 8005b5e:	4955      	ldr	r1, [pc, #340]	; (8005cb4 <main+0x3b0>)
 8005b60:	0018      	movs	r0, r3
 8005b62:	6019      	str	r1, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005b64:	2382      	movs	r3, #130	; 0x82
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b6a:	23e0      	movs	r3, #224	; 0xe0
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005b76:	464b      	mov	r3, r9
 8005b78:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8005b7a:	4653      	mov	r3, sl
 8005b7c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005b7e:	464b      	mov	r3, r9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005b80:	6082      	str	r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b82:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b84:	6142      	str	r2, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b86:	6202      	str	r2, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b88:	6242      	str	r2, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b8a:	6282      	str	r2, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005b8c:	6302      	str	r2, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005b8e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005b90:	f003 ffb6 	bl	8009b00 <HAL_SPI_Init>
 8005b94:	1e05      	subs	r5, r0, #0
 8005b96:	d001      	beq.n	8005b9c <main+0x298>
 8005b98:	b672      	cpsid	i
  while (1)
 8005b9a:	e7fe      	b.n	8005b9a <main+0x296>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b9c:	0001      	movs	r1, r0
 8005b9e:	220c      	movs	r2, #12
 8005ba0:	a807      	add	r0, sp, #28
 8005ba2:	f008 feef 	bl	800e984 <memset>
  htim6.Instance = TIM6;
 8005ba6:	4c44      	ldr	r4, [pc, #272]	; (8005cb8 <main+0x3b4>)
 8005ba8:	4b44      	ldr	r3, [pc, #272]	; (8005cbc <main+0x3b8>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005baa:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 8005bac:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 8000-1;
 8005bae:	4b44      	ldr	r3, [pc, #272]	; (8005cc0 <main+0x3bc>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bb0:	60a5      	str	r5, [r4, #8]
  htim6.Init.Prescaler = 8000-1;
 8005bb2:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 500-1;
 8005bb4:	23f4      	movs	r3, #244	; 0xf4
 8005bb6:	33ff      	adds	r3, #255	; 0xff
 8005bb8:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bba:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005bbc:	f004 fb68 	bl	800a290 <HAL_TIM_Base_Init>
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d001      	beq.n	8005bc8 <main+0x2c4>
 8005bc4:	b672      	cpsid	i
  while (1)
 8005bc6:	e7fe      	b.n	8005bc6 <main+0x2c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc8:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bca:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005bcc:	a907      	add	r1, sp, #28
 8005bce:	0020      	movs	r0, r4
 8005bd0:	f004 fb8e 	bl	800a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d001      	beq.n	8005bdc <main+0x2d8>
 8005bd8:	b672      	cpsid	i
  while (1)
 8005bda:	e7fe      	b.n	8005bda <main+0x2d6>
  huart1.Instance = USART1;
 8005bdc:	4c39      	ldr	r4, [pc, #228]	; (8005cc4 <main+0x3c0>)
 8005bde:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <main+0x3c4>)
  huart1.Init.BaudRate = 9600;
 8005be0:	2696      	movs	r6, #150	; 0x96
  huart1.Instance = USART1;
 8005be2:	6023      	str	r3, [r4, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005be4:	250c      	movs	r5, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005be6:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005be8:	0020      	movs	r0, r4
  huart1.Init.BaudRate = 9600;
 8005bea:	01b6      	lsls	r6, r6, #6
 8005bec:	6066      	str	r6, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005bee:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005bf0:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005bf2:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005bf4:	6165      	str	r5, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bf6:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bf8:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005bfa:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005bfc:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005bfe:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005c00:	f005 f930 	bl	800ae64 <HAL_UART_Init>
 8005c04:	1e01      	subs	r1, r0, #0
 8005c06:	d001      	beq.n	8005c0c <main+0x308>
 8005c08:	b672      	cpsid	i
  while (1)
 8005c0a:	e7fe      	b.n	8005c0a <main+0x306>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c0c:	0020      	movs	r0, r4
 8005c0e:	f005 fa23 	bl	800b058 <HAL_UARTEx_SetTxFifoThreshold>
 8005c12:	1e01      	subs	r1, r0, #0
 8005c14:	d001      	beq.n	8005c1a <main+0x316>
 8005c16:	b672      	cpsid	i
  while (1)
 8005c18:	e7fe      	b.n	8005c18 <main+0x314>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c1a:	0020      	movs	r0, r4
 8005c1c:	f005 fa46 	bl	800b0ac <HAL_UARTEx_SetRxFifoThreshold>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d001      	beq.n	8005c28 <main+0x324>
 8005c24:	b672      	cpsid	i
  while (1)
 8005c26:	e7fe      	b.n	8005c26 <main+0x322>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005c28:	0020      	movs	r0, r4
 8005c2a:	f005 f9f9 	bl	800b020 <HAL_UARTEx_DisableFifoMode>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d001      	beq.n	8005c36 <main+0x332>
 8005c32:	b672      	cpsid	i
  while (1)
 8005c34:	e7fe      	b.n	8005c34 <main+0x330>
  huart2.Instance = USART2;
 8005c36:	4c25      	ldr	r4, [pc, #148]	; (8005ccc <main+0x3c8>)
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <main+0x3cc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c3a:	60a0      	str	r0, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c3c:	60e0      	str	r0, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005c3e:	6120      	str	r0, [r4, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c40:	61a0      	str	r0, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c42:	61e0      	str	r0, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c44:	6220      	str	r0, [r4, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c46:	6260      	str	r0, [r4, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c48:	62a0      	str	r0, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c4a:	0020      	movs	r0, r4
  huart2.Instance = USART2;
 8005c4c:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 8005c4e:	6066      	str	r6, [r4, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c50:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c52:	f005 f907 	bl	800ae64 <HAL_UART_Init>
 8005c56:	1e01      	subs	r1, r0, #0
 8005c58:	d001      	beq.n	8005c5e <main+0x35a>
 8005c5a:	b672      	cpsid	i
  while (1)
 8005c5c:	e7fe      	b.n	8005c5c <main+0x358>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c5e:	0020      	movs	r0, r4
 8005c60:	f005 f9fa 	bl	800b058 <HAL_UARTEx_SetTxFifoThreshold>
 8005c64:	1e01      	subs	r1, r0, #0
 8005c66:	d001      	beq.n	8005c6c <main+0x368>
 8005c68:	b672      	cpsid	i
  while (1)
 8005c6a:	e7fe      	b.n	8005c6a <main+0x366>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c6c:	0020      	movs	r0, r4
 8005c6e:	f005 fa1d 	bl	800b0ac <HAL_UARTEx_SetRxFifoThreshold>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	d02e      	beq.n	8005cd4 <main+0x3d0>
 8005c76:	b672      	cpsid	i
  while (1)
 8005c78:	e7fe      	b.n	8005c78 <main+0x374>
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	00008010 	.word	0x00008010
 8005c84:	50000800 	.word	0x50000800
 8005c88:	50000c00 	.word	0x50000c00
 8005c8c:	50000400 	.word	0x50000400
 8005c90:	200045ac 	.word	0x200045ac
 8005c94:	40012400 	.word	0x40012400
 8005c98:	04000002 	.word	0x04000002
 8005c9c:	24000200 	.word	0x24000200
 8005ca0:	2c000800 	.word	0x2c000800
 8005ca4:	20004780 	.word	0x20004780
 8005ca8:	40005400 	.word	0x40005400
 8005cac:	00000e14 	.word	0x00000e14
 8005cb0:	200047d4 	.word	0x200047d4
 8005cb4:	40013000 	.word	0x40013000
 8005cb8:	20004838 	.word	0x20004838
 8005cbc:	40001000 	.word	0x40001000
 8005cc0:	00001f3f 	.word	0x00001f3f
 8005cc4:	20004884 	.word	0x20004884
 8005cc8:	40013800 	.word	0x40013800
 8005ccc:	20004918 	.word	0x20004918
 8005cd0:	40004400 	.word	0x40004400
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005cd4:	0020      	movs	r0, r4
 8005cd6:	f005 f9a3 	bl	800b020 <HAL_UARTEx_DisableFifoMode>
 8005cda:	1e02      	subs	r2, r0, #0
 8005cdc:	d001      	beq.n	8005ce2 <main+0x3de>
 8005cde:	b672      	cpsid	i
  while (1)
 8005ce0:	e7fe      	b.n	8005ce0 <main+0x3dc>
  huart3.Instance = USART3;
 8005ce2:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <main+0x448>)
 8005ce4:	491a      	ldr	r1, [pc, #104]	; (8005d50 <main+0x44c>)
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	6019      	str	r1, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005cea:	605e      	str	r6, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005cec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005cee:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005cf0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005cf2:	615d      	str	r5, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cf4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cf6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005cf8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005cfc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005cfe:	f005 f8b1 	bl	800ae64 <HAL_UART_Init>
 8005d02:	1e04      	subs	r4, r0, #0
 8005d04:	d001      	beq.n	8005d0a <main+0x406>
 8005d06:	b672      	cpsid	i
  while (1)
 8005d08:	e7fe      	b.n	8005d08 <main+0x404>
  osKernelInitialize();
 8005d0a:	f005 fa07 	bl	800b11c <osKernelInitialize>
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005d0e:	2102      	movs	r1, #2
 8005d10:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <main+0x450>)
 8005d12:	2010      	movs	r0, #16
 8005d14:	f005 fa96 	bl	800b244 <osMessageQueueNew>
 8005d18:	4b0f      	ldr	r3, [pc, #60]	; (8005d58 <main+0x454>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005d1a:	0021      	movs	r1, r4
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8005d1c:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005d1e:	4a0f      	ldr	r2, [pc, #60]	; (8005d5c <main+0x458>)
 8005d20:	480f      	ldr	r0, [pc, #60]	; (8005d60 <main+0x45c>)
 8005d22:	f005 fa2d 	bl	800b180 <osThreadNew>
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <main+0x460>)
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005d28:	0021      	movs	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8005d2a:	6018      	str	r0, [r3, #0]
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005d2c:	4a0e      	ldr	r2, [pc, #56]	; (8005d68 <main+0x464>)
 8005d2e:	480f      	ldr	r0, [pc, #60]	; (8005d6c <main+0x468>)
 8005d30:	f005 fa26 	bl	800b180 <osThreadNew>
 8005d34:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <main+0x46c>)
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005d36:	0021      	movs	r1, r4
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8005d38:	6018      	str	r0, [r3, #0]
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8005d3a:	4a0e      	ldr	r2, [pc, #56]	; (8005d74 <main+0x470>)
 8005d3c:	480e      	ldr	r0, [pc, #56]	; (8005d78 <main+0x474>)
 8005d3e:	f005 fa1f 	bl	800b180 <osThreadNew>
 8005d42:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <main+0x478>)
 8005d44:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8005d46:	f005 f9fd 	bl	800b144 <osKernelStart>
  while (1)
 8005d4a:	e7fe      	b.n	8005d4a <main+0x446>
 8005d4c:	200049ac 	.word	0x200049ac
 8005d50:	40004800 	.word	0x40004800
 8005d54:	08013608 	.word	0x08013608
 8005d58:	20004aa4 	.word	0x20004aa4
 8005d5c:	080135e4 	.word	0x080135e4
 8005d60:	080070e1 	.word	0x080070e1
 8005d64:	200040d0 	.word	0x200040d0
 8005d68:	08013598 	.word	0x08013598
 8005d6c:	080032c9 	.word	0x080032c9
 8005d70:	200006c0 	.word	0x200006c0
 8005d74:	080135c0 	.word	0x080135c0
 8005d78:	08003459 	.word	0x08003459
 8005d7c:	20003f08 	.word	0x20003f08

08005d80 <stor>:
float stor(const char* str) {
 8005d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d82:	46c6      	mov	lr, r8
 8005d84:	b500      	push	{lr}
    float sign = *str == '-' ? str++, -1 : 1;
 8005d86:	7803      	ldrb	r3, [r0, #0]
float stor(const char* str) {
 8005d88:	0005      	movs	r5, r0
 8005d8a:	b082      	sub	sp, #8
    float sign = *str == '-' ? str++, -1 : 1;
 8005d8c:	2b2d      	cmp	r3, #45	; 0x2d
 8005d8e:	d100      	bne.n	8005d92 <stor+0x12>
 8005d90:	e080      	b.n	8005e94 <stor+0x114>
 8005d92:	22fe      	movs	r2, #254	; 0xfe
 8005d94:	0592      	lsls	r2, r2, #22
 8005d96:	4690      	mov	r8, r2
    while (*str >= '0' && *str <= '9') {
 8005d98:	001e      	movs	r6, r3
 8005d9a:	3e30      	subs	r6, #48	; 0x30
 8005d9c:	b2f2      	uxtb	r2, r6
    float result = 0;
 8005d9e:	2400      	movs	r4, #0
    while (*str >= '0' && *str <= '9') {
 8005da0:	2a09      	cmp	r2, #9
 8005da2:	d812      	bhi.n	8005dca <stor+0x4a>
        result *= 10;
 8005da4:	4943      	ldr	r1, [pc, #268]	; (8005eb4 <stor+0x134>)
 8005da6:	1c20      	adds	r0, r4, #0
 8005da8:	f7fa ff92 	bl	8000cd0 <__aeabi_fmul>
 8005dac:	1c04      	adds	r4, r0, #0
        result += *str - '0';
 8005dae:	0030      	movs	r0, r6
 8005db0:	f7fb fa9c 	bl	80012ec <__aeabi_i2f>
        str++;
 8005db4:	3501      	adds	r5, #1
        result += *str - '0';
 8005db6:	1c21      	adds	r1, r4, #0
 8005db8:	f7fa fc20 	bl	80005fc <__aeabi_fadd>
    while (*str >= '0' && *str <= '9') {
 8005dbc:	782b      	ldrb	r3, [r5, #0]
        result += *str - '0';
 8005dbe:	1c04      	adds	r4, r0, #0
    while (*str >= '0' && *str <= '9') {
 8005dc0:	001e      	movs	r6, r3
 8005dc2:	3e30      	subs	r6, #48	; 0x30
 8005dc4:	b2f2      	uxtb	r2, r6
 8005dc6:	2a09      	cmp	r2, #9
 8005dc8:	d9ec      	bls.n	8005da4 <stor+0x24>
    if (*str == ',' || *str == '.') {
 8005dca:	2202      	movs	r2, #2
 8005dcc:	4393      	bics	r3, r2
 8005dce:	2b2c      	cmp	r3, #44	; 0x2c
 8005dd0:	d00f      	beq.n	8005df2 <stor+0x72>
    if (*str == 'e' || *str == 'E') {
 8005dd2:	002e      	movs	r6, r5
 8005dd4:	782f      	ldrb	r7, [r5, #0]
    result *= sign;
 8005dd6:	4641      	mov	r1, r8
 8005dd8:	1c20      	adds	r0, r4, #0
 8005dda:	f7fa ff79 	bl	8000cd0 <__aeabi_fmul>
    if (*str == 'e' || *str == 'E') {
 8005dde:	2320      	movs	r3, #32
    result *= sign;
 8005de0:	4680      	mov	r8, r0
    if (*str == 'e' || *str == 'E') {
 8005de2:	439f      	bics	r7, r3
 8005de4:	2f45      	cmp	r7, #69	; 0x45
 8005de6:	d023      	beq.n	8005e30 <stor+0xb0>
}
 8005de8:	4640      	mov	r0, r8
 8005dea:	b002      	add	sp, #8
 8005dec:	bc80      	pop	{r7}
 8005dee:	46b8      	mov	r8, r7
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while (*str >= '0' && *str <= '9') {
 8005df2:	786f      	ldrb	r7, [r5, #1]
        str++;
 8005df4:	1c6e      	adds	r6, r5, #1
        while (*str >= '0' && *str <= '9') {
 8005df6:	0038      	movs	r0, r7
 8005df8:	3830      	subs	r0, #48	; 0x30
 8005dfa:	b2c3      	uxtb	r3, r0
 8005dfc:	2b09      	cmp	r3, #9
 8005dfe:	d8ea      	bhi.n	8005dd6 <stor+0x56>
        float multiplier = 0.1;
 8005e00:	4d2d      	ldr	r5, [pc, #180]	; (8005eb8 <stor+0x138>)
            result += (*str - '0') * multiplier;
 8005e02:	f7fb fa73 	bl	80012ec <__aeabi_i2f>
 8005e06:	1c29      	adds	r1, r5, #0
 8005e08:	f7fa ff62 	bl	8000cd0 <__aeabi_fmul>
 8005e0c:	1c01      	adds	r1, r0, #0
 8005e0e:	1c20      	adds	r0, r4, #0
 8005e10:	f7fa fbf4 	bl	80005fc <__aeabi_fadd>
            multiplier /= 10;
 8005e14:	4927      	ldr	r1, [pc, #156]	; (8005eb4 <stor+0x134>)
            result += (*str - '0') * multiplier;
 8005e16:	1c04      	adds	r4, r0, #0
            multiplier /= 10;
 8005e18:	1c28      	adds	r0, r5, #0
 8005e1a:	f7fa fd8f 	bl	800093c <__aeabi_fdiv>
        while (*str >= '0' && *str <= '9') {
 8005e1e:	7877      	ldrb	r7, [r6, #1]
            multiplier /= 10;
 8005e20:	1c05      	adds	r5, r0, #0
        while (*str >= '0' && *str <= '9') {
 8005e22:	0038      	movs	r0, r7
 8005e24:	3830      	subs	r0, #48	; 0x30
 8005e26:	b2c3      	uxtb	r3, r0
            str++;
 8005e28:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 8005e2a:	2b09      	cmp	r3, #9
 8005e2c:	d9e9      	bls.n	8005e02 <stor+0x82>
 8005e2e:	e7d2      	b.n	8005dd6 <stor+0x56>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8005e30:	7874      	ldrb	r4, [r6, #1]
 8005e32:	2c2d      	cmp	r4, #45	; 0x2d
 8005e34:	d033      	beq.n	8005e9e <stor+0x11e>
        str++;
 8005e36:	2200      	movs	r2, #0
 8005e38:	4b20      	ldr	r3, [pc, #128]	; (8005ebc <stor+0x13c>)
 8005e3a:	1c75      	adds	r5, r6, #1
 8005e3c:	9200      	str	r2, [sp, #0]
 8005e3e:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8005e40:	3c30      	subs	r4, #48	; 0x30
 8005e42:	b2e3      	uxtb	r3, r4
 8005e44:	2b09      	cmp	r3, #9
 8005e46:	d832      	bhi.n	8005eae <stor+0x12e>
        float power = 0;
 8005e48:	2000      	movs	r0, #0
            power *= 10;
 8005e4a:	491a      	ldr	r1, [pc, #104]	; (8005eb4 <stor+0x134>)
 8005e4c:	f7fa ff40 	bl	8000cd0 <__aeabi_fmul>
 8005e50:	1c06      	adds	r6, r0, #0
            power += *str - '0';
 8005e52:	0020      	movs	r0, r4
 8005e54:	f7fb fa4a 	bl	80012ec <__aeabi_i2f>
            str++;
 8005e58:	3501      	adds	r5, #1
            power += *str - '0';
 8005e5a:	1c31      	adds	r1, r6, #0
 8005e5c:	f7fa fbce 	bl	80005fc <__aeabi_fadd>
        while (*str >= '0' && *str <= '9') {
 8005e60:	782c      	ldrb	r4, [r5, #0]
 8005e62:	3c30      	subs	r4, #48	; 0x30
 8005e64:	b2e3      	uxtb	r3, r4
 8005e66:	2b09      	cmp	r3, #9
 8005e68:	d9ef      	bls.n	8005e4a <stor+0xca>
        result *= pow(powerer, power);
 8005e6a:	f7fd f921 	bl	80030b0 <__aeabi_f2d>
 8005e6e:	0002      	movs	r2, r0
 8005e70:	000b      	movs	r3, r1
 8005e72:	9800      	ldr	r0, [sp, #0]
 8005e74:	9901      	ldr	r1, [sp, #4]
 8005e76:	f00b fc0b 	bl	8011690 <pow>
 8005e7a:	0004      	movs	r4, r0
 8005e7c:	000d      	movs	r5, r1
 8005e7e:	4640      	mov	r0, r8
 8005e80:	f7fd f916 	bl	80030b0 <__aeabi_f2d>
 8005e84:	0022      	movs	r2, r4
 8005e86:	002b      	movs	r3, r5
 8005e88:	f7fc fa24 	bl	80022d4 <__aeabi_dmul>
 8005e8c:	f7fd f958 	bl	8003140 <__aeabi_d2f>
 8005e90:	4680      	mov	r8, r0
    return result;
 8005e92:	e7a9      	b.n	8005de8 <stor+0x68>
    float sign = *str == '-' ? str++, -1 : 1;
 8005e94:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <stor+0x140>)
    while (*str >= '0' && *str <= '9') {
 8005e96:	7843      	ldrb	r3, [r0, #1]
    float sign = *str == '-' ? str++, -1 : 1;
 8005e98:	4690      	mov	r8, r2
 8005e9a:	3501      	adds	r5, #1
 8005e9c:	e77c      	b.n	8005d98 <stor+0x18>
 8005e9e:	22a0      	movs	r2, #160	; 0xa0
 8005ea0:	4b08      	ldr	r3, [pc, #32]	; (8005ec4 <stor+0x144>)
 8005ea2:	0612      	lsls	r2, r2, #24
 8005ea4:	9200      	str	r2, [sp, #0]
 8005ea6:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8005ea8:	78b4      	ldrb	r4, [r6, #2]
        float powerer = *str == '-'? str++, 0.1 : 10;
 8005eaa:	1cb5      	adds	r5, r6, #2
 8005eac:	e7c8      	b.n	8005e40 <stor+0xc0>
        while (*str >= '0' && *str <= '9') {
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e7de      	b.n	8005e72 <stor+0xf2>
 8005eb4:	41200000 	.word	0x41200000
 8005eb8:	3dcccccd 	.word	0x3dcccccd
 8005ebc:	40240000 	.word	0x40240000
 8005ec0:	bf800000 	.word	0xbf800000
 8005ec4:	3fb99999 	.word	0x3fb99999

08005ec8 <getGNRMC>:
void getGNRMC(const char * ptra){
 8005ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eca:	46d6      	mov	lr, sl
 8005ecc:	4646      	mov	r6, r8
 8005ece:	464f      	mov	r7, r9
 8005ed0:	b5c0      	push	{r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8005ed2:	4e56      	ldr	r6, [pc, #344]	; (800602c <getGNRMC+0x164>)
 8005ed4:	0031      	movs	r1, r6
 8005ed6:	f008 fd9d 	bl	800ea14 <strtok>
 8005eda:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005edc:	d026      	beq.n	8005f2c <getGNRMC+0x64>
  	        strcpy(GPSInfo.latD,token);
 8005ede:	2328      	movs	r3, #40	; 0x28
 8005ee0:	4698      	mov	r8, r3
 8005ee2:	4f53      	ldr	r7, [pc, #332]	; (8006030 <getGNRMC+0x168>)
	int i=0;
 8005ee4:	2500      	movs	r5, #0
  	        strcpy(GPSInfo.latD,token);
 8005ee6:	44b8      	add	r8, r7
 8005ee8:	e00e      	b.n	8005f08 <getGNRMC+0x40>
  	    if(i==3){ //Getting Latitude
 8005eea:	2d03      	cmp	r5, #3
 8005eec:	d061      	beq.n	8005fb2 <getGNRMC+0xea>
  	    if(i==4){ //Getting Latitude ind
 8005eee:	2d04      	cmp	r5, #4
 8005ef0:	d128      	bne.n	8005f44 <getGNRMC+0x7c>
  	        strcpy(GPSInfo.latD,token);
 8005ef2:	0021      	movs	r1, r4
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	f008 ff04 	bl	800ed02 <strcpy>
  	    token = strtok(NULL,",");
 8005efa:	0031      	movs	r1, r6
 8005efc:	2000      	movs	r0, #0
 8005efe:	f008 fd89 	bl	800ea14 <strtok>
        i++;
 8005f02:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8005f04:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005f06:	d011      	beq.n	8005f2c <getGNRMC+0x64>
  	    if(i==1){ //Getting time
 8005f08:	2d01      	cmp	r5, #1
 8005f0a:	d014      	beq.n	8005f36 <getGNRMC+0x6e>
  	    if(i==10){ //Getting GPS status
 8005f0c:	2d0a      	cmp	r5, #10
 8005f0e:	d1ec      	bne.n	8005eea <getGNRMC+0x22>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8005f10:	214e      	movs	r1, #78	; 0x4e
 8005f12:	0020      	movs	r0, r4
 8005f14:	f008 fd4b 	bl	800e9ae <strchr>
 8005f18:	4243      	negs	r3, r0
 8005f1a:	4158      	adcs	r0, r3
  	    token = strtok(NULL,",");
 8005f1c:	0031      	movs	r1, r6
 8005f1e:	61f8      	str	r0, [r7, #28]
 8005f20:	2000      	movs	r0, #0
 8005f22:	f008 fd77 	bl	800ea14 <strtok>
        i++;
 8005f26:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8005f28:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8005f2a:	d1ed      	bne.n	8005f08 <getGNRMC+0x40>
}
 8005f2c:	bce0      	pop	{r5, r6, r7}
 8005f2e:	46ba      	mov	sl, r7
 8005f30:	46b1      	mov	r9, r6
 8005f32:	46a8      	mov	r8, r5
 8005f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	    	strncpy(GPSInfo.time,token,6);
 8005f36:	483e      	ldr	r0, [pc, #248]	; (8006030 <getGNRMC+0x168>)
 8005f38:	2206      	movs	r2, #6
 8005f3a:	0021      	movs	r1, r4
 8005f3c:	302e      	adds	r0, #46	; 0x2e
 8005f3e:	f008 fd55 	bl	800e9ec <strncpy>
  	    if(i==5){ //Getting Longitude
 8005f42:	e7da      	b.n	8005efa <getGNRMC+0x32>
 8005f44:	2d05      	cmp	r5, #5
 8005f46:	d120      	bne.n	8005f8a <getGNRMC+0xc2>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005f48:	0020      	movs	r0, r4
 8005f4a:	f7ff ff19 	bl	8005d80 <stor>
    int dd1= ddmmmm/100;
 8005f4e:	4939      	ldr	r1, [pc, #228]	; (8006034 <getGNRMC+0x16c>)
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005f50:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8005f52:	f7fa fcf3 	bl	800093c <__aeabi_fdiv>
 8005f56:	f7fb f9a9 	bl	80012ac <__aeabi_f2iz>
 8005f5a:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 8005f5c:	2064      	movs	r0, #100	; 0x64
 8005f5e:	4360      	muls	r0, r4
 8005f60:	f7fb f9c4 	bl	80012ec <__aeabi_i2f>
 8005f64:	1c01      	adds	r1, r0, #0
 8005f66:	4648      	mov	r0, r9
 8005f68:	f7fb f800 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 8005f6c:	4932      	ldr	r1, [pc, #200]	; (8006038 <getGNRMC+0x170>)
 8005f6e:	f7fa fce5 	bl	800093c <__aeabi_fdiv>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005f72:	4b2f      	ldr	r3, [pc, #188]	; (8006030 <getGNRMC+0x168>)
    mm=mm/60;
 8005f74:	4681      	mov	r9, r0
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005f76:	469a      	mov	sl, r3
    mm=(float)dd1+mm;
 8005f78:	0020      	movs	r0, r4
 8005f7a:	f7fb f9b7 	bl	80012ec <__aeabi_i2f>
 8005f7e:	4649      	mov	r1, r9
 8005f80:	f7fa fb3c 	bl	80005fc <__aeabi_fadd>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8005f84:	4653      	mov	r3, sl
 8005f86:	6058      	str	r0, [r3, #4]
  	    if(i==8){ //Getting Course
 8005f88:	e7b7      	b.n	8005efa <getGNRMC+0x32>
  	    if(i==6){ //Getting Longitude ind
 8005f8a:	2d06      	cmp	r5, #6
 8005f8c:	d105      	bne.n	8005f9a <getGNRMC+0xd2>
  	    	strcpy(GPSInfo.lonD,token);
 8005f8e:	4828      	ldr	r0, [pc, #160]	; (8006030 <getGNRMC+0x168>)
 8005f90:	0021      	movs	r1, r4
 8005f92:	302b      	adds	r0, #43	; 0x2b
 8005f94:	f008 feb5 	bl	800ed02 <strcpy>
  	    if(i==8){ //Getting Course
 8005f98:	e7af      	b.n	8005efa <getGNRMC+0x32>
  	    if(i==9){ //Getting Date
 8005f9a:	2d09      	cmp	r5, #9
 8005f9c:	d02d      	beq.n	8005ffa <getGNRMC+0x132>
  	    if(i==7){ //Getting Speed
 8005f9e:	2d07      	cmp	r5, #7
 8005fa0:	d025      	beq.n	8005fee <getGNRMC+0x126>
  	    if(i==8){ //Getting Course
 8005fa2:	2d08      	cmp	r5, #8
 8005fa4:	d1a9      	bne.n	8005efa <getGNRMC+0x32>
  	        GPSInfo.head=stor(token);
 8005fa6:	0020      	movs	r0, r4
 8005fa8:	f7ff feea 	bl	8005d80 <stor>
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <getGNRMC+0x168>)
 8005fae:	6158      	str	r0, [r3, #20]
 8005fb0:	e7a3      	b.n	8005efa <getGNRMC+0x32>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005fb2:	0020      	movs	r0, r4
 8005fb4:	f7ff fee4 	bl	8005d80 <stor>
    int dd1= ddmmmm/100;
 8005fb8:	491e      	ldr	r1, [pc, #120]	; (8006034 <getGNRMC+0x16c>)
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005fba:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8005fbc:	f7fa fcbe 	bl	800093c <__aeabi_fdiv>
 8005fc0:	f7fb f974 	bl	80012ac <__aeabi_f2iz>
 8005fc4:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 8005fc6:	2064      	movs	r0, #100	; 0x64
 8005fc8:	4360      	muls	r0, r4
 8005fca:	f7fb f98f 	bl	80012ec <__aeabi_i2f>
 8005fce:	1c01      	adds	r1, r0, #0
 8005fd0:	4648      	mov	r0, r9
 8005fd2:	f7fa ffcb 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 8005fd6:	4918      	ldr	r1, [pc, #96]	; (8006038 <getGNRMC+0x170>)
 8005fd8:	f7fa fcb0 	bl	800093c <__aeabi_fdiv>
 8005fdc:	4681      	mov	r9, r0
    mm=(float)dd1+mm;
 8005fde:	0020      	movs	r0, r4
 8005fe0:	f7fb f984 	bl	80012ec <__aeabi_i2f>
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa fb09 	bl	80005fc <__aeabi_fadd>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8005fea:	6038      	str	r0, [r7, #0]
  	    if(i==6){ //Getting Longitude ind
 8005fec:	e785      	b.n	8005efa <getGNRMC+0x32>
  	        GPSInfo.speed=stor(token);
 8005fee:	0020      	movs	r0, r4
 8005ff0:	f7ff fec6 	bl	8005d80 <stor>
 8005ff4:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <getGNRMC+0x168>)
 8005ff6:	6198      	str	r0, [r3, #24]
  	    if(i==8){ //Getting Course
 8005ff8:	e77f      	b.n	8005efa <getGNRMC+0x32>
  			memset(dd,0,10);
 8005ffa:	4b10      	ldr	r3, [pc, #64]	; (800603c <getGNRMC+0x174>)
 8005ffc:	220a      	movs	r2, #10
 8005ffe:	0018      	movs	r0, r3
 8006000:	2100      	movs	r1, #0
 8006002:	4699      	mov	r9, r3
 8006004:	f008 fcbe 	bl	800e984 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8006008:	2300      	movs	r3, #0
 800600a:	4649      	mov	r1, r9
 800600c:	5ce2      	ldrb	r2, [r4, r3]
 800600e:	54ca      	strb	r2, [r1, r3]
 8006010:	3301      	adds	r3, #1
 8006012:	2b04      	cmp	r3, #4
 8006014:	d1f9      	bne.n	800600a <getGNRMC+0x142>
  	        dd[4]='2';
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <getGNRMC+0x178>)
  	        strcpy(GPSInfo.date,dd);
 8006018:	4805      	ldr	r0, [pc, #20]	; (8006030 <getGNRMC+0x168>)
  	        dd[4]='2';
 800601a:	808b      	strh	r3, [r1, #4]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 800601c:	7923      	ldrb	r3, [r4, #4]
  	        strcpy(GPSInfo.date,dd);
 800601e:	303d      	adds	r0, #61	; 0x3d
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8006020:	718b      	strb	r3, [r1, #6]
 8006022:	7963      	ldrb	r3, [r4, #5]
 8006024:	71cb      	strb	r3, [r1, #7]
  	        strcpy(GPSInfo.date,dd);
 8006026:	f008 fe6c 	bl	800ed02 <strcpy>
  	    if(i==8){ //Getting Course
 800602a:	e766      	b.n	8005efa <getGNRMC+0x32>
 800602c:	080127d8 	.word	0x080127d8
 8006030:	20000674 	.word	0x20000674
 8006034:	42c80000 	.word	0x42c80000
 8006038:	42700000 	.word	0x42700000
 800603c:	200040c4 	.word	0x200040c4
 8006040:	00003032 	.word	0x00003032

08006044 <getGNGSA>:
void getGNGSA(const  char * ptra){
 8006044:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8006046:	4d11      	ldr	r5, [pc, #68]	; (800608c <getGNGSA+0x48>)
 8006048:	0029      	movs	r1, r5
 800604a:	f008 fce3 	bl	800ea14 <strtok>
    while( token != NULL ) {
 800604e:	2800      	cmp	r0, #0
 8006050:	d017      	beq.n	8006082 <getGNGSA+0x3e>
	int i=0;
 8006052:	2400      	movs	r4, #0
    	    GPSInfo.hdop=stor(token);
 8006054:	4e0e      	ldr	r6, [pc, #56]	; (8006090 <getGNGSA+0x4c>)
 8006056:	e006      	b.n	8006066 <getGNGSA+0x22>
  	    token = strtok(NULL,",");
 8006058:	0029      	movs	r1, r5
 800605a:	2000      	movs	r0, #0
 800605c:	f008 fcda 	bl	800ea14 <strtok>
        i++;
 8006060:	3401      	adds	r4, #1
    while( token != NULL ) {
 8006062:	2800      	cmp	r0, #0
 8006064:	d00d      	beq.n	8006082 <getGNGSA+0x3e>
        if(i==15){ //Getting PDOP
 8006066:	2c0f      	cmp	r4, #15
 8006068:	d00c      	beq.n	8006084 <getGNGSA+0x40>
    	if(i==16){ //Getting HDOP
 800606a:	2c10      	cmp	r4, #16
 800606c:	d1f4      	bne.n	8006058 <getGNGSA+0x14>
    	    GPSInfo.hdop=stor(token);
 800606e:	f7ff fe87 	bl	8005d80 <stor>
  	    token = strtok(NULL,",");
 8006072:	0029      	movs	r1, r5
    	    GPSInfo.hdop=stor(token);
 8006074:	60f0      	str	r0, [r6, #12]
  	    token = strtok(NULL,",");
 8006076:	2000      	movs	r0, #0
 8006078:	f008 fccc 	bl	800ea14 <strtok>
        i++;
 800607c:	3401      	adds	r4, #1
    while( token != NULL ) {
 800607e:	2800      	cmp	r0, #0
 8006080:	d1f1      	bne.n	8006066 <getGNGSA+0x22>
}
 8006082:	bd70      	pop	{r4, r5, r6, pc}
    	    GPSInfo.pdop=stor(token);
 8006084:	f7ff fe7c 	bl	8005d80 <stor>
 8006088:	6130      	str	r0, [r6, #16]
    	if(i==16){ //Getting HDOP
 800608a:	e7e5      	b.n	8006058 <getGNGSA+0x14>
 800608c:	080127d8 	.word	0x080127d8
 8006090:	20000674 	.word	0x20000674

08006094 <getGNGGA>:
void getGNGGA(const  char * ptra){
 8006094:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8006096:	4d11      	ldr	r5, [pc, #68]	; (80060dc <getGNGGA+0x48>)
 8006098:	0029      	movs	r1, r5
 800609a:	f008 fcbb 	bl	800ea14 <strtok>
    while( token != NULL ) {
 800609e:	2800      	cmp	r0, #0
 80060a0:	d017      	beq.n	80060d2 <getGNGGA+0x3e>
	int i=0;
 80060a2:	2400      	movs	r4, #0
            GPSInfo.alt = stor(token);
 80060a4:	4e0e      	ldr	r6, [pc, #56]	; (80060e0 <getGNGGA+0x4c>)
 80060a6:	e006      	b.n	80060b6 <getGNGGA+0x22>
  	    token = strtok(NULL,",");
 80060a8:	0029      	movs	r1, r5
 80060aa:	2000      	movs	r0, #0
 80060ac:	f008 fcb2 	bl	800ea14 <strtok>
        i++;
 80060b0:	3401      	adds	r4, #1
    while( token != NULL ) {
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d00d      	beq.n	80060d2 <getGNGGA+0x3e>
    	if(i==7){ //Getting Satellites no
 80060b6:	2c07      	cmp	r4, #7
 80060b8:	d00c      	beq.n	80060d4 <getGNGGA+0x40>
    	if(i==9){ //Getting Saltitute
 80060ba:	2c09      	cmp	r4, #9
 80060bc:	d1f4      	bne.n	80060a8 <getGNGGA+0x14>
            GPSInfo.alt = stor(token);
 80060be:	f7ff fe5f 	bl	8005d80 <stor>
  	    token = strtok(NULL,",");
 80060c2:	0029      	movs	r1, r5
            GPSInfo.alt = stor(token);
 80060c4:	60b0      	str	r0, [r6, #8]
  	    token = strtok(NULL,",");
 80060c6:	2000      	movs	r0, #0
 80060c8:	f008 fca4 	bl	800ea14 <strtok>
        i++;
 80060cc:	3401      	adds	r4, #1
    while( token != NULL ) {
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d1f1      	bne.n	80060b6 <getGNGGA+0x22>
}
 80060d2:	bd70      	pop	{r4, r5, r6, pc}
            GPSInfo.sat = atoi(token);
 80060d4:	f006 fcda 	bl	800ca8c <atoi>
 80060d8:	6230      	str	r0, [r6, #32]
    	if(i==9){ //Getting Saltitute
 80060da:	e7e5      	b.n	80060a8 <getGNGGA+0x14>
 80060dc:	080127d8 	.word	0x080127d8
 80060e0:	20000674 	.word	0x20000674

080060e4 <validateGPS>:
int validateGPS(const char * str){
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	0004      	movs	r4, r0
	int GPStyp=0;

	uint8_t checksum = 0;
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 80060e8:	f7ff fb38 	bl	800575c <nmea_valid_checksum>
	        return 0;
 80060ec:	2500      	movs	r5, #0
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 80060ee:	2801      	cmp	r0, #1
 80060f0:	d10e      	bne.n	8006110 <validateGPS+0x2c>
	    }
	    if(strlen(str)<4){return 0;}
 80060f2:	0020      	movs	r0, r4
 80060f4:	f7fa f808 	bl	8000108 <strlen>
 80060f8:	2803      	cmp	r0, #3
 80060fa:	d909      	bls.n	8006110 <validateGPS+0x2c>

	    if (strstr(str, "GNRMC") != NULL) {
 80060fc:	0020      	movs	r0, r4
 80060fe:	491d      	ldr	r1, [pc, #116]	; (8006174 <validateGPS+0x90>)
 8006100:	f008 fcf0 	bl	800eae4 <strstr>
 8006104:	2800      	cmp	r0, #0
 8006106:	d005      	beq.n	8006114 <validateGPS+0x30>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8006108:	0020      	movs	r0, r4
 800610a:	f7ff fedd 	bl	8005ec8 <getGNRMC>
 800610e:	3501      	adds	r5, #1
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
	    	GPStyp=6;
	    }
    return(GPStyp);
}
 8006110:	0028      	movs	r0, r5
 8006112:	bd70      	pop	{r4, r5, r6, pc}
	    else if (strstr(str, "GNGGA") != NULL) {
 8006114:	0020      	movs	r0, r4
 8006116:	4918      	ldr	r1, [pc, #96]	; (8006178 <validateGPS+0x94>)
 8006118:	f008 fce4 	bl	800eae4 <strstr>
 800611c:	2800      	cmp	r0, #0
 800611e:	d11e      	bne.n	800615e <validateGPS+0x7a>
	    else if (strstr(str, "GNGSA") != NULL) {
 8006120:	0020      	movs	r0, r4
 8006122:	4916      	ldr	r1, [pc, #88]	; (800617c <validateGPS+0x98>)
 8006124:	f008 fcde 	bl	800eae4 <strstr>
 8006128:	2800      	cmp	r0, #0
 800612a:	d11d      	bne.n	8006168 <validateGPS+0x84>
	    else if (strstr(str, "GNGSV") != NULL) {
 800612c:	0020      	movs	r0, r4
 800612e:	4914      	ldr	r1, [pc, #80]	; (8006180 <validateGPS+0x9c>)
 8006130:	f008 fcd8 	bl	800eae4 <strstr>
	    	GPStyp=4;
 8006134:	2504      	movs	r5, #4
	    else if (strstr(str, "GNGSV") != NULL) {
 8006136:	2800      	cmp	r0, #0
 8006138:	d1ea      	bne.n	8006110 <validateGPS+0x2c>
	    else if (strstr(str, "GNGLL") != NULL) {
 800613a:	0020      	movs	r0, r4
 800613c:	4911      	ldr	r1, [pc, #68]	; (8006184 <validateGPS+0xa0>)
 800613e:	f008 fcd1 	bl	800eae4 <strstr>
	    	GPStyp=5;
 8006142:	3501      	adds	r5, #1
	    else if (strstr(str, "GNGLL") != NULL) {
 8006144:	2800      	cmp	r0, #0
 8006146:	d1e3      	bne.n	8006110 <validateGPS+0x2c>
	    else if (strstr(str, "GNVTG") != NULL) {
 8006148:	0020      	movs	r0, r4
 800614a:	490f      	ldr	r1, [pc, #60]	; (8006188 <validateGPS+0xa4>)
 800614c:	f008 fcca 	bl	800eae4 <strstr>
	    	GPStyp=6;
 8006150:	4243      	negs	r3, r0
 8006152:	4158      	adcs	r0, r3
 8006154:	4240      	negs	r0, r0
 8006156:	43a8      	bics	r0, r5
 8006158:	0005      	movs	r5, r0
 800615a:	3506      	adds	r5, #6
 800615c:	e7d8      	b.n	8006110 <validateGPS+0x2c>
	    	GPStyp=2; getGNGGA(str);
 800615e:	0020      	movs	r0, r4
 8006160:	f7ff ff98 	bl	8006094 <getGNGGA>
 8006164:	2502      	movs	r5, #2
 8006166:	e7d3      	b.n	8006110 <validateGPS+0x2c>
	    	GPStyp=3;getGNGSA(str);
 8006168:	0020      	movs	r0, r4
 800616a:	f7ff ff6b 	bl	8006044 <getGNGSA>
 800616e:	2503      	movs	r5, #3
 8006170:	e7ce      	b.n	8006110 <validateGPS+0x2c>
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	08013414 	.word	0x08013414
 8006178:	0801341c 	.word	0x0801341c
 800617c:	08013424 	.word	0x08013424
 8006180:	0801342c 	.word	0x0801342c
 8006184:	08013434 	.word	0x08013434
 8006188:	0801343c 	.word	0x0801343c

0800618c <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 800618c:	b530      	push	{r4, r5, lr}
	    //Debug_Tx(gpsData);
		int valid=0 ;
		if(strlen((char*)gpsData)>5){
 800618e:	4d0e      	ldr	r5, [pc, #56]	; (80061c8 <ProcessGPS+0x3c>)
void ProcessGPS(){
 8006190:	b083      	sub	sp, #12
		if(strlen((char*)gpsData)>5){
 8006192:	0028      	movs	r0, r5
 8006194:	f7f9 ffb8 	bl	8000108 <strlen>
 8006198:	2805      	cmp	r0, #5
 800619a:	d801      	bhi.n	80061a0 <ProcessGPS+0x14>
				valid=valid+validateGPS(token);
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
			}
			//free(token);
		}
}
 800619c:	b003      	add	sp, #12
 800619e:	bd30      	pop	{r4, r5, pc}
			char *tk= NULL;
 80061a0:	2300      	movs	r3, #0
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 80061a2:	4c0a      	ldr	r4, [pc, #40]	; (80061cc <ProcessGPS+0x40>)
 80061a4:	0028      	movs	r0, r5
 80061a6:	0021      	movs	r1, r4
 80061a8:	aa01      	add	r2, sp, #4
			char *tk= NULL;
 80061aa:	9301      	str	r3, [sp, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 80061ac:	f008 fc95 	bl	800eada <strtok_r>
			while( token != NULL ) {
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d0f3      	beq.n	800619c <ProcessGPS+0x10>
				valid=valid+validateGPS(token);
 80061b4:	f7ff ff96 	bl	80060e4 <validateGPS>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 80061b8:	0021      	movs	r1, r4
 80061ba:	2000      	movs	r0, #0
 80061bc:	aa01      	add	r2, sp, #4
 80061be:	f008 fc8c 	bl	800eada <strtok_r>
			while( token != NULL ) {
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d1f6      	bne.n	80061b4 <ProcessGPS+0x28>
 80061c6:	e7e9      	b.n	800619c <ProcessGPS+0x10>
 80061c8:	200040e0 	.word	0x200040e0
 80061cc:	08012658 	.word	0x08012658

080061d0 <HAL_UART_TxCpltCallback>:
}
 80061d0:	4770      	bx	lr
 80061d2:	46c0      	nop			; (mov r8, r8)

080061d4 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 80061d4:	b570      	push	{r4, r5, r6, lr}
	if(huart==&huart2){
 80061d6:	4c19      	ldr	r4, [pc, #100]	; (800623c <HAL_UART_ErrorCallback+0x68>)
 80061d8:	42a0      	cmp	r0, r4
 80061da:	d013      	beq.n	8006204 <HAL_UART_ErrorCallback+0x30>
	if(huart==&huart1){
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <HAL_UART_ErrorCallback+0x6c>)
 80061de:	4298      	cmp	r0, r3
 80061e0:	d000      	beq.n	80061e4 <HAL_UART_ErrorCallback+0x10>
}
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
		if(DMAon==1){
 80061e4:	4b17      	ldr	r3, [pc, #92]	; (8006244 <HAL_UART_ErrorCallback+0x70>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d1fa      	bne.n	80061e2 <HAL_UART_ErrorCallback+0xe>
		GSMBuff[0]=0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	4916      	ldr	r1, [pc, #88]	; (8006248 <HAL_UART_ErrorCallback+0x74>)
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80061f0:	6802      	ldr	r2, [r0, #0]
		GSMBuff[0]=0;
 80061f2:	700b      	strb	r3, [r1, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80061f4:	330c      	adds	r3, #12
 80061f6:	6213      	str	r3, [r2, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80061f8:	6822      	ldr	r2, [r4, #0]
 80061fa:	6213      	str	r3, [r2, #32]
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80061fc:	2201      	movs	r2, #1
 80061fe:	f004 febb 	bl	800af78 <HAL_UART_Receive_DMA>
}
 8006202:	e7ee      	b.n	80061e2 <HAL_UART_ErrorCallback+0xe>
		if(dnlfile==0){
 8006204:	4b11      	ldr	r3, [pc, #68]	; (800624c <HAL_UART_ErrorCallback+0x78>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1ea      	bne.n	80061e2 <HAL_UART_ErrorCallback+0xe>
		if(DMAon==1){
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <HAL_UART_ErrorCallback+0x70>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d1e6      	bne.n	80061e2 <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8006214:	4d0e      	ldr	r5, [pc, #56]	; (8006250 <HAL_UART_ErrorCallback+0x7c>)
 8006216:	782b      	ldrb	r3, [r5, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d109      	bne.n	8006230 <HAL_UART_ErrorCallback+0x5c>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800621c:	220c      	movs	r2, #12
 800621e:	6823      	ldr	r3, [r4, #0]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006220:	0029      	movs	r1, r5
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006222:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006224:	22e1      	movs	r2, #225	; 0xe1
 8006226:	0020      	movs	r0, r4
 8006228:	0092      	lsls	r2, r2, #2
 800622a:	f004 fea5 	bl	800af78 <HAL_UART_Receive_DMA>
 800622e:	e7d8      	b.n	80061e2 <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8006230:	2100      	movs	r1, #0
 8006232:	0028      	movs	r0, r5
 8006234:	4a07      	ldr	r2, [pc, #28]	; (8006254 <HAL_UART_ErrorCallback+0x80>)
 8006236:	f008 fba5 	bl	800e984 <memset>
 800623a:	e7ef      	b.n	800621c <HAL_UART_ErrorCallback+0x48>
 800623c:	20004918 	.word	0x20004918
 8006240:	20004884 	.word	0x20004884
 8006244:	20000094 	.word	0x20000094
 8006248:	200006c4 	.word	0x200006c4
 800624c:	200040d4 	.word	0x200040d4
 8006250:	200040e0 	.word	0x200040e0
 8006254:	000003e7 	.word	0x000003e7

08006258 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8006258:	4b04      	ldr	r3, [pc, #16]	; (800626c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800625a:	6802      	ldr	r2, [r0, #0]
{
 800625c:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 800625e:	429a      	cmp	r2, r3
 8006260:	d000      	beq.n	8006264 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8006262:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8006264:	f001 fbb4 	bl	80079d0 <HAL_IncTick>
}
 8006268:	e7fb      	b.n	8006262 <HAL_TIM_PeriodElapsedCallback+0xa>
 800626a:	46c0      	nop			; (mov r8, r8)
 800626c:	40012c00 	.word	0x40012c00

08006270 <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 8006270:	b510      	push	{r4, lr}
 8006272:	b084      	sub	sp, #16
	SPI_flash_Chip_Erase();
 8006274:	f7fe fef4 	bl	8005060 <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 8006278:	4809      	ldr	r0, [pc, #36]	; (80062a0 <initFirstRun+0x30>)
 800627a:	f001 fbbb 	bl	80079f4 <HAL_Delay>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 800627e:	4c09      	ldr	r4, [pc, #36]	; (80062a4 <initFirstRun+0x34>)
 8006280:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <initFirstRun+0x38>)
 8006282:	0022      	movs	r2, r4
 8006284:	0021      	movs	r1, r4
 8006286:	4809      	ldr	r0, [pc, #36]	; (80062ac <initFirstRun+0x3c>)
 8006288:	3468      	adds	r4, #104	; 0x68
 800628a:	320c      	adds	r2, #12
 800628c:	3134      	adds	r1, #52	; 0x34
 800628e:	9402      	str	r4, [sp, #8]
 8006290:	9301      	str	r3, [sp, #4]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	3024      	adds	r0, #36	; 0x24
 8006296:	f7ff f8bd 	bl	8005414 <writeConfig>
}
 800629a:	b004      	add	sp, #16
 800629c:	bd10      	pop	{r4, pc}
 800629e:	46c0      	nop			; (mov r8, r8)
 80062a0:	00007530 	.word	0x00007530
 80062a4:	080124c0 	.word	0x080124c0
 80062a8:	08013444 	.word	0x08013444
 80062ac:	08012540 	.word	0x08012540

080062b0 <ReadAllGPIO>:
void ReadAllGPIO(){
 80062b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062b2:	46de      	mov	lr, fp
 80062b4:	4657      	mov	r7, sl
 80062b6:	464e      	mov	r6, r9
 80062b8:	4645      	mov	r5, r8
 80062ba:	b5e0      	push	{r5, r6, r7, lr}
	memset(StatusStrng,0,20);
 80062bc:	4d60      	ldr	r5, [pc, #384]	; (8006440 <ReadAllGPIO+0x190>)
void ReadAllGPIO(){
 80062be:	b08b      	sub	sp, #44	; 0x2c
	memset(StatusStrng,0,20);
 80062c0:	2214      	movs	r2, #20
 80062c2:	2100      	movs	r1, #0
 80062c4:	0028      	movs	r0, r5
 80062c6:	f008 fb5d 	bl	800e984 <memset>
	memset(Dig_io,0,30);
 80062ca:	4e5e      	ldr	r6, [pc, #376]	; (8006444 <ReadAllGPIO+0x194>)
 80062cc:	221e      	movs	r2, #30
 80062ce:	2100      	movs	r1, #0
 80062d0:	0030      	movs	r0, r6
 80062d2:	f008 fb57 	bl	800e984 <memset>
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 80062d6:	2180      	movs	r1, #128	; 0x80
 80062d8:	20a0      	movs	r0, #160	; 0xa0
 80062da:	0149      	lsls	r1, r1, #5
 80062dc:	05c0      	lsls	r0, r0, #23
 80062de:	f002 fa4b 	bl	8008778 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80062e2:	2180      	movs	r1, #128	; 0x80
	Dig_in[0]=Read_DI_IN1();
 80062e4:	4c58      	ldr	r4, [pc, #352]	; (8006448 <ReadAllGPIO+0x198>)
 80062e6:	0109      	lsls	r1, r1, #4
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 80062e8:	6020      	str	r0, [r4, #0]
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80062ea:	4858      	ldr	r0, [pc, #352]	; (800644c <ReadAllGPIO+0x19c>)
 80062ec:	f002 fa44 	bl	8008778 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80062f0:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 80062f2:	6060      	str	r0, [r4, #4]
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80062f4:	0149      	lsls	r1, r1, #5
 80062f6:	4855      	ldr	r0, [pc, #340]	; (800644c <ReadAllGPIO+0x19c>)
 80062f8:	f002 fa3e 	bl	8008778 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80062fc:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 80062fe:	60a0      	str	r0, [r4, #8]
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8006300:	0189      	lsls	r1, r1, #6
 8006302:	4852      	ldr	r0, [pc, #328]	; (800644c <ReadAllGPIO+0x19c>)
 8006304:	f002 fa38 	bl	8008778 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8006308:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 800630a:	4b51      	ldr	r3, [pc, #324]	; (8006450 <ReadAllGPIO+0x1a0>)
 800630c:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 800630e:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8006310:	484e      	ldr	r0, [pc, #312]	; (800644c <ReadAllGPIO+0x19c>)
 8006312:	469a      	mov	sl, r3
 8006314:	f002 fa30 	bl	8008778 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8006318:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 800631a:	4b4e      	ldr	r3, [pc, #312]	; (8006454 <ReadAllGPIO+0x1a4>)
 800631c:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800631e:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8006320:	484a      	ldr	r0, [pc, #296]	; (800644c <ReadAllGPIO+0x19c>)
 8006322:	4699      	mov	r9, r3
 8006324:	f002 fa28 	bl	8008778 <HAL_GPIO_ReadPin>
		else box='C';
 8006328:	3801      	subs	r0, #1
 800632a:	4243      	negs	r3, r0
 800632c:	4158      	adcs	r0, r3
 800632e:	230c      	movs	r3, #12
 8006330:	4240      	negs	r0, r0
 8006332:	4003      	ands	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006334:	2180      	movs	r1, #128	; 0x80
 8006336:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 8006338:	4a47      	ldr	r2, [pc, #284]	; (8006458 <ReadAllGPIO+0x1a8>)
		else box='C';
 800633a:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 800633c:	0049      	lsls	r1, r1, #1
 800633e:	05c0      	lsls	r0, r0, #23
 8006340:	9208      	str	r2, [sp, #32]
 8006342:	7013      	strb	r3, [r2, #0]
 8006344:	f002 fa18 	bl	8008778 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 8006348:	4b44      	ldr	r3, [pc, #272]	; (800645c <ReadAllGPIO+0x1ac>)
	EXT_B=Read_EXT_B_SENSE();
 800634a:	4945      	ldr	r1, [pc, #276]	; (8006460 <ReadAllGPIO+0x1b0>)
 800634c:	6018      	str	r0, [r3, #0]
 800634e:	9309      	str	r3, [sp, #36]	; 0x24
	return (ADCvalue[2]*VSENSE*16);
 8006350:	4b44      	ldr	r3, [pc, #272]	; (8006464 <ReadAllGPIO+0x1b4>)
 8006352:	4845      	ldr	r0, [pc, #276]	; (8006468 <ReadAllGPIO+0x1b8>)
 8006354:	681f      	ldr	r7, [r3, #0]
 8006356:	4680      	mov	r8, r0
 8006358:	6880      	ldr	r0, [r0, #8]
 800635a:	9106      	str	r1, [sp, #24]
 800635c:	f7fb f818 	bl	8001390 <__aeabi_ui2f>
 8006360:	1c39      	adds	r1, r7, #0
 8006362:	f7fa fcb5 	bl	8000cd0 <__aeabi_fmul>
 8006366:	2183      	movs	r1, #131	; 0x83
 8006368:	05c9      	lsls	r1, r1, #23
 800636a:	f7fa fcb1 	bl	8000cd0 <__aeabi_fmul>
 800636e:	9906      	ldr	r1, [sp, #24]
 8006370:	6008      	str	r0, [r1, #0]
	INT_B=Read_INT_B_SENSE();
 8006372:	483e      	ldr	r0, [pc, #248]	; (800646c <ReadAllGPIO+0x1bc>)
 8006374:	9007      	str	r0, [sp, #28]
	return (ADCvalue[3]*VSENSE*2);
 8006376:	4640      	mov	r0, r8
 8006378:	68c0      	ldr	r0, [r0, #12]
 800637a:	f7fb f809 	bl	8001390 <__aeabi_ui2f>
 800637e:	1c39      	adds	r1, r7, #0
 8006380:	f7fa fca6 	bl	8000cd0 <__aeabi_fmul>
 8006384:	1c01      	adds	r1, r0, #0
 8006386:	f7fa f939 	bl	80005fc <__aeabi_fadd>
 800638a:	9907      	ldr	r1, [sp, #28]
 800638c:	6008      	str	r0, [r1, #0]
	adc[0]=Read_ADC1();
 800638e:	4838      	ldr	r0, [pc, #224]	; (8006470 <ReadAllGPIO+0x1c0>)
 8006390:	4683      	mov	fp, r0
	float val=(float)ADCvalue[0];
 8006392:	4640      	mov	r0, r8
 8006394:	6800      	ldr	r0, [r0, #0]
 8006396:	f7fa fffb 	bl	8001390 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 800639a:	1c39      	adds	r1, r7, #0
 800639c:	f7fa fc98 	bl	8000cd0 <__aeabi_fmul>
 80063a0:	4934      	ldr	r1, [pc, #208]	; (8006474 <ReadAllGPIO+0x1c4>)
 80063a2:	f7fa fc95 	bl	8000cd0 <__aeabi_fmul>
 80063a6:	465b      	mov	r3, fp
 80063a8:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 80063aa:	4640      	mov	r0, r8
 80063ac:	6840      	ldr	r0, [r0, #4]
 80063ae:	f7fa ffef 	bl	8001390 <__aeabi_ui2f>
 80063b2:	1c39      	adds	r1, r7, #0
 80063b4:	f7fa fc8c 	bl	8000cd0 <__aeabi_fmul>
 80063b8:	492e      	ldr	r1, [pc, #184]	; (8006474 <ReadAllGPIO+0x1c4>)
 80063ba:	f7fa fc89 	bl	8000cd0 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 80063be:	465f      	mov	r7, fp
	memset(StatusStrng,0,20);
 80063c0:	2214      	movs	r2, #20
	adc[1]=Read_ADC2();
 80063c2:	6078      	str	r0, [r7, #4]
	memset(StatusStrng,0,20);
 80063c4:	2100      	movs	r1, #0
 80063c6:	0028      	movs	r0, r5
 80063c8:	f008 fadc 	bl	800e984 <memset>
	memset(Dig_io,0,30);
 80063cc:	221e      	movs	r2, #30
 80063ce:	2100      	movs	r1, #0
 80063d0:	0030      	movs	r0, r6
 80063d2:	f008 fad7 	bl	800e984 <memset>
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 80063d6:	4828      	ldr	r0, [pc, #160]	; (8006478 <ReadAllGPIO+0x1c8>)
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	6800      	ldr	r0, [r0, #0]
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	9003      	str	r0, [sp, #12]
 80063e0:	4826      	ldr	r0, [pc, #152]	; (800647c <ReadAllGPIO+0x1cc>)
 80063e2:	4927      	ldr	r1, [pc, #156]	; (8006480 <ReadAllGPIO+0x1d0>)
 80063e4:	6800      	ldr	r0, [r0, #0]
 80063e6:	9002      	str	r0, [sp, #8]
 80063e8:	4826      	ldr	r0, [pc, #152]	; (8006484 <ReadAllGPIO+0x1d4>)
 80063ea:	6800      	ldr	r0, [r0, #0]
 80063ec:	9001      	str	r0, [sp, #4]
 80063ee:	68a0      	ldr	r0, [r4, #8]
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 80063f0:	4654      	mov	r4, sl
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 80063f2:	9000      	str	r0, [sp, #0]
 80063f4:	0030      	movs	r0, r6
 80063f6:	f008 fa59 	bl	800e8ac <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 80063fa:	6826      	ldr	r6, [r4, #0]
 80063fc:	464c      	mov	r4, r9
 80063fe:	9a08      	ldr	r2, [sp, #32]
 8006400:	6827      	ldr	r7, [r4, #0]
 8006402:	7813      	ldrb	r3, [r2, #0]
 8006404:	9807      	ldr	r0, [sp, #28]
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640a:	4c1f      	ldr	r4, [pc, #124]	; (8006488 <ReadAllGPIO+0x1d8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	6800      	ldr	r0, [r0, #0]
 8006412:	f7fc fe4d 	bl	80030b0 <__aeabi_f2d>
 8006416:	9002      	str	r0, [sp, #8]
 8006418:	9103      	str	r1, [sp, #12]
 800641a:	9906      	ldr	r1, [sp, #24]
 800641c:	6808      	ldr	r0, [r1, #0]
 800641e:	f7fc fe47 	bl	80030b0 <__aeabi_f2d>
 8006422:	0033      	movs	r3, r6
 8006424:	9000      	str	r0, [sp, #0]
 8006426:	9101      	str	r1, [sp, #4]
 8006428:	003a      	movs	r2, r7
 800642a:	0021      	movs	r1, r4
 800642c:	0028      	movs	r0, r5
 800642e:	f008 fa3d 	bl	800e8ac <siprintf>
}
 8006432:	b00b      	add	sp, #44	; 0x2c
 8006434:	bcf0      	pop	{r4, r5, r6, r7}
 8006436:	46bb      	mov	fp, r7
 8006438:	46b2      	mov	sl, r6
 800643a:	46a9      	mov	r9, r5
 800643c:	46a0      	mov	r8, r4
 800643e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006440:	20003f0c 	.word	0x20003f0c
 8006444:	2000060c 	.word	0x2000060c
 8006448:	20000600 	.word	0x20000600
 800644c:	50000400 	.word	0x50000400
 8006450:	20001e64 	.word	0x20001e64
 8006454:	2000033c 	.word	0x2000033c
 8006458:	20000090 	.word	0x20000090
 800645c:	20003ef0 	.word	0x20003ef0
 8006460:	20000634 	.word	0x20000634
 8006464:	200000b4 	.word	0x200000b4
 8006468:	20000340 	.word	0x20000340
 800646c:	20001e28 	.word	0x20001e28
 8006470:	20003f54 	.word	0x20003f54
 8006474:	41300000 	.word	0x41300000
 8006478:	20004a78 	.word	0x20004a78
 800647c:	20000630 	.word	0x20000630
 8006480:	08013454 	.word	0x08013454
 8006484:	2000062c 	.word	0x2000062c
 8006488:	0801346c 	.word	0x0801346c

0800648c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800648c:	b570      	push	{r4, r5, r6, lr}
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 800648e:	2104      	movs	r1, #4
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006490:	0004      	movs	r4, r0
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8006492:	4832      	ldr	r0, [pc, #200]	; (800655c <HAL_UART_RxCpltCallback+0xd0>)
 8006494:	f002 f97c 	bl	8008790 <HAL_GPIO_TogglePin>
	if(huart==&huart2){
 8006498:	4d31      	ldr	r5, [pc, #196]	; (8006560 <HAL_UART_RxCpltCallback+0xd4>)
 800649a:	42ac      	cmp	r4, r5
 800649c:	d01b      	beq.n	80064d6 <HAL_UART_RxCpltCallback+0x4a>
	if(huart==&huart1){
 800649e:	4d31      	ldr	r5, [pc, #196]	; (8006564 <HAL_UART_RxCpltCallback+0xd8>)
 80064a0:	42ac      	cmp	r4, r5
 80064a2:	d000      	beq.n	80064a6 <HAL_UART_RxCpltCallback+0x1a>
}
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
		if(strlen((char*)GSMData)<900){
 80064a6:	4c30      	ldr	r4, [pc, #192]	; (8006568 <HAL_UART_RxCpltCallback+0xdc>)
 80064a8:	0020      	movs	r0, r4
 80064aa:	f7f9 fe2d 	bl	8000108 <strlen>
 80064ae:	23e1      	movs	r3, #225	; 0xe1
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4298      	cmp	r0, r3
 80064b4:	d22b      	bcs.n	800650e <HAL_UART_RxCpltCallback+0x82>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 80064b6:	492d      	ldr	r1, [pc, #180]	; (800656c <HAL_UART_RxCpltCallback+0xe0>)
 80064b8:	780b      	ldrb	r3, [r1, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d123      	bne.n	8006506 <HAL_UART_RxCpltCallback+0x7a>
		if(DMAon==1){
 80064be:	4b2c      	ldr	r3, [pc, #176]	; (8006570 <HAL_UART_RxCpltCallback+0xe4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d1ee      	bne.n	80064a4 <HAL_UART_RxCpltCallback+0x18>
		GSMBuff[0]=0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	4928      	ldr	r1, [pc, #160]	; (800656c <HAL_UART_RxCpltCallback+0xe0>)
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80064ca:	2201      	movs	r2, #1
 80064cc:	0028      	movs	r0, r5
		GSMBuff[0]=0;
 80064ce:	700b      	strb	r3, [r1, #0]
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80064d0:	f004 fd52 	bl	800af78 <HAL_UART_Receive_DMA>
}
 80064d4:	e7e6      	b.n	80064a4 <HAL_UART_RxCpltCallback+0x18>
		if(dnlfile==0){
 80064d6:	4b27      	ldr	r3, [pc, #156]	; (8006574 <HAL_UART_RxCpltCallback+0xe8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e2      	bne.n	80064a4 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>10){
 80064de:	4c26      	ldr	r4, [pc, #152]	; (8006578 <HAL_UART_RxCpltCallback+0xec>)
 80064e0:	0020      	movs	r0, r4
 80064e2:	f7f9 fe11 	bl	8000108 <strlen>
 80064e6:	280a      	cmp	r0, #10
 80064e8:	d81d      	bhi.n	8006526 <HAL_UART_RxCpltCallback+0x9a>
		if(DMAon==1){
 80064ea:	4b21      	ldr	r3, [pc, #132]	; (8006570 <HAL_UART_RxCpltCallback+0xe4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d1d8      	bne.n	80064a4 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80064f2:	7823      	ldrb	r3, [r4, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d110      	bne.n	800651a <HAL_UART_RxCpltCallback+0x8e>
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 80064f8:	22e1      	movs	r2, #225	; 0xe1
 80064fa:	0021      	movs	r1, r4
 80064fc:	0028      	movs	r0, r5
 80064fe:	0092      	lsls	r2, r2, #2
 8006500:	f004 fd3a 	bl	800af78 <HAL_UART_Receive_DMA>
 8006504:	e7ce      	b.n	80064a4 <HAL_UART_RxCpltCallback+0x18>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8006506:	1900      	adds	r0, r0, r4
 8006508:	f008 fbfb 	bl	800ed02 <strcpy>
 800650c:	e7d7      	b.n	80064be <HAL_UART_RxCpltCallback+0x32>
			memset(GSMData, 0, 4500);
 800650e:	2100      	movs	r1, #0
 8006510:	0020      	movs	r0, r4
 8006512:	4a1a      	ldr	r2, [pc, #104]	; (800657c <HAL_UART_RxCpltCallback+0xf0>)
 8006514:	f008 fa36 	bl	800e984 <memset>
 8006518:	e7d1      	b.n	80064be <HAL_UART_RxCpltCallback+0x32>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 800651a:	2100      	movs	r1, #0
 800651c:	0020      	movs	r0, r4
 800651e:	4a18      	ldr	r2, [pc, #96]	; (8006580 <HAL_UART_RxCpltCallback+0xf4>)
 8006520:	f008 fa30 	bl	800e984 <memset>
 8006524:	e7e8      	b.n	80064f8 <HAL_UART_RxCpltCallback+0x6c>
			ProcessGPS((char*)gpsData);
 8006526:	0020      	movs	r0, r4
 8006528:	f7ff fe30 	bl	800618c <ProcessGPS>
			getGPSString();
 800652c:	f7ff f8b8 	bl	80056a0 <getGPSString>
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 8006530:	2104      	movs	r1, #4
 8006532:	480a      	ldr	r0, [pc, #40]	; (800655c <HAL_UART_RxCpltCallback+0xd0>)
 8006534:	f002 f92c 	bl	8008790 <HAL_GPIO_TogglePin>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8006538:	4e12      	ldr	r6, [pc, #72]	; (8006584 <HAL_UART_RxCpltCallback+0xf8>)
 800653a:	6833      	ldr	r3, [r6, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <HAL_UART_RxCpltCallback+0xc4>
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_UART_RxCpltCallback+0xfc>)
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	2800      	cmp	r0, #0
 8006546:	dd00      	ble.n	800654a <HAL_UART_RxCpltCallback+0xbe>
 8006548:	6030      	str	r0, [r6, #0]
			ReadAllGPIO();
 800654a:	f7ff feb1 	bl	80062b0 <ReadAllGPIO>
 800654e:	e7cc      	b.n	80064ea <HAL_UART_RxCpltCallback+0x5e>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8006550:	f7ff f852 	bl	80055f8 <detectAcc>
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <HAL_UART_RxCpltCallback+0xfc>)
 8006556:	6018      	str	r0, [r3, #0]
 8006558:	e7f4      	b.n	8006544 <HAL_UART_RxCpltCallback+0xb8>
 800655a:	46c0      	nop			; (mov r8, r8)
 800655c:	50000c00 	.word	0x50000c00
 8006560:	20004918 	.word	0x20004918
 8006564:	20004884 	.word	0x20004884
 8006568:	200006c8 	.word	0x200006c8
 800656c:	200006c4 	.word	0x200006c4
 8006570:	20000094 	.word	0x20000094
 8006574:	200040d4 	.word	0x200040d4
 8006578:	200040e0 	.word	0x200040e0
 800657c:	00001194 	.word	0x00001194
 8006580:	000003e7 	.word	0x000003e7
 8006584:	20000354 	.word	0x20000354
 8006588:	20000350 	.word	0x20000350

0800658c <GetHead>:
void GetHead(){
 800658c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658e:	46de      	mov	lr, fp
 8006590:	464e      	mov	r6, r9
 8006592:	4645      	mov	r5, r8
 8006594:	4657      	mov	r7, sl
 8006596:	b5e0      	push	{r5, r6, r7, lr}
	memset(Head,0,100);
 8006598:	4dc8      	ldr	r5, [pc, #800]	; (80068bc <GetHead+0x330>)
 800659a:	2264      	movs	r2, #100	; 0x64
void GetHead(){
 800659c:	b085      	sub	sp, #20
	memset(Head,0,100);
 800659e:	2100      	movs	r1, #0
 80065a0:	0028      	movs	r0, r5
 80065a2:	f008 f9ef 	bl	800e984 <memset>
	strcpy(Head,InitStr);
 80065a6:	49c6      	ldr	r1, [pc, #792]	; (80068c0 <GetHead+0x334>)
 80065a8:	0028      	movs	r0, r5
 80065aa:	f008 fab1 	bl	800eb10 <stpcpy>
	strcat(Head,",");
 80065ae:	232c      	movs	r3, #44	; 0x2c
	strcat(Head,VerStr);
 80065b0:	49c4      	ldr	r1, [pc, #784]	; (80068c4 <GetHead+0x338>)
	strcat(Head,",");
 80065b2:	7003      	strb	r3, [r0, #0]
	strcat(Head,VerStr);
 80065b4:	3001      	adds	r0, #1
 80065b6:	f008 faab 	bl	800eb10 <stpcpy>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 80065ba:	4bc3      	ldr	r3, [pc, #780]	; (80068c8 <GetHead+0x33c>)
 80065bc:	4ec3      	ldr	r6, [pc, #780]	; (80068cc <GetHead+0x340>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	6833      	ldr	r3, [r6, #0]
	strcat(Head,VerStr);
 80065c2:	9000      	str	r0, [sp, #0]
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 80065c4:	3301      	adds	r3, #1
 80065c6:	d000      	beq.n	80065ca <GetHead+0x3e>
 80065c8:	e0dd      	b.n	8006786 <GetHead+0x1fa>
 80065ca:	2a01      	cmp	r2, #1
 80065cc:	d000      	beq.n	80065d0 <GetHead+0x44>
 80065ce:	e0da      	b.n	8006786 <GetHead+0x1fa>
 80065d0:	2301      	movs	r3, #1
 80065d2:	6033      	str	r3, [r6, #0]
 80065d4:	4bbe      	ldr	r3, [pc, #760]	; (80068d0 <GetHead+0x344>)
 80065d6:	469a      	mov	sl, r3
 80065d8:	2301      	movs	r3, #1
 80065da:	4652      	mov	r2, sl
 80065dc:	425b      	negs	r3, r3
 80065de:	6013      	str	r3, [r2, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 80065e0:	4bbc      	ldr	r3, [pc, #752]	; (80068d4 <GetHead+0x348>)
 80065e2:	4fbd      	ldr	r7, [pc, #756]	; (80068d8 <GetHead+0x34c>)
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	3301      	adds	r3, #1
 80065ea:	d000      	beq.n	80065ee <GetHead+0x62>
 80065ec:	e0bc      	b.n	8006768 <GetHead+0x1dc>
 80065ee:	2a01      	cmp	r2, #1
 80065f0:	d000      	beq.n	80065f4 <GetHead+0x68>
 80065f2:	e0b9      	b.n	8006768 <GetHead+0x1dc>
 80065f4:	2301      	movs	r3, #1
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	4bb8      	ldr	r3, [pc, #736]	; (80068dc <GetHead+0x350>)
 80065fa:	469b      	mov	fp, r3
 80065fc:	2301      	movs	r3, #1
 80065fe:	465a      	mov	r2, fp
 8006600:	425b      	negs	r3, r3
 8006602:	6013      	str	r3, [r2, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8006604:	4bb6      	ldr	r3, [pc, #728]	; (80068e0 <GetHead+0x354>)
 8006606:	49b7      	ldr	r1, [pc, #732]	; (80068e4 <GetHead+0x358>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	1c18      	adds	r0, r3, #0
 800660c:	4699      	mov	r9, r3
 800660e:	f7f9 ff5d 	bl	80004cc <__aeabi_fcmplt>
 8006612:	0001      	movs	r1, r0
 8006614:	1e4b      	subs	r3, r1, #1
 8006616:	4199      	sbcs	r1, r3
 8006618:	4bb3      	ldr	r3, [pc, #716]	; (80068e8 <GetHead+0x35c>)
 800661a:	9102      	str	r1, [sp, #8]
 800661c:	4698      	mov	r8, r3
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	425a      	negs	r2, r3
 8006624:	4153      	adcs	r3, r2
 8006626:	000a      	movs	r2, r1
 8006628:	401a      	ands	r2, r3
 800662a:	9201      	str	r2, [sp, #4]
 800662c:	420b      	tst	r3, r1
 800662e:	d000      	beq.n	8006632 <GetHead+0xa6>
 8006630:	e0b8      	b.n	80067a4 <GetHead+0x218>
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 8006632:	4cae      	ldr	r4, [pc, #696]	; (80068ec <GetHead+0x360>)
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	3301      	adds	r3, #1
 8006638:	425a      	negs	r2, r3
 800663a:	4153      	adcs	r3, r2
 800663c:	b2db      	uxtb	r3, r3
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	4648      	mov	r0, r9
 8006642:	49a8      	ldr	r1, [pc, #672]	; (80068e4 <GetHead+0x358>)
 8006644:	f7f9 ff60 	bl	8000508 <__aeabi_fcmpge>
 8006648:	2300      	movs	r3, #0
 800664a:	2800      	cmp	r0, #0
 800664c:	d008      	beq.n	8006660 <GetHead+0xd4>
 800664e:	9a01      	ldr	r2, [sp, #4]
 8006650:	2301      	movs	r3, #1
 8006652:	2a00      	cmp	r2, #0
 8006654:	d004      	beq.n	8006660 <GetHead+0xd4>
 8006656:	2201      	movs	r2, #1
 8006658:	4641      	mov	r1, r8
 800665a:	4252      	negs	r2, r2
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	600a      	str	r2, [r1, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 8006660:	4aa3      	ldr	r2, [pc, #652]	; (80068f0 <GetHead+0x364>)
 8006662:	4691      	mov	r9, r2
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	3201      	adds	r2, #1
 8006668:	d176      	bne.n	8006758 <GetHead+0x1cc>
 800666a:	9a02      	ldr	r2, [sp, #8]
 800666c:	2a00      	cmp	r2, #0
 800666e:	d073      	beq.n	8006758 <GetHead+0x1cc>
 8006670:	2201      	movs	r2, #1
 8006672:	4649      	mov	r1, r9
 8006674:	600a      	str	r2, [r1, #0]
 8006676:	4a9f      	ldr	r2, [pc, #636]	; (80068f4 <GetHead+0x368>)
 8006678:	0011      	movs	r1, r2
 800667a:	9201      	str	r2, [sp, #4]
 800667c:	2201      	movs	r2, #1
 800667e:	4252      	negs	r2, r2
 8006680:	600a      	str	r2, [r1, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <GetHead+0x106>
 8006686:	2301      	movs	r3, #1
 8006688:	9a01      	ldr	r2, [sp, #4]
 800668a:	6013      	str	r3, [r2, #0]
 800668c:	464a      	mov	r2, r9
 800668e:	3b02      	subs	r3, #2
 8006690:	6013      	str	r3, [r2, #0]
	if(GSMSignal<=10){
 8006692:	4b99      	ldr	r3, [pc, #612]	; (80068f8 <GetHead+0x36c>)
 8006694:	4999      	ldr	r1, [pc, #612]	; (80068fc <GetHead+0x370>)
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	f7f9 ff22 	bl	80004e0 <__aeabi_fcmple>
 800669c:	2800      	cmp	r0, #0
 800669e:	d000      	beq.n	80066a2 <GetHead+0x116>
 80066a0:	e087      	b.n	80067b2 <GetHead+0x226>
	else if(getSpeed()>SpeedThr){
 80066a2:	4b97      	ldr	r3, [pc, #604]	; (8006900 <GetHead+0x374>)
	return GPSInfo.speed;
 80066a4:	4a97      	ldr	r2, [pc, #604]	; (8006904 <GetHead+0x378>)
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	6991      	ldr	r1, [r2, #24]
 80066aa:	f7f9 ff0f 	bl	80004cc <__aeabi_fcmplt>
 80066ae:	9002      	str	r0, [sp, #8]
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d000      	beq.n	80066b6 <GetHead+0x12a>
 80066b4:	e092      	b.n	80067dc <GetHead+0x250>
	else if(EmergencyWireBreak>0){
 80066b6:	4b94      	ldr	r3, [pc, #592]	; (8006908 <GetHead+0x37c>)
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	dd00      	ble.n	80066c2 <GetHead+0x136>
 80066c0:	e095      	b.n	80067ee <GetHead+0x262>
	else if(AccGyroStatus==1){
 80066c2:	4b92      	ldr	r3, [pc, #584]	; (800690c <GetHead+0x380>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d100      	bne.n	80066cc <GetHead+0x140>
 80066ca:	e098      	b.n	80067fe <GetHead+0x272>
	else if(AccGyroStatus==2){
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d100      	bne.n	80066d2 <GetHead+0x146>
 80066d0:	e09a      	b.n	8006808 <GetHead+0x27c>
	else if(AccGyroStatus==3){
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d100      	bne.n	80066d8 <GetHead+0x14c>
 80066d6:	e0a3      	b.n	8006820 <GetHead+0x294>
	else if(EmergencyStateON==1){
 80066d8:	6833      	ldr	r3, [r6, #0]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d100      	bne.n	80066e0 <GetHead+0x154>
 80066de:	e0a4      	b.n	800682a <GetHead+0x29e>
	else if(EmergencyStateOFF==1){
 80066e0:	4653      	mov	r3, sl
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d100      	bne.n	80066ea <GetHead+0x15e>
 80066e8:	e0a4      	b.n	8006834 <GetHead+0x2a8>
	else if(IgnitionTurnedON>0){
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	dd00      	ble.n	80066f2 <GetHead+0x166>
 80066f0:	e08f      	b.n	8006812 <GetHead+0x286>
	else if(IgnitionTurnedOFF>0){
 80066f2:	465b      	mov	r3, fp
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd00      	ble.n	80066fc <GetHead+0x170>
 80066fa:	e0a0      	b.n	800683e <GetHead+0x2b2>
	else if(BOX_STATE=='C'){
 80066fc:	4b84      	ldr	r3, [pc, #528]	; (8006910 <GetHead+0x384>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b43      	cmp	r3, #67	; 0x43
 8006702:	d100      	bne.n	8006706 <GetHead+0x17a>
 8006704:	e0ab      	b.n	800685e <GetHead+0x2d2>
	else if(InternalBatterLow>0){
 8006706:	4643      	mov	r3, r8
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	dd00      	ble.n	8006710 <GetHead+0x184>
 800670e:	e09e      	b.n	800684e <GetHead+0x2c2>
	else if(InternalBatteryChargedAgain>0){
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	dd00      	ble.n	8006718 <GetHead+0x18c>
 8006716:	e0a7      	b.n	8006868 <GetHead+0x2dc>
	else if(MainBatteryDisconnect>0){
 8006718:	464b      	mov	r3, r9
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	dd00      	ble.n	8006722 <GetHead+0x196>
 8006720:	e0a9      	b.n	8006876 <GetHead+0x2ea>
	else if(MainBatteryReconnect>0){
 8006722:	9c01      	ldr	r4, [sp, #4]
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	dd00      	ble.n	800672c <GetHead+0x1a0>
 800672a:	e0ac      	b.n	8006886 <GetHead+0x2fa>
	else if(HistoryPVTData>0){
 800672c:	4e79      	ldr	r6, [pc, #484]	; (8006914 <GetHead+0x388>)
 800672e:	6833      	ldr	r3, [r6, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	dd00      	ble.n	8006736 <GetHead+0x1aa>
 8006734:	e0ae      	b.n	8006894 <GetHead+0x308>
	else if(HealthPacket>0){
 8006736:	4e78      	ldr	r6, [pc, #480]	; (8006918 <GetHead+0x38c>)
 8006738:	6833      	ldr	r3, [r6, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	dd00      	ble.n	8006740 <GetHead+0x1b4>
 800673e:	e0b0      	b.n	80068a2 <GetHead+0x316>
	else if(OTAParameterChange>0){
 8006740:	4e76      	ldr	r6, [pc, #472]	; (800691c <GetHead+0x390>)
 8006742:	6833      	ldr	r3, [r6, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	dc00      	bgt.n	800674a <GetHead+0x1be>
 8006748:	e0b2      	b.n	80068b0 <GetHead+0x324>
		strcat(Head,AlartStr_OTAParameterChange);
 800674a:	4975      	ldr	r1, [pc, #468]	; (8006920 <GetHead+0x394>)
 800674c:	9800      	ldr	r0, [sp, #0]
 800674e:	f008 fad8 	bl	800ed02 <strcpy>
		OTAParameterChange=0;
 8006752:	2300      	movs	r3, #0
 8006754:	6033      	str	r3, [r6, #0]
 8006756:	e045      	b.n	80067e4 <GetHead+0x258>
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 8006758:	4a66      	ldr	r2, [pc, #408]	; (80068f4 <GetHead+0x368>)
 800675a:	9201      	str	r2, [sp, #4]
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	3201      	adds	r2, #1
 8006760:	4251      	negs	r1, r2
 8006762:	414a      	adcs	r2, r1
 8006764:	4013      	ands	r3, r2
 8006766:	e78c      	b.n	8006682 <GetHead+0xf6>
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 8006768:	4b5c      	ldr	r3, [pc, #368]	; (80068dc <GetHead+0x350>)
 800676a:	469b      	mov	fp, r3
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	d000      	beq.n	8006774 <GetHead+0x1e8>
 8006772:	e747      	b.n	8006604 <GetHead+0x78>
 8006774:	2a00      	cmp	r2, #0
 8006776:	d000      	beq.n	800677a <GetHead+0x1ee>
 8006778:	e744      	b.n	8006604 <GetHead+0x78>
 800677a:	2301      	movs	r3, #1
 800677c:	465a      	mov	r2, fp
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	3b02      	subs	r3, #2
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	e73e      	b.n	8006604 <GetHead+0x78>
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 8006786:	4b52      	ldr	r3, [pc, #328]	; (80068d0 <GetHead+0x344>)
 8006788:	469a      	mov	sl, r3
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	d000      	beq.n	8006792 <GetHead+0x206>
 8006790:	e726      	b.n	80065e0 <GetHead+0x54>
 8006792:	2a00      	cmp	r2, #0
 8006794:	d000      	beq.n	8006798 <GetHead+0x20c>
 8006796:	e723      	b.n	80065e0 <GetHead+0x54>
 8006798:	2301      	movs	r3, #1
 800679a:	4652      	mov	r2, sl
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	3b02      	subs	r3, #2
 80067a0:	6033      	str	r3, [r6, #0]
 80067a2:	e71d      	b.n	80065e0 <GetHead+0x54>
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 80067a4:	2301      	movs	r3, #1
 80067a6:	4642      	mov	r2, r8
 80067a8:	4c50      	ldr	r4, [pc, #320]	; (80068ec <GetHead+0x360>)
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	3b02      	subs	r3, #2
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	e746      	b.n	8006640 <GetHead+0xb4>
		strcat(Head,AlartStr_HistoryPVTData);
 80067b2:	495c      	ldr	r1, [pc, #368]	; (8006924 <GetHead+0x398>)
 80067b4:	9800      	ldr	r0, [sp, #0]
 80067b6:	f008 f9ab 	bl	800eb10 <stpcpy>
			strcat(Head,PacketStatusStrHist);
 80067ba:	2203      	movs	r2, #3
 80067bc:	495a      	ldr	r1, [pc, #360]	; (8006928 <GetHead+0x39c>)
 80067be:	f008 fab3 	bl	800ed28 <memcpy>
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 80067c2:	4b5a      	ldr	r3, [pc, #360]	; (800692c <GetHead+0x3a0>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	dd01      	ble.n	80067ce <GetHead+0x242>
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
}
 80067ce:	b005      	add	sp, #20
 80067d0:	bcf0      	pop	{r4, r5, r6, r7}
 80067d2:	46bb      	mov	fp, r7
 80067d4:	46b2      	mov	sl, r6
 80067d6:	46a9      	mov	r9, r5
 80067d8:	46a0      	mov	r8, r4
 80067da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(Head,AlartStr_OverSpeed);
 80067dc:	4954      	ldr	r1, [pc, #336]	; (8006930 <GetHead+0x3a4>)
 80067de:	9800      	ldr	r0, [sp, #0]
 80067e0:	f008 fa8f 	bl	800ed02 <strcpy>
		strcat(Head,PacketStatusStrLive);
 80067e4:	0028      	movs	r0, r5
 80067e6:	4953      	ldr	r1, [pc, #332]	; (8006934 <GetHead+0x3a8>)
 80067e8:	f008 f8d4 	bl	800e994 <strcat>
 80067ec:	e7e9      	b.n	80067c2 <GetHead+0x236>
		strcat(Head,AlartStr_EmergencyWireBreak);
 80067ee:	4952      	ldr	r1, [pc, #328]	; (8006938 <GetHead+0x3ac>)
 80067f0:	9800      	ldr	r0, [sp, #0]
 80067f2:	f008 fa86 	bl	800ed02 <strcpy>
		EmergencyWireBreak=0;
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	9a02      	ldr	r2, [sp, #8]
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e7f2      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_HarshAcceleration);
 80067fe:	494f      	ldr	r1, [pc, #316]	; (800693c <GetHead+0x3b0>)
 8006800:	9800      	ldr	r0, [sp, #0]
 8006802:	f008 fa7e 	bl	800ed02 <strcpy>
 8006806:	e7ed      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_HarshBreaking);
 8006808:	494d      	ldr	r1, [pc, #308]	; (8006940 <GetHead+0x3b4>)
 800680a:	9800      	ldr	r0, [sp, #0]
 800680c:	f008 fa79 	bl	800ed02 <strcpy>
 8006810:	e7e8      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedON);
 8006812:	494c      	ldr	r1, [pc, #304]	; (8006944 <GetHead+0x3b8>)
 8006814:	9800      	ldr	r0, [sp, #0]
 8006816:	f008 fa74 	bl	800ed02 <strcpy>
		IgnitionTurnedON=0;
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	e7e1      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_RashTurning);
 8006820:	4949      	ldr	r1, [pc, #292]	; (8006948 <GetHead+0x3bc>)
 8006822:	9800      	ldr	r0, [sp, #0]
 8006824:	f008 fa6d 	bl	800ed02 <strcpy>
 8006828:	e7dc      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateON);
 800682a:	4948      	ldr	r1, [pc, #288]	; (800694c <GetHead+0x3c0>)
 800682c:	9800      	ldr	r0, [sp, #0]
 800682e:	f008 fa68 	bl	800ed02 <strcpy>
 8006832:	e7d7      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateOFF);
 8006834:	4946      	ldr	r1, [pc, #280]	; (8006950 <GetHead+0x3c4>)
 8006836:	9800      	ldr	r0, [sp, #0]
 8006838:	f008 fa63 	bl	800ed02 <strcpy>
 800683c:	e7d2      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 800683e:	4945      	ldr	r1, [pc, #276]	; (8006954 <GetHead+0x3c8>)
 8006840:	9800      	ldr	r0, [sp, #0]
 8006842:	f008 fa5e 	bl	800ed02 <strcpy>
		IgnitionTurnedOFF=0;
 8006846:	2300      	movs	r3, #0
 8006848:	465a      	mov	r2, fp
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	e7ca      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatterLow);
 800684e:	4942      	ldr	r1, [pc, #264]	; (8006958 <GetHead+0x3cc>)
 8006850:	9800      	ldr	r0, [sp, #0]
 8006852:	f008 fa56 	bl	800ed02 <strcpy>
		InternalBatterLow=0;
 8006856:	2300      	movs	r3, #0
 8006858:	4642      	mov	r2, r8
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	e7c2      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_BoxTemper);
 800685e:	493f      	ldr	r1, [pc, #252]	; (800695c <GetHead+0x3d0>)
 8006860:	9800      	ldr	r0, [sp, #0]
 8006862:	f008 fa4e 	bl	800ed02 <strcpy>
 8006866:	e7bd      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 8006868:	493d      	ldr	r1, [pc, #244]	; (8006960 <GetHead+0x3d4>)
 800686a:	9800      	ldr	r0, [sp, #0]
 800686c:	f008 fa49 	bl	800ed02 <strcpy>
		InternalBatteryChargedAgain=0;
 8006870:	2300      	movs	r3, #0
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	e7b6      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 8006876:	493b      	ldr	r1, [pc, #236]	; (8006964 <GetHead+0x3d8>)
 8006878:	9800      	ldr	r0, [sp, #0]
 800687a:	f008 fa42 	bl	800ed02 <strcpy>
		MainBatteryDisconnect=0;
 800687e:	2300      	movs	r3, #0
 8006880:	464a      	mov	r2, r9
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e7ae      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryReconnect);
 8006886:	4938      	ldr	r1, [pc, #224]	; (8006968 <GetHead+0x3dc>)
 8006888:	9800      	ldr	r0, [sp, #0]
 800688a:	f008 fa3a 	bl	800ed02 <strcpy>
		MainBatteryReconnect=0;
 800688e:	2300      	movs	r3, #0
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	e7a7      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_HistoryPVTData);
 8006894:	4923      	ldr	r1, [pc, #140]	; (8006924 <GetHead+0x398>)
 8006896:	9800      	ldr	r0, [sp, #0]
 8006898:	f008 fa33 	bl	800ed02 <strcpy>
		HistoryPVTData=0;
 800689c:	2300      	movs	r3, #0
 800689e:	6033      	str	r3, [r6, #0]
 80068a0:	e7a0      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_HealthPacket);
 80068a2:	4932      	ldr	r1, [pc, #200]	; (800696c <GetHead+0x3e0>)
 80068a4:	9800      	ldr	r0, [sp, #0]
 80068a6:	f008 fa2c 	bl	800ed02 <strcpy>
		HealthPacket=0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	e799      	b.n	80067e4 <GetHead+0x258>
		strcat(Head,AlartStr_NormalPkt);
 80068b0:	492f      	ldr	r1, [pc, #188]	; (8006970 <GetHead+0x3e4>)
 80068b2:	9800      	ldr	r0, [sp, #0]
 80068b4:	f008 fa25 	bl	800ed02 <strcpy>
 80068b8:	e794      	b.n	80067e4 <GetHead+0x258>
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	20001d88 	.word	0x20001d88
 80068c0:	200000a0 	.word	0x200000a0
 80068c4:	200000b8 	.word	0x200000b8
 80068c8:	20003ef0 	.word	0x20003ef0
 80068cc:	20000098 	.word	0x20000098
 80068d0:	20000638 	.word	0x20000638
 80068d4:	20001e64 	.word	0x20001e64
 80068d8:	20001e30 	.word	0x20001e30
 80068dc:	20001e2c 	.word	0x20001e2c
 80068e0:	20001e28 	.word	0x20001e28
 80068e4:	40400000 	.word	0x40400000
 80068e8:	20001e34 	.word	0x20001e34
 80068ec:	20001e38 	.word	0x20001e38
 80068f0:	20001e78 	.word	0x20001e78
 80068f4:	20001e7c 	.word	0x20001e7c
 80068f8:	20001d0c 	.word	0x20001d0c
 80068fc:	41200000 	.word	0x41200000
 8006900:	200000b0 	.word	0x200000b0
 8006904:	20000674 	.word	0x20000674
 8006908:	2000063c 	.word	0x2000063c
 800690c:	20000350 	.word	0x20000350
 8006910:	20000090 	.word	0x20000090
 8006914:	20001df0 	.word	0x20001df0
 8006918:	20001dec 	.word	0x20001dec
 800691c:	20001e80 	.word	0x20001e80
 8006920:	20000078 	.word	0x20000078
 8006924:	20000038 	.word	0x20000038
 8006928:	080135bc 	.word	0x080135bc
 800692c:	20000354 	.word	0x20000354
 8006930:	20000080 	.word	0x20000080
 8006934:	200000ac 	.word	0x200000ac
 8006938:	20000018 	.word	0x20000018
 800693c:	20000020 	.word	0x20000020
 8006940:	20000028 	.word	0x20000028
 8006944:	20000048 	.word	0x20000048
 8006948:	20000088 	.word	0x20000088
 800694c:	20000010 	.word	0x20000010
 8006950:	20000008 	.word	0x20000008
 8006954:	20000040 	.word	0x20000040
 8006958:	20000050 	.word	0x20000050
 800695c:	20000000 	.word	0x20000000
 8006960:	20000058 	.word	0x20000058
 8006964:	20000060 	.word	0x20000060
 8006968:	20000068 	.word	0x20000068
 800696c:	20000030 	.word	0x20000030
 8006970:	20000070 	.word	0x20000070

08006974 <TestRun>:
void TestRun(){
 8006974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006976:	46de      	mov	lr, fp
 8006978:	4657      	mov	r7, sl
 800697a:	464e      	mov	r6, r9
 800697c:	4645      	mov	r5, r8
 800697e:	b5e0      	push	{r5, r6, r7, lr}
	if(errorlen>10){
 8006980:	4beb      	ldr	r3, [pc, #940]	; (8006d30 <TestRun+0x3bc>)
void TestRun(){
 8006982:	b09d      	sub	sp, #116	; 0x74
	if(errorlen>10){
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b0a      	cmp	r3, #10
 8006988:	dd00      	ble.n	800698c <TestRun+0x18>
 800698a:	e36c      	b.n	8007066 <TestRun+0x6f2>
	printInt(seqNo);
 800698c:	4be9      	ldr	r3, [pc, #932]	; (8006d34 <TestRun+0x3c0>)
	memset(printBuf,0,50);
 800698e:	4cea      	ldr	r4, [pc, #936]	; (8006d38 <TestRun+0x3c4>)
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	2232      	movs	r2, #50	; 0x32
 8006994:	2100      	movs	r1, #0
 8006996:	0020      	movs	r0, r4
 8006998:	9317      	str	r3, [sp, #92]	; 0x5c
 800699a:	f007 fff3 	bl	800e984 <memset>
	snprintf(printBuf, 6, "%d", x);
 800699e:	002b      	movs	r3, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80069a0:	250c      	movs	r5, #12
 80069a2:	2106      	movs	r1, #6
 80069a4:	4ae5      	ldr	r2, [pc, #916]	; (8006d3c <TestRun+0x3c8>)
 80069a6:	0020      	movs	r0, r4
 80069a8:	f007 ff4c 	bl	800e844 <sniprintf>
 80069ac:	4ee4      	ldr	r6, [pc, #912]	; (8006d40 <TestRun+0x3cc>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80069ae:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	9619      	str	r6, [sp, #100]	; 0x64
 80069b4:	621d      	str	r5, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80069b6:	f7f9 fba7 	bl	8000108 <strlen>
 80069ba:	0021      	movs	r1, r4
 80069bc:	b282      	uxth	r2, r0
 80069be:	4be1      	ldr	r3, [pc, #900]	; (8006d44 <TestRun+0x3d0>)
 80069c0:	0030      	movs	r0, r6
 80069c2:	f004 f90b 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80069c6:	4be0      	ldr	r3, [pc, #896]	; (8006d48 <TestRun+0x3d4>)
 80069c8:	ac1b      	add	r4, sp, #108	; 0x6c
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80069ca:	2202      	movs	r2, #2
 80069cc:	0021      	movs	r1, r4
 80069ce:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 80069d0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80069d2:	230a      	movs	r3, #10
 80069d4:	f004 f902 	bl	800abdc <HAL_UART_Transmit>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80069d8:	2180      	movs	r1, #128	; 0x80
 80069da:	48dc      	ldr	r0, [pc, #880]	; (8006d4c <TestRun+0x3d8>)
 80069dc:	0189      	lsls	r1, r1, #6
 80069de:	f001 fecb 	bl	8008778 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80069e2:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 80069e4:	4bda      	ldr	r3, [pc, #872]	; (8006d50 <TestRun+0x3dc>)
 80069e6:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 80069e8:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80069ea:	48d8      	ldr	r0, [pc, #864]	; (8006d4c <TestRun+0x3d8>)
 80069ec:	f001 fec4 	bl	8008778 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80069f0:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 80069f2:	4bd8      	ldr	r3, [pc, #864]	; (8006d54 <TestRun+0x3e0>)
 80069f4:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 80069f6:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 80069f8:	48d4      	ldr	r0, [pc, #848]	; (8006d4c <TestRun+0x3d8>)
 80069fa:	f001 febd 	bl	8008778 <HAL_GPIO_ReadPin>
		else box='C';
 80069fe:	3801      	subs	r0, #1
 8006a00:	4243      	negs	r3, r0
 8006a02:	4158      	adcs	r0, r3
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006a04:	2180      	movs	r1, #128	; 0x80
		else box='C';
 8006a06:	4243      	negs	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006a08:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 8006a0a:	4ad3      	ldr	r2, [pc, #844]	; (8006d58 <TestRun+0x3e4>)
		else box='C';
 8006a0c:	402b      	ands	r3, r5
 8006a0e:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006a10:	0049      	lsls	r1, r1, #1
 8006a12:	05c0      	lsls	r0, r0, #23
 8006a14:	7013      	strb	r3, [r2, #0]
 8006a16:	f001 feaf 	bl	8008778 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 8006a1a:	4bd0      	ldr	r3, [pc, #832]	; (8006d5c <TestRun+0x3e8>)
	return (ADCvalue[2]*VSENSE*16);
 8006a1c:	4fd0      	ldr	r7, [pc, #832]	; (8006d60 <TestRun+0x3ec>)
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8006a1e:	6018      	str	r0, [r3, #0]
	return (ADCvalue[2]*VSENSE*16);
 8006a20:	4bd0      	ldr	r3, [pc, #832]	; (8006d64 <TestRun+0x3f0>)
 8006a22:	68b8      	ldr	r0, [r7, #8]
 8006a24:	681e      	ldr	r6, [r3, #0]
 8006a26:	f7fa fcb3 	bl	8001390 <__aeabi_ui2f>
 8006a2a:	1c31      	adds	r1, r6, #0
 8006a2c:	f7fa f950 	bl	8000cd0 <__aeabi_fmul>
 8006a30:	2183      	movs	r1, #131	; 0x83
 8006a32:	05c9      	lsls	r1, r1, #23
 8006a34:	f7fa f94c 	bl	8000cd0 <__aeabi_fmul>
	EXT_B=Read_EXT_B_SENSE();
 8006a38:	4bcb      	ldr	r3, [pc, #812]	; (8006d68 <TestRun+0x3f4>)
 8006a3a:	1c05      	adds	r5, r0, #0
 8006a3c:	6018      	str	r0, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 8006a3e:	4bcb      	ldr	r3, [pc, #812]	; (8006d6c <TestRun+0x3f8>)
	return (ADCvalue[3]*VSENSE*2);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	4698      	mov	r8, r3
 8006a44:	f7fa fca4 	bl	8001390 <__aeabi_ui2f>
 8006a48:	1c31      	adds	r1, r6, #0
 8006a4a:	f7fa f941 	bl	8000cd0 <__aeabi_fmul>
 8006a4e:	1c01      	adds	r1, r0, #0
 8006a50:	f7f9 fdd4 	bl	80005fc <__aeabi_fadd>
 8006a54:	4643      	mov	r3, r8
 8006a56:	6018      	str	r0, [r3, #0]
	adc[0]=Read_ADC1();
 8006a58:	4bc5      	ldr	r3, [pc, #788]	; (8006d70 <TestRun+0x3fc>)
	float val=(float)ADCvalue[0];
 8006a5a:	6838      	ldr	r0, [r7, #0]
 8006a5c:	4698      	mov	r8, r3
 8006a5e:	f7fa fc97 	bl	8001390 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 8006a62:	1c31      	adds	r1, r6, #0
 8006a64:	f7fa f934 	bl	8000cd0 <__aeabi_fmul>
 8006a68:	49c2      	ldr	r1, [pc, #776]	; (8006d74 <TestRun+0x400>)
 8006a6a:	f7fa f931 	bl	8000cd0 <__aeabi_fmul>
 8006a6e:	4643      	mov	r3, r8
 8006a70:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fa fc8c 	bl	8001390 <__aeabi_ui2f>
 8006a78:	1c31      	adds	r1, r6, #0
 8006a7a:	f7fa f929 	bl	8000cd0 <__aeabi_fmul>
 8006a7e:	49bd      	ldr	r1, [pc, #756]	; (8006d74 <TestRun+0x400>)
 8006a80:	f7fa f926 	bl	8000cd0 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 8006a84:	4643      	mov	r3, r8
	if(EXT_B>7){
 8006a86:	49bc      	ldr	r1, [pc, #752]	; (8006d78 <TestRun+0x404>)
	adc[1]=Read_ADC2();
 8006a88:	6058      	str	r0, [r3, #4]
	if(EXT_B>7){
 8006a8a:	1c28      	adds	r0, r5, #0
 8006a8c:	f7f9 fd32 	bl	80004f4 <__aeabi_fcmpgt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d000      	beq.n	8006a96 <TestRun+0x122>
 8006a94:	e2a4      	b.n	8006fe0 <TestRun+0x66c>
static void SET_LED_PWR(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
 8006a96:	2200      	movs	r2, #0
 8006a98:	2101      	movs	r1, #1
 8006a9a:	48b8      	ldr	r0, [pc, #736]	; (8006d7c <TestRun+0x408>)
 8006a9c:	f001 fe72 	bl	8008784 <HAL_GPIO_WritePin>
memset(INSMSno,0,30);
 8006aa0:	4bb7      	ldr	r3, [pc, #732]	; (8006d80 <TestRun+0x40c>)
 8006aa2:	221e      	movs	r2, #30
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	469b      	mov	fp, r3
 8006aaa:	f007 ff6b 	bl	800e984 <memset>
memset(OUTSMSno,0,30);
 8006aae:	4bb5      	ldr	r3, [pc, #724]	; (8006d84 <TestRun+0x410>)
 8006ab0:	221e      	movs	r2, #30
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	469a      	mov	sl, r3
 8006ab8:	f007 ff64 	bl	800e984 <memset>
memset(EmgIP,0,50);
 8006abc:	4bb2      	ldr	r3, [pc, #712]	; (8006d88 <TestRun+0x414>)
 8006abe:	2232      	movs	r2, #50	; 0x32
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	f007 ff5d 	bl	800e984 <memset>
memset(RegIP,0,50);
 8006aca:	4bb0      	ldr	r3, [pc, #704]	; (8006d8c <TestRun+0x418>)
 8006acc:	2232      	movs	r2, #50	; 0x32
 8006ace:	0018      	movs	r0, r3
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4698      	mov	r8, r3
 8006ad4:	f007 ff56 	bl	800e984 <memset>
memset(TracIP,0,50);
 8006ad8:	4fad      	ldr	r7, [pc, #692]	; (8006d90 <TestRun+0x41c>)
 8006ada:	2232      	movs	r2, #50	; 0x32
 8006adc:	2100      	movs	r1, #0
 8006ade:	0038      	movs	r0, r7
 8006ae0:	f007 ff50 	bl	800e984 <memset>

char* readINSMSno(){
	uint8_t add4[]={0x00, 0x00,0x00};
 8006ae4:	4eab      	ldr	r6, [pc, #684]	; (8006d94 <TestRun+0x420>)
	add4[2]=RegNoLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006ae6:	4dac      	ldr	r5, [pc, #688]	; (8006d98 <TestRun+0x424>)
	uint8_t add4[]={0x00, 0x00,0x00};
 8006ae8:	8833      	ldrh	r3, [r6, #0]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006aea:	2264      	movs	r2, #100	; 0x64
	uint8_t add4[]={0x00, 0x00,0x00};
 8006aec:	8023      	strh	r3, [r4, #0]
	add4[2]=RegNoLen;
 8006aee:	2310      	movs	r3, #16
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006af0:	0029      	movs	r1, r5
	add4[2]=RegNoLen;
 8006af2:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8006af4:	0020      	movs	r0, r4
 8006af6:	f7fe fb67 	bl	80051c8 <SPI_flash_Read_Data>
strcpy(INSMSno,readINSMSno());
 8006afa:	0029      	movs	r1, r5
 8006afc:	4658      	mov	r0, fp
 8006afe:	f008 f900 	bl	800ed02 <strcpy>
	return (char*) dataR;
}

char* readOUTSMSno(){

	uint8_t  add4[]={0x00, 0x00,0x00};
 8006b02:	8833      	ldrh	r3, [r6, #0]
	add4[2]=RegNoLen+INSMSLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006b04:	223c      	movs	r2, #60	; 0x3c
	uint8_t  add4[]={0x00, 0x00,0x00};
 8006b06:	8023      	strh	r3, [r4, #0]
	add4[2]=RegNoLen+INSMSLen;
 8006b08:	2374      	movs	r3, #116	; 0x74
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006b0a:	0029      	movs	r1, r5
	add4[2]=RegNoLen+INSMSLen;
 8006b0c:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8006b0e:	0020      	movs	r0, r4
 8006b10:	f7fe fb5a 	bl	80051c8 <SPI_flash_Read_Data>
strcpy(OUTSMSno,readOUTSMSno());
 8006b14:	0029      	movs	r1, r5
 8006b16:	4650      	mov	r0, sl
 8006b18:	f008 f8f3 	bl	800ed02 <strcpy>
	return (char*) dataR;
}

char* readEmgIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006b1c:	88b3      	ldrh	r3, [r6, #4]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006b1e:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006b20:	8023      	strh	r3, [r4, #0]
 8006b22:	79b3      	ldrb	r3, [r6, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006b24:	0029      	movs	r1, r5
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006b26:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8006b28:	0020      	movs	r0, r4
 8006b2a:	f7fe fb4d 	bl	80051c8 <SPI_flash_Read_Data>
strcpy(EmgIP,readEmgIP());
 8006b2e:	0029      	movs	r1, r5
 8006b30:	4648      	mov	r0, r9
 8006b32:	f008 f8e6 	bl	800ed02 <strcpy>
	return (char*) dataR;
}

char* readRegIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006b36:	88b3      	ldrh	r3, [r6, #4]
	add4[2]=EmgIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006b38:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006b3a:	8023      	strh	r3, [r4, #0]
	add4[2]=EmgIPLen;
 8006b3c:	2328      	movs	r3, #40	; 0x28
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006b3e:	0029      	movs	r1, r5
	add4[2]=EmgIPLen;
 8006b40:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8006b42:	0020      	movs	r0, r4
 8006b44:	f7fe fb40 	bl	80051c8 <SPI_flash_Read_Data>
strcpy(RegIP,readRegIP());
 8006b48:	0029      	movs	r1, r5
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f008 f8d9 	bl	800ed02 <strcpy>
	return (char*) dataR;
}

char* readTracIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006b50:	88b3      	ldrh	r3, [r6, #4]
	add4[2]=EmgIPLen+RegIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006b52:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8006b54:	8023      	strh	r3, [r4, #0]
	add4[2]=EmgIPLen+RegIPLen;
 8006b56:	2350      	movs	r3, #80	; 0x50
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006b58:	0029      	movs	r1, r5
	add4[2]=EmgIPLen+RegIPLen;
 8006b5a:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8006b5c:	0020      	movs	r0, r4
 8006b5e:	f7fe fb33 	bl	80051c8 <SPI_flash_Read_Data>
strcpy(TracIP,readTracIP());
 8006b62:	0029      	movs	r1, r5
 8006b64:	0038      	movs	r0, r7
 8006b66:	f008 f8cc 	bl	800ed02 <strcpy>
memset(simop,0,25);
 8006b6a:	4b8c      	ldr	r3, [pc, #560]	; (8006d9c <TestRun+0x428>)
 8006b6c:	2219      	movs	r2, #25
 8006b6e:	2100      	movs	r1, #0
 8006b70:	0018      	movs	r0, r3
 8006b72:	001d      	movs	r5, r3
 8006b74:	9316      	str	r3, [sp, #88]	; 0x58
 8006b76:	f007 ff05 	bl	800e984 <memset>
	SendGSMCode("  AT+COPS?");
 8006b7a:	4889      	ldr	r0, [pc, #548]	; (8006da0 <TestRun+0x42c>)
 8006b7c:	f7fc fc72 	bl	8003464 <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8006b80:	4a88      	ldr	r2, [pc, #544]	; (8006da4 <TestRun+0x430>)
 8006b82:	4b89      	ldr	r3, [pc, #548]	; (8006da8 <TestRun+0x434>)
 8006b84:	9202      	str	r2, [sp, #8]
 8006b86:	4a6f      	ldr	r2, [pc, #444]	; (8006d44 <TestRun+0x3d0>)
 8006b88:	4988      	ldr	r1, [pc, #544]	; (8006dac <TestRun+0x438>)
 8006b8a:	9201      	str	r2, [sp, #4]
 8006b8c:	4a88      	ldr	r2, [pc, #544]	; (8006db0 <TestRun+0x43c>)
 8006b8e:	2000      	movs	r0, #0
 8006b90:	9200      	str	r2, [sp, #0]
 8006b92:	220c      	movs	r2, #12
 8006b94:	f7fc fdf2 	bl	800377c <GetGSMReply>
 8006b98:	0001      	movs	r1, r0
strcpy(simop, GSMSimOperator());
 8006b9a:	0028      	movs	r0, r5
 8006b9c:	f008 f8b1 	bl	800ed02 <strcpy>
	return HAL_GetTick();
 8006ba0:	f000 ff22 	bl	80079e8 <HAL_GetTick>
	GSMCellInfo();
 8006ba4:	f7fd fae2 	bl	800416c <GSMCellInfo>
	GetHead();
 8006ba8:	f7ff fcf0 	bl	800658c <GetHead>
	if (GPSInfo.fix>0)v='A';
 8006bac:	4b81      	ldr	r3, [pc, #516]	; (8006db4 <TestRun+0x440>)
 8006bae:	2656      	movs	r6, #86	; 0x56
 8006bb0:	4698      	mov	r8, r3
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dd00      	ble.n	8006bba <TestRun+0x246>
 8006bb8:	3e15      	subs	r6, #21
	sprintf(gpsDataRet2, "%s,%s,%c,%0.6f,%1s,%0.6f,%1s,%0.1f,%0.1f,%0.1f,G",GPSInfo.date,GPSInfo.time,v,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.alt,GPSInfo.speed,GPSInfo.head);
 8006bba:	232e      	movs	r3, #46	; 0x2e
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	4443      	add	r3, r8
 8006bc0:	4699      	mov	r9, r3
 8006bc2:	4b7d      	ldr	r3, [pc, #500]	; (8006db8 <TestRun+0x444>)
 8006bc4:	6950      	ldr	r0, [r2, #20]
 8006bc6:	9311      	str	r3, [sp, #68]	; 0x44
 8006bc8:	f7fc fa72 	bl	80030b0 <__aeabi_f2d>
 8006bcc:	4642      	mov	r2, r8
 8006bce:	900e      	str	r0, [sp, #56]	; 0x38
 8006bd0:	910f      	str	r1, [sp, #60]	; 0x3c
 8006bd2:	6990      	ldr	r0, [r2, #24]
 8006bd4:	f7fc fa6c 	bl	80030b0 <__aeabi_f2d>
 8006bd8:	4642      	mov	r2, r8
 8006bda:	900c      	str	r0, [sp, #48]	; 0x30
 8006bdc:	910d      	str	r1, [sp, #52]	; 0x34
 8006bde:	6890      	ldr	r0, [r2, #8]
 8006be0:	f7fc fa66 	bl	80030b0 <__aeabi_f2d>
 8006be4:	4643      	mov	r3, r8
 8006be6:	4642      	mov	r2, r8
 8006be8:	900a      	str	r0, [sp, #40]	; 0x28
 8006bea:	910b      	str	r1, [sp, #44]	; 0x2c
 8006bec:	332b      	adds	r3, #43	; 0x2b
 8006bee:	9308      	str	r3, [sp, #32]
 8006bf0:	6850      	ldr	r0, [r2, #4]
 8006bf2:	f7fc fa5d 	bl	80030b0 <__aeabi_f2d>
 8006bf6:	4643      	mov	r3, r8
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	9006      	str	r0, [sp, #24]
 8006bfc:	9107      	str	r1, [sp, #28]
 8006bfe:	3328      	adds	r3, #40	; 0x28
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	6810      	ldr	r0, [r2, #0]
 8006c04:	4647      	mov	r7, r8
 8006c06:	f7fc fa53 	bl	80030b0 <__aeabi_f2d>
 8006c0a:	4d6c      	ldr	r5, [pc, #432]	; (8006dbc <TestRun+0x448>)
 8006c0c:	9600      	str	r6, [sp, #0]
 8006c0e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8006c10:	373d      	adds	r7, #61	; 0x3d
 8006c12:	003a      	movs	r2, r7
 8006c14:	9002      	str	r0, [sp, #8]
 8006c16:	9103      	str	r1, [sp, #12]
 8006c18:	464b      	mov	r3, r9
 8006c1a:	0029      	movs	r1, r5
 8006c1c:	0030      	movs	r0, r6
 8006c1e:	f007 fe45 	bl	800e8ac <siprintf>
	memset(DataString_em1,0,150);
 8006c22:	4b67      	ldr	r3, [pc, #412]	; (8006dc0 <TestRun+0x44c>)
 8006c24:	2296      	movs	r2, #150	; 0x96
 8006c26:	469b      	mov	fp, r3
 8006c28:	2100      	movs	r1, #0
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f007 feaa 	bl	800e984 <memset>
	strcat(DataString_em1,"$,EPB,EMR,");
 8006c30:	4658      	mov	r0, fp
 8006c32:	f7f9 fa69 	bl	8000108 <strlen>
 8006c36:	465b      	mov	r3, fp
 8006c38:	0005      	movs	r5, r0
 8006c3a:	1818      	adds	r0, r3, r0
 8006c3c:	4b61      	ldr	r3, [pc, #388]	; (8006dc4 <TestRun+0x450>)
 8006c3e:	220a      	movs	r2, #10
 8006c40:	0019      	movs	r1, r3
 8006c42:	350a      	adds	r5, #10
 8006c44:	9318      	str	r3, [sp, #96]	; 0x60
 8006c46:	f008 f86f 	bl	800ed28 <memcpy>
 8006c4a:	0028      	movs	r0, r5
	strcat(DataString_em1,IMEI);strcat(DataString_em1,",NM,");
 8006c4c:	4b5e      	ldr	r3, [pc, #376]	; (8006dc8 <TestRun+0x454>)
 8006c4e:	4458      	add	r0, fp
 8006c50:	0019      	movs	r1, r3
 8006c52:	9312      	str	r3, [sp, #72]	; 0x48
 8006c54:	f007 ff5c 	bl	800eb10 <stpcpy>
 8006c58:	0005      	movs	r5, r0
 8006c5a:	4f5c      	ldr	r7, [pc, #368]	; (8006dcc <TestRun+0x458>)
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	0039      	movs	r1, r7
 8006c60:	f008 f862 	bl	800ed28 <memcpy>
	strcat(DataString_em1,gpsDataRet2);strcat(DataString_em1,",");
 8006c64:	0031      	movs	r1, r6
 8006c66:	1d28      	adds	r0, r5, #4
 8006c68:	f007 ff52 	bl	800eb10 <stpcpy>
 8006c6c:	232c      	movs	r3, #44	; 0x2c
	strcat(DataString_em1,Regno);strcat(DataString_em1,",0000000000,");
 8006c6e:	4958      	ldr	r1, [pc, #352]	; (8006dd0 <TestRun+0x45c>)
	strcat(DataString_em1,gpsDataRet2);strcat(DataString_em1,",");
 8006c70:	7003      	strb	r3, [r0, #0]
	strcat(DataString_em1,Regno);strcat(DataString_em1,",0000000000,");
 8006c72:	3001      	adds	r0, #1
 8006c74:	9113      	str	r1, [sp, #76]	; 0x4c
 8006c76:	f007 ff4b 	bl	800eb10 <stpcpy>
 8006c7a:	4e56      	ldr	r6, [pc, #344]	; (8006dd4 <TestRun+0x460>)
 8006c7c:	220d      	movs	r2, #13
 8006c7e:	0031      	movs	r1, r6
 8006c80:	f008 f852 	bl	800ed28 <memcpy>
    while (*s)
 8006c84:	465b      	mov	r3, fp
 8006c86:	781b      	ldrb	r3, [r3, #0]
    int c = 0;
 8006c88:	2200      	movs	r2, #0
    while (*s)
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <TestRun+0x326>
 8006c8e:	4659      	mov	r1, fp
        c ^= *s++;
 8006c90:	3101      	adds	r1, #1
 8006c92:	405a      	eors	r2, r3
    while (*s)
 8006c94:	780b      	ldrb	r3, [r1, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1fa      	bne.n	8006c90 <TestRun+0x31c>
	sprintf(checksum, "%02x",nmea0183_checksum(DataString_em1));
 8006c9a:	4b4f      	ldr	r3, [pc, #316]	; (8006dd8 <TestRun+0x464>)
 8006c9c:	494f      	ldr	r1, [pc, #316]	; (8006ddc <TestRun+0x468>)
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	4699      	mov	r9, r3
 8006ca2:	9114      	str	r1, [sp, #80]	; 0x50
 8006ca4:	f007 fe02 	bl	800e8ac <siprintf>
	strcat(DataString_em1,checksum);
 8006ca8:	4658      	mov	r0, fp
 8006caa:	f7f9 fa2d 	bl	8000108 <strlen>
 8006cae:	4649      	mov	r1, r9
 8006cb0:	4458      	add	r0, fp
 8006cb2:	f007 ff2d 	bl	800eb10 <stpcpy>
	strcat(DataString_em1,",*\0");
 8006cb6:	4b4a      	ldr	r3, [pc, #296]	; (8006de0 <TestRun+0x46c>)
 8006cb8:	2203      	movs	r2, #3
 8006cba:	0019      	movs	r1, r3
 8006cbc:	3134      	adds	r1, #52	; 0x34
 8006cbe:	9315      	str	r3, [sp, #84]	; 0x54
 8006cc0:	f008 f832 	bl	800ed28 <memcpy>
	memset(DataString_em2,0,150);
 8006cc4:	4b47      	ldr	r3, [pc, #284]	; (8006de4 <TestRun+0x470>)
 8006cc6:	2296      	movs	r2, #150	; 0x96
 8006cc8:	469a      	mov	sl, r3
 8006cca:	2100      	movs	r1, #0
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f007 fe59 	bl	800e984 <memset>
	strcat(DataString_em2,"$,EPB,EMR,");
 8006cd2:	4650      	mov	r0, sl
 8006cd4:	f7f9 fa18 	bl	8000108 <strlen>
 8006cd8:	4653      	mov	r3, sl
 8006cda:	0005      	movs	r5, r0
 8006cdc:	220a      	movs	r2, #10
 8006cde:	1818      	adds	r0, r3, r0
 8006ce0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ce2:	f008 f821 	bl	800ed28 <memcpy>
 8006ce6:	0028      	movs	r0, r5
 8006ce8:	300a      	adds	r0, #10
	strcat(DataString_em2,IMEI);strcat(DataString_em2,",NM,");
 8006cea:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006cec:	4450      	add	r0, sl
 8006cee:	f007 ff0f 	bl	800eb10 <stpcpy>
 8006cf2:	0005      	movs	r5, r0
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	0039      	movs	r1, r7
 8006cf8:	f008 f816 	bl	800ed28 <memcpy>
	strcat(DataString_em2,gpsDataRet2);strcat(DataString_em2,",");
 8006cfc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006cfe:	1d28      	adds	r0, r5, #4
 8006d00:	f007 ff06 	bl	800eb10 <stpcpy>
 8006d04:	232c      	movs	r3, #44	; 0x2c
	strcat(DataString_em2,Regno);strcat(DataString_em2,",0000000000,");
 8006d06:	9913      	ldr	r1, [sp, #76]	; 0x4c
	strcat(DataString_em2,gpsDataRet2);strcat(DataString_em2,",");
 8006d08:	7003      	strb	r3, [r0, #0]
	strcat(DataString_em2,Regno);strcat(DataString_em2,",0000000000,");
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f007 ff00 	bl	800eb10 <stpcpy>
 8006d10:	220d      	movs	r2, #13
 8006d12:	0031      	movs	r1, r6
 8006d14:	f008 f808 	bl	800ed28 <memcpy>
 8006d18:	4653      	mov	r3, sl
 8006d1a:	781b      	ldrb	r3, [r3, #0]
    int c = 0;
 8006d1c:	2200      	movs	r2, #0
    while (*s)
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d062      	beq.n	8006de8 <TestRun+0x474>
 8006d22:	4651      	mov	r1, sl
        c ^= *s++;
 8006d24:	3101      	adds	r1, #1
 8006d26:	405a      	eors	r2, r3
    while (*s)
 8006d28:	780b      	ldrb	r3, [r1, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1fa      	bne.n	8006d24 <TestRun+0x3b0>
 8006d2e:	e05b      	b.n	8006de8 <TestRun+0x474>
 8006d30:	200040d8 	.word	0x200040d8
 8006d34:	20004a78 	.word	0x20004a78
 8006d38:	20004a44 	.word	0x20004a44
 8006d3c:	08012910 	.word	0x08012910
 8006d40:	200049ac 	.word	0x200049ac
 8006d44:	00001388 	.word	0x00001388
 8006d48:	00000a0d 	.word	0x00000a0d
 8006d4c:	50000400 	.word	0x50000400
 8006d50:	20001e64 	.word	0x20001e64
 8006d54:	2000033c 	.word	0x2000033c
 8006d58:	20000090 	.word	0x20000090
 8006d5c:	20003ef0 	.word	0x20003ef0
 8006d60:	20000340 	.word	0x20000340
 8006d64:	200000b4 	.word	0x200000b4
 8006d68:	20000634 	.word	0x20000634
 8006d6c:	20001e28 	.word	0x20001e28
 8006d70:	20003f54 	.word	0x20003f54
 8006d74:	41300000 	.word	0x41300000
 8006d78:	40e00000 	.word	0x40e00000
 8006d7c:	50000c00 	.word	0x50000c00
 8006d80:	20001e08 	.word	0x20001e08
 8006d84:	20001e84 	.word	0x20001e84
 8006d88:	20000640 	.word	0x20000640
 8006d8c:	20003ea4 	.word	0x20003ea4
 8006d90:	20003f20 	.word	0x20003f20
 8006d94:	080124c0 	.word	0x080124c0
 8006d98:	20003f60 	.word	0x20003f60
 8006d9c:	20004a7c 	.word	0x20004a7c
 8006da0:	08012824 	.word	0x08012824
 8006da4:	080128d8 	.word	0x080128d8
 8006da8:	080128cc 	.word	0x080128cc
 8006dac:	08012830 	.word	0x08012830
 8006db0:	08012838 	.word	0x08012838
 8006db4:	20000674 	.word	0x20000674
 8006db8:	20004510 	.word	0x20004510
 8006dbc:	080134a4 	.word	0x080134a4
 8006dc0:	200004c0 	.word	0x200004c0
 8006dc4:	080134d8 	.word	0x080134d8
 8006dc8:	20001df4 	.word	0x20001df4
 8006dcc:	080134e4 	.word	0x080134e4
 8006dd0:	20003ed8 	.word	0x20003ed8
 8006dd4:	080134ec 	.word	0x080134ec
 8006dd8:	20003f5c 	.word	0x20003f5c
 8006ddc:	080134fc 	.word	0x080134fc
 8006de0:	08012540 	.word	0x08012540
 8006de4:	20000560 	.word	0x20000560
	sprintf(checksum, "%02x",nmea0183_checksum(DataString_em2));
 8006de8:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006dea:	4648      	mov	r0, r9
 8006dec:	f007 fd5e 	bl	800e8ac <siprintf>
	strcat(DataString_em2,checksum);
 8006df0:	4650      	mov	r0, sl
 8006df2:	f7f9 f989 	bl	8000108 <strlen>
 8006df6:	4649      	mov	r1, r9
 8006df8:	4450      	add	r0, sl
 8006dfa:	f007 fe89 	bl	800eb10 <stpcpy>
	strcat(DataString_em2,",*\0");
 8006dfe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006e00:	2203      	movs	r2, #3
 8006e02:	3134      	adds	r1, #52	; 0x34
 8006e04:	f007 ff90 	bl	800ed28 <memcpy>
	sprintf(gpsDataRet2, "%0.6f%1s%0.6f%1s", GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD);
 8006e08:	4643      	mov	r3, r8
 8006e0a:	6818      	ldr	r0, [r3, #0]
 8006e0c:	f7fc f950 	bl	80030b0 <__aeabi_f2d>
 8006e10:	4643      	mov	r3, r8
 8006e12:	332b      	adds	r3, #43	; 0x2b
 8006e14:	9304      	str	r3, [sp, #16]
 8006e16:	4643      	mov	r3, r8
 8006e18:	0006      	movs	r6, r0
 8006e1a:	6858      	ldr	r0, [r3, #4]
 8006e1c:	000f      	movs	r7, r1
 8006e1e:	f7fc f947 	bl	80030b0 <__aeabi_f2d>
 8006e22:	4643      	mov	r3, r8
 8006e24:	4d96      	ldr	r5, [pc, #600]	; (8007080 <TestRun+0x70c>)
 8006e26:	3328      	adds	r3, #40	; 0x28
 8006e28:	0032      	movs	r2, r6
 8006e2a:	9002      	str	r0, [sp, #8]
 8006e2c:	9103      	str	r1, [sp, #12]
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	0029      	movs	r1, r5
 8006e32:	003b      	movs	r3, r7
 8006e34:	9811      	ldr	r0, [sp, #68]	; 0x44
 8006e36:	f007 fd39 	bl	800e8ac <siprintf>
	memset(data_LOGIN,0,100);
 8006e3a:	4d92      	ldr	r5, [pc, #584]	; (8007084 <TestRun+0x710>)
 8006e3c:	2264      	movs	r2, #100	; 0x64
 8006e3e:	2100      	movs	r1, #0
 8006e40:	0028      	movs	r0, r5
 8006e42:	f007 fd9f 	bl	800e984 <memset>
	strcat(data_LOGIN,"$");
 8006e46:	0028      	movs	r0, r5
 8006e48:	f7f9 f95e 	bl	8000108 <strlen>
 8006e4c:	2324      	movs	r3, #36	; 0x24
 8006e4e:	4698      	mov	r8, r3
 8006e50:	542b      	strb	r3, [r5, r0]
 8006e52:	3001      	adds	r0, #1
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8006e54:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e56:	1828      	adds	r0, r5, r0
 8006e58:	f007 fe5a 	bl	800eb10 <stpcpy>
 8006e5c:	262c      	movs	r6, #44	; 0x2c
	strcat(data_LOGIN,"$");
 8006e5e:	4643      	mov	r3, r8
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006e60:	9912      	ldr	r1, [sp, #72]	; 0x48
	strcat(data_LOGIN,"$");
 8006e62:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8006e64:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006e66:	3002      	adds	r0, #2
 8006e68:	f007 fe52 	bl	800eb10 <stpcpy>
	strcat(data_LOGIN,"$");
 8006e6c:	4643      	mov	r3, r8
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006e6e:	4f86      	ldr	r7, [pc, #536]	; (8007088 <TestRun+0x714>)
	strcat(data_LOGIN,"$");
 8006e70:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006e72:	0039      	movs	r1, r7
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006e74:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006e76:	3002      	adds	r0, #2
 8006e78:	f007 fe4a 	bl	800eb10 <stpcpy>
	strcat(data_LOGIN,"$");
 8006e7c:	4643      	mov	r3, r8
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");strcat(data_LOGIN,gpsDataRet2);strcat(data_LOGIN,",");
 8006e7e:	0039      	movs	r1, r7
	strcat(data_LOGIN,"$");
 8006e80:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8006e82:	7006      	strb	r6, [r0, #0]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");strcat(data_LOGIN,gpsDataRet2);strcat(data_LOGIN,",");
 8006e84:	3002      	adds	r0, #2
 8006e86:	f007 fe43 	bl	800eb10 <stpcpy>
 8006e8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006e8c:	7006      	strb	r6, [r0, #0]
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f007 fe3e 	bl	800eb10 <stpcpy>
 8006e94:	2202      	movs	r2, #2
 8006e96:	497d      	ldr	r1, [pc, #500]	; (800708c <TestRun+0x718>)
 8006e98:	f007 ff46 	bl	800ed28 <memcpy>
 8006e9c:	782b      	ldrb	r3, [r5, #0]
    int c = 0;
 8006e9e:	2200      	movs	r2, #0
    while (*s)
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <TestRun+0x53c>
 8006ea4:	0029      	movs	r1, r5
        c ^= *s++;
 8006ea6:	3101      	adds	r1, #1
 8006ea8:	405a      	eors	r2, r3
    while (*s)
 8006eaa:	780b      	ldrb	r3, [r1, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1fa      	bne.n	8006ea6 <TestRun+0x532>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 8006eb0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006eb2:	4648      	mov	r0, r9
 8006eb4:	f007 fcfa 	bl	800e8ac <siprintf>
	strcat(data_LOGIN,checksum);
 8006eb8:	0028      	movs	r0, r5
 8006eba:	f7f9 f925 	bl	8000108 <strlen>
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	1828      	adds	r0, r5, r0
 8006ec2:	f007 fe25 	bl	800eb10 <stpcpy>
	strcat(data_LOGIN,",*\0");
 8006ec6:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006ec8:	2203      	movs	r2, #3
 8006eca:	3134      	adds	r1, #52	; 0x34
 8006ecc:	f007 ff2c 	bl	800ed28 <memcpy>
    memset(checksum,0,3);
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4648      	mov	r0, r9
 8006ed6:	f007 fd55 	bl	800e984 <memset>
    memset(DataString,0,300);
 8006eda:	2296      	movs	r2, #150	; 0x96
 8006edc:	4d6c      	ldr	r5, [pc, #432]	; (8007090 <TestRun+0x71c>)
 8006ede:	0052      	lsls	r2, r2, #1
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	0028      	movs	r0, r5
 8006ee4:	f007 fd4e 	bl	800e984 <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8006ee8:	0028      	movs	r0, r5
 8006eea:	f7f9 f90d 	bl	8000108 <strlen>
 8006eee:	4969      	ldr	r1, [pc, #420]	; (8007094 <TestRun+0x720>)
 8006ef0:	1828      	adds	r0, r5, r0
 8006ef2:	262c      	movs	r6, #44	; 0x2c
 8006ef4:	f007 fe0c 	bl	800eb10 <stpcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 8006ef8:	9912      	ldr	r1, [sp, #72]	; 0x48
	strcat(DataString,Head);strcat(DataString,",");
 8006efa:	7006      	strb	r6, [r0, #0]
	strcat(DataString,IMEI);strcat(DataString,",");
 8006efc:	3001      	adds	r0, #1
 8006efe:	f007 fe07 	bl	800eb10 <stpcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 8006f02:	9913      	ldr	r1, [sp, #76]	; 0x4c
	strcat(DataString,IMEI);strcat(DataString,",");
 8006f04:	7006      	strb	r6, [r0, #0]
	strcat(DataString,Regno);strcat(DataString,",");
 8006f06:	3001      	adds	r0, #1
 8006f08:	f007 fe02 	bl	800eb10 <stpcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006f0c:	4962      	ldr	r1, [pc, #392]	; (8007098 <TestRun+0x724>)
	strcat(DataString,Regno);strcat(DataString,",");
 8006f0e:	7006      	strb	r6, [r0, #0]
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006f10:	3001      	adds	r0, #1
 8006f12:	f007 fdfd 	bl	800eb10 <stpcpy>
	strcat(DataString,simop);strcat(DataString,",");
 8006f16:	9916      	ldr	r1, [sp, #88]	; 0x58
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006f18:	7006      	strb	r6, [r0, #0]
	strcat(DataString,simop);strcat(DataString,",");
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	f007 fdf8 	bl	800eb10 <stpcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006f20:	495e      	ldr	r1, [pc, #376]	; (800709c <TestRun+0x728>)
	strcat(DataString,simop);strcat(DataString,",");
 8006f22:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006f24:	3001      	adds	r0, #1
 8006f26:	f007 fdf3 	bl	800eb10 <stpcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006f2a:	495d      	ldr	r1, [pc, #372]	; (80070a0 <TestRun+0x72c>)
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006f2c:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006f2e:	3001      	adds	r0, #1
 8006f30:	f007 fdee 	bl	800eb10 <stpcpy>
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8006f34:	495b      	ldr	r1, [pc, #364]	; (80070a4 <TestRun+0x730>)
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8006f36:	7006      	strb	r6, [r0, #0]
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8006f38:	3001      	adds	r0, #1
 8006f3a:	f007 fee2 	bl	800ed02 <strcpy>
 8006f3e:	782b      	ldrb	r3, [r5, #0]
    int c = 0;
 8006f40:	2200      	movs	r2, #0
    while (*s)
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <TestRun+0x5de>
 8006f46:	0029      	movs	r1, r5
        c ^= *s++;
 8006f48:	3101      	adds	r1, #1
 8006f4a:	405a      	eors	r2, r3
    while (*s)
 8006f4c:	780b      	ldrb	r3, [r1, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1fa      	bne.n	8006f48 <TestRun+0x5d4>
    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 8006f52:	9914      	ldr	r1, [sp, #80]	; 0x50
 8006f54:	4648      	mov	r0, r9
 8006f56:	f007 fca9 	bl	800e8ac <siprintf>
    strcat(DataString,checksum);
 8006f5a:	0028      	movs	r0, r5
 8006f5c:	f7f9 f8d4 	bl	8000108 <strlen>
 8006f60:	4649      	mov	r1, r9
 8006f62:	1828      	adds	r0, r5, r0
 8006f64:	f007 fdd4 	bl	800eb10 <stpcpy>
    strcat(DataString,",*\0");
 8006f68:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	3134      	adds	r1, #52	; 0x34
 8006f6e:	f007 fedb 	bl	800ed28 <memcpy>
    if (debug==1){
 8006f72:	4b4d      	ldr	r3, [pc, #308]	; (80070a8 <TestRun+0x734>)
    if(GSMSignal > 5) 		{
 8006f74:	494d      	ldr	r1, [pc, #308]	; (80070ac <TestRun+0x738>)
    if (debug==1){
 8006f76:	681e      	ldr	r6, [r3, #0]
    if(GSMSignal > 5) 		{
 8006f78:	4b4d      	ldr	r3, [pc, #308]	; (80070b0 <TestRun+0x73c>)
 8006f7a:	6818      	ldr	r0, [r3, #0]
 8006f7c:	f7f9 faba 	bl	80004f4 <__aeabi_fcmpgt>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	d11b      	bne.n	8006fbc <TestRun+0x648>
    	if (debug==1){
 8006f84:	2e01      	cmp	r6, #1
 8006f86:	d05b      	beq.n	8007040 <TestRun+0x6cc>
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 8006f88:	0028      	movs	r0, r5
 8006f8a:	f7f9 f8bd 	bl	8000108 <strlen>
 8006f8e:	3001      	adds	r0, #1
 8006f90:	b282      	uxth	r2, r0
	if (len<255){
 8006f92:	2afe      	cmp	r2, #254	; 0xfe
 8006f94:	d940      	bls.n	8007018 <TestRun+0x6a4>
    	RunCnt++;
 8006f96:	4b47      	ldr	r3, [pc, #284]	; (80070b4 <TestRun+0x740>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	3201      	adds	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
    	if(RunCnt>10){
 8006f9e:	2a0a      	cmp	r2, #10
 8006fa0:	dd01      	ble.n	8006fa6 <TestRun+0x632>
     	RunCnt=0;
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
 	seqNo=seqNo+1;
 8006fa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fa8:	6813      	ldr	r3, [r2, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	6013      	str	r3, [r2, #0]
}
 8006fae:	b01d      	add	sp, #116	; 0x74
 8006fb0:	bcf0      	pop	{r4, r5, r6, r7}
 8006fb2:	46bb      	mov	fp, r7
 8006fb4:	46b2      	mov	sl, r6
 8006fb6:	46a9      	mov	r9, r5
 8006fb8:	46a0      	mov	r8, r4
 8006fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	while(ReadQdata()>0){
 8006fbc:	f7fe f93a 	bl	8005234 <ReadQdata>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	dcfb      	bgt.n	8006fbc <TestRun+0x648>
 8006fc4:	f000 fd10 	bl	80079e8 <HAL_GetTick>
     	ProcessTCPAll(DataString,0);
 8006fc8:	2100      	movs	r1, #0
 8006fca:	0028      	movs	r0, r5
 8006fcc:	f7fd fa92 	bl	80044f4 <ProcessTCPAll>
     	if(EmergencyStateON==1 && EmergencyStateOFF==-1){
 8006fd0:	4c39      	ldr	r4, [pc, #228]	; (80070b8 <TestRun+0x744>)
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d015      	beq.n	8007004 <TestRun+0x690>
     	if(EmergencyStateON==-1 && EmergencyStateOFF==1){
 8006fd8:	3301      	adds	r3, #1
 8006fda:	d007      	beq.n	8006fec <TestRun+0x678>
 8006fdc:	4b35      	ldr	r3, [pc, #212]	; (80070b4 <TestRun+0x740>)
 8006fde:	e7e0      	b.n	8006fa2 <TestRun+0x62e>
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	4835      	ldr	r0, [pc, #212]	; (80070bc <TestRun+0x748>)
 8006fe6:	f001 fbcd 	bl	8008784 <HAL_GPIO_WritePin>
	}
}
 8006fea:	e559      	b.n	8006aa0 <TestRun+0x12c>
 8006fec:	4c34      	ldr	r4, [pc, #208]	; (80070c0 <TestRun+0x74c>)
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d1f3      	bne.n	8006fdc <TestRun+0x668>
         	ProcessTCPAll(DataString_em2,1);
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	f7fd fa7c 	bl	80044f4 <ProcessTCPAll>
         	EmergencyStateOFF=0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	4b2c      	ldr	r3, [pc, #176]	; (80070b4 <TestRun+0x740>)
 8007002:	e7ce      	b.n	8006fa2 <TestRun+0x62e>
     	if(EmergencyStateON==1 && EmergencyStateOFF==-1){
 8007004:	4b2e      	ldr	r3, [pc, #184]	; (80070c0 <TestRun+0x74c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3301      	adds	r3, #1
 800700a:	d1e7      	bne.n	8006fdc <TestRun+0x668>
         	ProcessTCPAll(DataString_em1,1);
 800700c:	2101      	movs	r1, #1
 800700e:	4658      	mov	r0, fp
 8007010:	f7fd fa70 	bl	80044f4 <ProcessTCPAll>
     	if(EmergencyStateON==-1 && EmergencyStateOFF==1){
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	e7df      	b.n	8006fd8 <TestRun+0x664>
		SPI_flash_Page_Program(WrtAdd, data,len);
 8007018:	4c2a      	ldr	r4, [pc, #168]	; (80070c4 <TestRun+0x750>)
 800701a:	0029      	movs	r1, r5
 800701c:	0020      	movs	r0, r4
 800701e:	f7fe f867 	bl	80050f0 <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8007022:	7823      	ldrb	r3, [r4, #0]
 8007024:	7862      	ldrb	r2, [r4, #1]
 8007026:	021b      	lsls	r3, r3, #8
 8007028:	189b      	adds	r3, r3, r2
 800702a:	78a2      	ldrb	r2, [r4, #2]
 800702c:	021b      	lsls	r3, r3, #8
 800702e:	189b      	adds	r3, r3, r2
 8007030:	3301      	adds	r3, #1
 8007032:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 8007034:	141a      	asrs	r2, r3, #16
 8007036:	7022      	strb	r2, [r4, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8007038:	121a      	asrs	r2, r3, #8
 800703a:	7062      	strb	r2, [r4, #1]
	WrtAdd[2]=(addi)%256;
 800703c:	70a3      	strb	r3, [r4, #2]
}
 800703e:	e7aa      	b.n	8006f96 <TestRun+0x622>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007040:	220c      	movs	r2, #12
 8007042:	9e19      	ldr	r6, [sp, #100]	; 0x64
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8007044:	4920      	ldr	r1, [pc, #128]	; (80070c8 <TestRun+0x754>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007046:	6833      	ldr	r3, [r6, #0]
 8007048:	0030      	movs	r0, r6
 800704a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800704c:	4b1f      	ldr	r3, [pc, #124]	; (80070cc <TestRun+0x758>)
 800704e:	321b      	adds	r2, #27
 8007050:	f003 fdc4 	bl	800abdc <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8007054:	4b1e      	ldr	r3, [pc, #120]	; (80070d0 <TestRun+0x75c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8007056:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8007058:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800705a:	0021      	movs	r1, r4
 800705c:	230a      	movs	r3, #10
 800705e:	0030      	movs	r0, r6
 8007060:	f003 fdbc 	bl	800abdc <HAL_UART_Transmit>
}
 8007064:	e790      	b.n	8006f88 <TestRun+0x614>
		Debug_Tx("GSMUART error rebooting device");
 8007066:	481b      	ldr	r0, [pc, #108]	; (80070d4 <TestRun+0x760>)
 8007068:	f7fc f90e 	bl	8003288 <Debug_Tx>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800706c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007070:	4b19      	ldr	r3, [pc, #100]	; (80070d8 <TestRun+0x764>)
 8007072:	4a1a      	ldr	r2, [pc, #104]	; (80070dc <TestRun+0x768>)
 8007074:	60da      	str	r2, [r3, #12]
 8007076:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800707a:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800707c:	e7fd      	b.n	800707a <TestRun+0x706>
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	08013504 	.word	0x08013504
 8007084:	20004060 	.word	0x20004060
 8007088:	200000b8 	.word	0x200000b8
 800708c:	080127d8 	.word	0x080127d8
 8007090:	20000394 	.word	0x20000394
 8007094:	20001d88 	.word	0x20001d88
 8007098:	200044c8 	.word	0x200044c8
 800709c:	20003f0c 	.word	0x20003f0c
 80070a0:	2000455c 	.word	0x2000455c
 80070a4:	2000060c 	.word	0x2000060c
 80070a8:	200000c4 	.word	0x200000c4
 80070ac:	40a00000 	.word	0x40a00000
 80070b0:	20001d0c 	.word	0x20001d0c
 80070b4:	20003eec 	.word	0x20003eec
 80070b8:	20000098 	.word	0x20000098
 80070bc:	50000c00 	.word	0x50000c00
 80070c0:	20000638 	.word	0x20000638
 80070c4:	200000c0 	.word	0x200000c0
 80070c8:	08013518 	.word	0x08013518
 80070cc:	00001388 	.word	0x00001388
 80070d0:	00000a0d 	.word	0x00000a0d
 80070d4:	08013484 	.word	0x08013484
 80070d8:	e000ed00 	.word	0xe000ed00
 80070dc:	05fa0004 	.word	0x05fa0004

080070e0 <StartDefaultTask>:
{
 80070e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e2:	46c6      	mov	lr, r8
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80070e4:	27fa      	movs	r7, #250	; 0xfa
 80070e6:	2516      	movs	r5, #22
 80070e8:	2601      	movs	r6, #1
 80070ea:	b500      	push	{lr}
 80070ec:	4c7e      	ldr	r4, [pc, #504]	; (80072e8 <StartDefaultTask+0x208>)
 80070ee:	b086      	sub	sp, #24
 80070f0:	446d      	add	r5, sp
 80070f2:	00bf      	lsls	r7, r7, #2
 80070f4:	2301      	movs	r3, #1
 80070f6:	9500      	str	r5, [sp, #0]
 80070f8:	2275      	movs	r2, #117	; 0x75
 80070fa:	21d0      	movs	r1, #208	; 0xd0
 80070fc:	0020      	movs	r0, r4
 80070fe:	9702      	str	r7, [sp, #8]
 8007100:	9601      	str	r6, [sp, #4]
 8007102:	f001 fdbf 	bl	8008c84 <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8007106:	782b      	ldrb	r3, [r5, #0]
		Data = 0;
 8007108:	2517      	movs	r5, #23
 800710a:	446d      	add	r5, sp
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800710c:	2b68      	cmp	r3, #104	; 0x68
 800710e:	d100      	bne.n	8007112 <StartDefaultTask+0x32>
 8007110:	e0b9      	b.n	8007286 <StartDefaultTask+0x1a6>
		Data = 0;
 8007112:	2300      	movs	r3, #0
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8007114:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 8007116:	702b      	strb	r3, [r5, #0]
 8007118:	4698      	mov	r8, r3
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800711a:	21d0      	movs	r1, #208	; 0xd0
 800711c:	3301      	adds	r3, #1
 800711e:	0020      	movs	r0, r4
 8007120:	9702      	str	r7, [sp, #8]
 8007122:	9601      	str	r6, [sp, #4]
 8007124:	9500      	str	r5, [sp, #0]
 8007126:	f001 fc73 	bl	8008a10 <HAL_I2C_Mem_Write>
				Data = 0x07;
 800712a:	2307      	movs	r3, #7
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800712c:	2219      	movs	r2, #25
				Data = 0x07;
 800712e:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8007130:	21d0      	movs	r1, #208	; 0xd0
 8007132:	3b06      	subs	r3, #6
 8007134:	0020      	movs	r0, r4
 8007136:	9702      	str	r7, [sp, #8]
 8007138:	9601      	str	r6, [sp, #4]
 800713a:	9500      	str	r5, [sp, #0]
 800713c:	f001 fc68 	bl	8008a10 <HAL_I2C_Mem_Write>
				Data = 0x00;
 8007140:	4643      	mov	r3, r8
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8007142:	221c      	movs	r2, #28
				Data = 0x00;
 8007144:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8007146:	21d0      	movs	r1, #208	; 0xd0
 8007148:	3301      	adds	r3, #1
 800714a:	0020      	movs	r0, r4
 800714c:	9702      	str	r7, [sp, #8]
 800714e:	9601      	str	r6, [sp, #4]
 8007150:	9500      	str	r5, [sp, #0]
 8007152:	f001 fc5d 	bl	8008a10 <HAL_I2C_Mem_Write>
				Data = 0x00;
 8007156:	4643      	mov	r3, r8
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8007158:	221b      	movs	r2, #27
				Data = 0x00;
 800715a:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800715c:	21d0      	movs	r1, #208	; 0xd0
 800715e:	0020      	movs	r0, r4
 8007160:	9702      	str	r7, [sp, #8]
 8007162:	9601      	str	r6, [sp, #4]
 8007164:	9500      	str	r5, [sp, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	f001 fc52 	bl	8008a10 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 800716c:	485f      	ldr	r0, [pc, #380]	; (80072ec <StartDefaultTask+0x20c>)
 800716e:	f7fc f88b 	bl	8003288 <Debug_Tx>
	ACC_GYRO_data[0]=0;
 8007172:	2200      	movs	r2, #0

static void SET_GPS_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	20a0      	movs	r0, #160	; 0xa0
 8007178:	4b5d      	ldr	r3, [pc, #372]	; (80072f0 <StartDefaultTask+0x210>)
 800717a:	0209      	lsls	r1, r1, #8
 800717c:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 800717e:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 8007180:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 8007182:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 8007184:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 8007186:	615a      	str	r2, [r3, #20]
 8007188:	05c0      	lsls	r0, r0, #23
 800718a:	2201      	movs	r2, #1
 800718c:	f001 fafa 	bl	8008784 <HAL_GPIO_WritePin>
	}
}

static void SET_GSM_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8007190:	2201      	movs	r2, #1
 8007192:	2140      	movs	r1, #64	; 0x40
 8007194:	4857      	ldr	r0, [pc, #348]	; (80072f4 <StartDefaultTask+0x214>)
 8007196:	f001 faf5 	bl	8008784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800719a:	2201      	movs	r2, #1
 800719c:	2180      	movs	r1, #128	; 0x80
 800719e:	4855      	ldr	r0, [pc, #340]	; (80072f4 <StartDefaultTask+0x214>)
 80071a0:	f001 faf0 	bl	8008784 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 80071a4:	2204      	movs	r2, #4
 80071a6:	4954      	ldr	r1, [pc, #336]	; (80072f8 <StartDefaultTask+0x218>)
 80071a8:	4854      	ldr	r0, [pc, #336]	; (80072fc <StartDefaultTask+0x21c>)
 80071aa:	f000 ff5d 	bl	8008068 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 80071ae:	2201      	movs	r2, #1
 80071b0:	2120      	movs	r1, #32
 80071b2:	4853      	ldr	r0, [pc, #332]	; (8007300 <StartDefaultTask+0x220>)
 80071b4:	f001 fae6 	bl	8008784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80071b8:	2180      	movs	r1, #128	; 0x80
 80071ba:	20a0      	movs	r0, #160	; 0xa0
 80071bc:	2201      	movs	r2, #1
 80071be:	0209      	lsls	r1, r1, #8
 80071c0:	05c0      	lsls	r0, r0, #23
 80071c2:	f001 fadf 	bl	8008784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80071c6:	2201      	movs	r2, #1
 80071c8:	2140      	movs	r1, #64	; 0x40
 80071ca:	484a      	ldr	r0, [pc, #296]	; (80072f4 <StartDefaultTask+0x214>)
 80071cc:	f001 fada 	bl	8008784 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80071d0:	2201      	movs	r2, #1
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	4847      	ldr	r0, [pc, #284]	; (80072f4 <StartDefaultTask+0x214>)
 80071d6:	f001 fad5 	bl	8008784 <HAL_GPIO_WritePin>
GSMBuff[0]=0;
 80071da:	2300      	movs	r3, #0
 memset((char*)gpsData,0,1000);
 80071dc:	22fa      	movs	r2, #250	; 0xfa
GSMBuff[0]=0;
 80071de:	4c49      	ldr	r4, [pc, #292]	; (8007304 <StartDefaultTask+0x224>)
 memset((char*)gpsData,0,1000);
 80071e0:	4d49      	ldr	r5, [pc, #292]	; (8007308 <StartDefaultTask+0x228>)
GSMBuff[0]=0;
 80071e2:	7023      	strb	r3, [r4, #0]
 memset((char*)gpsData,0,1000);
 80071e4:	2100      	movs	r1, #0
 80071e6:	0028      	movs	r0, r5
 80071e8:	0092      	lsls	r2, r2, #2
 80071ea:	f007 fbcb 	bl	800e984 <memset>
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80071ee:	260c      	movs	r6, #12
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80071f0:	22e1      	movs	r2, #225	; 0xe1
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80071f2:	4846      	ldr	r0, [pc, #280]	; (800730c <StartDefaultTask+0x22c>)
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80071f4:	0029      	movs	r1, r5
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80071f6:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80071f8:	0092      	lsls	r2, r2, #2
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80071fa:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80071fc:	f003 febc 	bl	800af78 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007200:	4843      	ldr	r0, [pc, #268]	; (8007310 <StartDefaultTask+0x230>)
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8007202:	0021      	movs	r1, r4
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007204:	6803      	ldr	r3, [r0, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8007206:	2201      	movs	r2, #1
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8007208:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800720a:	f003 feb5 	bl	800af78 <HAL_UART_Receive_DMA>
initGPS();
 800720e:	f7fe fa25 	bl	800565c <initGPS>
initFirstRun();
 8007212:	f7ff f82d 	bl	8006270 <initFirstRun>
InitMEMQ();
 8007216:	f7fe f8a5 	bl	8005364 <InitMEMQ>
HAL_Delay(10000);
 800721a:	483e      	ldr	r0, [pc, #248]	; (8007314 <StartDefaultTask+0x234>)
 800721c:	f000 fbea 	bl	80079f4 <HAL_Delay>
InitGSM();
 8007220:	f7fd fc08 	bl	8004a34 <InitGSM>
TestMEM();
 8007224:	f7fe fab8 	bl	8005798 <TestMEM>
 memset(IMEI,0,20);
 8007228:	4c3b      	ldr	r4, [pc, #236]	; (8007318 <StartDefaultTask+0x238>)
 800722a:	2214      	movs	r2, #20
 800722c:	2100      	movs	r1, #0
 800722e:	0020      	movs	r0, r4
 8007230:	f007 fba8 	bl	800e984 <memset>
 memset(Regno,0,20);
 8007234:	4e39      	ldr	r6, [pc, #228]	; (800731c <StartDefaultTask+0x23c>)
 8007236:	2214      	movs	r2, #20
 8007238:	2100      	movs	r1, #0
 800723a:	0030      	movs	r0, r6
 800723c:	f007 fba2 	bl	800e984 <memset>
 memset(simop,0,20);
 8007240:	4d37      	ldr	r5, [pc, #220]	; (8007320 <StartDefaultTask+0x240>)
 8007242:	2214      	movs	r2, #20
 8007244:	2100      	movs	r1, #0
 8007246:	0028      	movs	r0, r5
 8007248:	f007 fb9c 	bl	800e984 <memset>
strcpy(IMEI,GSMIMEI());
 800724c:	f7fc fc54 	bl	8003af8 <GSMIMEI>
 8007250:	0001      	movs	r1, r0
 8007252:	0020      	movs	r0, r4
 8007254:	f007 fd55 	bl	800ed02 <strcpy>
 strcpy(Regno,readRegNo());
 8007258:	f7fe f9aa 	bl	80055b0 <readRegNo>
 800725c:	0001      	movs	r1, r0
 800725e:	0030      	movs	r0, r6
 8007260:	f007 fd4f 	bl	800ed02 <strcpy>
 strcpy(simop, GSMSimOperator());
 8007264:	f7fc fc28 	bl	8003ab8 <GSMSimOperator>
 8007268:	0001      	movs	r1, r0
 800726a:	0028      	movs	r0, r5
 800726c:	f007 fd49 	bl	800ed02 <strcpy>
 Debug_Tx("IMEI:");
 8007270:	482c      	ldr	r0, [pc, #176]	; (8007324 <StartDefaultTask+0x244>)
 8007272:	f7fc f809 	bl	8003288 <Debug_Tx>
	  Debug_Tx(IMEI);
 8007276:	0020      	movs	r0, r4
 8007278:	f7fc f806 	bl	8003288 <Debug_Tx>
  GSMSigQuality();
 800727c:	f7fc fba8 	bl	80039d0 <GSMSigQuality>
 TestRun();
 8007280:	f7ff fb78 	bl	8006974 <TestRun>
while (1){//DownloadFile();
 8007284:	e7fa      	b.n	800727c <StartDefaultTask+0x19c>
		Data = 0;
 8007286:	2300      	movs	r3, #0
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8007288:	226b      	movs	r2, #107	; 0x6b
		Data = 0;
 800728a:	702b      	strb	r3, [r5, #0]
 800728c:	4698      	mov	r8, r3
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800728e:	21d0      	movs	r1, #208	; 0xd0
 8007290:	0033      	movs	r3, r6
 8007292:	0020      	movs	r0, r4
 8007294:	9702      	str	r7, [sp, #8]
 8007296:	9601      	str	r6, [sp, #4]
 8007298:	9500      	str	r5, [sp, #0]
 800729a:	f001 fbb9 	bl	8008a10 <HAL_I2C_Mem_Write>
		Data = 0x07;
 800729e:	2307      	movs	r3, #7
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80072a0:	2219      	movs	r2, #25
		Data = 0x07;
 80072a2:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80072a4:	21d0      	movs	r1, #208	; 0xd0
 80072a6:	0033      	movs	r3, r6
 80072a8:	0020      	movs	r0, r4
 80072aa:	9702      	str	r7, [sp, #8]
 80072ac:	9601      	str	r6, [sp, #4]
 80072ae:	9500      	str	r5, [sp, #0]
 80072b0:	f001 fbae 	bl	8008a10 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80072b4:	4643      	mov	r3, r8
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80072b6:	221c      	movs	r2, #28
		Data = 0x00;
 80072b8:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80072ba:	21d0      	movs	r1, #208	; 0xd0
 80072bc:	0033      	movs	r3, r6
 80072be:	0020      	movs	r0, r4
 80072c0:	9702      	str	r7, [sp, #8]
 80072c2:	9601      	str	r6, [sp, #4]
 80072c4:	9500      	str	r5, [sp, #0]
 80072c6:	f001 fba3 	bl	8008a10 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80072ca:	4643      	mov	r3, r8
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80072cc:	221b      	movs	r2, #27
		Data = 0x00;
 80072ce:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80072d0:	21d0      	movs	r1, #208	; 0xd0
 80072d2:	0033      	movs	r3, r6
 80072d4:	0020      	movs	r0, r4
 80072d6:	9702      	str	r7, [sp, #8]
 80072d8:	9601      	str	r6, [sp, #4]
 80072da:	9500      	str	r5, [sp, #0]
 80072dc:	f001 fb98 	bl	8008a10 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 80072e0:	4811      	ldr	r0, [pc, #68]	; (8007328 <StartDefaultTask+0x248>)
 80072e2:	f7fb ffd1 	bl	8003288 <Debug_Tx>
 80072e6:	e744      	b.n	8007172 <StartDefaultTask+0x92>
 80072e8:	20004780 	.word	0x20004780
 80072ec:	08013554 	.word	0x08013554
 80072f0:	20000324 	.word	0x20000324
 80072f4:	50000800 	.word	0x50000800
 80072f8:	20000340 	.word	0x20000340
 80072fc:	200045ac 	.word	0x200045ac
 8007300:	50000400 	.word	0x50000400
 8007304:	200006c4 	.word	0x200006c4
 8007308:	200040e0 	.word	0x200040e0
 800730c:	20004918 	.word	0x20004918
 8007310:	20004884 	.word	0x20004884
 8007314:	00002710 	.word	0x00002710
 8007318:	20001df4 	.word	0x20001df4
 800731c:	20003ed8 	.word	0x20003ed8
 8007320:	20004a7c 	.word	0x20004a7c
 8007324:	08013564 	.word	0x08013564
 8007328:	08013540 	.word	0x08013540

0800732c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800732c:	b672      	cpsid	i
  while (1)
 800732e:	e7fe      	b.n	800732e <Error_Handler+0x2>

08007330 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007330:	2201      	movs	r2, #1
 8007332:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <HAL_MspInit+0x40>)
{
 8007334:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007336:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007338:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800733a:	4311      	orrs	r1, r2
 800733c:	6419      	str	r1, [r3, #64]	; 0x40
 800733e:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 8007340:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007342:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8007344:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007346:	9200      	str	r2, [sp, #0]
 8007348:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800734a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800734c:	0549      	lsls	r1, r1, #21
 800734e:	430a      	orrs	r2, r1
 8007350:	63da      	str	r2, [r3, #60]	; 0x3c
 8007352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007354:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8007356:	400b      	ands	r3, r1
 8007358:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800735a:	2103      	movs	r1, #3
 800735c:	4240      	negs	r0, r0
  __HAL_RCC_PWR_CLK_ENABLE();
 800735e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8007360:	f000 fedc 	bl	800811c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8007364:	20c0      	movs	r0, #192	; 0xc0
 8007366:	00c0      	lsls	r0, r0, #3
 8007368:	f000 fb56 	bl	8007a18 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800736c:	b003      	add	sp, #12
 800736e:	bd00      	pop	{pc}
 8007370:	40021000 	.word	0x40021000

08007374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	0004      	movs	r4, r0
 8007378:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800737a:	2214      	movs	r2, #20
 800737c:	2100      	movs	r1, #0
 800737e:	a803      	add	r0, sp, #12
 8007380:	f007 fb00 	bl	800e984 <memset>
  if(hadc->Instance==ADC1)
 8007384:	4b26      	ldr	r3, [pc, #152]	; (8007420 <HAL_ADC_MspInit+0xac>)
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d001      	beq.n	8007390 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800738c:	b008      	add	sp, #32
 800738e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 8007390:	2180      	movs	r1, #128	; 0x80
 8007392:	4b24      	ldr	r3, [pc, #144]	; (8007424 <HAL_ADC_MspInit+0xb0>)
 8007394:	0349      	lsls	r1, r1, #13
 8007396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007398:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 800739a:	430a      	orrs	r2, r1
 800739c:	641a      	str	r2, [r3, #64]	; 0x40
 800739e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 80073a0:	2503      	movs	r5, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 80073a2:	400a      	ands	r2, r1
 80073a4:	9200      	str	r2, [sp, #0]
 80073a6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073a8:	2201      	movs	r2, #1
 80073aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073ac:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073ae:	4311      	orrs	r1, r2
 80073b0:	6359      	str	r1, [r3, #52]	; 0x34
 80073b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073b4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073b6:	400a      	ands	r2, r1
 80073b8:	9201      	str	r2, [sp, #4]
 80073ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073bc:	2202      	movs	r2, #2
 80073be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80073c0:	4311      	orrs	r1, r2
 80073c2:	6359      	str	r1, [r3, #52]	; 0x34
 80073c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073c6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073c8:	401a      	ands	r2, r3
 80073ca:	9202      	str	r2, [sp, #8]
 80073cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 80073ce:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073d0:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073d2:	f001 f8cb 	bl	800856c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073d8:	4814      	ldr	r0, [pc, #80]	; (800742c <HAL_ADC_MspInit+0xb8>)
 80073da:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 80073dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073de:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e0:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073e2:	f001 f8c3 	bl	800856c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80073e6:	4d12      	ldr	r5, [pc, #72]	; (8007430 <HAL_ADC_MspInit+0xbc>)
 80073e8:	4b12      	ldr	r3, [pc, #72]	; (8007434 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80073ea:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 80073ec:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80073ee:	2305      	movs	r3, #5
 80073f0:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80073f2:	337b      	adds	r3, #123	; 0x7b
 80073f4:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80073f6:	3381      	adds	r3, #129	; 0x81
 80073f8:	33ff      	adds	r3, #255	; 0xff
 80073fa:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007402:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007404:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007406:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007408:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800740a:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800740c:	f000 fee4 	bl	80081d8 <HAL_DMA_Init>
 8007410:	2800      	cmp	r0, #0
 8007412:	d102      	bne.n	800741a <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8007414:	6525      	str	r5, [r4, #80]	; 0x50
 8007416:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8007418:	e7b8      	b.n	800738c <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800741a:	f7ff ff87 	bl	800732c <Error_Handler>
 800741e:	e7f9      	b.n	8007414 <HAL_ADC_MspInit+0xa0>
 8007420:	40012400 	.word	0x40012400
 8007424:	40021000 	.word	0x40021000
 8007428:	00000402 	.word	0x00000402
 800742c:	50000400 	.word	0x50000400
 8007430:	20004610 	.word	0x20004610
 8007434:	40020008 	.word	0x40020008

08007438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007438:	b510      	push	{r4, lr}
 800743a:	0004      	movs	r4, r0
 800743c:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800743e:	2214      	movs	r2, #20
 8007440:	2100      	movs	r1, #0
 8007442:	a802      	add	r0, sp, #8
 8007444:	f007 fa9e 	bl	800e984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007448:	221c      	movs	r2, #28
 800744a:	2100      	movs	r1, #0
 800744c:	a807      	add	r0, sp, #28
 800744e:	f007 fa99 	bl	800e984 <memset>
  if(hi2c->Instance==I2C1)
 8007452:	4b18      	ldr	r3, [pc, #96]	; (80074b4 <HAL_I2C_MspInit+0x7c>)
 8007454:	6822      	ldr	r2, [r4, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d001      	beq.n	800745e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800745a:	b00e      	add	sp, #56	; 0x38
 800745c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800745e:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007460:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8007462:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007464:	f002 f97a 	bl	800975c <HAL_RCCEx_PeriphCLKConfig>
 8007468:	2800      	cmp	r0, #0
 800746a:	d120      	bne.n	80074ae <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800746c:	2302      	movs	r3, #2
 800746e:	4c12      	ldr	r4, [pc, #72]	; (80074b8 <HAL_I2C_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007470:	4812      	ldr	r0, [pc, #72]	; (80074bc <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007472:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007474:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007476:	431a      	orrs	r2, r3
 8007478:	6362      	str	r2, [r4, #52]	; 0x34
 800747a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800747c:	4013      	ands	r3, r2
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8007482:	23c0      	movs	r3, #192	; 0xc0
 8007484:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007486:	3bae      	subs	r3, #174	; 0xae
 8007488:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800748a:	3b11      	subs	r3, #17
 800748c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800748e:	2300      	movs	r3, #0
 8007490:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8007492:	3306      	adds	r3, #6
 8007494:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007496:	f001 f869 	bl	800856c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800749a:	2280      	movs	r2, #128	; 0x80
 800749c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800749e:	0392      	lsls	r2, r2, #14
 80074a0:	4313      	orrs	r3, r2
 80074a2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80074a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074a6:	4013      	ands	r3, r2
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	9b01      	ldr	r3, [sp, #4]
}
 80074ac:	e7d5      	b.n	800745a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80074ae:	f7ff ff3d 	bl	800732c <Error_Handler>
 80074b2:	e7db      	b.n	800746c <HAL_I2C_MspInit+0x34>
 80074b4:	40005400 	.word	0x40005400
 80074b8:	40021000 	.word	0x40021000
 80074bc:	50000400 	.word	0x50000400

080074c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80074c0:	b510      	push	{r4, lr}
 80074c2:	0004      	movs	r4, r0
 80074c4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c6:	2214      	movs	r2, #20
 80074c8:	2100      	movs	r1, #0
 80074ca:	a803      	add	r0, sp, #12
 80074cc:	f007 fa5a 	bl	800e984 <memset>
  if(hspi->Instance==SPI1)
 80074d0:	4b10      	ldr	r3, [pc, #64]	; (8007514 <HAL_SPI_MspInit+0x54>)
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d001      	beq.n	80074dc <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80074d8:	b008      	add	sp, #32
 80074da:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80074dc:	2180      	movs	r1, #128	; 0x80
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <HAL_SPI_MspInit+0x58>)
 80074e0:	0149      	lsls	r1, r1, #5
 80074e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80074e6:	430a      	orrs	r2, r1
 80074e8:	641a      	str	r2, [r3, #64]	; 0x40
 80074ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ec:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 80074ee:	400a      	ands	r2, r1
 80074f0:	9201      	str	r2, [sp, #4]
 80074f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074f4:	2201      	movs	r2, #1
 80074f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80074f8:	4311      	orrs	r1, r2
 80074fa:	6359      	str	r1, [r3, #52]	; 0x34
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074fe:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007500:	401a      	ands	r2, r3
 8007502:	9202      	str	r2, [sp, #8]
 8007504:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8007506:	23e0      	movs	r3, #224	; 0xe0
 8007508:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800750a:	3bde      	subs	r3, #222	; 0xde
 800750c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800750e:	f001 f82d 	bl	800856c <HAL_GPIO_Init>
}
 8007512:	e7e1      	b.n	80074d8 <HAL_SPI_MspInit+0x18>
 8007514:	40013000 	.word	0x40013000
 8007518:	40021000 	.word	0x40021000

0800751c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800751c:	b500      	push	{lr}
  if(htim_base->Instance==TIM6)
 800751e:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <HAL_TIM_Base_MspInit+0x34>)
 8007520:	6802      	ldr	r2, [r0, #0]
{
 8007522:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 8007524:	429a      	cmp	r2, r3
 8007526:	d001      	beq.n	800752c <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007528:	b003      	add	sp, #12
 800752a:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 800752c:	2310      	movs	r3, #16
 800752e:	4a09      	ldr	r2, [pc, #36]	; (8007554 <HAL_TIM_Base_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8007530:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007532:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007534:	4319      	orrs	r1, r3
 8007536:	63d1      	str	r1, [r2, #60]	; 0x3c
 8007538:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 800753a:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 800753c:	4013      	ands	r3, r2
 800753e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8007540:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007542:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8007544:	f000 fdea 	bl	800811c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8007548:	2011      	movs	r0, #17
 800754a:	f000 fe19 	bl	8008180 <HAL_NVIC_EnableIRQ>
}
 800754e:	e7eb      	b.n	8007528 <HAL_TIM_Base_MspInit+0xc>
 8007550:	40001000 	.word	0x40001000
 8007554:	40021000 	.word	0x40021000

08007558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	0004      	movs	r4, r0
 800755c:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800755e:	2214      	movs	r2, #20
 8007560:	2100      	movs	r1, #0
 8007562:	a806      	add	r0, sp, #24
 8007564:	f007 fa0e 	bl	800e984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007568:	221c      	movs	r2, #28
 800756a:	2100      	movs	r1, #0
 800756c:	a80b      	add	r0, sp, #44	; 0x2c
 800756e:	f007 fa09 	bl	800e984 <memset>
  if(huart->Instance==USART1)
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	4a6f      	ldr	r2, [pc, #444]	; (8007734 <HAL_UART_MspInit+0x1dc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d008      	beq.n	800758c <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800757a:	4a6f      	ldr	r2, [pc, #444]	; (8007738 <HAL_UART_MspInit+0x1e0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d04c      	beq.n	800761a <HAL_UART_MspInit+0xc2>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8007580:	4a6e      	ldr	r2, [pc, #440]	; (800773c <HAL_UART_MspInit+0x1e4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d100      	bne.n	8007588 <HAL_UART_MspInit+0x30>
 8007586:	e08c      	b.n	80076a2 <HAL_UART_MspInit+0x14a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007588:	b012      	add	sp, #72	; 0x48
 800758a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800758c:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800758e:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007590:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007592:	f002 f8e3 	bl	800975c <HAL_RCCEx_PeriphCLKConfig>
 8007596:	2800      	cmp	r0, #0
 8007598:	d000      	beq.n	800759c <HAL_UART_MspInit+0x44>
 800759a:	e0bf      	b.n	800771c <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800759c:	2180      	movs	r1, #128	; 0x80
 800759e:	4b68      	ldr	r3, [pc, #416]	; (8007740 <HAL_UART_MspInit+0x1e8>)
 80075a0:	01c9      	lsls	r1, r1, #7
 80075a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075a4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 80075a6:	430a      	orrs	r2, r1
 80075a8:	641a      	str	r2, [r3, #64]	; 0x40
 80075aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ac:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80075ae:	400a      	ands	r2, r1
 80075b0:	9200      	str	r2, [sp, #0]
 80075b2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075b4:	2201      	movs	r2, #1
 80075b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075b8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075ba:	4311      	orrs	r1, r2
 80075bc:	6359      	str	r1, [r3, #52]	; 0x34
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c0:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075c2:	4013      	ands	r3, r2
 80075c4:	9301      	str	r3, [sp, #4]
 80075c6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 80075c8:	23c0      	movs	r3, #192	; 0xc0
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ce:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075d4:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80075d6:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075d8:	f000 ffc8 	bl	800856c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80075dc:	4d59      	ldr	r5, [pc, #356]	; (8007744 <HAL_UART_MspInit+0x1ec>)
 80075de:	4b5a      	ldr	r3, [pc, #360]	; (8007748 <HAL_UART_MspInit+0x1f0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80075e0:	0028      	movs	r0, r5
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80075e2:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80075e4:	2332      	movs	r3, #50	; 0x32
 80075e6:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075e8:	334e      	adds	r3, #78	; 0x4e
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075ea:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075ec:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075ee:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075f0:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075f2:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80075f4:	61ee      	str	r6, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80075f6:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80075f8:	f000 fdee 	bl	80081d8 <HAL_DMA_Init>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d000      	beq.n	8007602 <HAL_UART_MspInit+0xaa>
 8007600:	e089      	b.n	8007716 <HAL_UART_MspInit+0x1be>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8007602:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8007604:	2200      	movs	r2, #0
 8007606:	2103      	movs	r1, #3
 8007608:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800760a:	50e5      	str	r5, [r4, r3]
 800760c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800760e:	f000 fd85 	bl	800811c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007612:	201b      	movs	r0, #27
 8007614:	f000 fdb4 	bl	8008180 <HAL_NVIC_EnableIRQ>
 8007618:	e7b6      	b.n	8007588 <HAL_UART_MspInit+0x30>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800761a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800761c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800761e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007620:	f002 f89c 	bl	800975c <HAL_RCCEx_PeriphCLKConfig>
 8007624:	2800      	cmp	r0, #0
 8007626:	d17c      	bne.n	8007722 <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007628:	2180      	movs	r1, #128	; 0x80
 800762a:	4b45      	ldr	r3, [pc, #276]	; (8007740 <HAL_UART_MspInit+0x1e8>)
 800762c:	0289      	lsls	r1, r1, #10
 800762e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007630:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8007632:	430a      	orrs	r2, r1
 8007634:	63da      	str	r2, [r3, #60]	; 0x3c
 8007636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007638:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800763a:	400a      	ands	r2, r1
 800763c:	9202      	str	r2, [sp, #8]
 800763e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007640:	2201      	movs	r2, #1
 8007642:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007644:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007646:	4311      	orrs	r1, r2
 8007648:	6359      	str	r1, [r3, #52]	; 0x34
 800764a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800764c:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800764e:	4013      	ands	r3, r2
 8007650:	9303      	str	r3, [sp, #12]
 8007652:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8007654:	230c      	movs	r3, #12
 8007656:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007658:	3b0a      	subs	r3, #10
 800765a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800765e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007660:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007662:	f000 ff83 	bl	800856c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8007666:	4d39      	ldr	r5, [pc, #228]	; (800774c <HAL_UART_MspInit+0x1f4>)
 8007668:	4b39      	ldr	r3, [pc, #228]	; (8007750 <HAL_UART_MspInit+0x1f8>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800766a:	0028      	movs	r0, r5
    hdma_usart2_rx.Instance = DMA1_Channel3;
 800766c:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800766e:	2334      	movs	r3, #52	; 0x34
 8007670:	606b      	str	r3, [r5, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007672:	334c      	adds	r3, #76	; 0x4c
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007674:	60ae      	str	r6, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007676:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007678:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800767a:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800767c:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800767e:	61ee      	str	r6, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007680:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007682:	f000 fda9 	bl	80081d8 <HAL_DMA_Init>
 8007686:	2800      	cmp	r0, #0
 8007688:	d14e      	bne.n	8007728 <HAL_UART_MspInit+0x1d0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800768a:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 800768c:	2200      	movs	r2, #0
 800768e:	2103      	movs	r1, #3
 8007690:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8007692:	50e5      	str	r5, [r4, r3]
 8007694:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8007696:	f000 fd41 	bl	800811c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800769a:	201c      	movs	r0, #28
 800769c:	f000 fd70 	bl	8008180 <HAL_NVIC_EnableIRQ>
 80076a0:	e772      	b.n	8007588 <HAL_UART_MspInit+0x30>
    __HAL_RCC_USART3_CLK_ENABLE();
 80076a2:	2180      	movs	r1, #128	; 0x80
 80076a4:	4b26      	ldr	r3, [pc, #152]	; (8007740 <HAL_UART_MspInit+0x1e8>)
 80076a6:	02c9      	lsls	r1, r1, #11
 80076a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076aa:	482a      	ldr	r0, [pc, #168]	; (8007754 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80076ac:	430a      	orrs	r2, r1
 80076ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80076b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076b2:	400a      	ands	r2, r1
 80076b4:	9204      	str	r2, [sp, #16]
 80076b6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076b8:	2202      	movs	r2, #2
 80076ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80076bc:	4311      	orrs	r1, r2
 80076be:	6359      	str	r1, [r3, #52]	; 0x34
 80076c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076c2:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076c4:	4013      	ands	r3, r2
 80076c6:	9305      	str	r3, [sp, #20]
 80076c8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 80076ca:	2305      	movs	r3, #5
 80076cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80076ce:	3b01      	subs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076d0:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80076d2:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076d4:	f000 ff4a 	bl	800856c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 80076d8:	4d1f      	ldr	r5, [pc, #124]	; (8007758 <HAL_UART_MspInit+0x200>)
 80076da:	4b20      	ldr	r3, [pc, #128]	; (800775c <HAL_UART_MspInit+0x204>)
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076dc:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel4;
 80076de:	602b      	str	r3, [r5, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80076e0:	2337      	movs	r3, #55	; 0x37
 80076e2:	606b      	str	r3, [r5, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076e4:	3b27      	subs	r3, #39	; 0x27
 80076e6:	60ab      	str	r3, [r5, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076e8:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80076ea:	0028      	movs	r0, r5
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076ec:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076ee:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076f0:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076f2:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80076f4:	61eb      	str	r3, [r5, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076f6:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80076f8:	f000 fd6e 	bl	80081d8 <HAL_DMA_Init>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d116      	bne.n	800772e <HAL_UART_MspInit+0x1d6>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8007700:	2200      	movs	r2, #0
 8007702:	2103      	movs	r1, #3
 8007704:	201d      	movs	r0, #29
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8007706:	67e5      	str	r5, [r4, #124]	; 0x7c
 8007708:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 800770a:	f000 fd07 	bl	800811c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800770e:	201d      	movs	r0, #29
 8007710:	f000 fd36 	bl	8008180 <HAL_NVIC_EnableIRQ>
}
 8007714:	e738      	b.n	8007588 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8007716:	f7ff fe09 	bl	800732c <Error_Handler>
 800771a:	e772      	b.n	8007602 <HAL_UART_MspInit+0xaa>
      Error_Handler();
 800771c:	f7ff fe06 	bl	800732c <Error_Handler>
 8007720:	e73c      	b.n	800759c <HAL_UART_MspInit+0x44>
      Error_Handler();
 8007722:	f7ff fe03 	bl	800732c <Error_Handler>
 8007726:	e77f      	b.n	8007628 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8007728:	f7ff fe00 	bl	800732c <Error_Handler>
 800772c:	e7ad      	b.n	800768a <HAL_UART_MspInit+0x132>
      Error_Handler();
 800772e:	f7ff fdfd 	bl	800732c <Error_Handler>
 8007732:	e7e5      	b.n	8007700 <HAL_UART_MspInit+0x1a8>
 8007734:	40013800 	.word	0x40013800
 8007738:	40004400 	.word	0x40004400
 800773c:	40004800 	.word	0x40004800
 8007740:	40021000 	.word	0x40021000
 8007744:	2000466c 	.word	0x2000466c
 8007748:	4002001c 	.word	0x4002001c
 800774c:	200046c8 	.word	0x200046c8
 8007750:	40020030 	.word	0x40020030
 8007754:	50000400 	.word	0x50000400
 8007758:	20004724 	.word	0x20004724
 800775c:	40020044 	.word	0x40020044

08007760 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007760:	2180      	movs	r1, #128	; 0x80
 8007762:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <HAL_InitTick+0x88>)
{
 8007764:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007768:	0109      	lsls	r1, r1, #4
 800776a:	430a      	orrs	r2, r1
 800776c:	641a      	str	r2, [r3, #64]	; 0x40
 800776e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8007770:	b086      	sub	sp, #24
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007772:	400b      	ands	r3, r1
 8007774:	9301      	str	r3, [sp, #4]
{
 8007776:	0006      	movs	r6, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007778:	4669      	mov	r1, sp
 800777a:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 800777c:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800777e:	f001 ffd3 	bl	8009728 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007782:	9b05      	ldr	r3, [sp, #20]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d117      	bne.n	80077b8 <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007788:	f001 ffba 	bl	8009700 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800778c:	4c17      	ldr	r4, [pc, #92]	; (80077ec <HAL_InitTick+0x8c>)
 800778e:	4b18      	ldr	r3, [pc, #96]	; (80077f0 <HAL_InitTick+0x90>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007790:	4918      	ldr	r1, [pc, #96]	; (80077f4 <HAL_InitTick+0x94>)
  htim1.Instance = TIM1;
 8007792:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007794:	4b18      	ldr	r3, [pc, #96]	; (80077f8 <HAL_InitTick+0x98>)
 8007796:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007798:	f7f8 fcd2 	bl	8000140 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800779c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800779e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 80077a0:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 80077a2:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 80077a4:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077a6:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077a8:	61a3      	str	r3, [r4, #24]
  status = HAL_TIM_Base_Init(&htim1);
 80077aa:	f002 fd71 	bl	800a290 <HAL_TIM_Base_Init>
 80077ae:	1e05      	subs	r5, r0, #0
  if (status == HAL_OK)
 80077b0:	d006      	beq.n	80077c0 <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 80077b2:	0028      	movs	r0, r5
 80077b4:	b006      	add	sp, #24
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80077b8:	f001 ffa2 	bl	8009700 <HAL_RCC_GetPCLK1Freq>
 80077bc:	0040      	lsls	r0, r0, #1
 80077be:	e7e5      	b.n	800778c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim1);
 80077c0:	0020      	movs	r0, r4
 80077c2:	f002 fc25 	bl	800a010 <HAL_TIM_Base_Start_IT>
 80077c6:	1e05      	subs	r5, r0, #0
    if (status == HAL_OK)
 80077c8:	d1f3      	bne.n	80077b2 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80077ca:	200d      	movs	r0, #13
 80077cc:	f000 fcd8 	bl	8008180 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80077d0:	2e03      	cmp	r6, #3
 80077d2:	d901      	bls.n	80077d8 <HAL_InitTick+0x78>
        status = HAL_ERROR;
 80077d4:	2501      	movs	r5, #1
 80077d6:	e7ec      	b.n	80077b2 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80077d8:	2200      	movs	r2, #0
 80077da:	0031      	movs	r1, r6
 80077dc:	200d      	movs	r0, #13
 80077de:	f000 fc9d 	bl	800811c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80077e2:	4b06      	ldr	r3, [pc, #24]	; (80077fc <HAL_InitTick+0x9c>)
 80077e4:	601e      	str	r6, [r3, #0]
 80077e6:	e7e4      	b.n	80077b2 <HAL_InitTick+0x52>
 80077e8:	40021000 	.word	0x40021000
 80077ec:	20004aa8 	.word	0x20004aa8
 80077f0:	40012c00 	.word	0x40012c00
 80077f4:	000f4240 	.word	0x000f4240
 80077f8:	000003e7 	.word	0x000003e7
 80077fc:	20000124 	.word	0x20000124

08007800 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007800:	e7fe      	b.n	8007800 <NMI_Handler>
 8007802:	46c0      	nop			; (mov r8, r8)

08007804 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007804:	e7fe      	b.n	8007804 <HardFault_Handler>
 8007806:	46c0      	nop			; (mov r8, r8)

08007808 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007808:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800780a:	4802      	ldr	r0, [pc, #8]	; (8007814 <DMA1_Channel1_IRQHandler+0xc>)
 800780c:	f000 fe20 	bl	8008450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007810:	bd10      	pop	{r4, pc}
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	20004610 	.word	0x20004610

08007818 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007818:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800781a:	4803      	ldr	r0, [pc, #12]	; (8007828 <DMA1_Channel2_3_IRQHandler+0x10>)
 800781c:	f000 fe18 	bl	8008450 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007820:	4802      	ldr	r0, [pc, #8]	; (800782c <DMA1_Channel2_3_IRQHandler+0x14>)
 8007822:	f000 fe15 	bl	8008450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007826:	bd10      	pop	{r4, pc}
 8007828:	2000466c 	.word	0x2000466c
 800782c:	200046c8 	.word	0x200046c8

08007830 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8007830:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007832:	4803      	ldr	r0, [pc, #12]	; (8007840 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8007834:	f000 fe0c 	bl	8008450 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8007838:	4802      	ldr	r0, [pc, #8]	; (8007844 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800783a:	f000 fe65 	bl	8008508 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 800783e:	bd10      	pop	{r4, pc}
 8007840:	20004724 	.word	0x20004724
 8007844:	20004610 	.word	0x20004610

08007848 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8007848:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800784a:	4802      	ldr	r0, [pc, #8]	; (8007854 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 800784c:	f002 fc1a 	bl	800a084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8007850:	bd10      	pop	{r4, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	20004aa8 	.word	0x20004aa8

08007858 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8007858:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800785a:	4802      	ldr	r0, [pc, #8]	; (8007864 <TIM6_IRQHandler+0xc>)
 800785c:	f002 fc12 	bl	800a084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8007860:	bd10      	pop	{r4, pc}
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	20004838 	.word	0x20004838

08007868 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8007868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800786a:	4802      	ldr	r0, [pc, #8]	; (8007874 <USART1_IRQHandler+0xc>)
 800786c:	f002 fe02 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007870:	bd10      	pop	{r4, pc}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	20004884 	.word	0x20004884

08007878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8007878:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800787a:	4802      	ldr	r0, [pc, #8]	; (8007884 <USART2_IRQHandler+0xc>)
 800787c:	f002 fdfa 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007880:	bd10      	pop	{r4, pc}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	20004918 	.word	0x20004918

08007888 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8007888:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800788a:	4802      	ldr	r0, [pc, #8]	; (8007894 <USART3_4_IRQHandler+0xc>)
 800788c:	f002 fdf2 	bl	800a474 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8007890:	bd10      	pop	{r4, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	200049ac 	.word	0x200049ac

08007898 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8007898:	2001      	movs	r0, #1
 800789a:	4770      	bx	lr

0800789c <_kill>:

int _kill(int pid, int sig)
{
 800789c:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800789e:	f007 fa03 	bl	800eca8 <__errno>
 80078a2:	2316      	movs	r3, #22
 80078a4:	6003      	str	r3, [r0, #0]
  return -1;
 80078a6:	2001      	movs	r0, #1
}
 80078a8:	4240      	negs	r0, r0
 80078aa:	bd10      	pop	{r4, pc}

080078ac <_exit>:

void _exit (int status)
{
 80078ac:	b510      	push	{r4, lr}
  errno = EINVAL;
 80078ae:	f007 f9fb 	bl	800eca8 <__errno>
 80078b2:	2316      	movs	r3, #22
 80078b4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80078b6:	e7fe      	b.n	80078b6 <_exit+0xa>

080078b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078bc:	dd07      	ble.n	80078ce <_read+0x16>
 80078be:	000c      	movs	r4, r1
 80078c0:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 80078c2:	e000      	b.n	80078c6 <_read+0xe>
 80078c4:	bf00      	nop
 80078c6:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078c8:	3401      	adds	r4, #1
 80078ca:	42ac      	cmp	r4, r5
 80078cc:	d1f9      	bne.n	80078c2 <_read+0xa>
  }

  return len;
}
 80078ce:	0030      	movs	r0, r6
 80078d0:	bd70      	pop	{r4, r5, r6, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)

080078d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078d8:	dd07      	ble.n	80078ea <_write+0x16>
 80078da:	000c      	movs	r4, r1
 80078dc:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 80078de:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078e0:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 80078e2:	e000      	b.n	80078e6 <_write+0x12>
 80078e4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078e6:	42ac      	cmp	r4, r5
 80078e8:	d1f9      	bne.n	80078de <_write+0xa>
  }
  return len;
}
 80078ea:	0030      	movs	r0, r6
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	46c0      	nop			; (mov r8, r8)

080078f0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 80078f0:	2001      	movs	r0, #1
}
 80078f2:	4240      	negs	r0, r0
 80078f4:	4770      	bx	lr
 80078f6:	46c0      	nop			; (mov r8, r8)

080078f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80078f8:	2380      	movs	r3, #128	; 0x80
 80078fa:	019b      	lsls	r3, r3, #6
  return 0;
}
 80078fc:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80078fe:	604b      	str	r3, [r1, #4]
}
 8007900:	4770      	bx	lr
 8007902:	46c0      	nop			; (mov r8, r8)

08007904 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8007904:	2001      	movs	r0, #1
 8007906:	4770      	bx	lr

08007908 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8007908:	2000      	movs	r0, #0
 800790a:	4770      	bx	lr

0800790c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800790c:	490c      	ldr	r1, [pc, #48]	; (8007940 <_sbrk+0x34>)
 800790e:	4a0d      	ldr	r2, [pc, #52]	; (8007944 <_sbrk+0x38>)
{
 8007910:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007912:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007914:	490c      	ldr	r1, [pc, #48]	; (8007948 <_sbrk+0x3c>)
{
 8007916:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8007918:	6808      	ldr	r0, [r1, #0]
 800791a:	2800      	cmp	r0, #0
 800791c:	d004      	beq.n	8007928 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800791e:	18c3      	adds	r3, r0, r3
 8007920:	4293      	cmp	r3, r2
 8007922:	d806      	bhi.n	8007932 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8007924:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8007926:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8007928:	4808      	ldr	r0, [pc, #32]	; (800794c <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800792a:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 800792c:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800792e:	4293      	cmp	r3, r2
 8007930:	d9f8      	bls.n	8007924 <_sbrk+0x18>
    errno = ENOMEM;
 8007932:	f007 f9b9 	bl	800eca8 <__errno>
 8007936:	230c      	movs	r3, #12
 8007938:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800793a:	2001      	movs	r0, #1
 800793c:	4240      	negs	r0, r0
 800793e:	e7f2      	b.n	8007926 <_sbrk+0x1a>
 8007940:	00000400 	.word	0x00000400
 8007944:	20009000 	.word	0x20009000
 8007948:	20004af4 	.word	0x20004af4
 800794c:	20006628 	.word	0x20006628

08007950 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007950:	4770      	bx	lr
 8007952:	46c0      	nop			; (mov r8, r8)

08007954 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007954:	480d      	ldr	r0, [pc, #52]	; (800798c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007956:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007958:	f7ff fffa 	bl	8007950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800795c:	480c      	ldr	r0, [pc, #48]	; (8007990 <LoopForever+0x6>)
  ldr r1, =_edata
 800795e:	490d      	ldr	r1, [pc, #52]	; (8007994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007960:	4a0d      	ldr	r2, [pc, #52]	; (8007998 <LoopForever+0xe>)
  movs r3, #0
 8007962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007964:	e002      	b.n	800796c <LoopCopyDataInit>

08007966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800796a:	3304      	adds	r3, #4

0800796c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800796c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800796e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007970:	d3f9      	bcc.n	8007966 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007972:	4a0a      	ldr	r2, [pc, #40]	; (800799c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007974:	4c0a      	ldr	r4, [pc, #40]	; (80079a0 <LoopForever+0x16>)
  movs r3, #0
 8007976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007978:	e001      	b.n	800797e <LoopFillZerobss>

0800797a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800797a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800797c:	3204      	adds	r2, #4

0800797e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800797e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007980:	d3fb      	bcc.n	800797a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007982:	f007 f997 	bl	800ecb4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007986:	f7fd ffbd 	bl	8005904 <main>

0800798a <LoopForever>:

LoopForever:
  b LoopForever
 800798a:	e7fe      	b.n	800798a <LoopForever>
  ldr   r0, =_estack
 800798c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007994:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8007998:	08013bb8 	.word	0x08013bb8
  ldr r2, =_sbss
 800799c:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 80079a0:	20006624 	.word	0x20006624

080079a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80079a4:	e7fe      	b.n	80079a4 <ADC1_IRQHandler>
	...

080079a8 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079a8:	2380      	movs	r3, #128	; 0x80
 80079aa:	4a08      	ldr	r2, [pc, #32]	; (80079cc <HAL_Init+0x24>)
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	6811      	ldr	r1, [r2, #0]
{
 80079b0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079b2:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80079b4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079b6:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80079b8:	f7ff fed2 	bl	8007760 <HAL_InitTick>
 80079bc:	1e04      	subs	r4, r0, #0
 80079be:	d002      	beq.n	80079c6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80079c0:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80079c2:	0020      	movs	r0, r4
 80079c4:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80079c6:	f7ff fcb3 	bl	8007330 <HAL_MspInit>
 80079ca:	e7fa      	b.n	80079c2 <HAL_Init+0x1a>
 80079cc:	40022000 	.word	0x40022000

080079d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80079d0:	4a03      	ldr	r2, [pc, #12]	; (80079e0 <HAL_IncTick+0x10>)
 80079d2:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <HAL_IncTick+0x14>)
 80079d4:	6811      	ldr	r1, [r2, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	185b      	adds	r3, r3, r1
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	4770      	bx	lr
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	20004af8 	.word	0x20004af8
 80079e4:	20000120 	.word	0x20000120

080079e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80079e8:	4b01      	ldr	r3, [pc, #4]	; (80079f0 <HAL_GetTick+0x8>)
 80079ea:	6818      	ldr	r0, [r3, #0]
}
 80079ec:	4770      	bx	lr
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	20004af8 	.word	0x20004af8

080079f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80079f8:	f7ff fff6 	bl	80079e8 <HAL_GetTick>
 80079fc:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079fe:	1c63      	adds	r3, r4, #1
 8007a00:	d002      	beq.n	8007a08 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a02:	4b04      	ldr	r3, [pc, #16]	; (8007a14 <HAL_Delay+0x20>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007a08:	f7ff ffee 	bl	80079e8 <HAL_GetTick>
 8007a0c:	1b40      	subs	r0, r0, r5
 8007a0e:	42a0      	cmp	r0, r4
 8007a10:	d3fa      	bcc.n	8007a08 <HAL_Delay+0x14>
  {
  }
}
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	20000120 	.word	0x20000120

08007a18 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007a18:	4a03      	ldr	r2, [pc, #12]	; (8007a28 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8007a1a:	4904      	ldr	r1, [pc, #16]	; (8007a2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8007a1c:	6813      	ldr	r3, [r2, #0]
 8007a1e:	400b      	ands	r3, r1
 8007a20:	4303      	orrs	r3, r0
 8007a22:	6013      	str	r3, [r2, #0]
}
 8007a24:	4770      	bx	lr
 8007a26:	46c0      	nop			; (mov r8, r8)
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	fffff9ff 	.word	0xfffff9ff

08007a30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a32:	46d6      	mov	lr, sl
 8007a34:	464f      	mov	r7, r9
 8007a36:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007a38:	2300      	movs	r3, #0
{
 8007a3a:	b5c0      	push	{r6, r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8007a40:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8007a42:	d100      	bne.n	8007a46 <HAL_ADC_Init+0x16>
 8007a44:	e0d8      	b.n	8007bf8 <HAL_ADC_Init+0x1c8>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007a46:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	d100      	bne.n	8007a4e <HAL_ADC_Init+0x1e>
 8007a4c:	e0a8      	b.n	8007ba0 <HAL_ADC_Init+0x170>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a4e:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007a50:	6825      	ldr	r5, [r4, #0]
 8007a52:	055b      	lsls	r3, r3, #21
 8007a54:	68aa      	ldr	r2, [r5, #8]
 8007a56:	421a      	tst	r2, r3
 8007a58:	d115      	bne.n	8007a86 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8007a5a:	68aa      	ldr	r2, [r5, #8]
 8007a5c:	497d      	ldr	r1, [pc, #500]	; (8007c54 <HAL_ADC_Init+0x224>)
 8007a5e:	400a      	ands	r2, r1
 8007a60:	4313      	orrs	r3, r2
 8007a62:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007a64:	4b7c      	ldr	r3, [pc, #496]	; (8007c58 <HAL_ADC_Init+0x228>)
 8007a66:	497d      	ldr	r1, [pc, #500]	; (8007c5c <HAL_ADC_Init+0x22c>)
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	f7f8 fb69 	bl	8000140 <__udivsi3>
 8007a6e:	3001      	adds	r0, #1
 8007a70:	0040      	lsls	r0, r0, #1
 8007a72:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d005      	beq.n	8007a86 <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 8007a7a:	9b01      	ldr	r3, [sp, #4]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007a80:	9b01      	ldr	r3, [sp, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1f9      	bne.n	8007a7a <HAL_ADC_Init+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a86:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a88:	2000      	movs	r0, #0
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	d400      	bmi.n	8007a90 <HAL_ADC_Init+0x60>
 8007a8e:	e07a      	b.n	8007b86 <HAL_ADC_Init+0x156>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a90:	68ab      	ldr	r3, [r5, #8]
 8007a92:	075b      	lsls	r3, r3, #29
 8007a94:	d50b      	bpl.n	8007aae <HAL_ADC_Init+0x7e>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a96:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a98:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8007a9a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8007aa2:	b002      	add	sp, #8
 8007aa4:	bce0      	pop	{r5, r6, r7}
 8007aa6:	46ba      	mov	sl, r7
 8007aa8:	46b1      	mov	r9, r6
 8007aaa:	46a8      	mov	r8, r5
 8007aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007aae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ab0:	06db      	lsls	r3, r3, #27
 8007ab2:	d4f1      	bmi.n	8007a98 <HAL_ADC_Init+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8007ab4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ab6:	4a6a      	ldr	r2, [pc, #424]	; (8007c60 <HAL_ADC_Init+0x230>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	3206      	adds	r2, #6
 8007abc:	32ff      	adds	r2, #255	; 0xff
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007ac2:	68ab      	ldr	r3, [r5, #8]
 8007ac4:	07db      	lsls	r3, r3, #31
 8007ac6:	d471      	bmi.n	8007bac <HAL_ADC_Init+0x17c>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007ac8:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007aca:	68a2      	ldr	r2, [r4, #8]
 8007acc:	1e7b      	subs	r3, r7, #1
 8007ace:	419f      	sbcs	r7, r3
 8007ad0:	68e3      	ldr	r3, [r4, #12]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007ad2:	7ea6      	ldrb	r6, [r4, #26]
 8007ad4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007ad6:	7e23      	ldrb	r3, [r4, #24]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007ad8:	6921      	ldr	r1, [r4, #16]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007ada:	039b      	lsls	r3, r3, #14
 8007adc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007ade:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007ae0:	033f      	lsls	r7, r7, #12
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007ae2:	03db      	lsls	r3, r3, #15
 8007ae4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007ae6:	0373      	lsls	r3, r6, #13
 8007ae8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007aea:	2900      	cmp	r1, #0
 8007aec:	da00      	bge.n	8007af0 <HAL_ADC_Init+0xc0>
 8007aee:	e09f      	b.n	8007c30 <HAL_ADC_Init+0x200>
 8007af0:	2380      	movs	r3, #128	; 0x80
 8007af2:	039b      	lsls	r3, r3, #14
 8007af4:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007af6:	232c      	movs	r3, #44	; 0x2c
 8007af8:	5ce3      	ldrb	r3, [r4, r3]
 8007afa:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007afc:	4313      	orrs	r3, r2
 8007afe:	433b      	orrs	r3, r7
 8007b00:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b02:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007b04:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007b06:	5de2      	ldrb	r2, [r4, r7]
 8007b08:	2a01      	cmp	r2, #1
 8007b0a:	d100      	bne.n	8007b0e <HAL_ADC_Init+0xde>
 8007b0c:	e094      	b.n	8007c38 <HAL_ADC_Init+0x208>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007b10:	2a00      	cmp	r2, #0
 8007b12:	d005      	beq.n	8007b20 <HAL_ADC_Init+0xf0>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007b14:	26e0      	movs	r6, #224	; 0xe0
 8007b16:	0076      	lsls	r6, r6, #1
 8007b18:	4032      	ands	r2, r6
 8007b1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b1c:	4332      	orrs	r2, r6
 8007b1e:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 8007b20:	273c      	movs	r7, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8007b22:	68ea      	ldr	r2, [r5, #12]
 8007b24:	4e4f      	ldr	r6, [pc, #316]	; (8007c64 <HAL_ADC_Init+0x234>)
 8007b26:	4032      	ands	r2, r6
 8007b28:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007b2a:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8007b2c:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007b2e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8007b30:	5de7      	ldrb	r7, [r4, r7]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007b32:	0fb3      	lsrs	r3, r6, #30
 8007b34:	079b      	lsls	r3, r3, #30
 8007b36:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8007b38:	46bc      	mov	ip, r7
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007b3a:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8007b3c:	2f01      	cmp	r7, #1
 8007b3e:	d109      	bne.n	8007b54 <HAL_ADC_Init+0x124>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8007b40:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8007b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b44:	433b      	orrs	r3, r7
 8007b46:	431a      	orrs	r2, r3
 8007b48:	4653      	mov	r3, sl
 8007b4a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8007b4c:	433a      	orrs	r2, r7
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	4663      	mov	r3, ip
 8007b52:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8007b54:	692b      	ldr	r3, [r5, #16]
 8007b56:	4f44      	ldr	r7, [pc, #272]	; (8007c68 <HAL_ADC_Init+0x238>)
 8007b58:	403b      	ands	r3, r7
 8007b5a:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007b5c:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8007b5e:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007b60:	0073      	lsls	r3, r6, #1
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	05d2      	lsls	r2, r2, #23
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d021      	beq.n	8007bae <HAL_ADC_Init+0x17e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007b6a:	2380      	movs	r3, #128	; 0x80
 8007b6c:	061b      	lsls	r3, r3, #24
 8007b6e:	429e      	cmp	r6, r3
 8007b70:	d01d      	beq.n	8007bae <HAL_ADC_Init+0x17e>
        MODIFY_REG(ADC1_COMMON->CCR,
 8007b72:	4a3e      	ldr	r2, [pc, #248]	; (8007c6c <HAL_ADC_Init+0x23c>)
 8007b74:	4f3e      	ldr	r7, [pc, #248]	; (8007c70 <HAL_ADC_Init+0x240>)
 8007b76:	6813      	ldr	r3, [r2, #0]
 8007b78:	403b      	ands	r3, r7
 8007b7a:	27f0      	movs	r7, #240	; 0xf0
 8007b7c:	03bf      	lsls	r7, r7, #14
 8007b7e:	403e      	ands	r6, r7
 8007b80:	4333      	orrs	r3, r6
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	e013      	b.n	8007bae <HAL_ADC_Init+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b86:	2210      	movs	r2, #16
 8007b88:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8007b8a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b92:	3a0f      	subs	r2, #15
 8007b94:	4313      	orrs	r3, r2
 8007b96:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b98:	68ab      	ldr	r3, [r5, #8]
 8007b9a:	075b      	lsls	r3, r3, #29
 8007b9c:	d587      	bpl.n	8007aae <HAL_ADC_Init+0x7e>
 8007b9e:	e77a      	b.n	8007a96 <HAL_ADC_Init+0x66>
    HAL_ADC_MspInit(hadc);
 8007ba0:	f7ff fbe8 	bl	8007374 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8007ba4:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8007ba6:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8007ba8:	54e5      	strb	r5, [r4, r3]
 8007baa:	e750      	b.n	8007a4e <HAL_ADC_Init+0x1e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007bac:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8007bae:	2607      	movs	r6, #7
 8007bb0:	2770      	movs	r7, #112	; 0x70
 8007bb2:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007bb4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007bb6:	43b3      	bics	r3, r6
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	616b      	str	r3, [r5, #20]
 8007bbc:	696e      	ldr	r6, [r5, #20]
 8007bbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bc0:	43be      	bics	r6, r7
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	4333      	orrs	r3, r6
 8007bc6:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	d117      	bne.n	8007bfc <HAL_ADC_Init+0x1cc>
      SET_BIT(hadc->Instance->CHSELR,
 8007bcc:	2310      	movs	r3, #16
 8007bce:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007bd0:	425b      	negs	r3, r3
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007bd6:	2307      	movs	r3, #7
 8007bd8:	6969      	ldr	r1, [r5, #20]
 8007bda:	400b      	ands	r3, r1
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d01e      	beq.n	8007c1e <HAL_ADC_Init+0x1ee>
      ADC_STATE_CLR_SET(hadc->State,
 8007be0:	2212      	movs	r2, #18
 8007be2:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8007be4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8007be6:	4393      	bics	r3, r2
 8007be8:	3a02      	subs	r2, #2
 8007bea:	4313      	orrs	r3, r2
 8007bec:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007bf0:	3a0f      	subs	r2, #15
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8007bf6:	e754      	b.n	8007aa2 <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	e752      	b.n	8007aa2 <HAL_ADC_Init+0x72>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	039b      	lsls	r3, r3, #14
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d1e8      	bne.n	8007bd6 <HAL_ADC_Init+0x1a6>
      MODIFY_REG(hadc->Instance->CHSELR,
 8007c04:	211c      	movs	r1, #28
 8007c06:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007c08:	69e3      	ldr	r3, [r4, #28]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4019      	ands	r1, r3
 8007c10:	2310      	movs	r3, #16
 8007c12:	425b      	negs	r3, r3
 8007c14:	408b      	lsls	r3, r1
 8007c16:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007c18:	430b      	orrs	r3, r1
 8007c1a:	62ab      	str	r3, [r5, #40]	; 0x28
 8007c1c:	e7db      	b.n	8007bd6 <HAL_ADC_Init+0x1a6>
      ADC_CLEAR_ERRORCODE(hadc);
 8007c1e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8007c20:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8007c22:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8007c24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c26:	4393      	bics	r3, r2
 8007c28:	3a02      	subs	r2, #2
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c2e:	e738      	b.n	8007aa2 <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007c30:	004b      	lsls	r3, r1, #1
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	469c      	mov	ip, r3
 8007c36:	e75e      	b.n	8007af6 <HAL_ADC_Init+0xc6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007c38:	2e00      	cmp	r6, #0
 8007c3a:	d103      	bne.n	8007c44 <HAL_ADC_Init+0x214>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8007c3c:	2280      	movs	r2, #128	; 0x80
 8007c3e:	0252      	lsls	r2, r2, #9
 8007c40:	4313      	orrs	r3, r2
 8007c42:	e764      	b.n	8007b0e <HAL_ADC_Init+0xde>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c44:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8007c46:	433e      	orrs	r6, r7
 8007c48:	65a6      	str	r6, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c4a:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8007c4c:	4332      	orrs	r2, r6
 8007c4e:	65e2      	str	r2, [r4, #92]	; 0x5c
 8007c50:	e75d      	b.n	8007b0e <HAL_ADC_Init+0xde>
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	6fffffe8 	.word	0x6fffffe8
 8007c58:	2000011c 	.word	0x2000011c
 8007c5c:	00030d40 	.word	0x00030d40
 8007c60:	fffffefd 	.word	0xfffffefd
 8007c64:	fffe0201 	.word	0xfffe0201
 8007c68:	1ffffc02 	.word	0x1ffffc02
 8007c6c:	40012708 	.word	0x40012708
 8007c70:	ffc3ffff 	.word	0xffc3ffff

08007c74 <HAL_ADC_ConvCpltCallback>:
 8007c74:	4770      	bx	lr
 8007c76:	46c0      	nop			; (mov r8, r8)

08007c78 <HAL_ADC_ConvHalfCpltCallback>:
 8007c78:	4770      	bx	lr
 8007c7a:	46c0      	nop			; (mov r8, r8)

08007c7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c7c:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007c7e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007c80:	f7ff fffa 	bl	8007c78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c84:	bd10      	pop	{r4, pc}
 8007c86:	46c0      	nop			; (mov r8, r8)

08007c88 <HAL_ADC_ErrorCallback>:
 8007c88:	4770      	bx	lr
 8007c8a:	46c0      	nop			; (mov r8, r8)

08007c8c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007c8c:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8007c90:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007c92:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007c94:	4313      	orrs	r3, r2
 8007c96:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007c98:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007c9a:	3a3c      	subs	r2, #60	; 0x3c
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007ca0:	f7ff fff2 	bl	8007c88 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)

08007ca8 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007ca8:	2150      	movs	r1, #80	; 0x50
{
 8007caa:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cac:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8007cae:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007cb0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007cb2:	4211      	tst	r1, r2
 8007cb4:	d10d      	bne.n	8007cd2 <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007cb6:	2380      	movs	r3, #128	; 0x80
 8007cb8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8007cbe:	22c0      	movs	r2, #192	; 0xc0
 8007cc0:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007cc2:	6803      	ldr	r3, [r0, #0]
 8007cc4:	0112      	lsls	r2, r2, #4
 8007cc6:	68d9      	ldr	r1, [r3, #12]
 8007cc8:	4211      	tst	r1, r2
 8007cca:	d00a      	beq.n	8007ce2 <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8007ccc:	f7ff ffd2 	bl	8007c74 <HAL_ADC_ConvCpltCallback>
}
 8007cd0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007cd2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007cd4:	06d2      	lsls	r2, r2, #27
 8007cd6:	d416      	bmi.n	8007d06 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007cd8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007cda:	0018      	movs	r0, r3
 8007cdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007cde:	4790      	blx	r2
}
 8007ce0:	e7f6      	b.n	8007cd0 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007ce2:	7e82      	ldrb	r2, [r0, #26]
 8007ce4:	2a00      	cmp	r2, #0
 8007ce6:	d1f1      	bne.n	8007ccc <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	0712      	lsls	r2, r2, #28
 8007cec:	d5ee      	bpl.n	8007ccc <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	0752      	lsls	r2, r2, #29
 8007cf2:	d50b      	bpl.n	8007d0c <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007cfc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007cfe:	3a1f      	subs	r2, #31
 8007d00:	4313      	orrs	r3, r2
 8007d02:	65c3      	str	r3, [r0, #92]	; 0x5c
 8007d04:	e7e2      	b.n	8007ccc <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 8007d06:	f7ff ffbf 	bl	8007c88 <HAL_ADC_ErrorCallback>
 8007d0a:	e7e1      	b.n	8007cd0 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007d0c:	210c      	movs	r1, #12
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	438a      	bics	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8007d14:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007d16:	4a03      	ldr	r2, [pc, #12]	; (8007d24 <ADC_DMAConvCplt+0x7c>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	3204      	adds	r2, #4
 8007d1c:	32ff      	adds	r2, #255	; 0xff
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	6583      	str	r3, [r0, #88]	; 0x58
 8007d22:	e7d3      	b.n	8007ccc <ADC_DMAConvCplt+0x24>
 8007d24:	fffffefe 	.word	0xfffffefe

08007d28 <HAL_ADC_ConfigChannel>:
{
 8007d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d2a:	4645      	mov	r5, r8
 8007d2c:	46de      	mov	lr, fp
 8007d2e:	4657      	mov	r7, sl
 8007d30:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 8007d32:	2300      	movs	r3, #0
{
 8007d34:	b5e0      	push	{r5, r6, r7, lr}
 8007d36:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8007d38:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8007d3a:	3354      	adds	r3, #84	; 0x54
 8007d3c:	5cc2      	ldrb	r2, [r0, r3]
{
 8007d3e:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007d40:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8007d42:	2a01      	cmp	r2, #1
 8007d44:	d100      	bne.n	8007d48 <HAL_ADC_ConfigChannel+0x20>
 8007d46:	e091      	b.n	8007e6c <HAL_ADC_ConfigChannel+0x144>
 8007d48:	2001      	movs	r0, #1
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	689e      	ldr	r6, [r3, #8]
 8007d52:	4232      	tst	r2, r6
 8007d54:	d00d      	beq.n	8007d72 <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d58:	321c      	adds	r2, #28
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8007d5e:	2354      	movs	r3, #84	; 0x54
 8007d60:	2200      	movs	r2, #0
 8007d62:	54e2      	strb	r2, [r4, r3]
}
 8007d64:	b005      	add	sp, #20
 8007d66:	bcf0      	pop	{r4, r5, r6, r7}
 8007d68:	46bb      	mov	fp, r7
 8007d6a:	46b2      	mov	sl, r6
 8007d6c:	46a9      	mov	r9, r5
 8007d6e:	46a0      	mov	r8, r4
 8007d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8007d72:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007d74:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8007d76:	2e02      	cmp	r6, #2
 8007d78:	d05c      	beq.n	8007e34 <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007d7a:	2780      	movs	r7, #128	; 0x80
 8007d7c:	063f      	lsls	r7, r7, #24
 8007d7e:	42bd      	cmp	r5, r7
 8007d80:	d051      	beq.n	8007e26 <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007d82:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8007d84:	270f      	movs	r7, #15
 8007d86:	46aa      	mov	sl, r5
 8007d88:	251f      	movs	r5, #31
 8007d8a:	46ac      	mov	ip, r5
 8007d8c:	4035      	ands	r5, r6
 8007d8e:	40af      	lsls	r7, r5
 8007d90:	46a9      	mov	r9, r5
 8007d92:	43fd      	mvns	r5, r7
 8007d94:	9500      	str	r5, [sp, #0]
 8007d96:	4655      	mov	r5, sl
 8007d98:	43bd      	bics	r5, r7
 8007d9a:	46a8      	mov	r8, r5
 8007d9c:	680d      	ldr	r5, [r1, #0]
 8007d9e:	9701      	str	r7, [sp, #4]
 8007da0:	036f      	lsls	r7, r5, #13
 8007da2:	d16c      	bne.n	8007e7e <HAL_ADC_ConfigChannel+0x156>
 8007da4:	4660      	mov	r0, ip
 8007da6:	0eaa      	lsrs	r2, r5, #26
 8007da8:	4010      	ands	r0, r2
 8007daa:	0002      	movs	r2, r0
 8007dac:	4648      	mov	r0, r9
 8007dae:	4082      	lsls	r2, r0
 8007db0:	4640      	mov	r0, r8
 8007db2:	4310      	orrs	r0, r2
 8007db4:	4680      	mov	r8, r0
 8007db6:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007db8:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007dba:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007dbc:	69e2      	ldr	r2, [r4, #28]
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	4296      	cmp	r6, r2
 8007dc2:	d808      	bhi.n	8007dd6 <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 8007dc4:	464e      	mov	r6, r9
 8007dc6:	00aa      	lsls	r2, r5, #2
 8007dc8:	0f12      	lsrs	r2, r2, #28
 8007dca:	40b2      	lsls	r2, r6
 8007dcc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007dce:	9e00      	ldr	r6, [sp, #0]
 8007dd0:	4030      	ands	r0, r6
 8007dd2:	4302      	orrs	r2, r0
 8007dd4:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8007dd6:	0228      	lsls	r0, r5, #8
 8007dd8:	688a      	ldr	r2, [r1, #8]
 8007dda:	0001      	movs	r1, r0
 8007ddc:	695e      	ldr	r6, [r3, #20]
 8007dde:	4002      	ands	r2, r0
 8007de0:	4866      	ldr	r0, [pc, #408]	; (8007f7c <HAL_ADC_ConfigChannel+0x254>)
 8007de2:	438e      	bics	r6, r1
 8007de4:	4002      	ands	r2, r0
 8007de6:	4332      	orrs	r2, r6
 8007de8:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	db01      	blt.n	8007df2 <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dee:	2000      	movs	r0, #0
}
 8007df0:	e7b5      	b.n	8007d5e <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007df2:	21e0      	movs	r1, #224	; 0xe0
 8007df4:	4862      	ldr	r0, [pc, #392]	; (8007f80 <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007df6:	4a63      	ldr	r2, [pc, #396]	; (8007f84 <HAL_ADC_ConfigChannel+0x25c>)
 8007df8:	6803      	ldr	r3, [r0, #0]
 8007dfa:	0449      	lsls	r1, r1, #17
 8007dfc:	4019      	ands	r1, r3
 8007dfe:	4295      	cmp	r5, r2
 8007e00:	d051      	beq.n	8007ea6 <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007e02:	4a61      	ldr	r2, [pc, #388]	; (8007f88 <HAL_ADC_ConfigChannel+0x260>)
 8007e04:	4295      	cmp	r5, r2
 8007e06:	d045      	beq.n	8007e94 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007e08:	4a60      	ldr	r2, [pc, #384]	; (8007f8c <HAL_ADC_ConfigChannel+0x264>)
 8007e0a:	4295      	cmp	r5, r2
 8007e0c:	d1ef      	bne.n	8007dee <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007e0e:	2280      	movs	r2, #128	; 0x80
 8007e10:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007e12:	4213      	tst	r3, r2
 8007e14:	d1eb      	bne.n	8007dee <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007e16:	6803      	ldr	r3, [r0, #0]
 8007e18:	4d5d      	ldr	r5, [pc, #372]	; (8007f90 <HAL_ADC_ConfigChannel+0x268>)
 8007e1a:	402b      	ands	r3, r5
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e22:	2000      	movs	r0, #0
}
 8007e24:	e79b      	b.n	8007d5e <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007e26:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007e28:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e2a:	036a      	lsls	r2, r5, #13
 8007e2c:	0b52      	lsrs	r2, r2, #13
 8007e2e:	4302      	orrs	r2, r0
 8007e30:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007e32:	e7d0      	b.n	8007dd6 <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007e34:	2280      	movs	r2, #128	; 0x80
 8007e36:	0612      	lsls	r2, r2, #24
 8007e38:	4295      	cmp	r5, r2
 8007e3a:	d019      	beq.n	8007e70 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8007e3c:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	dad5      	bge.n	8007dee <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007e42:	494f      	ldr	r1, [pc, #316]	; (8007f80 <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007e44:	484f      	ldr	r0, [pc, #316]	; (8007f84 <HAL_ADC_ConfigChannel+0x25c>)
 8007e46:	680b      	ldr	r3, [r1, #0]
 8007e48:	4282      	cmp	r2, r0
 8007e4a:	d029      	beq.n	8007ea0 <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8007e4c:	484e      	ldr	r0, [pc, #312]	; (8007f88 <HAL_ADC_ConfigChannel+0x260>)
 8007e4e:	4282      	cmp	r2, r0
 8007e50:	d04c      	beq.n	8007eec <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007e52:	484e      	ldr	r0, [pc, #312]	; (8007f8c <HAL_ADC_ConfigChannel+0x264>)
 8007e54:	4282      	cmp	r2, r0
 8007e56:	d1ca      	bne.n	8007dee <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007e58:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007e5a:	680a      	ldr	r2, [r1, #0]
 8007e5c:	0440      	lsls	r0, r0, #17
 8007e5e:	4003      	ands	r3, r0
 8007e60:	484b      	ldr	r0, [pc, #300]	; (8007f90 <HAL_ADC_ConfigChannel+0x268>)
 8007e62:	4002      	ands	r2, r0
 8007e64:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e66:	2000      	movs	r0, #0
 8007e68:	600b      	str	r3, [r1, #0]
 8007e6a:	e778      	b.n	8007d5e <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8007e6c:	2002      	movs	r0, #2
 8007e6e:	e779      	b.n	8007d64 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8007e70:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007e72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007e74:	0350      	lsls	r0, r2, #13
 8007e76:	0b40      	lsrs	r0, r0, #13
 8007e78:	4381      	bics	r1, r0
 8007e7a:	6299      	str	r1, [r3, #40]	; 0x28
}
 8007e7c:	e7df      	b.n	8007e3e <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007e7e:	4228      	tst	r0, r5
 8007e80:	d199      	bne.n	8007db6 <HAL_ADC_ConfigChannel+0x8e>
 8007e82:	2702      	movs	r7, #2
 8007e84:	422f      	tst	r7, r5
 8007e86:	d02d      	beq.n	8007ee4 <HAL_ADC_ConfigChannel+0x1bc>
 8007e88:	464a      	mov	r2, r9
 8007e8a:	4090      	lsls	r0, r2
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	4302      	orrs	r2, r0
 8007e90:	4690      	mov	r8, r2
 8007e92:	e790      	b.n	8007db6 <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007e94:	2280      	movs	r2, #128	; 0x80
 8007e96:	0452      	lsls	r2, r2, #17
 8007e98:	4213      	tst	r3, r2
 8007e9a:	d0bc      	beq.n	8007e16 <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e75e      	b.n	8007d5e <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007ea0:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007ea2:	680a      	ldr	r2, [r1, #0]
 8007ea4:	e7da      	b.n	8007e5c <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007ea6:	2280      	movs	r2, #128	; 0x80
 8007ea8:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007eaa:	4213      	tst	r3, r2
 8007eac:	d19f      	bne.n	8007dee <HAL_ADC_ConfigChannel+0xc6>
 8007eae:	6803      	ldr	r3, [r0, #0]
 8007eb0:	4d37      	ldr	r5, [pc, #220]	; (8007f90 <HAL_ADC_ConfigChannel+0x268>)
 8007eb2:	402b      	ands	r3, r5
 8007eb4:	430b      	orrs	r3, r1
 8007eb6:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007eb8:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <HAL_ADC_ConfigChannel+0x26c>)
 8007eba:	6002      	str	r2, [r0, #0]
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	4936      	ldr	r1, [pc, #216]	; (8007f98 <HAL_ADC_ConfigChannel+0x270>)
 8007ec0:	f7f8 f93e 	bl	8000140 <__udivsi3>
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	0043      	lsls	r3, r0, #1
 8007ec8:	181b      	adds	r3, r3, r0
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8007ece:	9b03      	ldr	r3, [sp, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d08c      	beq.n	8007dee <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f9      	bne.n	8007ed4 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e73c      	b.n	8007d5e <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007ee4:	422a      	tst	r2, r5
 8007ee6:	d005      	beq.n	8007ef4 <HAL_ADC_ConfigChannel+0x1cc>
 8007ee8:	003a      	movs	r2, r7
 8007eea:	e75f      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007eec:	20c0      	movs	r0, #192	; 0xc0
 8007eee:	680a      	ldr	r2, [r1, #0]
 8007ef0:	0400      	lsls	r0, r0, #16
 8007ef2:	e7b4      	b.n	8007e5e <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007ef4:	072a      	lsls	r2, r5, #28
 8007ef6:	d501      	bpl.n	8007efc <HAL_ADC_ConfigChannel+0x1d4>
 8007ef8:	2203      	movs	r2, #3
 8007efa:	e757      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007efc:	06ea      	lsls	r2, r5, #27
 8007efe:	d501      	bpl.n	8007f04 <HAL_ADC_ConfigChannel+0x1dc>
 8007f00:	2204      	movs	r2, #4
 8007f02:	e753      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f04:	06aa      	lsls	r2, r5, #26
 8007f06:	d501      	bpl.n	8007f0c <HAL_ADC_ConfigChannel+0x1e4>
 8007f08:	2205      	movs	r2, #5
 8007f0a:	e74f      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f0c:	066a      	lsls	r2, r5, #25
 8007f0e:	d501      	bpl.n	8007f14 <HAL_ADC_ConfigChannel+0x1ec>
 8007f10:	2206      	movs	r2, #6
 8007f12:	e74b      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f14:	062a      	lsls	r2, r5, #24
 8007f16:	d501      	bpl.n	8007f1c <HAL_ADC_ConfigChannel+0x1f4>
 8007f18:	2207      	movs	r2, #7
 8007f1a:	e747      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f1c:	05ea      	lsls	r2, r5, #23
 8007f1e:	d501      	bpl.n	8007f24 <HAL_ADC_ConfigChannel+0x1fc>
 8007f20:	2208      	movs	r2, #8
 8007f22:	e743      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f24:	05aa      	lsls	r2, r5, #22
 8007f26:	d501      	bpl.n	8007f2c <HAL_ADC_ConfigChannel+0x204>
 8007f28:	2209      	movs	r2, #9
 8007f2a:	e73f      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f2c:	056a      	lsls	r2, r5, #21
 8007f2e:	d501      	bpl.n	8007f34 <HAL_ADC_ConfigChannel+0x20c>
 8007f30:	220a      	movs	r2, #10
 8007f32:	e73b      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f34:	052a      	lsls	r2, r5, #20
 8007f36:	d501      	bpl.n	8007f3c <HAL_ADC_ConfigChannel+0x214>
 8007f38:	220b      	movs	r2, #11
 8007f3a:	e737      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f3c:	04ea      	lsls	r2, r5, #19
 8007f3e:	d501      	bpl.n	8007f44 <HAL_ADC_ConfigChannel+0x21c>
 8007f40:	220c      	movs	r2, #12
 8007f42:	e733      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f44:	04aa      	lsls	r2, r5, #18
 8007f46:	d501      	bpl.n	8007f4c <HAL_ADC_ConfigChannel+0x224>
 8007f48:	220d      	movs	r2, #13
 8007f4a:	e72f      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f4c:	046a      	lsls	r2, r5, #17
 8007f4e:	d501      	bpl.n	8007f54 <HAL_ADC_ConfigChannel+0x22c>
 8007f50:	220e      	movs	r2, #14
 8007f52:	e72b      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f54:	042a      	lsls	r2, r5, #16
 8007f56:	d504      	bpl.n	8007f62 <HAL_ADC_ConfigChannel+0x23a>
 8007f58:	4652      	mov	r2, sl
 8007f5a:	9801      	ldr	r0, [sp, #4]
 8007f5c:	4302      	orrs	r2, r0
 8007f5e:	4690      	mov	r8, r2
 8007f60:	e729      	b.n	8007db6 <HAL_ADC_ConfigChannel+0x8e>
 8007f62:	03ea      	lsls	r2, r5, #15
 8007f64:	d501      	bpl.n	8007f6a <HAL_ADC_ConfigChannel+0x242>
 8007f66:	2210      	movs	r2, #16
 8007f68:	e720      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f6a:	03aa      	lsls	r2, r5, #14
 8007f6c:	d501      	bpl.n	8007f72 <HAL_ADC_ConfigChannel+0x24a>
 8007f6e:	2211      	movs	r2, #17
 8007f70:	e71c      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f72:	036a      	lsls	r2, r5, #13
 8007f74:	d400      	bmi.n	8007f78 <HAL_ADC_ConfigChannel+0x250>
 8007f76:	e71e      	b.n	8007db6 <HAL_ADC_ConfigChannel+0x8e>
 8007f78:	2212      	movs	r2, #18
 8007f7a:	e717      	b.n	8007dac <HAL_ADC_ConfigChannel+0x84>
 8007f7c:	07ffff00 	.word	0x07ffff00
 8007f80:	40012708 	.word	0x40012708
 8007f84:	b0001000 	.word	0xb0001000
 8007f88:	b8004000 	.word	0xb8004000
 8007f8c:	b4002000 	.word	0xb4002000
 8007f90:	fe3fffff 	.word	0xfe3fffff
 8007f94:	2000011c 	.word	0x2000011c
 8007f98:	00030d40 	.word	0x00030d40

08007f9c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8007f9c:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f9e:	2201      	movs	r2, #1
{
 8007fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fa2:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8007fa4:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007fa6:	6803      	ldr	r3, [r0, #0]
{
 8007fa8:	0004      	movs	r4, r0
 8007faa:	6899      	ldr	r1, [r3, #8]
 8007fac:	420a      	tst	r2, r1
 8007fae:	d11f      	bne.n	8007ff0 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007fb0:	6898      	ldr	r0, [r3, #8]
 8007fb2:	4928      	ldr	r1, [pc, #160]	; (8008054 <ADC_Enable+0xb8>)
 8007fb4:	4208      	tst	r0, r1
 8007fb6:	d11e      	bne.n	8007ff6 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8007fb8:	6899      	ldr	r1, [r3, #8]
 8007fba:	4827      	ldr	r0, [pc, #156]	; (8008058 <ADC_Enable+0xbc>)
 8007fbc:	4001      	ands	r1, r0
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007fc2:	4b26      	ldr	r3, [pc, #152]	; (800805c <ADC_Enable+0xc0>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	d50f      	bpl.n	8007fea <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007fca:	4b25      	ldr	r3, [pc, #148]	; (8008060 <ADC_Enable+0xc4>)
 8007fcc:	4925      	ldr	r1, [pc, #148]	; (8008064 <ADC_Enable+0xc8>)
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	f7f8 f8b6 	bl	8000140 <__udivsi3>
 8007fd4:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8007fd6:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <ADC_Enable+0x4e>
        wait_loop_index--;
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f9      	bne.n	8007fde <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007fea:	7e63      	ldrb	r3, [r4, #25]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d10b      	bne.n	8008008 <ADC_Enable+0x6c>
  return HAL_OK;
 8007ff0:	2000      	movs	r0, #0
}
 8007ff2:	b003      	add	sp, #12
 8007ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ff6:	2110      	movs	r1, #16
 8007ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8007ffa:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ffc:	430b      	orrs	r3, r1
 8007ffe:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008000:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008002:	4313      	orrs	r3, r2
 8008004:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8008006:	e7f4      	b.n	8007ff2 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 8008008:	f7ff fcee 	bl	80079e8 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800800c:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800800e:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	07d2      	lsls	r2, r2, #31
 8008014:	d4ec      	bmi.n	8007ff0 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008016:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8008018:	4f0f      	ldr	r7, [pc, #60]	; (8008058 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800801a:	689a      	ldr	r2, [r3, #8]
 800801c:	4215      	tst	r5, r2
 800801e:	d103      	bne.n	8008028 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 8008020:	689a      	ldr	r2, [r3, #8]
 8008022:	403a      	ands	r2, r7
 8008024:	432a      	orrs	r2, r5
 8008026:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008028:	f7ff fcde 	bl	80079e8 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800802c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800802e:	1b80      	subs	r0, r0, r6
 8008030:	2802      	cmp	r0, #2
 8008032:	d902      	bls.n	800803a <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4215      	tst	r5, r2
 8008038:	d003      	beq.n	8008042 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	4215      	tst	r5, r2
 800803e:	d0ec      	beq.n	800801a <ADC_Enable+0x7e>
 8008040:	e7d6      	b.n	8007ff0 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008042:	2210      	movs	r2, #16
 8008044:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 8008046:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008048:	4313      	orrs	r3, r2
 800804a:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800804c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800804e:	432b      	orrs	r3, r5
 8008050:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8008052:	e7ce      	b.n	8007ff2 <ADC_Enable+0x56>
 8008054:	80000017 	.word	0x80000017
 8008058:	7fffffe8 	.word	0x7fffffe8
 800805c:	40012708 	.word	0x40012708
 8008060:	2000011c 	.word	0x2000011c
 8008064:	00030d40 	.word	0x00030d40

08008068 <HAL_ADC_Start_DMA>:
{
 8008068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806a:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800806c:	6805      	ldr	r5, [r0, #0]
{
 800806e:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008070:	68ae      	ldr	r6, [r5, #8]
 8008072:	4688      	mov	r8, r1
 8008074:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 8008076:	2002      	movs	r0, #2
{
 8008078:	b500      	push	{lr}
 800807a:	0776      	lsls	r6, r6, #29
 800807c:	d414      	bmi.n	80080a8 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 800807e:	2254      	movs	r2, #84	; 0x54
 8008080:	5ca3      	ldrb	r3, [r4, r2]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d010      	beq.n	80080a8 <HAL_ADC_Start_DMA+0x40>
 8008086:	2301      	movs	r3, #1
 8008088:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800808a:	68ea      	ldr	r2, [r5, #12]
 800808c:	4213      	tst	r3, r2
 800808e:	d106      	bne.n	800809e <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008090:	68aa      	ldr	r2, [r5, #8]
 8008092:	4213      	tst	r3, r2
 8008094:	d131      	bne.n	80080fa <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8008096:	2201      	movs	r2, #1
 8008098:	68eb      	ldr	r3, [r5, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 800809e:	0020      	movs	r0, r4
 80080a0:	f7ff ff7c 	bl	8007f9c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d002      	beq.n	80080ae <HAL_ADC_Start_DMA+0x46>
}
 80080a8:	bc80      	pop	{r7}
 80080aa:	46b8      	mov	r8, r7
 80080ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80080ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80080b0:	4b15      	ldr	r3, [pc, #84]	; (8008108 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80080b2:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80080b4:	401a      	ands	r2, r3
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	4313      	orrs	r3, r2
 80080bc:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 80080c0:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80080c2:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80080c4:	4b12      	ldr	r3, [pc, #72]	; (8008110 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80080c6:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80080c8:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80080ca:	4b12      	ldr	r3, [pc, #72]	; (8008114 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80080cc:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80080ce:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80080d0:	231c      	movs	r3, #28
 80080d2:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 80080d4:	3338      	adds	r3, #56	; 0x38
 80080d6:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80080d8:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80080da:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80080dc:	4313      	orrs	r3, r2
 80080de:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80080e0:	4642      	mov	r2, r8
 80080e2:	003b      	movs	r3, r7
 80080e4:	3140      	adds	r1, #64	; 0x40
 80080e6:	f000 f8ef 	bl	80082c8 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80080ea:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80080ec:	490a      	ldr	r1, [pc, #40]	; (8008118 <HAL_ADC_Start_DMA+0xb0>)
 80080ee:	6893      	ldr	r3, [r2, #8]
 80080f0:	400b      	ands	r3, r1
 80080f2:	2104      	movs	r1, #4
 80080f4:	430b      	orrs	r3, r1
 80080f6:	6093      	str	r3, [r2, #8]
}
 80080f8:	e7d6      	b.n	80080a8 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 80080fa:	68ab      	ldr	r3, [r5, #8]
 80080fc:	4a06      	ldr	r2, [pc, #24]	; (8008118 <HAL_ADC_Start_DMA+0xb0>)
 80080fe:	4013      	ands	r3, r2
 8008100:	4303      	orrs	r3, r0
 8008102:	60ab      	str	r3, [r5, #8]
}
 8008104:	e7c7      	b.n	8008096 <HAL_ADC_Start_DMA+0x2e>
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	fffff0fe 	.word	0xfffff0fe
 800810c:	08007ca9 	.word	0x08007ca9
 8008110:	08007c7d 	.word	0x08007c7d
 8008114:	08007c8d 	.word	0x08007c8d
 8008118:	7fffffe8 	.word	0x7fffffe8

0800811c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800811c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800811e:	2800      	cmp	r0, #0
 8008120:	db14      	blt.n	800814c <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008122:	4b15      	ldr	r3, [pc, #84]	; (8008178 <HAL_NVIC_SetPriority+0x5c>)
 8008124:	2203      	movs	r2, #3
 8008126:	469c      	mov	ip, r3
 8008128:	23ff      	movs	r3, #255	; 0xff
 800812a:	0884      	lsrs	r4, r0, #2
 800812c:	4002      	ands	r2, r0
 800812e:	0018      	movs	r0, r3
 8008130:	26c0      	movs	r6, #192	; 0xc0
 8008132:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008134:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008136:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008138:	400b      	ands	r3, r1
 800813a:	4093      	lsls	r3, r2
 800813c:	00a4      	lsls	r4, r4, #2
 800813e:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008140:	00b6      	lsls	r6, r6, #2
 8008142:	59a5      	ldr	r5, [r4, r6]
 8008144:	4385      	bics	r5, r0
 8008146:	432b      	orrs	r3, r5
 8008148:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800814a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800814c:	4a0b      	ldr	r2, [pc, #44]	; (800817c <HAL_NVIC_SetPriority+0x60>)
 800814e:	230f      	movs	r3, #15
 8008150:	4694      	mov	ip, r2
 8008152:	2203      	movs	r2, #3
 8008154:	4003      	ands	r3, r0
 8008156:	4010      	ands	r0, r2
 8008158:	32fc      	adds	r2, #252	; 0xfc
 800815a:	0015      	movs	r5, r2
 800815c:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800815e:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008160:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008162:	400a      	ands	r2, r1
 8008164:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008166:	3b08      	subs	r3, #8
 8008168:	089b      	lsrs	r3, r3, #2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4463      	add	r3, ip
 800816e:	69dc      	ldr	r4, [r3, #28]
 8008170:	43ac      	bics	r4, r5
 8008172:	4322      	orrs	r2, r4
 8008174:	61da      	str	r2, [r3, #28]
 8008176:	e7e8      	b.n	800814a <HAL_NVIC_SetPriority+0x2e>
 8008178:	e000e100 	.word	0xe000e100
 800817c:	e000ed00 	.word	0xe000ed00

08008180 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008180:	2800      	cmp	r0, #0
 8008182:	db05      	blt.n	8008190 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008184:	221f      	movs	r2, #31
 8008186:	2301      	movs	r3, #1
 8008188:	4002      	ands	r2, r0
 800818a:	4093      	lsls	r3, r2
 800818c:	4a01      	ldr	r2, [pc, #4]	; (8008194 <HAL_NVIC_EnableIRQ+0x14>)
 800818e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008190:	4770      	bx	lr
 8008192:	46c0      	nop			; (mov r8, r8)
 8008194:	e000e100 	.word	0xe000e100

08008198 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008198:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800819a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800819c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800819e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80081a0:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80081a2:	2c00      	cmp	r4, #0
 80081a4:	d002      	beq.n	80081ac <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081a6:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80081a8:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80081aa:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80081ac:	241c      	movs	r4, #28
 80081ae:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80081b0:	4e08      	ldr	r6, [pc, #32]	; (80081d4 <DMA_SetConfig+0x3c>)
 80081b2:	4025      	ands	r5, r4
 80081b4:	3c1b      	subs	r4, #27
 80081b6:	40ac      	lsls	r4, r5
 80081b8:	6877      	ldr	r7, [r6, #4]
 80081ba:	433c      	orrs	r4, r7
 80081bc:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80081be:	6804      	ldr	r4, [r0, #0]
 80081c0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081c2:	6883      	ldr	r3, [r0, #8]
 80081c4:	2b10      	cmp	r3, #16
 80081c6:	d002      	beq.n	80081ce <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80081c8:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80081ca:	60e2      	str	r2, [r4, #12]
  }
}
 80081cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80081ce:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80081d0:	60e1      	str	r1, [r4, #12]
 80081d2:	e7fb      	b.n	80081cc <DMA_SetConfig+0x34>
 80081d4:	40020000 	.word	0x40020000

080081d8 <HAL_DMA_Init>:
{
 80081d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081da:	46c6      	mov	lr, r8
 80081dc:	0004      	movs	r4, r0
 80081de:	b500      	push	{lr}
  if (hdma == NULL)
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d062      	beq.n	80082aa <HAL_DMA_Init+0xd2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80081e4:	6805      	ldr	r5, [r0, #0]
 80081e6:	4b32      	ldr	r3, [pc, #200]	; (80082b0 <HAL_DMA_Init+0xd8>)
 80081e8:	2114      	movs	r1, #20
 80081ea:	18e8      	adds	r0, r5, r3
 80081ec:	f7f7 ffa8 	bl	8000140 <__udivsi3>
 80081f0:	0083      	lsls	r3, r0, #2
 80081f2:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80081f4:	2202      	movs	r2, #2
 80081f6:	2325      	movs	r3, #37	; 0x25
 80081f8:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80081fa:	682b      	ldr	r3, [r5, #0]
 80081fc:	4a2d      	ldr	r2, [pc, #180]	; (80082b4 <HAL_DMA_Init+0xdc>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80081fe:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008200:	4013      	ands	r3, r2
 8008202:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8008204:	68e3      	ldr	r3, [r4, #12]
 8008206:	6921      	ldr	r1, [r4, #16]
 8008208:	4333      	orrs	r3, r6
 800820a:	430b      	orrs	r3, r1
 800820c:	6961      	ldr	r1, [r4, #20]
 800820e:	682a      	ldr	r2, [r5, #0]
 8008210:	430b      	orrs	r3, r1
 8008212:	69a1      	ldr	r1, [r4, #24]
 8008214:	430b      	orrs	r3, r1
 8008216:	69e1      	ldr	r1, [r4, #28]
 8008218:	430b      	orrs	r3, r1
 800821a:	6a21      	ldr	r1, [r4, #32]
 800821c:	430b      	orrs	r3, r1
 800821e:	4313      	orrs	r3, r2
 8008220:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008222:	4b25      	ldr	r3, [pc, #148]	; (80082b8 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008224:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008226:	469c      	mov	ip, r3
 8008228:	4460      	add	r0, ip
 800822a:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800822c:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800822e:	4b23      	ldr	r3, [pc, #140]	; (80082bc <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008230:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008232:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008234:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008236:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008238:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800823a:	f7f7 ff81 	bl	8000140 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800823e:	231f      	movs	r3, #31
 8008240:	2201      	movs	r2, #1
 8008242:	4003      	ands	r3, r0
 8008244:	0010      	movs	r0, r2
 8008246:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008248:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800824a:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800824c:	01db      	lsls	r3, r3, #7
 800824e:	429e      	cmp	r6, r3
 8008250:	d021      	beq.n	8008296 <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008252:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008254:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008256:	6861      	ldr	r1, [r4, #4]
 8008258:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800825a:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800825c:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800825e:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008260:	2903      	cmp	r1, #3
 8008262:	d81d      	bhi.n	80082a0 <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008264:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008266:	4916      	ldr	r1, [pc, #88]	; (80082c0 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008268:	4d16      	ldr	r5, [pc, #88]	; (80082c4 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800826a:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800826c:	3b01      	subs	r3, #1
 800826e:	4003      	ands	r3, r0
 8008270:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008272:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008274:	0089      	lsls	r1, r1, #2
 8008276:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008278:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800827a:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800827c:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800827e:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008280:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8008282:	2225      	movs	r2, #37	; 0x25
 8008284:	2101      	movs	r1, #1
  return HAL_OK;
 8008286:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008288:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800828a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800828c:	3a01      	subs	r2, #1
 800828e:	54a3      	strb	r3, [r4, r2]
}
 8008290:	bc80      	pop	{r7}
 8008292:	46b8      	mov	r8, r7
 8008294:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008296:	2300      	movs	r3, #0
 8008298:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800829a:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800829c:	4643      	mov	r3, r8
 800829e:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80082a4:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80082a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80082a8:	e7ea      	b.n	8008280 <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 80082aa:	2001      	movs	r0, #1
 80082ac:	e7f0      	b.n	8008290 <HAL_DMA_Init+0xb8>
 80082ae:	46c0      	nop			; (mov r8, r8)
 80082b0:	bffdfff8 	.word	0xbffdfff8
 80082b4:	ffff800f 	.word	0xffff800f
 80082b8:	10008200 	.word	0x10008200
 80082bc:	40020880 	.word	0x40020880
 80082c0:	1000823f 	.word	0x1000823f
 80082c4:	40020940 	.word	0x40020940

080082c8 <HAL_DMA_Start_IT>:
{
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80082cc:	2024      	movs	r0, #36	; 0x24
 80082ce:	5c25      	ldrb	r5, [r4, r0]
 80082d0:	2d01      	cmp	r5, #1
 80082d2:	d035      	beq.n	8008340 <HAL_DMA_Start_IT+0x78>
 80082d4:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80082d6:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 80082d8:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 80082da:	5da5      	ldrb	r5, [r4, r6]
 80082dc:	b2ef      	uxtb	r7, r5
 80082de:	2d01      	cmp	r5, #1
 80082e0:	d005      	beq.n	80082ee <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80082e2:	2380      	movs	r3, #128	; 0x80
 80082e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80082e6:	2300      	movs	r3, #0
 80082e8:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 80082ea:	2001      	movs	r0, #1
}
 80082ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80082ee:	3822      	subs	r0, #34	; 0x22
 80082f0:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082f2:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80082f4:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082f6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80082f8:	6828      	ldr	r0, [r5, #0]
 80082fa:	43b8      	bics	r0, r7
 80082fc:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082fe:	0020      	movs	r0, r4
 8008300:	f7ff ff4a 	bl	8008198 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8008304:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008306:	2b00      	cmp	r3, #0
 8008308:	d01c      	beq.n	8008344 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800830a:	220e      	movs	r2, #14
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	4313      	orrs	r3, r2
 8008310:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008312:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008314:	6813      	ldr	r3, [r2, #0]
 8008316:	03db      	lsls	r3, r3, #15
 8008318:	d504      	bpl.n	8008324 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800831a:	2380      	movs	r3, #128	; 0x80
 800831c:	6811      	ldr	r1, [r2, #0]
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	430b      	orrs	r3, r1
 8008322:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8008324:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800832a:	2280      	movs	r2, #128	; 0x80
 800832c:	6819      	ldr	r1, [r3, #0]
 800832e:	0052      	lsls	r2, r2, #1
 8008330:	430a      	orrs	r2, r1
 8008332:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8008334:	2201      	movs	r2, #1
 8008336:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008338:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800833a:	4313      	orrs	r3, r2
 800833c:	602b      	str	r3, [r5, #0]
 800833e:	e7d5      	b.n	80082ec <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8008340:	2002      	movs	r0, #2
 8008342:	e7d3      	b.n	80082ec <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008344:	2204      	movs	r2, #4
 8008346:	682b      	ldr	r3, [r5, #0]
 8008348:	4393      	bics	r3, r2
 800834a:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	3206      	adds	r2, #6
 8008350:	4313      	orrs	r3, r2
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	e7dd      	b.n	8008312 <HAL_DMA_Start_IT+0x4a>
 8008356:	46c0      	nop			; (mov r8, r8)

08008358 <HAL_DMA_Abort>:
{
 8008358:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 800835a:	2800      	cmp	r0, #0
 800835c:	d034      	beq.n	80083c8 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800835e:	2325      	movs	r3, #37	; 0x25
 8008360:	5cc3      	ldrb	r3, [r0, r3]
 8008362:	2b02      	cmp	r3, #2
 8008364:	d129      	bne.n	80083ba <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008366:	210e      	movs	r1, #14
 8008368:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800836a:	4c18      	ldr	r4, [pc, #96]	; (80083cc <HAL_DMA_Abort+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800836c:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800836e:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008370:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008372:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008374:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008376:	680b      	ldr	r3, [r1, #0]
 8008378:	4023      	ands	r3, r4
 800837a:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800837c:	2301      	movs	r3, #1
 800837e:	6811      	ldr	r1, [r2, #0]
 8008380:	4399      	bics	r1, r3
 8008382:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8008384:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008386:	4912      	ldr	r1, [pc, #72]	; (80083d0 <HAL_DMA_Abort+0x78>)
 8008388:	4032      	ands	r2, r6
 800838a:	4093      	lsls	r3, r2
 800838c:	684d      	ldr	r5, [r1, #4]
 800838e:	432b      	orrs	r3, r5
 8008390:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008392:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008394:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008396:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8008398:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	4022      	ands	r2, r4
 80083a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80083a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80083a6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80083a8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80083aa:	2325      	movs	r3, #37	; 0x25
 80083ac:	2201      	movs	r2, #1
 80083ae:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80083b0:	2200      	movs	r2, #0
 80083b2:	3b01      	subs	r3, #1
 80083b4:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80083b6:	2000      	movs	r0, #0
}
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083ba:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80083bc:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083be:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80083c0:	3320      	adds	r3, #32
 80083c2:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80083c4:	2001      	movs	r0, #1
 80083c6:	e7f7      	b.n	80083b8 <HAL_DMA_Abort+0x60>
    return HAL_ERROR;
 80083c8:	2001      	movs	r0, #1
 80083ca:	e7f5      	b.n	80083b8 <HAL_DMA_Abort+0x60>
 80083cc:	fffffeff 	.word	0xfffffeff
 80083d0:	40020000 	.word	0x40020000

080083d4 <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80083d4:	2325      	movs	r3, #37	; 0x25
{
 80083d6:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80083d8:	5cc3      	ldrb	r3, [r0, r3]
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d003      	beq.n	80083e6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083de:	2304      	movs	r3, #4
 80083e0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80083e2:	2001      	movs	r0, #1
}
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083e6:	210e      	movs	r1, #14
 80083e8:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80083ea:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083ec:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083ee:	4c16      	ldr	r4, [pc, #88]	; (8008448 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083f0:	438b      	bics	r3, r1
 80083f2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80083f4:	2301      	movs	r3, #1
 80083f6:	6811      	ldr	r1, [r2, #0]
 80083f8:	4399      	bics	r1, r3
 80083fa:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80083fc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80083fe:	680a      	ldr	r2, [r1, #0]
 8008400:	4022      	ands	r2, r4
 8008402:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8008404:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008406:	4911      	ldr	r1, [pc, #68]	; (800844c <HAL_DMA_Abort_IT+0x78>)
 8008408:	4032      	ands	r2, r6
 800840a:	4093      	lsls	r3, r2
 800840c:	684d      	ldr	r5, [r1, #4]
 800840e:	432b      	orrs	r3, r5
 8008410:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008412:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8008414:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8008416:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8008418:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4022      	ands	r2, r4
 8008422:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008424:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008426:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008428:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800842a:	2325      	movs	r3, #37	; 0x25
 800842c:	2201      	movs	r2, #1
 800842e:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8008430:	2200      	movs	r2, #0
 8008432:	3b01      	subs	r3, #1
 8008434:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8008436:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 800843c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800843e:	2000      	movs	r0, #0
 8008440:	e7d0      	b.n	80083e4 <HAL_DMA_Abort_IT+0x10>
 8008442:	2000      	movs	r0, #0
 8008444:	e7ce      	b.n	80083e4 <HAL_DMA_Abort_IT+0x10>
 8008446:	46c0      	nop			; (mov r8, r8)
 8008448:	fffffeff 	.word	0xfffffeff
 800844c:	40020000 	.word	0x40020000

08008450 <HAL_DMA_IRQHandler>:
{
 8008450:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008452:	211c      	movs	r1, #28
 8008454:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8008456:	4b2b      	ldr	r3, [pc, #172]	; (8008504 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8008458:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 800845a:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800845c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800845e:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008460:	400b      	ands	r3, r1
 8008462:	0021      	movs	r1, r4
 8008464:	4099      	lsls	r1, r3
 8008466:	420a      	tst	r2, r1
 8008468:	d010      	beq.n	800848c <HAL_DMA_IRQHandler+0x3c>
 800846a:	422c      	tst	r4, r5
 800846c:	d00e      	beq.n	800848c <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800846e:	6833      	ldr	r3, [r6, #0]
 8008470:	069b      	lsls	r3, r3, #26
 8008472:	d402      	bmi.n	800847a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	43a3      	bics	r3, r4
 8008478:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800847a:	4b22      	ldr	r3, [pc, #136]	; (8008504 <HAL_DMA_IRQHandler+0xb4>)
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	4311      	orrs	r1, r2
 8008480:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8008482:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008484:	2b00      	cmp	r3, #0
 8008486:	d000      	beq.n	800848a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8008488:	4798      	blx	r3
}
 800848a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800848c:	2402      	movs	r4, #2
 800848e:	0021      	movs	r1, r4
 8008490:	4099      	lsls	r1, r3
 8008492:	420a      	tst	r2, r1
 8008494:	d017      	beq.n	80084c6 <HAL_DMA_IRQHandler+0x76>
 8008496:	422c      	tst	r4, r5
 8008498:	d015      	beq.n	80084c6 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800849a:	6833      	ldr	r3, [r6, #0]
 800849c:	069b      	lsls	r3, r3, #26
 800849e:	d406      	bmi.n	80084ae <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80084a0:	220a      	movs	r2, #10
 80084a2:	6833      	ldr	r3, [r6, #0]
 80084a4:	4393      	bics	r3, r2
 80084a6:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80084a8:	2325      	movs	r3, #37	; 0x25
 80084aa:	3a09      	subs	r2, #9
 80084ac:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80084ae:	4b15      	ldr	r3, [pc, #84]	; (8008504 <HAL_DMA_IRQHandler+0xb4>)
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	4311      	orrs	r1, r2
 80084b4:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80084b6:	2200      	movs	r2, #0
 80084b8:	2324      	movs	r3, #36	; 0x24
 80084ba:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80084bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0e3      	beq.n	800848a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80084c2:	4798      	blx	r3
  return;
 80084c4:	e7e1      	b.n	800848a <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80084c6:	2108      	movs	r1, #8
 80084c8:	000c      	movs	r4, r1
 80084ca:	409c      	lsls	r4, r3
 80084cc:	4222      	tst	r2, r4
 80084ce:	d0dc      	beq.n	800848a <HAL_DMA_IRQHandler+0x3a>
 80084d0:	4229      	tst	r1, r5
 80084d2:	d0da      	beq.n	800848a <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084d4:	6832      	ldr	r2, [r6, #0]
 80084d6:	3106      	adds	r1, #6
 80084d8:	438a      	bics	r2, r1
 80084da:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80084dc:	2201      	movs	r2, #1
 80084de:	0015      	movs	r5, r2
 80084e0:	409d      	lsls	r5, r3
 80084e2:	002b      	movs	r3, r5
 80084e4:	4907      	ldr	r1, [pc, #28]	; (8008504 <HAL_DMA_IRQHandler+0xb4>)
 80084e6:	684c      	ldr	r4, [r1, #4]
 80084e8:	4323      	orrs	r3, r4
 80084ea:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80084ec:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80084ee:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80084f0:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80084f2:	2200      	movs	r2, #0
 80084f4:	3b01      	subs	r3, #1
 80084f6:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80084f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0c5      	beq.n	800848a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80084fe:	4798      	blx	r3
  return;
 8008500:	e7c3      	b.n	800848a <HAL_DMA_IRQHandler+0x3a>
 8008502:	46c0      	nop			; (mov r8, r8)
 8008504:	40020000 	.word	0x40020000

08008508 <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8008508:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800850a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800850c:	6819      	ldr	r1, [r3, #0]
{
 800850e:	b570      	push	{r4, r5, r6, lr}
 8008510:	0004      	movs	r4, r0
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8008512:	420a      	tst	r2, r1
 8008514:	d00f      	beq.n	8008536 <HAL_DMAEx_MUX_IRQHandler+0x2e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008516:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8008518:	4d13      	ldr	r5, [pc, #76]	; (8008568 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 800851a:	6801      	ldr	r1, [r0, #0]
 800851c:	4029      	ands	r1, r5
 800851e:	6001      	str	r1, [r0, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008520:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8008522:	2380      	movs	r3, #128	; 0x80
 8008524:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4313      	orrs	r3, r2
 800852a:	63e3      	str	r3, [r4, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 800852c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <HAL_DMAEx_MUX_IRQHandler+0x2e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008532:	0020      	movs	r0, r4
 8008534:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8008536:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008538:	2b00      	cmp	r3, #0
 800853a:	d013      	beq.n	8008564 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 800853c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800853e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008540:	6810      	ldr	r0, [r2, #0]
 8008542:	4201      	tst	r1, r0
 8008544:	d00e      	beq.n	8008564 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	4d07      	ldr	r5, [pc, #28]	; (8008568 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 800854a:	4028      	ands	r0, r5
 800854c:	6018      	str	r0, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 800854e:	2380      	movs	r3, #128	; 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008550:	6051      	str	r1, [r2, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8008552:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	4313      	orrs	r3, r2
 8008558:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 800855a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008560:	0020      	movs	r0, r4
 8008562:	4798      	blx	r3
      }
    }
  }
}
 8008564:	bd70      	pop	{r4, r5, r6, pc}
 8008566:	46c0      	nop			; (mov r8, r8)
 8008568:	fffffeff 	.word	0xfffffeff

0800856c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800856c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800856e:	46de      	mov	lr, fp
 8008570:	4657      	mov	r7, sl
 8008572:	464e      	mov	r6, r9
 8008574:	4645      	mov	r5, r8
 8008576:	b5e0      	push	{r5, r6, r7, lr}
 8008578:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800857a:	6809      	ldr	r1, [r1, #0]
 800857c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800857e:	2300      	movs	r3, #0
{
 8008580:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008582:	2900      	cmp	r1, #0
 8008584:	d07a      	beq.n	800867c <HAL_GPIO_Init+0x110>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008586:	2601      	movs	r6, #1
 8008588:	000c      	movs	r4, r1
 800858a:	409e      	lsls	r6, r3
 800858c:	4034      	ands	r4, r6
 800858e:	46a2      	mov	sl, r4

    if (iocurrent != 0x00u)
 8008590:	4231      	tst	r1, r6
 8008592:	d06d      	beq.n	8008670 <HAL_GPIO_Init+0x104>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008594:	465c      	mov	r4, fp
 8008596:	2503      	movs	r5, #3
 8008598:	6864      	ldr	r4, [r4, #4]
 800859a:	4025      	ands	r5, r4
 800859c:	46ac      	mov	ip, r5
 800859e:	3d01      	subs	r5, #1
 80085a0:	2d01      	cmp	r5, #1
 80085a2:	d800      	bhi.n	80085a6 <HAL_GPIO_Init+0x3a>
 80085a4:	e071      	b.n	800868a <HAL_GPIO_Init+0x11e>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085a6:	4665      	mov	r5, ip
 80085a8:	2d03      	cmp	r5, #3
 80085aa:	d000      	beq.n	80085ae <HAL_GPIO_Init+0x42>
 80085ac:	e0b4      	b.n	8008718 <HAL_GPIO_Init+0x1ac>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80085ae:	4666      	mov	r6, ip
 80085b0:	4096      	lsls	r6, r2
 80085b2:	43f5      	mvns	r5, r6
 80085b4:	9500      	str	r5, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085b6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80085b8:	9d00      	ldr	r5, [sp, #0]
 80085ba:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80085bc:	432e      	orrs	r6, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80085be:	25c0      	movs	r5, #192	; 0xc0
 80085c0:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 80085c2:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80085c4:	422c      	tst	r4, r5
 80085c6:	d053      	beq.n	8008670 <HAL_GPIO_Init+0x104>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80085c8:	4e67      	ldr	r6, [pc, #412]	; (8008768 <HAL_GPIO_Init+0x1fc>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80085ca:	2703      	movs	r7, #3
 80085cc:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 80085ce:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80085d0:	401f      	ands	r7, r3
 80085d2:	00ff      	lsls	r7, r7, #3
 80085d4:	00ad      	lsls	r5, r5, #2
 80085d6:	4465      	add	r5, ip
 80085d8:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 80085da:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80085dc:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 80085de:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80085e0:	4666      	mov	r6, ip
 80085e2:	40b7      	lsls	r7, r6
 80085e4:	003e      	movs	r6, r7
 80085e6:	464f      	mov	r7, r9
 80085e8:	43b7      	bics	r7, r6
 80085ea:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80085ec:	27a0      	movs	r7, #160	; 0xa0
 80085ee:	05ff      	lsls	r7, r7, #23
 80085f0:	42b8      	cmp	r0, r7
 80085f2:	d012      	beq.n	800861a <HAL_GPIO_Init+0xae>
 80085f4:	4f5d      	ldr	r7, [pc, #372]	; (800876c <HAL_GPIO_Init+0x200>)
 80085f6:	42b8      	cmp	r0, r7
 80085f8:	d100      	bne.n	80085fc <HAL_GPIO_Init+0x90>
 80085fa:	e0a5      	b.n	8008748 <HAL_GPIO_Init+0x1dc>
 80085fc:	4f5c      	ldr	r7, [pc, #368]	; (8008770 <HAL_GPIO_Init+0x204>)
 80085fe:	42b8      	cmp	r0, r7
 8008600:	d100      	bne.n	8008604 <HAL_GPIO_Init+0x98>
 8008602:	e0a9      	b.n	8008758 <HAL_GPIO_Init+0x1ec>
 8008604:	4f5b      	ldr	r7, [pc, #364]	; (8008774 <HAL_GPIO_Init+0x208>)
 8008606:	42b8      	cmp	r0, r7
 8008608:	d100      	bne.n	800860c <HAL_GPIO_Init+0xa0>
 800860a:	e096      	b.n	800873a <HAL_GPIO_Init+0x1ce>
 800860c:	4666      	mov	r6, ip
 800860e:	2705      	movs	r7, #5
 8008610:	40b7      	lsls	r7, r6
 8008612:	003e      	movs	r6, r7
 8008614:	464f      	mov	r7, r9
 8008616:	4337      	orrs	r7, r6
 8008618:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800861a:	464e      	mov	r6, r9
 800861c:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
 800861e:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008620:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 8008622:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR1;
 8008624:	4d50      	ldr	r5, [pc, #320]	; (8008768 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008626:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8008628:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 800862a:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800862c:	423c      	tst	r4, r7
 800862e:	d000      	beq.n	8008632 <HAL_GPIO_Init+0xc6>
 8008630:	e080      	b.n	8008734 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 8008632:	4035      	ands	r5, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008634:	2780      	movs	r7, #128	; 0x80
        EXTI->RTSR1 = temp;
 8008636:	4e4c      	ldr	r6, [pc, #304]	; (8008768 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008638:	03bf      	lsls	r7, r7, #14
        EXTI->RTSR1 = temp;
 800863a:	6035      	str	r5, [r6, #0]
        temp = EXTI->FTSR1;
 800863c:	6875      	ldr	r5, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800863e:	423c      	tst	r4, r7
 8008640:	d000      	beq.n	8008644 <HAL_GPIO_Init+0xd8>
 8008642:	e074      	b.n	800872e <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 8008644:	4646      	mov	r6, r8
 8008646:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8008648:	4e47      	ldr	r6, [pc, #284]	; (8008768 <HAL_GPIO_Init+0x1fc>)
 800864a:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800864c:	2584      	movs	r5, #132	; 0x84
 800864e:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008650:	03a7      	lsls	r7, r4, #14
 8008652:	d469      	bmi.n	8008728 <HAL_GPIO_Init+0x1bc>
        temp &= ~(iocurrent);
 8008654:	4646      	mov	r6, r8
 8008656:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8008658:	2784      	movs	r7, #132	; 0x84
 800865a:	4e43      	ldr	r6, [pc, #268]	; (8008768 <HAL_GPIO_Init+0x1fc>)
 800865c:	51f5      	str	r5, [r6, r7]

        temp = EXTI->IMR1;
 800865e:	2580      	movs	r5, #128	; 0x80
 8008660:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008662:	03e4      	lsls	r4, r4, #15
 8008664:	d45d      	bmi.n	8008722 <HAL_GPIO_Init+0x1b6>
        temp &= ~(iocurrent);
 8008666:	4646      	mov	r6, r8
 8008668:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800866a:	2580      	movs	r5, #128	; 0x80
 800866c:	4c3e      	ldr	r4, [pc, #248]	; (8008768 <HAL_GPIO_Init+0x1fc>)
 800866e:	5166      	str	r6, [r4, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008670:	000c      	movs	r4, r1
      }
    }

    position++;
 8008672:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008674:	40dc      	lsrs	r4, r3
 8008676:	3202      	adds	r2, #2
 8008678:	2c00      	cmp	r4, #0
 800867a:	d184      	bne.n	8008586 <HAL_GPIO_Init+0x1a>
  }
}
 800867c:	b003      	add	sp, #12
 800867e:	bcf0      	pop	{r4, r5, r6, r7}
 8008680:	46bb      	mov	fp, r7
 8008682:	46b2      	mov	sl, r6
 8008684:	46a9      	mov	r9, r5
 8008686:	46a0      	mov	r8, r4
 8008688:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 800868a:	6885      	ldr	r5, [r0, #8]
 800868c:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800868e:	2503      	movs	r5, #3
 8008690:	4095      	lsls	r5, r2
 8008692:	46a8      	mov	r8, r5
 8008694:	43ed      	mvns	r5, r5
 8008696:	464f      	mov	r7, r9
 8008698:	9500      	str	r5, [sp, #0]
 800869a:	4645      	mov	r5, r8
 800869c:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 800869e:	465d      	mov	r5, fp
 80086a0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80086a2:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80086a4:	002f      	movs	r7, r5
 80086a6:	4097      	lsls	r7, r2
 80086a8:	46b8      	mov	r8, r7
 80086aa:	464f      	mov	r7, r9
 80086ac:	4645      	mov	r5, r8
 80086ae:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80086b0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80086b2:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086b4:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086b6:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086b8:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086ba:	0926      	lsrs	r6, r4, #4
 80086bc:	402e      	ands	r6, r5
 80086be:	409e      	lsls	r6, r3
 80086c0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80086c2:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80086c4:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80086c6:	9d00      	ldr	r5, [sp, #0]
 80086c8:	402e      	ands	r6, r5
 80086ca:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80086cc:	465e      	mov	r6, fp
 80086ce:	68b6      	ldr	r6, [r6, #8]
 80086d0:	4647      	mov	r7, r8
 80086d2:	4096      	lsls	r6, r2
 80086d4:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80086d6:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086d8:	4667      	mov	r7, ip
 80086da:	4666      	mov	r6, ip
 80086dc:	4096      	lsls	r6, r2
 80086de:	2f02      	cmp	r7, #2
 80086e0:	d000      	beq.n	80086e4 <HAL_GPIO_Init+0x178>
 80086e2:	e768      	b.n	80085b6 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3u];
 80086e4:	08dd      	lsrs	r5, r3, #3
 80086e6:	00ad      	lsls	r5, r5, #2
 80086e8:	46ac      	mov	ip, r5
 80086ea:	4484      	add	ip, r0
 80086ec:	4665      	mov	r5, ip
 80086ee:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80086f0:	2507      	movs	r5, #7
 80086f2:	401d      	ands	r5, r3
 80086f4:	00ad      	lsls	r5, r5, #2
 80086f6:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 80086f8:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80086fa:	250f      	movs	r5, #15
 80086fc:	4647      	mov	r7, r8
 80086fe:	40bd      	lsls	r5, r7
 8008700:	9f01      	ldr	r7, [sp, #4]
 8008702:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008704:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008706:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008708:	4647      	mov	r7, r8
 800870a:	692d      	ldr	r5, [r5, #16]
 800870c:	40bd      	lsls	r5, r7
 800870e:	9f01      	ldr	r7, [sp, #4]
 8008710:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8008712:	4665      	mov	r5, ip
 8008714:	622f      	str	r7, [r5, #32]
 8008716:	e74e      	b.n	80085b6 <HAL_GPIO_Init+0x4a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008718:	2503      	movs	r5, #3
 800871a:	4095      	lsls	r5, r2
 800871c:	43ed      	mvns	r5, r5
 800871e:	9500      	str	r5, [sp, #0]
 8008720:	e7d0      	b.n	80086c4 <HAL_GPIO_Init+0x158>
          temp |= iocurrent;
 8008722:	4656      	mov	r6, sl
 8008724:	432e      	orrs	r6, r5
 8008726:	e7a0      	b.n	800866a <HAL_GPIO_Init+0xfe>
          temp |= iocurrent;
 8008728:	4657      	mov	r7, sl
 800872a:	433d      	orrs	r5, r7
 800872c:	e794      	b.n	8008658 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 800872e:	4657      	mov	r7, sl
 8008730:	433d      	orrs	r5, r7
 8008732:	e789      	b.n	8008648 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8008734:	4657      	mov	r7, sl
 8008736:	433d      	orrs	r5, r7
 8008738:	e77c      	b.n	8008634 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800873a:	4667      	mov	r7, ip
 800873c:	2603      	movs	r6, #3
 800873e:	40be      	lsls	r6, r7
 8008740:	464f      	mov	r7, r9
 8008742:	4337      	orrs	r7, r6
 8008744:	46b9      	mov	r9, r7
 8008746:	e768      	b.n	800861a <HAL_GPIO_Init+0xae>
 8008748:	4666      	mov	r6, ip
 800874a:	2701      	movs	r7, #1
 800874c:	40b7      	lsls	r7, r6
 800874e:	003e      	movs	r6, r7
 8008750:	464f      	mov	r7, r9
 8008752:	4337      	orrs	r7, r6
 8008754:	46b9      	mov	r9, r7
 8008756:	e760      	b.n	800861a <HAL_GPIO_Init+0xae>
 8008758:	4667      	mov	r7, ip
 800875a:	2602      	movs	r6, #2
 800875c:	40be      	lsls	r6, r7
 800875e:	464f      	mov	r7, r9
 8008760:	4337      	orrs	r7, r6
 8008762:	46b9      	mov	r9, r7
 8008764:	e759      	b.n	800861a <HAL_GPIO_Init+0xae>
 8008766:	46c0      	nop			; (mov r8, r8)
 8008768:	40021800 	.word	0x40021800
 800876c:	50000400 	.word	0x50000400
 8008770:	50000800 	.word	0x50000800
 8008774:	50000c00 	.word	0x50000c00

08008778 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008778:	6900      	ldr	r0, [r0, #16]
 800877a:	4008      	ands	r0, r1
 800877c:	1e43      	subs	r3, r0, #1
 800877e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8008780:	b2c0      	uxtb	r0, r0
}
 8008782:	4770      	bx	lr

08008784 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008784:	2a00      	cmp	r2, #0
 8008786:	d001      	beq.n	800878c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008788:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800878a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800878c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800878e:	e7fc      	b.n	800878a <HAL_GPIO_WritePin+0x6>

08008790 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008790:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008792:	0013      	movs	r3, r2
 8008794:	400b      	ands	r3, r1
 8008796:	041b      	lsls	r3, r3, #16
 8008798:	4391      	bics	r1, r2
 800879a:	430b      	orrs	r3, r1
 800879c:	6183      	str	r3, [r0, #24]
}
 800879e:	4770      	bx	lr

080087a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a2:	0017      	movs	r7, r2
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80087a4:	2210      	movs	r2, #16
{
 80087a6:	46c6      	mov	lr, r8
 80087a8:	000c      	movs	r4, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80087aa:	0011      	movs	r1, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80087ac:	6803      	ldr	r3, [r0, #0]
{
 80087ae:	0005      	movs	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80087b0:	699e      	ldr	r6, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80087b2:	2000      	movs	r0, #0
{
 80087b4:	b500      	push	{lr}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80087b6:	4031      	ands	r1, r6
 80087b8:	4232      	tst	r2, r6
 80087ba:	d011      	beq.n	80087e0 <I2C_IsErrorOccurred+0x40>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087bc:	61da      	str	r2, [r3, #28]
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 80087be:	3232      	adds	r2, #50	; 0x32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087c0:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 80087c2:	4690      	mov	r8, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	4216      	tst	r6, r2
 80087c8:	d104      	bne.n	80087d4 <I2C_IsErrorOccurred+0x34>
      if (Timeout != HAL_MAX_DELAY)
 80087ca:	1c61      	adds	r1, r4, #1
 80087cc:	d145      	bne.n	800885a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80087ce:	699a      	ldr	r2, [r3, #24]
 80087d0:	4216      	tst	r6, r2
 80087d2:	d0fc      	beq.n	80087ce <I2C_IsErrorOccurred+0x2e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087d4:	2220      	movs	r2, #32
 80087d6:	2100      	movs	r1, #0
 80087d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80087da:	2204      	movs	r2, #4

    status = HAL_ERROR;
 80087dc:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 80087de:	4311      	orrs	r1, r2
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80087e0:	2480      	movs	r4, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 80087e2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80087e4:	0064      	lsls	r4, r4, #1
 80087e6:	4222      	tst	r2, r4
 80087e8:	d02c      	beq.n	8008844 <I2C_IsErrorOccurred+0xa4>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80087ea:	2001      	movs	r0, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80087ec:	61dc      	str	r4, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80087ee:	4301      	orrs	r1, r0

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80087f0:	0550      	lsls	r0, r2, #21
 80087f2:	d504      	bpl.n	80087fe <I2C_IsErrorOccurred+0x5e>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80087f4:	2008      	movs	r0, #8
 80087f6:	4301      	orrs	r1, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80087f8:	2080      	movs	r0, #128	; 0x80
 80087fa:	00c0      	lsls	r0, r0, #3
 80087fc:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80087fe:	0592      	lsls	r2, r2, #22
 8008800:	d504      	bpl.n	800880c <I2C_IsErrorOccurred+0x6c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008802:	2202      	movs	r2, #2
 8008804:	4311      	orrs	r1, r2

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008806:	32ff      	adds	r2, #255	; 0xff
 8008808:	32ff      	adds	r2, #255	; 0xff
 800880a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800880c:	699a      	ldr	r2, [r3, #24]
 800880e:	0792      	lsls	r2, r2, #30
 8008810:	d501      	bpl.n	8008816 <I2C_IsErrorOccurred+0x76>
    hi2c->Instance->TXDR = 0x00U;
 8008812:	2200      	movs	r2, #0
 8008814:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008816:	2201      	movs	r2, #1
 8008818:	6998      	ldr	r0, [r3, #24]
 800881a:	4202      	tst	r2, r0
 800881c:	d019      	beq.n	8008852 <I2C_IsErrorOccurred+0xb2>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	4822      	ldr	r0, [pc, #136]	; (80088ac <I2C_IsErrorOccurred+0x10c>)
 8008822:	4002      	ands	r2, r0
 8008824:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8008826:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008828:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800882a:	430b      	orrs	r3, r1
 800882c:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800882e:	2341      	movs	r3, #65	; 0x41
 8008830:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008832:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008834:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008836:	3222      	adds	r2, #34	; 0x22
 8008838:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 800883a:	3a02      	subs	r2, #2
 800883c:	54ab      	strb	r3, [r5, r2]
  }

  return status;
}
 800883e:	bc80      	pop	{r7}
 8008840:	46b8      	mov	r8, r7
 8008842:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008844:	0554      	lsls	r4, r2, #21
 8008846:	d4d5      	bmi.n	80087f4 <I2C_IsErrorOccurred+0x54>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008848:	0592      	lsls	r2, r2, #22
 800884a:	d4da      	bmi.n	8008802 <I2C_IsErrorOccurred+0x62>
  if (status != HAL_OK)
 800884c:	2800      	cmp	r0, #0
 800884e:	d0f6      	beq.n	800883e <I2C_IsErrorOccurred+0x9e>
 8008850:	e7dc      	b.n	800880c <I2C_IsErrorOccurred+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008852:	6998      	ldr	r0, [r3, #24]
 8008854:	4302      	orrs	r2, r0
 8008856:	619a      	str	r2, [r3, #24]
 8008858:	e7e1      	b.n	800881e <I2C_IsErrorOccurred+0x7e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800885a:	f7ff f8c5 	bl	80079e8 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800885e:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008860:	1bc0      	subs	r0, r0, r7
 8008862:	42a0      	cmp	r0, r4
 8008864:	d801      	bhi.n	800886a <I2C_IsErrorOccurred+0xca>
 8008866:	2c00      	cmp	r4, #0
 8008868:	d1ac      	bne.n	80087c4 <I2C_IsErrorOccurred+0x24>
          tmp2 = hi2c->Mode;
 800886a:	4642      	mov	r2, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800886c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800886e:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008870:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8008872:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008874:	0409      	lsls	r1, r1, #16
 8008876:	d50c      	bpl.n	8008892 <I2C_IsErrorOccurred+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008878:	2180      	movs	r1, #128	; 0x80
 800887a:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800887c:	4208      	tst	r0, r1
 800887e:	d108      	bne.n	8008892 <I2C_IsErrorOccurred+0xf2>
              (tmp1 != I2C_CR2_STOP) && \
 8008880:	2a20      	cmp	r2, #32
 8008882:	d006      	beq.n	8008892 <I2C_IsErrorOccurred+0xf2>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008884:	685a      	ldr	r2, [r3, #4]
 8008886:	4311      	orrs	r1, r2
 8008888:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 800888a:	f7ff f8ad 	bl	80079e8 <HAL_GetTick>
 800888e:	0007      	movs	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	699a      	ldr	r2, [r3, #24]
 8008894:	4216      	tst	r6, r2
 8008896:	d195      	bne.n	80087c4 <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008898:	f7ff f8a6 	bl	80079e8 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800889c:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800889e:	1bc0      	subs	r0, r0, r7
 80088a0:	2819      	cmp	r0, #25
 80088a2:	d9f6      	bls.n	8008892 <I2C_IsErrorOccurred+0xf2>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80088a4:	2120      	movs	r1, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80088a6:	699a      	ldr	r2, [r3, #24]
 80088a8:	e797      	b.n	80087da <I2C_IsErrorOccurred+0x3a>
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	fe00e800 	.word	0xfe00e800

080088b0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	0004      	movs	r4, r0
 80088b4:	000d      	movs	r5, r1
 80088b6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088b8:	2702      	movs	r7, #2
 80088ba:	e008      	b.n	80088ce <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80088bc:	0032      	movs	r2, r6
 80088be:	0029      	movs	r1, r5
 80088c0:	0020      	movs	r0, r4
 80088c2:	f7ff ff6d 	bl	80087a0 <I2C_IsErrorOccurred>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d107      	bne.n	80088da <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80088ca:	1c6b      	adds	r3, r5, #1
 80088cc:	d107      	bne.n	80088de <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	421f      	tst	r7, r3
 80088d4:	d0f2      	beq.n	80088bc <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 80088d6:	2000      	movs	r0, #0
}
 80088d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80088da:	2001      	movs	r0, #1
 80088dc:	e7fc      	b.n	80088d8 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088de:	f7ff f883 	bl	80079e8 <HAL_GetTick>
 80088e2:	1b80      	subs	r0, r0, r6
 80088e4:	42a8      	cmp	r0, r5
 80088e6:	d801      	bhi.n	80088ec <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 80088e8:	2d00      	cmp	r5, #0
 80088ea:	d1f0      	bne.n	80088ce <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088ec:	2220      	movs	r2, #32
 80088ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80088f0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088f2:	4313      	orrs	r3, r2
 80088f4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088f6:	2341      	movs	r3, #65	; 0x41
 80088f8:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	3222      	adds	r2, #34	; 0x22
 80088fe:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8008900:	3a02      	subs	r2, #2
 8008902:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8008904:	e7e8      	b.n	80088d8 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8008906:	46c0      	nop			; (mov r8, r8)

08008908 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890a:	0005      	movs	r5, r0
 800890c:	000c      	movs	r4, r1
 800890e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008910:	2720      	movs	r7, #32
 8008912:	e00d      	b.n	8008930 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008914:	0032      	movs	r2, r6
 8008916:	0021      	movs	r1, r4
 8008918:	0028      	movs	r0, r5
 800891a:	f7ff ff41 	bl	80087a0 <I2C_IsErrorOccurred>
 800891e:	2800      	cmp	r0, #0
 8008920:	d119      	bne.n	8008956 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008922:	f7ff f861 	bl	80079e8 <HAL_GetTick>
 8008926:	1b80      	subs	r0, r0, r6
 8008928:	42a0      	cmp	r0, r4
 800892a:	d807      	bhi.n	800893c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800892c:	2c00      	cmp	r4, #0
 800892e:	d005      	beq.n	800893c <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	699b      	ldr	r3, [r3, #24]
 8008934:	421f      	tst	r7, r3
 8008936:	d0ed      	beq.n	8008914 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
  return HAL_OK;
 8008938:	2000      	movs	r0, #0
}
 800893a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800893c:	2220      	movs	r2, #32
 800893e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008940:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008942:	4313      	orrs	r3, r2
 8008944:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008946:	2341      	movs	r3, #65	; 0x41
 8008948:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800894a:	2300      	movs	r3, #0
 800894c:	3222      	adds	r2, #34	; 0x22
 800894e:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8008950:	3a02      	subs	r2, #2
 8008952:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8008954:	e7f1      	b.n	800893a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
      return HAL_ERROR;
 8008956:	2001      	movs	r0, #1
 8008958:	e7ef      	b.n	800893a <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800895a:	46c0      	nop			; (mov r8, r8)

0800895c <HAL_I2C_Init>:
{
 800895c:	b510      	push	{r4, lr}
 800895e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8008960:	d04d      	beq.n	80089fe <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008962:	2341      	movs	r3, #65	; 0x41
 8008964:	5cc3      	ldrb	r3, [r0, r3]
 8008966:	b2da      	uxtb	r2, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d043      	beq.n	80089f4 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800896c:	2341      	movs	r3, #65	; 0x41
 800896e:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8008970:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008972:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	438a      	bics	r2, r1
 800897a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800897c:	4921      	ldr	r1, [pc, #132]	; (8008a04 <HAL_I2C_Init+0xa8>)
 800897e:	6862      	ldr	r2, [r4, #4]
 8008980:	400a      	ands	r2, r1
 8008982:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	4920      	ldr	r1, [pc, #128]	; (8008a08 <HAL_I2C_Init+0xac>)
 8008988:	400a      	ands	r2, r1
 800898a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800898c:	68e2      	ldr	r2, [r4, #12]
 800898e:	2a01      	cmp	r2, #1
 8008990:	d02a      	beq.n	80089e8 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008992:	2184      	movs	r1, #132	; 0x84
 8008994:	68a0      	ldr	r0, [r4, #8]
 8008996:	0209      	lsls	r1, r1, #8
 8008998:	4301      	orrs	r1, r0
 800899a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800899c:	2a02      	cmp	r2, #2
 800899e:	d102      	bne.n	80089a6 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80089a0:	2280      	movs	r2, #128	; 0x80
 80089a2:	0112      	lsls	r2, r2, #4
 80089a4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089a6:	6859      	ldr	r1, [r3, #4]
 80089a8:	4a18      	ldr	r2, [pc, #96]	; (8008a0c <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 80089aa:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80089ac:	430a      	orrs	r2, r1
 80089ae:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	4915      	ldr	r1, [pc, #84]	; (8008a08 <HAL_I2C_Init+0xac>)
 80089b4:	400a      	ands	r2, r1
 80089b6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089b8:	6961      	ldr	r1, [r4, #20]
 80089ba:	6922      	ldr	r2, [r4, #16]
 80089bc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089be:	69a1      	ldr	r1, [r4, #24]
 80089c0:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089c2:	430a      	orrs	r2, r1
 80089c4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089c6:	6a21      	ldr	r1, [r4, #32]
 80089c8:	69e2      	ldr	r2, [r4, #28]
 80089ca:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 80089cc:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089ce:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089d6:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80089d8:	2241      	movs	r2, #65	; 0x41
 80089da:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089dc:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089de:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089e0:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 80089e2:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80089e4:	54a3      	strb	r3, [r4, r2]
}
 80089e6:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80089e8:	2280      	movs	r2, #128	; 0x80
 80089ea:	68a1      	ldr	r1, [r4, #8]
 80089ec:	0212      	lsls	r2, r2, #8
 80089ee:	430a      	orrs	r2, r1
 80089f0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089f2:	e7d8      	b.n	80089a6 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 80089f4:	3340      	adds	r3, #64	; 0x40
 80089f6:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80089f8:	f7fe fd1e 	bl	8007438 <HAL_I2C_MspInit>
 80089fc:	e7b6      	b.n	800896c <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 80089fe:	2001      	movs	r0, #1
 8008a00:	e7f1      	b.n	80089e6 <HAL_I2C_Init+0x8a>
 8008a02:	46c0      	nop			; (mov r8, r8)
 8008a04:	f0ffffff 	.word	0xf0ffffff
 8008a08:	ffff7fff 	.word	0xffff7fff
 8008a0c:	02008000 	.word	0x02008000

08008a10 <HAL_I2C_Mem_Write>:
{
 8008a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a12:	4645      	mov	r5, r8
 8008a14:	46de      	mov	lr, fp
 8008a16:	4657      	mov	r7, sl
 8008a18:	464e      	mov	r6, r9
 8008a1a:	b5e0      	push	{r5, r6, r7, lr}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	4699      	mov	r9, r3
 8008a20:	ab0c      	add	r3, sp, #48	; 0x30
 8008a22:	9201      	str	r2, [sp, #4]
 8008a24:	cb04      	ldmia	r3!, {r2}
 8008a26:	0004      	movs	r4, r0
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	4688      	mov	r8, r1
 8008a2c:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a2e:	2341      	movs	r3, #65	; 0x41
 8008a30:	5cc3      	ldrb	r3, [r0, r3]
{
 8008a32:	4692      	mov	sl, r2
 8008a34:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a36:	2b20      	cmp	r3, #32
 8008a38:	d000      	beq.n	8008a3c <HAL_I2C_Mem_Write+0x2c>
 8008a3a:	e0a7      	b.n	8008b8c <HAL_I2C_Mem_Write+0x17c>
    if ((pData == NULL) || (Size == 0U))
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	d100      	bne.n	8008a42 <HAL_I2C_Mem_Write+0x32>
 8008a40:	e099      	b.n	8008b76 <HAL_I2C_Mem_Write+0x166>
 8008a42:	465b      	mov	r3, fp
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d100      	bne.n	8008a4a <HAL_I2C_Mem_Write+0x3a>
 8008a48:	e095      	b.n	8008b76 <HAL_I2C_Mem_Write+0x166>
    __HAL_LOCK(hi2c);
 8008a4a:	2340      	movs	r3, #64	; 0x40
 8008a4c:	5cc2      	ldrb	r2, [r0, r3]
 8008a4e:	2a01      	cmp	r2, #1
 8008a50:	d100      	bne.n	8008a54 <HAL_I2C_Mem_Write+0x44>
 8008a52:	e09b      	b.n	8008b8c <HAL_I2C_Mem_Write+0x17c>
 8008a54:	2201      	movs	r2, #1
 8008a56:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008a58:	f7fe ffc6 	bl	80079e8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a5c:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8008a5e:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a60:	0236      	lsls	r6, r6, #8
 8008a62:	e005      	b.n	8008a70 <HAL_I2C_Mem_Write+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a64:	f7fe ffc0 	bl	80079e8 <HAL_GetTick>
 8008a68:	1bc0      	subs	r0, r0, r7
 8008a6a:	2819      	cmp	r0, #25
 8008a6c:	d900      	bls.n	8008a70 <HAL_I2C_Mem_Write+0x60>
 8008a6e:	e08f      	b.n	8008b90 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a70:	6822      	ldr	r2, [r4, #0]
 8008a72:	6993      	ldr	r3, [r2, #24]
 8008a74:	0019      	movs	r1, r3
 8008a76:	4031      	ands	r1, r6
 8008a78:	4233      	tst	r3, r6
 8008a7a:	d1f3      	bne.n	8008a64 <HAL_I2C_Mem_Write+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a7c:	2341      	movs	r3, #65	; 0x41
 8008a7e:	2021      	movs	r0, #33	; 0x21
 8008a80:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a82:	3301      	adds	r3, #1
 8008a84:	301f      	adds	r0, #31
 8008a86:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8008a88:	4653      	mov	r3, sl
 8008a8a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8008a8c:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a8e:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8008a90:	8563      	strh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a92:	4643      	mov	r3, r8
 8008a94:	059b      	lsls	r3, r3, #22
 8008a96:	0d9b      	lsrs	r3, r3, #22
 8008a98:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a9a:	464b      	mov	r3, r9
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a9c:	4874      	ldr	r0, [pc, #464]	; (8008c70 <HAL_I2C_Mem_Write+0x260>)
    hi2c->XferISR   = NULL;
 8008a9e:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8008aa0:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008aa2:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008aa4:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008aa6:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008aa8:	430b      	orrs	r3, r1
 8008aaa:	4641      	mov	r1, r8
 8008aac:	430b      	orrs	r3, r1
 8008aae:	4971      	ldr	r1, [pc, #452]	; (8008c74 <HAL_I2C_Mem_Write+0x264>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ab0:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ab6:	0029      	movs	r1, r5
 8008ab8:	003a      	movs	r2, r7
 8008aba:	f7ff fef9 	bl	80088b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d000      	beq.n	8008ac4 <HAL_I2C_Mem_Write+0xb4>
 8008ac2:	e0ab      	b.n	8008c1c <HAL_I2C_Mem_Write+0x20c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d000      	beq.n	8008acc <HAL_I2C_Mem_Write+0xbc>
 8008aca:	e06e      	b.n	8008baa <HAL_I2C_Mem_Write+0x19a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008acc:	466b      	mov	r3, sp
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	791b      	ldrb	r3, [r3, #4]
 8008ad2:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ad4:	2680      	movs	r6, #128	; 0x80
 8008ad6:	e002      	b.n	8008ade <HAL_I2C_Mem_Write+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8008ad8:	1c6b      	adds	r3, r5, #1
 8008ada:	d000      	beq.n	8008ade <HAL_I2C_Mem_Write+0xce>
 8008adc:	e08c      	b.n	8008bf8 <HAL_I2C_Mem_Write+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ade:	6993      	ldr	r3, [r2, #24]
 8008ae0:	421e      	tst	r6, r3
 8008ae2:	d0f9      	beq.n	8008ad8 <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ae4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008ae6:	2bff      	cmp	r3, #255	; 0xff
 8008ae8:	d800      	bhi.n	8008aec <HAL_I2C_Mem_Write+0xdc>
 8008aea:	e09c      	b.n	8008c26 <HAL_I2C_Mem_Write+0x216>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008aec:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008aee:	4962      	ldr	r1, [pc, #392]	; (8008c78 <HAL_I2C_Mem_Write+0x268>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008af0:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008af2:	6853      	ldr	r3, [r2, #4]
 8008af4:	400b      	ands	r3, r1
 8008af6:	4641      	mov	r1, r8
 8008af8:	430b      	orrs	r3, r1
 8008afa:	4960      	ldr	r1, [pc, #384]	; (8008c7c <HAL_I2C_Mem_Write+0x26c>)
 8008afc:	430b      	orrs	r3, r1
 8008afe:	6053      	str	r3, [r2, #4]
 8008b00:	4b5d      	ldr	r3, [pc, #372]	; (8008c78 <HAL_I2C_Mem_Write+0x268>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b02:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b04:	4699      	mov	r9, r3
 8008b06:	2380      	movs	r3, #128	; 0x80
 8008b08:	049b      	lsls	r3, r3, #18
 8008b0a:	469a      	mov	sl, r3
 8008b0c:	e003      	b.n	8008b16 <HAL_I2C_Mem_Write+0x106>
    } while (hi2c->XferCount > 0U);
 8008b0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d100      	bne.n	8008b16 <HAL_I2C_Mem_Write+0x106>
 8008b14:	e097      	b.n	8008c46 <HAL_I2C_Mem_Write+0x236>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b16:	003a      	movs	r2, r7
 8008b18:	0029      	movs	r1, r5
 8008b1a:	0020      	movs	r0, r4
 8008b1c:	f7ff fec8 	bl	80088b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d140      	bne.n	8008ba6 <HAL_I2C_Mem_Write+0x196>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8008b2a:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b2c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008b2e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008b30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008b38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b3a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b42:	2900      	cmp	r1, #0
 8008b44:	d0e3      	beq.n	8008b0e <HAL_I2C_Mem_Write+0xfe>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e1      	bne.n	8008b0e <HAL_I2C_Mem_Write+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b4a:	6993      	ldr	r3, [r2, #24]
 8008b4c:	421e      	tst	r6, r3
 8008b4e:	d104      	bne.n	8008b5a <HAL_I2C_Mem_Write+0x14a>
    if (Timeout != HAL_MAX_DELAY)
 8008b50:	1c6b      	adds	r3, r5, #1
 8008b52:	d139      	bne.n	8008bc8 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b54:	6993      	ldr	r3, [r2, #24]
 8008b56:	421e      	tst	r6, r3
 8008b58:	d0fa      	beq.n	8008b50 <HAL_I2C_Mem_Write+0x140>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b5c:	2bff      	cmp	r3, #255	; 0xff
 8008b5e:	d93c      	bls.n	8008bda <HAL_I2C_Mem_Write+0x1ca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b60:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b62:	4649      	mov	r1, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b64:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008b66:	6853      	ldr	r3, [r2, #4]
 8008b68:	400b      	ands	r3, r1
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	4943      	ldr	r1, [pc, #268]	; (8008c7c <HAL_I2C_Mem_Write+0x26c>)
 8008b70:	430b      	orrs	r3, r1
 8008b72:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008b74:	e7cb      	b.n	8008b0e <HAL_I2C_Mem_Write+0xfe>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b76:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8008b78:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008b7e:	b003      	add	sp, #12
 8008b80:	bcf0      	pop	{r4, r5, r6, r7}
 8008b82:	46bb      	mov	fp, r7
 8008b84:	46b2      	mov	sl, r6
 8008b86:	46a9      	mov	r9, r5
 8008b88:	46a0      	mov	r8, r4
 8008b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008b8c:	2002      	movs	r0, #2
 8008b8e:	e7f6      	b.n	8008b7e <HAL_I2C_Mem_Write+0x16e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b90:	2220      	movs	r2, #32
 8008b92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008b94:	4313      	orrs	r3, r2
 8008b96:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b98:	2341      	movs	r3, #65	; 0x41
 8008b9a:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	3222      	adds	r2, #34	; 0x22
 8008ba0:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8008ba2:	3a02      	subs	r2, #2
 8008ba4:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	e7e9      	b.n	8008b7e <HAL_I2C_Mem_Write+0x16e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008baa:	9e01      	ldr	r6, [sp, #4]
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	0a32      	lsrs	r2, r6, #8
 8008bb0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bb2:	0029      	movs	r1, r5
 8008bb4:	003a      	movs	r2, r7
 8008bb6:	0020      	movs	r0, r4
 8008bb8:	f7ff fe7a 	bl	80088b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d12d      	bne.n	8008c1c <HAL_I2C_Mem_Write+0x20c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bc0:	6822      	ldr	r2, [r4, #0]
 8008bc2:	b2f3      	uxtb	r3, r6
 8008bc4:	6293      	str	r3, [r2, #40]	; 0x28
 8008bc6:	e785      	b.n	8008ad4 <HAL_I2C_Mem_Write+0xc4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bc8:	f7fe ff0e 	bl	80079e8 <HAL_GetTick>
 8008bcc:	1bc0      	subs	r0, r0, r7
 8008bce:	4285      	cmp	r5, r0
 8008bd0:	d3de      	bcc.n	8008b90 <HAL_I2C_Mem_Write+0x180>
 8008bd2:	2d00      	cmp	r5, #0
 8008bd4:	d0dc      	beq.n	8008b90 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bd6:	6822      	ldr	r2, [r4, #0]
 8008bd8:	e7bc      	b.n	8008b54 <HAL_I2C_Mem_Write+0x144>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bda:	4648      	mov	r0, r9
          hi2c->XferSize = hi2c->XferCount;
 8008bdc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bde:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008be0:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008be2:	4003      	ands	r3, r0
 8008be4:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8008be6:	8521      	strh	r1, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008be8:	b2c9      	uxtb	r1, r1
 8008bea:	0409      	lsls	r1, r1, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bec:	4303      	orrs	r3, r0
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	4651      	mov	r1, sl
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	6053      	str	r3, [r2, #4]
}
 8008bf6:	e78a      	b.n	8008b0e <HAL_I2C_Mem_Write+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bf8:	f7fe fef6 	bl	80079e8 <HAL_GetTick>
 8008bfc:	1bc0      	subs	r0, r0, r7
 8008bfe:	4285      	cmp	r5, r0
 8008c00:	d303      	bcc.n	8008c0a <HAL_I2C_Mem_Write+0x1fa>
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	d001      	beq.n	8008c0a <HAL_I2C_Mem_Write+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c06:	6822      	ldr	r2, [r4, #0]
 8008c08:	e769      	b.n	8008ade <HAL_I2C_Mem_Write+0xce>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c12:	2341      	movs	r3, #65	; 0x41
 8008c14:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c16:	2200      	movs	r2, #0
 8008c18:	3301      	adds	r3, #1
 8008c1a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8008c1c:	2340      	movs	r3, #64	; 0x40
 8008c1e:	2200      	movs	r2, #0
      return HAL_ERROR;
 8008c20:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8008c22:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8008c24:	e7ab      	b.n	8008b7e <HAL_I2C_Mem_Write+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 8008c26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c28:	4813      	ldr	r0, [pc, #76]	; (8008c78 <HAL_I2C_Mem_Write+0x268>)
 8008c2a:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8008c2c:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c2e:	4001      	ands	r1, r0
 8008c30:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 8008c32:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c34:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c36:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c38:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c3a:	430b      	orrs	r3, r1
 8008c3c:	2180      	movs	r1, #128	; 0x80
 8008c3e:	0489      	lsls	r1, r1, #18
 8008c40:	430b      	orrs	r3, r1
 8008c42:	6053      	str	r3, [r2, #4]
}
 8008c44:	e75c      	b.n	8008b00 <HAL_I2C_Mem_Write+0xf0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c46:	003a      	movs	r2, r7
 8008c48:	0029      	movs	r1, r5
 8008c4a:	0020      	movs	r0, r4
 8008c4c:	f7ff fe5c 	bl	8008908 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1a8      	bne.n	8008ba6 <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c54:	2120      	movs	r1, #32
 8008c56:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8008c58:	4d09      	ldr	r5, [pc, #36]	; (8008c80 <HAL_I2C_Mem_Write+0x270>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c5a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	402a      	ands	r2, r5
 8008c60:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008c62:	2341      	movs	r3, #65	; 0x41
 8008c64:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c66:	3301      	adds	r3, #1
 8008c68:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8008c6a:	3b02      	subs	r3, #2
 8008c6c:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8008c6e:	e786      	b.n	8008b7e <HAL_I2C_Mem_Write+0x16e>
 8008c70:	fc009800 	.word	0xfc009800
 8008c74:	01002000 	.word	0x01002000
 8008c78:	fc009c00 	.word	0xfc009c00
 8008c7c:	01ff0000 	.word	0x01ff0000
 8008c80:	fe00e800 	.word	0xfe00e800

08008c84 <HAL_I2C_Mem_Read>:
{
 8008c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c86:	4645      	mov	r5, r8
 8008c88:	46de      	mov	lr, fp
 8008c8a:	4657      	mov	r7, sl
 8008c8c:	464e      	mov	r6, r9
 8008c8e:	b5e0      	push	{r5, r6, r7, lr}
 8008c90:	b083      	sub	sp, #12
 8008c92:	4699      	mov	r9, r3
 8008c94:	ab0c      	add	r3, sp, #48	; 0x30
 8008c96:	9201      	str	r2, [sp, #4]
 8008c98:	cb04      	ldmia	r3!, {r2}
 8008c9a:	0005      	movs	r5, r0
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	4688      	mov	r8, r1
 8008ca0:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ca2:	2341      	movs	r3, #65	; 0x41
 8008ca4:	5cc3      	ldrb	r3, [r0, r3]
{
 8008ca6:	4692      	mov	sl, r2
 8008ca8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008caa:	2b20      	cmp	r3, #32
 8008cac:	d000      	beq.n	8008cb0 <HAL_I2C_Mem_Read+0x2c>
 8008cae:	e090      	b.n	8008dd2 <HAL_I2C_Mem_Read+0x14e>
    if ((pData == NULL) || (Size == 0U))
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	d100      	bne.n	8008cb6 <HAL_I2C_Mem_Read+0x32>
 8008cb4:	e082      	b.n	8008dbc <HAL_I2C_Mem_Read+0x138>
 8008cb6:	465b      	mov	r3, fp
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d100      	bne.n	8008cbe <HAL_I2C_Mem_Read+0x3a>
 8008cbc:	e07e      	b.n	8008dbc <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 8008cbe:	2340      	movs	r3, #64	; 0x40
 8008cc0:	5cc2      	ldrb	r2, [r0, r3]
 8008cc2:	2a01      	cmp	r2, #1
 8008cc4:	d100      	bne.n	8008cc8 <HAL_I2C_Mem_Read+0x44>
 8008cc6:	e084      	b.n	8008dd2 <HAL_I2C_Mem_Read+0x14e>
 8008cc8:	2201      	movs	r2, #1
 8008cca:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008ccc:	f7fe fe8c 	bl	80079e8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cd0:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8008cd2:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cd4:	0236      	lsls	r6, r6, #8
 8008cd6:	e005      	b.n	8008ce4 <HAL_I2C_Mem_Read+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cd8:	f7fe fe86 	bl	80079e8 <HAL_GetTick>
 8008cdc:	1bc0      	subs	r0, r0, r7
 8008cde:	2819      	cmp	r0, #25
 8008ce0:	d900      	bls.n	8008ce4 <HAL_I2C_Mem_Read+0x60>
 8008ce2:	e07f      	b.n	8008de4 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ce4:	682a      	ldr	r2, [r5, #0]
 8008ce6:	6993      	ldr	r3, [r2, #24]
 8008ce8:	0019      	movs	r1, r3
 8008cea:	4031      	ands	r1, r6
 8008cec:	4233      	tst	r3, r6
 8008cee:	d1f3      	bne.n	8008cd8 <HAL_I2C_Mem_Read+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008cf0:	2341      	movs	r3, #65	; 0x41
 8008cf2:	2022      	movs	r0, #34	; 0x22
 8008cf4:	54e8      	strb	r0, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	301e      	adds	r0, #30
 8008cfa:	54e8      	strb	r0, [r5, r3]
    hi2c->pBuffPtr  = pData;
 8008cfc:	4653      	mov	r3, sl
 8008cfe:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount = Size;
 8008d00:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d02:	6469      	str	r1, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 8008d04:	856b      	strh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d06:	4643      	mov	r3, r8
 8008d08:	059b      	lsls	r3, r3, #22
 8008d0a:	0d9b      	lsrs	r3, r3, #22
 8008d0c:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d0e:	464b      	mov	r3, r9
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d10:	4877      	ldr	r0, [pc, #476]	; (8008ef0 <HAL_I2C_Mem_Read+0x26c>)
    hi2c->XferISR   = NULL;
 8008d12:	6369      	str	r1, [r5, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d14:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d16:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d18:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d1a:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	4641      	mov	r1, r8
 8008d20:	430b      	orrs	r3, r1
 8008d22:	2180      	movs	r1, #128	; 0x80
 8008d24:	0189      	lsls	r1, r1, #6
 8008d26:	430b      	orrs	r3, r1
 8008d28:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d2a:	0021      	movs	r1, r4
 8008d2c:	003a      	movs	r2, r7
 8008d2e:	0028      	movs	r0, r5
 8008d30:	f7ff fdbe 	bl	80088b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d000      	beq.n	8008d3a <HAL_I2C_Mem_Read+0xb6>
 8008d38:	e0d3      	b.n	8008ee2 <HAL_I2C_Mem_Read+0x25e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d000      	beq.n	8008d42 <HAL_I2C_Mem_Read+0xbe>
 8008d40:	e07a      	b.n	8008e38 <HAL_I2C_Mem_Read+0x1b4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d42:	466b      	mov	r3, sp
 8008d44:	682a      	ldr	r2, [r5, #0]
 8008d46:	791b      	ldrb	r3, [r3, #4]
 8008d48:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d4a:	2640      	movs	r6, #64	; 0x40
 8008d4c:	e002      	b.n	8008d54 <HAL_I2C_Mem_Read+0xd0>
    if (Timeout != HAL_MAX_DELAY)
 8008d4e:	1c63      	adds	r3, r4, #1
 8008d50:	d000      	beq.n	8008d54 <HAL_I2C_Mem_Read+0xd0>
 8008d52:	e0a5      	b.n	8008ea0 <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d54:	6993      	ldr	r3, [r2, #24]
 8008d56:	421e      	tst	r6, r3
 8008d58:	d0f9      	beq.n	8008d4e <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d5a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008d5c:	2bff      	cmp	r3, #255	; 0xff
 8008d5e:	d800      	bhi.n	8008d62 <HAL_I2C_Mem_Read+0xde>
 8008d60:	e0a7      	b.n	8008eb2 <HAL_I2C_Mem_Read+0x22e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d62:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d64:	4962      	ldr	r1, [pc, #392]	; (8008ef0 <HAL_I2C_Mem_Read+0x26c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d66:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d68:	6853      	ldr	r3, [r2, #4]
 8008d6a:	400b      	ands	r3, r1
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	4960      	ldr	r1, [pc, #384]	; (8008ef4 <HAL_I2C_Mem_Read+0x270>)
 8008d72:	430b      	orrs	r3, r1
 8008d74:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d76:	2380      	movs	r3, #128	; 0x80
 8008d78:	4699      	mov	r9, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d7a:	4b5f      	ldr	r3, [pc, #380]	; (8008ef8 <HAL_I2C_Mem_Read+0x274>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d7c:	2604      	movs	r6, #4
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d7e:	469a      	mov	sl, r3
 8008d80:	e001      	b.n	8008d86 <HAL_I2C_Mem_Read+0x102>
    if (Timeout != HAL_MAX_DELAY)
 8008d82:	1c63      	adds	r3, r4, #1
 8008d84:	d127      	bne.n	8008dd6 <HAL_I2C_Mem_Read+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d86:	6993      	ldr	r3, [r2, #24]
 8008d88:	421e      	tst	r6, r3
 8008d8a:	d0fa      	beq.n	8008d82 <HAL_I2C_Mem_Read+0xfe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d90:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8008d92:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8008d94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8008d96:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008d98:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8008d9a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8008d9c:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8008d9e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 8008da0:	856a      	strh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8008da2:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008da4:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008daa:	2a00      	cmp	r2, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_I2C_Mem_Read+0x12e>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d02c      	beq.n	8008e0c <HAL_I2C_Mem_Read+0x188>
    } while (hi2c->XferCount > 0U);
 8008db2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d04e      	beq.n	8008e56 <HAL_I2C_Mem_Read+0x1d2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008db8:	682a      	ldr	r2, [r5, #0]
 8008dba:	e7e4      	b.n	8008d86 <HAL_I2C_Mem_Read+0x102>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008dbc:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8008dbe:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	646b      	str	r3, [r5, #68]	; 0x44
}
 8008dc4:	b003      	add	sp, #12
 8008dc6:	bcf0      	pop	{r4, r5, r6, r7}
 8008dc8:	46bb      	mov	fp, r7
 8008dca:	46b2      	mov	sl, r6
 8008dcc:	46a9      	mov	r9, r5
 8008dce:	46a0      	mov	r8, r4
 8008dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008dd2:	2002      	movs	r0, #2
 8008dd4:	e7f6      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dd6:	f7fe fe07 	bl	80079e8 <HAL_GetTick>
 8008dda:	1bc0      	subs	r0, r0, r7
 8008ddc:	4284      	cmp	r4, r0
 8008dde:	d301      	bcc.n	8008de4 <HAL_I2C_Mem_Read+0x160>
 8008de0:	2c00      	cmp	r4, #0
 8008de2:	d1e9      	bne.n	8008db8 <HAL_I2C_Mem_Read+0x134>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008de4:	2220      	movs	r2, #32
 8008de6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          return HAL_ERROR;
 8008de8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dea:	4313      	orrs	r3, r2
 8008dec:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008dee:	2341      	movs	r3, #65	; 0x41
 8008df0:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	3222      	adds	r2, #34	; 0x22
 8008df6:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8008df8:	3a02      	subs	r2, #2
 8008dfa:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8008dfc:	e7e2      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dfe:	f7fe fdf3 	bl	80079e8 <HAL_GetTick>
 8008e02:	1bc0      	subs	r0, r0, r7
 8008e04:	4284      	cmp	r4, r0
 8008e06:	d3ed      	bcc.n	8008de4 <HAL_I2C_Mem_Read+0x160>
 8008e08:	2c00      	cmp	r4, #0
 8008e0a:	d0eb      	beq.n	8008de4 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e0c:	682a      	ldr	r2, [r5, #0]
 8008e0e:	e001      	b.n	8008e14 <HAL_I2C_Mem_Read+0x190>
    if (Timeout != HAL_MAX_DELAY)
 8008e10:	1c63      	adds	r3, r4, #1
 8008e12:	d1f4      	bne.n	8008dfe <HAL_I2C_Mem_Read+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008e14:	4649      	mov	r1, r9
 8008e16:	6993      	ldr	r3, [r2, #24]
 8008e18:	4219      	tst	r1, r3
 8008e1a:	d0f9      	beq.n	8008e10 <HAL_I2C_Mem_Read+0x18c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e1c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8008e1e:	2bff      	cmp	r3, #255	; 0xff
 8008e20:	d92e      	bls.n	8008e80 <HAL_I2C_Mem_Read+0x1fc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e22:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e24:	4651      	mov	r1, sl
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e26:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e28:	6853      	ldr	r3, [r2, #4]
 8008e2a:	400b      	ands	r3, r1
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	4932      	ldr	r1, [pc, #200]	; (8008efc <HAL_I2C_Mem_Read+0x278>)
 8008e32:	430b      	orrs	r3, r1
 8008e34:	6053      	str	r3, [r2, #4]
}
 8008e36:	e7bc      	b.n	8008db2 <HAL_I2C_Mem_Read+0x12e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e38:	9e01      	ldr	r6, [sp, #4]
 8008e3a:	682b      	ldr	r3, [r5, #0]
 8008e3c:	0a32      	lsrs	r2, r6, #8
 8008e3e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e40:	0021      	movs	r1, r4
 8008e42:	003a      	movs	r2, r7
 8008e44:	0028      	movs	r0, r5
 8008e46:	f7ff fd33 	bl	80088b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d149      	bne.n	8008ee2 <HAL_I2C_Mem_Read+0x25e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e4e:	682a      	ldr	r2, [r5, #0]
 8008e50:	b2f3      	uxtb	r3, r6
 8008e52:	6293      	str	r3, [r2, #40]	; 0x28
 8008e54:	e779      	b.n	8008d4a <HAL_I2C_Mem_Read+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e56:	003a      	movs	r2, r7
 8008e58:	0021      	movs	r1, r4
 8008e5a:	0028      	movs	r0, r5
 8008e5c:	f7ff fd54 	bl	8008908 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d143      	bne.n	8008eec <HAL_I2C_Mem_Read+0x268>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e64:	2120      	movs	r1, #32
 8008e66:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 8008e68:	4c25      	ldr	r4, [pc, #148]	; (8008f00 <HAL_I2C_Mem_Read+0x27c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e6a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008e6c:	685a      	ldr	r2, [r3, #4]
 8008e6e:	4022      	ands	r2, r4
 8008e70:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008e72:	2341      	movs	r3, #65	; 0x41
 8008e74:	54e9      	strb	r1, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e76:	3301      	adds	r3, #1
 8008e78:	54e8      	strb	r0, [r5, r3]
    __HAL_UNLOCK(hi2c);
 8008e7a:	3b02      	subs	r3, #2
 8008e7c:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 8008e7e:	e7a1      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x140>
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e80:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8008e82:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e84:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e8e:	4303      	orrs	r3, r0
 8008e90:	4650      	mov	r0, sl
 8008e92:	4001      	ands	r1, r0
 8008e94:	430b      	orrs	r3, r1
 8008e96:	2180      	movs	r1, #128	; 0x80
 8008e98:	0489      	lsls	r1, r1, #18
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	6053      	str	r3, [r2, #4]
}
 8008e9e:	e788      	b.n	8008db2 <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ea0:	f7fe fda2 	bl	80079e8 <HAL_GetTick>
 8008ea4:	1bc0      	subs	r0, r0, r7
 8008ea6:	4284      	cmp	r4, r0
 8008ea8:	d312      	bcc.n	8008ed0 <HAL_I2C_Mem_Read+0x24c>
 8008eaa:	2c00      	cmp	r4, #0
 8008eac:	d010      	beq.n	8008ed0 <HAL_I2C_Mem_Read+0x24c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008eae:	682a      	ldr	r2, [r5, #0]
 8008eb0:	e750      	b.n	8008d54 <HAL_I2C_Mem_Read+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 8008eb2:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8008eb4:	480e      	ldr	r0, [pc, #56]	; (8008ef0 <HAL_I2C_Mem_Read+0x26c>)
 8008eb6:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8008eb8:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008eba:	4001      	ands	r1, r0
 8008ebc:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 8008ebe:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ec0:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ec2:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ec4:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008ec6:	430b      	orrs	r3, r1
 8008ec8:	490e      	ldr	r1, [pc, #56]	; (8008f04 <HAL_I2C_Mem_Read+0x280>)
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6053      	str	r3, [r2, #4]
}
 8008ece:	e752      	b.n	8008d76 <HAL_I2C_Mem_Read+0xf2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ed0:	2220      	movs	r2, #32
 8008ed2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ed8:	2341      	movs	r3, #65	; 0x41
 8008eda:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008edc:	2200      	movs	r2, #0
 8008ede:	3301      	adds	r3, #1
 8008ee0:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 8008ee2:	2340      	movs	r3, #64	; 0x40
 8008ee4:	2200      	movs	r2, #0
      return HAL_ERROR;
 8008ee6:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8008ee8:	54ea      	strb	r2, [r5, r3]
      return HAL_ERROR;
 8008eea:	e76b      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x140>
      return HAL_ERROR;
 8008eec:	2001      	movs	r0, #1
 8008eee:	e769      	b.n	8008dc4 <HAL_I2C_Mem_Read+0x140>
 8008ef0:	fc009800 	.word	0xfc009800
 8008ef4:	01ff2400 	.word	0x01ff2400
 8008ef8:	fc009c00 	.word	0xfc009c00
 8008efc:	01ff0000 	.word	0x01ff0000
 8008f00:	fe00e800 	.word	0xfe00e800
 8008f04:	02002400 	.word	0x02002400

08008f08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f08:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f0a:	2441      	movs	r4, #65	; 0x41
 8008f0c:	5d03      	ldrb	r3, [r0, r4]
{
 8008f0e:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f10:	b2dd      	uxtb	r5, r3
 8008f12:	2b20      	cmp	r3, #32
 8008f14:	d11a      	bne.n	8008f4c <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f16:	2640      	movs	r6, #64	; 0x40
 8008f18:	5d83      	ldrb	r3, [r0, r6]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d016      	beq.n	8008f4c <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f1e:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f20:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f22:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8008f24:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f26:	490a      	ldr	r1, [pc, #40]	; (8008f50 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	43ba      	bics	r2, r7
 8008f2c:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	400a      	ands	r2, r1
 8008f32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f34:	4662      	mov	r2, ip
 8008f36:	6819      	ldr	r1, [r3, #0]
 8008f38:	4311      	orrs	r1, r2
 8008f3a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	433a      	orrs	r2, r7
 8008f40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f42:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008f44:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8008f46:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8008f48:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008f4c:	2002      	movs	r0, #2
 8008f4e:	e7fc      	b.n	8008f4a <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8008f50:	ffffefff 	.word	0xffffefff

08008f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f56:	46ce      	mov	lr, r9
 8008f58:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f5a:	2441      	movs	r4, #65	; 0x41
{
 8008f5c:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f5e:	5d03      	ldrb	r3, [r0, r4]
 8008f60:	b2dd      	uxtb	r5, r3
 8008f62:	2b20      	cmp	r3, #32
 8008f64:	d11f      	bne.n	8008fa6 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f66:	2640      	movs	r6, #64	; 0x40
 8008f68:	5d83      	ldrb	r3, [r0, r6]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d01b      	beq.n	8008fa6 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f6e:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f70:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f72:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8008f74:	6802      	ldr	r2, [r0, #0]
 8008f76:	46b9      	mov	r9, r7
 8008f78:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f7a:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8008f7c:	43bb      	bics	r3, r7
 8008f7e:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8008f80:	6813      	ldr	r3, [r2, #0]
 8008f82:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8008f84:	4647      	mov	r7, r8
 8008f86:	4b09      	ldr	r3, [pc, #36]	; (8008fac <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8008f88:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 8008f8a:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008f8c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f8e:	4649      	mov	r1, r9
 8008f90:	6813      	ldr	r3, [r2, #0]
 8008f92:	430b      	orrs	r3, r1
 8008f94:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f96:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008f98:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8008f9a:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8008f9c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008f9e:	bcc0      	pop	{r6, r7}
 8008fa0:	46b9      	mov	r9, r7
 8008fa2:	46b0      	mov	r8, r6
 8008fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008fa6:	2002      	movs	r0, #2
 8008fa8:	e7f9      	b.n	8008f9e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8008faa:	46c0      	nop			; (mov r8, r8)
 8008fac:	fffff0ff 	.word	0xfffff0ff

08008fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008fb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008fb2:	4c13      	ldr	r4, [pc, #76]	; (8009000 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8008fb4:	4a13      	ldr	r2, [pc, #76]	; (8009004 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8008fb6:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8008fb8:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008fba:	4013      	ands	r3, r2
 8008fbc:	4303      	orrs	r3, r0
 8008fbe:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008fc0:	2380      	movs	r3, #128	; 0x80
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4298      	cmp	r0, r3
 8008fc6:	d001      	beq.n	8008fcc <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8008fc8:	0028      	movs	r0, r5
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008fcc:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8008fce:	490f      	ldr	r1, [pc, #60]	; (800900c <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	0058      	lsls	r0, r3, #1
 8008fd4:	18c0      	adds	r0, r0, r3
 8008fd6:	0040      	lsls	r0, r0, #1
 8008fd8:	f7f7 f8b2 	bl	8000140 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008fdc:	2280      	movs	r2, #128	; 0x80
 8008fde:	6963      	ldr	r3, [r4, #20]
 8008fe0:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008fe2:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008fe4:	4213      	tst	r3, r2
 8008fe6:	d102      	bne.n	8008fee <HAL_PWREx_ControlVoltageScaling+0x3e>
 8008fe8:	e7ee      	b.n	8008fc8 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d005      	beq.n	8008ffa <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008fee:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8008ff0:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ff2:	4213      	tst	r3, r2
 8008ff4:	d1f9      	bne.n	8008fea <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8008ff6:	2500      	movs	r5, #0
 8008ff8:	e7e6      	b.n	8008fc8 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8008ffa:	2503      	movs	r5, #3
 8008ffc:	e7e4      	b.n	8008fc8 <HAL_PWREx_ControlVoltageScaling+0x18>
 8008ffe:	46c0      	nop			; (mov r8, r8)
 8009000:	40007000 	.word	0x40007000
 8009004:	fffff9ff 	.word	0xfffff9ff
 8009008:	2000011c 	.word	0x2000011c
 800900c:	000f4240 	.word	0x000f4240

08009010 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009012:	46ce      	mov	lr, r9
 8009014:	4647      	mov	r7, r8
 8009016:	b580      	push	{r7, lr}
 8009018:	0004      	movs	r4, r0
 800901a:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800901c:	2800      	cmp	r0, #0
 800901e:	d100      	bne.n	8009022 <HAL_RCC_OscConfig+0x12>
 8009020:	e0f4      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009022:	6803      	ldr	r3, [r0, #0]
 8009024:	07da      	lsls	r2, r3, #31
 8009026:	d531      	bpl.n	800908c <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009028:	2238      	movs	r2, #56	; 0x38
 800902a:	49c7      	ldr	r1, [pc, #796]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 800902c:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800902e:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009030:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009032:	2a10      	cmp	r2, #16
 8009034:	d100      	bne.n	8009038 <HAL_RCC_OscConfig+0x28>
 8009036:	e0ef      	b.n	8009218 <HAL_RCC_OscConfig+0x208>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009038:	2a08      	cmp	r2, #8
 800903a:	d100      	bne.n	800903e <HAL_RCC_OscConfig+0x2e>
 800903c:	e0f0      	b.n	8009220 <HAL_RCC_OscConfig+0x210>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800903e:	2280      	movs	r2, #128	; 0x80
 8009040:	6863      	ldr	r3, [r4, #4]
 8009042:	0252      	lsls	r2, r2, #9
 8009044:	4293      	cmp	r3, r2
 8009046:	d100      	bne.n	800904a <HAL_RCC_OscConfig+0x3a>
 8009048:	e0fd      	b.n	8009246 <HAL_RCC_OscConfig+0x236>
 800904a:	21a0      	movs	r1, #160	; 0xa0
 800904c:	02c9      	lsls	r1, r1, #11
 800904e:	428b      	cmp	r3, r1
 8009050:	d100      	bne.n	8009054 <HAL_RCC_OscConfig+0x44>
 8009052:	e1d0      	b.n	80093f6 <HAL_RCC_OscConfig+0x3e6>
 8009054:	4dbc      	ldr	r5, [pc, #752]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 8009056:	49bd      	ldr	r1, [pc, #756]	; (800934c <HAL_RCC_OscConfig+0x33c>)
 8009058:	682a      	ldr	r2, [r5, #0]
 800905a:	400a      	ands	r2, r1
 800905c:	602a      	str	r2, [r5, #0]
 800905e:	682a      	ldr	r2, [r5, #0]
 8009060:	49bb      	ldr	r1, [pc, #748]	; (8009350 <HAL_RCC_OscConfig+0x340>)
 8009062:	400a      	ands	r2, r1
 8009064:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009066:	2b00      	cmp	r3, #0
 8009068:	d000      	beq.n	800906c <HAL_RCC_OscConfig+0x5c>
 800906a:	e0f0      	b.n	800924e <HAL_RCC_OscConfig+0x23e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800906c:	f7fe fcbc 	bl	80079e8 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009070:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8009072:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009074:	02bf      	lsls	r7, r7, #10
 8009076:	e005      	b.n	8009084 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009078:	f7fe fcb6 	bl	80079e8 <HAL_GetTick>
 800907c:	1b80      	subs	r0, r0, r6
 800907e:	2864      	cmp	r0, #100	; 0x64
 8009080:	d900      	bls.n	8009084 <HAL_RCC_OscConfig+0x74>
 8009082:	e138      	b.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	423b      	tst	r3, r7
 8009088:	d1f6      	bne.n	8009078 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	079a      	lsls	r2, r3, #30
 800908e:	d52b      	bpl.n	80090e8 <HAL_RCC_OscConfig+0xd8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009090:	2338      	movs	r3, #56	; 0x38
 8009092:	4aad      	ldr	r2, [pc, #692]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 8009094:	6891      	ldr	r1, [r2, #8]
 8009096:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009098:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800909a:	2b10      	cmp	r3, #16
 800909c:	d100      	bne.n	80090a0 <HAL_RCC_OscConfig+0x90>
 800909e:	e0e7      	b.n	8009270 <HAL_RCC_OscConfig+0x260>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d000      	beq.n	80090a6 <HAL_RCC_OscConfig+0x96>
 80090a4:	e0e9      	b.n	800927a <HAL_RCC_OscConfig+0x26a>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090a6:	6813      	ldr	r3, [r2, #0]
 80090a8:	055b      	lsls	r3, r3, #21
 80090aa:	d500      	bpl.n	80090ae <HAL_RCC_OscConfig+0x9e>
 80090ac:	e0aa      	b.n	8009204 <HAL_RCC_OscConfig+0x1f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090ae:	6851      	ldr	r1, [r2, #4]
 80090b0:	6963      	ldr	r3, [r4, #20]
 80090b2:	48a8      	ldr	r0, [pc, #672]	; (8009354 <HAL_RCC_OscConfig+0x344>)
 80090b4:	021b      	lsls	r3, r3, #8
 80090b6:	4001      	ands	r1, r0
 80090b8:	430b      	orrs	r3, r1
 80090ba:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80090bc:	4aa2      	ldr	r2, [pc, #648]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 80090be:	49a6      	ldr	r1, [pc, #664]	; (8009358 <HAL_RCC_OscConfig+0x348>)
 80090c0:	6813      	ldr	r3, [r2, #0]
 80090c2:	400b      	ands	r3, r1
 80090c4:	6921      	ldr	r1, [r4, #16]
 80090c6:	430b      	orrs	r3, r1
 80090c8:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80090ca:	6813      	ldr	r3, [r2, #0]
 80090cc:	4aa3      	ldr	r2, [pc, #652]	; (800935c <HAL_RCC_OscConfig+0x34c>)
 80090ce:	049b      	lsls	r3, r3, #18
 80090d0:	0f5b      	lsrs	r3, r3, #29
 80090d2:	40da      	lsrs	r2, r3
 80090d4:	49a2      	ldr	r1, [pc, #648]	; (8009360 <HAL_RCC_OscConfig+0x350>)
 80090d6:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80090d8:	4ba2      	ldr	r3, [pc, #648]	; (8009364 <HAL_RCC_OscConfig+0x354>)
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	f7fe fb40 	bl	8007760 <HAL_InitTick>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d000      	beq.n	80090e6 <HAL_RCC_OscConfig+0xd6>
 80090e4:	e092      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090e6:	6823      	ldr	r3, [r4, #0]
 80090e8:	071a      	lsls	r2, r3, #28
 80090ea:	d46d      	bmi.n	80091c8 <HAL_RCC_OscConfig+0x1b8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090ec:	075b      	lsls	r3, r3, #29
 80090ee:	d545      	bpl.n	800917c <HAL_RCC_OscConfig+0x16c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80090f0:	2338      	movs	r3, #56	; 0x38
 80090f2:	4a95      	ldr	r2, [pc, #596]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 80090f4:	6891      	ldr	r1, [r2, #8]
 80090f6:	400b      	ands	r3, r1
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d100      	bne.n	80090fe <HAL_RCC_OscConfig+0xee>
 80090fc:	e0e3      	b.n	80092c6 <HAL_RCC_OscConfig+0x2b6>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80090fe:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8009100:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009102:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009104:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8009106:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009108:	4219      	tst	r1, r3
 800910a:	d108      	bne.n	800911e <HAL_RCC_OscConfig+0x10e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800910c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800910e:	4319      	orrs	r1, r3
 8009110:	63d1      	str	r1, [r2, #60]	; 0x3c
 8009112:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009114:	4013      	ands	r3, r2
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800911a:	2301      	movs	r3, #1
 800911c:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800911e:	2780      	movs	r7, #128	; 0x80
 8009120:	4e91      	ldr	r6, [pc, #580]	; (8009368 <HAL_RCC_OscConfig+0x358>)
 8009122:	007f      	lsls	r7, r7, #1
 8009124:	6833      	ldr	r3, [r6, #0]
 8009126:	423b      	tst	r3, r7
 8009128:	d100      	bne.n	800912c <HAL_RCC_OscConfig+0x11c>
 800912a:	e0d5      	b.n	80092d8 <HAL_RCC_OscConfig+0x2c8>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800912c:	68a3      	ldr	r3, [r4, #8]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d100      	bne.n	8009134 <HAL_RCC_OscConfig+0x124>
 8009132:	e123      	b.n	800937c <HAL_RCC_OscConfig+0x36c>
 8009134:	2b05      	cmp	r3, #5
 8009136:	d100      	bne.n	800913a <HAL_RCC_OscConfig+0x12a>
 8009138:	e1ba      	b.n	80094b0 <HAL_RCC_OscConfig+0x4a0>
 800913a:	2101      	movs	r1, #1
 800913c:	4e82      	ldr	r6, [pc, #520]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 800913e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8009140:	438a      	bics	r2, r1
 8009142:	65f2      	str	r2, [r6, #92]	; 0x5c
 8009144:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8009146:	3103      	adds	r1, #3
 8009148:	438a      	bics	r2, r1
 800914a:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800914c:	2b00      	cmp	r3, #0
 800914e:	d000      	beq.n	8009152 <HAL_RCC_OscConfig+0x142>
 8009150:	e118      	b.n	8009384 <HAL_RCC_OscConfig+0x374>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009152:	f7fe fc49 	bl	80079e8 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009156:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8009158:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800915a:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800915c:	4d83      	ldr	r5, [pc, #524]	; (800936c <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800915e:	e005      	b.n	800916c <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009160:	f7fe fc42 	bl	80079e8 <HAL_GetTick>
 8009164:	1bc0      	subs	r0, r0, r7
 8009166:	42a8      	cmp	r0, r5
 8009168:	d900      	bls.n	800916c <HAL_RCC_OscConfig+0x15c>
 800916a:	e0c4      	b.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800916c:	4642      	mov	r2, r8
 800916e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8009170:	421a      	tst	r2, r3
 8009172:	d1f5      	bne.n	8009160 <HAL_RCC_OscConfig+0x150>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009174:	464b      	mov	r3, r9
 8009176:	2b01      	cmp	r3, #1
 8009178:	d100      	bne.n	800917c <HAL_RCC_OscConfig+0x16c>
 800917a:	e155      	b.n	8009428 <HAL_RCC_OscConfig+0x418>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800917c:	69e3      	ldr	r3, [r4, #28]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d020      	beq.n	80091c4 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009182:	2238      	movs	r2, #56	; 0x38
 8009184:	4d70      	ldr	r5, [pc, #448]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 8009186:	68a9      	ldr	r1, [r5, #8]
 8009188:	400a      	ands	r2, r1
 800918a:	2a10      	cmp	r2, #16
 800918c:	d100      	bne.n	8009190 <HAL_RCC_OscConfig+0x180>
 800918e:	e10b      	b.n	80093a8 <HAL_RCC_OscConfig+0x398>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009190:	2b02      	cmp	r3, #2
 8009192:	d100      	bne.n	8009196 <HAL_RCC_OscConfig+0x186>
 8009194:	e14e      	b.n	8009434 <HAL_RCC_OscConfig+0x424>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	4a75      	ldr	r2, [pc, #468]	; (8009370 <HAL_RCC_OscConfig+0x360>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800919a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800919c:	4013      	ands	r3, r2
 800919e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80091a0:	f7fe fc22 	bl	80079e8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091a4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80091a6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091a8:	e005      	b.n	80091b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091aa:	f7fe fc1d 	bl	80079e8 <HAL_GetTick>
 80091ae:	1b00      	subs	r0, r0, r4
 80091b0:	2802      	cmp	r0, #2
 80091b2:	d900      	bls.n	80091b6 <HAL_RCC_OscConfig+0x1a6>
 80091b4:	e09f      	b.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091b6:	682b      	ldr	r3, [r5, #0]
 80091b8:	4233      	tst	r3, r6
 80091ba:	d1f6      	bne.n	80091aa <HAL_RCC_OscConfig+0x19a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80091bc:	68eb      	ldr	r3, [r5, #12]
 80091be:	4a6d      	ldr	r2, [pc, #436]	; (8009374 <HAL_RCC_OscConfig+0x364>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	60eb      	str	r3, [r5, #12]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80091c4:	2000      	movs	r0, #0
 80091c6:	e022      	b.n	800920e <HAL_RCC_OscConfig+0x1fe>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80091c8:	2238      	movs	r2, #56	; 0x38
 80091ca:	4d5f      	ldr	r5, [pc, #380]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 80091cc:	68a9      	ldr	r1, [r5, #8]
 80091ce:	400a      	ands	r2, r1
 80091d0:	2a18      	cmp	r2, #24
 80091d2:	d02f      	beq.n	8009234 <HAL_RCC_OscConfig+0x224>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80091d4:	69a3      	ldr	r3, [r4, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d100      	bne.n	80091dc <HAL_RCC_OscConfig+0x1cc>
 80091da:	e08e      	b.n	80092fa <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_LSI_ENABLE();
 80091dc:	2201      	movs	r2, #1
 80091de:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091e0:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80091e2:	4313      	orrs	r3, r2
 80091e4:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80091e6:	f7fe fbff 	bl	80079e8 <HAL_GetTick>
 80091ea:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091ec:	e005      	b.n	80091fa <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091ee:	f7fe fbfb 	bl	80079e8 <HAL_GetTick>
 80091f2:	1b80      	subs	r0, r0, r6
 80091f4:	2802      	cmp	r0, #2
 80091f6:	d900      	bls.n	80091fa <HAL_RCC_OscConfig+0x1ea>
 80091f8:	e07d      	b.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80091fa:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80091fc:	421f      	tst	r7, r3
 80091fe:	d0f6      	beq.n	80091ee <HAL_RCC_OscConfig+0x1de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	e773      	b.n	80090ec <HAL_RCC_OscConfig+0xdc>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009204:	68e3      	ldr	r3, [r4, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d000      	beq.n	800920c <HAL_RCC_OscConfig+0x1fc>
 800920a:	e750      	b.n	80090ae <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 800920c:	2001      	movs	r0, #1
}
 800920e:	b003      	add	sp, #12
 8009210:	bcc0      	pop	{r6, r7}
 8009212:	46b9      	mov	r9, r7
 8009214:	46b0      	mov	r8, r6
 8009216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009218:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800921a:	0789      	lsls	r1, r1, #30
 800921c:	d000      	beq.n	8009220 <HAL_RCC_OscConfig+0x210>
 800921e:	e70e      	b.n	800903e <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009220:	4a49      	ldr	r2, [pc, #292]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 8009222:	6812      	ldr	r2, [r2, #0]
 8009224:	0392      	lsls	r2, r2, #14
 8009226:	d400      	bmi.n	800922a <HAL_RCC_OscConfig+0x21a>
 8009228:	e730      	b.n	800908c <HAL_RCC_OscConfig+0x7c>
 800922a:	6862      	ldr	r2, [r4, #4]
 800922c:	2a00      	cmp	r2, #0
 800922e:	d000      	beq.n	8009232 <HAL_RCC_OscConfig+0x222>
 8009230:	e72c      	b.n	800908c <HAL_RCC_OscConfig+0x7c>
 8009232:	e7eb      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009234:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8009236:	0792      	lsls	r2, r2, #30
 8009238:	d400      	bmi.n	800923c <HAL_RCC_OscConfig+0x22c>
 800923a:	e757      	b.n	80090ec <HAL_RCC_OscConfig+0xdc>
 800923c:	69a2      	ldr	r2, [r4, #24]
 800923e:	2a00      	cmp	r2, #0
 8009240:	d000      	beq.n	8009244 <HAL_RCC_OscConfig+0x234>
 8009242:	e753      	b.n	80090ec <HAL_RCC_OscConfig+0xdc>
 8009244:	e7e2      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009246:	4a40      	ldr	r2, [pc, #256]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 8009248:	6811      	ldr	r1, [r2, #0]
 800924a:	430b      	orrs	r3, r1
 800924c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800924e:	f7fe fbcb 	bl	80079e8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009252:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8009254:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009256:	4f3c      	ldr	r7, [pc, #240]	; (8009348 <HAL_RCC_OscConfig+0x338>)
 8009258:	02b6      	lsls	r6, r6, #10
 800925a:	e004      	b.n	8009266 <HAL_RCC_OscConfig+0x256>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800925c:	f7fe fbc4 	bl	80079e8 <HAL_GetTick>
 8009260:	1b40      	subs	r0, r0, r5
 8009262:	2864      	cmp	r0, #100	; 0x64
 8009264:	d847      	bhi.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	4233      	tst	r3, r6
 800926a:	d0f7      	beq.n	800925c <HAL_RCC_OscConfig+0x24c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	e70d      	b.n	800908c <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009270:	3b0d      	subs	r3, #13
 8009272:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009274:	2b02      	cmp	r3, #2
 8009276:	d100      	bne.n	800927a <HAL_RCC_OscConfig+0x26a>
 8009278:	e0c7      	b.n	800940a <HAL_RCC_OscConfig+0x3fa>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800927a:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800927c:	4d32      	ldr	r5, [pc, #200]	; (8009348 <HAL_RCC_OscConfig+0x338>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800927e:	2b00      	cmp	r3, #0
 8009280:	d04e      	beq.n	8009320 <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	4a34      	ldr	r2, [pc, #208]	; (8009358 <HAL_RCC_OscConfig+0x348>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009286:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009288:	4013      	ands	r3, r2
 800928a:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800928c:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800928e:	4313      	orrs	r3, r2
 8009290:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8009292:	2380      	movs	r3, #128	; 0x80
 8009294:	682a      	ldr	r2, [r5, #0]
 8009296:	005b      	lsls	r3, r3, #1
 8009298:	4313      	orrs	r3, r2
 800929a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800929c:	f7fe fba4 	bl	80079e8 <HAL_GetTick>
 80092a0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092a2:	e004      	b.n	80092ae <HAL_RCC_OscConfig+0x29e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092a4:	f7fe fba0 	bl	80079e8 <HAL_GetTick>
 80092a8:	1b80      	subs	r0, r0, r6
 80092aa:	2802      	cmp	r0, #2
 80092ac:	d823      	bhi.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	423b      	tst	r3, r7
 80092b2:	d0f7      	beq.n	80092a4 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092b4:	686a      	ldr	r2, [r5, #4]
 80092b6:	6963      	ldr	r3, [r4, #20]
 80092b8:	4926      	ldr	r1, [pc, #152]	; (8009354 <HAL_RCC_OscConfig+0x344>)
 80092ba:	021b      	lsls	r3, r3, #8
 80092bc:	400a      	ands	r2, r1
 80092be:	4313      	orrs	r3, r2
 80092c0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	e710      	b.n	80090e8 <HAL_RCC_OscConfig+0xd8>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80092c6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80092c8:	079b      	lsls	r3, r3, #30
 80092ca:	d400      	bmi.n	80092ce <HAL_RCC_OscConfig+0x2be>
 80092cc:	e756      	b.n	800917c <HAL_RCC_OscConfig+0x16c>
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d000      	beq.n	80092d6 <HAL_RCC_OscConfig+0x2c6>
 80092d4:	e752      	b.n	800917c <HAL_RCC_OscConfig+0x16c>
 80092d6:	e799      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092d8:	6833      	ldr	r3, [r6, #0]
 80092da:	433b      	orrs	r3, r7
 80092dc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80092de:	f7fe fb83 	bl	80079e8 <HAL_GetTick>
 80092e2:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092e4:	6833      	ldr	r3, [r6, #0]
 80092e6:	423b      	tst	r3, r7
 80092e8:	d000      	beq.n	80092ec <HAL_RCC_OscConfig+0x2dc>
 80092ea:	e71f      	b.n	800912c <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ec:	f7fe fb7c 	bl	80079e8 <HAL_GetTick>
 80092f0:	1b40      	subs	r0, r0, r5
 80092f2:	2802      	cmp	r0, #2
 80092f4:	d9f6      	bls.n	80092e4 <HAL_RCC_OscConfig+0x2d4>
            return HAL_TIMEOUT;
 80092f6:	2003      	movs	r0, #3
 80092f8:	e789      	b.n	800920e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_LSI_DISABLE();
 80092fa:	2201      	movs	r2, #1
 80092fc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092fe:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8009300:	4393      	bics	r3, r2
 8009302:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8009304:	f7fe fb70 	bl	80079e8 <HAL_GetTick>
 8009308:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800930a:	e004      	b.n	8009316 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800930c:	f7fe fb6c 	bl	80079e8 <HAL_GetTick>
 8009310:	1b80      	subs	r0, r0, r6
 8009312:	2802      	cmp	r0, #2
 8009314:	d8ef      	bhi.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009316:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009318:	421f      	tst	r7, r3
 800931a:	d1f7      	bne.n	800930c <HAL_RCC_OscConfig+0x2fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800931c:	6823      	ldr	r3, [r4, #0]
 800931e:	e6e5      	b.n	80090ec <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	4a15      	ldr	r2, [pc, #84]	; (8009378 <HAL_RCC_OscConfig+0x368>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009324:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8009326:	4013      	ands	r3, r2
 8009328:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800932a:	f7fe fb5d 	bl	80079e8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800932e:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8009330:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009332:	e004      	b.n	800933e <HAL_RCC_OscConfig+0x32e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009334:	f7fe fb58 	bl	80079e8 <HAL_GetTick>
 8009338:	1b80      	subs	r0, r0, r6
 800933a:	2802      	cmp	r0, #2
 800933c:	d8db      	bhi.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800933e:	682b      	ldr	r3, [r5, #0]
 8009340:	423b      	tst	r3, r7
 8009342:	d1f7      	bne.n	8009334 <HAL_RCC_OscConfig+0x324>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009344:	6823      	ldr	r3, [r4, #0]
 8009346:	e6cf      	b.n	80090e8 <HAL_RCC_OscConfig+0xd8>
 8009348:	40021000 	.word	0x40021000
 800934c:	fffeffff 	.word	0xfffeffff
 8009350:	fffbffff 	.word	0xfffbffff
 8009354:	ffff80ff 	.word	0xffff80ff
 8009358:	ffffc7ff 	.word	0xffffc7ff
 800935c:	00f42400 	.word	0x00f42400
 8009360:	2000011c 	.word	0x2000011c
 8009364:	20000124 	.word	0x20000124
 8009368:	40007000 	.word	0x40007000
 800936c:	00001388 	.word	0x00001388
 8009370:	feffffff 	.word	0xfeffffff
 8009374:	effefffc 	.word	0xeffefffc
 8009378:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800937c:	4951      	ldr	r1, [pc, #324]	; (80094c4 <HAL_RCC_OscConfig+0x4b4>)
 800937e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 8009380:	4313      	orrs	r3, r2
 8009382:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8009384:	f7fe fb30 	bl	80079e8 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009388:	4b4e      	ldr	r3, [pc, #312]	; (80094c4 <HAL_RCC_OscConfig+0x4b4>)
        tickstart = HAL_GetTick();
 800938a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800938c:	4698      	mov	r8, r3
 800938e:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009390:	4d4d      	ldr	r5, [pc, #308]	; (80094c8 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009392:	e004      	b.n	800939e <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009394:	f7fe fb28 	bl	80079e8 <HAL_GetTick>
 8009398:	1b80      	subs	r0, r0, r6
 800939a:	42a8      	cmp	r0, r5
 800939c:	d8ab      	bhi.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800939e:	4643      	mov	r3, r8
 80093a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093a2:	421f      	tst	r7, r3
 80093a4:	d0f6      	beq.n	8009394 <HAL_RCC_OscConfig+0x384>
 80093a6:	e6e5      	b.n	8009174 <HAL_RCC_OscConfig+0x164>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d100      	bne.n	80093ae <HAL_RCC_OscConfig+0x39e>
 80093ac:	e72e      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093ae:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80093b0:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093b2:	6a21      	ldr	r1, [r4, #32]
 80093b4:	4013      	ands	r3, r2
 80093b6:	428b      	cmp	r3, r1
 80093b8:	d000      	beq.n	80093bc <HAL_RCC_OscConfig+0x3ac>
 80093ba:	e727      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093bc:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093be:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093c0:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093c2:	428b      	cmp	r3, r1
 80093c4:	d000      	beq.n	80093c8 <HAL_RCC_OscConfig+0x3b8>
 80093c6:	e721      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80093c8:	21fe      	movs	r1, #254	; 0xfe
 80093ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093cc:	01c9      	lsls	r1, r1, #7
 80093ce:	4011      	ands	r1, r2
 80093d0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80093d2:	4299      	cmp	r1, r3
 80093d4:	d000      	beq.n	80093d8 <HAL_RCC_OscConfig+0x3c8>
 80093d6:	e719      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093d8:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80093da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093dc:	039b      	lsls	r3, r3, #14
 80093de:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80093e0:	428b      	cmp	r3, r1
 80093e2:	d000      	beq.n	80093e6 <HAL_RCC_OscConfig+0x3d6>
 80093e4:	e712      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80093e8:	0f52      	lsrs	r2, r2, #29
 80093ea:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d000      	beq.n	80093f2 <HAL_RCC_OscConfig+0x3e2>
 80093f0:	e70c      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
  return HAL_OK;
 80093f2:	2000      	movs	r0, #0
 80093f4:	e70b      	b.n	800920e <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093f6:	2180      	movs	r1, #128	; 0x80
 80093f8:	4b32      	ldr	r3, [pc, #200]	; (80094c4 <HAL_RCC_OscConfig+0x4b4>)
 80093fa:	02c9      	lsls	r1, r1, #11
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	4301      	orrs	r1, r0
 8009400:	6019      	str	r1, [r3, #0]
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009408:	e721      	b.n	800924e <HAL_RCC_OscConfig+0x23e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800940a:	6813      	ldr	r3, [r2, #0]
 800940c:	055b      	lsls	r3, r3, #21
 800940e:	d503      	bpl.n	8009418 <HAL_RCC_OscConfig+0x408>
 8009410:	68e3      	ldr	r3, [r4, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d100      	bne.n	8009418 <HAL_RCC_OscConfig+0x408>
 8009416:	e6f9      	b.n	800920c <HAL_RCC_OscConfig+0x1fc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009418:	6851      	ldr	r1, [r2, #4]
 800941a:	6963      	ldr	r3, [r4, #20]
 800941c:	482b      	ldr	r0, [pc, #172]	; (80094cc <HAL_RCC_OscConfig+0x4bc>)
 800941e:	021b      	lsls	r3, r3, #8
 8009420:	4001      	ands	r1, r0
 8009422:	430b      	orrs	r3, r1
 8009424:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009426:	e657      	b.n	80090d8 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_PWR_CLK_DISABLE();
 8009428:	4a26      	ldr	r2, [pc, #152]	; (80094c4 <HAL_RCC_OscConfig+0x4b4>)
 800942a:	4929      	ldr	r1, [pc, #164]	; (80094d0 <HAL_RCC_OscConfig+0x4c0>)
 800942c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800942e:	400b      	ands	r3, r1
 8009430:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009432:	e6a3      	b.n	800917c <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	4a27      	ldr	r2, [pc, #156]	; (80094d4 <HAL_RCC_OscConfig+0x4c4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009438:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800943a:	4013      	ands	r3, r2
 800943c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800943e:	f7fe fad3 	bl	80079e8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009442:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8009444:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009446:	e005      	b.n	8009454 <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009448:	f7fe face 	bl	80079e8 <HAL_GetTick>
 800944c:	1b80      	subs	r0, r0, r6
 800944e:	2802      	cmp	r0, #2
 8009450:	d900      	bls.n	8009454 <HAL_RCC_OscConfig+0x444>
 8009452:	e750      	b.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	423b      	tst	r3, r7
 8009458:	d1f6      	bne.n	8009448 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800945a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800945c:	6a23      	ldr	r3, [r4, #32]
 800945e:	68ea      	ldr	r2, [r5, #12]
 8009460:	430b      	orrs	r3, r1
 8009462:	491d      	ldr	r1, [pc, #116]	; (80094d8 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009464:	4e17      	ldr	r6, [pc, #92]	; (80094c4 <HAL_RCC_OscConfig+0x4b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009466:	400a      	ands	r2, r1
 8009468:	4313      	orrs	r3, r2
 800946a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800946c:	4313      	orrs	r3, r2
 800946e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009470:	4313      	orrs	r3, r2
 8009472:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009474:	0212      	lsls	r2, r2, #8
 8009476:	4313      	orrs	r3, r2
 8009478:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800947a:	2380      	movs	r3, #128	; 0x80
 800947c:	682a      	ldr	r2, [r5, #0]
 800947e:	045b      	lsls	r3, r3, #17
 8009480:	4313      	orrs	r3, r2
 8009482:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009484:	2380      	movs	r3, #128	; 0x80
 8009486:	68ea      	ldr	r2, [r5, #12]
 8009488:	055b      	lsls	r3, r3, #21
 800948a:	4313      	orrs	r3, r2
 800948c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800948e:	f7fe faab 	bl	80079e8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009492:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8009494:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009496:	04ad      	lsls	r5, r5, #18
 8009498:	e005      	b.n	80094a6 <HAL_RCC_OscConfig+0x496>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800949a:	f7fe faa5 	bl	80079e8 <HAL_GetTick>
 800949e:	1b00      	subs	r0, r0, r4
 80094a0:	2802      	cmp	r0, #2
 80094a2:	d900      	bls.n	80094a6 <HAL_RCC_OscConfig+0x496>
 80094a4:	e727      	b.n	80092f6 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094a6:	6833      	ldr	r3, [r6, #0]
 80094a8:	422b      	tst	r3, r5
 80094aa:	d0f6      	beq.n	800949a <HAL_RCC_OscConfig+0x48a>
  return HAL_OK;
 80094ac:	2000      	movs	r0, #0
 80094ae:	e6ae      	b.n	800920e <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094b0:	2104      	movs	r1, #4
 80094b2:	4b04      	ldr	r3, [pc, #16]	; (80094c4 <HAL_RCC_OscConfig+0x4b4>)
 80094b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094b6:	430a      	orrs	r2, r1
 80094b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80094ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094bc:	3903      	subs	r1, #3
 80094be:	430a      	orrs	r2, r1
 80094c0:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80094c2:	e75f      	b.n	8009384 <HAL_RCC_OscConfig+0x374>
 80094c4:	40021000 	.word	0x40021000
 80094c8:	00001388 	.word	0x00001388
 80094cc:	ffff80ff 	.word	0xffff80ff
 80094d0:	efffffff 	.word	0xefffffff
 80094d4:	feffffff 	.word	0xfeffffff
 80094d8:	1fc1808c 	.word	0x1fc1808c

080094dc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80094dc:	2338      	movs	r3, #56	; 0x38
 80094de:	4a21      	ldr	r2, [pc, #132]	; (8009564 <HAL_RCC_GetSysClockFreq+0x88>)
{
 80094e0:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80094e2:	6891      	ldr	r1, [r2, #8]
 80094e4:	420b      	tst	r3, r1
 80094e6:	d105      	bne.n	80094f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80094e8:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80094ea:	481f      	ldr	r0, [pc, #124]	; (8009568 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80094ec:	049b      	lsls	r3, r3, #18
 80094ee:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80094f0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80094f2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80094f4:	6891      	ldr	r1, [r2, #8]
 80094f6:	4019      	ands	r1, r3
 80094f8:	2908      	cmp	r1, #8
 80094fa:	d012      	beq.n	8009522 <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094fc:	6891      	ldr	r1, [r2, #8]
 80094fe:	4019      	ands	r1, r3
 8009500:	2910      	cmp	r1, #16
 8009502:	d010      	beq.n	8009526 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009504:	6891      	ldr	r1, [r2, #8]
 8009506:	4019      	ands	r1, r3
 8009508:	2920      	cmp	r1, #32
 800950a:	d022      	beq.n	8009552 <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800950c:	6892      	ldr	r2, [r2, #8]
 800950e:	4013      	ands	r3, r2
    sysclockfreq = 0U;
 8009510:	3b18      	subs	r3, #24
 8009512:	0018      	movs	r0, r3
 8009514:	4243      	negs	r3, r0
 8009516:	4158      	adcs	r0, r3
 8009518:	23fa      	movs	r3, #250	; 0xfa
 800951a:	4240      	negs	r0, r0
 800951c:	01db      	lsls	r3, r3, #7
 800951e:	4018      	ands	r0, r3
 8009520:	e7e7      	b.n	80094f2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8009522:	4812      	ldr	r0, [pc, #72]	; (800956c <HAL_RCC_GetSysClockFreq+0x90>)
 8009524:	e7e5      	b.n	80094f2 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8009526:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009528:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800952a:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800952c:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800952e:	0649      	lsls	r1, r1, #25
 8009530:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009532:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009534:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009536:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8009538:	079b      	lsls	r3, r3, #30
 800953a:	d00d      	beq.n	8009558 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800953c:	480a      	ldr	r0, [pc, #40]	; (8009568 <HAL_RCC_GetSysClockFreq+0x8c>)
 800953e:	f7f6 fdff 	bl	8000140 <__udivsi3>
 8009542:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8009544:	4b07      	ldr	r3, [pc, #28]	; (8009564 <HAL_RCC_GetSysClockFreq+0x88>)
 8009546:	68d9      	ldr	r1, [r3, #12]
 8009548:	0f49      	lsrs	r1, r1, #29
 800954a:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800954c:	f7f6 fdf8 	bl	8000140 <__udivsi3>
 8009550:	e7cf      	b.n	80094f2 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8009552:	2080      	movs	r0, #128	; 0x80
 8009554:	0200      	lsls	r0, r0, #8
 8009556:	e7cc      	b.n	80094f2 <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009558:	4804      	ldr	r0, [pc, #16]	; (800956c <HAL_RCC_GetSysClockFreq+0x90>)
 800955a:	f7f6 fdf1 	bl	8000140 <__udivsi3>
 800955e:	4360      	muls	r0, r4
        break;
 8009560:	e7f0      	b.n	8009544 <HAL_RCC_GetSysClockFreq+0x68>
 8009562:	46c0      	nop			; (mov r8, r8)
 8009564:	40021000 	.word	0x40021000
 8009568:	00f42400 	.word	0x00f42400
 800956c:	007a1200 	.word	0x007a1200

08009570 <HAL_RCC_ClockConfig>:
{
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	46ce      	mov	lr, r9
 8009574:	4647      	mov	r7, r8
 8009576:	0005      	movs	r5, r0
 8009578:	000c      	movs	r4, r1
 800957a:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 800957c:	2800      	cmp	r0, #0
 800957e:	d026      	beq.n	80095ce <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009580:	2207      	movs	r2, #7
 8009582:	4e57      	ldr	r6, [pc, #348]	; (80096e0 <HAL_RCC_ClockConfig+0x170>)
 8009584:	6833      	ldr	r3, [r6, #0]
 8009586:	4013      	ands	r3, r2
 8009588:	428b      	cmp	r3, r1
 800958a:	d35e      	bcc.n	800964a <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	079a      	lsls	r2, r3, #30
 8009590:	d50e      	bpl.n	80095b0 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009592:	075a      	lsls	r2, r3, #29
 8009594:	d505      	bpl.n	80095a2 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009596:	22e0      	movs	r2, #224	; 0xe0
 8009598:	4952      	ldr	r1, [pc, #328]	; (80096e4 <HAL_RCC_ClockConfig+0x174>)
 800959a:	01d2      	lsls	r2, r2, #7
 800959c:	6888      	ldr	r0, [r1, #8]
 800959e:	4302      	orrs	r2, r0
 80095a0:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095a2:	4950      	ldr	r1, [pc, #320]	; (80096e4 <HAL_RCC_ClockConfig+0x174>)
 80095a4:	4850      	ldr	r0, [pc, #320]	; (80096e8 <HAL_RCC_ClockConfig+0x178>)
 80095a6:	688a      	ldr	r2, [r1, #8]
 80095a8:	4002      	ands	r2, r0
 80095aa:	68a8      	ldr	r0, [r5, #8]
 80095ac:	4302      	orrs	r2, r0
 80095ae:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095b0:	07db      	lsls	r3, r3, #31
 80095b2:	d52b      	bpl.n	800960c <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095b4:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095b6:	4a4b      	ldr	r2, [pc, #300]	; (80096e4 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d100      	bne.n	80095be <HAL_RCC_ClockConfig+0x4e>
 80095bc:	e07c      	b.n	80096b8 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d007      	beq.n	80095d2 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d000      	beq.n	80095c8 <HAL_RCC_ClockConfig+0x58>
 80095c6:	e07d      	b.n	80096c4 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095c8:	6812      	ldr	r2, [r2, #0]
 80095ca:	0552      	lsls	r2, r2, #21
 80095cc:	d404      	bmi.n	80095d8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80095ce:	2001      	movs	r0, #1
 80095d0:	e037      	b.n	8009642 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095d2:	6812      	ldr	r2, [r2, #0]
 80095d4:	0192      	lsls	r2, r2, #6
 80095d6:	d5fa      	bpl.n	80095ce <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095d8:	2107      	movs	r1, #7
 80095da:	4e42      	ldr	r6, [pc, #264]	; (80096e4 <HAL_RCC_ClockConfig+0x174>)
 80095dc:	68b2      	ldr	r2, [r6, #8]
 80095de:	438a      	bics	r2, r1
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80095e4:	f7fe fa00 	bl	80079e8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095e8:	2338      	movs	r3, #56	; 0x38
 80095ea:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ec:	4b3f      	ldr	r3, [pc, #252]	; (80096ec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80095ee:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095f0:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095f2:	e004      	b.n	80095fe <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095f4:	f7fe f9f8 	bl	80079e8 <HAL_GetTick>
 80095f8:	1bc0      	subs	r0, r0, r7
 80095fa:	4548      	cmp	r0, r9
 80095fc:	d83b      	bhi.n	8009676 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095fe:	4643      	mov	r3, r8
 8009600:	68b2      	ldr	r2, [r6, #8]
 8009602:	401a      	ands	r2, r3
 8009604:	686b      	ldr	r3, [r5, #4]
 8009606:	00db      	lsls	r3, r3, #3
 8009608:	429a      	cmp	r2, r3
 800960a:	d1f3      	bne.n	80095f4 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800960c:	2207      	movs	r2, #7
 800960e:	4e34      	ldr	r6, [pc, #208]	; (80096e0 <HAL_RCC_ClockConfig+0x170>)
 8009610:	6833      	ldr	r3, [r6, #0]
 8009612:	4013      	ands	r3, r2
 8009614:	42a3      	cmp	r3, r4
 8009616:	d838      	bhi.n	800968a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	075b      	lsls	r3, r3, #29
 800961c:	d42d      	bmi.n	800967a <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800961e:	f7ff ff5d 	bl	80094dc <HAL_RCC_GetSysClockFreq>
 8009622:	4b30      	ldr	r3, [pc, #192]	; (80096e4 <HAL_RCC_ClockConfig+0x174>)
 8009624:	4a32      	ldr	r2, [pc, #200]	; (80096f0 <HAL_RCC_ClockConfig+0x180>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	4932      	ldr	r1, [pc, #200]	; (80096f4 <HAL_RCC_ClockConfig+0x184>)
 800962a:	051b      	lsls	r3, r3, #20
 800962c:	0f1b      	lsrs	r3, r3, #28
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	589b      	ldr	r3, [r3, r2]
 8009632:	221f      	movs	r2, #31
 8009634:	4013      	ands	r3, r2
 8009636:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8009638:	4b2f      	ldr	r3, [pc, #188]	; (80096f8 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800963a:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f7fe f88f 	bl	8007760 <HAL_InitTick>
}
 8009642:	bcc0      	pop	{r6, r7}
 8009644:	46b9      	mov	r9, r7
 8009646:	46b0      	mov	r8, r6
 8009648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800964a:	6833      	ldr	r3, [r6, #0]
 800964c:	4393      	bics	r3, r2
 800964e:	430b      	orrs	r3, r1
 8009650:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8009652:	f7fe f9c9 	bl	80079e8 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009656:	2307      	movs	r3, #7
 8009658:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800965a:	4b24      	ldr	r3, [pc, #144]	; (80096ec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800965c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800965e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009660:	4642      	mov	r2, r8
 8009662:	6833      	ldr	r3, [r6, #0]
 8009664:	4013      	ands	r3, r2
 8009666:	42a3      	cmp	r3, r4
 8009668:	d100      	bne.n	800966c <HAL_RCC_ClockConfig+0xfc>
 800966a:	e78f      	b.n	800958c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800966c:	f7fe f9bc 	bl	80079e8 <HAL_GetTick>
 8009670:	1bc0      	subs	r0, r0, r7
 8009672:	4548      	cmp	r0, r9
 8009674:	d9f4      	bls.n	8009660 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8009676:	2003      	movs	r0, #3
 8009678:	e7e3      	b.n	8009642 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800967a:	4a1a      	ldr	r2, [pc, #104]	; (80096e4 <HAL_RCC_ClockConfig+0x174>)
 800967c:	491f      	ldr	r1, [pc, #124]	; (80096fc <HAL_RCC_ClockConfig+0x18c>)
 800967e:	6893      	ldr	r3, [r2, #8]
 8009680:	400b      	ands	r3, r1
 8009682:	68e9      	ldr	r1, [r5, #12]
 8009684:	430b      	orrs	r3, r1
 8009686:	6093      	str	r3, [r2, #8]
 8009688:	e7c9      	b.n	800961e <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800968a:	6833      	ldr	r3, [r6, #0]
 800968c:	4393      	bics	r3, r2
 800968e:	4323      	orrs	r3, r4
 8009690:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8009692:	f7fe f9a9 	bl	80079e8 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009696:	2307      	movs	r3, #7
 8009698:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800969a:	4b14      	ldr	r3, [pc, #80]	; (80096ec <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800969c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800969e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80096a0:	4642      	mov	r2, r8
 80096a2:	6833      	ldr	r3, [r6, #0]
 80096a4:	4013      	ands	r3, r2
 80096a6:	42a3      	cmp	r3, r4
 80096a8:	d0b6      	beq.n	8009618 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096aa:	f7fe f99d 	bl	80079e8 <HAL_GetTick>
 80096ae:	1bc0      	subs	r0, r0, r7
 80096b0:	4548      	cmp	r0, r9
 80096b2:	d9f5      	bls.n	80096a0 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80096b4:	2003      	movs	r0, #3
 80096b6:	e7c4      	b.n	8009642 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096b8:	6812      	ldr	r2, [r2, #0]
 80096ba:	0392      	lsls	r2, r2, #14
 80096bc:	d500      	bpl.n	80096c0 <HAL_RCC_ClockConfig+0x150>
 80096be:	e78b      	b.n	80095d8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80096c0:	2001      	movs	r0, #1
 80096c2:	e7be      	b.n	8009642 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d005      	beq.n	80096d4 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80096ca:	0792      	lsls	r2, r2, #30
 80096cc:	d500      	bpl.n	80096d0 <HAL_RCC_ClockConfig+0x160>
 80096ce:	e783      	b.n	80095d8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80096d0:	2001      	movs	r0, #1
 80096d2:	e7b6      	b.n	8009642 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80096d4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80096d6:	0792      	lsls	r2, r2, #30
 80096d8:	d500      	bpl.n	80096dc <HAL_RCC_ClockConfig+0x16c>
 80096da:	e77d      	b.n	80095d8 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80096dc:	2001      	movs	r0, #1
 80096de:	e7b0      	b.n	8009642 <HAL_RCC_ClockConfig+0xd2>
 80096e0:	40022000 	.word	0x40022000
 80096e4:	40021000 	.word	0x40021000
 80096e8:	fffff0ff 	.word	0xfffff0ff
 80096ec:	00001388 	.word	0x00001388
 80096f0:	08013620 	.word	0x08013620
 80096f4:	2000011c 	.word	0x2000011c
 80096f8:	20000124 	.word	0x20000124
 80096fc:	ffff8fff 	.word	0xffff8fff

08009700 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009700:	4b06      	ldr	r3, [pc, #24]	; (800971c <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009702:	4907      	ldr	r1, [pc, #28]	; (8009720 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009704:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8009706:	4a07      	ldr	r2, [pc, #28]	; (8009724 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009708:	045b      	lsls	r3, r3, #17
 800970a:	0f5b      	lsrs	r3, r3, #29
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	585b      	ldr	r3, [r3, r1]
 8009710:	211f      	movs	r1, #31
 8009712:	6810      	ldr	r0, [r2, #0]
 8009714:	400b      	ands	r3, r1
 8009716:	40d8      	lsrs	r0, r3
}
 8009718:	4770      	bx	lr
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	40021000 	.word	0x40021000
 8009720:	08013660 	.word	0x08013660
 8009724:	2000011c 	.word	0x2000011c

08009728 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8009728:	2307      	movs	r3, #7
{
 800972a:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800972c:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800972e:	4a09      	ldr	r2, [pc, #36]	; (8009754 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8009730:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009732:	6894      	ldr	r4, [r2, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009734:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009736:	401c      	ands	r4, r3
 8009738:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800973a:	6894      	ldr	r4, [r2, #8]
 800973c:	402c      	ands	r4, r5
 800973e:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8009740:	24e0      	movs	r4, #224	; 0xe0
 8009742:	6892      	ldr	r2, [r2, #8]
 8009744:	01e4      	lsls	r4, r4, #7
 8009746:	4022      	ands	r2, r4
 8009748:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800974a:	4a03      	ldr	r2, [pc, #12]	; (8009758 <HAL_RCC_GetClockConfig+0x30>)
 800974c:	6812      	ldr	r2, [r2, #0]
 800974e:	4013      	ands	r3, r2
 8009750:	600b      	str	r3, [r1, #0]
}
 8009752:	bd30      	pop	{r4, r5, pc}
 8009754:	40021000 	.word	0x40021000
 8009758:	40022000 	.word	0x40022000

0800975c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800975c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975e:	46ce      	mov	lr, r9
 8009760:	4647      	mov	r7, r8
 8009762:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009764:	6803      	ldr	r3, [r0, #0]
{
 8009766:	0004      	movs	r4, r0
 8009768:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800976a:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800976c:	039a      	lsls	r2, r3, #14
 800976e:	d550      	bpl.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009770:	2280      	movs	r2, #128	; 0x80
 8009772:	4b56      	ldr	r3, [pc, #344]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009774:	0552      	lsls	r2, r2, #21
 8009776:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8009778:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800977a:	4211      	tst	r1, r2
 800977c:	d100      	bne.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800977e:	e082      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009780:	2780      	movs	r7, #128	; 0x80
 8009782:	4d53      	ldr	r5, [pc, #332]	; (80098d0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8009784:	007f      	lsls	r7, r7, #1
 8009786:	682b      	ldr	r3, [r5, #0]
 8009788:	433b      	orrs	r3, r7
 800978a:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800978c:	f7fe f92c 	bl	80079e8 <HAL_GetTick>
 8009790:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009792:	e005      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009794:	f7fe f928 	bl	80079e8 <HAL_GetTick>
 8009798:	1b80      	subs	r0, r0, r6
 800979a:	2802      	cmp	r0, #2
 800979c:	d900      	bls.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800979e:	e07c      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	423b      	tst	r3, r7
 80097a4:	d0f6      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80097a6:	4d49      	ldr	r5, [pc, #292]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80097a8:	23c0      	movs	r3, #192	; 0xc0
 80097aa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	0011      	movs	r1, r2
 80097b0:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80097b2:	421a      	tst	r2, r3
 80097b4:	d021      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80097b6:	69a0      	ldr	r0, [r4, #24]
 80097b8:	4288      	cmp	r0, r1
 80097ba:	d01f      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097bc:	2180      	movs	r1, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80097be:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80097c0:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 80097c2:	0249      	lsls	r1, r1, #9
 80097c4:	4331      	orrs	r1, r6
 80097c6:	65e9      	str	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097c8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80097ca:	4a42      	ldr	r2, [pc, #264]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097cc:	4e42      	ldr	r6, [pc, #264]	; (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80097ce:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097d0:	4031      	ands	r1, r6
 80097d2:	65e9      	str	r1, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80097d4:	65ea      	str	r2, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80097d6:	07db      	lsls	r3, r3, #31
 80097d8:	d400      	bmi.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x80>
 80097da:	e075      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097dc:	f7fe f904 	bl	80079e8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097e0:	4b3e      	ldr	r3, [pc, #248]	; (80098dc <HAL_RCCEx_PeriphCLKConfig+0x180>)
        tickstart = HAL_GetTick();
 80097e2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097e4:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097e6:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097e8:	e004      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097ea:	f7fe f8fd 	bl	80079e8 <HAL_GetTick>
 80097ee:	1b80      	subs	r0, r0, r6
 80097f0:	4548      	cmp	r0, r9
 80097f2:	d852      	bhi.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x13e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80097f6:	421f      	tst	r7, r3
 80097f8:	d0f7      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80097fa:	69a1      	ldr	r1, [r4, #24]
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097fc:	4a33      	ldr	r2, [pc, #204]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80097fe:	4835      	ldr	r0, [pc, #212]	; (80098d4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8009800:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8009802:	4003      	ands	r3, r0
 8009804:	430b      	orrs	r3, r1
 8009806:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009808:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800980a:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 800980c:	2b01      	cmp	r3, #1
 800980e:	d048      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	07da      	lsls	r2, r3, #31
 8009814:	d506      	bpl.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009816:	2503      	movs	r5, #3
 8009818:	492c      	ldr	r1, [pc, #176]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800981a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800981c:	43aa      	bics	r2, r5
 800981e:	6865      	ldr	r5, [r4, #4]
 8009820:	432a      	orrs	r2, r5
 8009822:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009824:	079a      	lsls	r2, r3, #30
 8009826:	d506      	bpl.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009828:	250c      	movs	r5, #12
 800982a:	4928      	ldr	r1, [pc, #160]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800982c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800982e:	43aa      	bics	r2, r5
 8009830:	68a5      	ldr	r5, [r4, #8]
 8009832:	432a      	orrs	r2, r5
 8009834:	654a      	str	r2, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009836:	069a      	lsls	r2, r3, #26
 8009838:	d506      	bpl.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800983a:	4924      	ldr	r1, [pc, #144]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800983c:	4d28      	ldr	r5, [pc, #160]	; (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800983e:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009840:	402a      	ands	r2, r5
 8009842:	68e5      	ldr	r5, [r4, #12]
 8009844:	432a      	orrs	r2, r5
 8009846:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009848:	045a      	lsls	r2, r3, #17
 800984a:	d50a      	bpl.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800984c:	491f      	ldr	r1, [pc, #124]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800984e:	6965      	ldr	r5, [r4, #20]
 8009850:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8009852:	0092      	lsls	r2, r2, #2
 8009854:	0892      	lsrs	r2, r2, #2
 8009856:	432a      	orrs	r2, r5
 8009858:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800985a:	2280      	movs	r2, #128	; 0x80
 800985c:	05d2      	lsls	r2, r2, #23
 800985e:	4295      	cmp	r5, r2
 8009860:	d026      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009862:	051b      	lsls	r3, r3, #20
 8009864:	d50a      	bpl.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009866:	4a19      	ldr	r2, [pc, #100]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8009868:	6921      	ldr	r1, [r4, #16]
 800986a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800986c:	4c1d      	ldr	r4, [pc, #116]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800986e:	4023      	ands	r3, r4
 8009870:	430b      	orrs	r3, r1
 8009872:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009874:	2380      	movs	r3, #128	; 0x80
 8009876:	01db      	lsls	r3, r3, #7
 8009878:	4299      	cmp	r1, r3
 800987a:	d01f      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800987c:	b003      	add	sp, #12
 800987e:	bcc0      	pop	{r6, r7}
 8009880:	46b9      	mov	r9, r7
 8009882:	46b0      	mov	r8, r6
 8009884:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8009886:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009888:	4311      	orrs	r1, r2
 800988a:	63d9      	str	r1, [r3, #60]	; 0x3c
 800988c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988e:	4013      	ands	r3, r2
 8009890:	9301      	str	r3, [sp, #4]
 8009892:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009894:	2301      	movs	r3, #1
 8009896:	4698      	mov	r8, r3
 8009898:	e772      	b.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 800989a:	4643      	mov	r3, r8
      status = ret;
 800989c:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d1b6      	bne.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80098a2:	4a0a      	ldr	r2, [pc, #40]	; (80098cc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80098a4:	4910      	ldr	r1, [pc, #64]	; (80098e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80098a6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80098a8:	400b      	ands	r3, r1
 80098aa:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	e7b0      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80098b0:	2280      	movs	r2, #128	; 0x80
 80098b2:	68cd      	ldr	r5, [r1, #12]
 80098b4:	0252      	lsls	r2, r2, #9
 80098b6:	432a      	orrs	r2, r5
 80098b8:	60ca      	str	r2, [r1, #12]
 80098ba:	e7d2      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80098bc:	2380      	movs	r3, #128	; 0x80
 80098be:	68d1      	ldr	r1, [r2, #12]
 80098c0:	025b      	lsls	r3, r3, #9
 80098c2:	430b      	orrs	r3, r1
 80098c4:	60d3      	str	r3, [r2, #12]
  return status;
 80098c6:	e7d9      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x120>
 80098c8:	0001      	movs	r1, r0
 80098ca:	e797      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80098cc:	40021000 	.word	0x40021000
 80098d0:	40007000 	.word	0x40007000
 80098d4:	fffffcff 	.word	0xfffffcff
 80098d8:	fffeffff 	.word	0xfffeffff
 80098dc:	00001388 	.word	0x00001388
 80098e0:	ffffcfff 	.word	0xffffcfff
 80098e4:	ffff3fff 	.word	0xffff3fff
 80098e8:	efffffff 	.word	0xefffffff

080098ec <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 80098ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ee:	46de      	mov	lr, fp
 80098f0:	4657      	mov	r7, sl
 80098f2:	464e      	mov	r6, r9
 80098f4:	4645      	mov	r5, r8
 80098f6:	b5e0      	push	{r5, r6, r7, lr}
 80098f8:	b083      	sub	sp, #12
 80098fa:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80098fc:	466b      	mov	r3, sp
 80098fe:	1cdf      	adds	r7, r3, #3
 8009900:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8009902:	0015      	movs	r5, r2
 8009904:	4681      	mov	r9, r0
 8009906:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 8009908:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800990a:	f7fe f86d 	bl	80079e8 <HAL_GetTick>
 800990e:	1976      	adds	r6, r6, r5
 8009910:	1a33      	subs	r3, r6, r0
 8009912:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8009914:	f7fe f868 	bl	80079e8 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009918:	464b      	mov	r3, r9
 800991a:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800991c:	26c0      	movs	r6, #192	; 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800991e:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009920:	4b34      	ldr	r3, [pc, #208]	; (80099f4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 8009922:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009924:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009926:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009928:	009a      	lsls	r2, r3, #2
 800992a:	18d2      	adds	r2, r2, r3
 800992c:	00d3      	lsls	r3, r2, #3
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	4642      	mov	r2, r8
 8009932:	0d1b      	lsrs	r3, r3, #20
 8009934:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 8009936:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009938:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800993a:	e001      	b.n	8009940 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 800993c:	1c6b      	adds	r3, r5, #1
 800993e:	d10b      	bne.n	8009958 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8009940:	6893      	ldr	r3, [r2, #8]
 8009942:	4223      	tst	r3, r4
 8009944:	d01d      	beq.n	8009982 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009946:	42b4      	cmp	r4, r6
 8009948:	d1f8      	bne.n	800993c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 800994a:	4653      	mov	r3, sl
 800994c:	7b1b      	ldrb	r3, [r3, #12]
 800994e:	b2db      	uxtb	r3, r3
 8009950:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 8009952:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8009954:	1c6b      	adds	r3, r5, #1
 8009956:	d0f3      	beq.n	8009940 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009958:	f7fe f846 	bl	80079e8 <HAL_GetTick>
 800995c:	465b      	mov	r3, fp
 800995e:	1ac0      	subs	r0, r0, r3
 8009960:	4540      	cmp	r0, r8
 8009962:	d216      	bcs.n	8009992 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009964:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8009966:	1e5a      	subs	r2, r3, #1
 8009968:	4193      	sbcs	r3, r2
 800996a:	4642      	mov	r2, r8
 800996c:	425b      	negs	r3, r3
 800996e:	401a      	ands	r2, r3
      }
      count--;
 8009970:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009972:	4690      	mov	r8, r2
      count--;
 8009974:	3b01      	subs	r3, #1
 8009976:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009978:	464b      	mov	r3, r9
 800997a:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800997c:	6893      	ldr	r3, [r2, #8]
 800997e:	4223      	tst	r3, r4
 8009980:	d1e1      	bne.n	8009946 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8009982:	2000      	movs	r0, #0
}
 8009984:	b003      	add	sp, #12
 8009986:	bcf0      	pop	{r4, r5, r6, r7}
 8009988:	46bb      	mov	fp, r7
 800998a:	46b2      	mov	sl, r6
 800998c:	46a9      	mov	r9, r5
 800998e:	46a0      	mov	r8, r4
 8009990:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009992:	464b      	mov	r3, r9
 8009994:	21e0      	movs	r1, #224	; 0xe0
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800999c:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800999e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a0:	2282      	movs	r2, #130	; 0x82
 80099a2:	6849      	ldr	r1, [r1, #4]
 80099a4:	0052      	lsls	r2, r2, #1
 80099a6:	4291      	cmp	r1, r2
 80099a8:	d015      	beq.n	80099d6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099aa:	464a      	mov	r2, r9
 80099ac:	2180      	movs	r1, #128	; 0x80
 80099ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80099b0:	0189      	lsls	r1, r1, #6
 80099b2:	428a      	cmp	r2, r1
 80099b4:	d106      	bne.n	80099c4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 80099b6:	6819      	ldr	r1, [r3, #0]
 80099b8:	480f      	ldr	r0, [pc, #60]	; (80099f8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 80099ba:	4001      	ands	r1, r0
 80099bc:	6019      	str	r1, [r3, #0]
 80099be:	6819      	ldr	r1, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80099c4:	235d      	movs	r3, #93	; 0x5d
 80099c6:	2201      	movs	r2, #1
 80099c8:	4649      	mov	r1, r9
 80099ca:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 80099cc:	2200      	movs	r2, #0
 80099ce:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 80099d0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80099d2:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 80099d4:	e7d6      	b.n	8009984 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099d6:	464a      	mov	r2, r9
 80099d8:	2180      	movs	r1, #128	; 0x80
 80099da:	6892      	ldr	r2, [r2, #8]
 80099dc:	0209      	lsls	r1, r1, #8
 80099de:	428a      	cmp	r2, r1
 80099e0:	d003      	beq.n	80099ea <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099e2:	2180      	movs	r1, #128	; 0x80
 80099e4:	00c9      	lsls	r1, r1, #3
 80099e6:	428a      	cmp	r2, r1
 80099e8:	d1df      	bne.n	80099aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 80099ea:	2140      	movs	r1, #64	; 0x40
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	438a      	bics	r2, r1
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	e7da      	b.n	80099aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 80099f4:	2000011c 	.word	0x2000011c
 80099f8:	ffffdfff 	.word	0xffffdfff

080099fc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80099fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fe:	46c6      	mov	lr, r8
 8009a00:	b500      	push	{lr}
 8009a02:	000c      	movs	r4, r1
 8009a04:	0016      	movs	r6, r2
 8009a06:	b082      	sub	sp, #8
 8009a08:	0007      	movs	r7, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a0a:	f7fd ffed 	bl	80079e8 <HAL_GetTick>
 8009a0e:	1936      	adds	r6, r6, r4
 8009a10:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8009a12:	f7fd ffe9 	bl	80079e8 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a16:	2580      	movs	r5, #128	; 0x80
  tmp_tickstart = HAL_GetTick();
 8009a18:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a1a:	4b26      	ldr	r3, [pc, #152]	; (8009ab4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	015b      	lsls	r3, r3, #5
 8009a20:	0d1b      	lsrs	r3, r3, #20
 8009a22:	4373      	muls	r3, r6
 8009a24:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	e001      	b.n	8009a2e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
    if (Timeout != HAL_MAX_DELAY)
 8009a2a:	1c63      	adds	r3, r4, #1
 8009a2c:	d107      	bne.n	8009a3e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a2e:	6893      	ldr	r3, [r2, #8]
 8009a30:	421d      	tst	r5, r3
 8009a32:	d1fa      	bne.n	8009a2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  return HAL_OK;
 8009a34:	2000      	movs	r0, #0
}
 8009a36:	b002      	add	sp, #8
 8009a38:	bc80      	pop	{r7}
 8009a3a:	46b8      	mov	r8, r7
 8009a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a3e:	f7fd ffd3 	bl	80079e8 <HAL_GetTick>
 8009a42:	4643      	mov	r3, r8
 8009a44:	1ac0      	subs	r0, r0, r3
 8009a46:	42b0      	cmp	r0, r6
 8009a48:	d208      	bcs.n	8009a5c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 8009a4a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8009a4c:	1e5a      	subs	r2, r3, #1
 8009a4e:	4193      	sbcs	r3, r2
 8009a50:	425b      	negs	r3, r3
 8009a52:	401e      	ands	r6, r3
      count--;
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	9301      	str	r3, [sp, #4]
 8009a5a:	e7e4      	b.n	8009a26 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a5c:	21e0      	movs	r1, #224	; 0xe0
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	438a      	bics	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a66:	2282      	movs	r2, #130	; 0x82
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	0052      	lsls	r2, r2, #1
 8009a6c:	4291      	cmp	r1, r2
 8009a6e:	d013      	beq.n	8009a98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a70:	2180      	movs	r1, #128	; 0x80
 8009a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a74:	0189      	lsls	r1, r1, #6
 8009a76:	428a      	cmp	r2, r1
 8009a78:	d106      	bne.n	8009a88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 8009a7a:	6819      	ldr	r1, [r3, #0]
 8009a7c:	480e      	ldr	r0, [pc, #56]	; (8009ab8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8009a7e:	4001      	ands	r1, r0
 8009a80:	6019      	str	r1, [r3, #0]
 8009a82:	6819      	ldr	r1, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009a88:	235d      	movs	r3, #93	; 0x5d
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8009a8e:	2200      	movs	r2, #0
 8009a90:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8009a92:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8009a94:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8009a96:	e7ce      	b.n	8009a36 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a98:	2180      	movs	r1, #128	; 0x80
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	0209      	lsls	r1, r1, #8
 8009a9e:	428a      	cmp	r2, r1
 8009aa0:	d003      	beq.n	8009aaa <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aa2:	2180      	movs	r1, #128	; 0x80
 8009aa4:	00c9      	lsls	r1, r1, #3
 8009aa6:	428a      	cmp	r2, r1
 8009aa8:	d1e2      	bne.n	8009a70 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 8009aaa:	2140      	movs	r1, #64	; 0x40
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	438a      	bics	r2, r1
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	e7dd      	b.n	8009a70 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8009ab4:	2000011c 	.word	0x2000011c
 8009ab8:	ffffdfff 	.word	0xffffdfff

08009abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009abc:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009abe:	0013      	movs	r3, r2
{
 8009ac0:	000d      	movs	r5, r1
 8009ac2:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ac4:	000a      	movs	r2, r1
 8009ac6:	21c0      	movs	r1, #192	; 0xc0
 8009ac8:	0149      	lsls	r1, r1, #5
{
 8009aca:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009acc:	f7ff ff0e 	bl	80098ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d10f      	bne.n	8009af4 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ad4:	0032      	movs	r2, r6
 8009ad6:	0029      	movs	r1, r5
 8009ad8:	0020      	movs	r0, r4
 8009ada:	f7ff ff8f 	bl	80099fc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d108      	bne.n	8009af4 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ae2:	21c0      	movs	r1, #192	; 0xc0
 8009ae4:	0033      	movs	r3, r6
 8009ae6:	002a      	movs	r2, r5
 8009ae8:	0020      	movs	r0, r4
 8009aea:	00c9      	lsls	r1, r1, #3
 8009aec:	f7ff fefe 	bl	80098ec <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d004      	beq.n	8009afe <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009af4:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8009af6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009af8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009afa:	4313      	orrs	r3, r2
 8009afc:	6623      	str	r3, [r4, #96]	; 0x60
  }

  return HAL_OK;
}
 8009afe:	bd70      	pop	{r4, r5, r6, pc}

08009b00 <HAL_SPI_Init>:
{
 8009b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b02:	46de      	mov	lr, fp
 8009b04:	4657      	mov	r7, sl
 8009b06:	464e      	mov	r6, r9
 8009b08:	4645      	mov	r5, r8
 8009b0a:	0004      	movs	r4, r0
 8009b0c:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d100      	bne.n	8009b14 <HAL_SPI_Init+0x14>
 8009b12:	e094      	b.n	8009c3e <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b16:	2d00      	cmp	r5, #0
 8009b18:	d06b      	beq.n	8009bf2 <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b1e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b24:	335d      	adds	r3, #93	; 0x5d
 8009b26:	5ce3      	ldrb	r3, [r4, r3]
 8009b28:	b2da      	uxtb	r2, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d06e      	beq.n	8009c0c <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009b2e:	235d      	movs	r3, #93	; 0x5d
 8009b30:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8009b32:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8009b34:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8009b36:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b38:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8009b3a:	6813      	ldr	r3, [r2, #0]
 8009b3c:	438b      	bics	r3, r1
 8009b3e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b40:	23e0      	movs	r3, #224	; 0xe0
 8009b42:	00db      	lsls	r3, r3, #3
 8009b44:	4298      	cmp	r0, r3
 8009b46:	d968      	bls.n	8009c1a <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009b48:	23f0      	movs	r3, #240	; 0xf0
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	4298      	cmp	r0, r3
 8009b4e:	d000      	beq.n	8009b52 <HAL_SPI_Init+0x52>
 8009b50:	e077      	b.n	8009c42 <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b52:	2380      	movs	r3, #128	; 0x80
 8009b54:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009b56:	019b      	lsls	r3, r3, #6
 8009b58:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b5a:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b5c:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009b5e:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b60:	2682      	movs	r6, #130	; 0x82
 8009b62:	2784      	movs	r7, #132	; 0x84
 8009b64:	6863      	ldr	r3, [r4, #4]
 8009b66:	0076      	lsls	r6, r6, #1
 8009b68:	4033      	ands	r3, r6
 8009b6a:	68a6      	ldr	r6, [r4, #8]
 8009b6c:	023f      	lsls	r7, r7, #8
 8009b6e:	403e      	ands	r6, r7
 8009b70:	2702      	movs	r7, #2
 8009b72:	4333      	orrs	r3, r6
 8009b74:	6926      	ldr	r6, [r4, #16]
 8009b76:	69a1      	ldr	r1, [r4, #24]
 8009b78:	403e      	ands	r6, r7
 8009b7a:	4333      	orrs	r3, r6
 8009b7c:	2601      	movs	r6, #1
 8009b7e:	6967      	ldr	r7, [r4, #20]
 8009b80:	46b2      	mov	sl, r6
 8009b82:	4037      	ands	r7, r6
 8009b84:	433b      	orrs	r3, r7
 8009b86:	2780      	movs	r7, #128	; 0x80
 8009b88:	00bf      	lsls	r7, r7, #2
 8009b8a:	400f      	ands	r7, r1
 8009b8c:	433b      	orrs	r3, r7
 8009b8e:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b90:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b92:	46b8      	mov	r8, r7
 8009b94:	2738      	movs	r7, #56	; 0x38
 8009b96:	46b9      	mov	r9, r7
 8009b98:	4647      	mov	r7, r8
 8009b9a:	464e      	mov	r6, r9
 8009b9c:	4037      	ands	r7, r6
 8009b9e:	6a26      	ldr	r6, [r4, #32]
 8009ba0:	433b      	orrs	r3, r7
 8009ba2:	46b0      	mov	r8, r6
 8009ba4:	2680      	movs	r6, #128	; 0x80
 8009ba6:	4647      	mov	r7, r8
 8009ba8:	4037      	ands	r7, r6
 8009baa:	4666      	mov	r6, ip
 8009bac:	433b      	orrs	r3, r7
 8009bae:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009bb0:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bb2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bb6:	4033      	ands	r3, r6
 8009bb8:	26f0      	movs	r6, #240	; 0xf0
 8009bba:	0136      	lsls	r6, r6, #4
 8009bbc:	4030      	ands	r0, r6
 8009bbe:	4303      	orrs	r3, r0
 8009bc0:	2004      	movs	r0, #4
 8009bc2:	4001      	ands	r1, r0
 8009bc4:	430b      	orrs	r3, r1
 8009bc6:	2110      	movs	r1, #16
 8009bc8:	4029      	ands	r1, r5
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	4659      	mov	r1, fp
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bd2:	69d3      	ldr	r3, [r2, #28]
 8009bd4:	491c      	ldr	r1, [pc, #112]	; (8009c48 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8009bd6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009bd8:	400b      	ands	r3, r1
 8009bda:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009bdc:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009bde:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009be0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009be2:	335d      	adds	r3, #93	; 0x5d
 8009be4:	54e2      	strb	r2, [r4, r3]
}
 8009be6:	bcf0      	pop	{r4, r5, r6, r7}
 8009be8:	46bb      	mov	fp, r7
 8009bea:	46b2      	mov	sl, r6
 8009bec:	46a9      	mov	r9, r5
 8009bee:	46a0      	mov	r8, r4
 8009bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bf2:	2382      	movs	r3, #130	; 0x82
 8009bf4:	6842      	ldr	r2, [r0, #4]
 8009bf6:	005b      	lsls	r3, r3, #1
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d091      	beq.n	8009b20 <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bfc:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009bfe:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c00:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c02:	335d      	adds	r3, #93	; 0x5d
 8009c04:	5ce3      	ldrb	r3, [r4, r3]
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d190      	bne.n	8009b2e <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8009c0c:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8009c0e:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8009c10:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8009c12:	f7fd fc55 	bl	80074c0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009c16:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009c18:	e789      	b.n	8009b2e <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c1a:	4298      	cmp	r0, r3
 8009c1c:	d006      	beq.n	8009c2c <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c1e:	2380      	movs	r3, #128	; 0x80
 8009c20:	015b      	lsls	r3, r3, #5
 8009c22:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c24:	2300      	movs	r3, #0
 8009c26:	469c      	mov	ip, r3
 8009c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c2a:	e799      	b.n	8009b60 <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c2c:	2380      	movs	r3, #128	; 0x80
 8009c2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009c30:	019b      	lsls	r3, r3, #6
 8009c32:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c34:	2380      	movs	r3, #128	; 0x80
 8009c36:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c38:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c3a:	469b      	mov	fp, r3
 8009c3c:	e790      	b.n	8009b60 <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 8009c3e:	2001      	movs	r0, #1
 8009c40:	e7d1      	b.n	8009be6 <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c42:	2300      	movs	r3, #0
 8009c44:	469b      	mov	fp, r3
 8009c46:	e7ed      	b.n	8009c24 <HAL_SPI_Init+0x124>
 8009c48:	fffff7ff 	.word	0xfffff7ff

08009c4c <HAL_SPI_Transmit>:
{
 8009c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c4e:	46c6      	mov	lr, r8
 8009c50:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8009c52:	235c      	movs	r3, #92	; 0x5c
{
 8009c54:	b500      	push	{lr}
 8009c56:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8009c58:	5cc2      	ldrb	r2, [r0, r3]
{
 8009c5a:	0004      	movs	r4, r0
 8009c5c:	000d      	movs	r5, r1
 8009c5e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8009c60:	2a01      	cmp	r2, #1
 8009c62:	d060      	beq.n	8009d26 <HAL_SPI_Transmit+0xda>
 8009c64:	2201      	movs	r2, #1
 8009c66:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009c68:	f7fd febe 	bl	80079e8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8009c6c:	225d      	movs	r2, #93	; 0x5d
 8009c6e:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8009c70:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8009c72:	b2d8      	uxtb	r0, r3
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d00a      	beq.n	8009c8e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8009c78:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009c7a:	235d      	movs	r3, #93	; 0x5d
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8009c80:	2200      	movs	r2, #0
 8009c82:	3b01      	subs	r3, #1
 8009c84:	54e2      	strb	r2, [r4, r3]
}
 8009c86:	b002      	add	sp, #8
 8009c88:	bc80      	pop	{r7}
 8009c8a:	46b8      	mov	r8, r7
 8009c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	d0f3      	beq.n	8009c7a <HAL_SPI_Transmit+0x2e>
 8009c92:	4643      	mov	r3, r8
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d0f0      	beq.n	8009c7a <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c9c:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8009c9e:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ca0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 8009ca2:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009ca4:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8009ca6:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ca8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009caa:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009cac:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8009cae:	3202      	adds	r2, #2
 8009cb0:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8009cb2:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009cb4:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cb6:	2380      	movs	r3, #128	; 0x80
 8009cb8:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8009cba:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cbc:	021b      	lsls	r3, r3, #8
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d05a      	beq.n	8009d78 <HAL_SPI_Transmit+0x12c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	6802      	ldr	r2, [r0, #0]
 8009cc6:	4213      	tst	r3, r2
 8009cc8:	d102      	bne.n	8009cd0 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8009cca:	6802      	ldr	r2, [r0, #0]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cd0:	23e0      	movs	r3, #224	; 0xe0
 8009cd2:	68e2      	ldr	r2, [r4, #12]
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d927      	bls.n	8009d2a <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cda:	6863      	ldr	r3, [r4, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d055      	beq.n	8009d8c <HAL_SPI_Transmit+0x140>
 8009ce0:	4643      	mov	r3, r8
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d052      	beq.n	8009d8c <HAL_SPI_Transmit+0x140>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ce6:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8009ce8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cea:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10d      	bne.n	8009d0c <HAL_SPI_Transmit+0xc0>
 8009cf0:	e05f      	b.n	8009db2 <HAL_SPI_Transmit+0x166>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009cf4:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cf6:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cf8:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8009cfa:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cfc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009cfe:	3d01      	subs	r5, #1
 8009d00:	b2ad      	uxth	r5, r5
 8009d02:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8009d04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d053      	beq.n	8009db2 <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d0a:	6820      	ldr	r0, [r4, #0]
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	6883      	ldr	r3, [r0, #8]
 8009d10:	421a      	tst	r2, r3
 8009d12:	d1ee      	bne.n	8009cf2 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d14:	f7fd fe68 	bl	80079e8 <HAL_GetTick>
 8009d18:	1bc0      	subs	r0, r0, r7
 8009d1a:	42b0      	cmp	r0, r6
 8009d1c:	d3f2      	bcc.n	8009d04 <HAL_SPI_Transmit+0xb8>
 8009d1e:	1c73      	adds	r3, r6, #1
 8009d20:	d0f0      	beq.n	8009d04 <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 8009d22:	2003      	movs	r0, #3
 8009d24:	e7a9      	b.n	8009c7a <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8009d26:	2002      	movs	r0, #2
 8009d28:	e7ad      	b.n	8009c86 <HAL_SPI_Transmit+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d2a:	6863      	ldr	r3, [r4, #4]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d036      	beq.n	8009d9e <HAL_SPI_Transmit+0x152>
 8009d30:	4643      	mov	r3, r8
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d033      	beq.n	8009d9e <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d36:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8009d38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d3a:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10d      	bne.n	8009d5c <HAL_SPI_Transmit+0x110>
 8009d40:	e037      	b.n	8009db2 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009d44:	7812      	ldrb	r2, [r2, #0]
 8009d46:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8009d48:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009d4c:	3d01      	subs	r5, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d4e:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8009d50:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d52:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009d54:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8009d56:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d02a      	beq.n	8009db2 <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d5c:	4641      	mov	r1, r8
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	689a      	ldr	r2, [r3, #8]
 8009d62:	4211      	tst	r1, r2
 8009d64:	d1ed      	bne.n	8009d42 <HAL_SPI_Transmit+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d66:	f7fd fe3f 	bl	80079e8 <HAL_GetTick>
 8009d6a:	1bc0      	subs	r0, r0, r7
 8009d6c:	42b0      	cmp	r0, r6
 8009d6e:	d3f2      	bcc.n	8009d56 <HAL_SPI_Transmit+0x10a>
 8009d70:	1c73      	adds	r3, r6, #1
 8009d72:	d0f0      	beq.n	8009d56 <HAL_SPI_Transmit+0x10a>
          errorcode = HAL_TIMEOUT;
 8009d74:	2003      	movs	r0, #3
 8009d76:	e780      	b.n	8009c7a <HAL_SPI_Transmit+0x2e>
    __HAL_SPI_DISABLE(hspi);
 8009d78:	2240      	movs	r2, #64	; 0x40
 8009d7a:	6803      	ldr	r3, [r0, #0]
 8009d7c:	4393      	bics	r3, r2
 8009d7e:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8009d80:	2380      	movs	r3, #128	; 0x80
 8009d82:	6802      	ldr	r2, [r0, #0]
 8009d84:	01db      	lsls	r3, r3, #7
 8009d86:	4313      	orrs	r3, r2
 8009d88:	6003      	str	r3, [r0, #0]
 8009d8a:	e79a      	b.n	8009cc2 <HAL_SPI_Transmit+0x76>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d8c:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d8e:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d90:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8009d92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d94:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009d96:	3b01      	subs	r3, #1
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009d9c:	e7a3      	b.n	8009ce6 <HAL_SPI_Transmit+0x9a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d9e:	782b      	ldrb	r3, [r5, #0]
 8009da0:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009da2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009da4:	3301      	adds	r3, #1
 8009da6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009da8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009daa:	3b01      	subs	r3, #1
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8009db0:	e7c1      	b.n	8009d36 <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009db2:	003a      	movs	r2, r7
 8009db4:	0031      	movs	r1, r6
 8009db6:	0020      	movs	r0, r4
 8009db8:	f7ff fe80 	bl	8009abc <SPI_EndRxTxTransaction>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d001      	beq.n	8009dc4 <HAL_SPI_Transmit+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009dc0:	2320      	movs	r3, #32
 8009dc2:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009dc4:	68a3      	ldr	r3, [r4, #8]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <HAL_SPI_Transmit+0x18c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	9201      	str	r2, [sp, #4]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	9301      	str	r3, [sp, #4]
 8009dd6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dd8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8009dda:	1e43      	subs	r3, r0, #1
 8009ddc:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8009dde:	b2c0      	uxtb	r0, r0
error:
 8009de0:	e74b      	b.n	8009c7a <HAL_SPI_Transmit+0x2e>
 8009de2:	46c0      	nop			; (mov r8, r8)

08009de4 <HAL_SPI_TransmitReceive>:
{
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	4647      	mov	r7, r8
 8009de8:	46ce      	mov	lr, r9
 8009dea:	b580      	push	{r7, lr}
 8009dec:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8009dee:	235c      	movs	r3, #92	; 0x5c
{
 8009df0:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8009df2:	5cc2      	ldrb	r2, [r0, r3]
{
 8009df4:	0004      	movs	r4, r0
 8009df6:	4688      	mov	r8, r1
 8009df8:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8009dfa:	2a01      	cmp	r2, #1
 8009dfc:	d100      	bne.n	8009e00 <HAL_SPI_TransmitReceive+0x1c>
 8009dfe:	e095      	b.n	8009f2c <HAL_SPI_TransmitReceive+0x148>
 8009e00:	2201      	movs	r2, #1
 8009e02:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009e04:	f7fd fdf0 	bl	80079e8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8009e08:	235d      	movs	r3, #93	; 0x5d
 8009e0a:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8009e0c:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 8009e0e:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8009e10:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d013      	beq.n	8009e3e <HAL_SPI_TransmitReceive+0x5a>
 8009e16:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8009e18:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d009      	beq.n	8009e34 <HAL_SPI_TransmitReceive+0x50>
  hspi->State = HAL_SPI_STATE_READY;
 8009e20:	235d      	movs	r3, #93	; 0x5d
 8009e22:	2201      	movs	r2, #1
 8009e24:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8009e26:	2200      	movs	r2, #0
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	54e2      	strb	r2, [r4, r3]
}
 8009e2c:	bcc0      	pop	{r6, r7}
 8009e2e:	46b9      	mov	r9, r7
 8009e30:	46b0      	mov	r8, r6
 8009e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009e34:	68a3      	ldr	r3, [r4, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1f2      	bne.n	8009e20 <HAL_SPI_TransmitReceive+0x3c>
 8009e3a:	2904      	cmp	r1, #4
 8009e3c:	d1f0      	bne.n	8009e20 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009e3e:	4643      	mov	r3, r8
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d075      	beq.n	8009f30 <HAL_SPI_TransmitReceive+0x14c>
 8009e44:	464b      	mov	r3, r9
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d072      	beq.n	8009f30 <HAL_SPI_TransmitReceive+0x14c>
 8009e4a:	2f00      	cmp	r7, #0
 8009e4c:	d070      	beq.n	8009f30 <HAL_SPI_TransmitReceive+0x14c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e4e:	235d      	movs	r3, #93	; 0x5d
 8009e50:	5ce1      	ldrb	r1, [r4, r3]
 8009e52:	2904      	cmp	r1, #4
 8009e54:	d001      	beq.n	8009e5a <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e56:	2105      	movs	r1, #5
 8009e58:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e5a:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e5c:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e5e:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009e60:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e62:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8009e64:	5267      	strh	r7, [r4, r1]
  hspi->RxXferSize  = Size;
 8009e66:	3902      	subs	r1, #2
 8009e68:	5267      	strh	r7, [r4, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e6a:	4641      	mov	r1, r8
  hspi->RxISR       = NULL;
 8009e6c:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009e6e:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e70:	23e0      	movs	r3, #224	; 0xe0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e72:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e74:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferCount = Size;
 8009e76:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009e78:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	4299      	cmp	r1, r3
 8009e7e:	d965      	bls.n	8009f4c <HAL_SPI_TransmitReceive+0x168>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	4862      	ldr	r0, [pc, #392]	; (800a00c <HAL_SPI_TransmitReceive+0x228>)
 8009e84:	6859      	ldr	r1, [r3, #4]
 8009e86:	4001      	ands	r1, r0
 8009e88:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e8a:	2140      	movs	r1, #64	; 0x40
 8009e8c:	6818      	ldr	r0, [r3, #0]
 8009e8e:	4201      	tst	r1, r0
 8009e90:	d102      	bne.n	8009e98 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	4301      	orrs	r1, r0
 8009e96:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e98:	2a00      	cmp	r2, #0
 8009e9a:	d000      	beq.n	8009e9e <HAL_SPI_TransmitReceive+0xba>
 8009e9c:	e0af      	b.n	8009ffe <HAL_SPI_TransmitReceive+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	8812      	ldrh	r2, [r2, #0]
 8009ea2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ea4:	4643      	mov	r3, r8
 8009ea6:	3302      	adds	r3, #2
 8009ea8:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009eaa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009eac:	3b01      	subs	r3, #1
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009eb6:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eb8:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009eba:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ebc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d102      	bne.n	8009ec8 <HAL_SPI_TransmitReceive+0xe4>
 8009ec2:	5be3      	ldrh	r3, [r4, r7]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d035      	beq.n	8009f34 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ec8:	4641      	mov	r1, r8
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	4211      	tst	r1, r2
 8009ed0:	d010      	beq.n	8009ef4 <HAL_SPI_TransmitReceive+0x110>
 8009ed2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	d00d      	beq.n	8009ef4 <HAL_SPI_TransmitReceive+0x110>
 8009ed8:	464a      	mov	r2, r9
 8009eda:	2a01      	cmp	r2, #1
 8009edc:	d10a      	bne.n	8009ef4 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ede:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ee0:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ee2:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ee4:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ee6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009ee8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009eea:	3a01      	subs	r2, #1
 8009eec:	b292      	uxth	r2, r2
 8009eee:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	0008      	movs	r0, r1
 8009ef8:	689a      	ldr	r2, [r3, #8]
 8009efa:	4010      	ands	r0, r2
 8009efc:	4211      	tst	r1, r2
 8009efe:	d00c      	beq.n	8009f1a <HAL_SPI_TransmitReceive+0x136>
 8009f00:	5be2      	ldrh	r2, [r4, r7]
 8009f02:	2a00      	cmp	r2, #0
 8009f04:	d009      	beq.n	8009f1a <HAL_SPI_TransmitReceive+0x136>
        txallowed = 1U;
 8009f06:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f0e:	3302      	adds	r3, #2
 8009f10:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009f12:	5be3      	ldrh	r3, [r4, r7]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	53e3      	strh	r3, [r4, r7]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f1a:	f7fd fd65 	bl	80079e8 <HAL_GetTick>
 8009f1e:	1b80      	subs	r0, r0, r6
 8009f20:	42a8      	cmp	r0, r5
 8009f22:	d3cb      	bcc.n	8009ebc <HAL_SPI_TransmitReceive+0xd8>
 8009f24:	1c6b      	adds	r3, r5, #1
 8009f26:	d0c9      	beq.n	8009ebc <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 8009f28:	2003      	movs	r0, #3
 8009f2a:	e779      	b.n	8009e20 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8009f2c:	2002      	movs	r0, #2
 8009f2e:	e77d      	b.n	8009e2c <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_ERROR;
 8009f30:	2001      	movs	r0, #1
 8009f32:	e775      	b.n	8009e20 <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f34:	0032      	movs	r2, r6
 8009f36:	0029      	movs	r1, r5
 8009f38:	0020      	movs	r0, r4
 8009f3a:	f7ff fdbf 	bl	8009abc <SPI_EndRxTxTransaction>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d100      	bne.n	8009f44 <HAL_SPI_TransmitReceive+0x160>
 8009f42:	e76d      	b.n	8009e20 <HAL_SPI_TransmitReceive+0x3c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f44:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8009f46:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f48:	6623      	str	r3, [r4, #96]	; 0x60
 8009f4a:	e769      	b.n	8009e20 <HAL_SPI_TransmitReceive+0x3c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f4c:	2180      	movs	r1, #128	; 0x80
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	0149      	lsls	r1, r1, #5
 8009f52:	6858      	ldr	r0, [r3, #4]
 8009f54:	4301      	orrs	r1, r0
 8009f56:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f58:	2140      	movs	r1, #64	; 0x40
 8009f5a:	6818      	ldr	r0, [r3, #0]
 8009f5c:	4201      	tst	r1, r0
 8009f5e:	d102      	bne.n	8009f66 <HAL_SPI_TransmitReceive+0x182>
    __HAL_SPI_ENABLE(hspi);
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	4301      	orrs	r1, r0
 8009f64:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f66:	2a00      	cmp	r2, #0
 8009f68:	d14d      	bne.n	800a006 <HAL_SPI_TransmitReceive+0x222>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f6a:	4642      	mov	r2, r8
 8009f6c:	7812      	ldrb	r2, [r2, #0]
 8009f6e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f72:	3301      	adds	r3, #1
 8009f74:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009f76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f82:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f84:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f86:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f88:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <HAL_SPI_TransmitReceive+0x1b0>
 8009f8e:	5be3      	ldrh	r3, [r4, r7]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d0cf      	beq.n	8009f34 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f94:	4641      	mov	r1, r8
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	689a      	ldr	r2, [r3, #8]
 8009f9a:	4211      	tst	r1, r2
 8009f9c:	d012      	beq.n	8009fc4 <HAL_SPI_TransmitReceive+0x1e0>
 8009f9e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	d00f      	beq.n	8009fc4 <HAL_SPI_TransmitReceive+0x1e0>
 8009fa4:	464a      	mov	r2, r9
 8009fa6:	2a01      	cmp	r2, #1
 8009fa8:	d10c      	bne.n	8009fc4 <HAL_SPI_TransmitReceive+0x1e0>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009faa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009fac:	7812      	ldrb	r2, [r2, #0]
 8009fae:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 8009fb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009fba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009fc2:	6823      	ldr	r3, [r4, #0]
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	0008      	movs	r0, r1
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	4010      	ands	r0, r2
 8009fcc:	4211      	tst	r1, r2
 8009fce:	d00d      	beq.n	8009fec <HAL_SPI_TransmitReceive+0x208>
 8009fd0:	5be2      	ldrh	r2, [r4, r7]
 8009fd2:	2a00      	cmp	r2, #0
 8009fd4:	d00a      	beq.n	8009fec <HAL_SPI_TransmitReceive+0x208>
        txallowed = 1U;
 8009fd6:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009fd8:	7b1b      	ldrb	r3, [r3, #12]
 8009fda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009fdc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8009fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009fe4:	5be3      	ldrh	r3, [r4, r7]
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009fec:	f7fd fcfc 	bl	80079e8 <HAL_GetTick>
 8009ff0:	1b80      	subs	r0, r0, r6
 8009ff2:	42a8      	cmp	r0, r5
 8009ff4:	d3c8      	bcc.n	8009f88 <HAL_SPI_TransmitReceive+0x1a4>
 8009ff6:	1c6b      	adds	r3, r5, #1
 8009ff8:	d0c6      	beq.n	8009f88 <HAL_SPI_TransmitReceive+0x1a4>
        errorcode = HAL_TIMEOUT;
 8009ffa:	2003      	movs	r0, #3
 8009ffc:	e710      	b.n	8009e20 <HAL_SPI_TransmitReceive+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ffe:	2f01      	cmp	r7, #1
 800a000:	d000      	beq.n	800a004 <HAL_SPI_TransmitReceive+0x220>
 800a002:	e756      	b.n	8009eb2 <HAL_SPI_TransmitReceive+0xce>
 800a004:	e74b      	b.n	8009e9e <HAL_SPI_TransmitReceive+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a006:	2f01      	cmp	r7, #1
 800a008:	d1b9      	bne.n	8009f7e <HAL_SPI_TransmitReceive+0x19a>
 800a00a:	e7ae      	b.n	8009f6a <HAL_SPI_TransmitReceive+0x186>
 800a00c:	ffffefff 	.word	0xffffefff

0800a010 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a010:	223d      	movs	r2, #61	; 0x3d
 800a012:	5c81      	ldrb	r1, [r0, r2]
{
 800a014:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 800a016:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 800a018:	2901      	cmp	r1, #1
 800a01a:	d112      	bne.n	800a042 <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a01c:	3101      	adds	r1, #1
 800a01e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	4302      	orrs	r2, r0
 800a026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a028:	4a0e      	ldr	r2, [pc, #56]	; (800a064 <HAL_TIM_Base_Start_IT+0x54>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d00a      	beq.n	800a044 <HAL_TIM_Base_Start_IT+0x34>
 800a02e:	4a0e      	ldr	r2, [pc, #56]	; (800a068 <HAL_TIM_Base_Start_IT+0x58>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d007      	beq.n	800a044 <HAL_TIM_Base_Start_IT+0x34>
 800a034:	4a0d      	ldr	r2, [pc, #52]	; (800a06c <HAL_TIM_Base_Start_IT+0x5c>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d004      	beq.n	800a044 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	4302      	orrs	r2, r0
  }

  /* Return function status */
  return HAL_OK;
 800a03e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800a040:	601a      	str	r2, [r3, #0]
}
 800a042:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	490a      	ldr	r1, [pc, #40]	; (800a070 <HAL_TIM_Base_Start_IT+0x60>)
 800a048:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a04a:	2a06      	cmp	r2, #6
 800a04c:	d008      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x50>
 800a04e:	3907      	subs	r1, #7
 800a050:	428a      	cmp	r2, r1
 800a052:	d005      	beq.n	800a060 <HAL_TIM_Base_Start_IT+0x50>
      __HAL_TIM_ENABLE(htim);
 800a054:	2101      	movs	r1, #1
 800a056:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800a058:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800a05a:	430a      	orrs	r2, r1
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	e7f0      	b.n	800a042 <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 800a060:	2000      	movs	r0, #0
 800a062:	e7ee      	b.n	800a042 <HAL_TIM_Base_Start_IT+0x32>
 800a064:	40012c00 	.word	0x40012c00
 800a068:	40000400 	.word	0x40000400
 800a06c:	40014000 	.word	0x40014000
 800a070:	00010007 	.word	0x00010007

0800a074 <HAL_TIM_OC_DelayElapsedCallback>:
 800a074:	4770      	bx	lr
 800a076:	46c0      	nop			; (mov r8, r8)

0800a078 <HAL_TIM_IC_CaptureCallback>:
 800a078:	4770      	bx	lr
 800a07a:	46c0      	nop			; (mov r8, r8)

0800a07c <HAL_TIM_PWM_PulseFinishedCallback>:
 800a07c:	4770      	bx	lr
 800a07e:	46c0      	nop			; (mov r8, r8)

0800a080 <HAL_TIM_TriggerCallback>:
 800a080:	4770      	bx	lr
 800a082:	46c0      	nop			; (mov r8, r8)

0800a084 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a084:	2202      	movs	r2, #2
 800a086:	6803      	ldr	r3, [r0, #0]
{
 800a088:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a08a:	6919      	ldr	r1, [r3, #16]
{
 800a08c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a08e:	420a      	tst	r2, r1
 800a090:	d003      	beq.n	800a09a <HAL_TIM_IRQHandler+0x16>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a092:	68d9      	ldr	r1, [r3, #12]
 800a094:	420a      	tst	r2, r1
 800a096:	d000      	beq.n	800a09a <HAL_TIM_IRQHandler+0x16>
 800a098:	e06e      	b.n	800a178 <HAL_TIM_IRQHandler+0xf4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a09a:	2204      	movs	r2, #4
 800a09c:	6919      	ldr	r1, [r3, #16]
 800a09e:	420a      	tst	r2, r1
 800a0a0:	d002      	beq.n	800a0a8 <HAL_TIM_IRQHandler+0x24>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0a2:	68d9      	ldr	r1, [r3, #12]
 800a0a4:	420a      	tst	r2, r1
 800a0a6:	d154      	bne.n	800a152 <HAL_TIM_IRQHandler+0xce>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	6919      	ldr	r1, [r3, #16]
 800a0ac:	420a      	tst	r2, r1
 800a0ae:	d002      	beq.n	800a0b6 <HAL_TIM_IRQHandler+0x32>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0b0:	68d9      	ldr	r1, [r3, #12]
 800a0b2:	420a      	tst	r2, r1
 800a0b4:	d13c      	bne.n	800a130 <HAL_TIM_IRQHandler+0xac>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0b6:	2210      	movs	r2, #16
 800a0b8:	6919      	ldr	r1, [r3, #16]
 800a0ba:	420a      	tst	r2, r1
 800a0bc:	d002      	beq.n	800a0c4 <HAL_TIM_IRQHandler+0x40>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0be:	68d9      	ldr	r1, [r3, #12]
 800a0c0:	420a      	tst	r2, r1
 800a0c2:	d122      	bne.n	800a10a <HAL_TIM_IRQHandler+0x86>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	6919      	ldr	r1, [r3, #16]
 800a0c8:	420a      	tst	r2, r1
 800a0ca:	d002      	beq.n	800a0d2 <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0cc:	68d9      	ldr	r1, [r3, #12]
 800a0ce:	420a      	tst	r2, r1
 800a0d0:	d168      	bne.n	800a1a4 <HAL_TIM_IRQHandler+0x120>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0d2:	2280      	movs	r2, #128	; 0x80
 800a0d4:	6919      	ldr	r1, [r3, #16]
 800a0d6:	420a      	tst	r2, r1
 800a0d8:	d002      	beq.n	800a0e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0da:	68d9      	ldr	r1, [r3, #12]
 800a0dc:	420a      	tst	r2, r1
 800a0de:	d168      	bne.n	800a1b2 <HAL_TIM_IRQHandler+0x12e>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a0e0:	691a      	ldr	r2, [r3, #16]
 800a0e2:	05d2      	lsls	r2, r2, #23
 800a0e4:	d502      	bpl.n	800a0ec <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0e6:	68da      	ldr	r2, [r3, #12]
 800a0e8:	0612      	lsls	r2, r2, #24
 800a0ea:	d46a      	bmi.n	800a1c2 <HAL_TIM_IRQHandler+0x13e>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0ec:	2240      	movs	r2, #64	; 0x40
 800a0ee:	6919      	ldr	r1, [r3, #16]
 800a0f0:	420a      	tst	r2, r1
 800a0f2:	d002      	beq.n	800a0fa <HAL_TIM_IRQHandler+0x76>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0f4:	68d9      	ldr	r1, [r3, #12]
 800a0f6:	420a      	tst	r2, r1
 800a0f8:	d16a      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x14c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	6919      	ldr	r1, [r3, #16]
 800a0fe:	420a      	tst	r2, r1
 800a100:	d002      	beq.n	800a108 <HAL_TIM_IRQHandler+0x84>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a102:	68d9      	ldr	r1, [r3, #12]
 800a104:	420a      	tst	r2, r1
 800a106:	d147      	bne.n	800a198 <HAL_TIM_IRQHandler+0x114>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a108:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a10a:	3a21      	subs	r2, #33	; 0x21
 800a10c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a10e:	3219      	adds	r2, #25
 800a110:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a112:	69da      	ldr	r2, [r3, #28]
 800a114:	23c0      	movs	r3, #192	; 0xc0
 800a116:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a118:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a11a:	421a      	tst	r2, r3
 800a11c:	d168      	bne.n	800a1f0 <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a11e:	f7ff ffa9 	bl	800a074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a122:	0020      	movs	r0, r4
 800a124:	f7ff ffaa 	bl	800a07c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a128:	2300      	movs	r3, #0
 800a12a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	e7c9      	b.n	800a0c4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a130:	3a11      	subs	r2, #17
 800a132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a134:	320d      	adds	r2, #13
 800a136:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a138:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800a13a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a13c:	079b      	lsls	r3, r3, #30
 800a13e:	d154      	bne.n	800a1ea <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a140:	f7ff ff98 	bl	800a074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a144:	0020      	movs	r0, r4
 800a146:	f7ff ff99 	bl	800a07c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14a:	2300      	movs	r3, #0
 800a14c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	e7b1      	b.n	800a0b6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a152:	3a09      	subs	r2, #9
 800a154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a156:	3207      	adds	r2, #7
 800a158:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a15a:	699a      	ldr	r2, [r3, #24]
 800a15c:	23c0      	movs	r3, #192	; 0xc0
 800a15e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800a160:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a162:	421a      	tst	r2, r3
 800a164:	d13e      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a166:	f7ff ff85 	bl	800a074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a16a:	0020      	movs	r0, r4
 800a16c:	f7ff ff86 	bl	800a07c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a170:	2300      	movs	r3, #0
 800a172:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	e797      	b.n	800a0a8 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a178:	3a05      	subs	r2, #5
 800a17a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a17c:	3204      	adds	r2, #4
 800a17e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	079b      	lsls	r3, r3, #30
 800a184:	d12b      	bne.n	800a1de <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a186:	f7ff ff75 	bl	800a074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a18a:	0020      	movs	r0, r4
 800a18c:	f7ff ff76 	bl	800a07c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a190:	2300      	movs	r3, #0
 800a192:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a194:	6823      	ldr	r3, [r4, #0]
 800a196:	e780      	b.n	800a09a <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a198:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 800a19a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a19c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a19e:	f000 f8e1 	bl	800a364 <HAL_TIMEx_CommutCallback>
}
 800a1a2:	e7b1      	b.n	800a108 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1a4:	3a03      	subs	r2, #3
 800a1a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1a8:	0020      	movs	r0, r4
 800a1aa:	f7fc f855 	bl	8006258 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	e78f      	b.n	800a0d2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1b2:	3a02      	subs	r2, #2
 800a1b4:	3aff      	subs	r2, #255	; 0xff
 800a1b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a1b8:	0020      	movs	r0, r4
 800a1ba:	f000 f8d5 	bl	800a368 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	e78e      	b.n	800a0e0 <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1c2:	4a0d      	ldr	r2, [pc, #52]	; (800a1f8 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 800a1c4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a1c8:	f000 f8d0 	bl	800a36c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	e78d      	b.n	800a0ec <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1d0:	3a81      	subs	r2, #129	; 0x81
 800a1d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a1d4:	0020      	movs	r0, r4
 800a1d6:	f7ff ff53 	bl	800a080 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	e78d      	b.n	800a0fa <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 800a1de:	f7ff ff4b 	bl	800a078 <HAL_TIM_IC_CaptureCallback>
 800a1e2:	e7d5      	b.n	800a190 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 800a1e4:	f7ff ff48 	bl	800a078 <HAL_TIM_IC_CaptureCallback>
 800a1e8:	e7c2      	b.n	800a170 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ea:	f7ff ff45 	bl	800a078 <HAL_TIM_IC_CaptureCallback>
 800a1ee:	e7ac      	b.n	800a14a <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a1f0:	f7ff ff42 	bl	800a078 <HAL_TIM_IC_CaptureCallback>
 800a1f4:	e798      	b.n	800a128 <HAL_TIM_IRQHandler+0xa4>
 800a1f6:	46c0      	nop			; (mov r8, r8)
 800a1f8:	fffffeff 	.word	0xfffffeff

0800a1fc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1fc:	4a1d      	ldr	r2, [pc, #116]	; (800a274 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 800a1fe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a200:	4290      	cmp	r0, r2
 800a202:	d023      	beq.n	800a24c <TIM_Base_SetConfig+0x50>
 800a204:	4a1c      	ldr	r2, [pc, #112]	; (800a278 <TIM_Base_SetConfig+0x7c>)
 800a206:	4290      	cmp	r0, r2
 800a208:	d017      	beq.n	800a23a <TIM_Base_SetConfig+0x3e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a20a:	4a1c      	ldr	r2, [pc, #112]	; (800a27c <TIM_Base_SetConfig+0x80>)
 800a20c:	4290      	cmp	r0, r2
 800a20e:	d018      	beq.n	800a242 <TIM_Base_SetConfig+0x46>
 800a210:	4a1b      	ldr	r2, [pc, #108]	; (800a280 <TIM_Base_SetConfig+0x84>)
 800a212:	4290      	cmp	r0, r2
 800a214:	d01e      	beq.n	800a254 <TIM_Base_SetConfig+0x58>
 800a216:	4a1b      	ldr	r2, [pc, #108]	; (800a284 <TIM_Base_SetConfig+0x88>)
 800a218:	4290      	cmp	r0, r2
 800a21a:	d01b      	beq.n	800a254 <TIM_Base_SetConfig+0x58>
 800a21c:	4a1a      	ldr	r2, [pc, #104]	; (800a288 <TIM_Base_SetConfig+0x8c>)
 800a21e:	4290      	cmp	r0, r2
 800a220:	d018      	beq.n	800a254 <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a222:	2280      	movs	r2, #128	; 0x80
 800a224:	4393      	bics	r3, r2
 800a226:	694a      	ldr	r2, [r1, #20]
 800a228:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a22a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a22c:	688b      	ldr	r3, [r1, #8]
 800a22e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a230:	680b      	ldr	r3, [r1, #0]
 800a232:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a234:	2301      	movs	r3, #1
 800a236:	6143      	str	r3, [r0, #20]
}
 800a238:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a23a:	2270      	movs	r2, #112	; 0x70
 800a23c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800a23e:	684a      	ldr	r2, [r1, #4]
 800a240:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800a242:	4a12      	ldr	r2, [pc, #72]	; (800a28c <TIM_Base_SetConfig+0x90>)
 800a244:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a246:	68ca      	ldr	r2, [r1, #12]
 800a248:	4313      	orrs	r3, r2
 800a24a:	e7ea      	b.n	800a222 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a24c:	2270      	movs	r2, #112	; 0x70
 800a24e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800a250:	684a      	ldr	r2, [r1, #4]
 800a252:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800a254:	4a0d      	ldr	r2, [pc, #52]	; (800a28c <TIM_Base_SetConfig+0x90>)
 800a256:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a258:	68ca      	ldr	r2, [r1, #12]
 800a25a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a25c:	2280      	movs	r2, #128	; 0x80
 800a25e:	4393      	bics	r3, r2
 800a260:	694a      	ldr	r2, [r1, #20]
 800a262:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a264:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a266:	688b      	ldr	r3, [r1, #8]
 800a268:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a26a:	680b      	ldr	r3, [r1, #0]
 800a26c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800a26e:	690b      	ldr	r3, [r1, #16]
 800a270:	6303      	str	r3, [r0, #48]	; 0x30
 800a272:	e7df      	b.n	800a234 <TIM_Base_SetConfig+0x38>
 800a274:	40012c00 	.word	0x40012c00
 800a278:	40000400 	.word	0x40000400
 800a27c:	40002000 	.word	0x40002000
 800a280:	40014000 	.word	0x40014000
 800a284:	40014400 	.word	0x40014400
 800a288:	40014800 	.word	0x40014800
 800a28c:	fffffcff 	.word	0xfffffcff

0800a290 <HAL_TIM_Base_Init>:
{
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800a294:	d02a      	beq.n	800a2ec <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a296:	233d      	movs	r3, #61	; 0x3d
 800a298:	5cc3      	ldrb	r3, [r0, r3]
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d020      	beq.n	800a2e2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2a4:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2a8:	c901      	ldmia	r1!, {r0}
 800a2aa:	f7ff ffa7 	bl	800a1fc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 800a2b2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2b4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b6:	3a0a      	subs	r2, #10
 800a2b8:	54a3      	strb	r3, [r4, r2]
 800a2ba:	3201      	adds	r2, #1
 800a2bc:	54a3      	strb	r3, [r4, r2]
 800a2be:	3201      	adds	r2, #1
 800a2c0:	54a3      	strb	r3, [r4, r2]
 800a2c2:	3201      	adds	r2, #1
 800a2c4:	54a3      	strb	r3, [r4, r2]
 800a2c6:	3201      	adds	r2, #1
 800a2c8:	54a3      	strb	r3, [r4, r2]
 800a2ca:	3201      	adds	r2, #1
 800a2cc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ce:	3201      	adds	r2, #1
 800a2d0:	54a3      	strb	r3, [r4, r2]
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	54a3      	strb	r3, [r4, r2]
 800a2d6:	3201      	adds	r2, #1
 800a2d8:	54a3      	strb	r3, [r4, r2]
 800a2da:	3201      	adds	r2, #1
 800a2dc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800a2de:	5563      	strb	r3, [r4, r5]
}
 800a2e0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800a2e2:	333c      	adds	r3, #60	; 0x3c
 800a2e4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800a2e6:	f7fd f919 	bl	800751c <HAL_TIM_Base_MspInit>
 800a2ea:	e7d9      	b.n	800a2a0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800a2ec:	2001      	movs	r0, #1
 800a2ee:	e7f7      	b.n	800a2e0 <HAL_TIM_Base_Init+0x50>

0800a2f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2f0:	233c      	movs	r3, #60	; 0x3c
{
 800a2f2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800a2f4:	5cc3      	ldrb	r3, [r0, r3]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d02a      	beq.n	800a350 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2fa:	233d      	movs	r3, #61	; 0x3d
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a300:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a302:	4d14      	ldr	r5, [pc, #80]	; (800a354 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 800a304:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800a306:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a308:	42aa      	cmp	r2, r5
 800a30a:	d017      	beq.n	800a33c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a30c:	2570      	movs	r5, #112	; 0x70
 800a30e:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a310:	680d      	ldr	r5, [r1, #0]
 800a312:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a314:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a316:	4b10      	ldr	r3, [pc, #64]	; (800a358 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800a318:	429a      	cmp	r2, r3
 800a31a:	d002      	beq.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800a31c:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800a31e:	429a      	cmp	r2, r3
 800a320:	d104      	bne.n	800a32c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a322:	2380      	movs	r3, #128	; 0x80
 800a324:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a326:	688b      	ldr	r3, [r1, #8]
 800a328:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a32a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a32c:	233d      	movs	r3, #61	; 0x3d
 800a32e:	2201      	movs	r2, #1
 800a330:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800a332:	2200      	movs	r2, #0
 800a334:	3b01      	subs	r3, #1
 800a336:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800a338:	2000      	movs	r0, #0
}
 800a33a:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a33c:	4d08      	ldr	r5, [pc, #32]	; (800a360 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 800a33e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a340:	684d      	ldr	r5, [r1, #4]
 800a342:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800a344:	2570      	movs	r5, #112	; 0x70
 800a346:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a348:	680d      	ldr	r5, [r1, #0]
 800a34a:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800a34c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a34e:	e7e8      	b.n	800a322 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 800a350:	2002      	movs	r0, #2
 800a352:	e7f2      	b.n	800a33a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800a354:	40012c00 	.word	0x40012c00
 800a358:	40000400 	.word	0x40000400
 800a35c:	40014000 	.word	0x40014000
 800a360:	ff0fffff 	.word	0xff0fffff

0800a364 <HAL_TIMEx_CommutCallback>:
 800a364:	4770      	bx	lr
 800a366:	46c0      	nop			; (mov r8, r8)

0800a368 <HAL_TIMEx_BreakCallback>:
 800a368:	4770      	bx	lr
 800a36a:	46c0      	nop			; (mov r8, r8)

0800a36c <HAL_TIMEx_Break2Callback>:
 800a36c:	4770      	bx	lr
 800a36e:	46c0      	nop			; (mov r8, r8)

0800a370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a370:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a372:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a376:	2201      	movs	r2, #1
 800a378:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a37c:	6801      	ldr	r1, [r0, #0]
 800a37e:	4d13      	ldr	r5, [pc, #76]	; (800a3cc <UART_EndRxTransfer+0x5c>)
 800a380:	680b      	ldr	r3, [r1, #0]
 800a382:	402b      	ands	r3, r5
 800a384:	600b      	str	r3, [r1, #0]
 800a386:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a38a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a38e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a392:	6802      	ldr	r2, [r0, #0]
 800a394:	4c0e      	ldr	r4, [pc, #56]	; (800a3d0 <UART_EndRxTransfer+0x60>)
 800a396:	6893      	ldr	r3, [r2, #8]
 800a398:	4023      	ands	r3, r4
 800a39a:	6093      	str	r3, [r2, #8]
 800a39c:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3a0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d10a      	bne.n	800a3bc <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3a6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3aa:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3ae:	2410      	movs	r4, #16
 800a3b0:	6802      	ldr	r2, [r0, #0]
 800a3b2:	6813      	ldr	r3, [r2, #0]
 800a3b4:	43a3      	bics	r3, r4
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3bc:	238c      	movs	r3, #140	; 0x8c
 800a3be:	2220      	movs	r2, #32
 800a3c0:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3c6:	6743      	str	r3, [r0, #116]	; 0x74
}
 800a3c8:	bd30      	pop	{r4, r5, pc}
 800a3ca:	46c0      	nop			; (mov r8, r8)
 800a3cc:	fffffedf 	.word	0xfffffedf
 800a3d0:	effffffe 	.word	0xeffffffe

0800a3d4 <HAL_UART_RxHalfCpltCallback>:
 800a3d4:	4770      	bx	lr
 800a3d6:	46c0      	nop			; (mov r8, r8)

0800a3d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3da:	2188      	movs	r1, #136	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3dc:	238c      	movs	r3, #140	; 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3de:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3e0:	5865      	ldr	r5, [r4, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a3e2:	58e0      	ldr	r0, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	0612      	lsls	r2, r2, #24
 800a3ea:	d501      	bpl.n	800a3f0 <UART_DMAError+0x18>
 800a3ec:	2d21      	cmp	r5, #33	; 0x21
 800a3ee:	d014      	beq.n	800a41a <UART_DMAError+0x42>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	065b      	lsls	r3, r3, #25
 800a3f4:	d501      	bpl.n	800a3fa <UART_DMAError+0x22>
 800a3f6:	2822      	cmp	r0, #34	; 0x22
 800a3f8:	d008      	beq.n	800a40c <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3fa:	2290      	movs	r2, #144	; 0x90
 800a3fc:	2110      	movs	r1, #16
 800a3fe:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a400:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a402:	430b      	orrs	r3, r1
 800a404:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 800a406:	f7fb fee5 	bl	80061d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->RxXferCount = 0U;
 800a40c:	235e      	movs	r3, #94	; 0x5e
 800a40e:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 800a410:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 800a412:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 800a414:	f7ff ffac 	bl	800a370 <UART_EndRxTransfer>
 800a418:	e7ef      	b.n	800a3fa <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800a41a:	2356      	movs	r3, #86	; 0x56
 800a41c:	2200      	movs	r2, #0
 800a41e:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a420:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a424:	3201      	adds	r2, #1
 800a426:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a42a:	27c0      	movs	r7, #192	; 0xc0
 800a42c:	6825      	ldr	r5, [r4, #0]
 800a42e:	682b      	ldr	r3, [r5, #0]
 800a430:	43bb      	bics	r3, r7
 800a432:	602b      	str	r3, [r5, #0]
 800a434:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a438:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a43c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a440:	6822      	ldr	r2, [r4, #0]
 800a442:	4e05      	ldr	r6, [pc, #20]	; (800a458 <UART_DMAError+0x80>)
 800a444:	6893      	ldr	r3, [r2, #8]
 800a446:	4033      	ands	r3, r6
 800a448:	6093      	str	r3, [r2, #8]
 800a44a:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 800a44e:	2320      	movs	r3, #32
 800a450:	5063      	str	r3, [r4, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a452:	6823      	ldr	r3, [r4, #0]
}
 800a454:	e7cc      	b.n	800a3f0 <UART_DMAError+0x18>
 800a456:	46c0      	nop			; (mov r8, r8)
 800a458:	ff7fffff 	.word	0xff7fffff

0800a45c <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	225e      	movs	r2, #94	; 0x5e
{
 800a460:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a462:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800a464:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800a466:	3a08      	subs	r2, #8
 800a468:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a46a:	f7fb feb3 	bl	80061d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a46e:	bd10      	pop	{r4, pc}

0800a470 <HAL_UARTEx_RxEventCallback>:
}
 800a470:	4770      	bx	lr
 800a472:	46c0      	nop			; (mov r8, r8)

0800a474 <HAL_UART_IRQHandler>:
{
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	4645      	mov	r5, r8
 800a478:	46de      	mov	lr, fp
 800a47a:	4657      	mov	r7, sl
 800a47c:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a47e:	6802      	ldr	r2, [r0, #0]
{
 800a480:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a482:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a484:	4db3      	ldr	r5, [pc, #716]	; (800a754 <HAL_UART_IRQHandler+0x2e0>)
{
 800a486:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a488:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a48a:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800a48c:	422b      	tst	r3, r5
 800a48e:	d100      	bne.n	800a492 <HAL_UART_IRQHandler+0x1e>
 800a490:	e0cb      	b.n	800a62a <HAL_UART_IRQHandler+0x1b6>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a492:	4eb1      	ldr	r6, [pc, #708]	; (800a758 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a494:	4db1      	ldr	r5, [pc, #708]	; (800a75c <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a496:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a498:	4005      	ands	r5, r0
 800a49a:	4335      	orrs	r5, r6
 800a49c:	d157      	bne.n	800a54e <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a49e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800a4a0:	2d01      	cmp	r5, #1
 800a4a2:	d026      	beq.n	800a4f2 <HAL_UART_IRQHandler+0x7e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a4a4:	2580      	movs	r5, #128	; 0x80
 800a4a6:	036d      	lsls	r5, r5, #13
 800a4a8:	422b      	tst	r3, r5
 800a4aa:	d002      	beq.n	800a4b2 <HAL_UART_IRQHandler+0x3e>
 800a4ac:	024e      	lsls	r6, r1, #9
 800a4ae:	d500      	bpl.n	800a4b2 <HAL_UART_IRQHandler+0x3e>
 800a4b0:	e0e2      	b.n	800a678 <HAL_UART_IRQHandler+0x204>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a4b2:	2280      	movs	r2, #128	; 0x80
 800a4b4:	421a      	tst	r2, r3
 800a4b6:	d006      	beq.n	800a4c6 <HAL_UART_IRQHandler+0x52>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a4b8:	2580      	movs	r5, #128	; 0x80
 800a4ba:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a4bc:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a4be:	4029      	ands	r1, r5
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	d000      	beq.n	800a4c6 <HAL_UART_IRQHandler+0x52>
 800a4c4:	e0d1      	b.n	800a66a <HAL_UART_IRQHandler+0x1f6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a4c6:	2240      	movs	r2, #64	; 0x40
 800a4c8:	421a      	tst	r2, r3
 800a4ca:	d002      	beq.n	800a4d2 <HAL_UART_IRQHandler+0x5e>
 800a4cc:	4202      	tst	r2, r0
 800a4ce:	d000      	beq.n	800a4d2 <HAL_UART_IRQHandler+0x5e>
 800a4d0:	e0db      	b.n	800a68a <HAL_UART_IRQHandler+0x216>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a4d2:	021a      	lsls	r2, r3, #8
 800a4d4:	d502      	bpl.n	800a4dc <HAL_UART_IRQHandler+0x68>
 800a4d6:	0042      	lsls	r2, r0, #1
 800a4d8:	d500      	bpl.n	800a4dc <HAL_UART_IRQHandler+0x68>
 800a4da:	e0ea      	b.n	800a6b2 <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a4dc:	01db      	lsls	r3, r3, #7
 800a4de:	d502      	bpl.n	800a4e6 <HAL_UART_IRQHandler+0x72>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	da00      	bge.n	800a4e6 <HAL_UART_IRQHandler+0x72>
 800a4e4:	e12d      	b.n	800a742 <HAL_UART_IRQHandler+0x2ce>
}
 800a4e6:	bcf0      	pop	{r4, r5, r6, r7}
 800a4e8:	46bb      	mov	fp, r7
 800a4ea:	46b2      	mov	sl, r6
 800a4ec:	46a9      	mov	r9, r5
 800a4ee:	46a0      	mov	r8, r4
 800a4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4f2:	2610      	movs	r6, #16
 800a4f4:	421e      	tst	r6, r3
 800a4f6:	d0d5      	beq.n	800a4a4 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a4f8:	4206      	tst	r6, r0
 800a4fa:	d0d3      	beq.n	800a4a4 <HAL_UART_IRQHandler+0x30>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4fc:	2340      	movs	r3, #64	; 0x40
 800a4fe:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a500:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a502:	6892      	ldr	r2, [r2, #8]
 800a504:	4010      	ands	r0, r2
 800a506:	4213      	tst	r3, r2
 800a508:	d100      	bne.n	800a50c <HAL_UART_IRQHandler+0x98>
 800a50a:	e0dd      	b.n	800a6c8 <HAL_UART_IRQHandler+0x254>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a50c:	2280      	movs	r2, #128	; 0x80
 800a50e:	4694      	mov	ip, r2
 800a510:	58a2      	ldr	r2, [r4, r2]
 800a512:	6810      	ldr	r0, [r2, #0]
 800a514:	6842      	ldr	r2, [r0, #4]
 800a516:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800a518:	2a00      	cmp	r2, #0
 800a51a:	d0e4      	beq.n	800a4e6 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a51c:	215c      	movs	r1, #92	; 0x5c
 800a51e:	468b      	mov	fp, r1
 800a520:	5a61      	ldrh	r1, [r4, r1]
 800a522:	4291      	cmp	r1, r2
 800a524:	d9df      	bls.n	800a4e6 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 800a526:	275e      	movs	r7, #94	; 0x5e
 800a528:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a52a:	2220      	movs	r2, #32
 800a52c:	0017      	movs	r7, r2
 800a52e:	6800      	ldr	r0, [r0, #0]
 800a530:	4007      	ands	r7, r0
 800a532:	46b8      	mov	r8, r7
 800a534:	4202      	tst	r2, r0
 800a536:	d100      	bne.n	800a53a <HAL_UART_IRQHandler+0xc6>
 800a538:	e118      	b.n	800a76c <HAL_UART_IRQHandler+0x2f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a53a:	2302      	movs	r3, #2
 800a53c:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a53e:	335c      	adds	r3, #92	; 0x5c
 800a540:	5ae3      	ldrh	r3, [r4, r3]
 800a542:	0020      	movs	r0, r4
 800a544:	1ac9      	subs	r1, r1, r3
 800a546:	b289      	uxth	r1, r1
 800a548:	f7ff ff92 	bl	800a470 <HAL_UARTEx_RxEventCallback>
 800a54c:	e7cb      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a54e:	2501      	movs	r5, #1
 800a550:	421d      	tst	r5, r3
 800a552:	d008      	beq.n	800a566 <HAL_UART_IRQHandler+0xf2>
 800a554:	05c7      	lsls	r7, r0, #23
 800a556:	d506      	bpl.n	800a566 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a558:	2790      	movs	r7, #144	; 0x90
 800a55a:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a55c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a55e:	59e7      	ldr	r7, [r4, r7]
 800a560:	433d      	orrs	r5, r7
 800a562:	4667      	mov	r7, ip
 800a564:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a566:	2502      	movs	r5, #2
 800a568:	421d      	tst	r5, r3
 800a56a:	d06d      	beq.n	800a648 <HAL_UART_IRQHandler+0x1d4>
 800a56c:	07cf      	lsls	r7, r1, #31
 800a56e:	d50b      	bpl.n	800a588 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a570:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a572:	358e      	adds	r5, #142	; 0x8e
 800a574:	2704      	movs	r7, #4
 800a576:	46ac      	mov	ip, r5
 800a578:	5965      	ldr	r5, [r4, r5]
 800a57a:	46b8      	mov	r8, r7
 800a57c:	433d      	orrs	r5, r7
 800a57e:	4667      	mov	r7, ip
 800a580:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a582:	4645      	mov	r5, r8
 800a584:	421d      	tst	r5, r3
 800a586:	d163      	bne.n	800a650 <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a588:	2708      	movs	r7, #8
 800a58a:	421f      	tst	r7, r3
 800a58c:	d008      	beq.n	800a5a0 <HAL_UART_IRQHandler+0x12c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a58e:	2520      	movs	r5, #32
 800a590:	4005      	ands	r5, r0
 800a592:	4335      	orrs	r5, r6
 800a594:	d004      	beq.n	800a5a0 <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a596:	2690      	movs	r6, #144	; 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a598:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a59a:	59a5      	ldr	r5, [r4, r6]
 800a59c:	433d      	orrs	r5, r7
 800a59e:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a5a0:	2580      	movs	r5, #128	; 0x80
 800a5a2:	012d      	lsls	r5, r5, #4
 800a5a4:	422b      	tst	r3, r5
 800a5a6:	d007      	beq.n	800a5b8 <HAL_UART_IRQHandler+0x144>
 800a5a8:	0146      	lsls	r6, r0, #5
 800a5aa:	d505      	bpl.n	800a5b8 <HAL_UART_IRQHandler+0x144>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a5ac:	2690      	movs	r6, #144	; 0x90
 800a5ae:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5b0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a5b2:	59a5      	ldr	r5, [r4, r6]
 800a5b4:	433d      	orrs	r5, r7
 800a5b6:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5b8:	2590      	movs	r5, #144	; 0x90
 800a5ba:	5965      	ldr	r5, [r4, r5]
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	d100      	bne.n	800a5c2 <HAL_UART_IRQHandler+0x14e>
 800a5c0:	e791      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5c2:	2520      	movs	r5, #32
 800a5c4:	421d      	tst	r5, r3
 800a5c6:	d005      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x160>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5c8:	2380      	movs	r3, #128	; 0x80
 800a5ca:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5cc:	4005      	ands	r5, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5ce:	400b      	ands	r3, r1
 800a5d0:	431d      	orrs	r5, r3
 800a5d2:	d172      	bne.n	800a6ba <HAL_UART_IRQHandler+0x246>
      errorcode = huart->ErrorCode;
 800a5d4:	2690      	movs	r6, #144	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5d6:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5d8:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 800a5da:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5dc:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5de:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5e0:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 800a5e2:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5e4:	431d      	orrs	r5, r3
 800a5e6:	d100      	bne.n	800a5ea <HAL_UART_IRQHandler+0x176>
 800a5e8:	e0af      	b.n	800a74a <HAL_UART_IRQHandler+0x2d6>
        UART_EndRxTransfer(huart);
 800a5ea:	f7ff fec1 	bl	800a370 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	421f      	tst	r7, r3
 800a5f4:	d045      	beq.n	800a682 <HAL_UART_IRQHandler+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5f6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a600:	6822      	ldr	r2, [r4, #0]
 800a602:	6893      	ldr	r3, [r2, #8]
 800a604:	43bb      	bics	r3, r7
 800a606:	6093      	str	r3, [r2, #8]
 800a608:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800a60c:	2580      	movs	r5, #128	; 0x80
 800a60e:	5960      	ldr	r0, [r4, r5]
 800a610:	2800      	cmp	r0, #0
 800a612:	d036      	beq.n	800a682 <HAL_UART_IRQHandler+0x20e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a614:	4b52      	ldr	r3, [pc, #328]	; (800a760 <HAL_UART_IRQHandler+0x2ec>)
 800a616:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a618:	f7fd fedc 	bl	80083d4 <HAL_DMA_Abort_IT>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d100      	bne.n	800a622 <HAL_UART_IRQHandler+0x1ae>
 800a620:	e761      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a622:	5960      	ldr	r0, [r4, r5]
 800a624:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a626:	4798      	blx	r3
 800a628:	e75d      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a62a:	2520      	movs	r5, #32
 800a62c:	421d      	tst	r5, r3
 800a62e:	d100      	bne.n	800a632 <HAL_UART_IRQHandler+0x1be>
 800a630:	e735      	b.n	800a49e <HAL_UART_IRQHandler+0x2a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a632:	2680      	movs	r6, #128	; 0x80
 800a634:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a636:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a638:	400e      	ands	r6, r1
 800a63a:	4335      	orrs	r5, r6
 800a63c:	d100      	bne.n	800a640 <HAL_UART_IRQHandler+0x1cc>
 800a63e:	e72e      	b.n	800a49e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800a640:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a642:	2b00      	cmp	r3, #0
 800a644:	d115      	bne.n	800a672 <HAL_UART_IRQHandler+0x1fe>
 800a646:	e74e      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a648:	075d      	lsls	r5, r3, #29
 800a64a:	d59d      	bpl.n	800a588 <HAL_UART_IRQHandler+0x114>
 800a64c:	07cd      	lsls	r5, r1, #31
 800a64e:	d59b      	bpl.n	800a588 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a650:	2504      	movs	r5, #4
 800a652:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a654:	358c      	adds	r5, #140	; 0x8c
 800a656:	46a9      	mov	r9, r5
 800a658:	5965      	ldr	r5, [r4, r5]
 800a65a:	46a8      	mov	r8, r5
 800a65c:	2502      	movs	r5, #2
 800a65e:	4647      	mov	r7, r8
 800a660:	432f      	orrs	r7, r5
 800a662:	003d      	movs	r5, r7
 800a664:	464f      	mov	r7, r9
 800a666:	51e5      	str	r5, [r4, r7]
 800a668:	e78e      	b.n	800a588 <HAL_UART_IRQHandler+0x114>
    if (huart->TxISR != NULL)
 800a66a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d100      	bne.n	800a672 <HAL_UART_IRQHandler+0x1fe>
 800a670:	e739      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 800a672:	0020      	movs	r0, r4
 800a674:	4798      	blx	r3
 800a676:	e736      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_WakeupCallback(huart);
 800a678:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a67a:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a67c:	f000 fcca 	bl	800b014 <HAL_UARTEx_WakeupCallback>
    return;
 800a680:	e731      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
            HAL_UART_ErrorCallback(huart);
 800a682:	0020      	movs	r0, r4
 800a684:	f7fb fda6 	bl	80061d4 <HAL_UART_ErrorCallback>
 800a688:	e72d      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a68a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a68e:	2301      	movs	r3, #1
 800a690:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a694:	6821      	ldr	r1, [r4, #0]
 800a696:	680b      	ldr	r3, [r1, #0]
 800a698:	4393      	bics	r3, r2
 800a69a:	600b      	str	r3, [r1, #0]
 800a69c:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a0:	2388      	movs	r3, #136	; 0x88
 800a6a2:	3a20      	subs	r2, #32
 800a6a4:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6a6:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6a8:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800a6aa:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 800a6ac:	f7fb fd90 	bl	80061d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6b0:	e719      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a6b2:	0020      	movs	r0, r4
 800a6b4:	f000 fcb2 	bl	800b01c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800a6b8:	e715      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
        if (huart->RxISR != NULL)
 800a6ba:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d089      	beq.n	800a5d4 <HAL_UART_IRQHandler+0x160>
          huart->RxISR(huart);
 800a6c0:	0020      	movs	r0, r4
 800a6c2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6c4:	6822      	ldr	r2, [r4, #0]
 800a6c6:	e785      	b.n	800a5d4 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6c8:	235c      	movs	r3, #92	; 0x5c
 800a6ca:	225e      	movs	r2, #94	; 0x5e
 800a6cc:	5ae1      	ldrh	r1, [r4, r3]
 800a6ce:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 800a6d0:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6d2:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	d100      	bne.n	800a6da <HAL_UART_IRQHandler+0x266>
 800a6d8:	e705      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6da:	1ac9      	subs	r1, r1, r3
 800a6dc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a6de:	2900      	cmp	r1, #0
 800a6e0:	d100      	bne.n	800a6e4 <HAL_UART_IRQHandler+0x270>
 800a6e2:	e700      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6e4:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6e8:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6ec:	6822      	ldr	r2, [r4, #0]
 800a6ee:	6813      	ldr	r3, [r2, #0]
 800a6f0:	4698      	mov	r8, r3
 800a6f2:	4647      	mov	r7, r8
 800a6f4:	4b1b      	ldr	r3, [pc, #108]	; (800a764 <HAL_UART_IRQHandler+0x2f0>)
 800a6f6:	401f      	ands	r7, r3
 800a6f8:	6017      	str	r7, [r2, #0]
 800a6fa:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6fe:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a702:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a706:	6822      	ldr	r2, [r4, #0]
 800a708:	6893      	ldr	r3, [r2, #8]
 800a70a:	4698      	mov	r8, r3
 800a70c:	4647      	mov	r7, r8
 800a70e:	4b16      	ldr	r3, [pc, #88]	; (800a768 <HAL_UART_IRQHandler+0x2f4>)
 800a710:	401f      	ands	r7, r3
 800a712:	6097      	str	r7, [r2, #8]
 800a714:	f389 8810 	msr	PRIMASK, r9
        huart->RxState = HAL_UART_STATE_READY;
 800a718:	238c      	movs	r3, #140	; 0x8c
 800a71a:	2220      	movs	r2, #32
 800a71c:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a71e:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800a720:	6760      	str	r0, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a722:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a726:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	6813      	ldr	r3, [r2, #0]
 800a72e:	43b3      	bics	r3, r6
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a736:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a738:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a73a:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a73c:	f7ff fe98 	bl	800a470 <HAL_UARTEx_RxEventCallback>
 800a740:	e6d1      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a742:	0020      	movs	r0, r4
 800a744:	f000 fc68 	bl	800b018 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800a748:	e6cd      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
        HAL_UART_ErrorCallback(huart);
 800a74a:	f7fb fd43 	bl	80061d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74e:	51a5      	str	r5, [r4, r6]
 800a750:	e6c9      	b.n	800a4e6 <HAL_UART_IRQHandler+0x72>
 800a752:	46c0      	nop			; (mov r8, r8)
 800a754:	0000080f 	.word	0x0000080f
 800a758:	10000001 	.word	0x10000001
 800a75c:	04000120 	.word	0x04000120
 800a760:	0800a45d 	.word	0x0800a45d
 800a764:	fffffedf 	.word	0xfffffedf
 800a768:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a76c:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a770:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a774:	6820      	ldr	r0, [r4, #0]
 800a776:	4f17      	ldr	r7, [pc, #92]	; (800a7d4 <HAL_UART_IRQHandler+0x360>)
 800a778:	6801      	ldr	r1, [r0, #0]
 800a77a:	4039      	ands	r1, r7
 800a77c:	6001      	str	r1, [r0, #0]
 800a77e:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a782:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a786:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78a:	6820      	ldr	r0, [r4, #0]
 800a78c:	6881      	ldr	r1, [r0, #8]
 800a78e:	43a9      	bics	r1, r5
 800a790:	6081      	str	r1, [r0, #8]
 800a792:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a796:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a79a:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a79e:	6820      	ldr	r0, [r4, #0]
 800a7a0:	6881      	ldr	r1, [r0, #8]
 800a7a2:	4399      	bics	r1, r3
 800a7a4:	6081      	str	r1, [r0, #8]
 800a7a6:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 800a7aa:	334c      	adds	r3, #76	; 0x4c
 800a7ac:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ae:	4643      	mov	r3, r8
 800a7b0:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7b6:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7ba:	6822      	ldr	r2, [r4, #0]
 800a7bc:	6813      	ldr	r3, [r2, #0]
 800a7be:	43b3      	bics	r3, r6
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7c6:	4663      	mov	r3, ip
 800a7c8:	58e0      	ldr	r0, [r4, r3]
 800a7ca:	f7fd fdc5 	bl	8008358 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a7ce:	465b      	mov	r3, fp
 800a7d0:	5ae1      	ldrh	r1, [r4, r3]
 800a7d2:	e6b2      	b.n	800a53a <HAL_UART_IRQHandler+0xc6>
 800a7d4:	fffffeff 	.word	0xfffffeff

0800a7d8 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a7d8:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7da:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800a7dc:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a7de:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7e0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d002      	beq.n	800a7ec <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 800a7e6:	f7ff fdf5 	bl	800a3d4 <HAL_UART_RxHalfCpltCallback>
}
 800a7ea:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7ec:	335b      	adds	r3, #91	; 0x5b
 800a7ee:	5ac1      	ldrh	r1, [r0, r3]
 800a7f0:	0849      	lsrs	r1, r1, #1
 800a7f2:	f7ff fe3d 	bl	800a470 <HAL_UARTEx_RxEventCallback>
 800a7f6:	e7f8      	b.n	800a7ea <UART_DMARxHalfCplt+0x12>

0800a7f8 <UART_DMAReceiveCplt>:
{
 800a7f8:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7fa:	681b      	ldr	r3, [r3, #0]
{
 800a7fc:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	2320      	movs	r3, #32
 800a802:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a804:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a806:	4011      	ands	r1, r2
 800a808:	4213      	tst	r3, r2
 800a80a:	d127      	bne.n	800a85c <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 800a80c:	225e      	movs	r2, #94	; 0x5e
 800a80e:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a810:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a814:	3a5d      	subs	r2, #93	; 0x5d
 800a816:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a81a:	6804      	ldr	r4, [r0, #0]
 800a81c:	4e1c      	ldr	r6, [pc, #112]	; (800a890 <UART_DMAReceiveCplt+0x98>)
 800a81e:	6821      	ldr	r1, [r4, #0]
 800a820:	4031      	ands	r1, r6
 800a822:	6021      	str	r1, [r4, #0]
 800a824:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a828:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a82c:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a830:	6804      	ldr	r4, [r0, #0]
 800a832:	68a1      	ldr	r1, [r4, #8]
 800a834:	4391      	bics	r1, r2
 800a836:	60a1      	str	r1, [r4, #8]
 800a838:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a83c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a840:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a844:	2540      	movs	r5, #64	; 0x40
 800a846:	6801      	ldr	r1, [r0, #0]
 800a848:	688a      	ldr	r2, [r1, #8]
 800a84a:	43aa      	bics	r2, r5
 800a84c:	608a      	str	r2, [r1, #8]
 800a84e:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 800a852:	228c      	movs	r2, #140	; 0x8c
 800a854:	5083      	str	r3, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a856:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d00c      	beq.n	800a876 <UART_DMAReceiveCplt+0x7e>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a85c:	2300      	movs	r3, #0
 800a85e:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a860:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a862:	2b01      	cmp	r3, #1
 800a864:	d002      	beq.n	800a86c <UART_DMAReceiveCplt+0x74>
    HAL_UART_RxCpltCallback(huart);
 800a866:	f7fb fe11 	bl	800648c <HAL_UART_RxCpltCallback>
}
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a86c:	335b      	adds	r3, #91	; 0x5b
 800a86e:	5ac1      	ldrh	r1, [r0, r3]
 800a870:	f7ff fdfe 	bl	800a470 <HAL_UARTEx_RxEventCallback>
 800a874:	e7f9      	b.n	800a86a <UART_DMAReceiveCplt+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a876:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a87a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a87e:	2410      	movs	r4, #16
 800a880:	6802      	ldr	r2, [r0, #0]
 800a882:	6813      	ldr	r3, [r2, #0]
 800a884:	43a3      	bics	r3, r4
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	f381 8810 	msr	PRIMASK, r1
}
 800a88c:	e7e6      	b.n	800a85c <UART_DMAReceiveCplt+0x64>
 800a88e:	46c0      	nop			; (mov r8, r8)
 800a890:	fffffeff 	.word	0xfffffeff

0800a894 <UART_SetConfig>:
{
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a898:	6925      	ldr	r5, [r4, #16]
 800a89a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a89c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a89e:	432a      	orrs	r2, r5
 800a8a0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8a2:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8a4:	69c0      	ldr	r0, [r0, #28]
 800a8a6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8a8:	4d4d      	ldr	r5, [pc, #308]	; (800a9e0 <UART_SetConfig+0x14c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8aa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8ac:	4029      	ands	r1, r5
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	494b      	ldr	r1, [pc, #300]	; (800a9e4 <UART_SetConfig+0x150>)
    tmpreg |= huart->Init.OneBitSampling;
 800a8b6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8b8:	400a      	ands	r2, r1
 800a8ba:	68e1      	ldr	r1, [r4, #12]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a8c0:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8c2:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800a8c4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8c6:	4d48      	ldr	r5, [pc, #288]	; (800a9e8 <UART_SetConfig+0x154>)
 800a8c8:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8ca:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8d4:	43aa      	bics	r2, r5
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8da:	4a44      	ldr	r2, [pc, #272]	; (800a9ec <UART_SetConfig+0x158>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d035      	beq.n	800a94c <UART_SetConfig+0xb8>
 800a8e0:	4a43      	ldr	r2, [pc, #268]	; (800a9f0 <UART_SetConfig+0x15c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d00c      	beq.n	800a900 <UART_SetConfig+0x6c>
 800a8e6:	4a43      	ldr	r2, [pc, #268]	; (800a9f4 <UART_SetConfig+0x160>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d036      	beq.n	800a95a <UART_SetConfig+0xc6>
 800a8ec:	4a42      	ldr	r2, [pc, #264]	; (800a9f8 <UART_SetConfig+0x164>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d033      	beq.n	800a95a <UART_SetConfig+0xc6>
    switch (clocksource)
 800a8f2:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 800a8f4:	4b41      	ldr	r3, [pc, #260]	; (800a9fc <UART_SetConfig+0x168>)
 800a8f6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800a8fc:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a900:	4b3f      	ldr	r3, [pc, #252]	; (800aa00 <UART_SetConfig+0x16c>)
 800a902:	4a40      	ldr	r2, [pc, #256]	; (800aa04 <UART_SetConfig+0x170>)
 800a904:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800a906:	230c      	movs	r3, #12
 800a908:	402b      	ands	r3, r5
 800a90a:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a90c:	2380      	movs	r3, #128	; 0x80
 800a90e:	021b      	lsls	r3, r3, #8
 800a910:	4298      	cmp	r0, r3
 800a912:	d02f      	beq.n	800a974 <UART_SetConfig+0xe0>
    switch (clocksource)
 800a914:	2a04      	cmp	r2, #4
 800a916:	d056      	beq.n	800a9c6 <UART_SetConfig+0x132>
 800a918:	d851      	bhi.n	800a9be <UART_SetConfig+0x12a>
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	d021      	beq.n	800a962 <UART_SetConfig+0xce>
 800a91e:	2a02      	cmp	r2, #2
 800a920:	d1e7      	bne.n	800a8f2 <UART_SetConfig+0x5e>
        pclk = (uint32_t) HSI_VALUE;
 800a922:	4839      	ldr	r0, [pc, #228]	; (800aa08 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a924:	4b39      	ldr	r3, [pc, #228]	; (800aa0c <UART_SetConfig+0x178>)
 800a926:	0049      	lsls	r1, r1, #1
 800a928:	5ac9      	ldrh	r1, [r1, r3]
 800a92a:	f7f5 fc09 	bl	8000140 <__udivsi3>
 800a92e:	6865      	ldr	r5, [r4, #4]
 800a930:	086b      	lsrs	r3, r5, #1
 800a932:	18c0      	adds	r0, r0, r3
 800a934:	0029      	movs	r1, r5
 800a936:	f7f5 fc03 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a93a:	0002      	movs	r2, r0
 800a93c:	4b34      	ldr	r3, [pc, #208]	; (800aa10 <UART_SetConfig+0x17c>)
 800a93e:	3a10      	subs	r2, #16
 800a940:	429a      	cmp	r2, r3
 800a942:	d8d6      	bhi.n	800a8f2 <UART_SetConfig+0x5e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	60d8      	str	r0, [r3, #12]
 800a948:	2000      	movs	r0, #0
 800a94a:	e7d3      	b.n	800a8f4 <UART_SetConfig+0x60>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a94c:	4b2c      	ldr	r3, [pc, #176]	; (800aa00 <UART_SetConfig+0x16c>)
 800a94e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a950:	2303      	movs	r3, #3
 800a952:	4013      	ands	r3, r2
 800a954:	3b01      	subs	r3, #1
 800a956:	2b02      	cmp	r3, #2
 800a958:	d909      	bls.n	800a96e <UART_SetConfig+0xda>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a95a:	2380      	movs	r3, #128	; 0x80
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	4298      	cmp	r0, r3
 800a960:	d03a      	beq.n	800a9d8 <UART_SetConfig+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a962:	f7fe fecd 	bl	8009700 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800a966:	2800      	cmp	r0, #0
 800a968:	d0ee      	beq.n	800a948 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a96a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a96c:	e7da      	b.n	800a924 <UART_SetConfig+0x90>
 800a96e:	4a29      	ldr	r2, [pc, #164]	; (800aa14 <UART_SetConfig+0x180>)
 800a970:	5cd2      	ldrb	r2, [r2, r3]
 800a972:	e7cb      	b.n	800a90c <UART_SetConfig+0x78>
    switch (clocksource)
 800a974:	2a04      	cmp	r2, #4
 800a976:	d029      	beq.n	800a9cc <UART_SetConfig+0x138>
 800a978:	d81e      	bhi.n	800a9b8 <UART_SetConfig+0x124>
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	d02c      	beq.n	800a9d8 <UART_SetConfig+0x144>
 800a97e:	2a02      	cmp	r2, #2
 800a980:	d1b7      	bne.n	800a8f2 <UART_SetConfig+0x5e>
 800a982:	4821      	ldr	r0, [pc, #132]	; (800aa08 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a984:	4b21      	ldr	r3, [pc, #132]	; (800aa0c <UART_SetConfig+0x178>)
 800a986:	0049      	lsls	r1, r1, #1
 800a988:	5ac9      	ldrh	r1, [r1, r3]
 800a98a:	f7f5 fbd9 	bl	8000140 <__udivsi3>
 800a98e:	6865      	ldr	r5, [r4, #4]
 800a990:	0040      	lsls	r0, r0, #1
 800a992:	086b      	lsrs	r3, r5, #1
 800a994:	18c0      	adds	r0, r0, r3
 800a996:	0029      	movs	r1, r5
 800a998:	f7f5 fbd2 	bl	8000140 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a99c:	0002      	movs	r2, r0
 800a99e:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <UART_SetConfig+0x17c>)
 800a9a0:	3a10      	subs	r2, #16
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d8a5      	bhi.n	800a8f2 <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9a6:	4b1c      	ldr	r3, [pc, #112]	; (800aa18 <UART_SetConfig+0x184>)
        huart->Instance->BRR = brrtemp;
 800a9a8:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a9aa:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a9ac:	0700      	lsls	r0, r0, #28
 800a9ae:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800a9b0:	4303      	orrs	r3, r0
 800a9b2:	60d3      	str	r3, [r2, #12]
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	e79d      	b.n	800a8f4 <UART_SetConfig+0x60>
    switch (clocksource)
 800a9b8:	2a08      	cmp	r2, #8
 800a9ba:	d0e3      	beq.n	800a984 <UART_SetConfig+0xf0>
 800a9bc:	e799      	b.n	800a8f2 <UART_SetConfig+0x5e>
    switch (clocksource)
 800a9be:	0018      	movs	r0, r3
 800a9c0:	2a08      	cmp	r2, #8
 800a9c2:	d0af      	beq.n	800a924 <UART_SetConfig+0x90>
 800a9c4:	e795      	b.n	800a8f2 <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 800a9c6:	f7fe fd89 	bl	80094dc <HAL_RCC_GetSysClockFreq>
        break;
 800a9ca:	e7cc      	b.n	800a966 <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetSysClockFreq();
 800a9cc:	f7fe fd86 	bl	80094dc <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d0b9      	beq.n	800a948 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a9d6:	e7d5      	b.n	800a984 <UART_SetConfig+0xf0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9d8:	f7fe fe92 	bl	8009700 <HAL_RCC_GetPCLK1Freq>
        break;
 800a9dc:	e7f8      	b.n	800a9d0 <UART_SetConfig+0x13c>
 800a9de:	46c0      	nop			; (mov r8, r8)
 800a9e0:	cfff69f3 	.word	0xcfff69f3
 800a9e4:	ffffcfff 	.word	0xffffcfff
 800a9e8:	11fff4ff 	.word	0x11fff4ff
 800a9ec:	40013800 	.word	0x40013800
 800a9f0:	40004400 	.word	0x40004400
 800a9f4:	40004800 	.word	0x40004800
 800a9f8:	40004c00 	.word	0x40004c00
 800a9fc:	00010001 	.word	0x00010001
 800aa00:	40021000 	.word	0x40021000
 800aa04:	08013684 	.word	0x08013684
 800aa08:	00f42400 	.word	0x00f42400
 800aa0c:	08013694 	.word	0x08013694
 800aa10:	0000ffef 	.word	0x0000ffef
 800aa14:	08013680 	.word	0x08013680
 800aa18:	0000fff0 	.word	0x0000fff0

0800aa1c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800aa1e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa20:	07da      	lsls	r2, r3, #31
 800aa22:	d506      	bpl.n	800aa32 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa24:	6801      	ldr	r1, [r0, #0]
 800aa26:	4c28      	ldr	r4, [pc, #160]	; (800aac8 <UART_AdvFeatureConfig+0xac>)
 800aa28:	684a      	ldr	r2, [r1, #4]
 800aa2a:	4022      	ands	r2, r4
 800aa2c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800aa2e:	4322      	orrs	r2, r4
 800aa30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa32:	079a      	lsls	r2, r3, #30
 800aa34:	d506      	bpl.n	800aa44 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa36:	6801      	ldr	r1, [r0, #0]
 800aa38:	4c24      	ldr	r4, [pc, #144]	; (800aacc <UART_AdvFeatureConfig+0xb0>)
 800aa3a:	684a      	ldr	r2, [r1, #4]
 800aa3c:	4022      	ands	r2, r4
 800aa3e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800aa40:	4322      	orrs	r2, r4
 800aa42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa44:	075a      	lsls	r2, r3, #29
 800aa46:	d506      	bpl.n	800aa56 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa48:	6801      	ldr	r1, [r0, #0]
 800aa4a:	4c21      	ldr	r4, [pc, #132]	; (800aad0 <UART_AdvFeatureConfig+0xb4>)
 800aa4c:	684a      	ldr	r2, [r1, #4]
 800aa4e:	4022      	ands	r2, r4
 800aa50:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800aa52:	4322      	orrs	r2, r4
 800aa54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa56:	071a      	lsls	r2, r3, #28
 800aa58:	d506      	bpl.n	800aa68 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa5a:	6801      	ldr	r1, [r0, #0]
 800aa5c:	4c1d      	ldr	r4, [pc, #116]	; (800aad4 <UART_AdvFeatureConfig+0xb8>)
 800aa5e:	684a      	ldr	r2, [r1, #4]
 800aa60:	4022      	ands	r2, r4
 800aa62:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800aa64:	4322      	orrs	r2, r4
 800aa66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa68:	06da      	lsls	r2, r3, #27
 800aa6a:	d506      	bpl.n	800aa7a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa6c:	6801      	ldr	r1, [r0, #0]
 800aa6e:	4c1a      	ldr	r4, [pc, #104]	; (800aad8 <UART_AdvFeatureConfig+0xbc>)
 800aa70:	688a      	ldr	r2, [r1, #8]
 800aa72:	4022      	ands	r2, r4
 800aa74:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800aa76:	4322      	orrs	r2, r4
 800aa78:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa7a:	069a      	lsls	r2, r3, #26
 800aa7c:	d506      	bpl.n	800aa8c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa7e:	6801      	ldr	r1, [r0, #0]
 800aa80:	4c16      	ldr	r4, [pc, #88]	; (800aadc <UART_AdvFeatureConfig+0xc0>)
 800aa82:	688a      	ldr	r2, [r1, #8]
 800aa84:	4022      	ands	r2, r4
 800aa86:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800aa88:	4322      	orrs	r2, r4
 800aa8a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa8c:	065a      	lsls	r2, r3, #25
 800aa8e:	d50a      	bpl.n	800aaa6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa90:	6801      	ldr	r1, [r0, #0]
 800aa92:	4d13      	ldr	r5, [pc, #76]	; (800aae0 <UART_AdvFeatureConfig+0xc4>)
 800aa94:	684a      	ldr	r2, [r1, #4]
 800aa96:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800aa98:	402a      	ands	r2, r5
 800aa9a:	4322      	orrs	r2, r4
 800aa9c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa9e:	2280      	movs	r2, #128	; 0x80
 800aaa0:	0352      	lsls	r2, r2, #13
 800aaa2:	4294      	cmp	r4, r2
 800aaa4:	d009      	beq.n	800aaba <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaa6:	061b      	lsls	r3, r3, #24
 800aaa8:	d506      	bpl.n	800aab8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaaa:	6802      	ldr	r2, [r0, #0]
 800aaac:	490d      	ldr	r1, [pc, #52]	; (800aae4 <UART_AdvFeatureConfig+0xc8>)
 800aaae:	6853      	ldr	r3, [r2, #4]
 800aab0:	400b      	ands	r3, r1
 800aab2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800aab4:	430b      	orrs	r3, r1
 800aab6:	6053      	str	r3, [r2, #4]
}
 800aab8:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aaba:	684a      	ldr	r2, [r1, #4]
 800aabc:	4c0a      	ldr	r4, [pc, #40]	; (800aae8 <UART_AdvFeatureConfig+0xcc>)
 800aabe:	4022      	ands	r2, r4
 800aac0:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800aac2:	4322      	orrs	r2, r4
 800aac4:	604a      	str	r2, [r1, #4]
 800aac6:	e7ee      	b.n	800aaa6 <UART_AdvFeatureConfig+0x8a>
 800aac8:	fffdffff 	.word	0xfffdffff
 800aacc:	fffeffff 	.word	0xfffeffff
 800aad0:	fffbffff 	.word	0xfffbffff
 800aad4:	ffff7fff 	.word	0xffff7fff
 800aad8:	ffffefff 	.word	0xffffefff
 800aadc:	ffffdfff 	.word	0xffffdfff
 800aae0:	ffefffff 	.word	0xffefffff
 800aae4:	fff7ffff 	.word	0xfff7ffff
 800aae8:	ff9fffff 	.word	0xff9fffff

0800aaec <UART_WaitOnFlagUntilTimeout>:
{
 800aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaee:	4657      	mov	r7, sl
 800aaf0:	464e      	mov	r6, r9
 800aaf2:	4645      	mov	r5, r8
 800aaf4:	46de      	mov	lr, fp
 800aaf6:	b5e0      	push	{r5, r6, r7, lr}
 800aaf8:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aafa:	2204      	movs	r2, #4
 800aafc:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aafe:	2280      	movs	r2, #128	; 0x80
 800ab00:	0112      	lsls	r2, r2, #4
{
 800ab02:	4699      	mov	r9, r3
 800ab04:	4680      	mov	r8, r0
 800ab06:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab08:	4693      	mov	fp, r2
{
 800ab0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab0c:	6803      	ldr	r3, [r0, #0]
 800ab0e:	e001      	b.n	800ab14 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800ab10:	1c7a      	adds	r2, r7, #1
 800ab12:	d10d      	bne.n	800ab30 <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab14:	69dc      	ldr	r4, [r3, #28]
 800ab16:	402c      	ands	r4, r5
 800ab18:	1b64      	subs	r4, r4, r5
 800ab1a:	4262      	negs	r2, r4
 800ab1c:	4154      	adcs	r4, r2
 800ab1e:	42b4      	cmp	r4, r6
 800ab20:	d0f6      	beq.n	800ab10 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800ab22:	2000      	movs	r0, #0
}
 800ab24:	bcf0      	pop	{r4, r5, r6, r7}
 800ab26:	46bb      	mov	fp, r7
 800ab28:	46b2      	mov	sl, r6
 800ab2a:	46a9      	mov	r9, r5
 800ab2c:	46a0      	mov	r8, r4
 800ab2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab30:	f7fc ff5a 	bl	80079e8 <HAL_GetTick>
 800ab34:	464b      	mov	r3, r9
 800ab36:	1ac0      	subs	r0, r0, r3
 800ab38:	42b8      	cmp	r0, r7
 800ab3a:	d831      	bhi.n	800aba0 <UART_WaitOnFlagUntilTimeout+0xb4>
 800ab3c:	2f00      	cmp	r7, #0
 800ab3e:	d02f      	beq.n	800aba0 <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab40:	4643      	mov	r3, r8
 800ab42:	4651      	mov	r1, sl
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	4211      	tst	r1, r2
 800ab4a:	d0e3      	beq.n	800ab14 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab4c:	4659      	mov	r1, fp
 800ab4e:	69da      	ldr	r2, [r3, #28]
 800ab50:	420a      	tst	r2, r1
 800ab52:	d0df      	beq.n	800ab14 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab54:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab56:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab60:	4643      	mov	r3, r8
 800ab62:	6819      	ldr	r1, [r3, #0]
 800ab64:	4c1c      	ldr	r4, [pc, #112]	; (800abd8 <UART_WaitOnFlagUntilTimeout+0xec>)
 800ab66:	680b      	ldr	r3, [r1, #0]
 800ab68:	4023      	ands	r3, r4
 800ab6a:	600b      	str	r3, [r1, #0]
 800ab6c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab70:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab74:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab78:	4643      	mov	r3, r8
 800ab7a:	6819      	ldr	r1, [r3, #0]
 800ab7c:	688b      	ldr	r3, [r1, #8]
 800ab7e:	4393      	bics	r3, r2
 800ab80:	608b      	str	r3, [r1, #8]
 800ab82:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800ab86:	2320      	movs	r3, #32
 800ab88:	4641      	mov	r1, r8
 800ab8a:	3287      	adds	r2, #135	; 0x87
 800ab8c:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800ab8e:	3204      	adds	r2, #4
 800ab90:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab92:	3204      	adds	r2, #4
 800ab94:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 800ab96:	2200      	movs	r2, #0
 800ab98:	3364      	adds	r3, #100	; 0x64
          return HAL_TIMEOUT;
 800ab9a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800ab9c:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 800ab9e:	e7c1      	b.n	800ab24 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aba0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aba4:	2201      	movs	r2, #1
 800aba6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800abaa:	4643      	mov	r3, r8
 800abac:	6819      	ldr	r1, [r3, #0]
 800abae:	4c0a      	ldr	r4, [pc, #40]	; (800abd8 <UART_WaitOnFlagUntilTimeout+0xec>)
 800abb0:	680b      	ldr	r3, [r1, #0]
 800abb2:	4023      	ands	r3, r4
 800abb4:	600b      	str	r3, [r1, #0]
 800abb6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abbe:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abc2:	4643      	mov	r3, r8
 800abc4:	6819      	ldr	r1, [r3, #0]
 800abc6:	688b      	ldr	r3, [r1, #8]
 800abc8:	4393      	bics	r3, r2
 800abca:	608b      	str	r3, [r1, #8]
 800abcc:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800abd0:	2320      	movs	r3, #32
 800abd2:	4641      	mov	r1, r8
 800abd4:	3287      	adds	r2, #135	; 0x87
 800abd6:	e7db      	b.n	800ab90 <UART_WaitOnFlagUntilTimeout+0xa4>
 800abd8:	fffffe5f 	.word	0xfffffe5f

0800abdc <HAL_UART_Transmit>:
{
 800abdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abde:	4647      	mov	r7, r8
 800abe0:	46ce      	mov	lr, r9
 800abe2:	b580      	push	{r7, lr}
 800abe4:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800abe6:	2388      	movs	r3, #136	; 0x88
 800abe8:	58c3      	ldr	r3, [r0, r3]
{
 800abea:	0004      	movs	r4, r0
 800abec:	000d      	movs	r5, r1
 800abee:	0016      	movs	r6, r2
 800abf0:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	d14d      	bne.n	800ac92 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 800abf6:	2900      	cmp	r1, #0
 800abf8:	d045      	beq.n	800ac86 <HAL_UART_Transmit+0xaa>
 800abfa:	2a00      	cmp	r2, #0
 800abfc:	d043      	beq.n	800ac86 <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abfe:	2380      	movs	r3, #128	; 0x80
 800ac00:	6882      	ldr	r2, [r0, #8]
 800ac02:	015b      	lsls	r3, r3, #5
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d104      	bne.n	800ac12 <HAL_UART_Transmit+0x36>
 800ac08:	6903      	ldr	r3, [r0, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800ac0e:	07cb      	lsls	r3, r1, #31
 800ac10:	d439      	bmi.n	800ac86 <HAL_UART_Transmit+0xaa>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac12:	2390      	movs	r3, #144	; 0x90
 800ac14:	2200      	movs	r2, #0
 800ac16:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac18:	3b08      	subs	r3, #8
 800ac1a:	3221      	adds	r2, #33	; 0x21
 800ac1c:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800ac1e:	f7fc fee3 	bl	80079e8 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800ac22:	2354      	movs	r3, #84	; 0x54
 800ac24:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800ac26:	3302      	adds	r3, #2
      pdata16bits = NULL;
 800ac28:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 800ac2a:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac2c:	2380      	movs	r3, #128	; 0x80
 800ac2e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800ac30:	4680      	mov	r8, r0
      pdata16bits = NULL;
 800ac32:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac34:	015b      	lsls	r3, r3, #5
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d03c      	beq.n	800acb4 <HAL_UART_Transmit+0xd8>
    while (huart->TxXferCount > 0U)
 800ac3a:	2356      	movs	r3, #86	; 0x56
 800ac3c:	5ae3      	ldrh	r3, [r4, r3]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d02b      	beq.n	800ac9a <HAL_UART_Transmit+0xbe>
      huart->TxXferCount--;
 800ac42:	2656      	movs	r6, #86	; 0x56
 800ac44:	e00a      	b.n	800ac5c <HAL_UART_Transmit+0x80>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac46:	782a      	ldrb	r2, [r5, #0]
 800ac48:	6823      	ldr	r3, [r4, #0]
        pdata8bits++;
 800ac4a:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac4c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800ac4e:	5ba2      	ldrh	r2, [r4, r6]
 800ac50:	3a01      	subs	r2, #1
 800ac52:	b292      	uxth	r2, r2
 800ac54:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 800ac56:	5ba3      	ldrh	r3, [r4, r6]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d01e      	beq.n	800ac9a <HAL_UART_Transmit+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac5c:	4643      	mov	r3, r8
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2180      	movs	r1, #128	; 0x80
 800ac62:	0020      	movs	r0, r4
 800ac64:	9700      	str	r7, [sp, #0]
 800ac66:	f7ff ff41 	bl	800aaec <UART_WaitOnFlagUntilTimeout>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d113      	bne.n	800ac96 <HAL_UART_Transmit+0xba>
      if (pdata8bits == NULL)
 800ac6e:	2d00      	cmp	r5, #0
 800ac70:	d1e9      	bne.n	800ac46 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac72:	464b      	mov	r3, r9
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	6822      	ldr	r2, [r4, #0]
 800ac78:	05db      	lsls	r3, r3, #23
 800ac7a:	0ddb      	lsrs	r3, r3, #23
 800ac7c:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800ac7e:	2302      	movs	r3, #2
 800ac80:	469c      	mov	ip, r3
 800ac82:	44e1      	add	r9, ip
 800ac84:	e7e3      	b.n	800ac4e <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 800ac86:	2001      	movs	r0, #1
}
 800ac88:	b003      	add	sp, #12
 800ac8a:	bcc0      	pop	{r6, r7}
 800ac8c:	46b9      	mov	r9, r7
 800ac8e:	46b0      	mov	r8, r6
 800ac90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800ac92:	2002      	movs	r0, #2
 800ac94:	e7f8      	b.n	800ac88 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 800ac96:	2003      	movs	r0, #3
 800ac98:	e7f6      	b.n	800ac88 <HAL_UART_Transmit+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac9a:	4643      	mov	r3, r8
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2140      	movs	r1, #64	; 0x40
 800aca0:	0020      	movs	r0, r4
 800aca2:	9700      	str	r7, [sp, #0]
 800aca4:	f7ff ff22 	bl	800aaec <UART_WaitOnFlagUntilTimeout>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1f4      	bne.n	800ac96 <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 800acac:	2388      	movs	r3, #136	; 0x88
 800acae:	2220      	movs	r2, #32
 800acb0:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800acb2:	e7e9      	b.n	800ac88 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acb4:	6923      	ldr	r3, [r4, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1bf      	bne.n	800ac3a <HAL_UART_Transmit+0x5e>
 800acba:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800acbc:	2500      	movs	r5, #0
 800acbe:	e7bc      	b.n	800ac3a <HAL_UART_Transmit+0x5e>

0800acc0 <HAL_UART_Receive>:
{
 800acc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acc2:	464f      	mov	r7, r9
 800acc4:	4646      	mov	r6, r8
 800acc6:	46d6      	mov	lr, sl
 800acc8:	b5c0      	push	{r6, r7, lr}
 800acca:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800accc:	238c      	movs	r3, #140	; 0x8c
 800acce:	58c3      	ldr	r3, [r0, r3]
{
 800acd0:	0004      	movs	r4, r0
 800acd2:	000d      	movs	r5, r1
 800acd4:	0016      	movs	r6, r2
 800acd6:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800acd8:	2b20      	cmp	r3, #32
 800acda:	d15a      	bne.n	800ad92 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 800acdc:	2900      	cmp	r1, #0
 800acde:	d051      	beq.n	800ad84 <HAL_UART_Receive+0xc4>
 800ace0:	2a00      	cmp	r2, #0
 800ace2:	d04f      	beq.n	800ad84 <HAL_UART_Receive+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ace4:	2380      	movs	r3, #128	; 0x80
 800ace6:	6882      	ldr	r2, [r0, #8]
 800ace8:	015b      	lsls	r3, r3, #5
 800acea:	429a      	cmp	r2, r3
 800acec:	d104      	bne.n	800acf8 <HAL_UART_Receive+0x38>
 800acee:	6903      	ldr	r3, [r0, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <HAL_UART_Receive+0x38>
      if ((((uint32_t)pData) & 1U) != 0U)
 800acf4:	07cb      	lsls	r3, r1, #31
 800acf6:	d445      	bmi.n	800ad84 <HAL_UART_Receive+0xc4>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf8:	2300      	movs	r3, #0
 800acfa:	2290      	movs	r2, #144	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acfc:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acfe:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad00:	3a04      	subs	r2, #4
 800ad02:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad04:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 800ad06:	f7fc fe6f 	bl	80079e8 <HAL_GetTick>
    huart->RxXferSize  = Size;
 800ad0a:	235c      	movs	r3, #92	; 0x5c
    UART_MASK_COMPUTATION(huart);
 800ad0c:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 800ad0e:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 800ad10:	3302      	adds	r3, #2
 800ad12:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 800ad14:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800ad16:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 800ad18:	0152      	lsls	r2, r2, #5
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d051      	beq.n	800adc2 <HAL_UART_Receive+0x102>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d139      	bne.n	800ad96 <HAL_UART_Receive+0xd6>
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	425a      	negs	r2, r3
 800ad26:	4153      	adcs	r3, r2
 800ad28:	01db      	lsls	r3, r3, #7
 800ad2a:	4698      	mov	r8, r3
 800ad2c:	237f      	movs	r3, #127	; 0x7f
 800ad2e:	469c      	mov	ip, r3
 800ad30:	44e0      	add	r8, ip
 800ad32:	2360      	movs	r3, #96	; 0x60
 800ad34:	4642      	mov	r2, r8
 800ad36:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 800ad3c:	235e      	movs	r3, #94	; 0x5e
 800ad3e:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 800ad40:	265e      	movs	r6, #94	; 0x5e
    while (huart->RxXferCount > 0U)
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d109      	bne.n	800ad5a <HAL_UART_Receive+0x9a>
 800ad46:	e035      	b.n	800adb4 <HAL_UART_Receive+0xf4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ad48:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800ad4a:	3501      	adds	r5, #1
      huart->RxXferCount--;
 800ad4c:	5ba2      	ldrh	r2, [r4, r6]
 800ad4e:	3a01      	subs	r2, #1
 800ad50:	b292      	uxth	r2, r2
 800ad52:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 800ad54:	5ba3      	ldrh	r3, [r4, r6]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d02c      	beq.n	800adb4 <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ad5a:	464b      	mov	r3, r9
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2120      	movs	r1, #32
 800ad60:	0020      	movs	r0, r4
 800ad62:	9700      	str	r7, [sp, #0]
 800ad64:	f7ff fec2 	bl	800aaec <UART_WaitOnFlagUntilTimeout>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d128      	bne.n	800adbe <HAL_UART_Receive+0xfe>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ad6c:	4642      	mov	r2, r8
 800ad6e:	6823      	ldr	r3, [r4, #0]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad72:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 800ad74:	2d00      	cmp	r5, #0
 800ad76:	d1e7      	bne.n	800ad48 <HAL_UART_Receive+0x88>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ad78:	4652      	mov	r2, sl
 800ad7a:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	469c      	mov	ip, r3
 800ad80:	44e2      	add	sl, ip
 800ad82:	e7e3      	b.n	800ad4c <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 800ad84:	2001      	movs	r0, #1
}
 800ad86:	b002      	add	sp, #8
 800ad88:	bce0      	pop	{r5, r6, r7}
 800ad8a:	46ba      	mov	sl, r7
 800ad8c:	46b1      	mov	r9, r6
 800ad8e:	46a8      	mov	r8, r5
 800ad90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800ad92:	2002      	movs	r0, #2
 800ad94:	e7f7      	b.n	800ad86 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800ad96:	2280      	movs	r2, #128	; 0x80
 800ad98:	2100      	movs	r1, #0
 800ad9a:	0552      	lsls	r2, r2, #21
 800ad9c:	4688      	mov	r8, r1
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d1c7      	bne.n	800ad32 <HAL_UART_Receive+0x72>
 800ada2:	6923      	ldr	r3, [r4, #16]
 800ada4:	425a      	negs	r2, r3
 800ada6:	4153      	adcs	r3, r2
 800ada8:	019b      	lsls	r3, r3, #6
 800adaa:	4698      	mov	r8, r3
 800adac:	233f      	movs	r3, #63	; 0x3f
 800adae:	469c      	mov	ip, r3
 800adb0:	44e0      	add	r8, ip
 800adb2:	e7be      	b.n	800ad32 <HAL_UART_Receive+0x72>
    huart->RxState = HAL_UART_STATE_READY;
 800adb4:	238c      	movs	r3, #140	; 0x8c
 800adb6:	2220      	movs	r2, #32
    return HAL_OK;
 800adb8:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 800adba:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800adbc:	e7e3      	b.n	800ad86 <HAL_UART_Receive+0xc6>
        return HAL_TIMEOUT;
 800adbe:	2003      	movs	r0, #3
 800adc0:	e7e1      	b.n	800ad86 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d106      	bne.n	800add6 <HAL_UART_Receive+0x116>
 800adc8:	2260      	movs	r2, #96	; 0x60
 800adca:	4b07      	ldr	r3, [pc, #28]	; (800ade8 <HAL_UART_Receive+0x128>)
 800adcc:	46aa      	mov	sl, r5
 800adce:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 800add0:	2500      	movs	r5, #0
 800add2:	52a3      	strh	r3, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800add4:	e7b2      	b.n	800ad3c <HAL_UART_Receive+0x7c>
    UART_MASK_COMPUTATION(huart);
 800add6:	2360      	movs	r3, #96	; 0x60
 800add8:	22ff      	movs	r2, #255	; 0xff
 800adda:	52e2      	strh	r2, [r4, r3]
 800addc:	339f      	adds	r3, #159	; 0x9f
 800adde:	4698      	mov	r8, r3
      pdata16bits = NULL;
 800ade0:	2300      	movs	r3, #0
 800ade2:	469a      	mov	sl, r3
 800ade4:	e7aa      	b.n	800ad3c <HAL_UART_Receive+0x7c>
 800ade6:	46c0      	nop			; (mov r8, r8)
 800ade8:	000001ff 	.word	0x000001ff

0800adec <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adec:	2200      	movs	r2, #0
 800adee:	2390      	movs	r3, #144	; 0x90
{
 800adf0:	b530      	push	{r4, r5, lr}
 800adf2:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf4:	50c2      	str	r2, [r0, r3]
{
 800adf6:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 800adf8:	f7fc fdf6 	bl	80079e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adfc:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800adfe:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae00:	6811      	ldr	r1, [r2, #0]
 800ae02:	0709      	lsls	r1, r1, #28
 800ae04:	d40f      	bmi.n	800ae26 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae06:	6812      	ldr	r2, [r2, #0]
 800ae08:	0752      	lsls	r2, r2, #29
 800ae0a:	d41b      	bmi.n	800ae44 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800ae0c:	2320      	movs	r3, #32
 800ae0e:	2288      	movs	r2, #136	; 0x88
 800ae10:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800ae12:	3204      	adds	r2, #4
 800ae14:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae16:	2300      	movs	r3, #0
  return HAL_OK;
 800ae18:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800ae1a:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae1c:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae1e:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800ae20:	54a3      	strb	r3, [r4, r2]
}
 800ae22:	b003      	add	sp, #12
 800ae24:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae26:	2180      	movs	r1, #128	; 0x80
 800ae28:	4b0d      	ldr	r3, [pc, #52]	; (800ae60 <UART_CheckIdleState+0x74>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	0389      	lsls	r1, r1, #14
 800ae30:	0003      	movs	r3, r0
 800ae32:	0020      	movs	r0, r4
 800ae34:	f7ff fe5a 	bl	800aaec <UART_WaitOnFlagUntilTimeout>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	d10e      	bne.n	800ae5a <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ae3c:	6822      	ldr	r2, [r4, #0]
 800ae3e:	6812      	ldr	r2, [r2, #0]
 800ae40:	0752      	lsls	r2, r2, #29
 800ae42:	d5e3      	bpl.n	800ae0c <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae44:	2180      	movs	r1, #128	; 0x80
 800ae46:	4b06      	ldr	r3, [pc, #24]	; (800ae60 <UART_CheckIdleState+0x74>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	0020      	movs	r0, r4
 800ae4e:	002b      	movs	r3, r5
 800ae50:	03c9      	lsls	r1, r1, #15
 800ae52:	f7ff fe4b 	bl	800aaec <UART_WaitOnFlagUntilTimeout>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d0d8      	beq.n	800ae0c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 800ae5a:	2003      	movs	r0, #3
 800ae5c:	e7e1      	b.n	800ae22 <UART_CheckIdleState+0x36>
 800ae5e:	46c0      	nop			; (mov r8, r8)
 800ae60:	01ffffff 	.word	0x01ffffff

0800ae64 <HAL_UART_Init>:
{
 800ae64:	b510      	push	{r4, lr}
 800ae66:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800ae68:	d028      	beq.n	800aebc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800ae6a:	2388      	movs	r3, #136	; 0x88
 800ae6c:	58c3      	ldr	r3, [r0, r3]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d026      	beq.n	800aec0 <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 800ae72:	2388      	movs	r3, #136	; 0x88
 800ae74:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800ae76:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800ae78:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800ae7a:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae7c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800ae7e:	6813      	ldr	r3, [r2, #0]
 800ae80:	438b      	bics	r3, r1
 800ae82:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae84:	f7ff fd06 	bl	800a894 <UART_SetConfig>
 800ae88:	2801      	cmp	r0, #1
 800ae8a:	d017      	beq.n	800aebc <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d110      	bne.n	800aeb4 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	490d      	ldr	r1, [pc, #52]	; (800aecc <HAL_UART_Init+0x68>)
 800ae96:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800ae98:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae9a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae9c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aea0:	689a      	ldr	r2, [r3, #8]
 800aea2:	438a      	bics	r2, r1
 800aea4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	3929      	subs	r1, #41	; 0x29
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800aeae:	f7ff ff9d 	bl	800adec <UART_CheckIdleState>
}
 800aeb2:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800aeb4:	0020      	movs	r0, r4
 800aeb6:	f7ff fdb1 	bl	800aa1c <UART_AdvFeatureConfig>
 800aeba:	e7ea      	b.n	800ae92 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800aebc:	2001      	movs	r0, #1
 800aebe:	e7f8      	b.n	800aeb2 <HAL_UART_Init+0x4e>
    huart->Lock = HAL_UNLOCKED;
 800aec0:	2284      	movs	r2, #132	; 0x84
 800aec2:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800aec4:	f7fc fb48 	bl	8007558 <HAL_UART_MspInit>
 800aec8:	e7d3      	b.n	800ae72 <HAL_UART_Init+0xe>
 800aeca:	46c0      	nop			; (mov r8, r8)
 800aecc:	ffffb7ff 	.word	0xffffb7ff

0800aed0 <UART_Start_Receive_DMA>:
{
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 800aed4:	225c      	movs	r2, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 800aed6:	6581      	str	r1, [r0, #88]	; 0x58
{
 800aed8:	000d      	movs	r5, r1
  huart->RxXferSize = Size;
 800aeda:	5283      	strh	r3, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aedc:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aede:	2790      	movs	r7, #144	; 0x90
 800aee0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aee2:	268c      	movs	r6, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee4:	51c2      	str	r2, [r0, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aee6:	5181      	str	r1, [r0, r6]
  if (huart->hdmarx != NULL)
 800aee8:	315e      	adds	r1, #94	; 0x5e
{
 800aeea:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 800aeec:	5840      	ldr	r0, [r0, r1]
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d00d      	beq.n	800af0e <UART_Start_Receive_DMA+0x3e>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aef2:	491e      	ldr	r1, [pc, #120]	; (800af6c <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 800aef4:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aef6:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aef8:	491d      	ldr	r1, [pc, #116]	; (800af70 <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aefa:	002a      	movs	r2, r5
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aefc:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aefe:	491d      	ldr	r1, [pc, #116]	; (800af74 <UART_Start_Receive_DMA+0xa4>)
 800af00:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af02:	6821      	ldr	r1, [r4, #0]
 800af04:	3124      	adds	r1, #36	; 0x24
 800af06:	f7fd f9df 	bl	80082c8 <HAL_DMA_Start_IT>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d127      	bne.n	800af5e <UART_Start_Receive_DMA+0x8e>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d117      	bne.n	800af44 <UART_Start_Receive_DMA+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af18:	2301      	movs	r3, #1
 800af1a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1e:	6821      	ldr	r1, [r4, #0]
 800af20:	688a      	ldr	r2, [r1, #8]
 800af22:	431a      	orrs	r2, r3
 800af24:	608a      	str	r2, [r1, #8]
 800af26:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af2a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af2e:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af32:	2040      	movs	r0, #64	; 0x40
 800af34:	6822      	ldr	r2, [r4, #0]
 800af36:	6893      	ldr	r3, [r2, #8]
 800af38:	4303      	orrs	r3, r0
 800af3a:	6093      	str	r3, [r2, #8]
 800af3c:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800af40:	2000      	movs	r0, #0
}
 800af42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af44:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af48:	2301      	movs	r3, #1
 800af4a:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af4e:	6822      	ldr	r2, [r4, #0]
 800af50:	33ff      	adds	r3, #255	; 0xff
 800af52:	6810      	ldr	r0, [r2, #0]
 800af54:	4303      	orrs	r3, r0
 800af56:	6013      	str	r3, [r2, #0]
 800af58:	f381 8810 	msr	PRIMASK, r1
}
 800af5c:	e7da      	b.n	800af14 <UART_Start_Receive_DMA+0x44>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af5e:	2310      	movs	r3, #16
 800af60:	51e3      	str	r3, [r4, r7]
      huart->RxState = HAL_UART_STATE_READY;
 800af62:	3310      	adds	r3, #16
      return HAL_ERROR;
 800af64:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800af66:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 800af68:	e7eb      	b.n	800af42 <UART_Start_Receive_DMA+0x72>
 800af6a:	46c0      	nop			; (mov r8, r8)
 800af6c:	0800a7f9 	.word	0x0800a7f9
 800af70:	0800a7d9 	.word	0x0800a7d9
 800af74:	0800a3d9 	.word	0x0800a3d9

0800af78 <HAL_UART_Receive_DMA>:
{
 800af78:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800af7a:	208c      	movs	r0, #140	; 0x8c
 800af7c:	5818      	ldr	r0, [r3, r0]
{
 800af7e:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800af80:	2820      	cmp	r0, #32
 800af82:	d127      	bne.n	800afd4 <HAL_UART_Receive_DMA+0x5c>
    if ((pData == NULL) || (Size == 0U))
 800af84:	2900      	cmp	r1, #0
 800af86:	d023      	beq.n	800afd0 <HAL_UART_Receive_DMA+0x58>
 800af88:	2a00      	cmp	r2, #0
 800af8a:	d021      	beq.n	800afd0 <HAL_UART_Receive_DMA+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af8c:	2080      	movs	r0, #128	; 0x80
 800af8e:	689c      	ldr	r4, [r3, #8]
 800af90:	0140      	lsls	r0, r0, #5
 800af92:	4284      	cmp	r4, r0
 800af94:	d105      	bne.n	800afa2 <HAL_UART_Receive_DMA+0x2a>
 800af96:	6918      	ldr	r0, [r3, #16]
 800af98:	2800      	cmp	r0, #0
 800af9a:	d102      	bne.n	800afa2 <HAL_UART_Receive_DMA+0x2a>
      return HAL_ERROR;
 800af9c:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800af9e:	07cc      	lsls	r4, r1, #31
 800afa0:	d417      	bmi.n	800afd2 <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa2:	2000      	movs	r0, #0
 800afa4:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afa6:	6818      	ldr	r0, [r3, #0]
 800afa8:	6840      	ldr	r0, [r0, #4]
 800afaa:	0200      	lsls	r0, r0, #8
 800afac:	d50c      	bpl.n	800afc8 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afae:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afb2:	2001      	movs	r0, #1
 800afb4:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afb8:	2080      	movs	r0, #128	; 0x80
 800afba:	681c      	ldr	r4, [r3, #0]
 800afbc:	04c0      	lsls	r0, r0, #19
 800afbe:	6825      	ldr	r5, [r4, #0]
 800afc0:	4328      	orrs	r0, r5
 800afc2:	6020      	str	r0, [r4, #0]
 800afc4:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800afc8:	0018      	movs	r0, r3
 800afca:	f7ff ff81 	bl	800aed0 <UART_Start_Receive_DMA>
 800afce:	e000      	b.n	800afd2 <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 800afd0:	2001      	movs	r0, #1
}
 800afd2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800afd4:	2002      	movs	r0, #2
 800afd6:	e7fc      	b.n	800afd2 <HAL_UART_Receive_DMA+0x5a>

0800afd8 <UARTEx_SetNbDataToProcess.part.0>:
  * @note The RX FIFO depth and the TX FIFO depth is extracted from
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800afd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afda:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afdc:	4f0b      	ldr	r7, [pc, #44]	; (800b00c <UARTEx_SetNbDataToProcess.part.0+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afde:	689c      	ldr	r4, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afe0:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800afe2:	0005      	movs	r5, r0
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afe4:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afe6:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 800afe8:	4e09      	ldr	r6, [pc, #36]	; (800b010 <UARTEx_SetNbDataToProcess.part.0+0x38>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afea:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800afec:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afee:	f7f5 f931 	bl	8000254 <__divsi3>
 800aff2:	236a      	movs	r3, #106	; 0x6a
 800aff4:	52e8      	strh	r0, [r5, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aff6:	0123      	lsls	r3, r4, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aff8:	0f5b      	lsrs	r3, r3, #29
 800affa:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 800affc:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800affe:	00c0      	lsls	r0, r0, #3
 800b000:	f7f5 f928 	bl	8000254 <__divsi3>
 800b004:	2368      	movs	r3, #104	; 0x68
 800b006:	52e8      	strh	r0, [r5, r3]
  }
}
 800b008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	080136b4 	.word	0x080136b4
 800b010:	080136ac 	.word	0x080136ac

0800b014 <HAL_UARTEx_WakeupCallback>:
}
 800b014:	4770      	bx	lr
 800b016:	46c0      	nop			; (mov r8, r8)

0800b018 <HAL_UARTEx_RxFifoFullCallback>:
 800b018:	4770      	bx	lr
 800b01a:	46c0      	nop			; (mov r8, r8)

0800b01c <HAL_UARTEx_TxFifoEmptyCallback>:
 800b01c:	4770      	bx	lr
 800b01e:	46c0      	nop			; (mov r8, r8)

0800b020 <HAL_UARTEx_DisableFifoMode>:
{
 800b020:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b022:	2484      	movs	r4, #132	; 0x84
 800b024:	5d03      	ldrb	r3, [r0, r4]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d012      	beq.n	800b050 <HAL_UARTEx_DisableFifoMode+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 800b02a:	2588      	movs	r5, #136	; 0x88
 800b02c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800b02e:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800b030:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b032:	6803      	ldr	r3, [r0, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b036:	6819      	ldr	r1, [r3, #0]
 800b038:	43b1      	bics	r1, r6
 800b03a:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b03c:	4905      	ldr	r1, [pc, #20]	; (800b054 <HAL_UARTEx_DisableFifoMode+0x34>)
 800b03e:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b040:	2100      	movs	r1, #0
 800b042:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b044:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b046:	2320      	movs	r3, #32
 800b048:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800b04a:	5501      	strb	r1, [r0, r4]
  return HAL_OK;
 800b04c:	2000      	movs	r0, #0
}
 800b04e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800b050:	2002      	movs	r0, #2
 800b052:	e7fc      	b.n	800b04e <HAL_UARTEx_DisableFifoMode+0x2e>
 800b054:	dfffffff 	.word	0xdfffffff

0800b058 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800b058:	2384      	movs	r3, #132	; 0x84
{
 800b05a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b05c:	5cc3      	ldrb	r3, [r0, r3]
{
 800b05e:	0004      	movs	r4, r0
 800b060:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800b062:	2b01      	cmp	r3, #1
 800b064:	d01e      	beq.n	800b0a4 <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b066:	2388      	movs	r3, #136	; 0x88
 800b068:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b06a:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b06c:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b06e:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	3923      	subs	r1, #35	; 0x23
 800b074:	438b      	bics	r3, r1
 800b076:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b078:	68ab      	ldr	r3, [r5, #8]
 800b07a:	00db      	lsls	r3, r3, #3
 800b07c:	08d9      	lsrs	r1, r3, #3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b07e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b080:	4311      	orrs	r1, r2
 800b082:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800b088:	f7ff ffa6 	bl	800afd8 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800b08c:	2388      	movs	r3, #136	; 0x88
 800b08e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b090:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b092:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800b094:	2200      	movs	r2, #0
  return HAL_OK;
 800b096:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800b098:	3b04      	subs	r3, #4
 800b09a:	54e2      	strb	r2, [r4, r3]
}
 800b09c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b09e:	4b02      	ldr	r3, [pc, #8]	; (800b0a8 <HAL_UARTEx_SetTxFifoThreshold+0x50>)
 800b0a0:	6683      	str	r3, [r0, #104]	; 0x68
 800b0a2:	e7f3      	b.n	800b08c <HAL_UARTEx_SetTxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 800b0a4:	2002      	movs	r0, #2
 800b0a6:	e7f9      	b.n	800b09c <HAL_UARTEx_SetTxFifoThreshold+0x44>
 800b0a8:	00010001 	.word	0x00010001

0800b0ac <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b0ac:	2384      	movs	r3, #132	; 0x84
{
 800b0ae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800b0b0:	5cc3      	ldrb	r3, [r0, r3]
{
 800b0b2:	0004      	movs	r4, r0
 800b0b4:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d01e      	beq.n	800b0f8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800b0ba:	2388      	movs	r3, #136	; 0x88
 800b0bc:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0be:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b0c0:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0c2:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	3923      	subs	r1, #35	; 0x23
 800b0c8:	438b      	bics	r3, r1
 800b0ca:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0cc:	68a9      	ldr	r1, [r5, #8]
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <HAL_UARTEx_SetRxFifoThreshold+0x50>)
 800b0d0:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0d2:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0d4:	4311      	orrs	r1, r2
 800b0d6:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800b0dc:	f7ff ff7c 	bl	800afd8 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 800b0e0:	2388      	movs	r3, #136	; 0x88
 800b0e2:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0e4:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800b0e6:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 800b0e8:	2200      	movs	r2, #0
  return HAL_OK;
 800b0ea:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 800b0ec:	3b04      	subs	r3, #4
 800b0ee:	54e2      	strb	r2, [r4, r3]
}
 800b0f0:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b0f2:	4b03      	ldr	r3, [pc, #12]	; (800b100 <HAL_UARTEx_SetRxFifoThreshold+0x54>)
 800b0f4:	6683      	str	r3, [r0, #104]	; 0x68
 800b0f6:	e7f3      	b.n	800b0e0 <HAL_UARTEx_SetRxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 800b0f8:	2002      	movs	r0, #2
 800b0fa:	e7f9      	b.n	800b0f0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800b0fc:	f1ffffff 	.word	0xf1ffffff
 800b100:	00010001 	.word	0x00010001

0800b104 <SysTick_Handler>:
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
  /* Clear overflow flag */
  SysTick->CTRL;
 800b104:	4b04      	ldr	r3, [pc, #16]	; (800b118 <SysTick_Handler+0x14>)
void SysTick_Handler (void) {
 800b106:	b510      	push	{r4, lr}
  SysTick->CTRL;
 800b108:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b10a:	f001 f8a7 	bl	800c25c <xTaskGetSchedulerState>
 800b10e:	2801      	cmp	r0, #1
 800b110:	d001      	beq.n	800b116 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
 800b112:	f001 fb7f 	bl	800c814 <xPortSysTickHandler>
  }
}
 800b116:	bd10      	pop	{r4, pc}
 800b118:	e000e010 	.word	0xe000e010

0800b11c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b11c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800b120:	2b00      	cmp	r3, #0
 800b122:	d106      	bne.n	800b132 <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800b124:	4b06      	ldr	r3, [pc, #24]	; (800b140 <osKernelInitialize+0x24>)
 800b126:	6818      	ldr	r0, [r3, #0]
 800b128:	2800      	cmp	r0, #0
 800b12a:	d105      	bne.n	800b138 <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b12c:	2201      	movs	r2, #1
 800b12e:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 800b130:	4770      	bx	lr
    stat = osErrorISR;
 800b132:	2006      	movs	r0, #6
 800b134:	4240      	negs	r0, r0
 800b136:	e7fb      	b.n	800b130 <osKernelInitialize+0x14>
      stat = osError;
 800b138:	2001      	movs	r0, #1
 800b13a:	4240      	negs	r0, r0
  return (stat);
 800b13c:	e7f8      	b.n	800b130 <osKernelInitialize+0x14>
 800b13e:	46c0      	nop			; (mov r8, r8)
 800b140:	20004da4 	.word	0x20004da4

0800b144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b144:	b510      	push	{r4, lr}
 800b146:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d111      	bne.n	800b172 <osKernelStart+0x2e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800b14e:	4a0a      	ldr	r2, [pc, #40]	; (800b178 <osKernelStart+0x34>)
 800b150:	6813      	ldr	r3, [r2, #0]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d10a      	bne.n	800b16c <osKernelStart+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800b156:	4909      	ldr	r1, [pc, #36]	; (800b17c <osKernelStart+0x38>)
 800b158:	69cb      	ldr	r3, [r1, #28]
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	0a1b      	lsrs	r3, r3, #8
 800b15e:	61cb      	str	r3, [r1, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b160:	2302      	movs	r3, #2
 800b162:	6013      	str	r3, [r2, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b164:	f000 fdc6 	bl	800bcf4 <vTaskStartScheduler>
      stat = osOK;
 800b168:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800b16a:	bd10      	pop	{r4, pc}
      stat = osError;
 800b16c:	2001      	movs	r0, #1
 800b16e:	4240      	negs	r0, r0
  return (stat);
 800b170:	e7fb      	b.n	800b16a <osKernelStart+0x26>
    stat = osErrorISR;
 800b172:	2006      	movs	r0, #6
 800b174:	4240      	negs	r0, r0
 800b176:	e7f8      	b.n	800b16a <osKernelStart+0x26>
 800b178:	20004da4 	.word	0x20004da4
 800b17c:	e000ed00 	.word	0xe000ed00

0800b180 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b182:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b184:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b186:	b087      	sub	sp, #28
 800b188:	0005      	movs	r5, r0
  hTask = NULL;
 800b18a:	9205      	str	r2, [sp, #20]
 800b18c:	f3ef 8205 	mrs	r2, IPSR
  return(result);
 800b190:	2000      	movs	r0, #0

  if (!IS_IRQ() && (func != NULL)) {
 800b192:	2a00      	cmp	r2, #0
 800b194:	d124      	bne.n	800b1e0 <osThreadNew+0x60>
 800b196:	2d00      	cmp	r5, #0
 800b198:	d022      	beq.n	800b1e0 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d028      	beq.n	800b1f0 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800b19e:	69a3      	ldr	r3, [r4, #24]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d11f      	bne.n	800b1e4 <osThreadNew+0x64>
 800b1a4:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b1a6:	6862      	ldr	r2, [r4, #4]
 800b1a8:	07d2      	lsls	r2, r2, #31
 800b1aa:	d41f      	bmi.n	800b1ec <osThreadNew+0x6c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800b1ac:	6966      	ldr	r6, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 800b1ae:	2280      	movs	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 800b1b0:	2e00      	cmp	r6, #0
 800b1b2:	d000      	beq.n	800b1b6 <osThreadNew+0x36>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b1b4:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800b1b6:	6820      	ldr	r0, [r4, #0]
 800b1b8:	4684      	mov	ip, r0
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1ba:	68a0      	ldr	r0, [r4, #8]
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d027      	beq.n	800b210 <osThreadNew+0x90>
 800b1c0:	68e7      	ldr	r7, [r4, #12]
 800b1c2:	2fa7      	cmp	r7, #167	; 0xa7
 800b1c4:	d912      	bls.n	800b1ec <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1c6:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b1c8:	2c00      	cmp	r4, #0
 800b1ca:	d00f      	beq.n	800b1ec <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	d00d      	beq.n	800b1ec <osThreadNew+0x6c>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1d0:	9002      	str	r0, [sp, #8]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	0028      	movs	r0, r5
 800b1d6:	000b      	movs	r3, r1
 800b1d8:	9401      	str	r4, [sp, #4]
 800b1da:	4661      	mov	r1, ip
 800b1dc:	f000 fd2e 	bl	800bc3c <xTaskCreateStatic>
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800b1e0:	b007      	add	sp, #28
 800b1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b1e4:	1e5a      	subs	r2, r3, #1
 800b1e6:	2a37      	cmp	r2, #55	; 0x37
 800b1e8:	d9dd      	bls.n	800b1a6 <osThreadNew+0x26>
 800b1ea:	e7f9      	b.n	800b1e0 <osThreadNew+0x60>
        return (NULL);
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	e7f7      	b.n	800b1e0 <osThreadNew+0x60>
 800b1f0:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 800b1f2:	2318      	movs	r3, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1f4:	a805      	add	r0, sp, #20
 800b1f6:	9001      	str	r0, [sp, #4]
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	0028      	movs	r0, r5
 800b1fc:	000b      	movs	r3, r1
 800b1fe:	0021      	movs	r1, r4
 800b200:	f000 fd44 	bl	800bc8c <xTaskCreate>
 800b204:	0003      	movs	r3, r0
 800b206:	2000      	movs	r0, #0
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d1e9      	bne.n	800b1e0 <osThreadNew+0x60>
  return ((osThreadId_t)hTask);
 800b20c:	9805      	ldr	r0, [sp, #20]
 800b20e:	e7e7      	b.n	800b1e0 <osThreadNew+0x60>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b210:	68e6      	ldr	r6, [r4, #12]
 800b212:	2e00      	cmp	r6, #0
 800b214:	d1e4      	bne.n	800b1e0 <osThreadNew+0x60>
 800b216:	6924      	ldr	r4, [r4, #16]
 800b218:	2c00      	cmp	r4, #0
 800b21a:	d1e1      	bne.n	800b1e0 <osThreadNew+0x60>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b21c:	4664      	mov	r4, ip
 800b21e:	b292      	uxth	r2, r2
 800b220:	e7e8      	b.n	800b1f4 <osThreadNew+0x74>
 800b222:	46c0      	nop			; (mov r8, r8)

0800b224 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b224:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b226:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d107      	bne.n	800b23e <osDelay+0x1a>
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 800b22e:	2400      	movs	r4, #0

    if (ticks != 0U) {
 800b230:	2800      	cmp	r0, #0
 800b232:	d101      	bne.n	800b238 <osDelay+0x14>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800b234:	0020      	movs	r0, r4
 800b236:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 800b238:	f000 ff00 	bl	800c03c <vTaskDelay>
 800b23c:	e7fa      	b.n	800b234 <osDelay+0x10>
    stat = osErrorISR;
 800b23e:	2406      	movs	r4, #6
 800b240:	4264      	negs	r4, r4
 800b242:	e7f7      	b.n	800b234 <osDelay+0x10>

0800b244 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b246:	0014      	movs	r4, r2
 800b248:	b083      	sub	sp, #12
 800b24a:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b24e:	2d00      	cmp	r5, #0
 800b250:	d113      	bne.n	800b27a <osMessageQueueNew+0x36>
 800b252:	2800      	cmp	r0, #0
 800b254:	d011      	beq.n	800b27a <osMessageQueueNew+0x36>
 800b256:	2900      	cmp	r1, #0
 800b258:	d00f      	beq.n	800b27a <osMessageQueueNew+0x36>
    mem = -1;

    if (attr != NULL) {
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	d021      	beq.n	800b2a2 <osMessageQueueNew+0x5e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b25e:	6893      	ldr	r3, [r2, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00e      	beq.n	800b282 <osMessageQueueNew+0x3e>
 800b264:	68d2      	ldr	r2, [r2, #12]
 800b266:	2a4f      	cmp	r2, #79	; 0x4f
 800b268:	d907      	bls.n	800b27a <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b26a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	d004      	beq.n	800b27a <osMessageQueueNew+0x36>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b270:	000e      	movs	r6, r1
 800b272:	4346      	muls	r6, r0
 800b274:	6967      	ldr	r7, [r4, #20]
 800b276:	42b7      	cmp	r7, r6
 800b278:	d21d      	bcs.n	800b2b6 <osMessageQueueNew+0x72>
  hQueue = NULL;
 800b27a:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b27c:	0028      	movs	r0, r5
 800b27e:	b003      	add	sp, #12
 800b280:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b282:	68d3      	ldr	r3, [r2, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1f8      	bne.n	800b27a <osMessageQueueNew+0x36>
 800b288:	6913      	ldr	r3, [r2, #16]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1f5      	bne.n	800b27a <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b28e:	6953      	ldr	r3, [r2, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1f2      	bne.n	800b27a <osMessageQueueNew+0x36>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b294:	2200      	movs	r2, #0
 800b296:	f000 f99b 	bl	800b5d0 <xQueueGenericCreate>
 800b29a:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b29c:	d0ed      	beq.n	800b27a <osMessageQueueNew+0x36>
        name = attr->name;
 800b29e:	6824      	ldr	r4, [r4, #0]
 800b2a0:	e004      	b.n	800b2ac <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f000 f994 	bl	800b5d0 <xQueueGenericCreate>
 800b2a8:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b2aa:	d0e6      	beq.n	800b27a <osMessageQueueNew+0x36>
      vQueueAddToRegistry (hQueue, name);
 800b2ac:	0021      	movs	r1, r4
 800b2ae:	0028      	movs	r0, r5
 800b2b0:	f000 fb28 	bl	800b904 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b2b4:	e7e2      	b.n	800b27c <osMessageQueueNew+0x38>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b2b6:	9500      	str	r5, [sp, #0]
 800b2b8:	f000 f954 	bl	800b564 <xQueueGenericCreateStatic>
 800b2bc:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800b2be:	d0dc      	beq.n	800b27a <osMessageQueueNew+0x36>
        name = attr->name;
 800b2c0:	6824      	ldr	r4, [r4, #0]
 800b2c2:	e7f3      	b.n	800b2ac <osMessageQueueNew+0x68>

0800b2c4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2c4:	4b03      	ldr	r3, [pc, #12]	; (800b2d4 <vApplicationGetIdleTaskMemory+0x10>)
 800b2c6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2c8:	4b03      	ldr	r3, [pc, #12]	; (800b2d8 <vApplicationGetIdleTaskMemory+0x14>)
 800b2ca:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2cc:	2380      	movs	r3, #128	; 0x80
 800b2ce:	6013      	str	r3, [r2, #0]
}
 800b2d0:	4770      	bx	lr
 800b2d2:	46c0      	nop			; (mov r8, r8)
 800b2d4:	20004cfc 	.word	0x20004cfc
 800b2d8:	20004afc 	.word	0x20004afc

0800b2dc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2dc:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <vApplicationGetTimerTaskMemory+0x10>)
 800b2de:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2e0:	4b03      	ldr	r3, [pc, #12]	; (800b2f0 <vApplicationGetTimerTaskMemory+0x14>)
 800b2e2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b2e4:	2380      	movs	r3, #128	; 0x80
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	6013      	str	r3, [r2, #0]
}
 800b2ea:	4770      	bx	lr
 800b2ec:	200051a8 	.word	0x200051a8
 800b2f0:	20004da8 	.word	0x20004da8

0800b2f4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2f4:	0003      	movs	r3, r0
 800b2f6:	3308      	adds	r3, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2f8:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2fa:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2fc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2fe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b300:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b302:	4252      	negs	r2, r2
 800b304:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b306:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b308:	4770      	bx	lr
 800b30a:	46c0      	nop			; (mov r8, r8)

0800b30c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b310:	4770      	bx	lr
 800b312:	46c0      	nop			; (mov r8, r8)

0800b314 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b314:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b316:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b318:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b31a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b320:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b322:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b324:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b326:	3301      	adds	r3, #1
 800b328:	6003      	str	r3, [r0, #0]
}
 800b32a:	4770      	bx	lr

0800b32c <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b32c:	0003      	movs	r3, r0
{
 800b32e:	b530      	push	{r4, r5, lr}
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b330:	680d      	ldr	r5, [r1, #0]
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b332:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800b334:	1c6a      	adds	r2, r5, #1
 800b336:	d00d      	beq.n	800b354 <vListInsert+0x28>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b338:	001c      	movs	r4, r3
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	42aa      	cmp	r2, r5
 800b340:	d9fa      	bls.n	800b338 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b342:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b344:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b346:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
 800b348:	608c      	str	r4, [r1, #8]
	( pxList->uxNumberOfItems )++;
 800b34a:	3301      	adds	r3, #1
	pxIterator->pxNext = pxNewListItem;
 800b34c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800b34e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b350:	6003      	str	r3, [r0, #0]
}
 800b352:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800b354:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800b356:	6863      	ldr	r3, [r4, #4]
 800b358:	e7f3      	b.n	800b342 <vListInsert+0x16>
 800b35a:	46c0      	nop			; (mov r8, r8)

0800b35c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b35c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b35e:	6841      	ldr	r1, [r0, #4]
 800b360:	6882      	ldr	r2, [r0, #8]
 800b362:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b364:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b366:	6859      	ldr	r1, [r3, #4]
 800b368:	4281      	cmp	r1, r0
 800b36a:	d006      	beq.n	800b37a <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b36c:	2200      	movs	r2, #0
 800b36e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	3a01      	subs	r2, #1
 800b374:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b376:	6818      	ldr	r0, [r3, #0]
}
 800b378:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b37a:	605a      	str	r2, [r3, #4]
 800b37c:	e7f6      	b.n	800b36c <uxListRemove+0x10>
 800b37e:	46c0      	nop			; (mov r8, r8)

0800b380 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	0016      	movs	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b384:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800b386:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b388:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b38a:	2a00      	cmp	r2, #0
 800b38c:	d106      	bne.n	800b39c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b38e:	6806      	ldr	r6, [r0, #0]
 800b390:	2e00      	cmp	r6, #0
 800b392:	d028      	beq.n	800b3e6 <prvCopyDataToQueue+0x66>
 800b394:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800b396:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b398:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b39c:	2e00      	cmp	r6, #0
 800b39e:	d10e      	bne.n	800b3be <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3a0:	6840      	ldr	r0, [r0, #4]
 800b3a2:	f003 fcc1 	bl	800ed28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3a6:	6863      	ldr	r3, [r4, #4]
 800b3a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b3aa:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3ac:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3ae:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d3ef      	bcc.n	800b394 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3b4:	6823      	ldr	r3, [r4, #0]
BaseType_t xReturn = pdFALSE;
 800b3b6:	2000      	movs	r0, #0
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3b8:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3ba:	3501      	adds	r5, #1
 800b3bc:	e7ec      	b.n	800b398 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3be:	68c0      	ldr	r0, [r0, #12]
 800b3c0:	f003 fcb2 	bl	800ed28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b3c6:	68e3      	ldr	r3, [r4, #12]
 800b3c8:	4251      	negs	r1, r2
 800b3ca:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3cc:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3ce:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d202      	bcs.n	800b3da <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3d4:	68a3      	ldr	r3, [r4, #8]
 800b3d6:	185b      	adds	r3, r3, r1
 800b3d8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b3da:	2e02      	cmp	r6, #2
 800b3dc:	d1da      	bne.n	800b394 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3de:	2d00      	cmp	r5, #0
 800b3e0:	d1d9      	bne.n	800b396 <prvCopyDataToQueue+0x16>
 800b3e2:	3501      	adds	r5, #1
 800b3e4:	e7d7      	b.n	800b396 <prvCopyDataToQueue+0x16>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3e6:	6880      	ldr	r0, [r0, #8]
 800b3e8:	f000 ff48 	bl	800c27c <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3ec:	3501      	adds	r5, #1
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3ee:	60a6      	str	r6, [r4, #8]
 800b3f0:	e7d2      	b.n	800b398 <prvCopyDataToQueue+0x18>
 800b3f2:	46c0      	nop			; (mov r8, r8)

0800b3f4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	0005      	movs	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3f8:	f001 f9c2 	bl	800c780 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3fc:	2345      	movs	r3, #69	; 0x45
 800b3fe:	5cec      	ldrb	r4, [r5, r3]
 800b400:	b264      	sxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b402:	2c00      	cmp	r4, #0
 800b404:	dd16      	ble.n	800b434 <prvUnlockQueue+0x40>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b406:	002e      	movs	r6, r5
 800b408:	3624      	adds	r6, #36	; 0x24
 800b40a:	e004      	b.n	800b416 <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b40c:	3c01      	subs	r4, #1
 800b40e:	b2e2      	uxtb	r2, r4
 800b410:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b412:	2a00      	cmp	r2, #0
 800b414:	d00e      	beq.n	800b434 <prvUnlockQueue+0x40>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00b      	beq.n	800b434 <prvUnlockQueue+0x40>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b41c:	0030      	movs	r0, r6
 800b41e:	f000 fe91 	bl	800c144 <xTaskRemoveFromEventList>
 800b422:	2800      	cmp	r0, #0
 800b424:	d0f2      	beq.n	800b40c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800b426:	3c01      	subs	r4, #1
 800b428:	f000 ff12 	bl	800c250 <vTaskMissedYield>
			--cTxLock;
 800b42c:	b2e2      	uxtb	r2, r4
 800b42e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b430:	2a00      	cmp	r2, #0
 800b432:	d1f0      	bne.n	800b416 <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b434:	2345      	movs	r3, #69	; 0x45
 800b436:	22ff      	movs	r2, #255	; 0xff
 800b438:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 800b43a:	f001 f9ad 	bl	800c798 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b43e:	f001 f99f 	bl	800c780 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b442:	2344      	movs	r3, #68	; 0x44
 800b444:	5cec      	ldrb	r4, [r5, r3]
 800b446:	b264      	sxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b448:	2c00      	cmp	r4, #0
 800b44a:	dd16      	ble.n	800b47a <prvUnlockQueue+0x86>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b44c:	002e      	movs	r6, r5
 800b44e:	3610      	adds	r6, #16
 800b450:	e004      	b.n	800b45c <prvUnlockQueue+0x68>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b452:	3c01      	subs	r4, #1
 800b454:	b2e2      	uxtb	r2, r4
 800b456:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b458:	2a00      	cmp	r2, #0
 800b45a:	d00e      	beq.n	800b47a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b45c:	692b      	ldr	r3, [r5, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00b      	beq.n	800b47a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b462:	0030      	movs	r0, r6
 800b464:	f000 fe6e 	bl	800c144 <xTaskRemoveFromEventList>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d0f2      	beq.n	800b452 <prvUnlockQueue+0x5e>
					vTaskMissedYield();
 800b46c:	3c01      	subs	r4, #1
 800b46e:	f000 feef 	bl	800c250 <vTaskMissedYield>
				--cRxLock;
 800b472:	b2e2      	uxtb	r2, r4
 800b474:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b476:	2a00      	cmp	r2, #0
 800b478:	d1f0      	bne.n	800b45c <prvUnlockQueue+0x68>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b47a:	2344      	movs	r3, #68	; 0x44
 800b47c:	22ff      	movs	r2, #255	; 0xff
 800b47e:	54ea      	strb	r2, [r5, r3]
	}
	taskEXIT_CRITICAL();
 800b480:	f001 f98a 	bl	800c798 <vPortExitCritical>
}
 800b484:	bd70      	pop	{r4, r5, r6, pc}
 800b486:	46c0      	nop			; (mov r8, r8)

0800b488 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	0006      	movs	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b48c:	0008      	movs	r0, r1
 800b48e:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b490:	3050      	adds	r0, #80	; 0x50
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 800b492:	000d      	movs	r5, r1
 800b494:	0017      	movs	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b496:	f001 fa3b 	bl	800c910 <pvPortMalloc>
 800b49a:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
 800b49c:	d027      	beq.n	800b4ee <xQueueGenericCreate.part.0+0x66>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b49e:	2346      	movs	r3, #70	; 0x46
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	54c2      	strb	r2, [r0, r3]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b4a4:	0003      	movs	r3, r0
 800b4a6:	2d00      	cmp	r5, #0
 800b4a8:	d123      	bne.n	800b4f2 <xQueueGenericCreate.part.0+0x6a>
 800b4aa:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800b4ac:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b4ae:	6425      	str	r5, [r4, #64]	; 0x40
	taskENTER_CRITICAL();
 800b4b0:	f001 f966 	bl	800c780 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b4b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b4b8:	6821      	ldr	r1, [r4, #0]
 800b4ba:	4353      	muls	r3, r2
 800b4bc:	18c8      	adds	r0, r1, r3
 800b4be:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4c0:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4c2:	1a9b      	subs	r3, r3, r2
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4c4:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4c6:	2244      	movs	r2, #68	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4c8:	18c9      	adds	r1, r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
 800b4ca:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4cc:	63a0      	str	r0, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4ce:	0020      	movs	r0, r4
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4d0:	60e1      	str	r1, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4d2:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800b4d4:	3201      	adds	r2, #1
 800b4d6:	54a3      	strb	r3, [r4, r2]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4d8:	3010      	adds	r0, #16
 800b4da:	f7ff ff0b 	bl	800b2f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4de:	0020      	movs	r0, r4
 800b4e0:	3024      	adds	r0, #36	; 0x24
 800b4e2:	f7ff ff07 	bl	800b2f4 <vListInitialise>
	taskEXIT_CRITICAL();
 800b4e6:	f001 f957 	bl	800c798 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 800b4ea:	234c      	movs	r3, #76	; 0x4c
 800b4ec:	54e7      	strb	r7, [r4, r3]
	}
 800b4ee:	0020      	movs	r0, r4
 800b4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4f2:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b4f4:	e7d9      	b.n	800b4aa <xQueueGenericCreate.part.0+0x22>
 800b4f6:	46c0      	nop			; (mov r8, r8)

0800b4f8 <xQueueGenericReset>:
{
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	0004      	movs	r4, r0
 800b4fc:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d01b      	beq.n	800b53a <xQueueGenericReset+0x42>
	taskENTER_CRITICAL();
 800b502:	f001 f93d 	bl	800c780 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b506:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b50a:	6822      	ldr	r2, [r4, #0]
 800b50c:	434b      	muls	r3, r1
 800b50e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b510:	1a5b      	subs	r3, r3, r1
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b512:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b514:	18d2      	adds	r2, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b516:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b518:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b51a:	23ff      	movs	r3, #255	; 0xff
 800b51c:	2244      	movs	r2, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b51e:	2000      	movs	r0, #0
 800b520:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b522:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800b524:	3201      	adds	r2, #1
 800b526:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 800b528:	2d00      	cmp	r5, #0
 800b52a:	d108      	bne.n	800b53e <xQueueGenericReset+0x46>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b52c:	6923      	ldr	r3, [r4, #16]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d10e      	bne.n	800b550 <xQueueGenericReset+0x58>
	taskEXIT_CRITICAL();
 800b532:	f001 f931 	bl	800c798 <vPortExitCritical>
}
 800b536:	2001      	movs	r0, #1
 800b538:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800b53a:	b672      	cpsid	i
 800b53c:	e7fe      	b.n	800b53c <xQueueGenericReset+0x44>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b53e:	0020      	movs	r0, r4
 800b540:	3010      	adds	r0, #16
 800b542:	f7ff fed7 	bl	800b2f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b546:	0020      	movs	r0, r4
 800b548:	3024      	adds	r0, #36	; 0x24
 800b54a:	f7ff fed3 	bl	800b2f4 <vListInitialise>
 800b54e:	e7f0      	b.n	800b532 <xQueueGenericReset+0x3a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b550:	0020      	movs	r0, r4
 800b552:	3010      	adds	r0, #16
 800b554:	f000 fdf6 	bl	800c144 <xTaskRemoveFromEventList>
 800b558:	2800      	cmp	r0, #0
 800b55a:	d0ea      	beq.n	800b532 <xQueueGenericReset+0x3a>
					queueYIELD_IF_USING_PREEMPTION();
 800b55c:	f001 f904 	bl	800c768 <vPortYield>
 800b560:	e7e7      	b.n	800b532 <xQueueGenericReset+0x3a>
 800b562:	46c0      	nop			; (mov r8, r8)

0800b564 <xQueueGenericCreateStatic>:
	{
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	ac06      	add	r4, sp, #24
 800b56a:	001d      	movs	r5, r3
 800b56c:	7824      	ldrb	r4, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b56e:	2800      	cmp	r0, #0
 800b570:	d101      	bne.n	800b576 <xQueueGenericCreateStatic+0x12>
 800b572:	b672      	cpsid	i
 800b574:	e7fe      	b.n	800b574 <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	d00c      	beq.n	800b598 <xQueueGenericCreateStatic+0x34>
 800b57e:	2900      	cmp	r1, #0
 800b580:	d008      	beq.n	800b594 <xQueueGenericCreateStatic+0x30>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b582:	2350      	movs	r3, #80	; 0x50
 800b584:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	2b50      	cmp	r3, #80	; 0x50
 800b58a:	d00f      	beq.n	800b5ac <xQueueGenericCreateStatic+0x48>
 800b58c:	b672      	cpsid	i
 800b58e:	e7fe      	b.n	800b58e <xQueueGenericCreateStatic+0x2a>
		configASSERT( pxStaticQueue != NULL );
 800b590:	b672      	cpsid	i
 800b592:	e7fe      	b.n	800b592 <xQueueGenericCreateStatic+0x2e>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b594:	b672      	cpsid	i
 800b596:	e7fe      	b.n	800b596 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b598:	2900      	cmp	r1, #0
 800b59a:	d117      	bne.n	800b5cc <xQueueGenericCreateStatic+0x68>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b59c:	2350      	movs	r3, #80	; 0x50
 800b59e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	2b50      	cmp	r3, #80	; 0x50
 800b5a4:	d1f2      	bne.n	800b58c <xQueueGenericCreateStatic+0x28>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5a6:	002a      	movs	r2, r5
 800b5a8:	9b01      	ldr	r3, [sp, #4]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b5aa:	e000      	b.n	800b5ae <xQueueGenericCreateStatic+0x4a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5ac:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5ae:	2346      	movs	r3, #70	; 0x46
 800b5b0:	2601      	movs	r6, #1
 800b5b2:	54ee      	strb	r6, [r5, r3]
	pxNewQueue->uxLength = uxQueueLength;
 800b5b4:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b5b6:	6429      	str	r1, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5b8:	0028      	movs	r0, r5
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	602a      	str	r2, [r5, #0]
 800b5be:	f7ff ff9b 	bl	800b4f8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b5c2:	234c      	movs	r3, #76	; 0x4c
	}
 800b5c4:	0028      	movs	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 800b5c6:	54ec      	strb	r4, [r5, r3]
	}
 800b5c8:	b002      	add	sp, #8
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5cc:	b672      	cpsid	i
 800b5ce:	e7fe      	b.n	800b5ce <xQueueGenericCreateStatic+0x6a>

0800b5d0 <xQueueGenericCreate>:
	{
 800b5d0:	b510      	push	{r4, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	d101      	bne.n	800b5da <xQueueGenericCreate+0xa>
 800b5d6:	b672      	cpsid	i
 800b5d8:	e7fe      	b.n	800b5d8 <xQueueGenericCreate+0x8>
 800b5da:	f7ff ff55 	bl	800b488 <xQueueGenericCreate.part.0>
	}
 800b5de:	bd10      	pop	{r4, pc}

0800b5e0 <xQueueGenericSend>:
{
 800b5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e2:	46ce      	mov	lr, r9
 800b5e4:	4647      	mov	r7, r8
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b085      	sub	sp, #20
 800b5ea:	0004      	movs	r4, r0
 800b5ec:	4689      	mov	r9, r1
 800b5ee:	001d      	movs	r5, r3
 800b5f0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d04c      	beq.n	800b690 <xQueueGenericSend+0xb0>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5f6:	2900      	cmp	r1, #0
 800b5f8:	d045      	beq.n	800b686 <xQueueGenericSend+0xa6>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5fa:	2d02      	cmp	r5, #2
 800b5fc:	d104      	bne.n	800b608 <xQueueGenericSend+0x28>
 800b5fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b600:	2b01      	cmp	r3, #1
 800b602:	d001      	beq.n	800b608 <xQueueGenericSend+0x28>
 800b604:	b672      	cpsid	i
 800b606:	e7fe      	b.n	800b606 <xQueueGenericSend+0x26>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b608:	f000 fe28 	bl	800c25c <xTaskGetSchedulerState>
 800b60c:	1e06      	subs	r6, r0, #0
 800b60e:	d041      	beq.n	800b694 <xQueueGenericSend+0xb4>
 800b610:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b612:	2300      	movs	r3, #0
 800b614:	2744      	movs	r7, #68	; 0x44
 800b616:	4698      	mov	r8, r3
		taskENTER_CRITICAL();
 800b618:	f001 f8b2 	bl	800c780 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b61c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b61e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b620:	429a      	cmp	r2, r3
 800b622:	d352      	bcc.n	800b6ca <xQueueGenericSend+0xea>
 800b624:	2d02      	cmp	r5, #2
 800b626:	d050      	beq.n	800b6ca <xQueueGenericSend+0xea>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b628:	9b01      	ldr	r3, [sp, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d05f      	beq.n	800b6ee <xQueueGenericSend+0x10e>
				else if( xEntryTimeSet == pdFALSE )
 800b62e:	2e00      	cmp	r6, #0
 800b630:	d047      	beq.n	800b6c2 <xQueueGenericSend+0xe2>
		taskEXIT_CRITICAL();
 800b632:	f001 f8b1 	bl	800c798 <vPortExitCritical>
		vTaskSuspendAll();
 800b636:	f000 fb9d 	bl	800bd74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b63a:	f001 f8a1 	bl	800c780 <vPortEnterCritical>
 800b63e:	5de3      	ldrb	r3, [r4, r7]
 800b640:	b25b      	sxtb	r3, r3
 800b642:	3301      	adds	r3, #1
 800b644:	d101      	bne.n	800b64a <xQueueGenericSend+0x6a>
 800b646:	4643      	mov	r3, r8
 800b648:	55e3      	strb	r3, [r4, r7]
 800b64a:	2345      	movs	r3, #69	; 0x45
 800b64c:	5ce2      	ldrb	r2, [r4, r3]
 800b64e:	b252      	sxtb	r2, r2
 800b650:	3201      	adds	r2, #1
 800b652:	d101      	bne.n	800b658 <xQueueGenericSend+0x78>
 800b654:	4642      	mov	r2, r8
 800b656:	54e2      	strb	r2, [r4, r3]
 800b658:	f001 f89e 	bl	800c798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b65c:	a901      	add	r1, sp, #4
 800b65e:	a802      	add	r0, sp, #8
 800b660:	f000 fdbc 	bl	800c1dc <xTaskCheckForTimeOut>
 800b664:	2800      	cmp	r0, #0
 800b666:	d146      	bne.n	800b6f6 <xQueueGenericSend+0x116>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b668:	f001 f88a 	bl	800c780 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b66c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b66e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b670:	429a      	cmp	r2, r3
 800b672:	d014      	beq.n	800b69e <xQueueGenericSend+0xbe>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b674:	f001 f890 	bl	800c798 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b678:	0020      	movs	r0, r4
 800b67a:	f7ff febb 	bl	800b3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b67e:	f000 fcd1 	bl	800c024 <xTaskResumeAll>
 800b682:	2601      	movs	r6, #1
 800b684:	e7c8      	b.n	800b618 <xQueueGenericSend+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b686:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d0b6      	beq.n	800b5fa <xQueueGenericSend+0x1a>
 800b68c:	b672      	cpsid	i
 800b68e:	e7fe      	b.n	800b68e <xQueueGenericSend+0xae>
	configASSERT( pxQueue );
 800b690:	b672      	cpsid	i
 800b692:	e7fe      	b.n	800b692 <xQueueGenericSend+0xb2>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b694:	9b01      	ldr	r3, [sp, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d0bb      	beq.n	800b612 <xQueueGenericSend+0x32>
 800b69a:	b672      	cpsid	i
 800b69c:	e7fe      	b.n	800b69c <xQueueGenericSend+0xbc>
	taskEXIT_CRITICAL();
 800b69e:	f001 f87b 	bl	800c798 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6a2:	0020      	movs	r0, r4
 800b6a4:	9901      	ldr	r1, [sp, #4]
 800b6a6:	3010      	adds	r0, #16
 800b6a8:	f000 fd22 	bl	800c0f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b6ac:	0020      	movs	r0, r4
 800b6ae:	f7ff fea1 	bl	800b3f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b6b2:	f000 fcb7 	bl	800c024 <xTaskResumeAll>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d1e3      	bne.n	800b682 <xQueueGenericSend+0xa2>
					portYIELD_WITHIN_API();
 800b6ba:	f001 f855 	bl	800c768 <vPortYield>
 800b6be:	2601      	movs	r6, #1
 800b6c0:	e7aa      	b.n	800b618 <xQueueGenericSend+0x38>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6c2:	a802      	add	r0, sp, #8
 800b6c4:	f000 fd7e 	bl	800c1c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6c8:	e7b3      	b.n	800b632 <xQueueGenericSend+0x52>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6ca:	002a      	movs	r2, r5
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	0020      	movs	r0, r4
 800b6d0:	f7ff fe56 	bl	800b380 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d117      	bne.n	800b70a <xQueueGenericSend+0x12a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d112      	bne.n	800b704 <xQueueGenericSend+0x124>
				taskEXIT_CRITICAL();
 800b6de:	f001 f85b 	bl	800c798 <vPortExitCritical>
				return pdPASS;
 800b6e2:	2001      	movs	r0, #1
}
 800b6e4:	b005      	add	sp, #20
 800b6e6:	bcc0      	pop	{r6, r7}
 800b6e8:	46b9      	mov	r9, r7
 800b6ea:	46b0      	mov	r8, r6
 800b6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800b6ee:	f001 f853 	bl	800c798 <vPortExitCritical>
					return errQUEUE_FULL;
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	e7f6      	b.n	800b6e4 <xQueueGenericSend+0x104>
			prvUnlockQueue( pxQueue );
 800b6f6:	0020      	movs	r0, r4
 800b6f8:	f7ff fe7c 	bl	800b3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b6fc:	f000 fc92 	bl	800c024 <xTaskResumeAll>
			return errQUEUE_FULL;
 800b700:	2000      	movs	r0, #0
 800b702:	e7ef      	b.n	800b6e4 <xQueueGenericSend+0x104>
							queueYIELD_IF_USING_PREEMPTION();
 800b704:	f001 f830 	bl	800c768 <vPortYield>
 800b708:	e7e9      	b.n	800b6de <xQueueGenericSend+0xfe>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b70a:	0020      	movs	r0, r4
 800b70c:	3024      	adds	r0, #36	; 0x24
 800b70e:	f000 fd19 	bl	800c144 <xTaskRemoveFromEventList>
 800b712:	e7e2      	b.n	800b6da <xQueueGenericSend+0xfa>

0800b714 <xQueueGenericSendFromISR>:
{
 800b714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b716:	464f      	mov	r7, r9
 800b718:	4646      	mov	r6, r8
 800b71a:	46d6      	mov	lr, sl
 800b71c:	0004      	movs	r4, r0
 800b71e:	b5c0      	push	{r6, r7, lr}
 800b720:	001d      	movs	r5, r3
 800b722:	000f      	movs	r7, r1
 800b724:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800b726:	2800      	cmp	r0, #0
 800b728:	d037      	beq.n	800b79a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b72a:	2900      	cmp	r1, #0
 800b72c:	d017      	beq.n	800b75e <xQueueGenericSendFromISR+0x4a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b72e:	2d02      	cmp	r5, #2
 800b730:	d104      	bne.n	800b73c <xQueueGenericSendFromISR+0x28>
 800b732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b734:	2b01      	cmp	r3, #1
 800b736:	d017      	beq.n	800b768 <xQueueGenericSendFromISR+0x54>
 800b738:	b672      	cpsid	i
 800b73a:	e7fe      	b.n	800b73a <xQueueGenericSendFromISR+0x26>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b73c:	f001 f83a 	bl	800c7b4 <ulSetInterruptMaskFromISR>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b740:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b742:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b744:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b746:	429a      	cmp	r2, r3
 800b748:	d312      	bcc.n	800b770 <xQueueGenericSendFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 800b74a:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b74c:	4640      	mov	r0, r8
 800b74e:	f001 f835 	bl	800c7bc <vClearInterruptMaskFromISR>
}
 800b752:	0028      	movs	r0, r5
 800b754:	bce0      	pop	{r5, r6, r7}
 800b756:	46ba      	mov	sl, r7
 800b758:	46b1      	mov	r9, r6
 800b75a:	46a8      	mov	r8, r5
 800b75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b75e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d0e4      	beq.n	800b72e <xQueueGenericSendFromISR+0x1a>
 800b764:	b672      	cpsid	i
 800b766:	e7fe      	b.n	800b766 <xQueueGenericSendFromISR+0x52>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b768:	f001 f824 	bl	800c7b4 <ulSetInterruptMaskFromISR>
 800b76c:	4680      	mov	r8, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b76e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800b770:	2345      	movs	r3, #69	; 0x45
 800b772:	469a      	mov	sl, r3
 800b774:	5ce3      	ldrb	r3, [r4, r3]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b776:	002a      	movs	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 800b778:	b25b      	sxtb	r3, r3
 800b77a:	4699      	mov	r9, r3
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b77c:	0039      	movs	r1, r7
 800b77e:	0020      	movs	r0, r4
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b780:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b782:	f7ff fdfd 	bl	800b380 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b786:	464b      	mov	r3, r9
 800b788:	3301      	adds	r3, #1
 800b78a:	d008      	beq.n	800b79e <xQueueGenericSendFromISR+0x8a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b78c:	464b      	mov	r3, r9
 800b78e:	4652      	mov	r2, sl
 800b790:	3301      	adds	r3, #1
 800b792:	b25b      	sxtb	r3, r3
			xReturn = pdPASS;
 800b794:	2501      	movs	r5, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b796:	54a3      	strb	r3, [r4, r2]
 800b798:	e7d8      	b.n	800b74c <xQueueGenericSendFromISR+0x38>
	configASSERT( pxQueue );
 800b79a:	b672      	cpsid	i
 800b79c:	e7fe      	b.n	800b79c <xQueueGenericSendFromISR+0x88>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b79e:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800b7a0:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d0d2      	beq.n	800b74c <xQueueGenericSendFromISR+0x38>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7a6:	0020      	movs	r0, r4
 800b7a8:	3024      	adds	r0, #36	; 0x24
 800b7aa:	f000 fccb 	bl	800c144 <xTaskRemoveFromEventList>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d0cc      	beq.n	800b74c <xQueueGenericSendFromISR+0x38>
							if( pxHigherPriorityTaskWoken != NULL )
 800b7b2:	2e00      	cmp	r6, #0
 800b7b4:	d0ca      	beq.n	800b74c <xQueueGenericSendFromISR+0x38>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b7b6:	6035      	str	r5, [r6, #0]
 800b7b8:	e7c8      	b.n	800b74c <xQueueGenericSendFromISR+0x38>
 800b7ba:	46c0      	nop			; (mov r8, r8)

0800b7bc <xQueueReceive>:
{
 800b7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7be:	46ce      	mov	lr, r9
 800b7c0:	4647      	mov	r7, r8
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	0004      	movs	r4, r0
 800b7c8:	000d      	movs	r5, r1
 800b7ca:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d100      	bne.n	800b7d2 <xQueueReceive+0x16>
 800b7d0:	e074      	b.n	800b8bc <xQueueReceive+0x100>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7d2:	2900      	cmp	r1, #0
 800b7d4:	d04a      	beq.n	800b86c <xQueueReceive+0xb0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7d6:	f000 fd41 	bl	800c25c <xTaskGetSchedulerState>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d04b      	beq.n	800b876 <xQueueReceive+0xba>
		taskENTER_CRITICAL();
 800b7de:	f000 ffcf 	bl	800c780 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b7e4:	4699      	mov	r9, r3
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d16a      	bne.n	800b8c0 <xQueueReceive+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7ea:	9b01      	ldr	r3, [sp, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d035      	beq.n	800b85c <xQueueReceive+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7f0:	a802      	add	r0, sp, #8
 800b7f2:	f000 fce7 	bl	800c1c4 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2744      	movs	r7, #68	; 0x44
 800b7fa:	4698      	mov	r8, r3
 800b7fc:	2645      	movs	r6, #69	; 0x45
		taskEXIT_CRITICAL();
 800b7fe:	f000 ffcb 	bl	800c798 <vPortExitCritical>
		vTaskSuspendAll();
 800b802:	f000 fab7 	bl	800bd74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b806:	f000 ffbb 	bl	800c780 <vPortEnterCritical>
 800b80a:	5de3      	ldrb	r3, [r4, r7]
 800b80c:	b25b      	sxtb	r3, r3
 800b80e:	3301      	adds	r3, #1
 800b810:	d101      	bne.n	800b816 <xQueueReceive+0x5a>
 800b812:	4643      	mov	r3, r8
 800b814:	55e3      	strb	r3, [r4, r7]
 800b816:	5da3      	ldrb	r3, [r4, r6]
 800b818:	b25b      	sxtb	r3, r3
 800b81a:	3301      	adds	r3, #1
 800b81c:	d101      	bne.n	800b822 <xQueueReceive+0x66>
 800b81e:	4643      	mov	r3, r8
 800b820:	55a3      	strb	r3, [r4, r6]
 800b822:	f000 ffb9 	bl	800c798 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b826:	a901      	add	r1, sp, #4
 800b828:	a802      	add	r0, sp, #8
 800b82a:	f000 fcd7 	bl	800c1dc <xTaskCheckForTimeOut>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d126      	bne.n	800b880 <xQueueReceive+0xc4>
	taskENTER_CRITICAL();
 800b832:	f000 ffa5 	bl	800c780 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d02e      	beq.n	800b89a <xQueueReceive+0xde>
	taskEXIT_CRITICAL();
 800b83c:	f000 ffac 	bl	800c798 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b840:	0020      	movs	r0, r4
 800b842:	f7ff fdd7 	bl	800b3f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b846:	f000 fbed 	bl	800c024 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800b84a:	f000 ff99 	bl	800c780 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b84e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b850:	4699      	mov	r9, r3
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b852:	2b00      	cmp	r3, #0
 800b854:	d134      	bne.n	800b8c0 <xQueueReceive+0x104>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b856:	9b01      	ldr	r3, [sp, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1d0      	bne.n	800b7fe <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 800b85c:	f000 ff9c 	bl	800c798 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b860:	2000      	movs	r0, #0
}
 800b862:	b005      	add	sp, #20
 800b864:	bcc0      	pop	{r6, r7}
 800b866:	46b9      	mov	r9, r7
 800b868:	46b0      	mov	r8, r6
 800b86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b86c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0b1      	beq.n	800b7d6 <xQueueReceive+0x1a>
 800b872:	b672      	cpsid	i
 800b874:	e7fe      	b.n	800b874 <xQueueReceive+0xb8>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d0b0      	beq.n	800b7de <xQueueReceive+0x22>
 800b87c:	b672      	cpsid	i
 800b87e:	e7fe      	b.n	800b87e <xQueueReceive+0xc2>
			prvUnlockQueue( pxQueue );
 800b880:	0020      	movs	r0, r4
 800b882:	f7ff fdb7 	bl	800b3f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b886:	f000 fbcd 	bl	800c024 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800b88a:	f000 ff79 	bl	800c780 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b88e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0e3      	beq.n	800b85c <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 800b894:	f000 ff80 	bl	800c798 <vPortExitCritical>
		taskENTER_CRITICAL();
 800b898:	e7d7      	b.n	800b84a <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 800b89a:	f000 ff7d 	bl	800c798 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b89e:	0020      	movs	r0, r4
 800b8a0:	9901      	ldr	r1, [sp, #4]
 800b8a2:	3024      	adds	r0, #36	; 0x24
 800b8a4:	f000 fc24 	bl	800c0f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8a8:	0020      	movs	r0, r4
 800b8aa:	f7ff fda3 	bl	800b3f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8ae:	f000 fbb9 	bl	800c024 <xTaskResumeAll>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d1c9      	bne.n	800b84a <xQueueReceive+0x8e>
					portYIELD_WITHIN_API();
 800b8b6:	f000 ff57 	bl	800c768 <vPortYield>
		taskENTER_CRITICAL();
 800b8ba:	e7c6      	b.n	800b84a <xQueueReceive+0x8e>
	configASSERT( ( pxQueue ) );
 800b8bc:	b672      	cpsid	i
 800b8be:	e7fe      	b.n	800b8be <xQueueReceive+0x102>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b8c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b8c2:	2a00      	cmp	r2, #0
 800b8c4:	d00a      	beq.n	800b8dc <xQueueReceive+0x120>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8c6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b8c8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8ca:	1889      	adds	r1, r1, r2
 800b8cc:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b8ce:	4299      	cmp	r1, r3
 800b8d0:	d301      	bcc.n	800b8d6 <xQueueReceive+0x11a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b8d2:	6821      	ldr	r1, [r4, #0]
 800b8d4:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8d6:	0028      	movs	r0, r5
 800b8d8:	f003 fa26 	bl	800ed28 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b8dc:	464b      	mov	r3, r9
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d103      	bne.n	800b8f0 <xQueueReceive+0x134>
				taskEXIT_CRITICAL();
 800b8e8:	f000 ff56 	bl	800c798 <vPortExitCritical>
				return pdPASS;
 800b8ec:	2001      	movs	r0, #1
 800b8ee:	e7b8      	b.n	800b862 <xQueueReceive+0xa6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8f0:	0020      	movs	r0, r4
 800b8f2:	3010      	adds	r0, #16
 800b8f4:	f000 fc26 	bl	800c144 <xTaskRemoveFromEventList>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d0f5      	beq.n	800b8e8 <xQueueReceive+0x12c>
						queueYIELD_IF_USING_PREEMPTION();
 800b8fc:	f000 ff34 	bl	800c768 <vPortYield>
 800b900:	e7f2      	b.n	800b8e8 <xQueueReceive+0x12c>
 800b902:	46c0      	nop			; (mov r8, r8)

0800b904 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b904:	b530      	push	{r4, r5, lr}
 800b906:	4d08      	ldr	r5, [pc, #32]	; (800b928 <vQueueAddToRegistry+0x24>)
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b908:	2300      	movs	r3, #0
 800b90a:	002a      	movs	r2, r5
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b90c:	6814      	ldr	r4, [r2, #0]
 800b90e:	2c00      	cmp	r4, #0
 800b910:	d004      	beq.n	800b91c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b912:	3301      	adds	r3, #1
 800b914:	3208      	adds	r2, #8
 800b916:	2b08      	cmp	r3, #8
 800b918:	d1f8      	bne.n	800b90c <vQueueAddToRegistry+0x8>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b91a:	bd30      	pop	{r4, r5, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b91c:	00db      	lsls	r3, r3, #3
 800b91e:	50e9      	str	r1, [r5, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b920:	18ed      	adds	r5, r5, r3
 800b922:	6068      	str	r0, [r5, #4]
				break;
 800b924:	e7f9      	b.n	800b91a <vQueueAddToRegistry+0x16>
 800b926:	46c0      	nop			; (mov r8, r8)
 800b928:	20005250 	.word	0x20005250

0800b92c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b92c:	b570      	push	{r4, r5, r6, lr}
 800b92e:	0004      	movs	r4, r0
 800b930:	0016      	movs	r6, r2
 800b932:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b934:	f000 ff24 	bl	800c780 <vPortEnterCritical>
 800b938:	2244      	movs	r2, #68	; 0x44
 800b93a:	5ca3      	ldrb	r3, [r4, r2]
 800b93c:	b25b      	sxtb	r3, r3
 800b93e:	3301      	adds	r3, #1
 800b940:	d101      	bne.n	800b946 <vQueueWaitForMessageRestricted+0x1a>
 800b942:	2300      	movs	r3, #0
 800b944:	54a3      	strb	r3, [r4, r2]
 800b946:	2245      	movs	r2, #69	; 0x45
 800b948:	5ca3      	ldrb	r3, [r4, r2]
 800b94a:	b25b      	sxtb	r3, r3
 800b94c:	3301      	adds	r3, #1
 800b94e:	d101      	bne.n	800b954 <vQueueWaitForMessageRestricted+0x28>
 800b950:	2300      	movs	r3, #0
 800b952:	54a3      	strb	r3, [r4, r2]
 800b954:	f000 ff20 	bl	800c798 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d003      	beq.n	800b966 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b95e:	0020      	movs	r0, r4
 800b960:	f7ff fd48 	bl	800b3f4 <prvUnlockQueue>
	}
 800b964:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b966:	0020      	movs	r0, r4
 800b968:	0032      	movs	r2, r6
 800b96a:	0029      	movs	r1, r5
 800b96c:	3024      	adds	r0, #36	; 0x24
 800b96e:	f000 fbd1 	bl	800c114 <vTaskPlaceOnEventListRestricted>
 800b972:	e7f4      	b.n	800b95e <vQueueWaitForMessageRestricted+0x32>

0800b974 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b976:	46c6      	mov	lr, r8
 800b978:	b500      	push	{lr}
 800b97a:	0005      	movs	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b97c:	f000 ff00 	bl	800c780 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b980:	4a32      	ldr	r2, [pc, #200]	; (800ba4c <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 800b982:	4f33      	ldr	r7, [pc, #204]	; (800ba50 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 800b984:	6813      	ldr	r3, [r2, #0]
 800b986:	3301      	adds	r3, #1
 800b988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d02b      	beq.n	800b9e8 <prvAddNewTaskToReadyList+0x74>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b990:	4c30      	ldr	r4, [pc, #192]	; (800ba54 <prvAddNewTaskToReadyList+0xe0>)
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d01f      	beq.n	800b9d8 <prvAddNewTaskToReadyList+0x64>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b998:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b99a:	4e2f      	ldr	r6, [pc, #188]	; (800ba58 <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b99c:	492f      	ldr	r1, [pc, #188]	; (800ba5c <prvAddNewTaskToReadyList+0xe8>)
 800b99e:	680b      	ldr	r3, [r1, #0]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	600b      	str	r3, [r1, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b9a4:	646b      	str	r3, [r5, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ba60 <prvAddNewTaskToReadyList+0xec>)
 800b9a8:	6819      	ldr	r1, [r3, #0]
 800b9aa:	4291      	cmp	r1, r2
 800b9ac:	d200      	bcs.n	800b9b0 <prvAddNewTaskToReadyList+0x3c>
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	0093      	lsls	r3, r2, #2
 800b9b2:	189b      	adds	r3, r3, r2
 800b9b4:	0098      	lsls	r0, r3, #2
 800b9b6:	1d29      	adds	r1, r5, #4
 800b9b8:	1830      	adds	r0, r6, r0
 800b9ba:	f7ff fcab 	bl	800b314 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9be:	f000 feeb 	bl	800c798 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9c2:	6823      	ldr	r3, [r4, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d004      	beq.n	800b9d2 <prvAddNewTaskToReadyList+0x5e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d312      	bcc.n	800b9f8 <prvAddNewTaskToReadyList+0x84>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9d2:	bc80      	pop	{r7}
 800b9d4:	46b8      	mov	r8, r7
 800b9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d800      	bhi.n	800b9e4 <prvAddNewTaskToReadyList+0x70>
					pxCurrentTCB = pxNewTCB;
 800b9e2:	603d      	str	r5, [r7, #0]
 800b9e4:	4e1c      	ldr	r6, [pc, #112]	; (800ba58 <prvAddNewTaskToReadyList+0xe4>)
 800b9e6:	e7d9      	b.n	800b99c <prvAddNewTaskToReadyList+0x28>
			pxCurrentTCB = pxNewTCB;
 800b9e8:	603d      	str	r5, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b9ea:	6813      	ldr	r3, [r2, #0]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d006      	beq.n	800b9fe <prvAddNewTaskToReadyList+0x8a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b9f0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800b9f2:	4e19      	ldr	r6, [pc, #100]	; (800ba58 <prvAddNewTaskToReadyList+0xe4>)
 800b9f4:	4c17      	ldr	r4, [pc, #92]	; (800ba54 <prvAddNewTaskToReadyList+0xe0>)
 800b9f6:	e7d1      	b.n	800b99c <prvAddNewTaskToReadyList+0x28>
			taskYIELD_IF_USING_PREEMPTION();
 800b9f8:	f000 feb6 	bl	800c768 <vPortYield>
}
 800b9fc:	e7e9      	b.n	800b9d2 <prvAddNewTaskToReadyList+0x5e>
 800b9fe:	238c      	movs	r3, #140	; 0x8c
 800ba00:	4e15      	ldr	r6, [pc, #84]	; (800ba58 <prvAddNewTaskToReadyList+0xe4>)
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	4698      	mov	r8, r3
 800ba06:	0034      	movs	r4, r6
 800ba08:	44b0      	add	r8, r6
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba0a:	0020      	movs	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba0c:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba0e:	f7ff fc71 	bl	800b2f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba12:	45a0      	cmp	r8, r4
 800ba14:	d1f9      	bne.n	800ba0a <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba16:	4b13      	ldr	r3, [pc, #76]	; (800ba64 <prvAddNewTaskToReadyList+0xf0>)
 800ba18:	4698      	mov	r8, r3
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	f7ff fc6a 	bl	800b2f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba20:	4c11      	ldr	r4, [pc, #68]	; (800ba68 <prvAddNewTaskToReadyList+0xf4>)
 800ba22:	0020      	movs	r0, r4
 800ba24:	f7ff fc66 	bl	800b2f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba28:	4810      	ldr	r0, [pc, #64]	; (800ba6c <prvAddNewTaskToReadyList+0xf8>)
 800ba2a:	f7ff fc63 	bl	800b2f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba2e:	4810      	ldr	r0, [pc, #64]	; (800ba70 <prvAddNewTaskToReadyList+0xfc>)
 800ba30:	f7ff fc60 	bl	800b2f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba34:	480f      	ldr	r0, [pc, #60]	; (800ba74 <prvAddNewTaskToReadyList+0x100>)
 800ba36:	f7ff fc5d 	bl	800b2f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba3a:	4642      	mov	r2, r8
 800ba3c:	4b0e      	ldr	r3, [pc, #56]	; (800ba78 <prvAddNewTaskToReadyList+0x104>)
 800ba3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba40:	4b0e      	ldr	r3, [pc, #56]	; (800ba7c <prvAddNewTaskToReadyList+0x108>)
		prvAddTaskToReadyList( pxNewTCB );
 800ba42:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba44:	601c      	str	r4, [r3, #0]
 800ba46:	4c03      	ldr	r4, [pc, #12]	; (800ba54 <prvAddNewTaskToReadyList+0xe0>)
}
 800ba48:	e7a8      	b.n	800b99c <prvAddNewTaskToReadyList+0x28>
 800ba4a:	46c0      	nop			; (mov r8, r8)
 800ba4c:	200056fc 	.word	0x200056fc
 800ba50:	20005290 	.word	0x20005290
 800ba54:	20005758 	.word	0x20005758
 800ba58:	2000529c 	.word	0x2000529c
 800ba5c:	20005708 	.word	0x20005708
 800ba60:	2000570c 	.word	0x2000570c
 800ba64:	20005710 	.word	0x20005710
 800ba68:	20005724 	.word	0x20005724
 800ba6c:	20005744 	.word	0x20005744
 800ba70:	20005770 	.word	0x20005770
 800ba74:	2000575c 	.word	0x2000575c
 800ba78:	20005294 	.word	0x20005294
 800ba7c:	20005298 	.word	0x20005298

0800ba80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba82:	0006      	movs	r6, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba84:	4b14      	ldr	r3, [pc, #80]	; (800bad8 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba86:	4c15      	ldr	r4, [pc, #84]	; (800badc <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 800ba88:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba8a:	6820      	ldr	r0, [r4, #0]
{
 800ba8c:	000d      	movs	r5, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba8e:	3004      	adds	r0, #4
 800ba90:	f7ff fc64 	bl	800b35c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba94:	1c73      	adds	r3, r6, #1
 800ba96:	d017      	beq.n	800bac8 <prvAddCurrentTaskToDelayedList+0x48>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba98:	6823      	ldr	r3, [r4, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba9a:	19be      	adds	r6, r7, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba9c:	605e      	str	r6, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800ba9e:	42b7      	cmp	r7, r6
 800baa0:	d80b      	bhi.n	800baba <prvAddCurrentTaskToDelayedList+0x3a>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baa2:	4b0f      	ldr	r3, [pc, #60]	; (800bae0 <prvAddCurrentTaskToDelayedList+0x60>)
 800baa4:	6818      	ldr	r0, [r3, #0]
 800baa6:	6821      	ldr	r1, [r4, #0]
 800baa8:	3104      	adds	r1, #4
 800baaa:	f7ff fc3f 	bl	800b32c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800baae:	4b0d      	ldr	r3, [pc, #52]	; (800bae4 <prvAddCurrentTaskToDelayedList+0x64>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	42b2      	cmp	r2, r6
 800bab4:	d900      	bls.n	800bab8 <prvAddCurrentTaskToDelayedList+0x38>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800bab6:	601e      	str	r6, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baba:	4b0b      	ldr	r3, [pc, #44]	; (800bae8 <prvAddCurrentTaskToDelayedList+0x68>)
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	6821      	ldr	r1, [r4, #0]
 800bac0:	3104      	adds	r1, #4
 800bac2:	f7ff fc33 	bl	800b32c <vListInsert>
 800bac6:	e7f7      	b.n	800bab8 <prvAddCurrentTaskToDelayedList+0x38>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bac8:	2d00      	cmp	r5, #0
 800baca:	d0e5      	beq.n	800ba98 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bacc:	6821      	ldr	r1, [r4, #0]
 800bace:	4807      	ldr	r0, [pc, #28]	; (800baec <prvAddCurrentTaskToDelayedList+0x6c>)
 800bad0:	3104      	adds	r1, #4
 800bad2:	f7ff fc1f 	bl	800b314 <vListInsertEnd>
 800bad6:	e7ef      	b.n	800bab8 <prvAddCurrentTaskToDelayedList+0x38>
 800bad8:	20005784 	.word	0x20005784
 800badc:	20005290 	.word	0x20005290
 800bae0:	20005294 	.word	0x20005294
 800bae4:	20005738 	.word	0x20005738
 800bae8:	20005298 	.word	0x20005298
 800baec:	2000575c 	.word	0x2000575c

0800baf0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800baf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800baf2:	46d6      	mov	lr, sl
 800baf4:	464f      	mov	r7, r9
 800baf6:	4646      	mov	r6, r8
 800baf8:	b5c0      	push	{r6, r7, lr}
 800bafa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bafc:	0094      	lsls	r4, r2, #2
 800bafe:	0022      	movs	r2, r4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bb00:	4681      	mov	r9, r0
 800bb02:	000f      	movs	r7, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb04:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800bb06:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bb08:	469a      	mov	sl, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bb0a:	f002 ff3b 	bl	800e984 <memset>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb0e:	2207      	movs	r2, #7
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bb10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800bb12:	3c04      	subs	r4, #4
 800bb14:	191b      	adds	r3, r3, r4
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bb16:	4393      	bics	r3, r2
 800bb18:	4698      	mov	r8, r3
	if( pcName != NULL )
 800bb1a:	2f00      	cmp	r7, #0
 800bb1c:	d040      	beq.n	800bba0 <prvInitialiseNewTask.constprop.0+0xb0>
 800bb1e:	002b      	movs	r3, r5
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb20:	2400      	movs	r4, #0
 800bb22:	3334      	adds	r3, #52	; 0x34
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bb24:	5d3e      	ldrb	r6, [r7, r4]
 800bb26:	551e      	strb	r6, [r3, r4]
			if( pcName[ x ] == ( char ) 0x00 )
 800bb28:	2e00      	cmp	r6, #0
 800bb2a:	d002      	beq.n	800bb32 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bb2c:	3401      	adds	r4, #1
 800bb2e:	2c10      	cmp	r4, #16
 800bb30:	d1f8      	bne.n	800bb24 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bb32:	2343      	movs	r3, #67	; 0x43
 800bb34:	2200      	movs	r2, #0
 800bb36:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bb38:	9c08      	ldr	r4, [sp, #32]
 800bb3a:	2c37      	cmp	r4, #55	; 0x37
 800bb3c:	d900      	bls.n	800bb40 <prvInitialiseNewTask.constprop.0+0x50>
 800bb3e:	2437      	movs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800bb40:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb42:	1d28      	adds	r0, r5, #4
	pxNewTCB->uxPriority = uxPriority;
 800bb44:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800bb46:	64ec      	str	r4, [r5, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bb48:	652e      	str	r6, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb4a:	f7ff fbdf 	bl	800b30c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb4e:	0028      	movs	r0, r5
 800bb50:	3018      	adds	r0, #24
 800bb52:	f7ff fbdb 	bl	800b30c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb56:	2338      	movs	r3, #56	; 0x38
 800bb58:	1b1b      	subs	r3, r3, r4
 800bb5a:	61ab      	str	r3, [r5, #24]
		pxNewTCB->ulNotifiedValue = 0;
 800bb5c:	23a0      	movs	r3, #160	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb5e:	0028      	movs	r0, r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb60:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb62:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800bb64:	50ee      	str	r6, [r5, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb66:	3304      	adds	r3, #4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb68:	224c      	movs	r2, #76	; 0x4c
 800bb6a:	2100      	movs	r1, #0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb6c:	54ee      	strb	r6, [r5, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb6e:	3054      	adds	r0, #84	; 0x54
 800bb70:	f002 ff08 	bl	800e984 <memset>
 800bb74:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb76:	4649      	mov	r1, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bb78:	001a      	movs	r2, r3
 800bb7a:	65ab      	str	r3, [r5, #88]	; 0x58
 800bb7c:	3268      	adds	r2, #104	; 0x68
 800bb7e:	33d0      	adds	r3, #208	; 0xd0
 800bb80:	65ea      	str	r2, [r5, #92]	; 0x5c
 800bb82:	662b      	str	r3, [r5, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb84:	4652      	mov	r2, sl
 800bb86:	4640      	mov	r0, r8
 800bb88:	f000 fddc 	bl	800c744 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800bb8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb8e:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d000      	beq.n	800bb96 <prvInitialiseNewTask.constprop.0+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb94:	601d      	str	r5, [r3, #0]
}
 800bb96:	bce0      	pop	{r5, r6, r7}
 800bb98:	46ba      	mov	sl, r7
 800bb9a:	46b1      	mov	r9, r6
 800bb9c:	46a8      	mov	r8, r5
 800bb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bba0:	2334      	movs	r3, #52	; 0x34
 800bba2:	54ef      	strb	r7, [r5, r3]
 800bba4:	e7c8      	b.n	800bb38 <prvInitialiseNewTask.constprop.0+0x48>
 800bba6:	46c0      	nop			; (mov r8, r8)
 800bba8:	200064e0 	.word	0x200064e0

0800bbac <prvIdleTask>:
{
 800bbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbae:	4647      	mov	r7, r8
 800bbb0:	46ce      	mov	lr, r9
 800bbb2:	4b1e      	ldr	r3, [pc, #120]	; (800bc2c <prvIdleTask+0x80>)
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	4698      	mov	r8, r3
 800bbb8:	4b1d      	ldr	r3, [pc, #116]	; (800bc30 <prvIdleTask+0x84>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbba:	27a5      	movs	r7, #165	; 0xa5
 800bbbc:	4699      	mov	r9, r3
 800bbbe:	4d1d      	ldr	r5, [pc, #116]	; (800bc34 <prvIdleTask+0x88>)
 800bbc0:	4e1d      	ldr	r6, [pc, #116]	; (800bc38 <prvIdleTask+0x8c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbc2:	682b      	ldr	r3, [r5, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d025      	beq.n	800bc14 <prvIdleTask+0x68>
			taskENTER_CRITICAL();
 800bbc8:	f000 fdda 	bl	800c780 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbcc:	4643      	mov	r3, r8
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbd2:	1d20      	adds	r0, r4, #4
 800bbd4:	f7ff fbc2 	bl	800b35c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbd8:	6833      	ldr	r3, [r6, #0]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbde:	682b      	ldr	r3, [r5, #0]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
 800bbe4:	f000 fdd8 	bl	800c798 <vPortExitCritical>
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bbe8:	0020      	movs	r0, r4
 800bbea:	3054      	adds	r0, #84	; 0x54
 800bbec:	f002 ffb0 	bl	800eb50 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbf0:	5de3      	ldrb	r3, [r4, r7]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d005      	beq.n	800bc02 <prvIdleTask+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d013      	beq.n	800bc22 <prvIdleTask+0x76>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	d0e1      	beq.n	800bbc2 <prvIdleTask+0x16>
 800bbfe:	b672      	cpsid	i
 800bc00:	e7fe      	b.n	800bc00 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 800bc02:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bc04:	f000 ff18 	bl	800ca38 <vPortFree>
				vPortFree( pxTCB );
 800bc08:	0020      	movs	r0, r4
 800bc0a:	f000 ff15 	bl	800ca38 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc0e:	682b      	ldr	r3, [r5, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d1d9      	bne.n	800bbc8 <prvIdleTask+0x1c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc14:	464b      	mov	r3, r9
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d9d2      	bls.n	800bbc2 <prvIdleTask+0x16>
				taskYIELD();
 800bc1c:	f000 fda4 	bl	800c768 <vPortYield>
 800bc20:	e7cf      	b.n	800bbc2 <prvIdleTask+0x16>
				vPortFree( pxTCB );
 800bc22:	0020      	movs	r0, r4
 800bc24:	f000 ff08 	bl	800ca38 <vPortFree>
 800bc28:	e7cb      	b.n	800bbc2 <prvIdleTask+0x16>
 800bc2a:	46c0      	nop			; (mov r8, r8)
 800bc2c:	20005770 	.word	0x20005770
 800bc30:	2000529c 	.word	0x2000529c
 800bc34:	20005700 	.word	0x20005700
 800bc38:	200056fc 	.word	0x200056fc

0800bc3c <xTaskCreateStatic>:
	{
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 800bc40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bc42:	2c00      	cmp	r4, #0
 800bc44:	d00b      	beq.n	800bc5e <xTaskCreateStatic+0x22>
		configASSERT( pxTaskBuffer != NULL );
 800bc46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bc48:	2c00      	cmp	r4, #0
 800bc4a:	d006      	beq.n	800bc5a <xTaskCreateStatic+0x1e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc4c:	24a8      	movs	r4, #168	; 0xa8
 800bc4e:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc50:	9c05      	ldr	r4, [sp, #20]
 800bc52:	2ca8      	cmp	r4, #168	; 0xa8
 800bc54:	d005      	beq.n	800bc62 <xTaskCreateStatic+0x26>
 800bc56:	b672      	cpsid	i
 800bc58:	e7fe      	b.n	800bc58 <xTaskCreateStatic+0x1c>
		configASSERT( pxTaskBuffer != NULL );
 800bc5a:	b672      	cpsid	i
 800bc5c:	e7fe      	b.n	800bc5c <xTaskCreateStatic+0x20>
		configASSERT( puxStackBuffer != NULL );
 800bc5e:	b672      	cpsid	i
 800bc60:	e7fe      	b.n	800bc60 <xTaskCreateStatic+0x24>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc64:	9c05      	ldr	r4, [sp, #20]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc68:	9e0c      	ldr	r6, [sp, #48]	; 0x30
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc6a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc6c:	24a5      	movs	r4, #165	; 0xa5
 800bc6e:	2502      	movs	r5, #2
 800bc70:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc72:	ac04      	add	r4, sp, #16
 800bc74:	9401      	str	r4, [sp, #4]
 800bc76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc78:	9602      	str	r6, [sp, #8]
 800bc7a:	9400      	str	r4, [sp, #0]
 800bc7c:	f7ff ff38 	bl	800baf0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc80:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bc82:	f7ff fe77 	bl	800b974 <prvAddNewTaskToReadyList>
		return xReturn;
 800bc86:	9804      	ldr	r0, [sp, #16]
	}
 800bc88:	b006      	add	sp, #24
 800bc8a:	bd70      	pop	{r4, r5, r6, pc}

0800bc8c <xTaskCreate>:
	{
 800bc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc8e:	46ce      	mov	lr, r9
 800bc90:	4647      	mov	r7, r8
 800bc92:	b580      	push	{r7, lr}
 800bc94:	0007      	movs	r7, r0
 800bc96:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc98:	0090      	lsls	r0, r2, #2
	{
 800bc9a:	4688      	mov	r8, r1
 800bc9c:	0015      	movs	r5, r2
 800bc9e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bca0:	f000 fe36 	bl	800c910 <pvPortMalloc>
 800bca4:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 800bca6:	d01c      	beq.n	800bce2 <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bca8:	20a8      	movs	r0, #168	; 0xa8
 800bcaa:	f000 fe31 	bl	800c910 <pvPortMalloc>
 800bcae:	1e06      	subs	r6, r0, #0
				if( pxNewTCB != NULL )
 800bcb0:	d01a      	beq.n	800bce8 <xTaskCreate+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bcb2:	23a5      	movs	r3, #165	; 0xa5
 800bcb4:	2200      	movs	r2, #0
					pxNewTCB->pxStack = pxStack;
 800bcb6:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bcb8:	54c2      	strb	r2, [r0, r3]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bcba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcbc:	002a      	movs	r2, r5
 800bcbe:	9301      	str	r3, [sp, #4]
 800bcc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcc2:	4641      	mov	r1, r8
 800bcc4:	9002      	str	r0, [sp, #8]
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	0038      	movs	r0, r7
 800bcca:	464b      	mov	r3, r9
 800bccc:	f7ff ff10 	bl	800baf0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcd0:	0030      	movs	r0, r6
 800bcd2:	f7ff fe4f 	bl	800b974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bcd6:	2001      	movs	r0, #1
	}
 800bcd8:	b005      	add	sp, #20
 800bcda:	bcc0      	pop	{r6, r7}
 800bcdc:	46b9      	mov	r9, r7
 800bcde:	46b0      	mov	r8, r6
 800bce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bce2:	2001      	movs	r0, #1
 800bce4:	4240      	negs	r0, r0
		return xReturn;
 800bce6:	e7f7      	b.n	800bcd8 <xTaskCreate+0x4c>
					vPortFree( pxStack );
 800bce8:	0020      	movs	r0, r4
 800bcea:	f000 fea5 	bl	800ca38 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bcee:	2001      	movs	r0, #1
 800bcf0:	4240      	negs	r0, r0
 800bcf2:	e7f1      	b.n	800bcd8 <xTaskCreate+0x4c>

0800bcf4 <vTaskStartScheduler>:
{
 800bcf4:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcf6:	2400      	movs	r4, #0
{
 800bcf8:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcfa:	aa07      	add	r2, sp, #28
 800bcfc:	a906      	add	r1, sp, #24
 800bcfe:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bd00:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bd02:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bd04:	f7ff fade 	bl	800b2c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bd08:	9b05      	ldr	r3, [sp, #20]
 800bd0a:	9a07      	ldr	r2, [sp, #28]
 800bd0c:	9302      	str	r3, [sp, #8]
 800bd0e:	9b06      	ldr	r3, [sp, #24]
 800bd10:	4911      	ldr	r1, [pc, #68]	; (800bd58 <vTaskStartScheduler+0x64>)
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	4811      	ldr	r0, [pc, #68]	; (800bd5c <vTaskStartScheduler+0x68>)
 800bd16:	2300      	movs	r3, #0
 800bd18:	9400      	str	r4, [sp, #0]
 800bd1a:	f7ff ff8f 	bl	800bc3c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	d013      	beq.n	800bd4a <vTaskStartScheduler+0x56>
			xReturn = xTimerCreateTimerTask();
 800bd22:	f000 fb17 	bl	800c354 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800bd26:	2801      	cmp	r0, #1
 800bd28:	d111      	bne.n	800bd4e <vTaskStartScheduler+0x5a>
		portDISABLE_INTERRUPTS();
 800bd2a:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bd2c:	4b0c      	ldr	r3, [pc, #48]	; (800bd60 <vTaskStartScheduler+0x6c>)
 800bd2e:	4a0d      	ldr	r2, [pc, #52]	; (800bd64 <vTaskStartScheduler+0x70>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	3354      	adds	r3, #84	; 0x54
 800bd34:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd36:	2201      	movs	r2, #1
 800bd38:	4b0b      	ldr	r3, [pc, #44]	; (800bd68 <vTaskStartScheduler+0x74>)
 800bd3a:	4252      	negs	r2, r2
 800bd3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd3e:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <vTaskStartScheduler+0x78>)
 800bd40:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd42:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <vTaskStartScheduler+0x7c>)
 800bd44:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800bd46:	f000 fd91 	bl	800c86c <xPortStartScheduler>
}
 800bd4a:	b008      	add	sp, #32
 800bd4c:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd4e:	3001      	adds	r0, #1
 800bd50:	d1fb      	bne.n	800bd4a <vTaskStartScheduler+0x56>
 800bd52:	b672      	cpsid	i
 800bd54:	e7fe      	b.n	800bd54 <vTaskStartScheduler+0x60>
 800bd56:	46c0      	nop			; (mov r8, r8)
 800bd58:	080136bc 	.word	0x080136bc
 800bd5c:	0800bbad 	.word	0x0800bbad
 800bd60:	20005290 	.word	0x20005290
 800bd64:	200002f0 	.word	0x200002f0
 800bd68:	20005738 	.word	0x20005738
 800bd6c:	20005758 	.word	0x20005758
 800bd70:	20005784 	.word	0x20005784

0800bd74 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800bd74:	4a02      	ldr	r2, [pc, #8]	; (800bd80 <vTaskSuspendAll+0xc>)
 800bd76:	6813      	ldr	r3, [r2, #0]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	6013      	str	r3, [r2, #0]
}
 800bd7c:	4770      	bx	lr
 800bd7e:	46c0      	nop			; (mov r8, r8)
 800bd80:	20005704 	.word	0x20005704

0800bd84 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800bd84:	4b01      	ldr	r3, [pc, #4]	; (800bd8c <xTaskGetTickCount+0x8>)
 800bd86:	6818      	ldr	r0, [r3, #0]
}
 800bd88:	4770      	bx	lr
 800bd8a:	46c0      	nop			; (mov r8, r8)
 800bd8c:	20005784 	.word	0x20005784

0800bd90 <xTaskIncrementTick>:
{
 800bd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd92:	46de      	mov	lr, fp
 800bd94:	4657      	mov	r7, sl
 800bd96:	464e      	mov	r6, r9
 800bd98:	4645      	mov	r5, r8
 800bd9a:	b5e0      	push	{r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd9c:	4b51      	ldr	r3, [pc, #324]	; (800bee4 <xTaskIncrementTick+0x154>)
{
 800bd9e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d148      	bne.n	800be38 <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bda6:	4b50      	ldr	r3, [pc, #320]	; (800bee8 <xTaskIncrementTick+0x158>)
 800bda8:	681d      	ldr	r5, [r3, #0]
 800bdaa:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800bdac:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdae:	2d00      	cmp	r5, #0
 800bdb0:	d050      	beq.n	800be54 <xTaskIncrementTick+0xc4>
 800bdb2:	4b4e      	ldr	r3, [pc, #312]	; (800beec <xTaskIncrementTick+0x15c>)
 800bdb4:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bdb6:	9b01      	ldr	r3, [sp, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	429d      	cmp	r5, r3
 800bdbc:	d351      	bcc.n	800be62 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdbe:	4f4c      	ldr	r7, [pc, #304]	; (800bef0 <xTaskIncrementTick+0x160>)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d100      	bne.n	800bdca <xTaskIncrementTick+0x3a>
 800bdc8:	e078      	b.n	800bebc <xTaskIncrementTick+0x12c>
BaseType_t xSwitchRequired = pdFALSE;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	4698      	mov	r8, r3
 800bdce:	4b49      	ldr	r3, [pc, #292]	; (800bef4 <xTaskIncrementTick+0x164>)
 800bdd0:	469a      	mov	sl, r3
 800bdd2:	4b49      	ldr	r3, [pc, #292]	; (800bef8 <xTaskIncrementTick+0x168>)
 800bdd4:	469b      	mov	fp, r3
					prvAddTaskToReadyList( pxTCB );
 800bdd6:	4b49      	ldr	r3, [pc, #292]	; (800befc <xTaskIncrementTick+0x16c>)
 800bdd8:	4699      	mov	r9, r3
 800bdda:	e024      	b.n	800be26 <xTaskIncrementTick+0x96>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bddc:	1d26      	adds	r6, r4, #4
 800bdde:	0030      	movs	r0, r6
 800bde0:	f7ff fabc 	bl	800b35c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bde4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d003      	beq.n	800bdf2 <xTaskIncrementTick+0x62>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdea:	0020      	movs	r0, r4
 800bdec:	3018      	adds	r0, #24
 800bdee:	f7ff fab5 	bl	800b35c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdf2:	464a      	mov	r2, r9
 800bdf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bdf6:	6812      	ldr	r2, [r2, #0]
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d901      	bls.n	800be00 <xTaskIncrementTick+0x70>
 800bdfc:	464a      	mov	r2, r9
 800bdfe:	6013      	str	r3, [r2, #0]
 800be00:	0098      	lsls	r0, r3, #2
 800be02:	18c0      	adds	r0, r0, r3
 800be04:	0080      	lsls	r0, r0, #2
 800be06:	0031      	movs	r1, r6
 800be08:	4450      	add	r0, sl
 800be0a:	f7ff fa83 	bl	800b314 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be0e:	465b      	mov	r3, fp
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800be14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be16:	429a      	cmp	r2, r3
 800be18:	d301      	bcc.n	800be1e <xTaskIncrementTick+0x8e>
							xSwitchRequired = pdTRUE;
 800be1a:	2301      	movs	r3, #1
 800be1c:	4698      	mov	r8, r3
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d050      	beq.n	800bec8 <xTaskIncrementTick+0x138>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be2c:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800be2e:	429d      	cmp	r5, r3
 800be30:	d2d4      	bcs.n	800bddc <xTaskIncrementTick+0x4c>
						xNextTaskUnblockTime = xItemValue;
 800be32:	9a01      	ldr	r2, [sp, #4]
 800be34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be36:	e01a      	b.n	800be6e <xTaskIncrementTick+0xde>
		++xPendedTicks;
 800be38:	4a31      	ldr	r2, [pc, #196]	; (800bf00 <xTaskIncrementTick+0x170>)
 800be3a:	6813      	ldr	r3, [r2, #0]
 800be3c:	3301      	adds	r3, #1
 800be3e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800be40:	2300      	movs	r3, #0
 800be42:	4698      	mov	r8, r3
}
 800be44:	4640      	mov	r0, r8
 800be46:	b003      	add	sp, #12
 800be48:	bcf0      	pop	{r4, r5, r6, r7}
 800be4a:	46bb      	mov	fp, r7
 800be4c:	46b2      	mov	sl, r6
 800be4e:	46a9      	mov	r9, r5
 800be50:	46a0      	mov	r8, r4
 800be52:	bdf0      	pop	{r4, r5, r6, r7, pc}
			taskSWITCH_DELAYED_LISTS();
 800be54:	4b26      	ldr	r3, [pc, #152]	; (800bef0 <xTaskIncrementTick+0x160>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	2a00      	cmp	r2, #0
 800be5c:	d01a      	beq.n	800be94 <xTaskIncrementTick+0x104>
 800be5e:	b672      	cpsid	i
 800be60:	e7fe      	b.n	800be60 <xTaskIncrementTick+0xd0>
BaseType_t xSwitchRequired = pdFALSE;
 800be62:	2300      	movs	r3, #0
 800be64:	4698      	mov	r8, r3
 800be66:	4b23      	ldr	r3, [pc, #140]	; (800bef4 <xTaskIncrementTick+0x164>)
 800be68:	469a      	mov	sl, r3
 800be6a:	4b23      	ldr	r3, [pc, #140]	; (800bef8 <xTaskIncrementTick+0x168>)
 800be6c:	469b      	mov	fp, r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be6e:	465b      	mov	r3, fp
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be74:	0093      	lsls	r3, r2, #2
 800be76:	189b      	adds	r3, r3, r2
 800be78:	4652      	mov	r2, sl
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	58d3      	ldr	r3, [r2, r3]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d901      	bls.n	800be86 <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 800be82:	2301      	movs	r3, #1
 800be84:	4698      	mov	r8, r3
			if( xYieldPending != pdFALSE )
 800be86:	4b1f      	ldr	r3, [pc, #124]	; (800bf04 <xTaskIncrementTick+0x174>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0da      	beq.n	800be44 <xTaskIncrementTick+0xb4>
				xSwitchRequired = pdTRUE;
 800be8e:	2301      	movs	r3, #1
 800be90:	4698      	mov	r8, r3
 800be92:	e7d7      	b.n	800be44 <xTaskIncrementTick+0xb4>
			taskSWITCH_DELAYED_LISTS();
 800be94:	4a1c      	ldr	r2, [pc, #112]	; (800bf08 <xTaskIncrementTick+0x178>)
 800be96:	6819      	ldr	r1, [r3, #0]
 800be98:	6810      	ldr	r0, [r2, #0]
 800be9a:	6018      	str	r0, [r3, #0]
 800be9c:	6011      	str	r1, [r2, #0]
 800be9e:	491b      	ldr	r1, [pc, #108]	; (800bf0c <xTaskIncrementTick+0x17c>)
 800bea0:	680a      	ldr	r2, [r1, #0]
 800bea2:	3201      	adds	r2, #1
 800bea4:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	6812      	ldr	r2, [r2, #0]
 800beaa:	2a00      	cmp	r2, #0
 800beac:	d111      	bne.n	800bed2 <xTaskIncrementTick+0x142>
		xNextTaskUnblockTime = portMAX_DELAY;
 800beae:	4b0f      	ldr	r3, [pc, #60]	; (800beec <xTaskIncrementTick+0x15c>)
 800beb0:	001a      	movs	r2, r3
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	2301      	movs	r3, #1
 800beb6:	425b      	negs	r3, r3
 800beb8:	6013      	str	r3, [r2, #0]
 800beba:	e77c      	b.n	800bdb6 <xTaskIncrementTick+0x26>
BaseType_t xSwitchRequired = pdFALSE;
 800bebc:	2300      	movs	r3, #0
 800bebe:	4698      	mov	r8, r3
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <xTaskIncrementTick+0x164>)
 800bec2:	469a      	mov	sl, r3
 800bec4:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <xTaskIncrementTick+0x168>)
 800bec6:	469b      	mov	fp, r3
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bec8:	2301      	movs	r3, #1
 800beca:	9a01      	ldr	r2, [sp, #4]
 800becc:	425b      	negs	r3, r3
 800bece:	6013      	str	r3, [r2, #0]
					break;
 800bed0:	e7cd      	b.n	800be6e <xTaskIncrementTick+0xde>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bed4:	4a05      	ldr	r2, [pc, #20]	; (800beec <xTaskIncrementTick+0x15c>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bed8:	9201      	str	r2, [sp, #4]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	6013      	str	r3, [r2, #0]
}
 800bee0:	e769      	b.n	800bdb6 <xTaskIncrementTick+0x26>
 800bee2:	46c0      	nop			; (mov r8, r8)
 800bee4:	20005704 	.word	0x20005704
 800bee8:	20005784 	.word	0x20005784
 800beec:	20005738 	.word	0x20005738
 800bef0:	20005294 	.word	0x20005294
 800bef4:	2000529c 	.word	0x2000529c
 800bef8:	20005290 	.word	0x20005290
 800befc:	2000570c 	.word	0x2000570c
 800bf00:	20005740 	.word	0x20005740
 800bf04:	20005788 	.word	0x20005788
 800bf08:	20005298 	.word	0x20005298
 800bf0c:	2000573c 	.word	0x2000573c

0800bf10 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	46de      	mov	lr, fp
 800bf14:	4657      	mov	r7, sl
 800bf16:	464e      	mov	r6, r9
 800bf18:	4645      	mov	r5, r8
 800bf1a:	b5e0      	push	{r5, r6, r7, lr}
	taskENTER_CRITICAL();
 800bf1c:	f000 fc30 	bl	800c780 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800bf20:	4b36      	ldr	r3, [pc, #216]	; (800bffc <xTaskResumeAll.part.0+0xec>)
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	3a01      	subs	r2, #1
 800bf26:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d154      	bne.n	800bfd8 <xTaskResumeAll.part.0+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf2e:	4b34      	ldr	r3, [pc, #208]	; (800c000 <xTaskResumeAll.part.0+0xf0>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d050      	beq.n	800bfd8 <xTaskResumeAll.part.0+0xc8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf36:	4e33      	ldr	r6, [pc, #204]	; (800c004 <xTaskResumeAll.part.0+0xf4>)
 800bf38:	6833      	ldr	r3, [r6, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d05a      	beq.n	800bff4 <xTaskResumeAll.part.0+0xe4>
 800bf3e:	4b32      	ldr	r3, [pc, #200]	; (800c008 <xTaskResumeAll.part.0+0xf8>)
 800bf40:	4f32      	ldr	r7, [pc, #200]	; (800c00c <xTaskResumeAll.part.0+0xfc>)
 800bf42:	4699      	mov	r9, r3
 800bf44:	4b32      	ldr	r3, [pc, #200]	; (800c010 <xTaskResumeAll.part.0+0x100>)
 800bf46:	4698      	mov	r8, r3
 800bf48:	4b32      	ldr	r3, [pc, #200]	; (800c014 <xTaskResumeAll.part.0+0x104>)
 800bf4a:	469a      	mov	sl, r3
						xYieldPending = pdTRUE;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	469b      	mov	fp, r3
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf50:	68f3      	ldr	r3, [r6, #12]
 800bf52:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf54:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf56:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf58:	3018      	adds	r0, #24
 800bf5a:	f7ff f9ff 	bl	800b35c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf5e:	0028      	movs	r0, r5
 800bf60:	f7ff f9fc 	bl	800b35c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d900      	bls.n	800bf6e <xTaskResumeAll.part.0+0x5e>
 800bf6c:	603b      	str	r3, [r7, #0]
 800bf6e:	0098      	lsls	r0, r3, #2
 800bf70:	18c0      	adds	r0, r0, r3
 800bf72:	0080      	lsls	r0, r0, #2
 800bf74:	0029      	movs	r1, r5
 800bf76:	4448      	add	r0, r9
 800bf78:	f7ff f9cc 	bl	800b314 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf7c:	4643      	mov	r3, r8
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d302      	bcc.n	800bf8e <xTaskResumeAll.part.0+0x7e>
						xYieldPending = pdTRUE;
 800bf88:	4653      	mov	r3, sl
 800bf8a:	465a      	mov	r2, fp
 800bf8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf8e:	6833      	ldr	r3, [r6, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1dd      	bne.n	800bf50 <xTaskResumeAll.part.0+0x40>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf94:	4b20      	ldr	r3, [pc, #128]	; (800c018 <xTaskResumeAll.part.0+0x108>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	6812      	ldr	r2, [r2, #0]
 800bf9a:	2a00      	cmp	r2, #0
 800bf9c:	d026      	beq.n	800bfec <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	4b1d      	ldr	r3, [pc, #116]	; (800c01c <xTaskResumeAll.part.0+0x10c>)
 800bfa8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bfaa:	4e1d      	ldr	r6, [pc, #116]	; (800c020 <xTaskResumeAll.part.0+0x110>)
 800bfac:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800bfae:	2c00      	cmp	r4, #0
 800bfb0:	d00a      	beq.n	800bfc8 <xTaskResumeAll.part.0+0xb8>
								xYieldPending = pdTRUE;
 800bfb2:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800bfb4:	f7ff feec 	bl	800bd90 <xTaskIncrementTick>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d001      	beq.n	800bfc0 <xTaskResumeAll.part.0+0xb0>
								xYieldPending = pdTRUE;
 800bfbc:	4653      	mov	r3, sl
 800bfbe:	601d      	str	r5, [r3, #0]
							--xPendedCounts;
 800bfc0:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bfc2:	2c00      	cmp	r4, #0
 800bfc4:	d1f6      	bne.n	800bfb4 <xTaskResumeAll.part.0+0xa4>
						xPendedTicks = 0;
 800bfc6:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800bfc8:	4653      	mov	r3, sl
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d003      	beq.n	800bfd8 <xTaskResumeAll.part.0+0xc8>
					taskYIELD_IF_USING_PREEMPTION();
 800bfd0:	f000 fbca 	bl	800c768 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800bfd4:	2401      	movs	r4, #1
 800bfd6:	e000      	b.n	800bfda <xTaskResumeAll.part.0+0xca>
BaseType_t xAlreadyYielded = pdFALSE;
 800bfd8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800bfda:	f000 fbdd 	bl	800c798 <vPortExitCritical>
}
 800bfde:	0020      	movs	r0, r4
 800bfe0:	bcf0      	pop	{r4, r5, r6, r7}
 800bfe2:	46bb      	mov	fp, r7
 800bfe4:	46b2      	mov	sl, r6
 800bfe6:	46a9      	mov	r9, r5
 800bfe8:	46a0      	mov	r8, r4
 800bfea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfec:	4b0b      	ldr	r3, [pc, #44]	; (800c01c <xTaskResumeAll.part.0+0x10c>)
 800bfee:	3a01      	subs	r2, #1
 800bff0:	601a      	str	r2, [r3, #0]
 800bff2:	e7da      	b.n	800bfaa <xTaskResumeAll.part.0+0x9a>
 800bff4:	4b07      	ldr	r3, [pc, #28]	; (800c014 <xTaskResumeAll.part.0+0x104>)
 800bff6:	469a      	mov	sl, r3
 800bff8:	e7d7      	b.n	800bfaa <xTaskResumeAll.part.0+0x9a>
 800bffa:	46c0      	nop			; (mov r8, r8)
 800bffc:	20005704 	.word	0x20005704
 800c000:	200056fc 	.word	0x200056fc
 800c004:	20005744 	.word	0x20005744
 800c008:	2000529c 	.word	0x2000529c
 800c00c:	2000570c 	.word	0x2000570c
 800c010:	20005290 	.word	0x20005290
 800c014:	20005788 	.word	0x20005788
 800c018:	20005294 	.word	0x20005294
 800c01c:	20005738 	.word	0x20005738
 800c020:	20005740 	.word	0x20005740

0800c024 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800c024:	4b04      	ldr	r3, [pc, #16]	; (800c038 <xTaskResumeAll+0x14>)
{
 800c026:	b510      	push	{r4, lr}
	configASSERT( uxSchedulerSuspended );
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d101      	bne.n	800c032 <xTaskResumeAll+0xe>
 800c02e:	b672      	cpsid	i
 800c030:	e7fe      	b.n	800c030 <xTaskResumeAll+0xc>
 800c032:	f7ff ff6d 	bl	800bf10 <xTaskResumeAll.part.0>
}
 800c036:	bd10      	pop	{r4, pc}
 800c038:	20005704 	.word	0x20005704

0800c03c <vTaskDelay>:
	{
 800c03c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c03e:	2800      	cmp	r0, #0
 800c040:	d014      	beq.n	800c06c <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 800c042:	4c0c      	ldr	r4, [pc, #48]	; (800c074 <vTaskDelay+0x38>)
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d001      	beq.n	800c04e <vTaskDelay+0x12>
 800c04a:	b672      	cpsid	i
 800c04c:	e7fe      	b.n	800c04c <vTaskDelay+0x10>
	++uxSchedulerSuspended;
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	3301      	adds	r3, #1
 800c052:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c054:	2100      	movs	r1, #0
 800c056:	f7ff fd13 	bl	800ba80 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d101      	bne.n	800c064 <vTaskDelay+0x28>
 800c060:	b672      	cpsid	i
 800c062:	e7fe      	b.n	800c062 <vTaskDelay+0x26>
 800c064:	f7ff ff54 	bl	800bf10 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800c068:	2800      	cmp	r0, #0
 800c06a:	d101      	bne.n	800c070 <vTaskDelay+0x34>
			portYIELD_WITHIN_API();
 800c06c:	f000 fb7c 	bl	800c768 <vPortYield>
	}
 800c070:	bd10      	pop	{r4, pc}
 800c072:	46c0      	nop			; (mov r8, r8)
 800c074:	20005704 	.word	0x20005704

0800c078 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c078:	4b17      	ldr	r3, [pc, #92]	; (800c0d8 <vTaskSwitchContext+0x60>)
{
 800c07a:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d003      	beq.n	800c08a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800c082:	2201      	movs	r2, #1
 800c084:	4b15      	ldr	r3, [pc, #84]	; (800c0dc <vTaskSwitchContext+0x64>)
 800c086:	601a      	str	r2, [r3, #0]
}
 800c088:	bd30      	pop	{r4, r5, pc}
		xYieldPending = pdFALSE;
 800c08a:	4a14      	ldr	r2, [pc, #80]	; (800c0dc <vTaskSwitchContext+0x64>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c08c:	4c14      	ldr	r4, [pc, #80]	; (800c0e0 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 800c08e:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	4814      	ldr	r0, [pc, #80]	; (800c0e4 <vTaskSwitchContext+0x6c>)
 800c094:	e002      	b.n	800c09c <vTaskSwitchContext+0x24>
 800c096:	2b00      	cmp	r3, #0
 800c098:	d019      	beq.n	800c0ce <vTaskSwitchContext+0x56>
 800c09a:	3b01      	subs	r3, #1
 800c09c:	0099      	lsls	r1, r3, #2
 800c09e:	18ca      	adds	r2, r1, r3
 800c0a0:	0092      	lsls	r2, r2, #2
 800c0a2:	5882      	ldr	r2, [r0, r2]
 800c0a4:	2a00      	cmp	r2, #0
 800c0a6:	d0f6      	beq.n	800c096 <vTaskSwitchContext+0x1e>
 800c0a8:	18c9      	adds	r1, r1, r3
 800c0aa:	0089      	lsls	r1, r1, #2
 800c0ac:	1845      	adds	r5, r0, r1
 800c0ae:	686a      	ldr	r2, [r5, #4]
 800c0b0:	3108      	adds	r1, #8
 800c0b2:	6852      	ldr	r2, [r2, #4]
 800c0b4:	1840      	adds	r0, r0, r1
 800c0b6:	606a      	str	r2, [r5, #4]
 800c0b8:	4282      	cmp	r2, r0
 800c0ba:	d00a      	beq.n	800c0d2 <vTaskSwitchContext+0x5a>
 800c0bc:	68d1      	ldr	r1, [r2, #12]
 800c0be:	4a0a      	ldr	r2, [pc, #40]	; (800c0e8 <vTaskSwitchContext+0x70>)
 800c0c0:	6011      	str	r1, [r2, #0]
 800c0c2:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c0c4:	6813      	ldr	r3, [r2, #0]
 800c0c6:	4a09      	ldr	r2, [pc, #36]	; (800c0ec <vTaskSwitchContext+0x74>)
 800c0c8:	3354      	adds	r3, #84	; 0x54
 800c0ca:	6013      	str	r3, [r2, #0]
}
 800c0cc:	e7dc      	b.n	800c088 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ce:	b672      	cpsid	i
 800c0d0:	e7fe      	b.n	800c0d0 <vTaskSwitchContext+0x58>
 800c0d2:	6852      	ldr	r2, [r2, #4]
 800c0d4:	606a      	str	r2, [r5, #4]
 800c0d6:	e7f1      	b.n	800c0bc <vTaskSwitchContext+0x44>
 800c0d8:	20005704 	.word	0x20005704
 800c0dc:	20005788 	.word	0x20005788
 800c0e0:	2000570c 	.word	0x2000570c
 800c0e4:	2000529c 	.word	0x2000529c
 800c0e8:	20005290 	.word	0x20005290
 800c0ec:	200002f0 	.word	0x200002f0

0800c0f0 <vTaskPlaceOnEventList>:
{
 800c0f0:	b510      	push	{r4, lr}
 800c0f2:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d009      	beq.n	800c10c <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0f8:	4b05      	ldr	r3, [pc, #20]	; (800c110 <vTaskPlaceOnEventList+0x20>)
 800c0fa:	6819      	ldr	r1, [r3, #0]
 800c0fc:	3118      	adds	r1, #24
 800c0fe:	f7ff f915 	bl	800b32c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c102:	2101      	movs	r1, #1
 800c104:	0020      	movs	r0, r4
 800c106:	f7ff fcbb 	bl	800ba80 <prvAddCurrentTaskToDelayedList>
}
 800c10a:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 800c10c:	b672      	cpsid	i
 800c10e:	e7fe      	b.n	800c10e <vTaskPlaceOnEventList+0x1e>
 800c110:	20005290 	.word	0x20005290

0800c114 <vTaskPlaceOnEventListRestricted>:
	{
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	000d      	movs	r5, r1
 800c118:	0014      	movs	r4, r2
		configASSERT( pxEventList );
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d00d      	beq.n	800c13a <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c11e:	4b08      	ldr	r3, [pc, #32]	; (800c140 <vTaskPlaceOnEventListRestricted+0x2c>)
 800c120:	6819      	ldr	r1, [r3, #0]
 800c122:	3118      	adds	r1, #24
 800c124:	f7ff f8f6 	bl	800b314 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800c128:	2c00      	cmp	r4, #0
 800c12a:	d001      	beq.n	800c130 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
 800c12c:	2501      	movs	r5, #1
 800c12e:	426d      	negs	r5, r5
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c130:	0028      	movs	r0, r5
 800c132:	0021      	movs	r1, r4
 800c134:	f7ff fca4 	bl	800ba80 <prvAddCurrentTaskToDelayedList>
	}
 800c138:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800c13a:	b672      	cpsid	i
 800c13c:	e7fe      	b.n	800c13c <vTaskPlaceOnEventListRestricted+0x28>
 800c13e:	46c0      	nop			; (mov r8, r8)
 800c140:	20005290 	.word	0x20005290

0800c144 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c144:	68c3      	ldr	r3, [r0, #12]
{
 800c146:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c148:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c14a:	2c00      	cmp	r4, #0
 800c14c:	d02b      	beq.n	800c1a6 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c14e:	0025      	movs	r5, r4
 800c150:	3518      	adds	r5, #24
 800c152:	0028      	movs	r0, r5
 800c154:	f7ff f902 	bl	800b35c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c158:	4b14      	ldr	r3, [pc, #80]	; (800c1ac <xTaskRemoveFromEventList+0x68>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00f      	beq.n	800c180 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c160:	0029      	movs	r1, r5
 800c162:	4813      	ldr	r0, [pc, #76]	; (800c1b0 <xTaskRemoveFromEventList+0x6c>)
 800c164:	f7ff f8d6 	bl	800b314 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c168:	4b12      	ldr	r3, [pc, #72]	; (800c1b4 <xTaskRemoveFromEventList+0x70>)
 800c16a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c16c:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
 800c16e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c172:	429a      	cmp	r2, r3
 800c174:	d903      	bls.n	800c17e <xTaskRemoveFromEventList+0x3a>
		xYieldPending = pdTRUE;
 800c176:	2201      	movs	r2, #1
 800c178:	4b0f      	ldr	r3, [pc, #60]	; (800c1b8 <xTaskRemoveFromEventList+0x74>)
		xReturn = pdTRUE;
 800c17a:	3001      	adds	r0, #1
		xYieldPending = pdTRUE;
 800c17c:	601a      	str	r2, [r3, #0]
}
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c180:	1d25      	adds	r5, r4, #4
 800c182:	0028      	movs	r0, r5
 800c184:	f7ff f8ea 	bl	800b35c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c188:	4a0c      	ldr	r2, [pc, #48]	; (800c1bc <xTaskRemoveFromEventList+0x78>)
 800c18a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c18c:	6811      	ldr	r1, [r2, #0]
 800c18e:	428b      	cmp	r3, r1
 800c190:	d900      	bls.n	800c194 <xTaskRemoveFromEventList+0x50>
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	0098      	lsls	r0, r3, #2
 800c196:	18c0      	adds	r0, r0, r3
 800c198:	4b09      	ldr	r3, [pc, #36]	; (800c1c0 <xTaskRemoveFromEventList+0x7c>)
 800c19a:	0080      	lsls	r0, r0, #2
 800c19c:	0029      	movs	r1, r5
 800c19e:	18c0      	adds	r0, r0, r3
 800c1a0:	f7ff f8b8 	bl	800b314 <vListInsertEnd>
 800c1a4:	e7e0      	b.n	800c168 <xTaskRemoveFromEventList+0x24>
	configASSERT( pxUnblockedTCB );
 800c1a6:	b672      	cpsid	i
 800c1a8:	e7fe      	b.n	800c1a8 <xTaskRemoveFromEventList+0x64>
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	20005704 	.word	0x20005704
 800c1b0:	20005744 	.word	0x20005744
 800c1b4:	20005290 	.word	0x20005290
 800c1b8:	20005788 	.word	0x20005788
 800c1bc:	2000570c 	.word	0x2000570c
 800c1c0:	2000529c 	.word	0x2000529c

0800c1c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1c4:	4b03      	ldr	r3, [pc, #12]	; (800c1d4 <vTaskInternalSetTimeOutState+0x10>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1ca:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <vTaskInternalSetTimeOutState+0x14>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	6043      	str	r3, [r0, #4]
}
 800c1d0:	4770      	bx	lr
 800c1d2:	46c0      	nop			; (mov r8, r8)
 800c1d4:	2000573c 	.word	0x2000573c
 800c1d8:	20005784 	.word	0x20005784

0800c1dc <xTaskCheckForTimeOut>:
{
 800c1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1de:	46c6      	mov	lr, r8
 800c1e0:	0004      	movs	r4, r0
 800c1e2:	000d      	movs	r5, r1
 800c1e4:	b500      	push	{lr}
	configASSERT( pxTimeOut );
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d025      	beq.n	800c236 <xTaskCheckForTimeOut+0x5a>
	configASSERT( pxTicksToWait );
 800c1ea:	2900      	cmp	r1, #0
 800c1ec:	d021      	beq.n	800c232 <xTaskCheckForTimeOut+0x56>
	taskENTER_CRITICAL();
 800c1ee:	f000 fac7 	bl	800c780 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c1f2:	4a15      	ldr	r2, [pc, #84]	; (800c248 <xTaskCheckForTimeOut+0x6c>)
			if( *pxTicksToWait == portMAX_DELAY )
 800c1f4:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800c1f6:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800c1f8:	1c58      	adds	r0, r3, #1
 800c1fa:	d01e      	beq.n	800c23a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c1fc:	4f13      	ldr	r7, [pc, #76]	; (800c24c <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c1fe:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c200:	683e      	ldr	r6, [r7, #0]
 800c202:	46b0      	mov	r8, r6
 800c204:	6826      	ldr	r6, [r4, #0]
 800c206:	4546      	cmp	r6, r8
 800c208:	d002      	beq.n	800c210 <xTaskCheckForTimeOut+0x34>
			xReturn = pdTRUE;
 800c20a:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c20c:	4288      	cmp	r0, r1
 800c20e:	d90a      	bls.n	800c226 <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c210:	1a0e      	subs	r6, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c212:	42b3      	cmp	r3, r6
 800c214:	d913      	bls.n	800c23e <xTaskCheckForTimeOut+0x62>
			xReturn = pdFALSE;
 800c216:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 800c218:	1a5b      	subs	r3, r3, r1
 800c21a:	181b      	adds	r3, r3, r0
 800c21c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	6023      	str	r3, [r4, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c222:	6813      	ldr	r3, [r2, #0]
 800c224:	6063      	str	r3, [r4, #4]
	taskEXIT_CRITICAL();
 800c226:	f000 fab7 	bl	800c798 <vPortExitCritical>
}
 800c22a:	0030      	movs	r0, r6
 800c22c:	bc80      	pop	{r7}
 800c22e:	46b8      	mov	r8, r7
 800c230:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxTicksToWait );
 800c232:	b672      	cpsid	i
 800c234:	e7fe      	b.n	800c234 <xTaskCheckForTimeOut+0x58>
	configASSERT( pxTimeOut );
 800c236:	b672      	cpsid	i
 800c238:	e7fe      	b.n	800c238 <xTaskCheckForTimeOut+0x5c>
				xReturn = pdFALSE;
 800c23a:	2600      	movs	r6, #0
 800c23c:	e7f3      	b.n	800c226 <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
 800c23e:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800c240:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800c242:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800c244:	e7ef      	b.n	800c226 <xTaskCheckForTimeOut+0x4a>
 800c246:	46c0      	nop			; (mov r8, r8)
 800c248:	20005784 	.word	0x20005784
 800c24c:	2000573c 	.word	0x2000573c

0800c250 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c250:	2201      	movs	r2, #1
 800c252:	4b01      	ldr	r3, [pc, #4]	; (800c258 <vTaskMissedYield+0x8>)
 800c254:	601a      	str	r2, [r3, #0]
}
 800c256:	4770      	bx	lr
 800c258:	20005788 	.word	0x20005788

0800c25c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c25c:	4b05      	ldr	r3, [pc, #20]	; (800c274 <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c25e:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d004      	beq.n	800c270 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c266:	4b04      	ldr	r3, [pc, #16]	; (800c278 <xTaskGetSchedulerState+0x1c>)
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	4243      	negs	r3, r0
 800c26c:	4158      	adcs	r0, r3
 800c26e:	0040      	lsls	r0, r0, #1
	}
 800c270:	4770      	bx	lr
 800c272:	46c0      	nop			; (mov r8, r8)
 800c274:	20005758 	.word	0x20005758
 800c278:	20005704 	.word	0x20005704

0800c27c <xTaskPriorityDisinherit>:
	{
 800c27c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800c27e:	2800      	cmp	r0, #0
 800c280:	d010      	beq.n	800c2a4 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB == pxCurrentTCB );
 800c282:	4b16      	ldr	r3, [pc, #88]	; (800c2dc <xTaskPriorityDisinherit+0x60>)
 800c284:	681c      	ldr	r4, [r3, #0]
 800c286:	4284      	cmp	r4, r0
 800c288:	d001      	beq.n	800c28e <xTaskPriorityDisinherit+0x12>
 800c28a:	b672      	cpsid	i
 800c28c:	e7fe      	b.n	800c28c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800c28e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c290:	2b00      	cmp	r3, #0
 800c292:	d009      	beq.n	800c2a8 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c294:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c296:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800c298:	3b01      	subs	r3, #1
 800c29a:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c29c:	4291      	cmp	r1, r2
 800c29e:	d001      	beq.n	800c2a4 <xTaskPriorityDisinherit+0x28>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d003      	beq.n	800c2ac <xTaskPriorityDisinherit+0x30>
	BaseType_t xReturn = pdFALSE;
 800c2a4:	2000      	movs	r0, #0
	}
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB->uxMutexesHeld );
 800c2a8:	b672      	cpsid	i
 800c2aa:	e7fe      	b.n	800c2aa <xTaskPriorityDisinherit+0x2e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2ac:	1d25      	adds	r5, r4, #4
 800c2ae:	0028      	movs	r0, r5
 800c2b0:	f7ff f854 	bl	800b35c <uxListRemove>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2b4:	2238      	movs	r2, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2b8:	1ad2      	subs	r2, r2, r3
 800c2ba:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2bc:	4a08      	ldr	r2, [pc, #32]	; (800c2e0 <xTaskPriorityDisinherit+0x64>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2be:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800c2c0:	6811      	ldr	r1, [r2, #0]
 800c2c2:	428b      	cmp	r3, r1
 800c2c4:	d900      	bls.n	800c2c8 <xTaskPriorityDisinherit+0x4c>
 800c2c6:	6013      	str	r3, [r2, #0]
 800c2c8:	0098      	lsls	r0, r3, #2
 800c2ca:	18c0      	adds	r0, r0, r3
 800c2cc:	4b05      	ldr	r3, [pc, #20]	; (800c2e4 <xTaskPriorityDisinherit+0x68>)
 800c2ce:	0080      	lsls	r0, r0, #2
 800c2d0:	18c0      	adds	r0, r0, r3
 800c2d2:	0029      	movs	r1, r5
 800c2d4:	f7ff f81e 	bl	800b314 <vListInsertEnd>
					xReturn = pdTRUE;
 800c2d8:	2001      	movs	r0, #1
		return xReturn;
 800c2da:	e7e4      	b.n	800c2a6 <xTaskPriorityDisinherit+0x2a>
 800c2dc:	20005290 	.word	0x20005290
 800c2e0:	2000570c 	.word	0x2000570c
 800c2e4:	2000529c 	.word	0x2000529c

0800c2e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ea:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2ec:	f000 fa48 	bl	800c780 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2f0:	4c10      	ldr	r4, [pc, #64]	; (800c334 <prvCheckForValidListAndQueue+0x4c>)
 800c2f2:	6825      	ldr	r5, [r4, #0]
 800c2f4:	2d00      	cmp	r5, #0
 800c2f6:	d003      	beq.n	800c300 <prvCheckForValidListAndQueue+0x18>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2f8:	f000 fa4e 	bl	800c798 <vPortExitCritical>
}
 800c2fc:	b003      	add	sp, #12
 800c2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			vListInitialise( &xActiveTimerList1 );
 800c300:	4f0d      	ldr	r7, [pc, #52]	; (800c338 <prvCheckForValidListAndQueue+0x50>)
 800c302:	0038      	movs	r0, r7
 800c304:	f7fe fff6 	bl	800b2f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c308:	4e0c      	ldr	r6, [pc, #48]	; (800c33c <prvCheckForValidListAndQueue+0x54>)
 800c30a:	0030      	movs	r0, r6
 800c30c:	f7fe fff2 	bl	800b2f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c310:	4b0b      	ldr	r3, [pc, #44]	; (800c340 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c312:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c314:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c316:	4b0b      	ldr	r3, [pc, #44]	; (800c344 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c318:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c31a:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c31c:	4a0a      	ldr	r2, [pc, #40]	; (800c348 <prvCheckForValidListAndQueue+0x60>)
 800c31e:	4b0b      	ldr	r3, [pc, #44]	; (800c34c <prvCheckForValidListAndQueue+0x64>)
 800c320:	9500      	str	r5, [sp, #0]
 800c322:	f7ff f91f 	bl	800b564 <xQueueGenericCreateStatic>
 800c326:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800c328:	2800      	cmp	r0, #0
 800c32a:	d0e5      	beq.n	800c2f8 <prvCheckForValidListAndQueue+0x10>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c32c:	4908      	ldr	r1, [pc, #32]	; (800c350 <prvCheckForValidListAndQueue+0x68>)
 800c32e:	f7ff fae9 	bl	800b904 <vQueueAddToRegistry>
 800c332:	e7e1      	b.n	800c2f8 <prvCheckForValidListAndQueue+0x10>
 800c334:	200058b0 	.word	0x200058b0
 800c338:	20005834 	.word	0x20005834
 800c33c:	20005848 	.word	0x20005848
 800c340:	2000578c 	.word	0x2000578c
 800c344:	20005790 	.word	0x20005790
 800c348:	20005794 	.word	0x20005794
 800c34c:	20005860 	.word	0x20005860
 800c350:	080136c4 	.word	0x080136c4

0800c354 <xTimerCreateTimerTask>:
{
 800c354:	b500      	push	{lr}
 800c356:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 800c358:	f7ff ffc6 	bl	800c2e8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c35c:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <xTimerCreateTimerTask+0x4c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d01a      	beq.n	800c39a <xTimerCreateTimerTask+0x46>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c364:	2300      	movs	r3, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c366:	aa07      	add	r2, sp, #28
 800c368:	a906      	add	r1, sp, #24
 800c36a:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c36c:	9305      	str	r3, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c36e:	9306      	str	r3, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c370:	f7fe ffb4 	bl	800b2dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c374:	9b05      	ldr	r3, [sp, #20]
 800c376:	9a07      	ldr	r2, [sp, #28]
 800c378:	9302      	str	r3, [sp, #8]
 800c37a:	9b06      	ldr	r3, [sp, #24]
 800c37c:	4909      	ldr	r1, [pc, #36]	; (800c3a4 <xTimerCreateTimerTask+0x50>)
 800c37e:	9301      	str	r3, [sp, #4]
 800c380:	2302      	movs	r3, #2
 800c382:	4809      	ldr	r0, [pc, #36]	; (800c3a8 <xTimerCreateTimerTask+0x54>)
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	2300      	movs	r3, #0
 800c388:	f7ff fc58 	bl	800bc3c <xTaskCreateStatic>
 800c38c:	4b07      	ldr	r3, [pc, #28]	; (800c3ac <xTimerCreateTimerTask+0x58>)
 800c38e:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c390:	2800      	cmp	r0, #0
 800c392:	d002      	beq.n	800c39a <xTimerCreateTimerTask+0x46>
}
 800c394:	2001      	movs	r0, #1
 800c396:	b009      	add	sp, #36	; 0x24
 800c398:	bd00      	pop	{pc}
	configASSERT( xReturn );
 800c39a:	b672      	cpsid	i
 800c39c:	e7fe      	b.n	800c39c <xTimerCreateTimerTask+0x48>
 800c39e:	46c0      	nop			; (mov r8, r8)
 800c3a0:	200058b0 	.word	0x200058b0
 800c3a4:	080136cc 	.word	0x080136cc
 800c3a8:	0800c48d 	.word	0x0800c48d
 800c3ac:	200058b4 	.word	0x200058b4

0800c3b0 <xTimerGenericCommand>:
{
 800c3b0:	b570      	push	{r4, r5, r6, lr}
 800c3b2:	001c      	movs	r4, r3
 800c3b4:	b084      	sub	sp, #16
	configASSERT( xTimer );
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	d016      	beq.n	800c3e8 <xTimerGenericCommand+0x38>
	if( xTimerQueue != NULL )
 800c3ba:	4e13      	ldr	r6, [pc, #76]	; (800c408 <xTimerGenericCommand+0x58>)
 800c3bc:	6835      	ldr	r5, [r6, #0]
 800c3be:	2d00      	cmp	r5, #0
 800c3c0:	d00f      	beq.n	800c3e2 <xTimerGenericCommand+0x32>
		xMessage.xMessageID = xCommandID;
 800c3c2:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3c4:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c3c6:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c3c8:	2905      	cmp	r1, #5
 800c3ca:	dc0f      	bgt.n	800c3ec <xTimerGenericCommand+0x3c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c3cc:	f7ff ff46 	bl	800c25c <xTaskGetSchedulerState>
 800c3d0:	2802      	cmp	r0, #2
 800c3d2:	d012      	beq.n	800c3fa <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	4669      	mov	r1, sp
 800c3da:	6830      	ldr	r0, [r6, #0]
 800c3dc:	f7ff f900 	bl	800b5e0 <xQueueGenericSend>
 800c3e0:	e000      	b.n	800c3e4 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 800c3e2:	2000      	movs	r0, #0
}
 800c3e4:	b004      	add	sp, #16
 800c3e6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( xTimer );
 800c3e8:	b672      	cpsid	i
 800c3ea:	e7fe      	b.n	800c3ea <xTimerGenericCommand+0x3a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	0022      	movs	r2, r4
 800c3f0:	4669      	mov	r1, sp
 800c3f2:	0028      	movs	r0, r5
 800c3f4:	f7ff f98e 	bl	800b714 <xQueueGenericSendFromISR>
 800c3f8:	e7f4      	b.n	800c3e4 <xTimerGenericCommand+0x34>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4669      	mov	r1, sp
 800c3fe:	6830      	ldr	r0, [r6, #0]
 800c400:	9a08      	ldr	r2, [sp, #32]
 800c402:	f7ff f8ed 	bl	800b5e0 <xQueueGenericSend>
 800c406:	e7ed      	b.n	800c3e4 <xTimerGenericCommand+0x34>
 800c408:	200058b0 	.word	0x200058b0

0800c40c <prvSwitchTimerLists>:
{
 800c40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c40e:	4647      	mov	r7, r8
 800c410:	46ce      	mov	lr, r9
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c412:	2328      	movs	r3, #40	; 0x28
{
 800c414:	b580      	push	{r7, lr}
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c416:	4698      	mov	r8, r3
 800c418:	2704      	movs	r7, #4
 800c41a:	4e1a      	ldr	r6, [pc, #104]	; (800c484 <prvSwitchTimerLists+0x78>)
{
 800c41c:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c41e:	e00e      	b.n	800c43e <prvSwitchTimerLists+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c420:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c422:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c424:	681a      	ldr	r2, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c426:	1d25      	adds	r5, r4, #4
 800c428:	0028      	movs	r0, r5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c42a:	4691      	mov	r9, r2
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c42c:	f7fe ff96 	bl	800b35c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c430:	6a23      	ldr	r3, [r4, #32]
 800c432:	0020      	movs	r0, r4
 800c434:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c436:	4643      	mov	r3, r8
 800c438:	5ce3      	ldrb	r3, [r4, r3]
 800c43a:	421f      	tst	r7, r3
 800c43c:	d10c      	bne.n	800c458 <prvSwitchTimerLists+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c43e:	6833      	ldr	r3, [r6, #0]
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	2a00      	cmp	r2, #0
 800c444:	d1ec      	bne.n	800c420 <prvSwitchTimerLists+0x14>
	pxCurrentTimerList = pxOverflowTimerList;
 800c446:	4a10      	ldr	r2, [pc, #64]	; (800c488 <prvSwitchTimerLists+0x7c>)
 800c448:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c44a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800c44c:	6031      	str	r1, [r6, #0]
}
 800c44e:	b003      	add	sp, #12
 800c450:	bcc0      	pop	{r6, r7}
 800c452:	46b9      	mov	r9, r7
 800c454:	46b0      	mov	r8, r6
 800c456:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c458:	69a3      	ldr	r3, [r4, #24]
 800c45a:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800c45c:	4599      	cmp	r9, r3
 800c45e:	d206      	bcs.n	800c46e <prvSwitchTimerLists+0x62>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c460:	0029      	movs	r1, r5
 800c462:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c464:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c466:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c468:	f7fe ff60 	bl	800b32c <vListInsert>
 800c46c:	e7e7      	b.n	800c43e <prvSwitchTimerLists+0x32>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c46e:	2300      	movs	r3, #0
 800c470:	464a      	mov	r2, r9
 800c472:	2100      	movs	r1, #0
 800c474:	0020      	movs	r0, r4
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	f7ff ff9a 	bl	800c3b0 <xTimerGenericCommand>
				configASSERT( xResult );
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d1de      	bne.n	800c43e <prvSwitchTimerLists+0x32>
 800c480:	b672      	cpsid	i
 800c482:	e7fe      	b.n	800c482 <prvSwitchTimerLists+0x76>
 800c484:	2000578c 	.word	0x2000578c
 800c488:	20005790 	.word	0x20005790

0800c48c <prvTimerTask>:
{
 800c48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c48e:	4645      	mov	r5, r8
 800c490:	4657      	mov	r7, sl
 800c492:	464e      	mov	r6, r9
 800c494:	46de      	mov	lr, fp
 800c496:	b5e0      	push	{r5, r6, r7, lr}
 800c498:	4b8f      	ldr	r3, [pc, #572]	; (800c6d8 <prvTimerTask+0x24c>)
 800c49a:	b089      	sub	sp, #36	; 0x24
 800c49c:	4699      	mov	r9, r3
 800c49e:	4b8f      	ldr	r3, [pc, #572]	; (800c6dc <prvTimerTask+0x250>)
 800c4a0:	4f8f      	ldr	r7, [pc, #572]	; (800c6e0 <prvTimerTask+0x254>)
 800c4a2:	9303      	str	r3, [sp, #12]
 800c4a4:	4b8f      	ldr	r3, [pc, #572]	; (800c6e4 <prvTimerTask+0x258>)
 800c4a6:	4d90      	ldr	r5, [pc, #576]	; (800c6e8 <prvTimerTask+0x25c>)
 800c4a8:	9302      	str	r3, [sp, #8]
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4aa:	2328      	movs	r3, #40	; 0x28
 800c4ac:	4698      	mov	r8, r3
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4ae:	464b      	mov	r3, r9
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681e      	ldr	r6, [r3, #0]
 800c4b4:	2e00      	cmp	r6, #0
 800c4b6:	d100      	bne.n	800c4ba <prvTimerTask+0x2e>
 800c4b8:	e090      	b.n	800c5dc <prvTimerTask+0x150>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 800c4be:	f7ff fc59 	bl	800bd74 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c4c2:	f7ff fc5f 	bl	800bd84 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c4c6:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c4c8:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800c4ca:	4283      	cmp	r3, r0
 800c4cc:	d900      	bls.n	800c4d0 <prvTimerTask+0x44>
 800c4ce:	e09f      	b.n	800c610 <prvTimerTask+0x184>
	xLastTime = xTimeNow;
 800c4d0:	6038      	str	r0, [r7, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4d2:	4286      	cmp	r6, r0
 800c4d4:	d800      	bhi.n	800c4d8 <prvTimerTask+0x4c>
 800c4d6:	e0a4      	b.n	800c622 <prvTimerTask+0x196>
 800c4d8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4da:	6828      	ldr	r0, [r5, #0]
 800c4dc:	1b31      	subs	r1, r6, r4
 800c4de:	f7ff fa25 	bl	800b92c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c4e2:	f7ff fd9f 	bl	800c024 <xTaskResumeAll>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	d100      	bne.n	800c4ec <prvTimerTask+0x60>
 800c4ea:	e08e      	b.n	800c60a <prvTimerTask+0x17e>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4ec:	2302      	movs	r3, #2
 800c4ee:	469b      	mov	fp, r3
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	469a      	mov	sl, r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	6828      	ldr	r0, [r5, #0]
 800c4f8:	a904      	add	r1, sp, #16
 800c4fa:	f7ff f95f 	bl	800b7bc <xQueueReceive>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d0d5      	beq.n	800c4ae <prvTimerTask+0x22>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c502:	9b04      	ldr	r3, [sp, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	db61      	blt.n	800c5cc <prvTimerTask+0x140>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c508:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c50a:	6963      	ldr	r3, [r4, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c510:	1d20      	adds	r0, r4, #4
 800c512:	f7fe ff23 	bl	800b35c <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800c516:	f7ff fc35 	bl	800bd84 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c51a:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c51c:	0006      	movs	r6, r0
	if( xTimeNow < xLastTime )
 800c51e:	4298      	cmp	r0, r3
 800c520:	d37c      	bcc.n	800c61c <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 800c522:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
 800c524:	603e      	str	r6, [r7, #0]
			switch( xMessage.xMessageID )
 800c526:	2b09      	cmp	r3, #9
 800c528:	d8e4      	bhi.n	800c4f4 <prvTimerTask+0x68>
 800c52a:	9a02      	ldr	r2, [sp, #8]
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	58d3      	ldr	r3, [r2, r3]
 800c530:	469f      	mov	pc, r3
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c532:	4643      	mov	r3, r8
 800c534:	2201      	movs	r2, #1
 800c536:	5ce3      	ldrb	r3, [r4, r3]
 800c538:	4313      	orrs	r3, r2
 800c53a:	4642      	mov	r2, r8
 800c53c:	54a3      	strb	r3, [r4, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c53e:	69a1      	ldr	r1, [r4, #24]
 800c540:	9b05      	ldr	r3, [sp, #20]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c542:	6124      	str	r4, [r4, #16]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c544:	185a      	adds	r2, r3, r1
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c546:	6062      	str	r2, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
 800c548:	42b2      	cmp	r2, r6
 800c54a:	d900      	bls.n	800c54e <prvTimerTask+0xc2>
 800c54c:	e085      	b.n	800c65a <prvTimerTask+0x1ce>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c54e:	1af3      	subs	r3, r6, r3
 800c550:	4299      	cmp	r1, r3
 800c552:	d900      	bls.n	800c556 <prvTimerTask+0xca>
 800c554:	e0a3      	b.n	800c69e <prvTimerTask+0x212>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c556:	6a23      	ldr	r3, [r4, #32]
 800c558:	0020      	movs	r0, r4
 800c55a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c55c:	4643      	mov	r3, r8
 800c55e:	5ce3      	ldrb	r3, [r4, r3]
 800c560:	075b      	lsls	r3, r3, #29
 800c562:	d5c7      	bpl.n	800c4f4 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c564:	69a3      	ldr	r3, [r4, #24]
 800c566:	9a05      	ldr	r2, [sp, #20]
 800c568:	2100      	movs	r1, #0
 800c56a:	18d2      	adds	r2, r2, r3
 800c56c:	2300      	movs	r3, #0
 800c56e:	0020      	movs	r0, r4
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	f7ff ff1d 	bl	800c3b0 <xTimerGenericCommand>
							configASSERT( xResult );
 800c576:	2800      	cmp	r0, #0
 800c578:	d1bc      	bne.n	800c4f4 <prvTimerTask+0x68>
 800c57a:	b672      	cpsid	i
 800c57c:	e7fe      	b.n	800c57c <prvTimerTask+0xf0>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c57e:	4643      	mov	r3, r8
 800c580:	2201      	movs	r2, #1
 800c582:	5ce3      	ldrb	r3, [r4, r3]
 800c584:	4313      	orrs	r3, r2
 800c586:	4642      	mov	r2, r8
 800c588:	54a3      	strb	r3, [r4, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c58a:	9b05      	ldr	r3, [sp, #20]
 800c58c:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d100      	bne.n	800c594 <prvTimerTask+0x108>
 800c592:	e098      	b.n	800c6c6 <prvTimerTask+0x23a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c594:	199b      	adds	r3, r3, r6
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c596:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c598:	6124      	str	r4, [r4, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c59a:	1d21      	adds	r1, r4, #4
	if( xNextExpiryTime <= xTimeNow )
 800c59c:	42b3      	cmp	r3, r6
 800c59e:	d867      	bhi.n	800c670 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	6818      	ldr	r0, [r3, #0]
 800c5a4:	f7fe fec2 	bl	800b32c <vListInsert>
	return xProcessTimerNow;
 800c5a8:	e7a4      	b.n	800c4f4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5aa:	4643      	mov	r3, r8
 800c5ac:	4652      	mov	r2, sl
 800c5ae:	5ce3      	ldrb	r3, [r4, r3]
 800c5b0:	4393      	bics	r3, r2
 800c5b2:	4642      	mov	r2, r8
 800c5b4:	54a3      	strb	r3, [r4, r2]
					break;
 800c5b6:	e79d      	b.n	800c4f4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c5b8:	4643      	mov	r3, r8
 800c5ba:	465a      	mov	r2, fp
 800c5bc:	5ce3      	ldrb	r3, [r4, r3]
 800c5be:	421a      	tst	r2, r3
 800c5c0:	d05b      	beq.n	800c67a <prvTimerTask+0x1ee>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5c2:	4652      	mov	r2, sl
 800c5c4:	4393      	bics	r3, r2
 800c5c6:	4642      	mov	r2, r8
 800c5c8:	54a3      	strb	r3, [r4, r2]
 800c5ca:	e793      	b.n	800c4f4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5cc:	9b05      	ldr	r3, [sp, #20]
 800c5ce:	9907      	ldr	r1, [sp, #28]
 800c5d0:	9806      	ldr	r0, [sp, #24]
 800c5d2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5d4:	9b04      	ldr	r3, [sp, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	db8c      	blt.n	800c4f4 <prvTimerTask+0x68>
 800c5da:	e795      	b.n	800c508 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 800c5dc:	f7ff fbca 	bl	800bd74 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800c5e0:	f7ff fbd0 	bl	800bd84 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800c5e4:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800c5e6:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 800c5e8:	4283      	cmp	r3, r0
 800c5ea:	d811      	bhi.n	800c610 <prvTimerTask+0x184>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5ec:	9b03      	ldr	r3, [sp, #12]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5ee:	6828      	ldr	r0, [r5, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5f0:	681b      	ldr	r3, [r3, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5f2:	1b31      	subs	r1, r6, r4
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5f4:	681a      	ldr	r2, [r3, #0]
	xLastTime = xTimeNow;
 800c5f6:	603c      	str	r4, [r7, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5f8:	4253      	negs	r3, r2
 800c5fa:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5fc:	f7ff f996 	bl	800b92c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c600:	f7ff fd10 	bl	800c024 <xTaskResumeAll>
 800c604:	2800      	cmp	r0, #0
 800c606:	d000      	beq.n	800c60a <prvTimerTask+0x17e>
 800c608:	e770      	b.n	800c4ec <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 800c60a:	f000 f8ad 	bl	800c768 <vPortYield>
 800c60e:	e76d      	b.n	800c4ec <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800c610:	f7ff fefc 	bl	800c40c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800c614:	603c      	str	r4, [r7, #0]
			( void ) xTaskResumeAll();
 800c616:	f7ff fd05 	bl	800c024 <xTaskResumeAll>
 800c61a:	e767      	b.n	800c4ec <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800c61c:	f7ff fef6 	bl	800c40c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c620:	e77f      	b.n	800c522 <prvTimerTask+0x96>
				( void ) xTaskResumeAll();
 800c622:	f7ff fcff 	bl	800c024 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c626:	464b      	mov	r3, r9
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	68db      	ldr	r3, [r3, #12]
 800c62e:	469a      	mov	sl, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c630:	2304      	movs	r3, #4
 800c632:	4453      	add	r3, sl
 800c634:	0018      	movs	r0, r3
 800c636:	469b      	mov	fp, r3
 800c638:	f7fe fe90 	bl	800b35c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c63c:	4653      	mov	r3, sl
 800c63e:	4642      	mov	r2, r8
 800c640:	5c9b      	ldrb	r3, [r3, r2]
 800c642:	075a      	lsls	r2, r3, #29
 800c644:	d41d      	bmi.n	800c682 <prvTimerTask+0x1f6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c646:	2201      	movs	r2, #1
 800c648:	4641      	mov	r1, r8
 800c64a:	4393      	bics	r3, r2
 800c64c:	4652      	mov	r2, sl
 800c64e:	5453      	strb	r3, [r2, r1]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c650:	4653      	mov	r3, sl
 800c652:	4650      	mov	r0, sl
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	4798      	blx	r3
}
 800c658:	e748      	b.n	800c4ec <prvTimerTask+0x60>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c65a:	42b3      	cmp	r3, r6
 800c65c:	d902      	bls.n	800c664 <prvTimerTask+0x1d8>
 800c65e:	4293      	cmp	r3, r2
 800c660:	d800      	bhi.n	800c664 <prvTimerTask+0x1d8>
 800c662:	e778      	b.n	800c556 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c664:	464b      	mov	r3, r9
 800c666:	1d21      	adds	r1, r4, #4
 800c668:	6818      	ldr	r0, [r3, #0]
 800c66a:	f7fe fe5f 	bl	800b32c <vListInsert>
	return xProcessTimerNow;
 800c66e:	e741      	b.n	800c4f4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c670:	464b      	mov	r3, r9
 800c672:	6818      	ldr	r0, [r3, #0]
 800c674:	f7fe fe5a 	bl	800b32c <vListInsert>
 800c678:	e73c      	b.n	800c4f4 <prvTimerTask+0x68>
							vPortFree( pxTimer );
 800c67a:	0020      	movs	r0, r4
 800c67c:	f000 f9dc 	bl	800ca38 <vPortFree>
 800c680:	e738      	b.n	800c4f4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c682:	4653      	mov	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c684:	4651      	mov	r1, sl
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c686:	699a      	ldr	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c688:	6109      	str	r1, [r1, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c68a:	18b3      	adds	r3, r6, r2
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c68c:	604b      	str	r3, [r1, #4]
	if( xNextExpiryTime <= xTimeNow )
 800c68e:	42a3      	cmp	r3, r4
 800c690:	d90b      	bls.n	800c6aa <prvTimerTask+0x21e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c692:	464b      	mov	r3, r9
 800c694:	4659      	mov	r1, fp
 800c696:	6818      	ldr	r0, [r3, #0]
 800c698:	f7fe fe48 	bl	800b32c <vListInsert>
	return xProcessTimerNow;
 800c69c:	e7d8      	b.n	800c650 <prvTimerTask+0x1c4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	1d21      	adds	r1, r4, #4
 800c6a2:	6818      	ldr	r0, [r3, #0]
 800c6a4:	f7fe fe42 	bl	800b32c <vListInsert>
	return xProcessTimerNow;
 800c6a8:	e724      	b.n	800c4f4 <prvTimerTask+0x68>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6aa:	1ba4      	subs	r4, r4, r6
 800c6ac:	42a2      	cmp	r2, r4
 800c6ae:	d80c      	bhi.n	800c6ca <prvTimerTask+0x23e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	0032      	movs	r2, r6
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	4650      	mov	r0, sl
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	f7ff fe79 	bl	800c3b0 <xTimerGenericCommand>
			configASSERT( xResult );
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d1c6      	bne.n	800c650 <prvTimerTask+0x1c4>
 800c6c2:	b672      	cpsid	i
 800c6c4:	e7fe      	b.n	800c6c4 <prvTimerTask+0x238>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6c6:	b672      	cpsid	i
 800c6c8:	e7fe      	b.n	800c6c8 <prvTimerTask+0x23c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c6ca:	9b03      	ldr	r3, [sp, #12]
 800c6cc:	4659      	mov	r1, fp
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	f7fe fe2c 	bl	800b32c <vListInsert>
	return xProcessTimerNow;
 800c6d4:	e7bc      	b.n	800c650 <prvTimerTask+0x1c4>
 800c6d6:	46c0      	nop			; (mov r8, r8)
 800c6d8:	2000578c 	.word	0x2000578c
 800c6dc:	20005790 	.word	0x20005790
 800c6e0:	2000585c 	.word	0x2000585c
 800c6e4:	080136d4 	.word	0x080136d4
 800c6e8:	200058b0 	.word	0x200058b0

0800c6ec <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 800c6ec:	2300      	movs	r3, #0
{
 800c6ee:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800c6f0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6f2:	4b06      	ldr	r3, [pc, #24]	; (800c70c <prvTaskExitError+0x20>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	d001      	beq.n	800c6fe <prvTaskExitError+0x12>
 800c6fa:	b672      	cpsid	i
 800c6fc:	e7fe      	b.n	800c6fc <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800c6fe:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c700:	9b01      	ldr	r3, [sp, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0fc      	beq.n	800c700 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c706:	b002      	add	sp, #8
 800c708:	4770      	bx	lr
 800c70a:	46c0      	nop			; (mov r8, r8)
 800c70c:	20000128 	.word	0x20000128

0800c710 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800c710:	4a0b      	ldr	r2, [pc, #44]	; (800c740 <pxCurrentTCBConst2>)
 800c712:	6813      	ldr	r3, [r2, #0]
 800c714:	6818      	ldr	r0, [r3, #0]
 800c716:	3020      	adds	r0, #32
 800c718:	f380 8809 	msr	PSP, r0
 800c71c:	2002      	movs	r0, #2
 800c71e:	f380 8814 	msr	CONTROL, r0
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800c728:	46ae      	mov	lr, r5
 800c72a:	bc08      	pop	{r3}
 800c72c:	bc04      	pop	{r2}
 800c72e:	b662      	cpsie	i
 800c730:	4718      	bx	r3
 800c732:	46c0      	nop			; (mov r8, r8)
 800c734:	46c0      	nop			; (mov r8, r8)
 800c736:	46c0      	nop			; (mov r8, r8)
 800c738:	46c0      	nop			; (mov r8, r8)
 800c73a:	46c0      	nop			; (mov r8, r8)
 800c73c:	46c0      	nop			; (mov r8, r8)
 800c73e:	46c0      	nop			; (mov r8, r8)

0800c740 <pxCurrentTCBConst2>:
 800c740:	20005290 	.word	0x20005290

0800c744 <pxPortInitialiseStack>:
{
 800c744:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c746:	2480      	movs	r4, #128	; 0x80
 800c748:	1f03      	subs	r3, r0, #4
 800c74a:	0464      	lsls	r4, r4, #17
 800c74c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800c74e:	3b04      	subs	r3, #4
 800c750:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c752:	4903      	ldr	r1, [pc, #12]	; (800c760 <pxPortInitialiseStack+0x1c>)
 800c754:	3b04      	subs	r3, #4
 800c756:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c758:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 800c75a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c75c:	601a      	str	r2, [r3, #0]
}
 800c75e:	bd10      	pop	{r4, pc}
 800c760:	0800c6ed 	.word	0x0800c6ed

0800c764 <SVC_Handler>:
}
 800c764:	4770      	bx	lr
 800c766:	46c0      	nop			; (mov r8, r8)

0800c768 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c768:	2280      	movs	r2, #128	; 0x80
 800c76a:	4b04      	ldr	r3, [pc, #16]	; (800c77c <vPortYield+0x14>)
 800c76c:	0552      	lsls	r2, r2, #21
 800c76e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c770:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c774:	f3bf 8f6f 	isb	sy
}
 800c778:	4770      	bx	lr
 800c77a:	46c0      	nop			; (mov r8, r8)
 800c77c:	e000ed04 	.word	0xe000ed04

0800c780 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800c780:	b672      	cpsid	i
	uxCriticalNesting++;
 800c782:	4a04      	ldr	r2, [pc, #16]	; (800c794 <vPortEnterCritical+0x14>)
 800c784:	6813      	ldr	r3, [r2, #0]
 800c786:	3301      	adds	r3, #1
 800c788:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c78a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c78e:	f3bf 8f6f 	isb	sy
}
 800c792:	4770      	bx	lr
 800c794:	20000128 	.word	0x20000128

0800c798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800c798:	4a05      	ldr	r2, [pc, #20]	; (800c7b0 <vPortExitCritical+0x18>)
 800c79a:	6813      	ldr	r3, [r2, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <vPortExitCritical+0xc>
 800c7a0:	b672      	cpsid	i
 800c7a2:	e7fe      	b.n	800c7a2 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d100      	bne.n	800c7ae <vPortExitCritical+0x16>
	{
		portENABLE_INTERRUPTS();
 800c7ac:	b662      	cpsie	i
	}
}
 800c7ae:	4770      	bx	lr
 800c7b0:	20000128 	.word	0x20000128

0800c7b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c7b4:	f3ef 8010 	mrs	r0, PRIMASK
 800c7b8:	b672      	cpsid	i
 800c7ba:	4770      	bx	lr

0800c7bc <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c7bc:	f380 8810 	msr	PRIMASK, r0
 800c7c0:	4770      	bx	lr
 800c7c2:	46c0      	nop			; (mov r8, r8)
	...

0800c7d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7d0:	f3ef 8009 	mrs	r0, PSP
 800c7d4:	4b0e      	ldr	r3, [pc, #56]	; (800c810 <pxCurrentTCBConst>)
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	3820      	subs	r0, #32
 800c7da:	6010      	str	r0, [r2, #0]
 800c7dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c7de:	4644      	mov	r4, r8
 800c7e0:	464d      	mov	r5, r9
 800c7e2:	4656      	mov	r6, sl
 800c7e4:	465f      	mov	r7, fp
 800c7e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c7e8:	b508      	push	{r3, lr}
 800c7ea:	b672      	cpsid	i
 800c7ec:	f7ff fc44 	bl	800c078 <vTaskSwitchContext>
 800c7f0:	b662      	cpsie	i
 800c7f2:	bc0c      	pop	{r2, r3}
 800c7f4:	6811      	ldr	r1, [r2, #0]
 800c7f6:	6808      	ldr	r0, [r1, #0]
 800c7f8:	3010      	adds	r0, #16
 800c7fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c7fc:	46a0      	mov	r8, r4
 800c7fe:	46a9      	mov	r9, r5
 800c800:	46b2      	mov	sl, r6
 800c802:	46bb      	mov	fp, r7
 800c804:	f380 8809 	msr	PSP, r0
 800c808:	3820      	subs	r0, #32
 800c80a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c80c:	4718      	bx	r3
 800c80e:	46c0      	nop			; (mov r8, r8)

0800c810 <pxCurrentTCBConst>:
 800c810:	20005290 	.word	0x20005290

0800c814 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c814:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c816:	f7ff ffcd 	bl	800c7b4 <ulSetInterruptMaskFromISR>
 800c81a:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c81c:	f7ff fab8 	bl	800bd90 <xTaskIncrementTick>
 800c820:	2800      	cmp	r0, #0
 800c822:	d003      	beq.n	800c82c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c824:	2280      	movs	r2, #128	; 0x80
 800c826:	4b03      	ldr	r3, [pc, #12]	; (800c834 <xPortSysTickHandler+0x20>)
 800c828:	0552      	lsls	r2, r2, #21
 800c82a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c82c:	0020      	movs	r0, r4
 800c82e:	f7ff ffc5 	bl	800c7bc <vClearInterruptMaskFromISR>
}
 800c832:	bd10      	pop	{r4, pc}
 800c834:	e000ed04 	.word	0xe000ed04

0800c838 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c838:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c83a:	21fa      	movs	r1, #250	; 0xfa
{
 800c83c:	b510      	push	{r4, lr}
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c83e:	4a07      	ldr	r2, [pc, #28]	; (800c85c <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c840:	4c07      	ldr	r4, [pc, #28]	; (800c860 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c842:	0089      	lsls	r1, r1, #2
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c844:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c846:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c848:	4b06      	ldr	r3, [pc, #24]	; (800c864 <vPortSetupTimerInterrupt+0x2c>)
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	f7f3 fc78 	bl	8000140 <__udivsi3>
 800c850:	4b05      	ldr	r3, [pc, #20]	; (800c868 <vPortSetupTimerInterrupt+0x30>)
 800c852:	3801      	subs	r0, #1
 800c854:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c856:	2307      	movs	r3, #7
 800c858:	6023      	str	r3, [r4, #0]
}
 800c85a:	bd10      	pop	{r4, pc}
 800c85c:	e000e018 	.word	0xe000e018
 800c860:	e000e010 	.word	0xe000e010
 800c864:	2000011c 	.word	0x2000011c
 800c868:	e000e014 	.word	0xe000e014

0800c86c <xPortStartScheduler>:
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c86c:	22ff      	movs	r2, #255	; 0xff
 800c86e:	4b11      	ldr	r3, [pc, #68]	; (800c8b4 <xPortStartScheduler+0x48>)
 800c870:	0412      	lsls	r2, r2, #16
 800c872:	6819      	ldr	r1, [r3, #0]
{
 800c874:	b530      	push	{r4, r5, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c876:	430a      	orrs	r2, r1
 800c878:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c87a:	22ff      	movs	r2, #255	; 0xff
	uxCriticalNesting = 0;
 800c87c:	2500      	movs	r5, #0
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c87e:	6819      	ldr	r1, [r3, #0]
 800c880:	0612      	lsls	r2, r2, #24
 800c882:	430a      	orrs	r2, r1
{
 800c884:	b083      	sub	sp, #12
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c886:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800c888:	f7ff ffd6 	bl	800c838 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c88c:	4c0a      	ldr	r4, [pc, #40]	; (800c8b8 <xPortStartScheduler+0x4c>)
 800c88e:	6025      	str	r5, [r4, #0]
	vPortStartFirstTask();
 800c890:	f7ff ff3e 	bl	800c710 <vPortStartFirstTask>
	vTaskSwitchContext();
 800c894:	f7ff fbf0 	bl	800c078 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800c898:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0UL;
 800c89a:	9501      	str	r5, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800c89c:	3301      	adds	r3, #1
 800c89e:	d001      	beq.n	800c8a4 <xPortStartScheduler+0x38>
 800c8a0:	b672      	cpsid	i
 800c8a2:	e7fe      	b.n	800c8a2 <xPortStartScheduler+0x36>
	portDISABLE_INTERRUPTS();
 800c8a4:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d0fc      	beq.n	800c8a6 <xPortStartScheduler+0x3a>
}
 800c8ac:	2000      	movs	r0, #0
 800c8ae:	b003      	add	sp, #12
 800c8b0:	bd30      	pop	{r4, r5, pc}
 800c8b2:	46c0      	nop			; (mov r8, r8)
 800c8b4:	e000ed20 	.word	0xe000ed20
 800c8b8:	20000128 	.word	0x20000128

0800c8bc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c8bc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c8be:	4b12      	ldr	r3, [pc, #72]	; (800c908 <prvInsertBlockIntoFreeList+0x4c>)
 800c8c0:	001a      	movs	r2, r3
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4283      	cmp	r3, r0
 800c8c6:	d3fb      	bcc.n	800c8c0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8c8:	6851      	ldr	r1, [r2, #4]
 800c8ca:	1854      	adds	r4, r2, r1
 800c8cc:	42a0      	cmp	r0, r4
 800c8ce:	d012      	beq.n	800c8f6 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8d0:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8d2:	1844      	adds	r4, r0, r1
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	d005      	beq.n	800c8e4 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8d8:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8da:	4282      	cmp	r2, r0
 800c8dc:	d000      	beq.n	800c8e0 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8de:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8e0:	bd10      	pop	{r4, pc}
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8e2:	0010      	movs	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8e4:	4c09      	ldr	r4, [pc, #36]	; (800c90c <prvInsertBlockIntoFreeList+0x50>)
 800c8e6:	6824      	ldr	r4, [r4, #0]
 800c8e8:	42a3      	cmp	r3, r4
 800c8ea:	d0f5      	beq.n	800c8d8 <prvInsertBlockIntoFreeList+0x1c>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8ec:	685c      	ldr	r4, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ee:	681b      	ldr	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8f0:	1861      	adds	r1, r4, r1
 800c8f2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8f4:	e7f0      	b.n	800c8d8 <prvInsertBlockIntoFreeList+0x1c>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8f6:	6840      	ldr	r0, [r0, #4]
 800c8f8:	1809      	adds	r1, r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8fa:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8fc:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8fe:	4283      	cmp	r3, r0
 800c900:	d0ef      	beq.n	800c8e2 <prvInsertBlockIntoFreeList+0x26>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c902:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800c904:	e7ec      	b.n	800c8e0 <prvInsertBlockIntoFreeList+0x24>
 800c906:	46c0      	nop			; (mov r8, r8)
 800c908:	200064d0 	.word	0x200064d0
 800c90c:	200058b8 	.word	0x200058b8

0800c910 <pvPortMalloc>:
{
 800c910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c912:	46c6      	mov	lr, r8
 800c914:	b500      	push	{lr}
 800c916:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800c918:	f7ff fa2c 	bl	800bd74 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c91c:	4b3f      	ldr	r3, [pc, #252]	; (800ca1c <pvPortMalloc+0x10c>)
 800c91e:	469c      	mov	ip, r3
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d054      	beq.n	800c9d0 <pvPortMalloc+0xc0>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c926:	4b3e      	ldr	r3, [pc, #248]	; (800ca20 <pvPortMalloc+0x110>)
 800c928:	681d      	ldr	r5, [r3, #0]
 800c92a:	4225      	tst	r5, r4
 800c92c:	d12c      	bne.n	800c988 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 800c92e:	2c00      	cmp	r4, #0
 800c930:	d02a      	beq.n	800c988 <pvPortMalloc+0x78>
				xWantedSize += xHeapStructSize;
 800c932:	0021      	movs	r1, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c934:	2307      	movs	r3, #7
				xWantedSize += xHeapStructSize;
 800c936:	3108      	adds	r1, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c938:	420b      	tst	r3, r1
 800c93a:	d001      	beq.n	800c940 <pvPortMalloc+0x30>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c93c:	4399      	bics	r1, r3
 800c93e:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c940:	2900      	cmp	r1, #0
 800c942:	d021      	beq.n	800c988 <pvPortMalloc+0x78>
 800c944:	4f37      	ldr	r7, [pc, #220]	; (800ca24 <pvPortMalloc+0x114>)
 800c946:	683e      	ldr	r6, [r7, #0]
 800c948:	428e      	cmp	r6, r1
 800c94a:	d31d      	bcc.n	800c988 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 800c94c:	4836      	ldr	r0, [pc, #216]	; (800ca28 <pvPortMalloc+0x118>)
 800c94e:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c950:	e004      	b.n	800c95c <pvPortMalloc+0x4c>
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d004      	beq.n	800c962 <pvPortMalloc+0x52>
 800c958:	0020      	movs	r0, r4
 800c95a:	001c      	movs	r4, r3
 800c95c:	6862      	ldr	r2, [r4, #4]
 800c95e:	428a      	cmp	r2, r1
 800c960:	d3f7      	bcc.n	800c952 <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800c962:	4663      	mov	r3, ip
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	42a3      	cmp	r3, r4
 800c968:	d00e      	beq.n	800c988 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c96a:	6803      	ldr	r3, [r0, #0]
 800c96c:	469c      	mov	ip, r3
 800c96e:	2308      	movs	r3, #8
 800c970:	4698      	mov	r8, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c972:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c974:	44e0      	add	r8, ip
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c976:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c978:	1a53      	subs	r3, r2, r1
 800c97a:	2b10      	cmp	r3, #16
 800c97c:	d911      	bls.n	800c9a2 <pvPortMalloc+0x92>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c97e:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c980:	0742      	lsls	r2, r0, #29
 800c982:	d009      	beq.n	800c998 <pvPortMalloc+0x88>
 800c984:	b672      	cpsid	i
 800c986:	e7fe      	b.n	800c986 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 800c988:	f7ff fb4c 	bl	800c024 <xTaskResumeAll>
 800c98c:	2300      	movs	r3, #0
 800c98e:	4698      	mov	r8, r3
}
 800c990:	4640      	mov	r0, r8
 800c992:	bc80      	pop	{r7}
 800c994:	46b8      	mov	r8, r7
 800c996:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c998:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c99a:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c99c:	f7ff ff8e 	bl	800c8bc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9a0:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9a2:	4b22      	ldr	r3, [pc, #136]	; (800ca2c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9a4:	1ab6      	subs	r6, r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9a6:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9a8:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9aa:	428e      	cmp	r6, r1
 800c9ac:	d30e      	bcc.n	800c9cc <pvPortMalloc+0xbc>
					pxBlock->pxNextFreeBlock = NULL;
 800c9ae:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9b0:	4315      	orrs	r5, r2
					xNumberOfSuccessfulAllocations++;
 800c9b2:	4a1f      	ldr	r2, [pc, #124]	; (800ca30 <pvPortMalloc+0x120>)
					pxBlock->pxNextFreeBlock = NULL;
 800c9b4:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800c9b6:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9b8:	6065      	str	r5, [r4, #4]
					xNumberOfSuccessfulAllocations++;
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800c9be:	f7ff fb31 	bl	800c024 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9c2:	4643      	mov	r3, r8
 800c9c4:	075b      	lsls	r3, r3, #29
 800c9c6:	d0e3      	beq.n	800c990 <pvPortMalloc+0x80>
 800c9c8:	b672      	cpsid	i
 800c9ca:	e7fe      	b.n	800c9ca <pvPortMalloc+0xba>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9cc:	601e      	str	r6, [r3, #0]
 800c9ce:	e7ee      	b.n	800c9ae <pvPortMalloc+0x9e>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9d0:	2107      	movs	r1, #7
	uxAddress = ( size_t ) ucHeap;
 800c9d2:	4b18      	ldr	r3, [pc, #96]	; (800ca34 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9d4:	4219      	tst	r1, r3
 800c9d6:	d119      	bne.n	800ca0c <pvPortMalloc+0xfc>
 800c9d8:	22c0      	movs	r2, #192	; 0xc0
 800c9da:	0019      	movs	r1, r3
 800c9dc:	0112      	lsls	r2, r2, #4
 800c9de:	189a      	adds	r2, r3, r2
	xStart.xBlockSize = ( size_t ) 0;
 800c9e0:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9e2:	4d11      	ldr	r5, [pc, #68]	; (800ca28 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800c9e4:	3a08      	subs	r2, #8
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9e6:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9e8:	6068      	str	r0, [r5, #4]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9ea:	2507      	movs	r5, #7
 800c9ec:	43aa      	bics	r2, r5
	pxEnd = ( void * ) uxAddress;
 800c9ee:	4665      	mov	r5, ip
 800c9f0:	602a      	str	r2, [r5, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9f2:	2580      	movs	r5, #128	; 0x80
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9f4:	1ad3      	subs	r3, r2, r3
	pxEnd->pxNextFreeBlock = NULL;
 800c9f6:	6010      	str	r0, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9f8:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9fa:	c10c      	stmia	r1!, {r2, r3}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9fc:	4a0b      	ldr	r2, [pc, #44]	; (800ca2c <pvPortMalloc+0x11c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9fe:	062d      	lsls	r5, r5, #24
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca00:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca02:	4a08      	ldr	r2, [pc, #32]	; (800ca24 <pvPortMalloc+0x114>)
 800ca04:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca06:	4b06      	ldr	r3, [pc, #24]	; (800ca20 <pvPortMalloc+0x110>)
 800ca08:	601d      	str	r5, [r3, #0]
}
 800ca0a:	e78e      	b.n	800c92a <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca0c:	22c0      	movs	r2, #192	; 0xc0
 800ca0e:	1dd8      	adds	r0, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca10:	0112      	lsls	r2, r2, #4
 800ca12:	189a      	adds	r2, r3, r2
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca14:	0003      	movs	r3, r0
 800ca16:	438b      	bics	r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca18:	0019      	movs	r1, r3
 800ca1a:	e7e1      	b.n	800c9e0 <pvPortMalloc+0xd0>
 800ca1c:	200058b8 	.word	0x200058b8
 800ca20:	200064bc 	.word	0x200064bc
 800ca24:	200064c0 	.word	0x200064c0
 800ca28:	200064d0 	.word	0x200064d0
 800ca2c:	200064c4 	.word	0x200064c4
 800ca30:	200064c8 	.word	0x200064c8
 800ca34:	200058bc 	.word	0x200058bc

0800ca38 <vPortFree>:
{
 800ca38:	b510      	push	{r4, lr}
	if( pv != NULL )
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d01f      	beq.n	800ca7e <vPortFree+0x46>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca3e:	4a10      	ldr	r2, [pc, #64]	; (800ca80 <vPortFree+0x48>)
 800ca40:	3808      	subs	r0, #8
 800ca42:	6843      	ldr	r3, [r0, #4]
 800ca44:	6812      	ldr	r2, [r2, #0]
 800ca46:	0004      	movs	r4, r0
 800ca48:	421a      	tst	r2, r3
 800ca4a:	d004      	beq.n	800ca56 <vPortFree+0x1e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca4c:	6801      	ldr	r1, [r0, #0]
 800ca4e:	2900      	cmp	r1, #0
 800ca50:	d003      	beq.n	800ca5a <vPortFree+0x22>
 800ca52:	b672      	cpsid	i
 800ca54:	e7fe      	b.n	800ca54 <vPortFree+0x1c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca56:	b672      	cpsid	i
 800ca58:	e7fe      	b.n	800ca58 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca5a:	4393      	bics	r3, r2
 800ca5c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800ca5e:	f7ff f989 	bl	800bd74 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca62:	4a08      	ldr	r2, [pc, #32]	; (800ca84 <vPortFree+0x4c>)
 800ca64:	6863      	ldr	r3, [r4, #4]
 800ca66:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca68:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca6a:	185b      	adds	r3, r3, r1
 800ca6c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca6e:	f7ff ff25 	bl	800c8bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca72:	4a05      	ldr	r2, [pc, #20]	; (800ca88 <vPortFree+0x50>)
 800ca74:	6813      	ldr	r3, [r2, #0]
 800ca76:	3301      	adds	r3, #1
 800ca78:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ca7a:	f7ff fad3 	bl	800c024 <xTaskResumeAll>
}
 800ca7e:	bd10      	pop	{r4, pc}
 800ca80:	200064bc 	.word	0x200064bc
 800ca84:	200064c0 	.word	0x200064c0
 800ca88:	200064cc 	.word	0x200064cc

0800ca8c <atoi>:
 800ca8c:	b510      	push	{r4, lr}
 800ca8e:	220a      	movs	r2, #10
 800ca90:	2100      	movs	r1, #0
 800ca92:	f000 ff81 	bl	800d998 <strtol>
 800ca96:	bd10      	pop	{r4, pc}

0800ca98 <malloc>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	4b03      	ldr	r3, [pc, #12]	; (800caa8 <malloc+0x10>)
 800ca9c:	0001      	movs	r1, r0
 800ca9e:	6818      	ldr	r0, [r3, #0]
 800caa0:	f000 f826 	bl	800caf0 <_malloc_r>
 800caa4:	bd10      	pop	{r4, pc}
 800caa6:	46c0      	nop			; (mov r8, r8)
 800caa8:	200002f0 	.word	0x200002f0

0800caac <sbrk_aligned>:
 800caac:	b570      	push	{r4, r5, r6, lr}
 800caae:	4e0f      	ldr	r6, [pc, #60]	; (800caec <sbrk_aligned+0x40>)
 800cab0:	000d      	movs	r5, r1
 800cab2:	6831      	ldr	r1, [r6, #0]
 800cab4:	0004      	movs	r4, r0
 800cab6:	2900      	cmp	r1, #0
 800cab8:	d102      	bne.n	800cac0 <sbrk_aligned+0x14>
 800caba:	f002 f8cf 	bl	800ec5c <_sbrk_r>
 800cabe:	6030      	str	r0, [r6, #0]
 800cac0:	0029      	movs	r1, r5
 800cac2:	0020      	movs	r0, r4
 800cac4:	f002 f8ca 	bl	800ec5c <_sbrk_r>
 800cac8:	1c43      	adds	r3, r0, #1
 800caca:	d00a      	beq.n	800cae2 <sbrk_aligned+0x36>
 800cacc:	2303      	movs	r3, #3
 800cace:	1cc5      	adds	r5, r0, #3
 800cad0:	439d      	bics	r5, r3
 800cad2:	42a8      	cmp	r0, r5
 800cad4:	d007      	beq.n	800cae6 <sbrk_aligned+0x3a>
 800cad6:	1a29      	subs	r1, r5, r0
 800cad8:	0020      	movs	r0, r4
 800cada:	f002 f8bf 	bl	800ec5c <_sbrk_r>
 800cade:	3001      	adds	r0, #1
 800cae0:	d101      	bne.n	800cae6 <sbrk_aligned+0x3a>
 800cae2:	2501      	movs	r5, #1
 800cae4:	426d      	negs	r5, r5
 800cae6:	0028      	movs	r0, r5
 800cae8:	bd70      	pop	{r4, r5, r6, pc}
 800caea:	46c0      	nop			; (mov r8, r8)
 800caec:	200064dc 	.word	0x200064dc

0800caf0 <_malloc_r>:
 800caf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800caf2:	2203      	movs	r2, #3
 800caf4:	1ccb      	adds	r3, r1, #3
 800caf6:	4393      	bics	r3, r2
 800caf8:	3308      	adds	r3, #8
 800cafa:	0006      	movs	r6, r0
 800cafc:	001f      	movs	r7, r3
 800cafe:	2b0c      	cmp	r3, #12
 800cb00:	d238      	bcs.n	800cb74 <_malloc_r+0x84>
 800cb02:	270c      	movs	r7, #12
 800cb04:	42b9      	cmp	r1, r7
 800cb06:	d837      	bhi.n	800cb78 <_malloc_r+0x88>
 800cb08:	0030      	movs	r0, r6
 800cb0a:	f000 f873 	bl	800cbf4 <__malloc_lock>
 800cb0e:	4b38      	ldr	r3, [pc, #224]	; (800cbf0 <_malloc_r+0x100>)
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	001c      	movs	r4, r3
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	d133      	bne.n	800cb82 <_malloc_r+0x92>
 800cb1a:	0039      	movs	r1, r7
 800cb1c:	0030      	movs	r0, r6
 800cb1e:	f7ff ffc5 	bl	800caac <sbrk_aligned>
 800cb22:	0004      	movs	r4, r0
 800cb24:	1c43      	adds	r3, r0, #1
 800cb26:	d15e      	bne.n	800cbe6 <_malloc_r+0xf6>
 800cb28:	9b00      	ldr	r3, [sp, #0]
 800cb2a:	681c      	ldr	r4, [r3, #0]
 800cb2c:	0025      	movs	r5, r4
 800cb2e:	2d00      	cmp	r5, #0
 800cb30:	d14e      	bne.n	800cbd0 <_malloc_r+0xe0>
 800cb32:	2c00      	cmp	r4, #0
 800cb34:	d051      	beq.n	800cbda <_malloc_r+0xea>
 800cb36:	6823      	ldr	r3, [r4, #0]
 800cb38:	0029      	movs	r1, r5
 800cb3a:	18e3      	adds	r3, r4, r3
 800cb3c:	0030      	movs	r0, r6
 800cb3e:	9301      	str	r3, [sp, #4]
 800cb40:	f002 f88c 	bl	800ec5c <_sbrk_r>
 800cb44:	9b01      	ldr	r3, [sp, #4]
 800cb46:	4283      	cmp	r3, r0
 800cb48:	d147      	bne.n	800cbda <_malloc_r+0xea>
 800cb4a:	6823      	ldr	r3, [r4, #0]
 800cb4c:	0030      	movs	r0, r6
 800cb4e:	1aff      	subs	r7, r7, r3
 800cb50:	0039      	movs	r1, r7
 800cb52:	f7ff ffab 	bl	800caac <sbrk_aligned>
 800cb56:	3001      	adds	r0, #1
 800cb58:	d03f      	beq.n	800cbda <_malloc_r+0xea>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	19db      	adds	r3, r3, r7
 800cb5e:	6023      	str	r3, [r4, #0]
 800cb60:	9b00      	ldr	r3, [sp, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d040      	beq.n	800cbea <_malloc_r+0xfa>
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	42a2      	cmp	r2, r4
 800cb6c:	d133      	bne.n	800cbd6 <_malloc_r+0xe6>
 800cb6e:	2200      	movs	r2, #0
 800cb70:	605a      	str	r2, [r3, #4]
 800cb72:	e014      	b.n	800cb9e <_malloc_r+0xae>
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	dac5      	bge.n	800cb04 <_malloc_r+0x14>
 800cb78:	230c      	movs	r3, #12
 800cb7a:	2500      	movs	r5, #0
 800cb7c:	6033      	str	r3, [r6, #0]
 800cb7e:	0028      	movs	r0, r5
 800cb80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb82:	6821      	ldr	r1, [r4, #0]
 800cb84:	1bc9      	subs	r1, r1, r7
 800cb86:	d420      	bmi.n	800cbca <_malloc_r+0xda>
 800cb88:	290b      	cmp	r1, #11
 800cb8a:	d918      	bls.n	800cbbe <_malloc_r+0xce>
 800cb8c:	19e2      	adds	r2, r4, r7
 800cb8e:	6027      	str	r7, [r4, #0]
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	d112      	bne.n	800cbba <_malloc_r+0xca>
 800cb94:	9b00      	ldr	r3, [sp, #0]
 800cb96:	601a      	str	r2, [r3, #0]
 800cb98:	6863      	ldr	r3, [r4, #4]
 800cb9a:	6011      	str	r1, [r2, #0]
 800cb9c:	6053      	str	r3, [r2, #4]
 800cb9e:	0030      	movs	r0, r6
 800cba0:	0025      	movs	r5, r4
 800cba2:	f000 f82f 	bl	800cc04 <__malloc_unlock>
 800cba6:	2207      	movs	r2, #7
 800cba8:	350b      	adds	r5, #11
 800cbaa:	1d23      	adds	r3, r4, #4
 800cbac:	4395      	bics	r5, r2
 800cbae:	1aea      	subs	r2, r5, r3
 800cbb0:	429d      	cmp	r5, r3
 800cbb2:	d0e4      	beq.n	800cb7e <_malloc_r+0x8e>
 800cbb4:	1b5b      	subs	r3, r3, r5
 800cbb6:	50a3      	str	r3, [r4, r2]
 800cbb8:	e7e1      	b.n	800cb7e <_malloc_r+0x8e>
 800cbba:	605a      	str	r2, [r3, #4]
 800cbbc:	e7ec      	b.n	800cb98 <_malloc_r+0xa8>
 800cbbe:	6862      	ldr	r2, [r4, #4]
 800cbc0:	42a3      	cmp	r3, r4
 800cbc2:	d1d5      	bne.n	800cb70 <_malloc_r+0x80>
 800cbc4:	9b00      	ldr	r3, [sp, #0]
 800cbc6:	601a      	str	r2, [r3, #0]
 800cbc8:	e7e9      	b.n	800cb9e <_malloc_r+0xae>
 800cbca:	0023      	movs	r3, r4
 800cbcc:	6864      	ldr	r4, [r4, #4]
 800cbce:	e7a2      	b.n	800cb16 <_malloc_r+0x26>
 800cbd0:	002c      	movs	r4, r5
 800cbd2:	686d      	ldr	r5, [r5, #4]
 800cbd4:	e7ab      	b.n	800cb2e <_malloc_r+0x3e>
 800cbd6:	0013      	movs	r3, r2
 800cbd8:	e7c4      	b.n	800cb64 <_malloc_r+0x74>
 800cbda:	230c      	movs	r3, #12
 800cbdc:	0030      	movs	r0, r6
 800cbde:	6033      	str	r3, [r6, #0]
 800cbe0:	f000 f810 	bl	800cc04 <__malloc_unlock>
 800cbe4:	e7cb      	b.n	800cb7e <_malloc_r+0x8e>
 800cbe6:	6027      	str	r7, [r4, #0]
 800cbe8:	e7d9      	b.n	800cb9e <_malloc_r+0xae>
 800cbea:	605b      	str	r3, [r3, #4]
 800cbec:	deff      	udf	#255	; 0xff
 800cbee:	46c0      	nop			; (mov r8, r8)
 800cbf0:	200064d8 	.word	0x200064d8

0800cbf4 <__malloc_lock>:
 800cbf4:	b510      	push	{r4, lr}
 800cbf6:	4802      	ldr	r0, [pc, #8]	; (800cc00 <__malloc_lock+0xc>)
 800cbf8:	f002 f881 	bl	800ecfe <__retarget_lock_acquire_recursive>
 800cbfc:	bd10      	pop	{r4, pc}
 800cbfe:	46c0      	nop			; (mov r8, r8)
 800cc00:	20006620 	.word	0x20006620

0800cc04 <__malloc_unlock>:
 800cc04:	b510      	push	{r4, lr}
 800cc06:	4802      	ldr	r0, [pc, #8]	; (800cc10 <__malloc_unlock+0xc>)
 800cc08:	f002 f87a 	bl	800ed00 <__retarget_lock_release_recursive>
 800cc0c:	bd10      	pop	{r4, pc}
 800cc0e:	46c0      	nop			; (mov r8, r8)
 800cc10:	20006620 	.word	0x20006620

0800cc14 <sulp>:
 800cc14:	b570      	push	{r4, r5, r6, lr}
 800cc16:	0016      	movs	r6, r2
 800cc18:	000d      	movs	r5, r1
 800cc1a:	f003 fe93 	bl	8010944 <__ulp>
 800cc1e:	2e00      	cmp	r6, #0
 800cc20:	d00d      	beq.n	800cc3e <sulp+0x2a>
 800cc22:	236b      	movs	r3, #107	; 0x6b
 800cc24:	006a      	lsls	r2, r5, #1
 800cc26:	0d52      	lsrs	r2, r2, #21
 800cc28:	1a9b      	subs	r3, r3, r2
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	dd07      	ble.n	800cc3e <sulp+0x2a>
 800cc2e:	2400      	movs	r4, #0
 800cc30:	4a03      	ldr	r2, [pc, #12]	; (800cc40 <sulp+0x2c>)
 800cc32:	051b      	lsls	r3, r3, #20
 800cc34:	189d      	adds	r5, r3, r2
 800cc36:	002b      	movs	r3, r5
 800cc38:	0022      	movs	r2, r4
 800cc3a:	f7f5 fb4b 	bl	80022d4 <__aeabi_dmul>
 800cc3e:	bd70      	pop	{r4, r5, r6, pc}
 800cc40:	3ff00000 	.word	0x3ff00000

0800cc44 <_strtod_l>:
 800cc44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc46:	b0a1      	sub	sp, #132	; 0x84
 800cc48:	9219      	str	r2, [sp, #100]	; 0x64
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	2600      	movs	r6, #0
 800cc4e:	2700      	movs	r7, #0
 800cc50:	9004      	str	r0, [sp, #16]
 800cc52:	9107      	str	r1, [sp, #28]
 800cc54:	921c      	str	r2, [sp, #112]	; 0x70
 800cc56:	911b      	str	r1, [sp, #108]	; 0x6c
 800cc58:	780a      	ldrb	r2, [r1, #0]
 800cc5a:	2a2b      	cmp	r2, #43	; 0x2b
 800cc5c:	d055      	beq.n	800cd0a <_strtod_l+0xc6>
 800cc5e:	d841      	bhi.n	800cce4 <_strtod_l+0xa0>
 800cc60:	2a0d      	cmp	r2, #13
 800cc62:	d83b      	bhi.n	800ccdc <_strtod_l+0x98>
 800cc64:	2a08      	cmp	r2, #8
 800cc66:	d83b      	bhi.n	800cce0 <_strtod_l+0x9c>
 800cc68:	2a00      	cmp	r2, #0
 800cc6a:	d044      	beq.n	800ccf6 <_strtod_l+0xb2>
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	920f      	str	r2, [sp, #60]	; 0x3c
 800cc70:	2100      	movs	r1, #0
 800cc72:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cc74:	9109      	str	r1, [sp, #36]	; 0x24
 800cc76:	782a      	ldrb	r2, [r5, #0]
 800cc78:	2a30      	cmp	r2, #48	; 0x30
 800cc7a:	d000      	beq.n	800cc7e <_strtod_l+0x3a>
 800cc7c:	e085      	b.n	800cd8a <_strtod_l+0x146>
 800cc7e:	786a      	ldrb	r2, [r5, #1]
 800cc80:	3120      	adds	r1, #32
 800cc82:	438a      	bics	r2, r1
 800cc84:	2a58      	cmp	r2, #88	; 0x58
 800cc86:	d000      	beq.n	800cc8a <_strtod_l+0x46>
 800cc88:	e075      	b.n	800cd76 <_strtod_l+0x132>
 800cc8a:	9302      	str	r3, [sp, #8]
 800cc8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc8e:	4a97      	ldr	r2, [pc, #604]	; (800ceec <_strtod_l+0x2a8>)
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	ab1c      	add	r3, sp, #112	; 0x70
 800cc94:	9300      	str	r3, [sp, #0]
 800cc96:	9804      	ldr	r0, [sp, #16]
 800cc98:	ab1d      	add	r3, sp, #116	; 0x74
 800cc9a:	a91b      	add	r1, sp, #108	; 0x6c
 800cc9c:	f002 ffc8 	bl	800fc30 <__gethex>
 800cca0:	230f      	movs	r3, #15
 800cca2:	0002      	movs	r2, r0
 800cca4:	401a      	ands	r2, r3
 800cca6:	0004      	movs	r4, r0
 800cca8:	9205      	str	r2, [sp, #20]
 800ccaa:	4218      	tst	r0, r3
 800ccac:	d005      	beq.n	800ccba <_strtod_l+0x76>
 800ccae:	2a06      	cmp	r2, #6
 800ccb0:	d12d      	bne.n	800cd0e <_strtod_l+0xca>
 800ccb2:	1c6b      	adds	r3, r5, #1
 800ccb4:	931b      	str	r3, [sp, #108]	; 0x6c
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <_strtod_l+0x82>
 800ccc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ccc2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d01b      	beq.n	800cd04 <_strtod_l+0xc0>
 800cccc:	2380      	movs	r3, #128	; 0x80
 800ccce:	0032      	movs	r2, r6
 800ccd0:	061b      	lsls	r3, r3, #24
 800ccd2:	18fb      	adds	r3, r7, r3
 800ccd4:	0010      	movs	r0, r2
 800ccd6:	0019      	movs	r1, r3
 800ccd8:	b021      	add	sp, #132	; 0x84
 800ccda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccdc:	2a20      	cmp	r2, #32
 800ccde:	d1c5      	bne.n	800cc6c <_strtod_l+0x28>
 800cce0:	3101      	adds	r1, #1
 800cce2:	e7b8      	b.n	800cc56 <_strtod_l+0x12>
 800cce4:	2a2d      	cmp	r2, #45	; 0x2d
 800cce6:	d1c1      	bne.n	800cc6c <_strtod_l+0x28>
 800cce8:	3a2c      	subs	r2, #44	; 0x2c
 800ccea:	920f      	str	r2, [sp, #60]	; 0x3c
 800ccec:	1c4a      	adds	r2, r1, #1
 800ccee:	921b      	str	r2, [sp, #108]	; 0x6c
 800ccf0:	784a      	ldrb	r2, [r1, #1]
 800ccf2:	2a00      	cmp	r2, #0
 800ccf4:	d1bc      	bne.n	800cc70 <_strtod_l+0x2c>
 800ccf6:	9b07      	ldr	r3, [sp, #28]
 800ccf8:	931b      	str	r3, [sp, #108]	; 0x6c
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1dd      	bne.n	800ccc0 <_strtod_l+0x7c>
 800cd04:	0032      	movs	r2, r6
 800cd06:	003b      	movs	r3, r7
 800cd08:	e7e4      	b.n	800ccd4 <_strtod_l+0x90>
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	e7ed      	b.n	800ccea <_strtod_l+0xa6>
 800cd0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cd10:	2a00      	cmp	r2, #0
 800cd12:	d007      	beq.n	800cd24 <_strtod_l+0xe0>
 800cd14:	2135      	movs	r1, #53	; 0x35
 800cd16:	a81e      	add	r0, sp, #120	; 0x78
 800cd18:	f003 ff05 	bl	8010b26 <__copybits>
 800cd1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd1e:	9804      	ldr	r0, [sp, #16]
 800cd20:	f003 face 	bl	80102c0 <_Bfree>
 800cd24:	9805      	ldr	r0, [sp, #20]
 800cd26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd28:	3801      	subs	r0, #1
 800cd2a:	2804      	cmp	r0, #4
 800cd2c:	d806      	bhi.n	800cd3c <_strtod_l+0xf8>
 800cd2e:	f7f3 f9f3 	bl	8000118 <__gnu_thumb1_case_uqi>
 800cd32:	0312      	.short	0x0312
 800cd34:	1e1c      	.short	0x1e1c
 800cd36:	12          	.byte	0x12
 800cd37:	00          	.byte	0x00
 800cd38:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cd3a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800cd3c:	05e4      	lsls	r4, r4, #23
 800cd3e:	d502      	bpl.n	800cd46 <_strtod_l+0x102>
 800cd40:	2380      	movs	r3, #128	; 0x80
 800cd42:	061b      	lsls	r3, r3, #24
 800cd44:	431f      	orrs	r7, r3
 800cd46:	4b6a      	ldr	r3, [pc, #424]	; (800cef0 <_strtod_l+0x2ac>)
 800cd48:	423b      	tst	r3, r7
 800cd4a:	d1b6      	bne.n	800ccba <_strtod_l+0x76>
 800cd4c:	f001 ffac 	bl	800eca8 <__errno>
 800cd50:	2322      	movs	r3, #34	; 0x22
 800cd52:	6003      	str	r3, [r0, #0]
 800cd54:	e7b1      	b.n	800ccba <_strtod_l+0x76>
 800cd56:	4967      	ldr	r1, [pc, #412]	; (800cef4 <_strtod_l+0x2b0>)
 800cd58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cd5a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cd5c:	400a      	ands	r2, r1
 800cd5e:	4966      	ldr	r1, [pc, #408]	; (800cef8 <_strtod_l+0x2b4>)
 800cd60:	185b      	adds	r3, r3, r1
 800cd62:	051b      	lsls	r3, r3, #20
 800cd64:	431a      	orrs	r2, r3
 800cd66:	0017      	movs	r7, r2
 800cd68:	e7e8      	b.n	800cd3c <_strtod_l+0xf8>
 800cd6a:	4f61      	ldr	r7, [pc, #388]	; (800cef0 <_strtod_l+0x2ac>)
 800cd6c:	e7e6      	b.n	800cd3c <_strtod_l+0xf8>
 800cd6e:	2601      	movs	r6, #1
 800cd70:	4f62      	ldr	r7, [pc, #392]	; (800cefc <_strtod_l+0x2b8>)
 800cd72:	4276      	negs	r6, r6
 800cd74:	e7e2      	b.n	800cd3c <_strtod_l+0xf8>
 800cd76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd78:	1c5a      	adds	r2, r3, #1
 800cd7a:	921b      	str	r2, [sp, #108]	; 0x6c
 800cd7c:	785b      	ldrb	r3, [r3, #1]
 800cd7e:	2b30      	cmp	r3, #48	; 0x30
 800cd80:	d0f9      	beq.n	800cd76 <_strtod_l+0x132>
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d099      	beq.n	800ccba <_strtod_l+0x76>
 800cd86:	2301      	movs	r3, #1
 800cd88:	9309      	str	r3, [sp, #36]	; 0x24
 800cd8a:	2500      	movs	r5, #0
 800cd8c:	220a      	movs	r2, #10
 800cd8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd90:	950d      	str	r5, [sp, #52]	; 0x34
 800cd92:	9310      	str	r3, [sp, #64]	; 0x40
 800cd94:	9508      	str	r5, [sp, #32]
 800cd96:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800cd98:	7804      	ldrb	r4, [r0, #0]
 800cd9a:	0023      	movs	r3, r4
 800cd9c:	3b30      	subs	r3, #48	; 0x30
 800cd9e:	b2d9      	uxtb	r1, r3
 800cda0:	2909      	cmp	r1, #9
 800cda2:	d927      	bls.n	800cdf4 <_strtod_l+0x1b0>
 800cda4:	2201      	movs	r2, #1
 800cda6:	4956      	ldr	r1, [pc, #344]	; (800cf00 <_strtod_l+0x2bc>)
 800cda8:	f001 fe0f 	bl	800e9ca <strncmp>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d031      	beq.n	800ce14 <_strtod_l+0x1d0>
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	0023      	movs	r3, r4
 800cdb4:	4684      	mov	ip, r0
 800cdb6:	9a08      	ldr	r2, [sp, #32]
 800cdb8:	900c      	str	r0, [sp, #48]	; 0x30
 800cdba:	9205      	str	r2, [sp, #20]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	0019      	movs	r1, r3
 800cdc0:	4391      	bics	r1, r2
 800cdc2:	000a      	movs	r2, r1
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	9106      	str	r1, [sp, #24]
 800cdc8:	2a45      	cmp	r2, #69	; 0x45
 800cdca:	d000      	beq.n	800cdce <_strtod_l+0x18a>
 800cdcc:	e0c2      	b.n	800cf54 <_strtod_l+0x310>
 800cdce:	9b05      	ldr	r3, [sp, #20]
 800cdd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdd2:	4303      	orrs	r3, r0
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	428b      	cmp	r3, r1
 800cdd8:	d08d      	beq.n	800ccf6 <_strtod_l+0xb2>
 800cdda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cddc:	9307      	str	r3, [sp, #28]
 800cdde:	3301      	adds	r3, #1
 800cde0:	931b      	str	r3, [sp, #108]	; 0x6c
 800cde2:	9b07      	ldr	r3, [sp, #28]
 800cde4:	785b      	ldrb	r3, [r3, #1]
 800cde6:	2b2b      	cmp	r3, #43	; 0x2b
 800cde8:	d071      	beq.n	800cece <_strtod_l+0x28a>
 800cdea:	000c      	movs	r4, r1
 800cdec:	2b2d      	cmp	r3, #45	; 0x2d
 800cdee:	d174      	bne.n	800ceda <_strtod_l+0x296>
 800cdf0:	2401      	movs	r4, #1
 800cdf2:	e06d      	b.n	800ced0 <_strtod_l+0x28c>
 800cdf4:	9908      	ldr	r1, [sp, #32]
 800cdf6:	2908      	cmp	r1, #8
 800cdf8:	dc09      	bgt.n	800ce0e <_strtod_l+0x1ca>
 800cdfa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cdfc:	4351      	muls	r1, r2
 800cdfe:	185b      	adds	r3, r3, r1
 800ce00:	930d      	str	r3, [sp, #52]	; 0x34
 800ce02:	9b08      	ldr	r3, [sp, #32]
 800ce04:	3001      	adds	r0, #1
 800ce06:	3301      	adds	r3, #1
 800ce08:	9308      	str	r3, [sp, #32]
 800ce0a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ce0c:	e7c3      	b.n	800cd96 <_strtod_l+0x152>
 800ce0e:	4355      	muls	r5, r2
 800ce10:	195d      	adds	r5, r3, r5
 800ce12:	e7f6      	b.n	800ce02 <_strtod_l+0x1be>
 800ce14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce1a:	9a08      	ldr	r2, [sp, #32]
 800ce1c:	785b      	ldrb	r3, [r3, #1]
 800ce1e:	2a00      	cmp	r2, #0
 800ce20:	d03a      	beq.n	800ce98 <_strtod_l+0x254>
 800ce22:	900c      	str	r0, [sp, #48]	; 0x30
 800ce24:	9205      	str	r2, [sp, #20]
 800ce26:	001a      	movs	r2, r3
 800ce28:	3a30      	subs	r2, #48	; 0x30
 800ce2a:	2a09      	cmp	r2, #9
 800ce2c:	d912      	bls.n	800ce54 <_strtod_l+0x210>
 800ce2e:	2201      	movs	r2, #1
 800ce30:	4694      	mov	ip, r2
 800ce32:	e7c3      	b.n	800cdbc <_strtod_l+0x178>
 800ce34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce36:	3001      	adds	r0, #1
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce3c:	785b      	ldrb	r3, [r3, #1]
 800ce3e:	2b30      	cmp	r3, #48	; 0x30
 800ce40:	d0f8      	beq.n	800ce34 <_strtod_l+0x1f0>
 800ce42:	001a      	movs	r2, r3
 800ce44:	3a31      	subs	r2, #49	; 0x31
 800ce46:	2a08      	cmp	r2, #8
 800ce48:	d83c      	bhi.n	800cec4 <_strtod_l+0x280>
 800ce4a:	900c      	str	r0, [sp, #48]	; 0x30
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ce50:	9005      	str	r0, [sp, #20]
 800ce52:	9210      	str	r2, [sp, #64]	; 0x40
 800ce54:	001a      	movs	r2, r3
 800ce56:	1c41      	adds	r1, r0, #1
 800ce58:	3a30      	subs	r2, #48	; 0x30
 800ce5a:	2b30      	cmp	r3, #48	; 0x30
 800ce5c:	d016      	beq.n	800ce8c <_strtod_l+0x248>
 800ce5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce60:	185b      	adds	r3, r3, r1
 800ce62:	930c      	str	r3, [sp, #48]	; 0x30
 800ce64:	9b05      	ldr	r3, [sp, #20]
 800ce66:	210a      	movs	r1, #10
 800ce68:	469c      	mov	ip, r3
 800ce6a:	4484      	add	ip, r0
 800ce6c:	4563      	cmp	r3, ip
 800ce6e:	d115      	bne.n	800ce9c <_strtod_l+0x258>
 800ce70:	9905      	ldr	r1, [sp, #20]
 800ce72:	9b05      	ldr	r3, [sp, #20]
 800ce74:	3101      	adds	r1, #1
 800ce76:	1809      	adds	r1, r1, r0
 800ce78:	181b      	adds	r3, r3, r0
 800ce7a:	9105      	str	r1, [sp, #20]
 800ce7c:	2b08      	cmp	r3, #8
 800ce7e:	dc19      	bgt.n	800ceb4 <_strtod_l+0x270>
 800ce80:	230a      	movs	r3, #10
 800ce82:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ce84:	434b      	muls	r3, r1
 800ce86:	2100      	movs	r1, #0
 800ce88:	18d3      	adds	r3, r2, r3
 800ce8a:	930d      	str	r3, [sp, #52]	; 0x34
 800ce8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ce8e:	0008      	movs	r0, r1
 800ce90:	1c5a      	adds	r2, r3, #1
 800ce92:	921b      	str	r2, [sp, #108]	; 0x6c
 800ce94:	785b      	ldrb	r3, [r3, #1]
 800ce96:	e7c6      	b.n	800ce26 <_strtod_l+0x1e2>
 800ce98:	9808      	ldr	r0, [sp, #32]
 800ce9a:	e7d0      	b.n	800ce3e <_strtod_l+0x1fa>
 800ce9c:	1c5c      	adds	r4, r3, #1
 800ce9e:	2b08      	cmp	r3, #8
 800cea0:	dc04      	bgt.n	800ceac <_strtod_l+0x268>
 800cea2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cea4:	434b      	muls	r3, r1
 800cea6:	930d      	str	r3, [sp, #52]	; 0x34
 800cea8:	0023      	movs	r3, r4
 800ceaa:	e7df      	b.n	800ce6c <_strtod_l+0x228>
 800ceac:	2c10      	cmp	r4, #16
 800ceae:	dcfb      	bgt.n	800cea8 <_strtod_l+0x264>
 800ceb0:	434d      	muls	r5, r1
 800ceb2:	e7f9      	b.n	800cea8 <_strtod_l+0x264>
 800ceb4:	9b05      	ldr	r3, [sp, #20]
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	2b10      	cmp	r3, #16
 800ceba:	dce7      	bgt.n	800ce8c <_strtod_l+0x248>
 800cebc:	230a      	movs	r3, #10
 800cebe:	435d      	muls	r5, r3
 800cec0:	1955      	adds	r5, r2, r5
 800cec2:	e7e3      	b.n	800ce8c <_strtod_l+0x248>
 800cec4:	2200      	movs	r2, #0
 800cec6:	920c      	str	r2, [sp, #48]	; 0x30
 800cec8:	9205      	str	r2, [sp, #20]
 800ceca:	3201      	adds	r2, #1
 800cecc:	e7b0      	b.n	800ce30 <_strtod_l+0x1ec>
 800cece:	2400      	movs	r4, #0
 800ced0:	9b07      	ldr	r3, [sp, #28]
 800ced2:	3302      	adds	r3, #2
 800ced4:	931b      	str	r3, [sp, #108]	; 0x6c
 800ced6:	9b07      	ldr	r3, [sp, #28]
 800ced8:	789b      	ldrb	r3, [r3, #2]
 800ceda:	001a      	movs	r2, r3
 800cedc:	3a30      	subs	r2, #48	; 0x30
 800cede:	2a09      	cmp	r2, #9
 800cee0:	d914      	bls.n	800cf0c <_strtod_l+0x2c8>
 800cee2:	9a07      	ldr	r2, [sp, #28]
 800cee4:	921b      	str	r2, [sp, #108]	; 0x6c
 800cee6:	2200      	movs	r2, #0
 800cee8:	e033      	b.n	800cf52 <_strtod_l+0x30e>
 800ceea:	46c0      	nop			; (mov r8, r8)
 800ceec:	08013700 	.word	0x08013700
 800cef0:	7ff00000 	.word	0x7ff00000
 800cef4:	ffefffff 	.word	0xffefffff
 800cef8:	00000433 	.word	0x00000433
 800cefc:	7fffffff 	.word	0x7fffffff
 800cf00:	080136fc 	.word	0x080136fc
 800cf04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf06:	1c5a      	adds	r2, r3, #1
 800cf08:	921b      	str	r2, [sp, #108]	; 0x6c
 800cf0a:	785b      	ldrb	r3, [r3, #1]
 800cf0c:	2b30      	cmp	r3, #48	; 0x30
 800cf0e:	d0f9      	beq.n	800cf04 <_strtod_l+0x2c0>
 800cf10:	2200      	movs	r2, #0
 800cf12:	9206      	str	r2, [sp, #24]
 800cf14:	001a      	movs	r2, r3
 800cf16:	3a31      	subs	r2, #49	; 0x31
 800cf18:	2a08      	cmp	r2, #8
 800cf1a:	d81b      	bhi.n	800cf54 <_strtod_l+0x310>
 800cf1c:	3b30      	subs	r3, #48	; 0x30
 800cf1e:	930e      	str	r3, [sp, #56]	; 0x38
 800cf20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf22:	9306      	str	r3, [sp, #24]
 800cf24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf26:	1c59      	adds	r1, r3, #1
 800cf28:	911b      	str	r1, [sp, #108]	; 0x6c
 800cf2a:	785b      	ldrb	r3, [r3, #1]
 800cf2c:	001a      	movs	r2, r3
 800cf2e:	3a30      	subs	r2, #48	; 0x30
 800cf30:	2a09      	cmp	r2, #9
 800cf32:	d93a      	bls.n	800cfaa <_strtod_l+0x366>
 800cf34:	9a06      	ldr	r2, [sp, #24]
 800cf36:	1a8a      	subs	r2, r1, r2
 800cf38:	49b2      	ldr	r1, [pc, #712]	; (800d204 <_strtod_l+0x5c0>)
 800cf3a:	9106      	str	r1, [sp, #24]
 800cf3c:	2a08      	cmp	r2, #8
 800cf3e:	dc04      	bgt.n	800cf4a <_strtod_l+0x306>
 800cf40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf42:	9206      	str	r2, [sp, #24]
 800cf44:	428a      	cmp	r2, r1
 800cf46:	dd00      	ble.n	800cf4a <_strtod_l+0x306>
 800cf48:	9106      	str	r1, [sp, #24]
 800cf4a:	2c00      	cmp	r4, #0
 800cf4c:	d002      	beq.n	800cf54 <_strtod_l+0x310>
 800cf4e:	9a06      	ldr	r2, [sp, #24]
 800cf50:	4252      	negs	r2, r2
 800cf52:	9206      	str	r2, [sp, #24]
 800cf54:	9a05      	ldr	r2, [sp, #20]
 800cf56:	2a00      	cmp	r2, #0
 800cf58:	d14d      	bne.n	800cff6 <_strtod_l+0x3b2>
 800cf5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf5c:	4310      	orrs	r0, r2
 800cf5e:	d000      	beq.n	800cf62 <_strtod_l+0x31e>
 800cf60:	e6ab      	b.n	800ccba <_strtod_l+0x76>
 800cf62:	4662      	mov	r2, ip
 800cf64:	2a00      	cmp	r2, #0
 800cf66:	d000      	beq.n	800cf6a <_strtod_l+0x326>
 800cf68:	e6c5      	b.n	800ccf6 <_strtod_l+0xb2>
 800cf6a:	2b69      	cmp	r3, #105	; 0x69
 800cf6c:	d027      	beq.n	800cfbe <_strtod_l+0x37a>
 800cf6e:	dc23      	bgt.n	800cfb8 <_strtod_l+0x374>
 800cf70:	2b49      	cmp	r3, #73	; 0x49
 800cf72:	d024      	beq.n	800cfbe <_strtod_l+0x37a>
 800cf74:	2b4e      	cmp	r3, #78	; 0x4e
 800cf76:	d000      	beq.n	800cf7a <_strtod_l+0x336>
 800cf78:	e6bd      	b.n	800ccf6 <_strtod_l+0xb2>
 800cf7a:	49a3      	ldr	r1, [pc, #652]	; (800d208 <_strtod_l+0x5c4>)
 800cf7c:	a81b      	add	r0, sp, #108	; 0x6c
 800cf7e:	f003 f88d 	bl	801009c <__match>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d100      	bne.n	800cf88 <_strtod_l+0x344>
 800cf86:	e6b6      	b.n	800ccf6 <_strtod_l+0xb2>
 800cf88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	2b28      	cmp	r3, #40	; 0x28
 800cf8e:	d12c      	bne.n	800cfea <_strtod_l+0x3a6>
 800cf90:	499e      	ldr	r1, [pc, #632]	; (800d20c <_strtod_l+0x5c8>)
 800cf92:	aa1e      	add	r2, sp, #120	; 0x78
 800cf94:	a81b      	add	r0, sp, #108	; 0x6c
 800cf96:	f003 f895 	bl	80100c4 <__hexnan>
 800cf9a:	2805      	cmp	r0, #5
 800cf9c:	d125      	bne.n	800cfea <_strtod_l+0x3a6>
 800cf9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cfa0:	4a9b      	ldr	r2, [pc, #620]	; (800d210 <_strtod_l+0x5cc>)
 800cfa2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cfa4:	431a      	orrs	r2, r3
 800cfa6:	0017      	movs	r7, r2
 800cfa8:	e687      	b.n	800ccba <_strtod_l+0x76>
 800cfaa:	220a      	movs	r2, #10
 800cfac:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cfae:	434a      	muls	r2, r1
 800cfb0:	18d2      	adds	r2, r2, r3
 800cfb2:	3a30      	subs	r2, #48	; 0x30
 800cfb4:	920e      	str	r2, [sp, #56]	; 0x38
 800cfb6:	e7b5      	b.n	800cf24 <_strtod_l+0x2e0>
 800cfb8:	2b6e      	cmp	r3, #110	; 0x6e
 800cfba:	d0de      	beq.n	800cf7a <_strtod_l+0x336>
 800cfbc:	e69b      	b.n	800ccf6 <_strtod_l+0xb2>
 800cfbe:	4995      	ldr	r1, [pc, #596]	; (800d214 <_strtod_l+0x5d0>)
 800cfc0:	a81b      	add	r0, sp, #108	; 0x6c
 800cfc2:	f003 f86b 	bl	801009c <__match>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d100      	bne.n	800cfcc <_strtod_l+0x388>
 800cfca:	e694      	b.n	800ccf6 <_strtod_l+0xb2>
 800cfcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfce:	4992      	ldr	r1, [pc, #584]	; (800d218 <_strtod_l+0x5d4>)
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	a81b      	add	r0, sp, #108	; 0x6c
 800cfd4:	931b      	str	r3, [sp, #108]	; 0x6c
 800cfd6:	f003 f861 	bl	801009c <__match>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d102      	bne.n	800cfe4 <_strtod_l+0x3a0>
 800cfde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	931b      	str	r3, [sp, #108]	; 0x6c
 800cfe4:	2600      	movs	r6, #0
 800cfe6:	4f8a      	ldr	r7, [pc, #552]	; (800d210 <_strtod_l+0x5cc>)
 800cfe8:	e667      	b.n	800ccba <_strtod_l+0x76>
 800cfea:	488c      	ldr	r0, [pc, #560]	; (800d21c <_strtod_l+0x5d8>)
 800cfec:	f001 fea6 	bl	800ed3c <nan>
 800cff0:	0006      	movs	r6, r0
 800cff2:	000f      	movs	r7, r1
 800cff4:	e661      	b.n	800ccba <_strtod_l+0x76>
 800cff6:	9b06      	ldr	r3, [sp, #24]
 800cff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cffa:	1a9b      	subs	r3, r3, r2
 800cffc:	9309      	str	r3, [sp, #36]	; 0x24
 800cffe:	9b08      	ldr	r3, [sp, #32]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <_strtod_l+0x3c4>
 800d004:	9b05      	ldr	r3, [sp, #20]
 800d006:	9308      	str	r3, [sp, #32]
 800d008:	9c05      	ldr	r4, [sp, #20]
 800d00a:	2c10      	cmp	r4, #16
 800d00c:	dd00      	ble.n	800d010 <_strtod_l+0x3cc>
 800d00e:	2410      	movs	r4, #16
 800d010:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d012:	f7f6 f827 	bl	8003064 <__aeabi_ui2d>
 800d016:	9b05      	ldr	r3, [sp, #20]
 800d018:	0006      	movs	r6, r0
 800d01a:	000f      	movs	r7, r1
 800d01c:	2b09      	cmp	r3, #9
 800d01e:	dd15      	ble.n	800d04c <_strtod_l+0x408>
 800d020:	0022      	movs	r2, r4
 800d022:	4b7f      	ldr	r3, [pc, #508]	; (800d220 <_strtod_l+0x5dc>)
 800d024:	3a09      	subs	r2, #9
 800d026:	00d2      	lsls	r2, r2, #3
 800d028:	189b      	adds	r3, r3, r2
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	f7f5 f951 	bl	80022d4 <__aeabi_dmul>
 800d032:	0006      	movs	r6, r0
 800d034:	0028      	movs	r0, r5
 800d036:	000f      	movs	r7, r1
 800d038:	f7f6 f814 	bl	8003064 <__aeabi_ui2d>
 800d03c:	0002      	movs	r2, r0
 800d03e:	000b      	movs	r3, r1
 800d040:	0030      	movs	r0, r6
 800d042:	0039      	movs	r1, r7
 800d044:	f7f4 f9ec 	bl	8001420 <__aeabi_dadd>
 800d048:	0006      	movs	r6, r0
 800d04a:	000f      	movs	r7, r1
 800d04c:	9b05      	ldr	r3, [sp, #20]
 800d04e:	2b0f      	cmp	r3, #15
 800d050:	dc39      	bgt.n	800d0c6 <_strtod_l+0x482>
 800d052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d054:	2b00      	cmp	r3, #0
 800d056:	d100      	bne.n	800d05a <_strtod_l+0x416>
 800d058:	e62f      	b.n	800ccba <_strtod_l+0x76>
 800d05a:	dd24      	ble.n	800d0a6 <_strtod_l+0x462>
 800d05c:	2b16      	cmp	r3, #22
 800d05e:	dc09      	bgt.n	800d074 <_strtod_l+0x430>
 800d060:	496f      	ldr	r1, [pc, #444]	; (800d220 <_strtod_l+0x5dc>)
 800d062:	00db      	lsls	r3, r3, #3
 800d064:	18c9      	adds	r1, r1, r3
 800d066:	0032      	movs	r2, r6
 800d068:	6808      	ldr	r0, [r1, #0]
 800d06a:	6849      	ldr	r1, [r1, #4]
 800d06c:	003b      	movs	r3, r7
 800d06e:	f7f5 f931 	bl	80022d4 <__aeabi_dmul>
 800d072:	e7bd      	b.n	800cff0 <_strtod_l+0x3ac>
 800d074:	2325      	movs	r3, #37	; 0x25
 800d076:	9a05      	ldr	r2, [sp, #20]
 800d078:	1a9b      	subs	r3, r3, r2
 800d07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d07c:	4293      	cmp	r3, r2
 800d07e:	db22      	blt.n	800d0c6 <_strtod_l+0x482>
 800d080:	240f      	movs	r4, #15
 800d082:	9b05      	ldr	r3, [sp, #20]
 800d084:	4d66      	ldr	r5, [pc, #408]	; (800d220 <_strtod_l+0x5dc>)
 800d086:	1ae4      	subs	r4, r4, r3
 800d088:	00e1      	lsls	r1, r4, #3
 800d08a:	1869      	adds	r1, r5, r1
 800d08c:	0032      	movs	r2, r6
 800d08e:	6808      	ldr	r0, [r1, #0]
 800d090:	6849      	ldr	r1, [r1, #4]
 800d092:	003b      	movs	r3, r7
 800d094:	f7f5 f91e 	bl	80022d4 <__aeabi_dmul>
 800d098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09a:	1b1c      	subs	r4, r3, r4
 800d09c:	00e4      	lsls	r4, r4, #3
 800d09e:	192d      	adds	r5, r5, r4
 800d0a0:	682a      	ldr	r2, [r5, #0]
 800d0a2:	686b      	ldr	r3, [r5, #4]
 800d0a4:	e7e3      	b.n	800d06e <_strtod_l+0x42a>
 800d0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a8:	3316      	adds	r3, #22
 800d0aa:	db0c      	blt.n	800d0c6 <_strtod_l+0x482>
 800d0ac:	9906      	ldr	r1, [sp, #24]
 800d0ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0b0:	4b5b      	ldr	r3, [pc, #364]	; (800d220 <_strtod_l+0x5dc>)
 800d0b2:	1a52      	subs	r2, r2, r1
 800d0b4:	00d2      	lsls	r2, r2, #3
 800d0b6:	189b      	adds	r3, r3, r2
 800d0b8:	0030      	movs	r0, r6
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	685b      	ldr	r3, [r3, #4]
 800d0be:	0039      	movs	r1, r7
 800d0c0:	f7f4 fd0e 	bl	8001ae0 <__aeabi_ddiv>
 800d0c4:	e794      	b.n	800cff0 <_strtod_l+0x3ac>
 800d0c6:	9b05      	ldr	r3, [sp, #20]
 800d0c8:	1b1c      	subs	r4, r3, r4
 800d0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0cc:	18e4      	adds	r4, r4, r3
 800d0ce:	2c00      	cmp	r4, #0
 800d0d0:	dd72      	ble.n	800d1b8 <_strtod_l+0x574>
 800d0d2:	220f      	movs	r2, #15
 800d0d4:	0023      	movs	r3, r4
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	4214      	tst	r4, r2
 800d0da:	d00a      	beq.n	800d0f2 <_strtod_l+0x4ae>
 800d0dc:	4950      	ldr	r1, [pc, #320]	; (800d220 <_strtod_l+0x5dc>)
 800d0de:	00db      	lsls	r3, r3, #3
 800d0e0:	18c9      	adds	r1, r1, r3
 800d0e2:	0032      	movs	r2, r6
 800d0e4:	6808      	ldr	r0, [r1, #0]
 800d0e6:	6849      	ldr	r1, [r1, #4]
 800d0e8:	003b      	movs	r3, r7
 800d0ea:	f7f5 f8f3 	bl	80022d4 <__aeabi_dmul>
 800d0ee:	0006      	movs	r6, r0
 800d0f0:	000f      	movs	r7, r1
 800d0f2:	230f      	movs	r3, #15
 800d0f4:	439c      	bics	r4, r3
 800d0f6:	d04a      	beq.n	800d18e <_strtod_l+0x54a>
 800d0f8:	3326      	adds	r3, #38	; 0x26
 800d0fa:	33ff      	adds	r3, #255	; 0xff
 800d0fc:	429c      	cmp	r4, r3
 800d0fe:	dd22      	ble.n	800d146 <_strtod_l+0x502>
 800d100:	2300      	movs	r3, #0
 800d102:	9305      	str	r3, [sp, #20]
 800d104:	9306      	str	r3, [sp, #24]
 800d106:	930d      	str	r3, [sp, #52]	; 0x34
 800d108:	9308      	str	r3, [sp, #32]
 800d10a:	2322      	movs	r3, #34	; 0x22
 800d10c:	2600      	movs	r6, #0
 800d10e:	9a04      	ldr	r2, [sp, #16]
 800d110:	4f3f      	ldr	r7, [pc, #252]	; (800d210 <_strtod_l+0x5cc>)
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d116:	42b3      	cmp	r3, r6
 800d118:	d100      	bne.n	800d11c <_strtod_l+0x4d8>
 800d11a:	e5ce      	b.n	800ccba <_strtod_l+0x76>
 800d11c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d11e:	9804      	ldr	r0, [sp, #16]
 800d120:	f003 f8ce 	bl	80102c0 <_Bfree>
 800d124:	9908      	ldr	r1, [sp, #32]
 800d126:	9804      	ldr	r0, [sp, #16]
 800d128:	f003 f8ca 	bl	80102c0 <_Bfree>
 800d12c:	9906      	ldr	r1, [sp, #24]
 800d12e:	9804      	ldr	r0, [sp, #16]
 800d130:	f003 f8c6 	bl	80102c0 <_Bfree>
 800d134:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d136:	9804      	ldr	r0, [sp, #16]
 800d138:	f003 f8c2 	bl	80102c0 <_Bfree>
 800d13c:	9905      	ldr	r1, [sp, #20]
 800d13e:	9804      	ldr	r0, [sp, #16]
 800d140:	f003 f8be 	bl	80102c0 <_Bfree>
 800d144:	e5b9      	b.n	800ccba <_strtod_l+0x76>
 800d146:	2300      	movs	r3, #0
 800d148:	0030      	movs	r0, r6
 800d14a:	0039      	movs	r1, r7
 800d14c:	4d35      	ldr	r5, [pc, #212]	; (800d224 <_strtod_l+0x5e0>)
 800d14e:	1124      	asrs	r4, r4, #4
 800d150:	9307      	str	r3, [sp, #28]
 800d152:	2c01      	cmp	r4, #1
 800d154:	dc1e      	bgt.n	800d194 <_strtod_l+0x550>
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <_strtod_l+0x51a>
 800d15a:	0006      	movs	r6, r0
 800d15c:	000f      	movs	r7, r1
 800d15e:	4b32      	ldr	r3, [pc, #200]	; (800d228 <_strtod_l+0x5e4>)
 800d160:	9a07      	ldr	r2, [sp, #28]
 800d162:	18ff      	adds	r7, r7, r3
 800d164:	4b2f      	ldr	r3, [pc, #188]	; (800d224 <_strtod_l+0x5e0>)
 800d166:	00d2      	lsls	r2, r2, #3
 800d168:	189d      	adds	r5, r3, r2
 800d16a:	6828      	ldr	r0, [r5, #0]
 800d16c:	6869      	ldr	r1, [r5, #4]
 800d16e:	0032      	movs	r2, r6
 800d170:	003b      	movs	r3, r7
 800d172:	f7f5 f8af 	bl	80022d4 <__aeabi_dmul>
 800d176:	4b26      	ldr	r3, [pc, #152]	; (800d210 <_strtod_l+0x5cc>)
 800d178:	4a2c      	ldr	r2, [pc, #176]	; (800d22c <_strtod_l+0x5e8>)
 800d17a:	0006      	movs	r6, r0
 800d17c:	400b      	ands	r3, r1
 800d17e:	4293      	cmp	r3, r2
 800d180:	d8be      	bhi.n	800d100 <_strtod_l+0x4bc>
 800d182:	4a2b      	ldr	r2, [pc, #172]	; (800d230 <_strtod_l+0x5ec>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d913      	bls.n	800d1b0 <_strtod_l+0x56c>
 800d188:	2601      	movs	r6, #1
 800d18a:	4f2a      	ldr	r7, [pc, #168]	; (800d234 <_strtod_l+0x5f0>)
 800d18c:	4276      	negs	r6, r6
 800d18e:	2300      	movs	r3, #0
 800d190:	9307      	str	r3, [sp, #28]
 800d192:	e088      	b.n	800d2a6 <_strtod_l+0x662>
 800d194:	2201      	movs	r2, #1
 800d196:	4214      	tst	r4, r2
 800d198:	d004      	beq.n	800d1a4 <_strtod_l+0x560>
 800d19a:	682a      	ldr	r2, [r5, #0]
 800d19c:	686b      	ldr	r3, [r5, #4]
 800d19e:	f7f5 f899 	bl	80022d4 <__aeabi_dmul>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	9a07      	ldr	r2, [sp, #28]
 800d1a6:	1064      	asrs	r4, r4, #1
 800d1a8:	3201      	adds	r2, #1
 800d1aa:	9207      	str	r2, [sp, #28]
 800d1ac:	3508      	adds	r5, #8
 800d1ae:	e7d0      	b.n	800d152 <_strtod_l+0x50e>
 800d1b0:	23d4      	movs	r3, #212	; 0xd4
 800d1b2:	049b      	lsls	r3, r3, #18
 800d1b4:	18cf      	adds	r7, r1, r3
 800d1b6:	e7ea      	b.n	800d18e <_strtod_l+0x54a>
 800d1b8:	2c00      	cmp	r4, #0
 800d1ba:	d0e8      	beq.n	800d18e <_strtod_l+0x54a>
 800d1bc:	4264      	negs	r4, r4
 800d1be:	230f      	movs	r3, #15
 800d1c0:	0022      	movs	r2, r4
 800d1c2:	401a      	ands	r2, r3
 800d1c4:	421c      	tst	r4, r3
 800d1c6:	d00a      	beq.n	800d1de <_strtod_l+0x59a>
 800d1c8:	4b15      	ldr	r3, [pc, #84]	; (800d220 <_strtod_l+0x5dc>)
 800d1ca:	00d2      	lsls	r2, r2, #3
 800d1cc:	189b      	adds	r3, r3, r2
 800d1ce:	0030      	movs	r0, r6
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	0039      	movs	r1, r7
 800d1d6:	f7f4 fc83 	bl	8001ae0 <__aeabi_ddiv>
 800d1da:	0006      	movs	r6, r0
 800d1dc:	000f      	movs	r7, r1
 800d1de:	1124      	asrs	r4, r4, #4
 800d1e0:	d0d5      	beq.n	800d18e <_strtod_l+0x54a>
 800d1e2:	2c1f      	cmp	r4, #31
 800d1e4:	dd28      	ble.n	800d238 <_strtod_l+0x5f4>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	9305      	str	r3, [sp, #20]
 800d1ea:	9306      	str	r3, [sp, #24]
 800d1ec:	930d      	str	r3, [sp, #52]	; 0x34
 800d1ee:	9308      	str	r3, [sp, #32]
 800d1f0:	2322      	movs	r3, #34	; 0x22
 800d1f2:	9a04      	ldr	r2, [sp, #16]
 800d1f4:	2600      	movs	r6, #0
 800d1f6:	6013      	str	r3, [r2, #0]
 800d1f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1fa:	2700      	movs	r7, #0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d18d      	bne.n	800d11c <_strtod_l+0x4d8>
 800d200:	e55b      	b.n	800ccba <_strtod_l+0x76>
 800d202:	46c0      	nop			; (mov r8, r8)
 800d204:	00004e1f 	.word	0x00004e1f
 800d208:	0801385e 	.word	0x0801385e
 800d20c:	08013714 	.word	0x08013714
 800d210:	7ff00000 	.word	0x7ff00000
 800d214:	08013856 	.word	0x08013856
 800d218:	08013942 	.word	0x08013942
 800d21c:	0801393e 	.word	0x0801393e
 800d220:	08013a98 	.word	0x08013a98
 800d224:	08013a70 	.word	0x08013a70
 800d228:	fcb00000 	.word	0xfcb00000
 800d22c:	7ca00000 	.word	0x7ca00000
 800d230:	7c900000 	.word	0x7c900000
 800d234:	7fefffff 	.word	0x7fefffff
 800d238:	2310      	movs	r3, #16
 800d23a:	0022      	movs	r2, r4
 800d23c:	401a      	ands	r2, r3
 800d23e:	9207      	str	r2, [sp, #28]
 800d240:	421c      	tst	r4, r3
 800d242:	d001      	beq.n	800d248 <_strtod_l+0x604>
 800d244:	335a      	adds	r3, #90	; 0x5a
 800d246:	9307      	str	r3, [sp, #28]
 800d248:	0030      	movs	r0, r6
 800d24a:	0039      	movs	r1, r7
 800d24c:	2300      	movs	r3, #0
 800d24e:	4dc4      	ldr	r5, [pc, #784]	; (800d560 <_strtod_l+0x91c>)
 800d250:	2201      	movs	r2, #1
 800d252:	4214      	tst	r4, r2
 800d254:	d004      	beq.n	800d260 <_strtod_l+0x61c>
 800d256:	682a      	ldr	r2, [r5, #0]
 800d258:	686b      	ldr	r3, [r5, #4]
 800d25a:	f7f5 f83b 	bl	80022d4 <__aeabi_dmul>
 800d25e:	2301      	movs	r3, #1
 800d260:	1064      	asrs	r4, r4, #1
 800d262:	3508      	adds	r5, #8
 800d264:	2c00      	cmp	r4, #0
 800d266:	d1f3      	bne.n	800d250 <_strtod_l+0x60c>
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <_strtod_l+0x62c>
 800d26c:	0006      	movs	r6, r0
 800d26e:	000f      	movs	r7, r1
 800d270:	9b07      	ldr	r3, [sp, #28]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00f      	beq.n	800d296 <_strtod_l+0x652>
 800d276:	236b      	movs	r3, #107	; 0x6b
 800d278:	007a      	lsls	r2, r7, #1
 800d27a:	0d52      	lsrs	r2, r2, #21
 800d27c:	0039      	movs	r1, r7
 800d27e:	1a9b      	subs	r3, r3, r2
 800d280:	2b00      	cmp	r3, #0
 800d282:	dd08      	ble.n	800d296 <_strtod_l+0x652>
 800d284:	2b1f      	cmp	r3, #31
 800d286:	dc00      	bgt.n	800d28a <_strtod_l+0x646>
 800d288:	e121      	b.n	800d4ce <_strtod_l+0x88a>
 800d28a:	2600      	movs	r6, #0
 800d28c:	2b34      	cmp	r3, #52	; 0x34
 800d28e:	dc00      	bgt.n	800d292 <_strtod_l+0x64e>
 800d290:	e116      	b.n	800d4c0 <_strtod_l+0x87c>
 800d292:	27dc      	movs	r7, #220	; 0xdc
 800d294:	04bf      	lsls	r7, r7, #18
 800d296:	2200      	movs	r2, #0
 800d298:	2300      	movs	r3, #0
 800d29a:	0030      	movs	r0, r6
 800d29c:	0039      	movs	r1, r7
 800d29e:	f7f3 f8d5 	bl	800044c <__aeabi_dcmpeq>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d19f      	bne.n	800d1e6 <_strtod_l+0x5a2>
 800d2a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2a8:	9a08      	ldr	r2, [sp, #32]
 800d2aa:	9300      	str	r3, [sp, #0]
 800d2ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d2ae:	9b05      	ldr	r3, [sp, #20]
 800d2b0:	9804      	ldr	r0, [sp, #16]
 800d2b2:	f003 f86d 	bl	8010390 <__s2b>
 800d2b6:	900d      	str	r0, [sp, #52]	; 0x34
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d100      	bne.n	800d2be <_strtod_l+0x67a>
 800d2bc:	e720      	b.n	800d100 <_strtod_l+0x4bc>
 800d2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c0:	9906      	ldr	r1, [sp, #24]
 800d2c2:	17da      	asrs	r2, r3, #31
 800d2c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2c6:	1a5b      	subs	r3, r3, r1
 800d2c8:	401a      	ands	r2, r3
 800d2ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2cc:	9215      	str	r2, [sp, #84]	; 0x54
 800d2ce:	43db      	mvns	r3, r3
 800d2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2d2:	17db      	asrs	r3, r3, #31
 800d2d4:	401a      	ands	r2, r3
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	9218      	str	r2, [sp, #96]	; 0x60
 800d2da:	9305      	str	r3, [sp, #20]
 800d2dc:	9306      	str	r3, [sp, #24]
 800d2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2e0:	9804      	ldr	r0, [sp, #16]
 800d2e2:	6859      	ldr	r1, [r3, #4]
 800d2e4:	f002 ffa8 	bl	8010238 <_Balloc>
 800d2e8:	9008      	str	r0, [sp, #32]
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d100      	bne.n	800d2f0 <_strtod_l+0x6ac>
 800d2ee:	e70c      	b.n	800d10a <_strtod_l+0x4c6>
 800d2f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2f2:	300c      	adds	r0, #12
 800d2f4:	0019      	movs	r1, r3
 800d2f6:	691a      	ldr	r2, [r3, #16]
 800d2f8:	310c      	adds	r1, #12
 800d2fa:	3202      	adds	r2, #2
 800d2fc:	0092      	lsls	r2, r2, #2
 800d2fe:	f001 fd13 	bl	800ed28 <memcpy>
 800d302:	ab1e      	add	r3, sp, #120	; 0x78
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	ab1d      	add	r3, sp, #116	; 0x74
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	0032      	movs	r2, r6
 800d30c:	003b      	movs	r3, r7
 800d30e:	9804      	ldr	r0, [sp, #16]
 800d310:	9610      	str	r6, [sp, #64]	; 0x40
 800d312:	9711      	str	r7, [sp, #68]	; 0x44
 800d314:	f003 fb7e 	bl	8010a14 <__d2b>
 800d318:	901c      	str	r0, [sp, #112]	; 0x70
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d100      	bne.n	800d320 <_strtod_l+0x6dc>
 800d31e:	e6f4      	b.n	800d10a <_strtod_l+0x4c6>
 800d320:	2101      	movs	r1, #1
 800d322:	9804      	ldr	r0, [sp, #16]
 800d324:	f003 f8c8 	bl	80104b8 <__i2b>
 800d328:	9006      	str	r0, [sp, #24]
 800d32a:	2800      	cmp	r0, #0
 800d32c:	d100      	bne.n	800d330 <_strtod_l+0x6ec>
 800d32e:	e6ec      	b.n	800d10a <_strtod_l+0x4c6>
 800d330:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d332:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d334:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d336:	1ad4      	subs	r4, r2, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	db01      	blt.n	800d340 <_strtod_l+0x6fc>
 800d33c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800d33e:	195d      	adds	r5, r3, r5
 800d340:	9907      	ldr	r1, [sp, #28]
 800d342:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d344:	1a5b      	subs	r3, r3, r1
 800d346:	2136      	movs	r1, #54	; 0x36
 800d348:	189b      	adds	r3, r3, r2
 800d34a:	1a8a      	subs	r2, r1, r2
 800d34c:	4985      	ldr	r1, [pc, #532]	; (800d564 <_strtod_l+0x920>)
 800d34e:	2001      	movs	r0, #1
 800d350:	468c      	mov	ip, r1
 800d352:	2100      	movs	r1, #0
 800d354:	3b01      	subs	r3, #1
 800d356:	9114      	str	r1, [sp, #80]	; 0x50
 800d358:	9012      	str	r0, [sp, #72]	; 0x48
 800d35a:	4563      	cmp	r3, ip
 800d35c:	da07      	bge.n	800d36e <_strtod_l+0x72a>
 800d35e:	4661      	mov	r1, ip
 800d360:	1ac9      	subs	r1, r1, r3
 800d362:	1a52      	subs	r2, r2, r1
 800d364:	291f      	cmp	r1, #31
 800d366:	dd00      	ble.n	800d36a <_strtod_l+0x726>
 800d368:	e0b6      	b.n	800d4d8 <_strtod_l+0x894>
 800d36a:	4088      	lsls	r0, r1
 800d36c:	9012      	str	r0, [sp, #72]	; 0x48
 800d36e:	18ab      	adds	r3, r5, r2
 800d370:	930c      	str	r3, [sp, #48]	; 0x30
 800d372:	18a4      	adds	r4, r4, r2
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d378:	191c      	adds	r4, r3, r4
 800d37a:	002b      	movs	r3, r5
 800d37c:	4295      	cmp	r5, r2
 800d37e:	dd00      	ble.n	800d382 <_strtod_l+0x73e>
 800d380:	0013      	movs	r3, r2
 800d382:	42a3      	cmp	r3, r4
 800d384:	dd00      	ble.n	800d388 <_strtod_l+0x744>
 800d386:	0023      	movs	r3, r4
 800d388:	2b00      	cmp	r3, #0
 800d38a:	dd04      	ble.n	800d396 <_strtod_l+0x752>
 800d38c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d38e:	1ae4      	subs	r4, r4, r3
 800d390:	1ad2      	subs	r2, r2, r3
 800d392:	920c      	str	r2, [sp, #48]	; 0x30
 800d394:	1aed      	subs	r5, r5, r3
 800d396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dd17      	ble.n	800d3cc <_strtod_l+0x788>
 800d39c:	001a      	movs	r2, r3
 800d39e:	9906      	ldr	r1, [sp, #24]
 800d3a0:	9804      	ldr	r0, [sp, #16]
 800d3a2:	f003 f951 	bl	8010648 <__pow5mult>
 800d3a6:	9006      	str	r0, [sp, #24]
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d100      	bne.n	800d3ae <_strtod_l+0x76a>
 800d3ac:	e6ad      	b.n	800d10a <_strtod_l+0x4c6>
 800d3ae:	0001      	movs	r1, r0
 800d3b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d3b2:	9804      	ldr	r0, [sp, #16]
 800d3b4:	f003 f898 	bl	80104e8 <__multiply>
 800d3b8:	900e      	str	r0, [sp, #56]	; 0x38
 800d3ba:	2800      	cmp	r0, #0
 800d3bc:	d100      	bne.n	800d3c0 <_strtod_l+0x77c>
 800d3be:	e6a4      	b.n	800d10a <_strtod_l+0x4c6>
 800d3c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d3c2:	9804      	ldr	r0, [sp, #16]
 800d3c4:	f002 ff7c 	bl	80102c0 <_Bfree>
 800d3c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3ca:	931c      	str	r3, [sp, #112]	; 0x70
 800d3cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	dd00      	ble.n	800d3d4 <_strtod_l+0x790>
 800d3d2:	e087      	b.n	800d4e4 <_strtod_l+0x8a0>
 800d3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dd08      	ble.n	800d3ec <_strtod_l+0x7a8>
 800d3da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3dc:	9908      	ldr	r1, [sp, #32]
 800d3de:	9804      	ldr	r0, [sp, #16]
 800d3e0:	f003 f932 	bl	8010648 <__pow5mult>
 800d3e4:	9008      	str	r0, [sp, #32]
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d100      	bne.n	800d3ec <_strtod_l+0x7a8>
 800d3ea:	e68e      	b.n	800d10a <_strtod_l+0x4c6>
 800d3ec:	2c00      	cmp	r4, #0
 800d3ee:	dd08      	ble.n	800d402 <_strtod_l+0x7be>
 800d3f0:	0022      	movs	r2, r4
 800d3f2:	9908      	ldr	r1, [sp, #32]
 800d3f4:	9804      	ldr	r0, [sp, #16]
 800d3f6:	f003 f983 	bl	8010700 <__lshift>
 800d3fa:	9008      	str	r0, [sp, #32]
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d100      	bne.n	800d402 <_strtod_l+0x7be>
 800d400:	e683      	b.n	800d10a <_strtod_l+0x4c6>
 800d402:	2d00      	cmp	r5, #0
 800d404:	dd08      	ble.n	800d418 <_strtod_l+0x7d4>
 800d406:	002a      	movs	r2, r5
 800d408:	9906      	ldr	r1, [sp, #24]
 800d40a:	9804      	ldr	r0, [sp, #16]
 800d40c:	f003 f978 	bl	8010700 <__lshift>
 800d410:	9006      	str	r0, [sp, #24]
 800d412:	2800      	cmp	r0, #0
 800d414:	d100      	bne.n	800d418 <_strtod_l+0x7d4>
 800d416:	e678      	b.n	800d10a <_strtod_l+0x4c6>
 800d418:	9a08      	ldr	r2, [sp, #32]
 800d41a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d41c:	9804      	ldr	r0, [sp, #16]
 800d41e:	f003 f9f9 	bl	8010814 <__mdiff>
 800d422:	9005      	str	r0, [sp, #20]
 800d424:	2800      	cmp	r0, #0
 800d426:	d100      	bne.n	800d42a <_strtod_l+0x7e6>
 800d428:	e66f      	b.n	800d10a <_strtod_l+0x4c6>
 800d42a:	2200      	movs	r2, #0
 800d42c:	68c3      	ldr	r3, [r0, #12]
 800d42e:	9906      	ldr	r1, [sp, #24]
 800d430:	60c2      	str	r2, [r0, #12]
 800d432:	930c      	str	r3, [sp, #48]	; 0x30
 800d434:	f003 f9d2 	bl	80107dc <__mcmp>
 800d438:	2800      	cmp	r0, #0
 800d43a:	da5d      	bge.n	800d4f8 <_strtod_l+0x8b4>
 800d43c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d43e:	4333      	orrs	r3, r6
 800d440:	d000      	beq.n	800d444 <_strtod_l+0x800>
 800d442:	e088      	b.n	800d556 <_strtod_l+0x912>
 800d444:	033b      	lsls	r3, r7, #12
 800d446:	d000      	beq.n	800d44a <_strtod_l+0x806>
 800d448:	e085      	b.n	800d556 <_strtod_l+0x912>
 800d44a:	22d6      	movs	r2, #214	; 0xd6
 800d44c:	4b46      	ldr	r3, [pc, #280]	; (800d568 <_strtod_l+0x924>)
 800d44e:	04d2      	lsls	r2, r2, #19
 800d450:	403b      	ands	r3, r7
 800d452:	4293      	cmp	r3, r2
 800d454:	d97f      	bls.n	800d556 <_strtod_l+0x912>
 800d456:	9b05      	ldr	r3, [sp, #20]
 800d458:	695b      	ldr	r3, [r3, #20]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d103      	bne.n	800d466 <_strtod_l+0x822>
 800d45e:	9b05      	ldr	r3, [sp, #20]
 800d460:	691b      	ldr	r3, [r3, #16]
 800d462:	2b01      	cmp	r3, #1
 800d464:	dd77      	ble.n	800d556 <_strtod_l+0x912>
 800d466:	9905      	ldr	r1, [sp, #20]
 800d468:	2201      	movs	r2, #1
 800d46a:	9804      	ldr	r0, [sp, #16]
 800d46c:	f003 f948 	bl	8010700 <__lshift>
 800d470:	9906      	ldr	r1, [sp, #24]
 800d472:	9005      	str	r0, [sp, #20]
 800d474:	f003 f9b2 	bl	80107dc <__mcmp>
 800d478:	2800      	cmp	r0, #0
 800d47a:	dd6c      	ble.n	800d556 <_strtod_l+0x912>
 800d47c:	9907      	ldr	r1, [sp, #28]
 800d47e:	003b      	movs	r3, r7
 800d480:	4a39      	ldr	r2, [pc, #228]	; (800d568 <_strtod_l+0x924>)
 800d482:	2900      	cmp	r1, #0
 800d484:	d100      	bne.n	800d488 <_strtod_l+0x844>
 800d486:	e094      	b.n	800d5b2 <_strtod_l+0x96e>
 800d488:	0011      	movs	r1, r2
 800d48a:	20d6      	movs	r0, #214	; 0xd6
 800d48c:	4039      	ands	r1, r7
 800d48e:	04c0      	lsls	r0, r0, #19
 800d490:	4281      	cmp	r1, r0
 800d492:	dd00      	ble.n	800d496 <_strtod_l+0x852>
 800d494:	e08d      	b.n	800d5b2 <_strtod_l+0x96e>
 800d496:	23dc      	movs	r3, #220	; 0xdc
 800d498:	049b      	lsls	r3, r3, #18
 800d49a:	4299      	cmp	r1, r3
 800d49c:	dc00      	bgt.n	800d4a0 <_strtod_l+0x85c>
 800d49e:	e6a7      	b.n	800d1f0 <_strtod_l+0x5ac>
 800d4a0:	0030      	movs	r0, r6
 800d4a2:	0039      	movs	r1, r7
 800d4a4:	4b31      	ldr	r3, [pc, #196]	; (800d56c <_strtod_l+0x928>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f7f4 ff14 	bl	80022d4 <__aeabi_dmul>
 800d4ac:	4b2e      	ldr	r3, [pc, #184]	; (800d568 <_strtod_l+0x924>)
 800d4ae:	0006      	movs	r6, r0
 800d4b0:	000f      	movs	r7, r1
 800d4b2:	420b      	tst	r3, r1
 800d4b4:	d000      	beq.n	800d4b8 <_strtod_l+0x874>
 800d4b6:	e631      	b.n	800d11c <_strtod_l+0x4d8>
 800d4b8:	2322      	movs	r3, #34	; 0x22
 800d4ba:	9a04      	ldr	r2, [sp, #16]
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	e62d      	b.n	800d11c <_strtod_l+0x4d8>
 800d4c0:	234b      	movs	r3, #75	; 0x4b
 800d4c2:	1a9a      	subs	r2, r3, r2
 800d4c4:	3b4c      	subs	r3, #76	; 0x4c
 800d4c6:	4093      	lsls	r3, r2
 800d4c8:	4019      	ands	r1, r3
 800d4ca:	000f      	movs	r7, r1
 800d4cc:	e6e3      	b.n	800d296 <_strtod_l+0x652>
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4252      	negs	r2, r2
 800d4d2:	409a      	lsls	r2, r3
 800d4d4:	4016      	ands	r6, r2
 800d4d6:	e6de      	b.n	800d296 <_strtod_l+0x652>
 800d4d8:	4925      	ldr	r1, [pc, #148]	; (800d570 <_strtod_l+0x92c>)
 800d4da:	1acb      	subs	r3, r1, r3
 800d4dc:	0001      	movs	r1, r0
 800d4de:	4099      	lsls	r1, r3
 800d4e0:	9114      	str	r1, [sp, #80]	; 0x50
 800d4e2:	e743      	b.n	800d36c <_strtod_l+0x728>
 800d4e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d4e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d4e8:	9804      	ldr	r0, [sp, #16]
 800d4ea:	f003 f909 	bl	8010700 <__lshift>
 800d4ee:	901c      	str	r0, [sp, #112]	; 0x70
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	d000      	beq.n	800d4f6 <_strtod_l+0x8b2>
 800d4f4:	e76e      	b.n	800d3d4 <_strtod_l+0x790>
 800d4f6:	e608      	b.n	800d10a <_strtod_l+0x4c6>
 800d4f8:	970e      	str	r7, [sp, #56]	; 0x38
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d177      	bne.n	800d5ee <_strtod_l+0x9aa>
 800d4fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d500:	033b      	lsls	r3, r7, #12
 800d502:	0b1b      	lsrs	r3, r3, #12
 800d504:	2a00      	cmp	r2, #0
 800d506:	d039      	beq.n	800d57c <_strtod_l+0x938>
 800d508:	4a1a      	ldr	r2, [pc, #104]	; (800d574 <_strtod_l+0x930>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d139      	bne.n	800d582 <_strtod_l+0x93e>
 800d50e:	2101      	movs	r1, #1
 800d510:	9b07      	ldr	r3, [sp, #28]
 800d512:	4249      	negs	r1, r1
 800d514:	0032      	movs	r2, r6
 800d516:	0008      	movs	r0, r1
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00b      	beq.n	800d534 <_strtod_l+0x8f0>
 800d51c:	24d4      	movs	r4, #212	; 0xd4
 800d51e:	4b12      	ldr	r3, [pc, #72]	; (800d568 <_strtod_l+0x924>)
 800d520:	0008      	movs	r0, r1
 800d522:	403b      	ands	r3, r7
 800d524:	04e4      	lsls	r4, r4, #19
 800d526:	42a3      	cmp	r3, r4
 800d528:	d804      	bhi.n	800d534 <_strtod_l+0x8f0>
 800d52a:	306c      	adds	r0, #108	; 0x6c
 800d52c:	0d1b      	lsrs	r3, r3, #20
 800d52e:	1ac3      	subs	r3, r0, r3
 800d530:	4099      	lsls	r1, r3
 800d532:	0008      	movs	r0, r1
 800d534:	4282      	cmp	r2, r0
 800d536:	d124      	bne.n	800d582 <_strtod_l+0x93e>
 800d538:	4b0f      	ldr	r3, [pc, #60]	; (800d578 <_strtod_l+0x934>)
 800d53a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d53c:	4299      	cmp	r1, r3
 800d53e:	d102      	bne.n	800d546 <_strtod_l+0x902>
 800d540:	3201      	adds	r2, #1
 800d542:	d100      	bne.n	800d546 <_strtod_l+0x902>
 800d544:	e5e1      	b.n	800d10a <_strtod_l+0x4c6>
 800d546:	4b08      	ldr	r3, [pc, #32]	; (800d568 <_strtod_l+0x924>)
 800d548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d54a:	2600      	movs	r6, #0
 800d54c:	401a      	ands	r2, r3
 800d54e:	0013      	movs	r3, r2
 800d550:	2280      	movs	r2, #128	; 0x80
 800d552:	0352      	lsls	r2, r2, #13
 800d554:	189f      	adds	r7, r3, r2
 800d556:	9b07      	ldr	r3, [sp, #28]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d1a1      	bne.n	800d4a0 <_strtod_l+0x85c>
 800d55c:	e5de      	b.n	800d11c <_strtod_l+0x4d8>
 800d55e:	46c0      	nop			; (mov r8, r8)
 800d560:	08013728 	.word	0x08013728
 800d564:	fffffc02 	.word	0xfffffc02
 800d568:	7ff00000 	.word	0x7ff00000
 800d56c:	39500000 	.word	0x39500000
 800d570:	fffffbe2 	.word	0xfffffbe2
 800d574:	000fffff 	.word	0x000fffff
 800d578:	7fefffff 	.word	0x7fefffff
 800d57c:	4333      	orrs	r3, r6
 800d57e:	d100      	bne.n	800d582 <_strtod_l+0x93e>
 800d580:	e77c      	b.n	800d47c <_strtod_l+0x838>
 800d582:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d584:	2b00      	cmp	r3, #0
 800d586:	d01d      	beq.n	800d5c4 <_strtod_l+0x980>
 800d588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d58a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d58c:	4213      	tst	r3, r2
 800d58e:	d0e2      	beq.n	800d556 <_strtod_l+0x912>
 800d590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d592:	0030      	movs	r0, r6
 800d594:	0039      	movs	r1, r7
 800d596:	9a07      	ldr	r2, [sp, #28]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d017      	beq.n	800d5cc <_strtod_l+0x988>
 800d59c:	f7ff fb3a 	bl	800cc14 <sulp>
 800d5a0:	0002      	movs	r2, r0
 800d5a2:	000b      	movs	r3, r1
 800d5a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d5a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d5a8:	f7f3 ff3a 	bl	8001420 <__aeabi_dadd>
 800d5ac:	0006      	movs	r6, r0
 800d5ae:	000f      	movs	r7, r1
 800d5b0:	e7d1      	b.n	800d556 <_strtod_l+0x912>
 800d5b2:	2601      	movs	r6, #1
 800d5b4:	4013      	ands	r3, r2
 800d5b6:	4a98      	ldr	r2, [pc, #608]	; (800d818 <_strtod_l+0xbd4>)
 800d5b8:	4276      	negs	r6, r6
 800d5ba:	189b      	adds	r3, r3, r2
 800d5bc:	4a97      	ldr	r2, [pc, #604]	; (800d81c <_strtod_l+0xbd8>)
 800d5be:	431a      	orrs	r2, r3
 800d5c0:	0017      	movs	r7, r2
 800d5c2:	e7c8      	b.n	800d556 <_strtod_l+0x912>
 800d5c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5c6:	4233      	tst	r3, r6
 800d5c8:	d0c5      	beq.n	800d556 <_strtod_l+0x912>
 800d5ca:	e7e1      	b.n	800d590 <_strtod_l+0x94c>
 800d5cc:	f7ff fb22 	bl	800cc14 <sulp>
 800d5d0:	0002      	movs	r2, r0
 800d5d2:	000b      	movs	r3, r1
 800d5d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d5d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d5d8:	f7f5 f93e 	bl	8002858 <__aeabi_dsub>
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
 800d5e0:	0006      	movs	r6, r0
 800d5e2:	000f      	movs	r7, r1
 800d5e4:	f7f2 ff32 	bl	800044c <__aeabi_dcmpeq>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d0b4      	beq.n	800d556 <_strtod_l+0x912>
 800d5ec:	e600      	b.n	800d1f0 <_strtod_l+0x5ac>
 800d5ee:	9906      	ldr	r1, [sp, #24]
 800d5f0:	9805      	ldr	r0, [sp, #20]
 800d5f2:	f003 fa6f 	bl	8010ad4 <__ratio>
 800d5f6:	2380      	movs	r3, #128	; 0x80
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	05db      	lsls	r3, r3, #23
 800d5fc:	0004      	movs	r4, r0
 800d5fe:	000d      	movs	r5, r1
 800d600:	f7f2 ff34 	bl	800046c <__aeabi_dcmple>
 800d604:	2800      	cmp	r0, #0
 800d606:	d06d      	beq.n	800d6e4 <_strtod_l+0xaa0>
 800d608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d000      	beq.n	800d610 <_strtod_l+0x9cc>
 800d60e:	e07e      	b.n	800d70e <_strtod_l+0xaca>
 800d610:	2e00      	cmp	r6, #0
 800d612:	d158      	bne.n	800d6c6 <_strtod_l+0xa82>
 800d614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d616:	031b      	lsls	r3, r3, #12
 800d618:	d000      	beq.n	800d61c <_strtod_l+0x9d8>
 800d61a:	e07f      	b.n	800d71c <_strtod_l+0xad8>
 800d61c:	2200      	movs	r2, #0
 800d61e:	0020      	movs	r0, r4
 800d620:	0029      	movs	r1, r5
 800d622:	4b7f      	ldr	r3, [pc, #508]	; (800d820 <_strtod_l+0xbdc>)
 800d624:	f7f2 ff18 	bl	8000458 <__aeabi_dcmplt>
 800d628:	2800      	cmp	r0, #0
 800d62a:	d158      	bne.n	800d6de <_strtod_l+0xa9a>
 800d62c:	0020      	movs	r0, r4
 800d62e:	0029      	movs	r1, r5
 800d630:	2200      	movs	r2, #0
 800d632:	4b7c      	ldr	r3, [pc, #496]	; (800d824 <_strtod_l+0xbe0>)
 800d634:	f7f4 fe4e 	bl	80022d4 <__aeabi_dmul>
 800d638:	0004      	movs	r4, r0
 800d63a:	000d      	movs	r5, r1
 800d63c:	2380      	movs	r3, #128	; 0x80
 800d63e:	061b      	lsls	r3, r3, #24
 800d640:	940a      	str	r4, [sp, #40]	; 0x28
 800d642:	18eb      	adds	r3, r5, r3
 800d644:	930b      	str	r3, [sp, #44]	; 0x2c
 800d646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d64a:	9212      	str	r2, [sp, #72]	; 0x48
 800d64c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d64e:	4a76      	ldr	r2, [pc, #472]	; (800d828 <_strtod_l+0xbe4>)
 800d650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d652:	4013      	ands	r3, r2
 800d654:	9314      	str	r3, [sp, #80]	; 0x50
 800d656:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d658:	4b74      	ldr	r3, [pc, #464]	; (800d82c <_strtod_l+0xbe8>)
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d000      	beq.n	800d660 <_strtod_l+0xa1c>
 800d65e:	e091      	b.n	800d784 <_strtod_l+0xb40>
 800d660:	4a73      	ldr	r2, [pc, #460]	; (800d830 <_strtod_l+0xbec>)
 800d662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d664:	4694      	mov	ip, r2
 800d666:	4463      	add	r3, ip
 800d668:	001f      	movs	r7, r3
 800d66a:	0030      	movs	r0, r6
 800d66c:	0019      	movs	r1, r3
 800d66e:	f003 f969 	bl	8010944 <__ulp>
 800d672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d676:	f7f4 fe2d 	bl	80022d4 <__aeabi_dmul>
 800d67a:	0032      	movs	r2, r6
 800d67c:	003b      	movs	r3, r7
 800d67e:	f7f3 fecf 	bl	8001420 <__aeabi_dadd>
 800d682:	4a69      	ldr	r2, [pc, #420]	; (800d828 <_strtod_l+0xbe4>)
 800d684:	4b6b      	ldr	r3, [pc, #428]	; (800d834 <_strtod_l+0xbf0>)
 800d686:	0006      	movs	r6, r0
 800d688:	400a      	ands	r2, r1
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d949      	bls.n	800d722 <_strtod_l+0xade>
 800d68e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d690:	4b69      	ldr	r3, [pc, #420]	; (800d838 <_strtod_l+0xbf4>)
 800d692:	429a      	cmp	r2, r3
 800d694:	d103      	bne.n	800d69e <_strtod_l+0xa5a>
 800d696:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d698:	3301      	adds	r3, #1
 800d69a:	d100      	bne.n	800d69e <_strtod_l+0xa5a>
 800d69c:	e535      	b.n	800d10a <_strtod_l+0x4c6>
 800d69e:	2601      	movs	r6, #1
 800d6a0:	4f65      	ldr	r7, [pc, #404]	; (800d838 <_strtod_l+0xbf4>)
 800d6a2:	4276      	negs	r6, r6
 800d6a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d6a6:	9804      	ldr	r0, [sp, #16]
 800d6a8:	f002 fe0a 	bl	80102c0 <_Bfree>
 800d6ac:	9908      	ldr	r1, [sp, #32]
 800d6ae:	9804      	ldr	r0, [sp, #16]
 800d6b0:	f002 fe06 	bl	80102c0 <_Bfree>
 800d6b4:	9906      	ldr	r1, [sp, #24]
 800d6b6:	9804      	ldr	r0, [sp, #16]
 800d6b8:	f002 fe02 	bl	80102c0 <_Bfree>
 800d6bc:	9905      	ldr	r1, [sp, #20]
 800d6be:	9804      	ldr	r0, [sp, #16]
 800d6c0:	f002 fdfe 	bl	80102c0 <_Bfree>
 800d6c4:	e60b      	b.n	800d2de <_strtod_l+0x69a>
 800d6c6:	2e01      	cmp	r6, #1
 800d6c8:	d103      	bne.n	800d6d2 <_strtod_l+0xa8e>
 800d6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d100      	bne.n	800d6d2 <_strtod_l+0xa8e>
 800d6d0:	e58e      	b.n	800d1f0 <_strtod_l+0x5ac>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	4c59      	ldr	r4, [pc, #356]	; (800d83c <_strtod_l+0xbf8>)
 800d6d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800d6da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d6dc:	e01c      	b.n	800d718 <_strtod_l+0xad4>
 800d6de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d6e0:	4d50      	ldr	r5, [pc, #320]	; (800d824 <_strtod_l+0xbe0>)
 800d6e2:	e7ab      	b.n	800d63c <_strtod_l+0x9f8>
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	0020      	movs	r0, r4
 800d6e8:	0029      	movs	r1, r5
 800d6ea:	4b4e      	ldr	r3, [pc, #312]	; (800d824 <_strtod_l+0xbe0>)
 800d6ec:	f7f4 fdf2 	bl	80022d4 <__aeabi_dmul>
 800d6f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6f2:	0004      	movs	r4, r0
 800d6f4:	000b      	movs	r3, r1
 800d6f6:	000d      	movs	r5, r1
 800d6f8:	2a00      	cmp	r2, #0
 800d6fa:	d104      	bne.n	800d706 <_strtod_l+0xac2>
 800d6fc:	2280      	movs	r2, #128	; 0x80
 800d6fe:	0612      	lsls	r2, r2, #24
 800d700:	900a      	str	r0, [sp, #40]	; 0x28
 800d702:	188b      	adds	r3, r1, r2
 800d704:	e79e      	b.n	800d644 <_strtod_l+0xa00>
 800d706:	0002      	movs	r2, r0
 800d708:	920a      	str	r2, [sp, #40]	; 0x28
 800d70a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d70c:	e79b      	b.n	800d646 <_strtod_l+0xa02>
 800d70e:	2300      	movs	r3, #0
 800d710:	4c43      	ldr	r4, [pc, #268]	; (800d820 <_strtod_l+0xbdc>)
 800d712:	930a      	str	r3, [sp, #40]	; 0x28
 800d714:	940b      	str	r4, [sp, #44]	; 0x2c
 800d716:	2400      	movs	r4, #0
 800d718:	4d41      	ldr	r5, [pc, #260]	; (800d820 <_strtod_l+0xbdc>)
 800d71a:	e794      	b.n	800d646 <_strtod_l+0xa02>
 800d71c:	2300      	movs	r3, #0
 800d71e:	4c47      	ldr	r4, [pc, #284]	; (800d83c <_strtod_l+0xbf8>)
 800d720:	e7f7      	b.n	800d712 <_strtod_l+0xace>
 800d722:	23d4      	movs	r3, #212	; 0xd4
 800d724:	049b      	lsls	r3, r3, #18
 800d726:	18cf      	adds	r7, r1, r3
 800d728:	9b07      	ldr	r3, [sp, #28]
 800d72a:	970e      	str	r7, [sp, #56]	; 0x38
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1b9      	bne.n	800d6a4 <_strtod_l+0xa60>
 800d730:	4b3d      	ldr	r3, [pc, #244]	; (800d828 <_strtod_l+0xbe4>)
 800d732:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d734:	403b      	ands	r3, r7
 800d736:	429a      	cmp	r2, r3
 800d738:	d1b4      	bne.n	800d6a4 <_strtod_l+0xa60>
 800d73a:	0020      	movs	r0, r4
 800d73c:	0029      	movs	r1, r5
 800d73e:	f7f2 ff0b 	bl	8000558 <__aeabi_d2lz>
 800d742:	f7f2 ff45 	bl	80005d0 <__aeabi_l2d>
 800d746:	0002      	movs	r2, r0
 800d748:	000b      	movs	r3, r1
 800d74a:	0020      	movs	r0, r4
 800d74c:	0029      	movs	r1, r5
 800d74e:	f7f5 f883 	bl	8002858 <__aeabi_dsub>
 800d752:	033b      	lsls	r3, r7, #12
 800d754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d756:	0b1b      	lsrs	r3, r3, #12
 800d758:	4333      	orrs	r3, r6
 800d75a:	4313      	orrs	r3, r2
 800d75c:	0004      	movs	r4, r0
 800d75e:	000d      	movs	r5, r1
 800d760:	4a37      	ldr	r2, [pc, #220]	; (800d840 <_strtod_l+0xbfc>)
 800d762:	2b00      	cmp	r3, #0
 800d764:	d054      	beq.n	800d810 <_strtod_l+0xbcc>
 800d766:	4b37      	ldr	r3, [pc, #220]	; (800d844 <_strtod_l+0xc00>)
 800d768:	f7f2 fe76 	bl	8000458 <__aeabi_dcmplt>
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d000      	beq.n	800d772 <_strtod_l+0xb2e>
 800d770:	e4d4      	b.n	800d11c <_strtod_l+0x4d8>
 800d772:	0020      	movs	r0, r4
 800d774:	0029      	movs	r1, r5
 800d776:	4a34      	ldr	r2, [pc, #208]	; (800d848 <_strtod_l+0xc04>)
 800d778:	4b2a      	ldr	r3, [pc, #168]	; (800d824 <_strtod_l+0xbe0>)
 800d77a:	f7f2 fe81 	bl	8000480 <__aeabi_dcmpgt>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d090      	beq.n	800d6a4 <_strtod_l+0xa60>
 800d782:	e4cb      	b.n	800d11c <_strtod_l+0x4d8>
 800d784:	9b07      	ldr	r3, [sp, #28]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d02b      	beq.n	800d7e2 <_strtod_l+0xb9e>
 800d78a:	23d4      	movs	r3, #212	; 0xd4
 800d78c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d78e:	04db      	lsls	r3, r3, #19
 800d790:	429a      	cmp	r2, r3
 800d792:	d826      	bhi.n	800d7e2 <_strtod_l+0xb9e>
 800d794:	0020      	movs	r0, r4
 800d796:	0029      	movs	r1, r5
 800d798:	4a2c      	ldr	r2, [pc, #176]	; (800d84c <_strtod_l+0xc08>)
 800d79a:	4b2d      	ldr	r3, [pc, #180]	; (800d850 <_strtod_l+0xc0c>)
 800d79c:	f7f2 fe66 	bl	800046c <__aeabi_dcmple>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d017      	beq.n	800d7d4 <_strtod_l+0xb90>
 800d7a4:	0020      	movs	r0, r4
 800d7a6:	0029      	movs	r1, r5
 800d7a8:	f7f2 feb8 	bl	800051c <__aeabi_d2uiz>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d100      	bne.n	800d7b2 <_strtod_l+0xb6e>
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	f7f5 fc57 	bl	8003064 <__aeabi_ui2d>
 800d7b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7b8:	0004      	movs	r4, r0
 800d7ba:	000b      	movs	r3, r1
 800d7bc:	000d      	movs	r5, r1
 800d7be:	2a00      	cmp	r2, #0
 800d7c0:	d122      	bne.n	800d808 <_strtod_l+0xbc4>
 800d7c2:	2280      	movs	r2, #128	; 0x80
 800d7c4:	0612      	lsls	r2, r2, #24
 800d7c6:	188b      	adds	r3, r1, r2
 800d7c8:	9016      	str	r0, [sp, #88]	; 0x58
 800d7ca:	9317      	str	r3, [sp, #92]	; 0x5c
 800d7cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7d0:	9212      	str	r2, [sp, #72]	; 0x48
 800d7d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7d4:	22d6      	movs	r2, #214	; 0xd6
 800d7d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d7d8:	04d2      	lsls	r2, r2, #19
 800d7da:	189b      	adds	r3, r3, r2
 800d7dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d7de:	1a9b      	subs	r3, r3, r2
 800d7e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d7e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d7e6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d7e8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d7ea:	f003 f8ab 	bl	8010944 <__ulp>
 800d7ee:	0002      	movs	r2, r0
 800d7f0:	000b      	movs	r3, r1
 800d7f2:	0030      	movs	r0, r6
 800d7f4:	0039      	movs	r1, r7
 800d7f6:	f7f4 fd6d 	bl	80022d4 <__aeabi_dmul>
 800d7fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d7fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7fe:	f7f3 fe0f 	bl	8001420 <__aeabi_dadd>
 800d802:	0006      	movs	r6, r0
 800d804:	000f      	movs	r7, r1
 800d806:	e78f      	b.n	800d728 <_strtod_l+0xae4>
 800d808:	0002      	movs	r2, r0
 800d80a:	9216      	str	r2, [sp, #88]	; 0x58
 800d80c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d80e:	e7dd      	b.n	800d7cc <_strtod_l+0xb88>
 800d810:	4b10      	ldr	r3, [pc, #64]	; (800d854 <_strtod_l+0xc10>)
 800d812:	f7f2 fe21 	bl	8000458 <__aeabi_dcmplt>
 800d816:	e7b2      	b.n	800d77e <_strtod_l+0xb3a>
 800d818:	fff00000 	.word	0xfff00000
 800d81c:	000fffff 	.word	0x000fffff
 800d820:	3ff00000 	.word	0x3ff00000
 800d824:	3fe00000 	.word	0x3fe00000
 800d828:	7ff00000 	.word	0x7ff00000
 800d82c:	7fe00000 	.word	0x7fe00000
 800d830:	fcb00000 	.word	0xfcb00000
 800d834:	7c9fffff 	.word	0x7c9fffff
 800d838:	7fefffff 	.word	0x7fefffff
 800d83c:	bff00000 	.word	0xbff00000
 800d840:	94a03595 	.word	0x94a03595
 800d844:	3fdfffff 	.word	0x3fdfffff
 800d848:	35afe535 	.word	0x35afe535
 800d84c:	ffc00000 	.word	0xffc00000
 800d850:	41dfffff 	.word	0x41dfffff
 800d854:	3fcfffff 	.word	0x3fcfffff

0800d858 <_strtod_r>:
 800d858:	b510      	push	{r4, lr}
 800d85a:	4b02      	ldr	r3, [pc, #8]	; (800d864 <_strtod_r+0xc>)
 800d85c:	f7ff f9f2 	bl	800cc44 <_strtod_l>
 800d860:	bd10      	pop	{r4, pc}
 800d862:	46c0      	nop			; (mov r8, r8)
 800d864:	20000138 	.word	0x20000138

0800d868 <strtod>:
 800d868:	b510      	push	{r4, lr}
 800d86a:	4c04      	ldr	r4, [pc, #16]	; (800d87c <strtod+0x14>)
 800d86c:	000a      	movs	r2, r1
 800d86e:	0001      	movs	r1, r0
 800d870:	4b03      	ldr	r3, [pc, #12]	; (800d880 <strtod+0x18>)
 800d872:	6820      	ldr	r0, [r4, #0]
 800d874:	f7ff f9e6 	bl	800cc44 <_strtod_l>
 800d878:	bd10      	pop	{r4, pc}
 800d87a:	46c0      	nop			; (mov r8, r8)
 800d87c:	200002f0 	.word	0x200002f0
 800d880:	20000138 	.word	0x20000138

0800d884 <_strtol_l.constprop.0>:
 800d884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d886:	b087      	sub	sp, #28
 800d888:	001e      	movs	r6, r3
 800d88a:	9005      	str	r0, [sp, #20]
 800d88c:	9101      	str	r1, [sp, #4]
 800d88e:	9202      	str	r2, [sp, #8]
 800d890:	2b01      	cmp	r3, #1
 800d892:	d048      	beq.n	800d926 <_strtol_l.constprop.0+0xa2>
 800d894:	000b      	movs	r3, r1
 800d896:	2e24      	cmp	r6, #36	; 0x24
 800d898:	d845      	bhi.n	800d926 <_strtol_l.constprop.0+0xa2>
 800d89a:	4a3b      	ldr	r2, [pc, #236]	; (800d988 <_strtol_l.constprop.0+0x104>)
 800d89c:	2108      	movs	r1, #8
 800d89e:	4694      	mov	ip, r2
 800d8a0:	001a      	movs	r2, r3
 800d8a2:	4660      	mov	r0, ip
 800d8a4:	7814      	ldrb	r4, [r2, #0]
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	5d00      	ldrb	r0, [r0, r4]
 800d8aa:	001d      	movs	r5, r3
 800d8ac:	0007      	movs	r7, r0
 800d8ae:	400f      	ands	r7, r1
 800d8b0:	4208      	tst	r0, r1
 800d8b2:	d1f5      	bne.n	800d8a0 <_strtol_l.constprop.0+0x1c>
 800d8b4:	2c2d      	cmp	r4, #45	; 0x2d
 800d8b6:	d13d      	bne.n	800d934 <_strtol_l.constprop.0+0xb0>
 800d8b8:	2701      	movs	r7, #1
 800d8ba:	781c      	ldrb	r4, [r3, #0]
 800d8bc:	1c95      	adds	r5, r2, #2
 800d8be:	2e00      	cmp	r6, #0
 800d8c0:	d05e      	beq.n	800d980 <_strtol_l.constprop.0+0xfc>
 800d8c2:	2e10      	cmp	r6, #16
 800d8c4:	d109      	bne.n	800d8da <_strtol_l.constprop.0+0x56>
 800d8c6:	2c30      	cmp	r4, #48	; 0x30
 800d8c8:	d107      	bne.n	800d8da <_strtol_l.constprop.0+0x56>
 800d8ca:	2220      	movs	r2, #32
 800d8cc:	782b      	ldrb	r3, [r5, #0]
 800d8ce:	4393      	bics	r3, r2
 800d8d0:	2b58      	cmp	r3, #88	; 0x58
 800d8d2:	d150      	bne.n	800d976 <_strtol_l.constprop.0+0xf2>
 800d8d4:	2610      	movs	r6, #16
 800d8d6:	786c      	ldrb	r4, [r5, #1]
 800d8d8:	3502      	adds	r5, #2
 800d8da:	4b2c      	ldr	r3, [pc, #176]	; (800d98c <_strtol_l.constprop.0+0x108>)
 800d8dc:	0031      	movs	r1, r6
 800d8de:	18fb      	adds	r3, r7, r3
 800d8e0:	0018      	movs	r0, r3
 800d8e2:	9303      	str	r3, [sp, #12]
 800d8e4:	f7f2 fcb2 	bl	800024c <__aeabi_uidivmod>
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	9104      	str	r1, [sp, #16]
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	4684      	mov	ip, r0
 800d8f0:	0010      	movs	r0, r2
 800d8f2:	4249      	negs	r1, r1
 800d8f4:	0023      	movs	r3, r4
 800d8f6:	3b30      	subs	r3, #48	; 0x30
 800d8f8:	2b09      	cmp	r3, #9
 800d8fa:	d903      	bls.n	800d904 <_strtol_l.constprop.0+0x80>
 800d8fc:	3b11      	subs	r3, #17
 800d8fe:	2b19      	cmp	r3, #25
 800d900:	d81d      	bhi.n	800d93e <_strtol_l.constprop.0+0xba>
 800d902:	330a      	adds	r3, #10
 800d904:	429e      	cmp	r6, r3
 800d906:	dd1e      	ble.n	800d946 <_strtol_l.constprop.0+0xc2>
 800d908:	1c54      	adds	r4, r2, #1
 800d90a:	d009      	beq.n	800d920 <_strtol_l.constprop.0+0x9c>
 800d90c:	000a      	movs	r2, r1
 800d90e:	4584      	cmp	ip, r0
 800d910:	d306      	bcc.n	800d920 <_strtol_l.constprop.0+0x9c>
 800d912:	d102      	bne.n	800d91a <_strtol_l.constprop.0+0x96>
 800d914:	9c04      	ldr	r4, [sp, #16]
 800d916:	429c      	cmp	r4, r3
 800d918:	db02      	blt.n	800d920 <_strtol_l.constprop.0+0x9c>
 800d91a:	2201      	movs	r2, #1
 800d91c:	4370      	muls	r0, r6
 800d91e:	1818      	adds	r0, r3, r0
 800d920:	782c      	ldrb	r4, [r5, #0]
 800d922:	3501      	adds	r5, #1
 800d924:	e7e6      	b.n	800d8f4 <_strtol_l.constprop.0+0x70>
 800d926:	f001 f9bf 	bl	800eca8 <__errno>
 800d92a:	2316      	movs	r3, #22
 800d92c:	6003      	str	r3, [r0, #0]
 800d92e:	2000      	movs	r0, #0
 800d930:	b007      	add	sp, #28
 800d932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d934:	2c2b      	cmp	r4, #43	; 0x2b
 800d936:	d1c2      	bne.n	800d8be <_strtol_l.constprop.0+0x3a>
 800d938:	781c      	ldrb	r4, [r3, #0]
 800d93a:	1c95      	adds	r5, r2, #2
 800d93c:	e7bf      	b.n	800d8be <_strtol_l.constprop.0+0x3a>
 800d93e:	0023      	movs	r3, r4
 800d940:	3b61      	subs	r3, #97	; 0x61
 800d942:	2b19      	cmp	r3, #25
 800d944:	d9dd      	bls.n	800d902 <_strtol_l.constprop.0+0x7e>
 800d946:	1c53      	adds	r3, r2, #1
 800d948:	d109      	bne.n	800d95e <_strtol_l.constprop.0+0xda>
 800d94a:	2322      	movs	r3, #34	; 0x22
 800d94c:	9a05      	ldr	r2, [sp, #20]
 800d94e:	9803      	ldr	r0, [sp, #12]
 800d950:	6013      	str	r3, [r2, #0]
 800d952:	9b02      	ldr	r3, [sp, #8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d0eb      	beq.n	800d930 <_strtol_l.constprop.0+0xac>
 800d958:	1e6b      	subs	r3, r5, #1
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	e007      	b.n	800d96e <_strtol_l.constprop.0+0xea>
 800d95e:	2f00      	cmp	r7, #0
 800d960:	d000      	beq.n	800d964 <_strtol_l.constprop.0+0xe0>
 800d962:	4240      	negs	r0, r0
 800d964:	9b02      	ldr	r3, [sp, #8]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0e2      	beq.n	800d930 <_strtol_l.constprop.0+0xac>
 800d96a:	2a00      	cmp	r2, #0
 800d96c:	d1f4      	bne.n	800d958 <_strtol_l.constprop.0+0xd4>
 800d96e:	9b02      	ldr	r3, [sp, #8]
 800d970:	9a01      	ldr	r2, [sp, #4]
 800d972:	601a      	str	r2, [r3, #0]
 800d974:	e7dc      	b.n	800d930 <_strtol_l.constprop.0+0xac>
 800d976:	2430      	movs	r4, #48	; 0x30
 800d978:	2e00      	cmp	r6, #0
 800d97a:	d1ae      	bne.n	800d8da <_strtol_l.constprop.0+0x56>
 800d97c:	3608      	adds	r6, #8
 800d97e:	e7ac      	b.n	800d8da <_strtol_l.constprop.0+0x56>
 800d980:	2c30      	cmp	r4, #48	; 0x30
 800d982:	d0a2      	beq.n	800d8ca <_strtol_l.constprop.0+0x46>
 800d984:	260a      	movs	r6, #10
 800d986:	e7a8      	b.n	800d8da <_strtol_l.constprop.0+0x56>
 800d988:	08013751 	.word	0x08013751
 800d98c:	7fffffff 	.word	0x7fffffff

0800d990 <_strtol_r>:
 800d990:	b510      	push	{r4, lr}
 800d992:	f7ff ff77 	bl	800d884 <_strtol_l.constprop.0>
 800d996:	bd10      	pop	{r4, pc}

0800d998 <strtol>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	4c04      	ldr	r4, [pc, #16]	; (800d9ac <strtol+0x14>)
 800d99c:	0013      	movs	r3, r2
 800d99e:	000a      	movs	r2, r1
 800d9a0:	0001      	movs	r1, r0
 800d9a2:	6820      	ldr	r0, [r4, #0]
 800d9a4:	f7ff ff6e 	bl	800d884 <_strtol_l.constprop.0>
 800d9a8:	bd10      	pop	{r4, pc}
 800d9aa:	46c0      	nop			; (mov r8, r8)
 800d9ac:	200002f0 	.word	0x200002f0

0800d9b0 <__cvt>:
 800d9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9b2:	001e      	movs	r6, r3
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	0014      	movs	r4, r2
 800d9b8:	b08b      	sub	sp, #44	; 0x2c
 800d9ba:	429e      	cmp	r6, r3
 800d9bc:	da04      	bge.n	800d9c8 <__cvt+0x18>
 800d9be:	2180      	movs	r1, #128	; 0x80
 800d9c0:	0609      	lsls	r1, r1, #24
 800d9c2:	1873      	adds	r3, r6, r1
 800d9c4:	001e      	movs	r6, r3
 800d9c6:	232d      	movs	r3, #45	; 0x2d
 800d9c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d9ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d9cc:	7013      	strb	r3, [r2, #0]
 800d9ce:	2320      	movs	r3, #32
 800d9d0:	2203      	movs	r2, #3
 800d9d2:	439f      	bics	r7, r3
 800d9d4:	2f46      	cmp	r7, #70	; 0x46
 800d9d6:	d007      	beq.n	800d9e8 <__cvt+0x38>
 800d9d8:	003b      	movs	r3, r7
 800d9da:	3b45      	subs	r3, #69	; 0x45
 800d9dc:	4259      	negs	r1, r3
 800d9de:	414b      	adcs	r3, r1
 800d9e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d9e2:	3a01      	subs	r2, #1
 800d9e4:	18cb      	adds	r3, r1, r3
 800d9e6:	9310      	str	r3, [sp, #64]	; 0x40
 800d9e8:	ab09      	add	r3, sp, #36	; 0x24
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	ab08      	add	r3, sp, #32
 800d9ee:	9303      	str	r3, [sp, #12]
 800d9f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9f2:	9200      	str	r2, [sp, #0]
 800d9f4:	9302      	str	r3, [sp, #8]
 800d9f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9f8:	0022      	movs	r2, r4
 800d9fa:	9301      	str	r3, [sp, #4]
 800d9fc:	0033      	movs	r3, r6
 800d9fe:	f001 fa55 	bl	800eeac <_dtoa_r>
 800da02:	0005      	movs	r5, r0
 800da04:	2f47      	cmp	r7, #71	; 0x47
 800da06:	d102      	bne.n	800da0e <__cvt+0x5e>
 800da08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800da0a:	07db      	lsls	r3, r3, #31
 800da0c:	d528      	bpl.n	800da60 <__cvt+0xb0>
 800da0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da10:	18eb      	adds	r3, r5, r3
 800da12:	9307      	str	r3, [sp, #28]
 800da14:	2f46      	cmp	r7, #70	; 0x46
 800da16:	d114      	bne.n	800da42 <__cvt+0x92>
 800da18:	782b      	ldrb	r3, [r5, #0]
 800da1a:	2b30      	cmp	r3, #48	; 0x30
 800da1c:	d10c      	bne.n	800da38 <__cvt+0x88>
 800da1e:	2200      	movs	r2, #0
 800da20:	2300      	movs	r3, #0
 800da22:	0020      	movs	r0, r4
 800da24:	0031      	movs	r1, r6
 800da26:	f7f2 fd11 	bl	800044c <__aeabi_dcmpeq>
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d104      	bne.n	800da38 <__cvt+0x88>
 800da2e:	2301      	movs	r3, #1
 800da30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da36:	6013      	str	r3, [r2, #0]
 800da38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da3a:	9a07      	ldr	r2, [sp, #28]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	18d3      	adds	r3, r2, r3
 800da40:	9307      	str	r3, [sp, #28]
 800da42:	2200      	movs	r2, #0
 800da44:	2300      	movs	r3, #0
 800da46:	0020      	movs	r0, r4
 800da48:	0031      	movs	r1, r6
 800da4a:	f7f2 fcff 	bl	800044c <__aeabi_dcmpeq>
 800da4e:	2800      	cmp	r0, #0
 800da50:	d001      	beq.n	800da56 <__cvt+0xa6>
 800da52:	9b07      	ldr	r3, [sp, #28]
 800da54:	9309      	str	r3, [sp, #36]	; 0x24
 800da56:	2230      	movs	r2, #48	; 0x30
 800da58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da5a:	9907      	ldr	r1, [sp, #28]
 800da5c:	428b      	cmp	r3, r1
 800da5e:	d306      	bcc.n	800da6e <__cvt+0xbe>
 800da60:	0028      	movs	r0, r5
 800da62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800da66:	1b5b      	subs	r3, r3, r5
 800da68:	6013      	str	r3, [r2, #0]
 800da6a:	b00b      	add	sp, #44	; 0x2c
 800da6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da6e:	1c59      	adds	r1, r3, #1
 800da70:	9109      	str	r1, [sp, #36]	; 0x24
 800da72:	701a      	strb	r2, [r3, #0]
 800da74:	e7f0      	b.n	800da58 <__cvt+0xa8>

0800da76 <__exponent>:
 800da76:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da78:	1c83      	adds	r3, r0, #2
 800da7a:	b087      	sub	sp, #28
 800da7c:	9303      	str	r3, [sp, #12]
 800da7e:	0005      	movs	r5, r0
 800da80:	000c      	movs	r4, r1
 800da82:	232b      	movs	r3, #43	; 0x2b
 800da84:	7002      	strb	r2, [r0, #0]
 800da86:	2900      	cmp	r1, #0
 800da88:	da01      	bge.n	800da8e <__exponent+0x18>
 800da8a:	424c      	negs	r4, r1
 800da8c:	3302      	adds	r3, #2
 800da8e:	706b      	strb	r3, [r5, #1]
 800da90:	2c09      	cmp	r4, #9
 800da92:	dd2f      	ble.n	800daf4 <__exponent+0x7e>
 800da94:	270a      	movs	r7, #10
 800da96:	ab04      	add	r3, sp, #16
 800da98:	1dde      	adds	r6, r3, #7
 800da9a:	0020      	movs	r0, r4
 800da9c:	0039      	movs	r1, r7
 800da9e:	9601      	str	r6, [sp, #4]
 800daa0:	f7f2 fcbe 	bl	8000420 <__aeabi_idivmod>
 800daa4:	3e01      	subs	r6, #1
 800daa6:	3130      	adds	r1, #48	; 0x30
 800daa8:	0020      	movs	r0, r4
 800daaa:	7031      	strb	r1, [r6, #0]
 800daac:	0039      	movs	r1, r7
 800daae:	9402      	str	r4, [sp, #8]
 800dab0:	f7f2 fbd0 	bl	8000254 <__divsi3>
 800dab4:	9b02      	ldr	r3, [sp, #8]
 800dab6:	0004      	movs	r4, r0
 800dab8:	2b63      	cmp	r3, #99	; 0x63
 800daba:	dcee      	bgt.n	800da9a <__exponent+0x24>
 800dabc:	9b01      	ldr	r3, [sp, #4]
 800dabe:	3430      	adds	r4, #48	; 0x30
 800dac0:	1e9a      	subs	r2, r3, #2
 800dac2:	0013      	movs	r3, r2
 800dac4:	9903      	ldr	r1, [sp, #12]
 800dac6:	7014      	strb	r4, [r2, #0]
 800dac8:	a804      	add	r0, sp, #16
 800daca:	3007      	adds	r0, #7
 800dacc:	4298      	cmp	r0, r3
 800dace:	d80c      	bhi.n	800daea <__exponent+0x74>
 800dad0:	2300      	movs	r3, #0
 800dad2:	4282      	cmp	r2, r0
 800dad4:	d804      	bhi.n	800dae0 <__exponent+0x6a>
 800dad6:	aa04      	add	r2, sp, #16
 800dad8:	3309      	adds	r3, #9
 800dada:	189b      	adds	r3, r3, r2
 800dadc:	9a01      	ldr	r2, [sp, #4]
 800dade:	1a9b      	subs	r3, r3, r2
 800dae0:	9a03      	ldr	r2, [sp, #12]
 800dae2:	18d3      	adds	r3, r2, r3
 800dae4:	1b58      	subs	r0, r3, r5
 800dae6:	b007      	add	sp, #28
 800dae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daea:	7818      	ldrb	r0, [r3, #0]
 800daec:	3301      	adds	r3, #1
 800daee:	7008      	strb	r0, [r1, #0]
 800daf0:	3101      	adds	r1, #1
 800daf2:	e7e9      	b.n	800dac8 <__exponent+0x52>
 800daf4:	2330      	movs	r3, #48	; 0x30
 800daf6:	3430      	adds	r4, #48	; 0x30
 800daf8:	70ab      	strb	r3, [r5, #2]
 800dafa:	70ec      	strb	r4, [r5, #3]
 800dafc:	1d2b      	adds	r3, r5, #4
 800dafe:	e7f1      	b.n	800dae4 <__exponent+0x6e>

0800db00 <_printf_float>:
 800db00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db02:	b095      	sub	sp, #84	; 0x54
 800db04:	000c      	movs	r4, r1
 800db06:	9208      	str	r2, [sp, #32]
 800db08:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800db0a:	9309      	str	r3, [sp, #36]	; 0x24
 800db0c:	0007      	movs	r7, r0
 800db0e:	f001 f809 	bl	800eb24 <_localeconv_r>
 800db12:	6803      	ldr	r3, [r0, #0]
 800db14:	0018      	movs	r0, r3
 800db16:	930c      	str	r3, [sp, #48]	; 0x30
 800db18:	f7f2 faf6 	bl	8000108 <strlen>
 800db1c:	2300      	movs	r3, #0
 800db1e:	9312      	str	r3, [sp, #72]	; 0x48
 800db20:	7e23      	ldrb	r3, [r4, #24]
 800db22:	2207      	movs	r2, #7
 800db24:	930a      	str	r3, [sp, #40]	; 0x28
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	900d      	str	r0, [sp, #52]	; 0x34
 800db2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800db2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db2e:	682b      	ldr	r3, [r5, #0]
 800db30:	05c9      	lsls	r1, r1, #23
 800db32:	d547      	bpl.n	800dbc4 <_printf_float+0xc4>
 800db34:	189b      	adds	r3, r3, r2
 800db36:	4393      	bics	r3, r2
 800db38:	001a      	movs	r2, r3
 800db3a:	3208      	adds	r2, #8
 800db3c:	602a      	str	r2, [r5, #0]
 800db3e:	681e      	ldr	r6, [r3, #0]
 800db40:	685d      	ldr	r5, [r3, #4]
 800db42:	0032      	movs	r2, r6
 800db44:	002b      	movs	r3, r5
 800db46:	64a2      	str	r2, [r4, #72]	; 0x48
 800db48:	64e3      	str	r3, [r4, #76]	; 0x4c
 800db4a:	2201      	movs	r2, #1
 800db4c:	006b      	lsls	r3, r5, #1
 800db4e:	085b      	lsrs	r3, r3, #1
 800db50:	930e      	str	r3, [sp, #56]	; 0x38
 800db52:	0030      	movs	r0, r6
 800db54:	4bab      	ldr	r3, [pc, #684]	; (800de04 <_printf_float+0x304>)
 800db56:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db58:	4252      	negs	r2, r2
 800db5a:	f7f5 f9ff 	bl	8002f5c <__aeabi_dcmpun>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d132      	bne.n	800dbc8 <_printf_float+0xc8>
 800db62:	2201      	movs	r2, #1
 800db64:	0030      	movs	r0, r6
 800db66:	4ba7      	ldr	r3, [pc, #668]	; (800de04 <_printf_float+0x304>)
 800db68:	990e      	ldr	r1, [sp, #56]	; 0x38
 800db6a:	4252      	negs	r2, r2
 800db6c:	f7f2 fc7e 	bl	800046c <__aeabi_dcmple>
 800db70:	2800      	cmp	r0, #0
 800db72:	d129      	bne.n	800dbc8 <_printf_float+0xc8>
 800db74:	2200      	movs	r2, #0
 800db76:	2300      	movs	r3, #0
 800db78:	0030      	movs	r0, r6
 800db7a:	0029      	movs	r1, r5
 800db7c:	f7f2 fc6c 	bl	8000458 <__aeabi_dcmplt>
 800db80:	2800      	cmp	r0, #0
 800db82:	d003      	beq.n	800db8c <_printf_float+0x8c>
 800db84:	0023      	movs	r3, r4
 800db86:	222d      	movs	r2, #45	; 0x2d
 800db88:	3343      	adds	r3, #67	; 0x43
 800db8a:	701a      	strb	r2, [r3, #0]
 800db8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db8e:	4d9e      	ldr	r5, [pc, #632]	; (800de08 <_printf_float+0x308>)
 800db90:	2b47      	cmp	r3, #71	; 0x47
 800db92:	d900      	bls.n	800db96 <_printf_float+0x96>
 800db94:	4d9d      	ldr	r5, [pc, #628]	; (800de0c <_printf_float+0x30c>)
 800db96:	2303      	movs	r3, #3
 800db98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db9a:	6123      	str	r3, [r4, #16]
 800db9c:	3301      	adds	r3, #1
 800db9e:	439a      	bics	r2, r3
 800dba0:	2300      	movs	r3, #0
 800dba2:	6022      	str	r2, [r4, #0]
 800dba4:	930b      	str	r3, [sp, #44]	; 0x2c
 800dba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba8:	0021      	movs	r1, r4
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	0038      	movs	r0, r7
 800dbae:	9b08      	ldr	r3, [sp, #32]
 800dbb0:	aa13      	add	r2, sp, #76	; 0x4c
 800dbb2:	f000 f9fb 	bl	800dfac <_printf_common>
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	d000      	beq.n	800dbbc <_printf_float+0xbc>
 800dbba:	e0a3      	b.n	800dd04 <_printf_float+0x204>
 800dbbc:	2001      	movs	r0, #1
 800dbbe:	4240      	negs	r0, r0
 800dbc0:	b015      	add	sp, #84	; 0x54
 800dbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbc4:	3307      	adds	r3, #7
 800dbc6:	e7b6      	b.n	800db36 <_printf_float+0x36>
 800dbc8:	0032      	movs	r2, r6
 800dbca:	002b      	movs	r3, r5
 800dbcc:	0030      	movs	r0, r6
 800dbce:	0029      	movs	r1, r5
 800dbd0:	f7f5 f9c4 	bl	8002f5c <__aeabi_dcmpun>
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d00b      	beq.n	800dbf0 <_printf_float+0xf0>
 800dbd8:	2d00      	cmp	r5, #0
 800dbda:	da03      	bge.n	800dbe4 <_printf_float+0xe4>
 800dbdc:	0023      	movs	r3, r4
 800dbde:	222d      	movs	r2, #45	; 0x2d
 800dbe0:	3343      	adds	r3, #67	; 0x43
 800dbe2:	701a      	strb	r2, [r3, #0]
 800dbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbe6:	4d8a      	ldr	r5, [pc, #552]	; (800de10 <_printf_float+0x310>)
 800dbe8:	2b47      	cmp	r3, #71	; 0x47
 800dbea:	d9d4      	bls.n	800db96 <_printf_float+0x96>
 800dbec:	4d89      	ldr	r5, [pc, #548]	; (800de14 <_printf_float+0x314>)
 800dbee:	e7d2      	b.n	800db96 <_printf_float+0x96>
 800dbf0:	2220      	movs	r2, #32
 800dbf2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dbf4:	6863      	ldr	r3, [r4, #4]
 800dbf6:	4391      	bics	r1, r2
 800dbf8:	910e      	str	r1, [sp, #56]	; 0x38
 800dbfa:	1c5a      	adds	r2, r3, #1
 800dbfc:	d14a      	bne.n	800dc94 <_printf_float+0x194>
 800dbfe:	3307      	adds	r3, #7
 800dc00:	6063      	str	r3, [r4, #4]
 800dc02:	2380      	movs	r3, #128	; 0x80
 800dc04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	9206      	str	r2, [sp, #24]
 800dc0e:	aa12      	add	r2, sp, #72	; 0x48
 800dc10:	9205      	str	r2, [sp, #20]
 800dc12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	9204      	str	r2, [sp, #16]
 800dc18:	aa11      	add	r2, sp, #68	; 0x44
 800dc1a:	9203      	str	r2, [sp, #12]
 800dc1c:	2223      	movs	r2, #35	; 0x23
 800dc1e:	a908      	add	r1, sp, #32
 800dc20:	9301      	str	r3, [sp, #4]
 800dc22:	6863      	ldr	r3, [r4, #4]
 800dc24:	1852      	adds	r2, r2, r1
 800dc26:	9202      	str	r2, [sp, #8]
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	0032      	movs	r2, r6
 800dc2c:	002b      	movs	r3, r5
 800dc2e:	0038      	movs	r0, r7
 800dc30:	f7ff febe 	bl	800d9b0 <__cvt>
 800dc34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc36:	0005      	movs	r5, r0
 800dc38:	2b47      	cmp	r3, #71	; 0x47
 800dc3a:	d109      	bne.n	800dc50 <_printf_float+0x150>
 800dc3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc3e:	1cda      	adds	r2, r3, #3
 800dc40:	db02      	blt.n	800dc48 <_printf_float+0x148>
 800dc42:	6862      	ldr	r2, [r4, #4]
 800dc44:	4293      	cmp	r3, r2
 800dc46:	dd49      	ble.n	800dcdc <_printf_float+0x1dc>
 800dc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc4a:	3b02      	subs	r3, #2
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc52:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dc54:	2b65      	cmp	r3, #101	; 0x65
 800dc56:	d824      	bhi.n	800dca2 <_printf_float+0x1a2>
 800dc58:	0020      	movs	r0, r4
 800dc5a:	001a      	movs	r2, r3
 800dc5c:	3901      	subs	r1, #1
 800dc5e:	3050      	adds	r0, #80	; 0x50
 800dc60:	9111      	str	r1, [sp, #68]	; 0x44
 800dc62:	f7ff ff08 	bl	800da76 <__exponent>
 800dc66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc68:	900b      	str	r0, [sp, #44]	; 0x2c
 800dc6a:	1813      	adds	r3, r2, r0
 800dc6c:	6123      	str	r3, [r4, #16]
 800dc6e:	2a01      	cmp	r2, #1
 800dc70:	dc02      	bgt.n	800dc78 <_printf_float+0x178>
 800dc72:	6822      	ldr	r2, [r4, #0]
 800dc74:	07d2      	lsls	r2, r2, #31
 800dc76:	d501      	bpl.n	800dc7c <_printf_float+0x17c>
 800dc78:	3301      	adds	r3, #1
 800dc7a:	6123      	str	r3, [r4, #16]
 800dc7c:	2323      	movs	r3, #35	; 0x23
 800dc7e:	aa08      	add	r2, sp, #32
 800dc80:	189b      	adds	r3, r3, r2
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d100      	bne.n	800dc8a <_printf_float+0x18a>
 800dc88:	e78d      	b.n	800dba6 <_printf_float+0xa6>
 800dc8a:	0023      	movs	r3, r4
 800dc8c:	222d      	movs	r2, #45	; 0x2d
 800dc8e:	3343      	adds	r3, #67	; 0x43
 800dc90:	701a      	strb	r2, [r3, #0]
 800dc92:	e788      	b.n	800dba6 <_printf_float+0xa6>
 800dc94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc96:	2a47      	cmp	r2, #71	; 0x47
 800dc98:	d1b3      	bne.n	800dc02 <_printf_float+0x102>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1b1      	bne.n	800dc02 <_printf_float+0x102>
 800dc9e:	3301      	adds	r3, #1
 800dca0:	e7ae      	b.n	800dc00 <_printf_float+0x100>
 800dca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dca4:	2b66      	cmp	r3, #102	; 0x66
 800dca6:	d11b      	bne.n	800dce0 <_printf_float+0x1e0>
 800dca8:	6863      	ldr	r3, [r4, #4]
 800dcaa:	2900      	cmp	r1, #0
 800dcac:	dd09      	ble.n	800dcc2 <_printf_float+0x1c2>
 800dcae:	6121      	str	r1, [r4, #16]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d102      	bne.n	800dcba <_printf_float+0x1ba>
 800dcb4:	6822      	ldr	r2, [r4, #0]
 800dcb6:	07d2      	lsls	r2, r2, #31
 800dcb8:	d50b      	bpl.n	800dcd2 <_printf_float+0x1d2>
 800dcba:	3301      	adds	r3, #1
 800dcbc:	185b      	adds	r3, r3, r1
 800dcbe:	6123      	str	r3, [r4, #16]
 800dcc0:	e007      	b.n	800dcd2 <_printf_float+0x1d2>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d103      	bne.n	800dcce <_printf_float+0x1ce>
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	6821      	ldr	r1, [r4, #0]
 800dcca:	4211      	tst	r1, r2
 800dccc:	d000      	beq.n	800dcd0 <_printf_float+0x1d0>
 800dcce:	1c9a      	adds	r2, r3, #2
 800dcd0:	6122      	str	r2, [r4, #16]
 800dcd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dcd4:	65a3      	str	r3, [r4, #88]	; 0x58
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcda:	e7cf      	b.n	800dc7c <_printf_float+0x17c>
 800dcdc:	2367      	movs	r3, #103	; 0x67
 800dcde:	930a      	str	r3, [sp, #40]	; 0x28
 800dce0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dce4:	4299      	cmp	r1, r3
 800dce6:	db06      	blt.n	800dcf6 <_printf_float+0x1f6>
 800dce8:	6823      	ldr	r3, [r4, #0]
 800dcea:	6121      	str	r1, [r4, #16]
 800dcec:	07db      	lsls	r3, r3, #31
 800dcee:	d5f0      	bpl.n	800dcd2 <_printf_float+0x1d2>
 800dcf0:	3101      	adds	r1, #1
 800dcf2:	6121      	str	r1, [r4, #16]
 800dcf4:	e7ed      	b.n	800dcd2 <_printf_float+0x1d2>
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	2900      	cmp	r1, #0
 800dcfa:	dc01      	bgt.n	800dd00 <_printf_float+0x200>
 800dcfc:	1892      	adds	r2, r2, r2
 800dcfe:	1a52      	subs	r2, r2, r1
 800dd00:	189b      	adds	r3, r3, r2
 800dd02:	e7dc      	b.n	800dcbe <_printf_float+0x1be>
 800dd04:	6822      	ldr	r2, [r4, #0]
 800dd06:	0553      	lsls	r3, r2, #21
 800dd08:	d408      	bmi.n	800dd1c <_printf_float+0x21c>
 800dd0a:	6923      	ldr	r3, [r4, #16]
 800dd0c:	002a      	movs	r2, r5
 800dd0e:	0038      	movs	r0, r7
 800dd10:	9908      	ldr	r1, [sp, #32]
 800dd12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd14:	47a8      	blx	r5
 800dd16:	3001      	adds	r0, #1
 800dd18:	d12a      	bne.n	800dd70 <_printf_float+0x270>
 800dd1a:	e74f      	b.n	800dbbc <_printf_float+0xbc>
 800dd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd1e:	2b65      	cmp	r3, #101	; 0x65
 800dd20:	d800      	bhi.n	800dd24 <_printf_float+0x224>
 800dd22:	e0ec      	b.n	800defe <_printf_float+0x3fe>
 800dd24:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800dd26:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dd28:	2200      	movs	r2, #0
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	f7f2 fb8e 	bl	800044c <__aeabi_dcmpeq>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d034      	beq.n	800dd9e <_printf_float+0x29e>
 800dd34:	2301      	movs	r3, #1
 800dd36:	0038      	movs	r0, r7
 800dd38:	4a37      	ldr	r2, [pc, #220]	; (800de18 <_printf_float+0x318>)
 800dd3a:	9908      	ldr	r1, [sp, #32]
 800dd3c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd3e:	47a8      	blx	r5
 800dd40:	3001      	adds	r0, #1
 800dd42:	d100      	bne.n	800dd46 <_printf_float+0x246>
 800dd44:	e73a      	b.n	800dbbc <_printf_float+0xbc>
 800dd46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dd48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	db02      	blt.n	800dd54 <_printf_float+0x254>
 800dd4e:	6823      	ldr	r3, [r4, #0]
 800dd50:	07db      	lsls	r3, r3, #31
 800dd52:	d50d      	bpl.n	800dd70 <_printf_float+0x270>
 800dd54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd56:	0038      	movs	r0, r7
 800dd58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd5c:	9908      	ldr	r1, [sp, #32]
 800dd5e:	47a8      	blx	r5
 800dd60:	2500      	movs	r5, #0
 800dd62:	3001      	adds	r0, #1
 800dd64:	d100      	bne.n	800dd68 <_printf_float+0x268>
 800dd66:	e729      	b.n	800dbbc <_printf_float+0xbc>
 800dd68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	42ab      	cmp	r3, r5
 800dd6e:	dc0a      	bgt.n	800dd86 <_printf_float+0x286>
 800dd70:	6823      	ldr	r3, [r4, #0]
 800dd72:	079b      	lsls	r3, r3, #30
 800dd74:	d500      	bpl.n	800dd78 <_printf_float+0x278>
 800dd76:	e116      	b.n	800dfa6 <_printf_float+0x4a6>
 800dd78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd7a:	68e0      	ldr	r0, [r4, #12]
 800dd7c:	4298      	cmp	r0, r3
 800dd7e:	db00      	blt.n	800dd82 <_printf_float+0x282>
 800dd80:	e71e      	b.n	800dbc0 <_printf_float+0xc0>
 800dd82:	0018      	movs	r0, r3
 800dd84:	e71c      	b.n	800dbc0 <_printf_float+0xc0>
 800dd86:	0022      	movs	r2, r4
 800dd88:	2301      	movs	r3, #1
 800dd8a:	0038      	movs	r0, r7
 800dd8c:	9908      	ldr	r1, [sp, #32]
 800dd8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dd90:	321a      	adds	r2, #26
 800dd92:	47b0      	blx	r6
 800dd94:	3001      	adds	r0, #1
 800dd96:	d100      	bne.n	800dd9a <_printf_float+0x29a>
 800dd98:	e710      	b.n	800dbbc <_printf_float+0xbc>
 800dd9a:	3501      	adds	r5, #1
 800dd9c:	e7e4      	b.n	800dd68 <_printf_float+0x268>
 800dd9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	dc3b      	bgt.n	800de1c <_printf_float+0x31c>
 800dda4:	2301      	movs	r3, #1
 800dda6:	0038      	movs	r0, r7
 800dda8:	4a1b      	ldr	r2, [pc, #108]	; (800de18 <_printf_float+0x318>)
 800ddaa:	9908      	ldr	r1, [sp, #32]
 800ddac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ddae:	47b0      	blx	r6
 800ddb0:	3001      	adds	r0, #1
 800ddb2:	d100      	bne.n	800ddb6 <_printf_float+0x2b6>
 800ddb4:	e702      	b.n	800dbbc <_printf_float+0xbc>
 800ddb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ddba:	4313      	orrs	r3, r2
 800ddbc:	d102      	bne.n	800ddc4 <_printf_float+0x2c4>
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	07db      	lsls	r3, r3, #31
 800ddc2:	d5d5      	bpl.n	800dd70 <_printf_float+0x270>
 800ddc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddc6:	0038      	movs	r0, r7
 800ddc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddca:	9908      	ldr	r1, [sp, #32]
 800ddcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ddce:	47b0      	blx	r6
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	d100      	bne.n	800ddd8 <_printf_float+0x2d8>
 800ddd6:	e6f1      	b.n	800dbbc <_printf_float+0xbc>
 800ddd8:	930a      	str	r3, [sp, #40]	; 0x28
 800ddda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddde:	425b      	negs	r3, r3
 800dde0:	4293      	cmp	r3, r2
 800dde2:	dc01      	bgt.n	800dde8 <_printf_float+0x2e8>
 800dde4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dde6:	e791      	b.n	800dd0c <_printf_float+0x20c>
 800dde8:	0022      	movs	r2, r4
 800ddea:	2301      	movs	r3, #1
 800ddec:	0038      	movs	r0, r7
 800ddee:	9908      	ldr	r1, [sp, #32]
 800ddf0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ddf2:	321a      	adds	r2, #26
 800ddf4:	47b0      	blx	r6
 800ddf6:	3001      	adds	r0, #1
 800ddf8:	d100      	bne.n	800ddfc <_printf_float+0x2fc>
 800ddfa:	e6df      	b.n	800dbbc <_printf_float+0xbc>
 800ddfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddfe:	3301      	adds	r3, #1
 800de00:	e7ea      	b.n	800ddd8 <_printf_float+0x2d8>
 800de02:	46c0      	nop			; (mov r8, r8)
 800de04:	7fefffff 	.word	0x7fefffff
 800de08:	08013851 	.word	0x08013851
 800de0c:	08013855 	.word	0x08013855
 800de10:	08013859 	.word	0x08013859
 800de14:	0801385d 	.word	0x0801385d
 800de18:	08013861 	.word	0x08013861
 800de1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de20:	920a      	str	r2, [sp, #40]	; 0x28
 800de22:	429a      	cmp	r2, r3
 800de24:	dd00      	ble.n	800de28 <_printf_float+0x328>
 800de26:	930a      	str	r3, [sp, #40]	; 0x28
 800de28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	dc3d      	bgt.n	800deaa <_printf_float+0x3aa>
 800de2e:	2300      	movs	r3, #0
 800de30:	930e      	str	r3, [sp, #56]	; 0x38
 800de32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de34:	43db      	mvns	r3, r3
 800de36:	17db      	asrs	r3, r3, #31
 800de38:	930f      	str	r3, [sp, #60]	; 0x3c
 800de3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800de40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de42:	4013      	ands	r3, r2
 800de44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de46:	1ad3      	subs	r3, r2, r3
 800de48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de4a:	4293      	cmp	r3, r2
 800de4c:	dc36      	bgt.n	800debc <_printf_float+0x3bc>
 800de4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de52:	429a      	cmp	r2, r3
 800de54:	db40      	blt.n	800ded8 <_printf_float+0x3d8>
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	07db      	lsls	r3, r3, #31
 800de5a:	d43d      	bmi.n	800ded8 <_printf_float+0x3d8>
 800de5c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800de5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de62:	1af3      	subs	r3, r6, r3
 800de64:	1ab6      	subs	r6, r6, r2
 800de66:	429e      	cmp	r6, r3
 800de68:	dd00      	ble.n	800de6c <_printf_float+0x36c>
 800de6a:	001e      	movs	r6, r3
 800de6c:	2e00      	cmp	r6, #0
 800de6e:	dc3c      	bgt.n	800deea <_printf_float+0x3ea>
 800de70:	2300      	movs	r3, #0
 800de72:	930a      	str	r3, [sp, #40]	; 0x28
 800de74:	43f3      	mvns	r3, r6
 800de76:	17db      	asrs	r3, r3, #31
 800de78:	930b      	str	r3, [sp, #44]	; 0x2c
 800de7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800de7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de7e:	1a9b      	subs	r3, r3, r2
 800de80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de82:	4032      	ands	r2, r6
 800de84:	1a9b      	subs	r3, r3, r2
 800de86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de88:	4293      	cmp	r3, r2
 800de8a:	dc00      	bgt.n	800de8e <_printf_float+0x38e>
 800de8c:	e770      	b.n	800dd70 <_printf_float+0x270>
 800de8e:	0022      	movs	r2, r4
 800de90:	2301      	movs	r3, #1
 800de92:	0038      	movs	r0, r7
 800de94:	9908      	ldr	r1, [sp, #32]
 800de96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800de98:	321a      	adds	r2, #26
 800de9a:	47a8      	blx	r5
 800de9c:	3001      	adds	r0, #1
 800de9e:	d100      	bne.n	800dea2 <_printf_float+0x3a2>
 800dea0:	e68c      	b.n	800dbbc <_printf_float+0xbc>
 800dea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dea4:	3301      	adds	r3, #1
 800dea6:	930a      	str	r3, [sp, #40]	; 0x28
 800dea8:	e7e7      	b.n	800de7a <_printf_float+0x37a>
 800deaa:	002a      	movs	r2, r5
 800deac:	0038      	movs	r0, r7
 800deae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb0:	9908      	ldr	r1, [sp, #32]
 800deb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800deb4:	47b0      	blx	r6
 800deb6:	3001      	adds	r0, #1
 800deb8:	d1b9      	bne.n	800de2e <_printf_float+0x32e>
 800deba:	e67f      	b.n	800dbbc <_printf_float+0xbc>
 800debc:	0022      	movs	r2, r4
 800debe:	2301      	movs	r3, #1
 800dec0:	0038      	movs	r0, r7
 800dec2:	9908      	ldr	r1, [sp, #32]
 800dec4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dec6:	321a      	adds	r2, #26
 800dec8:	47b0      	blx	r6
 800deca:	3001      	adds	r0, #1
 800decc:	d100      	bne.n	800ded0 <_printf_float+0x3d0>
 800dece:	e675      	b.n	800dbbc <_printf_float+0xbc>
 800ded0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ded2:	3301      	adds	r3, #1
 800ded4:	930e      	str	r3, [sp, #56]	; 0x38
 800ded6:	e7b0      	b.n	800de3a <_printf_float+0x33a>
 800ded8:	0038      	movs	r0, r7
 800deda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dedc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dede:	9908      	ldr	r1, [sp, #32]
 800dee0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dee2:	47b0      	blx	r6
 800dee4:	3001      	adds	r0, #1
 800dee6:	d1b9      	bne.n	800de5c <_printf_float+0x35c>
 800dee8:	e668      	b.n	800dbbc <_printf_float+0xbc>
 800deea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800deec:	0038      	movs	r0, r7
 800deee:	18ea      	adds	r2, r5, r3
 800def0:	9908      	ldr	r1, [sp, #32]
 800def2:	0033      	movs	r3, r6
 800def4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800def6:	47a8      	blx	r5
 800def8:	3001      	adds	r0, #1
 800defa:	d1b9      	bne.n	800de70 <_printf_float+0x370>
 800defc:	e65e      	b.n	800dbbc <_printf_float+0xbc>
 800defe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df00:	2b01      	cmp	r3, #1
 800df02:	dc02      	bgt.n	800df0a <_printf_float+0x40a>
 800df04:	2301      	movs	r3, #1
 800df06:	421a      	tst	r2, r3
 800df08:	d03a      	beq.n	800df80 <_printf_float+0x480>
 800df0a:	2301      	movs	r3, #1
 800df0c:	002a      	movs	r2, r5
 800df0e:	0038      	movs	r0, r7
 800df10:	9908      	ldr	r1, [sp, #32]
 800df12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df14:	47b0      	blx	r6
 800df16:	3001      	adds	r0, #1
 800df18:	d100      	bne.n	800df1c <_printf_float+0x41c>
 800df1a:	e64f      	b.n	800dbbc <_printf_float+0xbc>
 800df1c:	0038      	movs	r0, r7
 800df1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df22:	9908      	ldr	r1, [sp, #32]
 800df24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df26:	47b0      	blx	r6
 800df28:	3001      	adds	r0, #1
 800df2a:	d100      	bne.n	800df2e <_printf_float+0x42e>
 800df2c:	e646      	b.n	800dbbc <_printf_float+0xbc>
 800df2e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800df30:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800df32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df34:	2200      	movs	r2, #0
 800df36:	001e      	movs	r6, r3
 800df38:	2300      	movs	r3, #0
 800df3a:	f7f2 fa87 	bl	800044c <__aeabi_dcmpeq>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d11c      	bne.n	800df7c <_printf_float+0x47c>
 800df42:	0033      	movs	r3, r6
 800df44:	1c6a      	adds	r2, r5, #1
 800df46:	3b01      	subs	r3, #1
 800df48:	0038      	movs	r0, r7
 800df4a:	9908      	ldr	r1, [sp, #32]
 800df4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800df4e:	47a8      	blx	r5
 800df50:	3001      	adds	r0, #1
 800df52:	d10f      	bne.n	800df74 <_printf_float+0x474>
 800df54:	e632      	b.n	800dbbc <_printf_float+0xbc>
 800df56:	0022      	movs	r2, r4
 800df58:	2301      	movs	r3, #1
 800df5a:	0038      	movs	r0, r7
 800df5c:	9908      	ldr	r1, [sp, #32]
 800df5e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df60:	321a      	adds	r2, #26
 800df62:	47b0      	blx	r6
 800df64:	3001      	adds	r0, #1
 800df66:	d100      	bne.n	800df6a <_printf_float+0x46a>
 800df68:	e628      	b.n	800dbbc <_printf_float+0xbc>
 800df6a:	3501      	adds	r5, #1
 800df6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df6e:	3b01      	subs	r3, #1
 800df70:	42ab      	cmp	r3, r5
 800df72:	dcf0      	bgt.n	800df56 <_printf_float+0x456>
 800df74:	0022      	movs	r2, r4
 800df76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df78:	3250      	adds	r2, #80	; 0x50
 800df7a:	e6c8      	b.n	800dd0e <_printf_float+0x20e>
 800df7c:	2500      	movs	r5, #0
 800df7e:	e7f5      	b.n	800df6c <_printf_float+0x46c>
 800df80:	002a      	movs	r2, r5
 800df82:	e7e1      	b.n	800df48 <_printf_float+0x448>
 800df84:	0022      	movs	r2, r4
 800df86:	2301      	movs	r3, #1
 800df88:	0038      	movs	r0, r7
 800df8a:	9908      	ldr	r1, [sp, #32]
 800df8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800df8e:	3219      	adds	r2, #25
 800df90:	47b0      	blx	r6
 800df92:	3001      	adds	r0, #1
 800df94:	d100      	bne.n	800df98 <_printf_float+0x498>
 800df96:	e611      	b.n	800dbbc <_printf_float+0xbc>
 800df98:	3501      	adds	r5, #1
 800df9a:	68e3      	ldr	r3, [r4, #12]
 800df9c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df9e:	1a9b      	subs	r3, r3, r2
 800dfa0:	42ab      	cmp	r3, r5
 800dfa2:	dcef      	bgt.n	800df84 <_printf_float+0x484>
 800dfa4:	e6e8      	b.n	800dd78 <_printf_float+0x278>
 800dfa6:	2500      	movs	r5, #0
 800dfa8:	e7f7      	b.n	800df9a <_printf_float+0x49a>
 800dfaa:	46c0      	nop			; (mov r8, r8)

0800dfac <_printf_common>:
 800dfac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfae:	0016      	movs	r6, r2
 800dfb0:	9301      	str	r3, [sp, #4]
 800dfb2:	688a      	ldr	r2, [r1, #8]
 800dfb4:	690b      	ldr	r3, [r1, #16]
 800dfb6:	000c      	movs	r4, r1
 800dfb8:	9000      	str	r0, [sp, #0]
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	da00      	bge.n	800dfc0 <_printf_common+0x14>
 800dfbe:	0013      	movs	r3, r2
 800dfc0:	0022      	movs	r2, r4
 800dfc2:	6033      	str	r3, [r6, #0]
 800dfc4:	3243      	adds	r2, #67	; 0x43
 800dfc6:	7812      	ldrb	r2, [r2, #0]
 800dfc8:	2a00      	cmp	r2, #0
 800dfca:	d001      	beq.n	800dfd0 <_printf_common+0x24>
 800dfcc:	3301      	adds	r3, #1
 800dfce:	6033      	str	r3, [r6, #0]
 800dfd0:	6823      	ldr	r3, [r4, #0]
 800dfd2:	069b      	lsls	r3, r3, #26
 800dfd4:	d502      	bpl.n	800dfdc <_printf_common+0x30>
 800dfd6:	6833      	ldr	r3, [r6, #0]
 800dfd8:	3302      	adds	r3, #2
 800dfda:	6033      	str	r3, [r6, #0]
 800dfdc:	6822      	ldr	r2, [r4, #0]
 800dfde:	2306      	movs	r3, #6
 800dfe0:	0015      	movs	r5, r2
 800dfe2:	401d      	ands	r5, r3
 800dfe4:	421a      	tst	r2, r3
 800dfe6:	d027      	beq.n	800e038 <_printf_common+0x8c>
 800dfe8:	0023      	movs	r3, r4
 800dfea:	3343      	adds	r3, #67	; 0x43
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	1e5a      	subs	r2, r3, #1
 800dff0:	4193      	sbcs	r3, r2
 800dff2:	6822      	ldr	r2, [r4, #0]
 800dff4:	0692      	lsls	r2, r2, #26
 800dff6:	d430      	bmi.n	800e05a <_printf_common+0xae>
 800dff8:	0022      	movs	r2, r4
 800dffa:	9901      	ldr	r1, [sp, #4]
 800dffc:	9800      	ldr	r0, [sp, #0]
 800dffe:	9d08      	ldr	r5, [sp, #32]
 800e000:	3243      	adds	r2, #67	; 0x43
 800e002:	47a8      	blx	r5
 800e004:	3001      	adds	r0, #1
 800e006:	d025      	beq.n	800e054 <_printf_common+0xa8>
 800e008:	2206      	movs	r2, #6
 800e00a:	6823      	ldr	r3, [r4, #0]
 800e00c:	2500      	movs	r5, #0
 800e00e:	4013      	ands	r3, r2
 800e010:	2b04      	cmp	r3, #4
 800e012:	d105      	bne.n	800e020 <_printf_common+0x74>
 800e014:	6833      	ldr	r3, [r6, #0]
 800e016:	68e5      	ldr	r5, [r4, #12]
 800e018:	1aed      	subs	r5, r5, r3
 800e01a:	43eb      	mvns	r3, r5
 800e01c:	17db      	asrs	r3, r3, #31
 800e01e:	401d      	ands	r5, r3
 800e020:	68a3      	ldr	r3, [r4, #8]
 800e022:	6922      	ldr	r2, [r4, #16]
 800e024:	4293      	cmp	r3, r2
 800e026:	dd01      	ble.n	800e02c <_printf_common+0x80>
 800e028:	1a9b      	subs	r3, r3, r2
 800e02a:	18ed      	adds	r5, r5, r3
 800e02c:	2600      	movs	r6, #0
 800e02e:	42b5      	cmp	r5, r6
 800e030:	d120      	bne.n	800e074 <_printf_common+0xc8>
 800e032:	2000      	movs	r0, #0
 800e034:	e010      	b.n	800e058 <_printf_common+0xac>
 800e036:	3501      	adds	r5, #1
 800e038:	68e3      	ldr	r3, [r4, #12]
 800e03a:	6832      	ldr	r2, [r6, #0]
 800e03c:	1a9b      	subs	r3, r3, r2
 800e03e:	42ab      	cmp	r3, r5
 800e040:	ddd2      	ble.n	800dfe8 <_printf_common+0x3c>
 800e042:	0022      	movs	r2, r4
 800e044:	2301      	movs	r3, #1
 800e046:	9901      	ldr	r1, [sp, #4]
 800e048:	9800      	ldr	r0, [sp, #0]
 800e04a:	9f08      	ldr	r7, [sp, #32]
 800e04c:	3219      	adds	r2, #25
 800e04e:	47b8      	blx	r7
 800e050:	3001      	adds	r0, #1
 800e052:	d1f0      	bne.n	800e036 <_printf_common+0x8a>
 800e054:	2001      	movs	r0, #1
 800e056:	4240      	negs	r0, r0
 800e058:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e05a:	2030      	movs	r0, #48	; 0x30
 800e05c:	18e1      	adds	r1, r4, r3
 800e05e:	3143      	adds	r1, #67	; 0x43
 800e060:	7008      	strb	r0, [r1, #0]
 800e062:	0021      	movs	r1, r4
 800e064:	1c5a      	adds	r2, r3, #1
 800e066:	3145      	adds	r1, #69	; 0x45
 800e068:	7809      	ldrb	r1, [r1, #0]
 800e06a:	18a2      	adds	r2, r4, r2
 800e06c:	3243      	adds	r2, #67	; 0x43
 800e06e:	3302      	adds	r3, #2
 800e070:	7011      	strb	r1, [r2, #0]
 800e072:	e7c1      	b.n	800dff8 <_printf_common+0x4c>
 800e074:	0022      	movs	r2, r4
 800e076:	2301      	movs	r3, #1
 800e078:	9901      	ldr	r1, [sp, #4]
 800e07a:	9800      	ldr	r0, [sp, #0]
 800e07c:	9f08      	ldr	r7, [sp, #32]
 800e07e:	321a      	adds	r2, #26
 800e080:	47b8      	blx	r7
 800e082:	3001      	adds	r0, #1
 800e084:	d0e6      	beq.n	800e054 <_printf_common+0xa8>
 800e086:	3601      	adds	r6, #1
 800e088:	e7d1      	b.n	800e02e <_printf_common+0x82>
	...

0800e08c <_printf_i>:
 800e08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e08e:	b08b      	sub	sp, #44	; 0x2c
 800e090:	9206      	str	r2, [sp, #24]
 800e092:	000a      	movs	r2, r1
 800e094:	3243      	adds	r2, #67	; 0x43
 800e096:	9307      	str	r3, [sp, #28]
 800e098:	9005      	str	r0, [sp, #20]
 800e09a:	9204      	str	r2, [sp, #16]
 800e09c:	7e0a      	ldrb	r2, [r1, #24]
 800e09e:	000c      	movs	r4, r1
 800e0a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0a2:	2a78      	cmp	r2, #120	; 0x78
 800e0a4:	d809      	bhi.n	800e0ba <_printf_i+0x2e>
 800e0a6:	2a62      	cmp	r2, #98	; 0x62
 800e0a8:	d80b      	bhi.n	800e0c2 <_printf_i+0x36>
 800e0aa:	2a00      	cmp	r2, #0
 800e0ac:	d100      	bne.n	800e0b0 <_printf_i+0x24>
 800e0ae:	e0be      	b.n	800e22e <_printf_i+0x1a2>
 800e0b0:	497c      	ldr	r1, [pc, #496]	; (800e2a4 <_printf_i+0x218>)
 800e0b2:	9103      	str	r1, [sp, #12]
 800e0b4:	2a58      	cmp	r2, #88	; 0x58
 800e0b6:	d100      	bne.n	800e0ba <_printf_i+0x2e>
 800e0b8:	e093      	b.n	800e1e2 <_printf_i+0x156>
 800e0ba:	0026      	movs	r6, r4
 800e0bc:	3642      	adds	r6, #66	; 0x42
 800e0be:	7032      	strb	r2, [r6, #0]
 800e0c0:	e022      	b.n	800e108 <_printf_i+0x7c>
 800e0c2:	0010      	movs	r0, r2
 800e0c4:	3863      	subs	r0, #99	; 0x63
 800e0c6:	2815      	cmp	r0, #21
 800e0c8:	d8f7      	bhi.n	800e0ba <_printf_i+0x2e>
 800e0ca:	f7f2 f82f 	bl	800012c <__gnu_thumb1_case_shi>
 800e0ce:	0016      	.short	0x0016
 800e0d0:	fff6001f 	.word	0xfff6001f
 800e0d4:	fff6fff6 	.word	0xfff6fff6
 800e0d8:	001ffff6 	.word	0x001ffff6
 800e0dc:	fff6fff6 	.word	0xfff6fff6
 800e0e0:	fff6fff6 	.word	0xfff6fff6
 800e0e4:	003600a3 	.word	0x003600a3
 800e0e8:	fff60083 	.word	0xfff60083
 800e0ec:	00b4fff6 	.word	0x00b4fff6
 800e0f0:	0036fff6 	.word	0x0036fff6
 800e0f4:	fff6fff6 	.word	0xfff6fff6
 800e0f8:	0087      	.short	0x0087
 800e0fa:	0026      	movs	r6, r4
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	3642      	adds	r6, #66	; 0x42
 800e100:	1d11      	adds	r1, r2, #4
 800e102:	6019      	str	r1, [r3, #0]
 800e104:	6813      	ldr	r3, [r2, #0]
 800e106:	7033      	strb	r3, [r6, #0]
 800e108:	2301      	movs	r3, #1
 800e10a:	e0a2      	b.n	800e252 <_printf_i+0x1c6>
 800e10c:	6818      	ldr	r0, [r3, #0]
 800e10e:	6809      	ldr	r1, [r1, #0]
 800e110:	1d02      	adds	r2, r0, #4
 800e112:	060d      	lsls	r5, r1, #24
 800e114:	d50b      	bpl.n	800e12e <_printf_i+0xa2>
 800e116:	6805      	ldr	r5, [r0, #0]
 800e118:	601a      	str	r2, [r3, #0]
 800e11a:	2d00      	cmp	r5, #0
 800e11c:	da03      	bge.n	800e126 <_printf_i+0x9a>
 800e11e:	232d      	movs	r3, #45	; 0x2d
 800e120:	9a04      	ldr	r2, [sp, #16]
 800e122:	426d      	negs	r5, r5
 800e124:	7013      	strb	r3, [r2, #0]
 800e126:	4b5f      	ldr	r3, [pc, #380]	; (800e2a4 <_printf_i+0x218>)
 800e128:	270a      	movs	r7, #10
 800e12a:	9303      	str	r3, [sp, #12]
 800e12c:	e01b      	b.n	800e166 <_printf_i+0xda>
 800e12e:	6805      	ldr	r5, [r0, #0]
 800e130:	601a      	str	r2, [r3, #0]
 800e132:	0649      	lsls	r1, r1, #25
 800e134:	d5f1      	bpl.n	800e11a <_printf_i+0x8e>
 800e136:	b22d      	sxth	r5, r5
 800e138:	e7ef      	b.n	800e11a <_printf_i+0x8e>
 800e13a:	680d      	ldr	r5, [r1, #0]
 800e13c:	6819      	ldr	r1, [r3, #0]
 800e13e:	1d08      	adds	r0, r1, #4
 800e140:	6018      	str	r0, [r3, #0]
 800e142:	062e      	lsls	r6, r5, #24
 800e144:	d501      	bpl.n	800e14a <_printf_i+0xbe>
 800e146:	680d      	ldr	r5, [r1, #0]
 800e148:	e003      	b.n	800e152 <_printf_i+0xc6>
 800e14a:	066d      	lsls	r5, r5, #25
 800e14c:	d5fb      	bpl.n	800e146 <_printf_i+0xba>
 800e14e:	680d      	ldr	r5, [r1, #0]
 800e150:	b2ad      	uxth	r5, r5
 800e152:	4b54      	ldr	r3, [pc, #336]	; (800e2a4 <_printf_i+0x218>)
 800e154:	2708      	movs	r7, #8
 800e156:	9303      	str	r3, [sp, #12]
 800e158:	2a6f      	cmp	r2, #111	; 0x6f
 800e15a:	d000      	beq.n	800e15e <_printf_i+0xd2>
 800e15c:	3702      	adds	r7, #2
 800e15e:	0023      	movs	r3, r4
 800e160:	2200      	movs	r2, #0
 800e162:	3343      	adds	r3, #67	; 0x43
 800e164:	701a      	strb	r2, [r3, #0]
 800e166:	6863      	ldr	r3, [r4, #4]
 800e168:	60a3      	str	r3, [r4, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	db03      	blt.n	800e176 <_printf_i+0xea>
 800e16e:	2104      	movs	r1, #4
 800e170:	6822      	ldr	r2, [r4, #0]
 800e172:	438a      	bics	r2, r1
 800e174:	6022      	str	r2, [r4, #0]
 800e176:	2d00      	cmp	r5, #0
 800e178:	d102      	bne.n	800e180 <_printf_i+0xf4>
 800e17a:	9e04      	ldr	r6, [sp, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00c      	beq.n	800e19a <_printf_i+0x10e>
 800e180:	9e04      	ldr	r6, [sp, #16]
 800e182:	0028      	movs	r0, r5
 800e184:	0039      	movs	r1, r7
 800e186:	f7f2 f861 	bl	800024c <__aeabi_uidivmod>
 800e18a:	9b03      	ldr	r3, [sp, #12]
 800e18c:	3e01      	subs	r6, #1
 800e18e:	5c5b      	ldrb	r3, [r3, r1]
 800e190:	7033      	strb	r3, [r6, #0]
 800e192:	002b      	movs	r3, r5
 800e194:	0005      	movs	r5, r0
 800e196:	429f      	cmp	r7, r3
 800e198:	d9f3      	bls.n	800e182 <_printf_i+0xf6>
 800e19a:	2f08      	cmp	r7, #8
 800e19c:	d109      	bne.n	800e1b2 <_printf_i+0x126>
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	07db      	lsls	r3, r3, #31
 800e1a2:	d506      	bpl.n	800e1b2 <_printf_i+0x126>
 800e1a4:	6862      	ldr	r2, [r4, #4]
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	dc02      	bgt.n	800e1b2 <_printf_i+0x126>
 800e1ac:	2330      	movs	r3, #48	; 0x30
 800e1ae:	3e01      	subs	r6, #1
 800e1b0:	7033      	strb	r3, [r6, #0]
 800e1b2:	9b04      	ldr	r3, [sp, #16]
 800e1b4:	1b9b      	subs	r3, r3, r6
 800e1b6:	6123      	str	r3, [r4, #16]
 800e1b8:	9b07      	ldr	r3, [sp, #28]
 800e1ba:	0021      	movs	r1, r4
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	9805      	ldr	r0, [sp, #20]
 800e1c0:	9b06      	ldr	r3, [sp, #24]
 800e1c2:	aa09      	add	r2, sp, #36	; 0x24
 800e1c4:	f7ff fef2 	bl	800dfac <_printf_common>
 800e1c8:	3001      	adds	r0, #1
 800e1ca:	d147      	bne.n	800e25c <_printf_i+0x1d0>
 800e1cc:	2001      	movs	r0, #1
 800e1ce:	4240      	negs	r0, r0
 800e1d0:	b00b      	add	sp, #44	; 0x2c
 800e1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1d4:	2220      	movs	r2, #32
 800e1d6:	6809      	ldr	r1, [r1, #0]
 800e1d8:	430a      	orrs	r2, r1
 800e1da:	6022      	str	r2, [r4, #0]
 800e1dc:	2278      	movs	r2, #120	; 0x78
 800e1de:	4932      	ldr	r1, [pc, #200]	; (800e2a8 <_printf_i+0x21c>)
 800e1e0:	9103      	str	r1, [sp, #12]
 800e1e2:	0021      	movs	r1, r4
 800e1e4:	3145      	adds	r1, #69	; 0x45
 800e1e6:	700a      	strb	r2, [r1, #0]
 800e1e8:	6819      	ldr	r1, [r3, #0]
 800e1ea:	6822      	ldr	r2, [r4, #0]
 800e1ec:	c920      	ldmia	r1!, {r5}
 800e1ee:	0610      	lsls	r0, r2, #24
 800e1f0:	d402      	bmi.n	800e1f8 <_printf_i+0x16c>
 800e1f2:	0650      	lsls	r0, r2, #25
 800e1f4:	d500      	bpl.n	800e1f8 <_printf_i+0x16c>
 800e1f6:	b2ad      	uxth	r5, r5
 800e1f8:	6019      	str	r1, [r3, #0]
 800e1fa:	07d3      	lsls	r3, r2, #31
 800e1fc:	d502      	bpl.n	800e204 <_printf_i+0x178>
 800e1fe:	2320      	movs	r3, #32
 800e200:	4313      	orrs	r3, r2
 800e202:	6023      	str	r3, [r4, #0]
 800e204:	2710      	movs	r7, #16
 800e206:	2d00      	cmp	r5, #0
 800e208:	d1a9      	bne.n	800e15e <_printf_i+0xd2>
 800e20a:	2220      	movs	r2, #32
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	4393      	bics	r3, r2
 800e210:	6023      	str	r3, [r4, #0]
 800e212:	e7a4      	b.n	800e15e <_printf_i+0xd2>
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	680d      	ldr	r5, [r1, #0]
 800e218:	1d10      	adds	r0, r2, #4
 800e21a:	6949      	ldr	r1, [r1, #20]
 800e21c:	6018      	str	r0, [r3, #0]
 800e21e:	6813      	ldr	r3, [r2, #0]
 800e220:	062e      	lsls	r6, r5, #24
 800e222:	d501      	bpl.n	800e228 <_printf_i+0x19c>
 800e224:	6019      	str	r1, [r3, #0]
 800e226:	e002      	b.n	800e22e <_printf_i+0x1a2>
 800e228:	066d      	lsls	r5, r5, #25
 800e22a:	d5fb      	bpl.n	800e224 <_printf_i+0x198>
 800e22c:	8019      	strh	r1, [r3, #0]
 800e22e:	2300      	movs	r3, #0
 800e230:	9e04      	ldr	r6, [sp, #16]
 800e232:	6123      	str	r3, [r4, #16]
 800e234:	e7c0      	b.n	800e1b8 <_printf_i+0x12c>
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	1d11      	adds	r1, r2, #4
 800e23a:	6019      	str	r1, [r3, #0]
 800e23c:	6816      	ldr	r6, [r2, #0]
 800e23e:	2100      	movs	r1, #0
 800e240:	0030      	movs	r0, r6
 800e242:	6862      	ldr	r2, [r4, #4]
 800e244:	f000 fd65 	bl	800ed12 <memchr>
 800e248:	2800      	cmp	r0, #0
 800e24a:	d001      	beq.n	800e250 <_printf_i+0x1c4>
 800e24c:	1b80      	subs	r0, r0, r6
 800e24e:	6060      	str	r0, [r4, #4]
 800e250:	6863      	ldr	r3, [r4, #4]
 800e252:	6123      	str	r3, [r4, #16]
 800e254:	2300      	movs	r3, #0
 800e256:	9a04      	ldr	r2, [sp, #16]
 800e258:	7013      	strb	r3, [r2, #0]
 800e25a:	e7ad      	b.n	800e1b8 <_printf_i+0x12c>
 800e25c:	0032      	movs	r2, r6
 800e25e:	6923      	ldr	r3, [r4, #16]
 800e260:	9906      	ldr	r1, [sp, #24]
 800e262:	9805      	ldr	r0, [sp, #20]
 800e264:	9d07      	ldr	r5, [sp, #28]
 800e266:	47a8      	blx	r5
 800e268:	3001      	adds	r0, #1
 800e26a:	d0af      	beq.n	800e1cc <_printf_i+0x140>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	079b      	lsls	r3, r3, #30
 800e270:	d415      	bmi.n	800e29e <_printf_i+0x212>
 800e272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e274:	68e0      	ldr	r0, [r4, #12]
 800e276:	4298      	cmp	r0, r3
 800e278:	daaa      	bge.n	800e1d0 <_printf_i+0x144>
 800e27a:	0018      	movs	r0, r3
 800e27c:	e7a8      	b.n	800e1d0 <_printf_i+0x144>
 800e27e:	0022      	movs	r2, r4
 800e280:	2301      	movs	r3, #1
 800e282:	9906      	ldr	r1, [sp, #24]
 800e284:	9805      	ldr	r0, [sp, #20]
 800e286:	9e07      	ldr	r6, [sp, #28]
 800e288:	3219      	adds	r2, #25
 800e28a:	47b0      	blx	r6
 800e28c:	3001      	adds	r0, #1
 800e28e:	d09d      	beq.n	800e1cc <_printf_i+0x140>
 800e290:	3501      	adds	r5, #1
 800e292:	68e3      	ldr	r3, [r4, #12]
 800e294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e296:	1a9b      	subs	r3, r3, r2
 800e298:	42ab      	cmp	r3, r5
 800e29a:	dcf0      	bgt.n	800e27e <_printf_i+0x1f2>
 800e29c:	e7e9      	b.n	800e272 <_printf_i+0x1e6>
 800e29e:	2500      	movs	r5, #0
 800e2a0:	e7f7      	b.n	800e292 <_printf_i+0x206>
 800e2a2:	46c0      	nop			; (mov r8, r8)
 800e2a4:	08013863 	.word	0x08013863
 800e2a8:	08013874 	.word	0x08013874

0800e2ac <_scanf_float>:
 800e2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ae:	b08b      	sub	sp, #44	; 0x2c
 800e2b0:	0016      	movs	r6, r2
 800e2b2:	9002      	str	r0, [sp, #8]
 800e2b4:	22ae      	movs	r2, #174	; 0xae
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	9307      	str	r3, [sp, #28]
 800e2ba:	688b      	ldr	r3, [r1, #8]
 800e2bc:	000f      	movs	r7, r1
 800e2be:	1e59      	subs	r1, r3, #1
 800e2c0:	0052      	lsls	r2, r2, #1
 800e2c2:	9006      	str	r0, [sp, #24]
 800e2c4:	4291      	cmp	r1, r2
 800e2c6:	d905      	bls.n	800e2d4 <_scanf_float+0x28>
 800e2c8:	3b5e      	subs	r3, #94	; 0x5e
 800e2ca:	3bff      	subs	r3, #255	; 0xff
 800e2cc:	9306      	str	r3, [sp, #24]
 800e2ce:	235e      	movs	r3, #94	; 0x5e
 800e2d0:	33ff      	adds	r3, #255	; 0xff
 800e2d2:	60bb      	str	r3, [r7, #8]
 800e2d4:	23f0      	movs	r3, #240	; 0xf0
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	00db      	lsls	r3, r3, #3
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	603b      	str	r3, [r7, #0]
 800e2de:	003b      	movs	r3, r7
 800e2e0:	2400      	movs	r4, #0
 800e2e2:	331c      	adds	r3, #28
 800e2e4:	001d      	movs	r5, r3
 800e2e6:	9304      	str	r3, [sp, #16]
 800e2e8:	9403      	str	r4, [sp, #12]
 800e2ea:	9409      	str	r4, [sp, #36]	; 0x24
 800e2ec:	9408      	str	r4, [sp, #32]
 800e2ee:	9401      	str	r4, [sp, #4]
 800e2f0:	9405      	str	r4, [sp, #20]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	2a00      	cmp	r2, #0
 800e2f6:	d00a      	beq.n	800e30e <_scanf_float+0x62>
 800e2f8:	6833      	ldr	r3, [r6, #0]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b4e      	cmp	r3, #78	; 0x4e
 800e2fe:	d844      	bhi.n	800e38a <_scanf_float+0xde>
 800e300:	0018      	movs	r0, r3
 800e302:	2b40      	cmp	r3, #64	; 0x40
 800e304:	d82c      	bhi.n	800e360 <_scanf_float+0xb4>
 800e306:	382b      	subs	r0, #43	; 0x2b
 800e308:	b2c1      	uxtb	r1, r0
 800e30a:	290e      	cmp	r1, #14
 800e30c:	d92a      	bls.n	800e364 <_scanf_float+0xb8>
 800e30e:	9b01      	ldr	r3, [sp, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d003      	beq.n	800e31c <_scanf_float+0x70>
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	4aa3      	ldr	r2, [pc, #652]	; (800e5a4 <_scanf_float+0x2f8>)
 800e318:	4013      	ands	r3, r2
 800e31a:	603b      	str	r3, [r7, #0]
 800e31c:	9b03      	ldr	r3, [sp, #12]
 800e31e:	3b01      	subs	r3, #1
 800e320:	2b01      	cmp	r3, #1
 800e322:	d900      	bls.n	800e326 <_scanf_float+0x7a>
 800e324:	e0f9      	b.n	800e51a <_scanf_float+0x26e>
 800e326:	24be      	movs	r4, #190	; 0xbe
 800e328:	0064      	lsls	r4, r4, #1
 800e32a:	9b04      	ldr	r3, [sp, #16]
 800e32c:	429d      	cmp	r5, r3
 800e32e:	d900      	bls.n	800e332 <_scanf_float+0x86>
 800e330:	e0e9      	b.n	800e506 <_scanf_float+0x25a>
 800e332:	2301      	movs	r3, #1
 800e334:	9303      	str	r3, [sp, #12]
 800e336:	e183      	b.n	800e640 <_scanf_float+0x394>
 800e338:	0018      	movs	r0, r3
 800e33a:	3861      	subs	r0, #97	; 0x61
 800e33c:	280d      	cmp	r0, #13
 800e33e:	d8e6      	bhi.n	800e30e <_scanf_float+0x62>
 800e340:	f7f1 fef4 	bl	800012c <__gnu_thumb1_case_shi>
 800e344:	ffe50083 	.word	0xffe50083
 800e348:	ffe5ffe5 	.word	0xffe5ffe5
 800e34c:	00a200b6 	.word	0x00a200b6
 800e350:	ffe5ffe5 	.word	0xffe5ffe5
 800e354:	ffe50089 	.word	0xffe50089
 800e358:	ffe5ffe5 	.word	0xffe5ffe5
 800e35c:	0065ffe5 	.word	0x0065ffe5
 800e360:	3841      	subs	r0, #65	; 0x41
 800e362:	e7eb      	b.n	800e33c <_scanf_float+0x90>
 800e364:	280e      	cmp	r0, #14
 800e366:	d8d2      	bhi.n	800e30e <_scanf_float+0x62>
 800e368:	f7f1 fee0 	bl	800012c <__gnu_thumb1_case_shi>
 800e36c:	ffd1004b 	.word	0xffd1004b
 800e370:	0098004b 	.word	0x0098004b
 800e374:	0020ffd1 	.word	0x0020ffd1
 800e378:	00400040 	.word	0x00400040
 800e37c:	00400040 	.word	0x00400040
 800e380:	00400040 	.word	0x00400040
 800e384:	00400040 	.word	0x00400040
 800e388:	0040      	.short	0x0040
 800e38a:	2b6e      	cmp	r3, #110	; 0x6e
 800e38c:	d809      	bhi.n	800e3a2 <_scanf_float+0xf6>
 800e38e:	2b60      	cmp	r3, #96	; 0x60
 800e390:	d8d2      	bhi.n	800e338 <_scanf_float+0x8c>
 800e392:	2b54      	cmp	r3, #84	; 0x54
 800e394:	d07d      	beq.n	800e492 <_scanf_float+0x1e6>
 800e396:	2b59      	cmp	r3, #89	; 0x59
 800e398:	d1b9      	bne.n	800e30e <_scanf_float+0x62>
 800e39a:	2c07      	cmp	r4, #7
 800e39c:	d1b7      	bne.n	800e30e <_scanf_float+0x62>
 800e39e:	2408      	movs	r4, #8
 800e3a0:	e02c      	b.n	800e3fc <_scanf_float+0x150>
 800e3a2:	2b74      	cmp	r3, #116	; 0x74
 800e3a4:	d075      	beq.n	800e492 <_scanf_float+0x1e6>
 800e3a6:	2b79      	cmp	r3, #121	; 0x79
 800e3a8:	d0f7      	beq.n	800e39a <_scanf_float+0xee>
 800e3aa:	e7b0      	b.n	800e30e <_scanf_float+0x62>
 800e3ac:	6839      	ldr	r1, [r7, #0]
 800e3ae:	05c8      	lsls	r0, r1, #23
 800e3b0:	d51c      	bpl.n	800e3ec <_scanf_float+0x140>
 800e3b2:	2380      	movs	r3, #128	; 0x80
 800e3b4:	4399      	bics	r1, r3
 800e3b6:	9b01      	ldr	r3, [sp, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	9301      	str	r3, [sp, #4]
 800e3be:	9b06      	ldr	r3, [sp, #24]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d003      	beq.n	800e3cc <_scanf_float+0x120>
 800e3c4:	3b01      	subs	r3, #1
 800e3c6:	3201      	adds	r2, #1
 800e3c8:	9306      	str	r3, [sp, #24]
 800e3ca:	60ba      	str	r2, [r7, #8]
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	3b01      	subs	r3, #1
 800e3d0:	60bb      	str	r3, [r7, #8]
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	613b      	str	r3, [r7, #16]
 800e3d8:	6873      	ldr	r3, [r6, #4]
 800e3da:	3b01      	subs	r3, #1
 800e3dc:	6073      	str	r3, [r6, #4]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	dc00      	bgt.n	800e3e4 <_scanf_float+0x138>
 800e3e2:	e086      	b.n	800e4f2 <_scanf_float+0x246>
 800e3e4:	6833      	ldr	r3, [r6, #0]
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	6033      	str	r3, [r6, #0]
 800e3ea:	e782      	b.n	800e2f2 <_scanf_float+0x46>
 800e3ec:	9a03      	ldr	r2, [sp, #12]
 800e3ee:	1912      	adds	r2, r2, r4
 800e3f0:	2a00      	cmp	r2, #0
 800e3f2:	d18c      	bne.n	800e30e <_scanf_float+0x62>
 800e3f4:	683a      	ldr	r2, [r7, #0]
 800e3f6:	496c      	ldr	r1, [pc, #432]	; (800e5a8 <_scanf_float+0x2fc>)
 800e3f8:	400a      	ands	r2, r1
 800e3fa:	603a      	str	r2, [r7, #0]
 800e3fc:	702b      	strb	r3, [r5, #0]
 800e3fe:	3501      	adds	r5, #1
 800e400:	e7e4      	b.n	800e3cc <_scanf_float+0x120>
 800e402:	2180      	movs	r1, #128	; 0x80
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	420a      	tst	r2, r1
 800e408:	d081      	beq.n	800e30e <_scanf_float+0x62>
 800e40a:	438a      	bics	r2, r1
 800e40c:	e7f5      	b.n	800e3fa <_scanf_float+0x14e>
 800e40e:	9a03      	ldr	r2, [sp, #12]
 800e410:	2a00      	cmp	r2, #0
 800e412:	d10f      	bne.n	800e434 <_scanf_float+0x188>
 800e414:	9a01      	ldr	r2, [sp, #4]
 800e416:	2a00      	cmp	r2, #0
 800e418:	d10f      	bne.n	800e43a <_scanf_float+0x18e>
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	21e0      	movs	r1, #224	; 0xe0
 800e41e:	0010      	movs	r0, r2
 800e420:	00c9      	lsls	r1, r1, #3
 800e422:	4008      	ands	r0, r1
 800e424:	4288      	cmp	r0, r1
 800e426:	d108      	bne.n	800e43a <_scanf_float+0x18e>
 800e428:	4960      	ldr	r1, [pc, #384]	; (800e5ac <_scanf_float+0x300>)
 800e42a:	400a      	ands	r2, r1
 800e42c:	603a      	str	r2, [r7, #0]
 800e42e:	2201      	movs	r2, #1
 800e430:	9203      	str	r2, [sp, #12]
 800e432:	e7e3      	b.n	800e3fc <_scanf_float+0x150>
 800e434:	9a03      	ldr	r2, [sp, #12]
 800e436:	2a02      	cmp	r2, #2
 800e438:	d059      	beq.n	800e4ee <_scanf_float+0x242>
 800e43a:	2c01      	cmp	r4, #1
 800e43c:	d002      	beq.n	800e444 <_scanf_float+0x198>
 800e43e:	2c04      	cmp	r4, #4
 800e440:	d000      	beq.n	800e444 <_scanf_float+0x198>
 800e442:	e764      	b.n	800e30e <_scanf_float+0x62>
 800e444:	3401      	adds	r4, #1
 800e446:	b2e4      	uxtb	r4, r4
 800e448:	e7d8      	b.n	800e3fc <_scanf_float+0x150>
 800e44a:	9a03      	ldr	r2, [sp, #12]
 800e44c:	2a01      	cmp	r2, #1
 800e44e:	d000      	beq.n	800e452 <_scanf_float+0x1a6>
 800e450:	e75d      	b.n	800e30e <_scanf_float+0x62>
 800e452:	2202      	movs	r2, #2
 800e454:	e7ec      	b.n	800e430 <_scanf_float+0x184>
 800e456:	2c00      	cmp	r4, #0
 800e458:	d110      	bne.n	800e47c <_scanf_float+0x1d0>
 800e45a:	9a01      	ldr	r2, [sp, #4]
 800e45c:	2a00      	cmp	r2, #0
 800e45e:	d000      	beq.n	800e462 <_scanf_float+0x1b6>
 800e460:	e758      	b.n	800e314 <_scanf_float+0x68>
 800e462:	683a      	ldr	r2, [r7, #0]
 800e464:	21e0      	movs	r1, #224	; 0xe0
 800e466:	0010      	movs	r0, r2
 800e468:	00c9      	lsls	r1, r1, #3
 800e46a:	4008      	ands	r0, r1
 800e46c:	4288      	cmp	r0, r1
 800e46e:	d000      	beq.n	800e472 <_scanf_float+0x1c6>
 800e470:	e754      	b.n	800e31c <_scanf_float+0x70>
 800e472:	494e      	ldr	r1, [pc, #312]	; (800e5ac <_scanf_float+0x300>)
 800e474:	3401      	adds	r4, #1
 800e476:	400a      	ands	r2, r1
 800e478:	603a      	str	r2, [r7, #0]
 800e47a:	e7bf      	b.n	800e3fc <_scanf_float+0x150>
 800e47c:	21fd      	movs	r1, #253	; 0xfd
 800e47e:	1ee2      	subs	r2, r4, #3
 800e480:	420a      	tst	r2, r1
 800e482:	d000      	beq.n	800e486 <_scanf_float+0x1da>
 800e484:	e743      	b.n	800e30e <_scanf_float+0x62>
 800e486:	e7dd      	b.n	800e444 <_scanf_float+0x198>
 800e488:	2c02      	cmp	r4, #2
 800e48a:	d000      	beq.n	800e48e <_scanf_float+0x1e2>
 800e48c:	e73f      	b.n	800e30e <_scanf_float+0x62>
 800e48e:	2403      	movs	r4, #3
 800e490:	e7b4      	b.n	800e3fc <_scanf_float+0x150>
 800e492:	2c06      	cmp	r4, #6
 800e494:	d000      	beq.n	800e498 <_scanf_float+0x1ec>
 800e496:	e73a      	b.n	800e30e <_scanf_float+0x62>
 800e498:	2407      	movs	r4, #7
 800e49a:	e7af      	b.n	800e3fc <_scanf_float+0x150>
 800e49c:	683a      	ldr	r2, [r7, #0]
 800e49e:	0591      	lsls	r1, r2, #22
 800e4a0:	d400      	bmi.n	800e4a4 <_scanf_float+0x1f8>
 800e4a2:	e734      	b.n	800e30e <_scanf_float+0x62>
 800e4a4:	4942      	ldr	r1, [pc, #264]	; (800e5b0 <_scanf_float+0x304>)
 800e4a6:	400a      	ands	r2, r1
 800e4a8:	603a      	str	r2, [r7, #0]
 800e4aa:	9a01      	ldr	r2, [sp, #4]
 800e4ac:	9205      	str	r2, [sp, #20]
 800e4ae:	e7a5      	b.n	800e3fc <_scanf_float+0x150>
 800e4b0:	21a0      	movs	r1, #160	; 0xa0
 800e4b2:	2080      	movs	r0, #128	; 0x80
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	00c9      	lsls	r1, r1, #3
 800e4b8:	4011      	ands	r1, r2
 800e4ba:	00c0      	lsls	r0, r0, #3
 800e4bc:	4281      	cmp	r1, r0
 800e4be:	d006      	beq.n	800e4ce <_scanf_float+0x222>
 800e4c0:	4202      	tst	r2, r0
 800e4c2:	d100      	bne.n	800e4c6 <_scanf_float+0x21a>
 800e4c4:	e723      	b.n	800e30e <_scanf_float+0x62>
 800e4c6:	9901      	ldr	r1, [sp, #4]
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	d100      	bne.n	800e4ce <_scanf_float+0x222>
 800e4cc:	e726      	b.n	800e31c <_scanf_float+0x70>
 800e4ce:	0591      	lsls	r1, r2, #22
 800e4d0:	d404      	bmi.n	800e4dc <_scanf_float+0x230>
 800e4d2:	9901      	ldr	r1, [sp, #4]
 800e4d4:	9805      	ldr	r0, [sp, #20]
 800e4d6:	9509      	str	r5, [sp, #36]	; 0x24
 800e4d8:	1a09      	subs	r1, r1, r0
 800e4da:	9108      	str	r1, [sp, #32]
 800e4dc:	4933      	ldr	r1, [pc, #204]	; (800e5ac <_scanf_float+0x300>)
 800e4de:	400a      	ands	r2, r1
 800e4e0:	21c0      	movs	r1, #192	; 0xc0
 800e4e2:	0049      	lsls	r1, r1, #1
 800e4e4:	430a      	orrs	r2, r1
 800e4e6:	603a      	str	r2, [r7, #0]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	9201      	str	r2, [sp, #4]
 800e4ec:	e786      	b.n	800e3fc <_scanf_float+0x150>
 800e4ee:	2203      	movs	r2, #3
 800e4f0:	e79e      	b.n	800e430 <_scanf_float+0x184>
 800e4f2:	23c0      	movs	r3, #192	; 0xc0
 800e4f4:	005b      	lsls	r3, r3, #1
 800e4f6:	0031      	movs	r1, r6
 800e4f8:	58fb      	ldr	r3, [r7, r3]
 800e4fa:	9802      	ldr	r0, [sp, #8]
 800e4fc:	4798      	blx	r3
 800e4fe:	2800      	cmp	r0, #0
 800e500:	d100      	bne.n	800e504 <_scanf_float+0x258>
 800e502:	e6f6      	b.n	800e2f2 <_scanf_float+0x46>
 800e504:	e703      	b.n	800e30e <_scanf_float+0x62>
 800e506:	3d01      	subs	r5, #1
 800e508:	593b      	ldr	r3, [r7, r4]
 800e50a:	0032      	movs	r2, r6
 800e50c:	7829      	ldrb	r1, [r5, #0]
 800e50e:	9802      	ldr	r0, [sp, #8]
 800e510:	4798      	blx	r3
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	3b01      	subs	r3, #1
 800e516:	613b      	str	r3, [r7, #16]
 800e518:	e707      	b.n	800e32a <_scanf_float+0x7e>
 800e51a:	1e63      	subs	r3, r4, #1
 800e51c:	2b06      	cmp	r3, #6
 800e51e:	d80e      	bhi.n	800e53e <_scanf_float+0x292>
 800e520:	9503      	str	r5, [sp, #12]
 800e522:	2c02      	cmp	r4, #2
 800e524:	d920      	bls.n	800e568 <_scanf_float+0x2bc>
 800e526:	1b63      	subs	r3, r4, r5
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	9306      	str	r3, [sp, #24]
 800e52c:	9b03      	ldr	r3, [sp, #12]
 800e52e:	9a06      	ldr	r2, [sp, #24]
 800e530:	189b      	adds	r3, r3, r2
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b03      	cmp	r3, #3
 800e536:	d827      	bhi.n	800e588 <_scanf_float+0x2dc>
 800e538:	3c03      	subs	r4, #3
 800e53a:	b2e4      	uxtb	r4, r4
 800e53c:	1b2d      	subs	r5, r5, r4
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	05da      	lsls	r2, r3, #23
 800e542:	d552      	bpl.n	800e5ea <_scanf_float+0x33e>
 800e544:	055b      	lsls	r3, r3, #21
 800e546:	d535      	bpl.n	800e5b4 <_scanf_float+0x308>
 800e548:	24be      	movs	r4, #190	; 0xbe
 800e54a:	0064      	lsls	r4, r4, #1
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	429d      	cmp	r5, r3
 800e550:	d800      	bhi.n	800e554 <_scanf_float+0x2a8>
 800e552:	e6ee      	b.n	800e332 <_scanf_float+0x86>
 800e554:	3d01      	subs	r5, #1
 800e556:	593b      	ldr	r3, [r7, r4]
 800e558:	0032      	movs	r2, r6
 800e55a:	7829      	ldrb	r1, [r5, #0]
 800e55c:	9802      	ldr	r0, [sp, #8]
 800e55e:	4798      	blx	r3
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	3b01      	subs	r3, #1
 800e564:	613b      	str	r3, [r7, #16]
 800e566:	e7f1      	b.n	800e54c <_scanf_float+0x2a0>
 800e568:	24be      	movs	r4, #190	; 0xbe
 800e56a:	0064      	lsls	r4, r4, #1
 800e56c:	9b04      	ldr	r3, [sp, #16]
 800e56e:	429d      	cmp	r5, r3
 800e570:	d800      	bhi.n	800e574 <_scanf_float+0x2c8>
 800e572:	e6de      	b.n	800e332 <_scanf_float+0x86>
 800e574:	3d01      	subs	r5, #1
 800e576:	593b      	ldr	r3, [r7, r4]
 800e578:	0032      	movs	r2, r6
 800e57a:	7829      	ldrb	r1, [r5, #0]
 800e57c:	9802      	ldr	r0, [sp, #8]
 800e57e:	4798      	blx	r3
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	3b01      	subs	r3, #1
 800e584:	613b      	str	r3, [r7, #16]
 800e586:	e7f1      	b.n	800e56c <_scanf_float+0x2c0>
 800e588:	9b03      	ldr	r3, [sp, #12]
 800e58a:	0032      	movs	r2, r6
 800e58c:	3b01      	subs	r3, #1
 800e58e:	7819      	ldrb	r1, [r3, #0]
 800e590:	9303      	str	r3, [sp, #12]
 800e592:	23be      	movs	r3, #190	; 0xbe
 800e594:	005b      	lsls	r3, r3, #1
 800e596:	58fb      	ldr	r3, [r7, r3]
 800e598:	9802      	ldr	r0, [sp, #8]
 800e59a:	4798      	blx	r3
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	613b      	str	r3, [r7, #16]
 800e5a2:	e7c3      	b.n	800e52c <_scanf_float+0x280>
 800e5a4:	fffffeff 	.word	0xfffffeff
 800e5a8:	fffffe7f 	.word	0xfffffe7f
 800e5ac:	fffff87f 	.word	0xfffff87f
 800e5b0:	fffffd7f 	.word	0xfffffd7f
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	1e6c      	subs	r4, r5, #1
 800e5b8:	7821      	ldrb	r1, [r4, #0]
 800e5ba:	3b01      	subs	r3, #1
 800e5bc:	613b      	str	r3, [r7, #16]
 800e5be:	2965      	cmp	r1, #101	; 0x65
 800e5c0:	d00c      	beq.n	800e5dc <_scanf_float+0x330>
 800e5c2:	2945      	cmp	r1, #69	; 0x45
 800e5c4:	d00a      	beq.n	800e5dc <_scanf_float+0x330>
 800e5c6:	23be      	movs	r3, #190	; 0xbe
 800e5c8:	005b      	lsls	r3, r3, #1
 800e5ca:	58fb      	ldr	r3, [r7, r3]
 800e5cc:	0032      	movs	r2, r6
 800e5ce:	9802      	ldr	r0, [sp, #8]
 800e5d0:	4798      	blx	r3
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	1eac      	subs	r4, r5, #2
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	7821      	ldrb	r1, [r4, #0]
 800e5da:	613b      	str	r3, [r7, #16]
 800e5dc:	23be      	movs	r3, #190	; 0xbe
 800e5de:	005b      	lsls	r3, r3, #1
 800e5e0:	0032      	movs	r2, r6
 800e5e2:	58fb      	ldr	r3, [r7, r3]
 800e5e4:	9802      	ldr	r0, [sp, #8]
 800e5e6:	4798      	blx	r3
 800e5e8:	0025      	movs	r5, r4
 800e5ea:	683a      	ldr	r2, [r7, #0]
 800e5ec:	2310      	movs	r3, #16
 800e5ee:	0011      	movs	r1, r2
 800e5f0:	4019      	ands	r1, r3
 800e5f2:	9103      	str	r1, [sp, #12]
 800e5f4:	421a      	tst	r2, r3
 800e5f6:	d15b      	bne.n	800e6b0 <_scanf_float+0x404>
 800e5f8:	22c0      	movs	r2, #192	; 0xc0
 800e5fa:	7029      	strb	r1, [r5, #0]
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	00d2      	lsls	r2, r2, #3
 800e600:	4013      	ands	r3, r2
 800e602:	2280      	movs	r2, #128	; 0x80
 800e604:	00d2      	lsls	r2, r2, #3
 800e606:	4293      	cmp	r3, r2
 800e608:	d11d      	bne.n	800e646 <_scanf_float+0x39a>
 800e60a:	9b05      	ldr	r3, [sp, #20]
 800e60c:	9a01      	ldr	r2, [sp, #4]
 800e60e:	9901      	ldr	r1, [sp, #4]
 800e610:	1a9a      	subs	r2, r3, r2
 800e612:	428b      	cmp	r3, r1
 800e614:	d124      	bne.n	800e660 <_scanf_float+0x3b4>
 800e616:	2200      	movs	r2, #0
 800e618:	9904      	ldr	r1, [sp, #16]
 800e61a:	9802      	ldr	r0, [sp, #8]
 800e61c:	f7ff f91c 	bl	800d858 <_strtod_r>
 800e620:	9b07      	ldr	r3, [sp, #28]
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	0004      	movs	r4, r0
 800e626:	000d      	movs	r5, r1
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	0791      	lsls	r1, r2, #30
 800e62c:	d525      	bpl.n	800e67a <_scanf_float+0x3ce>
 800e62e:	9907      	ldr	r1, [sp, #28]
 800e630:	1d1a      	adds	r2, r3, #4
 800e632:	600a      	str	r2, [r1, #0]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	601c      	str	r4, [r3, #0]
 800e638:	605d      	str	r5, [r3, #4]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3301      	adds	r3, #1
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	9803      	ldr	r0, [sp, #12]
 800e642:	b00b      	add	sp, #44	; 0x2c
 800e644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e646:	9b08      	ldr	r3, [sp, #32]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d0e4      	beq.n	800e616 <_scanf_float+0x36a>
 800e64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e64e:	9a03      	ldr	r2, [sp, #12]
 800e650:	1c59      	adds	r1, r3, #1
 800e652:	9802      	ldr	r0, [sp, #8]
 800e654:	230a      	movs	r3, #10
 800e656:	f7ff f99b 	bl	800d990 <_strtol_r>
 800e65a:	9b08      	ldr	r3, [sp, #32]
 800e65c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e65e:	1ac2      	subs	r2, r0, r3
 800e660:	003b      	movs	r3, r7
 800e662:	3370      	adds	r3, #112	; 0x70
 800e664:	33ff      	adds	r3, #255	; 0xff
 800e666:	429d      	cmp	r5, r3
 800e668:	d302      	bcc.n	800e670 <_scanf_float+0x3c4>
 800e66a:	003d      	movs	r5, r7
 800e66c:	356f      	adds	r5, #111	; 0x6f
 800e66e:	35ff      	adds	r5, #255	; 0xff
 800e670:	0028      	movs	r0, r5
 800e672:	4910      	ldr	r1, [pc, #64]	; (800e6b4 <_scanf_float+0x408>)
 800e674:	f000 f91a 	bl	800e8ac <siprintf>
 800e678:	e7cd      	b.n	800e616 <_scanf_float+0x36a>
 800e67a:	1d19      	adds	r1, r3, #4
 800e67c:	0752      	lsls	r2, r2, #29
 800e67e:	d502      	bpl.n	800e686 <_scanf_float+0x3da>
 800e680:	9a07      	ldr	r2, [sp, #28]
 800e682:	6011      	str	r1, [r2, #0]
 800e684:	e7d6      	b.n	800e634 <_scanf_float+0x388>
 800e686:	9a07      	ldr	r2, [sp, #28]
 800e688:	0020      	movs	r0, r4
 800e68a:	6011      	str	r1, [r2, #0]
 800e68c:	681e      	ldr	r6, [r3, #0]
 800e68e:	0022      	movs	r2, r4
 800e690:	002b      	movs	r3, r5
 800e692:	0029      	movs	r1, r5
 800e694:	f7f4 fc62 	bl	8002f5c <__aeabi_dcmpun>
 800e698:	2800      	cmp	r0, #0
 800e69a:	d004      	beq.n	800e6a6 <_scanf_float+0x3fa>
 800e69c:	4806      	ldr	r0, [pc, #24]	; (800e6b8 <_scanf_float+0x40c>)
 800e69e:	f000 fb53 	bl	800ed48 <nanf>
 800e6a2:	6030      	str	r0, [r6, #0]
 800e6a4:	e7c9      	b.n	800e63a <_scanf_float+0x38e>
 800e6a6:	0020      	movs	r0, r4
 800e6a8:	0029      	movs	r1, r5
 800e6aa:	f7f4 fd49 	bl	8003140 <__aeabi_d2f>
 800e6ae:	e7f8      	b.n	800e6a2 <_scanf_float+0x3f6>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	e63f      	b.n	800e334 <_scanf_float+0x88>
 800e6b4:	08013885 	.word	0x08013885
 800e6b8:	0801393e 	.word	0x0801393e

0800e6bc <std>:
 800e6bc:	2300      	movs	r3, #0
 800e6be:	b510      	push	{r4, lr}
 800e6c0:	0004      	movs	r4, r0
 800e6c2:	6003      	str	r3, [r0, #0]
 800e6c4:	6043      	str	r3, [r0, #4]
 800e6c6:	6083      	str	r3, [r0, #8]
 800e6c8:	8181      	strh	r1, [r0, #12]
 800e6ca:	6643      	str	r3, [r0, #100]	; 0x64
 800e6cc:	81c2      	strh	r2, [r0, #14]
 800e6ce:	6103      	str	r3, [r0, #16]
 800e6d0:	6143      	str	r3, [r0, #20]
 800e6d2:	6183      	str	r3, [r0, #24]
 800e6d4:	0019      	movs	r1, r3
 800e6d6:	2208      	movs	r2, #8
 800e6d8:	305c      	adds	r0, #92	; 0x5c
 800e6da:	f000 f953 	bl	800e984 <memset>
 800e6de:	4b0b      	ldr	r3, [pc, #44]	; (800e70c <std+0x50>)
 800e6e0:	6224      	str	r4, [r4, #32]
 800e6e2:	6263      	str	r3, [r4, #36]	; 0x24
 800e6e4:	4b0a      	ldr	r3, [pc, #40]	; (800e710 <std+0x54>)
 800e6e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6e8:	4b0a      	ldr	r3, [pc, #40]	; (800e714 <std+0x58>)
 800e6ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6ec:	4b0a      	ldr	r3, [pc, #40]	; (800e718 <std+0x5c>)
 800e6ee:	6323      	str	r3, [r4, #48]	; 0x30
 800e6f0:	4b0a      	ldr	r3, [pc, #40]	; (800e71c <std+0x60>)
 800e6f2:	429c      	cmp	r4, r3
 800e6f4:	d005      	beq.n	800e702 <std+0x46>
 800e6f6:	4b0a      	ldr	r3, [pc, #40]	; (800e720 <std+0x64>)
 800e6f8:	429c      	cmp	r4, r3
 800e6fa:	d002      	beq.n	800e702 <std+0x46>
 800e6fc:	4b09      	ldr	r3, [pc, #36]	; (800e724 <std+0x68>)
 800e6fe:	429c      	cmp	r4, r3
 800e700:	d103      	bne.n	800e70a <std+0x4e>
 800e702:	0020      	movs	r0, r4
 800e704:	3058      	adds	r0, #88	; 0x58
 800e706:	f000 faf9 	bl	800ecfc <__retarget_lock_init_recursive>
 800e70a:	bd10      	pop	{r4, pc}
 800e70c:	0800e8ed 	.word	0x0800e8ed
 800e710:	0800e915 	.word	0x0800e915
 800e714:	0800e94d 	.word	0x0800e94d
 800e718:	0800e979 	.word	0x0800e979
 800e71c:	200064e0 	.word	0x200064e0
 800e720:	20006548 	.word	0x20006548
 800e724:	200065b0 	.word	0x200065b0

0800e728 <stdio_exit_handler>:
 800e728:	b510      	push	{r4, lr}
 800e72a:	4a03      	ldr	r2, [pc, #12]	; (800e738 <stdio_exit_handler+0x10>)
 800e72c:	4903      	ldr	r1, [pc, #12]	; (800e73c <stdio_exit_handler+0x14>)
 800e72e:	4804      	ldr	r0, [pc, #16]	; (800e740 <stdio_exit_handler+0x18>)
 800e730:	f000 f86c 	bl	800e80c <_fwalk_sglue>
 800e734:	bd10      	pop	{r4, pc}
 800e736:	46c0      	nop			; (mov r8, r8)
 800e738:	2000012c 	.word	0x2000012c
 800e73c:	08010fa1 	.word	0x08010fa1
 800e740:	200002a4 	.word	0x200002a4

0800e744 <cleanup_stdio>:
 800e744:	6841      	ldr	r1, [r0, #4]
 800e746:	4b0b      	ldr	r3, [pc, #44]	; (800e774 <cleanup_stdio+0x30>)
 800e748:	b510      	push	{r4, lr}
 800e74a:	0004      	movs	r4, r0
 800e74c:	4299      	cmp	r1, r3
 800e74e:	d001      	beq.n	800e754 <cleanup_stdio+0x10>
 800e750:	f002 fc26 	bl	8010fa0 <_fflush_r>
 800e754:	68a1      	ldr	r1, [r4, #8]
 800e756:	4b08      	ldr	r3, [pc, #32]	; (800e778 <cleanup_stdio+0x34>)
 800e758:	4299      	cmp	r1, r3
 800e75a:	d002      	beq.n	800e762 <cleanup_stdio+0x1e>
 800e75c:	0020      	movs	r0, r4
 800e75e:	f002 fc1f 	bl	8010fa0 <_fflush_r>
 800e762:	68e1      	ldr	r1, [r4, #12]
 800e764:	4b05      	ldr	r3, [pc, #20]	; (800e77c <cleanup_stdio+0x38>)
 800e766:	4299      	cmp	r1, r3
 800e768:	d002      	beq.n	800e770 <cleanup_stdio+0x2c>
 800e76a:	0020      	movs	r0, r4
 800e76c:	f002 fc18 	bl	8010fa0 <_fflush_r>
 800e770:	bd10      	pop	{r4, pc}
 800e772:	46c0      	nop			; (mov r8, r8)
 800e774:	200064e0 	.word	0x200064e0
 800e778:	20006548 	.word	0x20006548
 800e77c:	200065b0 	.word	0x200065b0

0800e780 <global_stdio_init.part.0>:
 800e780:	b510      	push	{r4, lr}
 800e782:	4b09      	ldr	r3, [pc, #36]	; (800e7a8 <global_stdio_init.part.0+0x28>)
 800e784:	4a09      	ldr	r2, [pc, #36]	; (800e7ac <global_stdio_init.part.0+0x2c>)
 800e786:	2104      	movs	r1, #4
 800e788:	601a      	str	r2, [r3, #0]
 800e78a:	4809      	ldr	r0, [pc, #36]	; (800e7b0 <global_stdio_init.part.0+0x30>)
 800e78c:	2200      	movs	r2, #0
 800e78e:	f7ff ff95 	bl	800e6bc <std>
 800e792:	2201      	movs	r2, #1
 800e794:	2109      	movs	r1, #9
 800e796:	4807      	ldr	r0, [pc, #28]	; (800e7b4 <global_stdio_init.part.0+0x34>)
 800e798:	f7ff ff90 	bl	800e6bc <std>
 800e79c:	2202      	movs	r2, #2
 800e79e:	2112      	movs	r1, #18
 800e7a0:	4805      	ldr	r0, [pc, #20]	; (800e7b8 <global_stdio_init.part.0+0x38>)
 800e7a2:	f7ff ff8b 	bl	800e6bc <std>
 800e7a6:	bd10      	pop	{r4, pc}
 800e7a8:	20006618 	.word	0x20006618
 800e7ac:	0800e729 	.word	0x0800e729
 800e7b0:	200064e0 	.word	0x200064e0
 800e7b4:	20006548 	.word	0x20006548
 800e7b8:	200065b0 	.word	0x200065b0

0800e7bc <__sfp_lock_acquire>:
 800e7bc:	b510      	push	{r4, lr}
 800e7be:	4802      	ldr	r0, [pc, #8]	; (800e7c8 <__sfp_lock_acquire+0xc>)
 800e7c0:	f000 fa9d 	bl	800ecfe <__retarget_lock_acquire_recursive>
 800e7c4:	bd10      	pop	{r4, pc}
 800e7c6:	46c0      	nop			; (mov r8, r8)
 800e7c8:	20006621 	.word	0x20006621

0800e7cc <__sfp_lock_release>:
 800e7cc:	b510      	push	{r4, lr}
 800e7ce:	4802      	ldr	r0, [pc, #8]	; (800e7d8 <__sfp_lock_release+0xc>)
 800e7d0:	f000 fa96 	bl	800ed00 <__retarget_lock_release_recursive>
 800e7d4:	bd10      	pop	{r4, pc}
 800e7d6:	46c0      	nop			; (mov r8, r8)
 800e7d8:	20006621 	.word	0x20006621

0800e7dc <__sinit>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	0004      	movs	r4, r0
 800e7e0:	f7ff ffec 	bl	800e7bc <__sfp_lock_acquire>
 800e7e4:	6a23      	ldr	r3, [r4, #32]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d002      	beq.n	800e7f0 <__sinit+0x14>
 800e7ea:	f7ff ffef 	bl	800e7cc <__sfp_lock_release>
 800e7ee:	bd10      	pop	{r4, pc}
 800e7f0:	4b04      	ldr	r3, [pc, #16]	; (800e804 <__sinit+0x28>)
 800e7f2:	6223      	str	r3, [r4, #32]
 800e7f4:	4b04      	ldr	r3, [pc, #16]	; (800e808 <__sinit+0x2c>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1f6      	bne.n	800e7ea <__sinit+0xe>
 800e7fc:	f7ff ffc0 	bl	800e780 <global_stdio_init.part.0>
 800e800:	e7f3      	b.n	800e7ea <__sinit+0xe>
 800e802:	46c0      	nop			; (mov r8, r8)
 800e804:	0800e745 	.word	0x0800e745
 800e808:	20006618 	.word	0x20006618

0800e80c <_fwalk_sglue>:
 800e80c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e80e:	0014      	movs	r4, r2
 800e810:	2600      	movs	r6, #0
 800e812:	9000      	str	r0, [sp, #0]
 800e814:	9101      	str	r1, [sp, #4]
 800e816:	68a5      	ldr	r5, [r4, #8]
 800e818:	6867      	ldr	r7, [r4, #4]
 800e81a:	3f01      	subs	r7, #1
 800e81c:	d504      	bpl.n	800e828 <_fwalk_sglue+0x1c>
 800e81e:	6824      	ldr	r4, [r4, #0]
 800e820:	2c00      	cmp	r4, #0
 800e822:	d1f8      	bne.n	800e816 <_fwalk_sglue+0xa>
 800e824:	0030      	movs	r0, r6
 800e826:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e828:	89ab      	ldrh	r3, [r5, #12]
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d908      	bls.n	800e840 <_fwalk_sglue+0x34>
 800e82e:	220e      	movs	r2, #14
 800e830:	5eab      	ldrsh	r3, [r5, r2]
 800e832:	3301      	adds	r3, #1
 800e834:	d004      	beq.n	800e840 <_fwalk_sglue+0x34>
 800e836:	0029      	movs	r1, r5
 800e838:	9800      	ldr	r0, [sp, #0]
 800e83a:	9b01      	ldr	r3, [sp, #4]
 800e83c:	4798      	blx	r3
 800e83e:	4306      	orrs	r6, r0
 800e840:	3568      	adds	r5, #104	; 0x68
 800e842:	e7ea      	b.n	800e81a <_fwalk_sglue+0xe>

0800e844 <sniprintf>:
 800e844:	b40c      	push	{r2, r3}
 800e846:	b530      	push	{r4, r5, lr}
 800e848:	4b17      	ldr	r3, [pc, #92]	; (800e8a8 <sniprintf+0x64>)
 800e84a:	000c      	movs	r4, r1
 800e84c:	681d      	ldr	r5, [r3, #0]
 800e84e:	b09d      	sub	sp, #116	; 0x74
 800e850:	2900      	cmp	r1, #0
 800e852:	da08      	bge.n	800e866 <sniprintf+0x22>
 800e854:	238b      	movs	r3, #139	; 0x8b
 800e856:	2001      	movs	r0, #1
 800e858:	602b      	str	r3, [r5, #0]
 800e85a:	4240      	negs	r0, r0
 800e85c:	b01d      	add	sp, #116	; 0x74
 800e85e:	bc30      	pop	{r4, r5}
 800e860:	bc08      	pop	{r3}
 800e862:	b002      	add	sp, #8
 800e864:	4718      	bx	r3
 800e866:	2382      	movs	r3, #130	; 0x82
 800e868:	466a      	mov	r2, sp
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	8293      	strh	r3, [r2, #20]
 800e86e:	2300      	movs	r3, #0
 800e870:	9002      	str	r0, [sp, #8]
 800e872:	9006      	str	r0, [sp, #24]
 800e874:	4299      	cmp	r1, r3
 800e876:	d000      	beq.n	800e87a <sniprintf+0x36>
 800e878:	1e4b      	subs	r3, r1, #1
 800e87a:	9304      	str	r3, [sp, #16]
 800e87c:	9307      	str	r3, [sp, #28]
 800e87e:	2301      	movs	r3, #1
 800e880:	466a      	mov	r2, sp
 800e882:	425b      	negs	r3, r3
 800e884:	82d3      	strh	r3, [r2, #22]
 800e886:	0028      	movs	r0, r5
 800e888:	ab21      	add	r3, sp, #132	; 0x84
 800e88a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e88c:	a902      	add	r1, sp, #8
 800e88e:	9301      	str	r3, [sp, #4]
 800e890:	f002 f9fc 	bl	8010c8c <_svfiprintf_r>
 800e894:	1c43      	adds	r3, r0, #1
 800e896:	da01      	bge.n	800e89c <sniprintf+0x58>
 800e898:	238b      	movs	r3, #139	; 0x8b
 800e89a:	602b      	str	r3, [r5, #0]
 800e89c:	2c00      	cmp	r4, #0
 800e89e:	d0dd      	beq.n	800e85c <sniprintf+0x18>
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	9b02      	ldr	r3, [sp, #8]
 800e8a4:	701a      	strb	r2, [r3, #0]
 800e8a6:	e7d9      	b.n	800e85c <sniprintf+0x18>
 800e8a8:	200002f0 	.word	0x200002f0

0800e8ac <siprintf>:
 800e8ac:	b40e      	push	{r1, r2, r3}
 800e8ae:	b500      	push	{lr}
 800e8b0:	490b      	ldr	r1, [pc, #44]	; (800e8e0 <siprintf+0x34>)
 800e8b2:	b09c      	sub	sp, #112	; 0x70
 800e8b4:	ab1d      	add	r3, sp, #116	; 0x74
 800e8b6:	9002      	str	r0, [sp, #8]
 800e8b8:	9006      	str	r0, [sp, #24]
 800e8ba:	9107      	str	r1, [sp, #28]
 800e8bc:	9104      	str	r1, [sp, #16]
 800e8be:	4809      	ldr	r0, [pc, #36]	; (800e8e4 <siprintf+0x38>)
 800e8c0:	4909      	ldr	r1, [pc, #36]	; (800e8e8 <siprintf+0x3c>)
 800e8c2:	cb04      	ldmia	r3!, {r2}
 800e8c4:	9105      	str	r1, [sp, #20]
 800e8c6:	6800      	ldr	r0, [r0, #0]
 800e8c8:	a902      	add	r1, sp, #8
 800e8ca:	9301      	str	r3, [sp, #4]
 800e8cc:	f002 f9de 	bl	8010c8c <_svfiprintf_r>
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	9b02      	ldr	r3, [sp, #8]
 800e8d4:	701a      	strb	r2, [r3, #0]
 800e8d6:	b01c      	add	sp, #112	; 0x70
 800e8d8:	bc08      	pop	{r3}
 800e8da:	b003      	add	sp, #12
 800e8dc:	4718      	bx	r3
 800e8de:	46c0      	nop			; (mov r8, r8)
 800e8e0:	7fffffff 	.word	0x7fffffff
 800e8e4:	200002f0 	.word	0x200002f0
 800e8e8:	ffff0208 	.word	0xffff0208

0800e8ec <__sread>:
 800e8ec:	b570      	push	{r4, r5, r6, lr}
 800e8ee:	000c      	movs	r4, r1
 800e8f0:	250e      	movs	r5, #14
 800e8f2:	5f49      	ldrsh	r1, [r1, r5]
 800e8f4:	f000 f99e 	bl	800ec34 <_read_r>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	db03      	blt.n	800e904 <__sread+0x18>
 800e8fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e8fe:	181b      	adds	r3, r3, r0
 800e900:	6563      	str	r3, [r4, #84]	; 0x54
 800e902:	bd70      	pop	{r4, r5, r6, pc}
 800e904:	89a3      	ldrh	r3, [r4, #12]
 800e906:	4a02      	ldr	r2, [pc, #8]	; (800e910 <__sread+0x24>)
 800e908:	4013      	ands	r3, r2
 800e90a:	81a3      	strh	r3, [r4, #12]
 800e90c:	e7f9      	b.n	800e902 <__sread+0x16>
 800e90e:	46c0      	nop			; (mov r8, r8)
 800e910:	ffffefff 	.word	0xffffefff

0800e914 <__swrite>:
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	001f      	movs	r7, r3
 800e918:	898b      	ldrh	r3, [r1, #12]
 800e91a:	0005      	movs	r5, r0
 800e91c:	000c      	movs	r4, r1
 800e91e:	0016      	movs	r6, r2
 800e920:	05db      	lsls	r3, r3, #23
 800e922:	d505      	bpl.n	800e930 <__swrite+0x1c>
 800e924:	230e      	movs	r3, #14
 800e926:	5ec9      	ldrsh	r1, [r1, r3]
 800e928:	2200      	movs	r2, #0
 800e92a:	2302      	movs	r3, #2
 800e92c:	f000 f96e 	bl	800ec0c <_lseek_r>
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	4a05      	ldr	r2, [pc, #20]	; (800e948 <__swrite+0x34>)
 800e934:	0028      	movs	r0, r5
 800e936:	4013      	ands	r3, r2
 800e938:	81a3      	strh	r3, [r4, #12]
 800e93a:	0032      	movs	r2, r6
 800e93c:	230e      	movs	r3, #14
 800e93e:	5ee1      	ldrsh	r1, [r4, r3]
 800e940:	003b      	movs	r3, r7
 800e942:	f000 f99d 	bl	800ec80 <_write_r>
 800e946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e948:	ffffefff 	.word	0xffffefff

0800e94c <__sseek>:
 800e94c:	b570      	push	{r4, r5, r6, lr}
 800e94e:	000c      	movs	r4, r1
 800e950:	250e      	movs	r5, #14
 800e952:	5f49      	ldrsh	r1, [r1, r5]
 800e954:	f000 f95a 	bl	800ec0c <_lseek_r>
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	1c42      	adds	r2, r0, #1
 800e95c:	d103      	bne.n	800e966 <__sseek+0x1a>
 800e95e:	4a05      	ldr	r2, [pc, #20]	; (800e974 <__sseek+0x28>)
 800e960:	4013      	ands	r3, r2
 800e962:	81a3      	strh	r3, [r4, #12]
 800e964:	bd70      	pop	{r4, r5, r6, pc}
 800e966:	2280      	movs	r2, #128	; 0x80
 800e968:	0152      	lsls	r2, r2, #5
 800e96a:	4313      	orrs	r3, r2
 800e96c:	81a3      	strh	r3, [r4, #12]
 800e96e:	6560      	str	r0, [r4, #84]	; 0x54
 800e970:	e7f8      	b.n	800e964 <__sseek+0x18>
 800e972:	46c0      	nop			; (mov r8, r8)
 800e974:	ffffefff 	.word	0xffffefff

0800e978 <__sclose>:
 800e978:	b510      	push	{r4, lr}
 800e97a:	230e      	movs	r3, #14
 800e97c:	5ec9      	ldrsh	r1, [r1, r3]
 800e97e:	f000 f8d5 	bl	800eb2c <_close_r>
 800e982:	bd10      	pop	{r4, pc}

0800e984 <memset>:
 800e984:	0003      	movs	r3, r0
 800e986:	1882      	adds	r2, r0, r2
 800e988:	4293      	cmp	r3, r2
 800e98a:	d100      	bne.n	800e98e <memset+0xa>
 800e98c:	4770      	bx	lr
 800e98e:	7019      	strb	r1, [r3, #0]
 800e990:	3301      	adds	r3, #1
 800e992:	e7f9      	b.n	800e988 <memset+0x4>

0800e994 <strcat>:
 800e994:	0002      	movs	r2, r0
 800e996:	b510      	push	{r4, lr}
 800e998:	7813      	ldrb	r3, [r2, #0]
 800e99a:	0014      	movs	r4, r2
 800e99c:	3201      	adds	r2, #1
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d1fa      	bne.n	800e998 <strcat+0x4>
 800e9a2:	5cca      	ldrb	r2, [r1, r3]
 800e9a4:	54e2      	strb	r2, [r4, r3]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	2a00      	cmp	r2, #0
 800e9aa:	d1fa      	bne.n	800e9a2 <strcat+0xe>
 800e9ac:	bd10      	pop	{r4, pc}

0800e9ae <strchr>:
 800e9ae:	b2c9      	uxtb	r1, r1
 800e9b0:	7803      	ldrb	r3, [r0, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d004      	beq.n	800e9c0 <strchr+0x12>
 800e9b6:	428b      	cmp	r3, r1
 800e9b8:	d100      	bne.n	800e9bc <strchr+0xe>
 800e9ba:	4770      	bx	lr
 800e9bc:	3001      	adds	r0, #1
 800e9be:	e7f7      	b.n	800e9b0 <strchr+0x2>
 800e9c0:	424b      	negs	r3, r1
 800e9c2:	4159      	adcs	r1, r3
 800e9c4:	4249      	negs	r1, r1
 800e9c6:	4008      	ands	r0, r1
 800e9c8:	e7f7      	b.n	800e9ba <strchr+0xc>

0800e9ca <strncmp>:
 800e9ca:	b530      	push	{r4, r5, lr}
 800e9cc:	0005      	movs	r5, r0
 800e9ce:	1e10      	subs	r0, r2, #0
 800e9d0:	d00b      	beq.n	800e9ea <strncmp+0x20>
 800e9d2:	2400      	movs	r4, #0
 800e9d4:	3a01      	subs	r2, #1
 800e9d6:	5d2b      	ldrb	r3, [r5, r4]
 800e9d8:	5d08      	ldrb	r0, [r1, r4]
 800e9da:	4283      	cmp	r3, r0
 800e9dc:	d104      	bne.n	800e9e8 <strncmp+0x1e>
 800e9de:	42a2      	cmp	r2, r4
 800e9e0:	d002      	beq.n	800e9e8 <strncmp+0x1e>
 800e9e2:	3401      	adds	r4, #1
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1f6      	bne.n	800e9d6 <strncmp+0xc>
 800e9e8:	1a18      	subs	r0, r3, r0
 800e9ea:	bd30      	pop	{r4, r5, pc}

0800e9ec <strncpy>:
 800e9ec:	0003      	movs	r3, r0
 800e9ee:	b530      	push	{r4, r5, lr}
 800e9f0:	001d      	movs	r5, r3
 800e9f2:	2a00      	cmp	r2, #0
 800e9f4:	d006      	beq.n	800ea04 <strncpy+0x18>
 800e9f6:	780c      	ldrb	r4, [r1, #0]
 800e9f8:	3a01      	subs	r2, #1
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	702c      	strb	r4, [r5, #0]
 800e9fe:	3101      	adds	r1, #1
 800ea00:	2c00      	cmp	r4, #0
 800ea02:	d1f5      	bne.n	800e9f0 <strncpy+0x4>
 800ea04:	2100      	movs	r1, #0
 800ea06:	189a      	adds	r2, r3, r2
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d100      	bne.n	800ea0e <strncpy+0x22>
 800ea0c:	bd30      	pop	{r4, r5, pc}
 800ea0e:	7019      	strb	r1, [r3, #0]
 800ea10:	3301      	adds	r3, #1
 800ea12:	e7f9      	b.n	800ea08 <strncpy+0x1c>

0800ea14 <strtok>:
 800ea14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea16:	4b16      	ldr	r3, [pc, #88]	; (800ea70 <strtok+0x5c>)
 800ea18:	0005      	movs	r5, r0
 800ea1a:	681f      	ldr	r7, [r3, #0]
 800ea1c:	000e      	movs	r6, r1
 800ea1e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ea20:	2c00      	cmp	r4, #0
 800ea22:	d11d      	bne.n	800ea60 <strtok+0x4c>
 800ea24:	2050      	movs	r0, #80	; 0x50
 800ea26:	f7fe f837 	bl	800ca98 <malloc>
 800ea2a:	1e02      	subs	r2, r0, #0
 800ea2c:	6478      	str	r0, [r7, #68]	; 0x44
 800ea2e:	d104      	bne.n	800ea3a <strtok+0x26>
 800ea30:	215b      	movs	r1, #91	; 0x5b
 800ea32:	4b10      	ldr	r3, [pc, #64]	; (800ea74 <strtok+0x60>)
 800ea34:	4810      	ldr	r0, [pc, #64]	; (800ea78 <strtok+0x64>)
 800ea36:	f000 f98b 	bl	800ed50 <__assert_func>
 800ea3a:	6004      	str	r4, [r0, #0]
 800ea3c:	6044      	str	r4, [r0, #4]
 800ea3e:	6084      	str	r4, [r0, #8]
 800ea40:	60c4      	str	r4, [r0, #12]
 800ea42:	6104      	str	r4, [r0, #16]
 800ea44:	6144      	str	r4, [r0, #20]
 800ea46:	6184      	str	r4, [r0, #24]
 800ea48:	6284      	str	r4, [r0, #40]	; 0x28
 800ea4a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800ea4c:	6304      	str	r4, [r0, #48]	; 0x30
 800ea4e:	6344      	str	r4, [r0, #52]	; 0x34
 800ea50:	6384      	str	r4, [r0, #56]	; 0x38
 800ea52:	63c4      	str	r4, [r0, #60]	; 0x3c
 800ea54:	6404      	str	r4, [r0, #64]	; 0x40
 800ea56:	6444      	str	r4, [r0, #68]	; 0x44
 800ea58:	6484      	str	r4, [r0, #72]	; 0x48
 800ea5a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800ea5c:	7704      	strb	r4, [r0, #28]
 800ea5e:	6244      	str	r4, [r0, #36]	; 0x24
 800ea60:	0031      	movs	r1, r6
 800ea62:	0028      	movs	r0, r5
 800ea64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea66:	2301      	movs	r3, #1
 800ea68:	f000 f808 	bl	800ea7c <__strtok_r>
 800ea6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea6e:	46c0      	nop			; (mov r8, r8)
 800ea70:	200002f0 	.word	0x200002f0
 800ea74:	0801388a 	.word	0x0801388a
 800ea78:	080138a1 	.word	0x080138a1

0800ea7c <__strtok_r>:
 800ea7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	d102      	bne.n	800ea88 <__strtok_r+0xc>
 800ea82:	6810      	ldr	r0, [r2, #0]
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d013      	beq.n	800eab0 <__strtok_r+0x34>
 800ea88:	0004      	movs	r4, r0
 800ea8a:	0020      	movs	r0, r4
 800ea8c:	000e      	movs	r6, r1
 800ea8e:	7805      	ldrb	r5, [r0, #0]
 800ea90:	3401      	adds	r4, #1
 800ea92:	7837      	ldrb	r7, [r6, #0]
 800ea94:	2f00      	cmp	r7, #0
 800ea96:	d104      	bne.n	800eaa2 <__strtok_r+0x26>
 800ea98:	2d00      	cmp	r5, #0
 800ea9a:	d10f      	bne.n	800eabc <__strtok_r+0x40>
 800ea9c:	0028      	movs	r0, r5
 800ea9e:	6015      	str	r5, [r2, #0]
 800eaa0:	e006      	b.n	800eab0 <__strtok_r+0x34>
 800eaa2:	3601      	adds	r6, #1
 800eaa4:	42bd      	cmp	r5, r7
 800eaa6:	d1f4      	bne.n	800ea92 <__strtok_r+0x16>
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1ee      	bne.n	800ea8a <__strtok_r+0xe>
 800eaac:	6014      	str	r4, [r2, #0]
 800eaae:	7003      	strb	r3, [r0, #0]
 800eab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eab2:	002f      	movs	r7, r5
 800eab4:	e00f      	b.n	800ead6 <__strtok_r+0x5a>
 800eab6:	3301      	adds	r3, #1
 800eab8:	2e00      	cmp	r6, #0
 800eaba:	d104      	bne.n	800eac6 <__strtok_r+0x4a>
 800eabc:	0023      	movs	r3, r4
 800eabe:	3401      	adds	r4, #1
 800eac0:	781d      	ldrb	r5, [r3, #0]
 800eac2:	0027      	movs	r7, r4
 800eac4:	000b      	movs	r3, r1
 800eac6:	781e      	ldrb	r6, [r3, #0]
 800eac8:	42b5      	cmp	r5, r6
 800eaca:	d1f4      	bne.n	800eab6 <__strtok_r+0x3a>
 800eacc:	2d00      	cmp	r5, #0
 800eace:	d0f0      	beq.n	800eab2 <__strtok_r+0x36>
 800ead0:	2300      	movs	r3, #0
 800ead2:	3c01      	subs	r4, #1
 800ead4:	7023      	strb	r3, [r4, #0]
 800ead6:	6017      	str	r7, [r2, #0]
 800ead8:	e7ea      	b.n	800eab0 <__strtok_r+0x34>

0800eada <strtok_r>:
 800eada:	b510      	push	{r4, lr}
 800eadc:	2301      	movs	r3, #1
 800eade:	f7ff ffcd 	bl	800ea7c <__strtok_r>
 800eae2:	bd10      	pop	{r4, pc}

0800eae4 <strstr>:
 800eae4:	780a      	ldrb	r2, [r1, #0]
 800eae6:	b530      	push	{r4, r5, lr}
 800eae8:	2a00      	cmp	r2, #0
 800eaea:	d10c      	bne.n	800eb06 <strstr+0x22>
 800eaec:	bd30      	pop	{r4, r5, pc}
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d108      	bne.n	800eb04 <strstr+0x20>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	5ccc      	ldrb	r4, [r1, r3]
 800eaf6:	2c00      	cmp	r4, #0
 800eaf8:	d0f8      	beq.n	800eaec <strstr+0x8>
 800eafa:	5cc5      	ldrb	r5, [r0, r3]
 800eafc:	42a5      	cmp	r5, r4
 800eafe:	d101      	bne.n	800eb04 <strstr+0x20>
 800eb00:	3301      	adds	r3, #1
 800eb02:	e7f7      	b.n	800eaf4 <strstr+0x10>
 800eb04:	3001      	adds	r0, #1
 800eb06:	7803      	ldrb	r3, [r0, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1f0      	bne.n	800eaee <strstr+0xa>
 800eb0c:	0018      	movs	r0, r3
 800eb0e:	e7ed      	b.n	800eaec <strstr+0x8>

0800eb10 <stpcpy>:
 800eb10:	0003      	movs	r3, r0
 800eb12:	780a      	ldrb	r2, [r1, #0]
 800eb14:	0018      	movs	r0, r3
 800eb16:	701a      	strb	r2, [r3, #0]
 800eb18:	3101      	adds	r1, #1
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	2a00      	cmp	r2, #0
 800eb1e:	d1f8      	bne.n	800eb12 <stpcpy+0x2>
 800eb20:	4770      	bx	lr
	...

0800eb24 <_localeconv_r>:
 800eb24:	4800      	ldr	r0, [pc, #0]	; (800eb28 <_localeconv_r+0x4>)
 800eb26:	4770      	bx	lr
 800eb28:	20000228 	.word	0x20000228

0800eb2c <_close_r>:
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	b570      	push	{r4, r5, r6, lr}
 800eb30:	4d06      	ldr	r5, [pc, #24]	; (800eb4c <_close_r+0x20>)
 800eb32:	0004      	movs	r4, r0
 800eb34:	0008      	movs	r0, r1
 800eb36:	602b      	str	r3, [r5, #0]
 800eb38:	f7f8 feda 	bl	80078f0 <_close>
 800eb3c:	1c43      	adds	r3, r0, #1
 800eb3e:	d103      	bne.n	800eb48 <_close_r+0x1c>
 800eb40:	682b      	ldr	r3, [r5, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d000      	beq.n	800eb48 <_close_r+0x1c>
 800eb46:	6023      	str	r3, [r4, #0]
 800eb48:	bd70      	pop	{r4, r5, r6, pc}
 800eb4a:	46c0      	nop			; (mov r8, r8)
 800eb4c:	2000661c 	.word	0x2000661c

0800eb50 <_reclaim_reent>:
 800eb50:	4b2d      	ldr	r3, [pc, #180]	; (800ec08 <_reclaim_reent+0xb8>)
 800eb52:	b570      	push	{r4, r5, r6, lr}
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	0004      	movs	r4, r0
 800eb58:	4283      	cmp	r3, r0
 800eb5a:	d042      	beq.n	800ebe2 <_reclaim_reent+0x92>
 800eb5c:	69c3      	ldr	r3, [r0, #28]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00a      	beq.n	800eb78 <_reclaim_reent+0x28>
 800eb62:	2500      	movs	r5, #0
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	42ab      	cmp	r3, r5
 800eb68:	d140      	bne.n	800ebec <_reclaim_reent+0x9c>
 800eb6a:	69e3      	ldr	r3, [r4, #28]
 800eb6c:	6819      	ldr	r1, [r3, #0]
 800eb6e:	2900      	cmp	r1, #0
 800eb70:	d002      	beq.n	800eb78 <_reclaim_reent+0x28>
 800eb72:	0020      	movs	r0, r4
 800eb74:	f000 ffa8 	bl	800fac8 <_free_r>
 800eb78:	6961      	ldr	r1, [r4, #20]
 800eb7a:	2900      	cmp	r1, #0
 800eb7c:	d002      	beq.n	800eb84 <_reclaim_reent+0x34>
 800eb7e:	0020      	movs	r0, r4
 800eb80:	f000 ffa2 	bl	800fac8 <_free_r>
 800eb84:	69e1      	ldr	r1, [r4, #28]
 800eb86:	2900      	cmp	r1, #0
 800eb88:	d002      	beq.n	800eb90 <_reclaim_reent+0x40>
 800eb8a:	0020      	movs	r0, r4
 800eb8c:	f000 ff9c 	bl	800fac8 <_free_r>
 800eb90:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eb92:	2900      	cmp	r1, #0
 800eb94:	d002      	beq.n	800eb9c <_reclaim_reent+0x4c>
 800eb96:	0020      	movs	r0, r4
 800eb98:	f000 ff96 	bl	800fac8 <_free_r>
 800eb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb9e:	2900      	cmp	r1, #0
 800eba0:	d002      	beq.n	800eba8 <_reclaim_reent+0x58>
 800eba2:	0020      	movs	r0, r4
 800eba4:	f000 ff90 	bl	800fac8 <_free_r>
 800eba8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ebaa:	2900      	cmp	r1, #0
 800ebac:	d002      	beq.n	800ebb4 <_reclaim_reent+0x64>
 800ebae:	0020      	movs	r0, r4
 800ebb0:	f000 ff8a 	bl	800fac8 <_free_r>
 800ebb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ebb6:	2900      	cmp	r1, #0
 800ebb8:	d002      	beq.n	800ebc0 <_reclaim_reent+0x70>
 800ebba:	0020      	movs	r0, r4
 800ebbc:	f000 ff84 	bl	800fac8 <_free_r>
 800ebc0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ebc2:	2900      	cmp	r1, #0
 800ebc4:	d002      	beq.n	800ebcc <_reclaim_reent+0x7c>
 800ebc6:	0020      	movs	r0, r4
 800ebc8:	f000 ff7e 	bl	800fac8 <_free_r>
 800ebcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ebce:	2900      	cmp	r1, #0
 800ebd0:	d002      	beq.n	800ebd8 <_reclaim_reent+0x88>
 800ebd2:	0020      	movs	r0, r4
 800ebd4:	f000 ff78 	bl	800fac8 <_free_r>
 800ebd8:	6a23      	ldr	r3, [r4, #32]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <_reclaim_reent+0x92>
 800ebde:	0020      	movs	r0, r4
 800ebe0:	4798      	blx	r3
 800ebe2:	bd70      	pop	{r4, r5, r6, pc}
 800ebe4:	5949      	ldr	r1, [r1, r5]
 800ebe6:	2900      	cmp	r1, #0
 800ebe8:	d108      	bne.n	800ebfc <_reclaim_reent+0xac>
 800ebea:	3504      	adds	r5, #4
 800ebec:	69e3      	ldr	r3, [r4, #28]
 800ebee:	68d9      	ldr	r1, [r3, #12]
 800ebf0:	2d80      	cmp	r5, #128	; 0x80
 800ebf2:	d1f7      	bne.n	800ebe4 <_reclaim_reent+0x94>
 800ebf4:	0020      	movs	r0, r4
 800ebf6:	f000 ff67 	bl	800fac8 <_free_r>
 800ebfa:	e7b6      	b.n	800eb6a <_reclaim_reent+0x1a>
 800ebfc:	680e      	ldr	r6, [r1, #0]
 800ebfe:	0020      	movs	r0, r4
 800ec00:	f000 ff62 	bl	800fac8 <_free_r>
 800ec04:	0031      	movs	r1, r6
 800ec06:	e7ee      	b.n	800ebe6 <_reclaim_reent+0x96>
 800ec08:	200002f0 	.word	0x200002f0

0800ec0c <_lseek_r>:
 800ec0c:	b570      	push	{r4, r5, r6, lr}
 800ec0e:	0004      	movs	r4, r0
 800ec10:	0008      	movs	r0, r1
 800ec12:	0011      	movs	r1, r2
 800ec14:	001a      	movs	r2, r3
 800ec16:	2300      	movs	r3, #0
 800ec18:	4d05      	ldr	r5, [pc, #20]	; (800ec30 <_lseek_r+0x24>)
 800ec1a:	602b      	str	r3, [r5, #0]
 800ec1c:	f7f8 fe74 	bl	8007908 <_lseek>
 800ec20:	1c43      	adds	r3, r0, #1
 800ec22:	d103      	bne.n	800ec2c <_lseek_r+0x20>
 800ec24:	682b      	ldr	r3, [r5, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d000      	beq.n	800ec2c <_lseek_r+0x20>
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	bd70      	pop	{r4, r5, r6, pc}
 800ec2e:	46c0      	nop			; (mov r8, r8)
 800ec30:	2000661c 	.word	0x2000661c

0800ec34 <_read_r>:
 800ec34:	b570      	push	{r4, r5, r6, lr}
 800ec36:	0004      	movs	r4, r0
 800ec38:	0008      	movs	r0, r1
 800ec3a:	0011      	movs	r1, r2
 800ec3c:	001a      	movs	r2, r3
 800ec3e:	2300      	movs	r3, #0
 800ec40:	4d05      	ldr	r5, [pc, #20]	; (800ec58 <_read_r+0x24>)
 800ec42:	602b      	str	r3, [r5, #0]
 800ec44:	f7f8 fe38 	bl	80078b8 <_read>
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	d103      	bne.n	800ec54 <_read_r+0x20>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d000      	beq.n	800ec54 <_read_r+0x20>
 800ec52:	6023      	str	r3, [r4, #0]
 800ec54:	bd70      	pop	{r4, r5, r6, pc}
 800ec56:	46c0      	nop			; (mov r8, r8)
 800ec58:	2000661c 	.word	0x2000661c

0800ec5c <_sbrk_r>:
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	b570      	push	{r4, r5, r6, lr}
 800ec60:	4d06      	ldr	r5, [pc, #24]	; (800ec7c <_sbrk_r+0x20>)
 800ec62:	0004      	movs	r4, r0
 800ec64:	0008      	movs	r0, r1
 800ec66:	602b      	str	r3, [r5, #0]
 800ec68:	f7f8 fe50 	bl	800790c <_sbrk>
 800ec6c:	1c43      	adds	r3, r0, #1
 800ec6e:	d103      	bne.n	800ec78 <_sbrk_r+0x1c>
 800ec70:	682b      	ldr	r3, [r5, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d000      	beq.n	800ec78 <_sbrk_r+0x1c>
 800ec76:	6023      	str	r3, [r4, #0]
 800ec78:	bd70      	pop	{r4, r5, r6, pc}
 800ec7a:	46c0      	nop			; (mov r8, r8)
 800ec7c:	2000661c 	.word	0x2000661c

0800ec80 <_write_r>:
 800ec80:	b570      	push	{r4, r5, r6, lr}
 800ec82:	0004      	movs	r4, r0
 800ec84:	0008      	movs	r0, r1
 800ec86:	0011      	movs	r1, r2
 800ec88:	001a      	movs	r2, r3
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	4d05      	ldr	r5, [pc, #20]	; (800eca4 <_write_r+0x24>)
 800ec8e:	602b      	str	r3, [r5, #0]
 800ec90:	f7f8 fe20 	bl	80078d4 <_write>
 800ec94:	1c43      	adds	r3, r0, #1
 800ec96:	d103      	bne.n	800eca0 <_write_r+0x20>
 800ec98:	682b      	ldr	r3, [r5, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d000      	beq.n	800eca0 <_write_r+0x20>
 800ec9e:	6023      	str	r3, [r4, #0]
 800eca0:	bd70      	pop	{r4, r5, r6, pc}
 800eca2:	46c0      	nop			; (mov r8, r8)
 800eca4:	2000661c 	.word	0x2000661c

0800eca8 <__errno>:
 800eca8:	4b01      	ldr	r3, [pc, #4]	; (800ecb0 <__errno+0x8>)
 800ecaa:	6818      	ldr	r0, [r3, #0]
 800ecac:	4770      	bx	lr
 800ecae:	46c0      	nop			; (mov r8, r8)
 800ecb0:	200002f0 	.word	0x200002f0

0800ecb4 <__libc_init_array>:
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	2600      	movs	r6, #0
 800ecb8:	4c0c      	ldr	r4, [pc, #48]	; (800ecec <__libc_init_array+0x38>)
 800ecba:	4d0d      	ldr	r5, [pc, #52]	; (800ecf0 <__libc_init_array+0x3c>)
 800ecbc:	1b64      	subs	r4, r4, r5
 800ecbe:	10a4      	asrs	r4, r4, #2
 800ecc0:	42a6      	cmp	r6, r4
 800ecc2:	d109      	bne.n	800ecd8 <__libc_init_array+0x24>
 800ecc4:	2600      	movs	r6, #0
 800ecc6:	f003 fbef 	bl	80124a8 <_init>
 800ecca:	4c0a      	ldr	r4, [pc, #40]	; (800ecf4 <__libc_init_array+0x40>)
 800eccc:	4d0a      	ldr	r5, [pc, #40]	; (800ecf8 <__libc_init_array+0x44>)
 800ecce:	1b64      	subs	r4, r4, r5
 800ecd0:	10a4      	asrs	r4, r4, #2
 800ecd2:	42a6      	cmp	r6, r4
 800ecd4:	d105      	bne.n	800ece2 <__libc_init_array+0x2e>
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	00b3      	lsls	r3, r6, #2
 800ecda:	58eb      	ldr	r3, [r5, r3]
 800ecdc:	4798      	blx	r3
 800ecde:	3601      	adds	r6, #1
 800ece0:	e7ee      	b.n	800ecc0 <__libc_init_array+0xc>
 800ece2:	00b3      	lsls	r3, r6, #2
 800ece4:	58eb      	ldr	r3, [r5, r3]
 800ece6:	4798      	blx	r3
 800ece8:	3601      	adds	r6, #1
 800ecea:	e7f2      	b.n	800ecd2 <__libc_init_array+0x1e>
 800ecec:	08013bb0 	.word	0x08013bb0
 800ecf0:	08013bb0 	.word	0x08013bb0
 800ecf4:	08013bb4 	.word	0x08013bb4
 800ecf8:	08013bb0 	.word	0x08013bb0

0800ecfc <__retarget_lock_init_recursive>:
 800ecfc:	4770      	bx	lr

0800ecfe <__retarget_lock_acquire_recursive>:
 800ecfe:	4770      	bx	lr

0800ed00 <__retarget_lock_release_recursive>:
 800ed00:	4770      	bx	lr

0800ed02 <strcpy>:
 800ed02:	0003      	movs	r3, r0
 800ed04:	780a      	ldrb	r2, [r1, #0]
 800ed06:	3101      	adds	r1, #1
 800ed08:	701a      	strb	r2, [r3, #0]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	2a00      	cmp	r2, #0
 800ed0e:	d1f9      	bne.n	800ed04 <strcpy+0x2>
 800ed10:	4770      	bx	lr

0800ed12 <memchr>:
 800ed12:	b2c9      	uxtb	r1, r1
 800ed14:	1882      	adds	r2, r0, r2
 800ed16:	4290      	cmp	r0, r2
 800ed18:	d101      	bne.n	800ed1e <memchr+0xc>
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	4770      	bx	lr
 800ed1e:	7803      	ldrb	r3, [r0, #0]
 800ed20:	428b      	cmp	r3, r1
 800ed22:	d0fb      	beq.n	800ed1c <memchr+0xa>
 800ed24:	3001      	adds	r0, #1
 800ed26:	e7f6      	b.n	800ed16 <memchr+0x4>

0800ed28 <memcpy>:
 800ed28:	2300      	movs	r3, #0
 800ed2a:	b510      	push	{r4, lr}
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d100      	bne.n	800ed32 <memcpy+0xa>
 800ed30:	bd10      	pop	{r4, pc}
 800ed32:	5ccc      	ldrb	r4, [r1, r3]
 800ed34:	54c4      	strb	r4, [r0, r3]
 800ed36:	3301      	adds	r3, #1
 800ed38:	e7f8      	b.n	800ed2c <memcpy+0x4>
	...

0800ed3c <nan>:
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	4901      	ldr	r1, [pc, #4]	; (800ed44 <nan+0x8>)
 800ed40:	4770      	bx	lr
 800ed42:	46c0      	nop			; (mov r8, r8)
 800ed44:	7ff80000 	.word	0x7ff80000

0800ed48 <nanf>:
 800ed48:	4800      	ldr	r0, [pc, #0]	; (800ed4c <nanf+0x4>)
 800ed4a:	4770      	bx	lr
 800ed4c:	7fc00000 	.word	0x7fc00000

0800ed50 <__assert_func>:
 800ed50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed52:	0014      	movs	r4, r2
 800ed54:	001a      	movs	r2, r3
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <__assert_func+0x2c>)
 800ed58:	0005      	movs	r5, r0
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	000e      	movs	r6, r1
 800ed5e:	68d8      	ldr	r0, [r3, #12]
 800ed60:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <__assert_func+0x30>)
 800ed62:	2c00      	cmp	r4, #0
 800ed64:	d101      	bne.n	800ed6a <__assert_func+0x1a>
 800ed66:	4b07      	ldr	r3, [pc, #28]	; (800ed84 <__assert_func+0x34>)
 800ed68:	001c      	movs	r4, r3
 800ed6a:	4907      	ldr	r1, [pc, #28]	; (800ed88 <__assert_func+0x38>)
 800ed6c:	9301      	str	r3, [sp, #4]
 800ed6e:	9402      	str	r4, [sp, #8]
 800ed70:	002b      	movs	r3, r5
 800ed72:	9600      	str	r6, [sp, #0]
 800ed74:	f002 f940 	bl	8010ff8 <fiprintf>
 800ed78:	f002 f961 	bl	801103e <abort>
 800ed7c:	200002f0 	.word	0x200002f0
 800ed80:	08013903 	.word	0x08013903
 800ed84:	0801393e 	.word	0x0801393e
 800ed88:	08013910 	.word	0x08013910

0800ed8c <quorem>:
 800ed8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed8e:	6902      	ldr	r2, [r0, #16]
 800ed90:	690b      	ldr	r3, [r1, #16]
 800ed92:	b089      	sub	sp, #36	; 0x24
 800ed94:	0007      	movs	r7, r0
 800ed96:	9104      	str	r1, [sp, #16]
 800ed98:	2000      	movs	r0, #0
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	db69      	blt.n	800ee72 <quorem+0xe6>
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	009c      	lsls	r4, r3, #2
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	000b      	movs	r3, r1
 800eda6:	3314      	adds	r3, #20
 800eda8:	9306      	str	r3, [sp, #24]
 800edaa:	191b      	adds	r3, r3, r4
 800edac:	9305      	str	r3, [sp, #20]
 800edae:	003b      	movs	r3, r7
 800edb0:	3314      	adds	r3, #20
 800edb2:	9303      	str	r3, [sp, #12]
 800edb4:	191c      	adds	r4, r3, r4
 800edb6:	9b05      	ldr	r3, [sp, #20]
 800edb8:	6826      	ldr	r6, [r4, #0]
 800edba:	681d      	ldr	r5, [r3, #0]
 800edbc:	0030      	movs	r0, r6
 800edbe:	3501      	adds	r5, #1
 800edc0:	0029      	movs	r1, r5
 800edc2:	f7f1 f9bd 	bl	8000140 <__udivsi3>
 800edc6:	9002      	str	r0, [sp, #8]
 800edc8:	42ae      	cmp	r6, r5
 800edca:	d329      	bcc.n	800ee20 <quorem+0x94>
 800edcc:	9b06      	ldr	r3, [sp, #24]
 800edce:	2600      	movs	r6, #0
 800edd0:	469c      	mov	ip, r3
 800edd2:	9d03      	ldr	r5, [sp, #12]
 800edd4:	9606      	str	r6, [sp, #24]
 800edd6:	4662      	mov	r2, ip
 800edd8:	ca08      	ldmia	r2!, {r3}
 800edda:	6828      	ldr	r0, [r5, #0]
 800eddc:	4694      	mov	ip, r2
 800edde:	9a02      	ldr	r2, [sp, #8]
 800ede0:	b299      	uxth	r1, r3
 800ede2:	4351      	muls	r1, r2
 800ede4:	0c1b      	lsrs	r3, r3, #16
 800ede6:	4353      	muls	r3, r2
 800ede8:	1989      	adds	r1, r1, r6
 800edea:	0c0a      	lsrs	r2, r1, #16
 800edec:	189b      	adds	r3, r3, r2
 800edee:	9307      	str	r3, [sp, #28]
 800edf0:	0c1e      	lsrs	r6, r3, #16
 800edf2:	9b06      	ldr	r3, [sp, #24]
 800edf4:	b282      	uxth	r2, r0
 800edf6:	18d2      	adds	r2, r2, r3
 800edf8:	466b      	mov	r3, sp
 800edfa:	b289      	uxth	r1, r1
 800edfc:	8b9b      	ldrh	r3, [r3, #28]
 800edfe:	1a52      	subs	r2, r2, r1
 800ee00:	0c01      	lsrs	r1, r0, #16
 800ee02:	1ac9      	subs	r1, r1, r3
 800ee04:	1413      	asrs	r3, r2, #16
 800ee06:	18cb      	adds	r3, r1, r3
 800ee08:	1419      	asrs	r1, r3, #16
 800ee0a:	b292      	uxth	r2, r2
 800ee0c:	041b      	lsls	r3, r3, #16
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	c508      	stmia	r5!, {r3}
 800ee12:	9b05      	ldr	r3, [sp, #20]
 800ee14:	9106      	str	r1, [sp, #24]
 800ee16:	4563      	cmp	r3, ip
 800ee18:	d2dd      	bcs.n	800edd6 <quorem+0x4a>
 800ee1a:	6823      	ldr	r3, [r4, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d030      	beq.n	800ee82 <quorem+0xf6>
 800ee20:	0038      	movs	r0, r7
 800ee22:	9904      	ldr	r1, [sp, #16]
 800ee24:	f001 fcda 	bl	80107dc <__mcmp>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	db21      	blt.n	800ee70 <quorem+0xe4>
 800ee2c:	0038      	movs	r0, r7
 800ee2e:	2600      	movs	r6, #0
 800ee30:	9b02      	ldr	r3, [sp, #8]
 800ee32:	9c04      	ldr	r4, [sp, #16]
 800ee34:	3301      	adds	r3, #1
 800ee36:	9302      	str	r3, [sp, #8]
 800ee38:	3014      	adds	r0, #20
 800ee3a:	3414      	adds	r4, #20
 800ee3c:	6803      	ldr	r3, [r0, #0]
 800ee3e:	cc02      	ldmia	r4!, {r1}
 800ee40:	b29d      	uxth	r5, r3
 800ee42:	19ad      	adds	r5, r5, r6
 800ee44:	b28a      	uxth	r2, r1
 800ee46:	1aaa      	subs	r2, r5, r2
 800ee48:	0c09      	lsrs	r1, r1, #16
 800ee4a:	0c1b      	lsrs	r3, r3, #16
 800ee4c:	1a5b      	subs	r3, r3, r1
 800ee4e:	1411      	asrs	r1, r2, #16
 800ee50:	185b      	adds	r3, r3, r1
 800ee52:	141e      	asrs	r6, r3, #16
 800ee54:	b292      	uxth	r2, r2
 800ee56:	041b      	lsls	r3, r3, #16
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	c008      	stmia	r0!, {r3}
 800ee5c:	9b05      	ldr	r3, [sp, #20]
 800ee5e:	42a3      	cmp	r3, r4
 800ee60:	d2ec      	bcs.n	800ee3c <quorem+0xb0>
 800ee62:	9b01      	ldr	r3, [sp, #4]
 800ee64:	9a03      	ldr	r2, [sp, #12]
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	18d3      	adds	r3, r2, r3
 800ee6a:	681a      	ldr	r2, [r3, #0]
 800ee6c:	2a00      	cmp	r2, #0
 800ee6e:	d015      	beq.n	800ee9c <quorem+0x110>
 800ee70:	9802      	ldr	r0, [sp, #8]
 800ee72:	b009      	add	sp, #36	; 0x24
 800ee74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee76:	6823      	ldr	r3, [r4, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d106      	bne.n	800ee8a <quorem+0xfe>
 800ee7c:	9b01      	ldr	r3, [sp, #4]
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	9301      	str	r3, [sp, #4]
 800ee82:	9b03      	ldr	r3, [sp, #12]
 800ee84:	3c04      	subs	r4, #4
 800ee86:	42a3      	cmp	r3, r4
 800ee88:	d3f5      	bcc.n	800ee76 <quorem+0xea>
 800ee8a:	9b01      	ldr	r3, [sp, #4]
 800ee8c:	613b      	str	r3, [r7, #16]
 800ee8e:	e7c7      	b.n	800ee20 <quorem+0x94>
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	2a00      	cmp	r2, #0
 800ee94:	d106      	bne.n	800eea4 <quorem+0x118>
 800ee96:	9a01      	ldr	r2, [sp, #4]
 800ee98:	3a01      	subs	r2, #1
 800ee9a:	9201      	str	r2, [sp, #4]
 800ee9c:	9a03      	ldr	r2, [sp, #12]
 800ee9e:	3b04      	subs	r3, #4
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d3f5      	bcc.n	800ee90 <quorem+0x104>
 800eea4:	9b01      	ldr	r3, [sp, #4]
 800eea6:	613b      	str	r3, [r7, #16]
 800eea8:	e7e2      	b.n	800ee70 <quorem+0xe4>
	...

0800eeac <_dtoa_r>:
 800eeac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeae:	0014      	movs	r4, r2
 800eeb0:	001d      	movs	r5, r3
 800eeb2:	69c6      	ldr	r6, [r0, #28]
 800eeb4:	b09d      	sub	sp, #116	; 0x74
 800eeb6:	9408      	str	r4, [sp, #32]
 800eeb8:	9509      	str	r5, [sp, #36]	; 0x24
 800eeba:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800eebc:	9004      	str	r0, [sp, #16]
 800eebe:	2e00      	cmp	r6, #0
 800eec0:	d10f      	bne.n	800eee2 <_dtoa_r+0x36>
 800eec2:	2010      	movs	r0, #16
 800eec4:	f7fd fde8 	bl	800ca98 <malloc>
 800eec8:	9b04      	ldr	r3, [sp, #16]
 800eeca:	1e02      	subs	r2, r0, #0
 800eecc:	61d8      	str	r0, [r3, #28]
 800eece:	d104      	bne.n	800eeda <_dtoa_r+0x2e>
 800eed0:	21ef      	movs	r1, #239	; 0xef
 800eed2:	4bc6      	ldr	r3, [pc, #792]	; (800f1ec <_dtoa_r+0x340>)
 800eed4:	48c6      	ldr	r0, [pc, #792]	; (800f1f0 <_dtoa_r+0x344>)
 800eed6:	f7ff ff3b 	bl	800ed50 <__assert_func>
 800eeda:	6046      	str	r6, [r0, #4]
 800eedc:	6086      	str	r6, [r0, #8]
 800eede:	6006      	str	r6, [r0, #0]
 800eee0:	60c6      	str	r6, [r0, #12]
 800eee2:	9b04      	ldr	r3, [sp, #16]
 800eee4:	69db      	ldr	r3, [r3, #28]
 800eee6:	6819      	ldr	r1, [r3, #0]
 800eee8:	2900      	cmp	r1, #0
 800eeea:	d00b      	beq.n	800ef04 <_dtoa_r+0x58>
 800eeec:	685a      	ldr	r2, [r3, #4]
 800eeee:	2301      	movs	r3, #1
 800eef0:	4093      	lsls	r3, r2
 800eef2:	604a      	str	r2, [r1, #4]
 800eef4:	608b      	str	r3, [r1, #8]
 800eef6:	9804      	ldr	r0, [sp, #16]
 800eef8:	f001 f9e2 	bl	80102c0 <_Bfree>
 800eefc:	2200      	movs	r2, #0
 800eefe:	9b04      	ldr	r3, [sp, #16]
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	2d00      	cmp	r5, #0
 800ef06:	da1e      	bge.n	800ef46 <_dtoa_r+0x9a>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	603b      	str	r3, [r7, #0]
 800ef0c:	006b      	lsls	r3, r5, #1
 800ef0e:	085b      	lsrs	r3, r3, #1
 800ef10:	9309      	str	r3, [sp, #36]	; 0x24
 800ef12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ef14:	4bb7      	ldr	r3, [pc, #732]	; (800f1f4 <_dtoa_r+0x348>)
 800ef16:	4ab7      	ldr	r2, [pc, #732]	; (800f1f4 <_dtoa_r+0x348>)
 800ef18:	403b      	ands	r3, r7
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d116      	bne.n	800ef4c <_dtoa_r+0xa0>
 800ef1e:	4bb6      	ldr	r3, [pc, #728]	; (800f1f8 <_dtoa_r+0x34c>)
 800ef20:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ef22:	6013      	str	r3, [r2, #0]
 800ef24:	033b      	lsls	r3, r7, #12
 800ef26:	0b1b      	lsrs	r3, r3, #12
 800ef28:	4323      	orrs	r3, r4
 800ef2a:	d101      	bne.n	800ef30 <_dtoa_r+0x84>
 800ef2c:	f000 fdb5 	bl	800fa9a <_dtoa_r+0xbee>
 800ef30:	4bb2      	ldr	r3, [pc, #712]	; (800f1fc <_dtoa_r+0x350>)
 800ef32:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ef34:	9306      	str	r3, [sp, #24]
 800ef36:	2a00      	cmp	r2, #0
 800ef38:	d002      	beq.n	800ef40 <_dtoa_r+0x94>
 800ef3a:	4bb1      	ldr	r3, [pc, #708]	; (800f200 <_dtoa_r+0x354>)
 800ef3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ef3e:	6013      	str	r3, [r2, #0]
 800ef40:	9806      	ldr	r0, [sp, #24]
 800ef42:	b01d      	add	sp, #116	; 0x74
 800ef44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef46:	2300      	movs	r3, #0
 800ef48:	603b      	str	r3, [r7, #0]
 800ef4a:	e7e2      	b.n	800ef12 <_dtoa_r+0x66>
 800ef4c:	9a08      	ldr	r2, [sp, #32]
 800ef4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef50:	9210      	str	r2, [sp, #64]	; 0x40
 800ef52:	9311      	str	r3, [sp, #68]	; 0x44
 800ef54:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef56:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	f7f1 fa76 	bl	800044c <__aeabi_dcmpeq>
 800ef60:	1e06      	subs	r6, r0, #0
 800ef62:	d009      	beq.n	800ef78 <_dtoa_r+0xcc>
 800ef64:	2301      	movs	r3, #1
 800ef66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ef68:	6013      	str	r3, [r2, #0]
 800ef6a:	4ba6      	ldr	r3, [pc, #664]	; (800f204 <_dtoa_r+0x358>)
 800ef6c:	9306      	str	r3, [sp, #24]
 800ef6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d0e5      	beq.n	800ef40 <_dtoa_r+0x94>
 800ef74:	4ba4      	ldr	r3, [pc, #656]	; (800f208 <_dtoa_r+0x35c>)
 800ef76:	e7e1      	b.n	800ef3c <_dtoa_r+0x90>
 800ef78:	ab1a      	add	r3, sp, #104	; 0x68
 800ef7a:	9301      	str	r3, [sp, #4]
 800ef7c:	ab1b      	add	r3, sp, #108	; 0x6c
 800ef7e:	9300      	str	r3, [sp, #0]
 800ef80:	9804      	ldr	r0, [sp, #16]
 800ef82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef84:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef86:	f001 fd45 	bl	8010a14 <__d2b>
 800ef8a:	007a      	lsls	r2, r7, #1
 800ef8c:	9005      	str	r0, [sp, #20]
 800ef8e:	0d52      	lsrs	r2, r2, #21
 800ef90:	d100      	bne.n	800ef94 <_dtoa_r+0xe8>
 800ef92:	e07b      	b.n	800f08c <_dtoa_r+0x1e0>
 800ef94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ef96:	9617      	str	r6, [sp, #92]	; 0x5c
 800ef98:	0319      	lsls	r1, r3, #12
 800ef9a:	4b9c      	ldr	r3, [pc, #624]	; (800f20c <_dtoa_r+0x360>)
 800ef9c:	0b09      	lsrs	r1, r1, #12
 800ef9e:	430b      	orrs	r3, r1
 800efa0:	499b      	ldr	r1, [pc, #620]	; (800f210 <_dtoa_r+0x364>)
 800efa2:	1857      	adds	r7, r2, r1
 800efa4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800efa6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800efa8:	0019      	movs	r1, r3
 800efaa:	2200      	movs	r2, #0
 800efac:	4b99      	ldr	r3, [pc, #612]	; (800f214 <_dtoa_r+0x368>)
 800efae:	f7f3 fc53 	bl	8002858 <__aeabi_dsub>
 800efb2:	4a99      	ldr	r2, [pc, #612]	; (800f218 <_dtoa_r+0x36c>)
 800efb4:	4b99      	ldr	r3, [pc, #612]	; (800f21c <_dtoa_r+0x370>)
 800efb6:	f7f3 f98d 	bl	80022d4 <__aeabi_dmul>
 800efba:	4a99      	ldr	r2, [pc, #612]	; (800f220 <_dtoa_r+0x374>)
 800efbc:	4b99      	ldr	r3, [pc, #612]	; (800f224 <_dtoa_r+0x378>)
 800efbe:	f7f2 fa2f 	bl	8001420 <__aeabi_dadd>
 800efc2:	0004      	movs	r4, r0
 800efc4:	0038      	movs	r0, r7
 800efc6:	000d      	movs	r5, r1
 800efc8:	f7f4 f81c 	bl	8003004 <__aeabi_i2d>
 800efcc:	4a96      	ldr	r2, [pc, #600]	; (800f228 <_dtoa_r+0x37c>)
 800efce:	4b97      	ldr	r3, [pc, #604]	; (800f22c <_dtoa_r+0x380>)
 800efd0:	f7f3 f980 	bl	80022d4 <__aeabi_dmul>
 800efd4:	0002      	movs	r2, r0
 800efd6:	000b      	movs	r3, r1
 800efd8:	0020      	movs	r0, r4
 800efda:	0029      	movs	r1, r5
 800efdc:	f7f2 fa20 	bl	8001420 <__aeabi_dadd>
 800efe0:	0004      	movs	r4, r0
 800efe2:	000d      	movs	r5, r1
 800efe4:	f7f3 ffd8 	bl	8002f98 <__aeabi_d2iz>
 800efe8:	2200      	movs	r2, #0
 800efea:	9003      	str	r0, [sp, #12]
 800efec:	2300      	movs	r3, #0
 800efee:	0020      	movs	r0, r4
 800eff0:	0029      	movs	r1, r5
 800eff2:	f7f1 fa31 	bl	8000458 <__aeabi_dcmplt>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d00b      	beq.n	800f012 <_dtoa_r+0x166>
 800effa:	9803      	ldr	r0, [sp, #12]
 800effc:	f7f4 f802 	bl	8003004 <__aeabi_i2d>
 800f000:	002b      	movs	r3, r5
 800f002:	0022      	movs	r2, r4
 800f004:	f7f1 fa22 	bl	800044c <__aeabi_dcmpeq>
 800f008:	4243      	negs	r3, r0
 800f00a:	4158      	adcs	r0, r3
 800f00c:	9b03      	ldr	r3, [sp, #12]
 800f00e:	1a1b      	subs	r3, r3, r0
 800f010:	9303      	str	r3, [sp, #12]
 800f012:	2301      	movs	r3, #1
 800f014:	9316      	str	r3, [sp, #88]	; 0x58
 800f016:	9b03      	ldr	r3, [sp, #12]
 800f018:	2b16      	cmp	r3, #22
 800f01a:	d810      	bhi.n	800f03e <_dtoa_r+0x192>
 800f01c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f01e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f020:	9a03      	ldr	r2, [sp, #12]
 800f022:	4b83      	ldr	r3, [pc, #524]	; (800f230 <_dtoa_r+0x384>)
 800f024:	00d2      	lsls	r2, r2, #3
 800f026:	189b      	adds	r3, r3, r2
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	f7f1 fa14 	bl	8000458 <__aeabi_dcmplt>
 800f030:	2800      	cmp	r0, #0
 800f032:	d047      	beq.n	800f0c4 <_dtoa_r+0x218>
 800f034:	9b03      	ldr	r3, [sp, #12]
 800f036:	3b01      	subs	r3, #1
 800f038:	9303      	str	r3, [sp, #12]
 800f03a:	2300      	movs	r3, #0
 800f03c:	9316      	str	r3, [sp, #88]	; 0x58
 800f03e:	2200      	movs	r2, #0
 800f040:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f042:	920a      	str	r2, [sp, #40]	; 0x28
 800f044:	1bdb      	subs	r3, r3, r7
 800f046:	1e5a      	subs	r2, r3, #1
 800f048:	d53e      	bpl.n	800f0c8 <_dtoa_r+0x21c>
 800f04a:	2201      	movs	r2, #1
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	930a      	str	r3, [sp, #40]	; 0x28
 800f050:	2300      	movs	r3, #0
 800f052:	930c      	str	r3, [sp, #48]	; 0x30
 800f054:	9b03      	ldr	r3, [sp, #12]
 800f056:	2b00      	cmp	r3, #0
 800f058:	db38      	blt.n	800f0cc <_dtoa_r+0x220>
 800f05a:	9a03      	ldr	r2, [sp, #12]
 800f05c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f05e:	4694      	mov	ip, r2
 800f060:	4463      	add	r3, ip
 800f062:	930c      	str	r3, [sp, #48]	; 0x30
 800f064:	2300      	movs	r3, #0
 800f066:	9213      	str	r2, [sp, #76]	; 0x4c
 800f068:	930d      	str	r3, [sp, #52]	; 0x34
 800f06a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f06c:	2401      	movs	r4, #1
 800f06e:	2b09      	cmp	r3, #9
 800f070:	d867      	bhi.n	800f142 <_dtoa_r+0x296>
 800f072:	2b05      	cmp	r3, #5
 800f074:	dd02      	ble.n	800f07c <_dtoa_r+0x1d0>
 800f076:	2400      	movs	r4, #0
 800f078:	3b04      	subs	r3, #4
 800f07a:	9322      	str	r3, [sp, #136]	; 0x88
 800f07c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f07e:	1e98      	subs	r0, r3, #2
 800f080:	2803      	cmp	r0, #3
 800f082:	d867      	bhi.n	800f154 <_dtoa_r+0x2a8>
 800f084:	f7f1 f848 	bl	8000118 <__gnu_thumb1_case_uqi>
 800f088:	5b383a2b 	.word	0x5b383a2b
 800f08c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f08e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800f090:	18f6      	adds	r6, r6, r3
 800f092:	4b68      	ldr	r3, [pc, #416]	; (800f234 <_dtoa_r+0x388>)
 800f094:	18f2      	adds	r2, r6, r3
 800f096:	2a20      	cmp	r2, #32
 800f098:	dd0f      	ble.n	800f0ba <_dtoa_r+0x20e>
 800f09a:	2340      	movs	r3, #64	; 0x40
 800f09c:	1a9b      	subs	r3, r3, r2
 800f09e:	409f      	lsls	r7, r3
 800f0a0:	4b65      	ldr	r3, [pc, #404]	; (800f238 <_dtoa_r+0x38c>)
 800f0a2:	0038      	movs	r0, r7
 800f0a4:	18f3      	adds	r3, r6, r3
 800f0a6:	40dc      	lsrs	r4, r3
 800f0a8:	4320      	orrs	r0, r4
 800f0aa:	f7f3 ffdb 	bl	8003064 <__aeabi_ui2d>
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	4b62      	ldr	r3, [pc, #392]	; (800f23c <_dtoa_r+0x390>)
 800f0b2:	1e77      	subs	r7, r6, #1
 800f0b4:	18cb      	adds	r3, r1, r3
 800f0b6:	9217      	str	r2, [sp, #92]	; 0x5c
 800f0b8:	e776      	b.n	800efa8 <_dtoa_r+0xfc>
 800f0ba:	2320      	movs	r3, #32
 800f0bc:	0020      	movs	r0, r4
 800f0be:	1a9b      	subs	r3, r3, r2
 800f0c0:	4098      	lsls	r0, r3
 800f0c2:	e7f2      	b.n	800f0aa <_dtoa_r+0x1fe>
 800f0c4:	9016      	str	r0, [sp, #88]	; 0x58
 800f0c6:	e7ba      	b.n	800f03e <_dtoa_r+0x192>
 800f0c8:	920c      	str	r2, [sp, #48]	; 0x30
 800f0ca:	e7c3      	b.n	800f054 <_dtoa_r+0x1a8>
 800f0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0ce:	9a03      	ldr	r2, [sp, #12]
 800f0d0:	1a9b      	subs	r3, r3, r2
 800f0d2:	930a      	str	r3, [sp, #40]	; 0x28
 800f0d4:	4253      	negs	r3, r2
 800f0d6:	930d      	str	r3, [sp, #52]	; 0x34
 800f0d8:	2300      	movs	r3, #0
 800f0da:	9313      	str	r3, [sp, #76]	; 0x4c
 800f0dc:	e7c5      	b.n	800f06a <_dtoa_r+0x1be>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f0e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0e6:	9307      	str	r3, [sp, #28]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	dc13      	bgt.n	800f114 <_dtoa_r+0x268>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	001a      	movs	r2, r3
 800f0f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0f2:	9307      	str	r3, [sp, #28]
 800f0f4:	9223      	str	r2, [sp, #140]	; 0x8c
 800f0f6:	e00d      	b.n	800f114 <_dtoa_r+0x268>
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e7f1      	b.n	800f0e0 <_dtoa_r+0x234>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800f100:	930f      	str	r3, [sp, #60]	; 0x3c
 800f102:	4694      	mov	ip, r2
 800f104:	9b03      	ldr	r3, [sp, #12]
 800f106:	4463      	add	r3, ip
 800f108:	930b      	str	r3, [sp, #44]	; 0x2c
 800f10a:	3301      	adds	r3, #1
 800f10c:	9307      	str	r3, [sp, #28]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	dc00      	bgt.n	800f114 <_dtoa_r+0x268>
 800f112:	2301      	movs	r3, #1
 800f114:	9a04      	ldr	r2, [sp, #16]
 800f116:	2100      	movs	r1, #0
 800f118:	69d0      	ldr	r0, [r2, #28]
 800f11a:	2204      	movs	r2, #4
 800f11c:	0015      	movs	r5, r2
 800f11e:	3514      	adds	r5, #20
 800f120:	429d      	cmp	r5, r3
 800f122:	d91b      	bls.n	800f15c <_dtoa_r+0x2b0>
 800f124:	6041      	str	r1, [r0, #4]
 800f126:	9804      	ldr	r0, [sp, #16]
 800f128:	f001 f886 	bl	8010238 <_Balloc>
 800f12c:	9006      	str	r0, [sp, #24]
 800f12e:	2800      	cmp	r0, #0
 800f130:	d117      	bne.n	800f162 <_dtoa_r+0x2b6>
 800f132:	21b0      	movs	r1, #176	; 0xb0
 800f134:	4b42      	ldr	r3, [pc, #264]	; (800f240 <_dtoa_r+0x394>)
 800f136:	482e      	ldr	r0, [pc, #184]	; (800f1f0 <_dtoa_r+0x344>)
 800f138:	9a06      	ldr	r2, [sp, #24]
 800f13a:	31ff      	adds	r1, #255	; 0xff
 800f13c:	e6cb      	b.n	800eed6 <_dtoa_r+0x2a>
 800f13e:	2301      	movs	r3, #1
 800f140:	e7dd      	b.n	800f0fe <_dtoa_r+0x252>
 800f142:	2300      	movs	r3, #0
 800f144:	940f      	str	r4, [sp, #60]	; 0x3c
 800f146:	9322      	str	r3, [sp, #136]	; 0x88
 800f148:	3b01      	subs	r3, #1
 800f14a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f14c:	9307      	str	r3, [sp, #28]
 800f14e:	2200      	movs	r2, #0
 800f150:	3313      	adds	r3, #19
 800f152:	e7cf      	b.n	800f0f4 <_dtoa_r+0x248>
 800f154:	2301      	movs	r3, #1
 800f156:	930f      	str	r3, [sp, #60]	; 0x3c
 800f158:	3b02      	subs	r3, #2
 800f15a:	e7f6      	b.n	800f14a <_dtoa_r+0x29e>
 800f15c:	3101      	adds	r1, #1
 800f15e:	0052      	lsls	r2, r2, #1
 800f160:	e7dc      	b.n	800f11c <_dtoa_r+0x270>
 800f162:	9b04      	ldr	r3, [sp, #16]
 800f164:	9a06      	ldr	r2, [sp, #24]
 800f166:	69db      	ldr	r3, [r3, #28]
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	9b07      	ldr	r3, [sp, #28]
 800f16c:	2b0e      	cmp	r3, #14
 800f16e:	d900      	bls.n	800f172 <_dtoa_r+0x2c6>
 800f170:	e0e5      	b.n	800f33e <_dtoa_r+0x492>
 800f172:	2c00      	cmp	r4, #0
 800f174:	d100      	bne.n	800f178 <_dtoa_r+0x2cc>
 800f176:	e0e2      	b.n	800f33e <_dtoa_r+0x492>
 800f178:	9b03      	ldr	r3, [sp, #12]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	dd64      	ble.n	800f248 <_dtoa_r+0x39c>
 800f17e:	210f      	movs	r1, #15
 800f180:	9a03      	ldr	r2, [sp, #12]
 800f182:	4b2b      	ldr	r3, [pc, #172]	; (800f230 <_dtoa_r+0x384>)
 800f184:	400a      	ands	r2, r1
 800f186:	00d2      	lsls	r2, r2, #3
 800f188:	189b      	adds	r3, r3, r2
 800f18a:	681e      	ldr	r6, [r3, #0]
 800f18c:	685f      	ldr	r7, [r3, #4]
 800f18e:	9b03      	ldr	r3, [sp, #12]
 800f190:	2402      	movs	r4, #2
 800f192:	111d      	asrs	r5, r3, #4
 800f194:	05db      	lsls	r3, r3, #23
 800f196:	d50a      	bpl.n	800f1ae <_dtoa_r+0x302>
 800f198:	4b2a      	ldr	r3, [pc, #168]	; (800f244 <_dtoa_r+0x398>)
 800f19a:	400d      	ands	r5, r1
 800f19c:	6a1a      	ldr	r2, [r3, #32]
 800f19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f1a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f1a4:	f7f2 fc9c 	bl	8001ae0 <__aeabi_ddiv>
 800f1a8:	9008      	str	r0, [sp, #32]
 800f1aa:	9109      	str	r1, [sp, #36]	; 0x24
 800f1ac:	3401      	adds	r4, #1
 800f1ae:	4b25      	ldr	r3, [pc, #148]	; (800f244 <_dtoa_r+0x398>)
 800f1b0:	930e      	str	r3, [sp, #56]	; 0x38
 800f1b2:	2d00      	cmp	r5, #0
 800f1b4:	d108      	bne.n	800f1c8 <_dtoa_r+0x31c>
 800f1b6:	9808      	ldr	r0, [sp, #32]
 800f1b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f1ba:	0032      	movs	r2, r6
 800f1bc:	003b      	movs	r3, r7
 800f1be:	f7f2 fc8f 	bl	8001ae0 <__aeabi_ddiv>
 800f1c2:	9008      	str	r0, [sp, #32]
 800f1c4:	9109      	str	r1, [sp, #36]	; 0x24
 800f1c6:	e05a      	b.n	800f27e <_dtoa_r+0x3d2>
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	421d      	tst	r5, r3
 800f1cc:	d009      	beq.n	800f1e2 <_dtoa_r+0x336>
 800f1ce:	18e4      	adds	r4, r4, r3
 800f1d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1d2:	0030      	movs	r0, r6
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	0039      	movs	r1, r7
 800f1da:	f7f3 f87b 	bl	80022d4 <__aeabi_dmul>
 800f1de:	0006      	movs	r6, r0
 800f1e0:	000f      	movs	r7, r1
 800f1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1e4:	106d      	asrs	r5, r5, #1
 800f1e6:	3308      	adds	r3, #8
 800f1e8:	e7e2      	b.n	800f1b0 <_dtoa_r+0x304>
 800f1ea:	46c0      	nop			; (mov r8, r8)
 800f1ec:	0801388a 	.word	0x0801388a
 800f1f0:	0801394c 	.word	0x0801394c
 800f1f4:	7ff00000 	.word	0x7ff00000
 800f1f8:	0000270f 	.word	0x0000270f
 800f1fc:	08013948 	.word	0x08013948
 800f200:	0801394b 	.word	0x0801394b
 800f204:	08013861 	.word	0x08013861
 800f208:	08013862 	.word	0x08013862
 800f20c:	3ff00000 	.word	0x3ff00000
 800f210:	fffffc01 	.word	0xfffffc01
 800f214:	3ff80000 	.word	0x3ff80000
 800f218:	636f4361 	.word	0x636f4361
 800f21c:	3fd287a7 	.word	0x3fd287a7
 800f220:	8b60c8b3 	.word	0x8b60c8b3
 800f224:	3fc68a28 	.word	0x3fc68a28
 800f228:	509f79fb 	.word	0x509f79fb
 800f22c:	3fd34413 	.word	0x3fd34413
 800f230:	08013a98 	.word	0x08013a98
 800f234:	00000432 	.word	0x00000432
 800f238:	00000412 	.word	0x00000412
 800f23c:	fe100000 	.word	0xfe100000
 800f240:	080139a4 	.word	0x080139a4
 800f244:	08013a70 	.word	0x08013a70
 800f248:	9b03      	ldr	r3, [sp, #12]
 800f24a:	2402      	movs	r4, #2
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d016      	beq.n	800f27e <_dtoa_r+0x3d2>
 800f250:	9810      	ldr	r0, [sp, #64]	; 0x40
 800f252:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f254:	220f      	movs	r2, #15
 800f256:	425d      	negs	r5, r3
 800f258:	402a      	ands	r2, r5
 800f25a:	4bdd      	ldr	r3, [pc, #884]	; (800f5d0 <_dtoa_r+0x724>)
 800f25c:	00d2      	lsls	r2, r2, #3
 800f25e:	189b      	adds	r3, r3, r2
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	f7f3 f836 	bl	80022d4 <__aeabi_dmul>
 800f268:	2701      	movs	r7, #1
 800f26a:	2300      	movs	r3, #0
 800f26c:	9008      	str	r0, [sp, #32]
 800f26e:	9109      	str	r1, [sp, #36]	; 0x24
 800f270:	4ed8      	ldr	r6, [pc, #864]	; (800f5d4 <_dtoa_r+0x728>)
 800f272:	112d      	asrs	r5, r5, #4
 800f274:	2d00      	cmp	r5, #0
 800f276:	d000      	beq.n	800f27a <_dtoa_r+0x3ce>
 800f278:	e091      	b.n	800f39e <_dtoa_r+0x4f2>
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1a1      	bne.n	800f1c2 <_dtoa_r+0x316>
 800f27e:	9e08      	ldr	r6, [sp, #32]
 800f280:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f282:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f284:	2b00      	cmp	r3, #0
 800f286:	d100      	bne.n	800f28a <_dtoa_r+0x3de>
 800f288:	e094      	b.n	800f3b4 <_dtoa_r+0x508>
 800f28a:	2200      	movs	r2, #0
 800f28c:	0030      	movs	r0, r6
 800f28e:	0039      	movs	r1, r7
 800f290:	4bd1      	ldr	r3, [pc, #836]	; (800f5d8 <_dtoa_r+0x72c>)
 800f292:	f7f1 f8e1 	bl	8000458 <__aeabi_dcmplt>
 800f296:	2800      	cmp	r0, #0
 800f298:	d100      	bne.n	800f29c <_dtoa_r+0x3f0>
 800f29a:	e08b      	b.n	800f3b4 <_dtoa_r+0x508>
 800f29c:	9b07      	ldr	r3, [sp, #28]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d100      	bne.n	800f2a4 <_dtoa_r+0x3f8>
 800f2a2:	e087      	b.n	800f3b4 <_dtoa_r+0x508>
 800f2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	dd45      	ble.n	800f336 <_dtoa_r+0x48a>
 800f2aa:	9b03      	ldr	r3, [sp, #12]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	930e      	str	r3, [sp, #56]	; 0x38
 800f2b2:	0030      	movs	r0, r6
 800f2b4:	4bc9      	ldr	r3, [pc, #804]	; (800f5dc <_dtoa_r+0x730>)
 800f2b6:	0039      	movs	r1, r7
 800f2b8:	f7f3 f80c 	bl	80022d4 <__aeabi_dmul>
 800f2bc:	9008      	str	r0, [sp, #32]
 800f2be:	9109      	str	r1, [sp, #36]	; 0x24
 800f2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2c2:	3401      	adds	r4, #1
 800f2c4:	0020      	movs	r0, r4
 800f2c6:	9e08      	ldr	r6, [sp, #32]
 800f2c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f2ca:	9312      	str	r3, [sp, #72]	; 0x48
 800f2cc:	f7f3 fe9a 	bl	8003004 <__aeabi_i2d>
 800f2d0:	0032      	movs	r2, r6
 800f2d2:	003b      	movs	r3, r7
 800f2d4:	f7f2 fffe 	bl	80022d4 <__aeabi_dmul>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	4bc1      	ldr	r3, [pc, #772]	; (800f5e0 <_dtoa_r+0x734>)
 800f2dc:	f7f2 f8a0 	bl	8001420 <__aeabi_dadd>
 800f2e0:	4ac0      	ldr	r2, [pc, #768]	; (800f5e4 <_dtoa_r+0x738>)
 800f2e2:	9014      	str	r0, [sp, #80]	; 0x50
 800f2e4:	9115      	str	r1, [sp, #84]	; 0x54
 800f2e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800f2ea:	4694      	mov	ip, r2
 800f2ec:	9308      	str	r3, [sp, #32]
 800f2ee:	9409      	str	r4, [sp, #36]	; 0x24
 800f2f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f2f2:	4463      	add	r3, ip
 800f2f4:	9318      	str	r3, [sp, #96]	; 0x60
 800f2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d15e      	bne.n	800f3bc <_dtoa_r+0x510>
 800f2fe:	2200      	movs	r2, #0
 800f300:	4bb9      	ldr	r3, [pc, #740]	; (800f5e8 <_dtoa_r+0x73c>)
 800f302:	0030      	movs	r0, r6
 800f304:	0039      	movs	r1, r7
 800f306:	f7f3 faa7 	bl	8002858 <__aeabi_dsub>
 800f30a:	9a08      	ldr	r2, [sp, #32]
 800f30c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f30e:	0004      	movs	r4, r0
 800f310:	000d      	movs	r5, r1
 800f312:	f7f1 f8b5 	bl	8000480 <__aeabi_dcmpgt>
 800f316:	2800      	cmp	r0, #0
 800f318:	d000      	beq.n	800f31c <_dtoa_r+0x470>
 800f31a:	e2b3      	b.n	800f884 <_dtoa_r+0x9d8>
 800f31c:	48b3      	ldr	r0, [pc, #716]	; (800f5ec <_dtoa_r+0x740>)
 800f31e:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f320:	4684      	mov	ip, r0
 800f322:	4461      	add	r1, ip
 800f324:	000b      	movs	r3, r1
 800f326:	0020      	movs	r0, r4
 800f328:	0029      	movs	r1, r5
 800f32a:	9a08      	ldr	r2, [sp, #32]
 800f32c:	f7f1 f894 	bl	8000458 <__aeabi_dcmplt>
 800f330:	2800      	cmp	r0, #0
 800f332:	d000      	beq.n	800f336 <_dtoa_r+0x48a>
 800f334:	e2a3      	b.n	800f87e <_dtoa_r+0x9d2>
 800f336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f338:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800f33a:	9308      	str	r3, [sp, #32]
 800f33c:	9409      	str	r4, [sp, #36]	; 0x24
 800f33e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f340:	2b00      	cmp	r3, #0
 800f342:	da00      	bge.n	800f346 <_dtoa_r+0x49a>
 800f344:	e179      	b.n	800f63a <_dtoa_r+0x78e>
 800f346:	9a03      	ldr	r2, [sp, #12]
 800f348:	2a0e      	cmp	r2, #14
 800f34a:	dd00      	ble.n	800f34e <_dtoa_r+0x4a2>
 800f34c:	e175      	b.n	800f63a <_dtoa_r+0x78e>
 800f34e:	4ba0      	ldr	r3, [pc, #640]	; (800f5d0 <_dtoa_r+0x724>)
 800f350:	00d2      	lsls	r2, r2, #3
 800f352:	189b      	adds	r3, r3, r2
 800f354:	681e      	ldr	r6, [r3, #0]
 800f356:	685f      	ldr	r7, [r3, #4]
 800f358:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	db00      	blt.n	800f360 <_dtoa_r+0x4b4>
 800f35e:	e0e5      	b.n	800f52c <_dtoa_r+0x680>
 800f360:	9b07      	ldr	r3, [sp, #28]
 800f362:	2b00      	cmp	r3, #0
 800f364:	dd00      	ble.n	800f368 <_dtoa_r+0x4bc>
 800f366:	e0e1      	b.n	800f52c <_dtoa_r+0x680>
 800f368:	d000      	beq.n	800f36c <_dtoa_r+0x4c0>
 800f36a:	e288      	b.n	800f87e <_dtoa_r+0x9d2>
 800f36c:	2200      	movs	r2, #0
 800f36e:	0030      	movs	r0, r6
 800f370:	0039      	movs	r1, r7
 800f372:	4b9d      	ldr	r3, [pc, #628]	; (800f5e8 <_dtoa_r+0x73c>)
 800f374:	f7f2 ffae 	bl	80022d4 <__aeabi_dmul>
 800f378:	9a08      	ldr	r2, [sp, #32]
 800f37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f37c:	f7f1 f88a 	bl	8000494 <__aeabi_dcmpge>
 800f380:	9e07      	ldr	r6, [sp, #28]
 800f382:	0037      	movs	r7, r6
 800f384:	2800      	cmp	r0, #0
 800f386:	d000      	beq.n	800f38a <_dtoa_r+0x4de>
 800f388:	e25f      	b.n	800f84a <_dtoa_r+0x99e>
 800f38a:	9b06      	ldr	r3, [sp, #24]
 800f38c:	9a06      	ldr	r2, [sp, #24]
 800f38e:	3301      	adds	r3, #1
 800f390:	9308      	str	r3, [sp, #32]
 800f392:	2331      	movs	r3, #49	; 0x31
 800f394:	7013      	strb	r3, [r2, #0]
 800f396:	9b03      	ldr	r3, [sp, #12]
 800f398:	3301      	adds	r3, #1
 800f39a:	9303      	str	r3, [sp, #12]
 800f39c:	e25a      	b.n	800f854 <_dtoa_r+0x9a8>
 800f39e:	423d      	tst	r5, r7
 800f3a0:	d005      	beq.n	800f3ae <_dtoa_r+0x502>
 800f3a2:	6832      	ldr	r2, [r6, #0]
 800f3a4:	6873      	ldr	r3, [r6, #4]
 800f3a6:	f7f2 ff95 	bl	80022d4 <__aeabi_dmul>
 800f3aa:	003b      	movs	r3, r7
 800f3ac:	3401      	adds	r4, #1
 800f3ae:	106d      	asrs	r5, r5, #1
 800f3b0:	3608      	adds	r6, #8
 800f3b2:	e75f      	b.n	800f274 <_dtoa_r+0x3c8>
 800f3b4:	9b03      	ldr	r3, [sp, #12]
 800f3b6:	930e      	str	r3, [sp, #56]	; 0x38
 800f3b8:	9b07      	ldr	r3, [sp, #28]
 800f3ba:	e783      	b.n	800f2c4 <_dtoa_r+0x418>
 800f3bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3be:	4b84      	ldr	r3, [pc, #528]	; (800f5d0 <_dtoa_r+0x724>)
 800f3c0:	3a01      	subs	r2, #1
 800f3c2:	00d2      	lsls	r2, r2, #3
 800f3c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f3c6:	189b      	adds	r3, r3, r2
 800f3c8:	9c08      	ldr	r4, [sp, #32]
 800f3ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	2900      	cmp	r1, #0
 800f3d2:	d051      	beq.n	800f478 <_dtoa_r+0x5cc>
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	4986      	ldr	r1, [pc, #536]	; (800f5f0 <_dtoa_r+0x744>)
 800f3d8:	f7f2 fb82 	bl	8001ae0 <__aeabi_ddiv>
 800f3dc:	0022      	movs	r2, r4
 800f3de:	002b      	movs	r3, r5
 800f3e0:	f7f3 fa3a 	bl	8002858 <__aeabi_dsub>
 800f3e4:	9a06      	ldr	r2, [sp, #24]
 800f3e6:	0004      	movs	r4, r0
 800f3e8:	4694      	mov	ip, r2
 800f3ea:	000d      	movs	r5, r1
 800f3ec:	9b06      	ldr	r3, [sp, #24]
 800f3ee:	9314      	str	r3, [sp, #80]	; 0x50
 800f3f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3f2:	4463      	add	r3, ip
 800f3f4:	9318      	str	r3, [sp, #96]	; 0x60
 800f3f6:	0039      	movs	r1, r7
 800f3f8:	0030      	movs	r0, r6
 800f3fa:	f7f3 fdcd 	bl	8002f98 <__aeabi_d2iz>
 800f3fe:	9012      	str	r0, [sp, #72]	; 0x48
 800f400:	f7f3 fe00 	bl	8003004 <__aeabi_i2d>
 800f404:	0002      	movs	r2, r0
 800f406:	000b      	movs	r3, r1
 800f408:	0030      	movs	r0, r6
 800f40a:	0039      	movs	r1, r7
 800f40c:	f7f3 fa24 	bl	8002858 <__aeabi_dsub>
 800f410:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f412:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f414:	3301      	adds	r3, #1
 800f416:	9308      	str	r3, [sp, #32]
 800f418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f41a:	0006      	movs	r6, r0
 800f41c:	3330      	adds	r3, #48	; 0x30
 800f41e:	7013      	strb	r3, [r2, #0]
 800f420:	0022      	movs	r2, r4
 800f422:	002b      	movs	r3, r5
 800f424:	000f      	movs	r7, r1
 800f426:	f7f1 f817 	bl	8000458 <__aeabi_dcmplt>
 800f42a:	2800      	cmp	r0, #0
 800f42c:	d174      	bne.n	800f518 <_dtoa_r+0x66c>
 800f42e:	0032      	movs	r2, r6
 800f430:	003b      	movs	r3, r7
 800f432:	2000      	movs	r0, #0
 800f434:	4968      	ldr	r1, [pc, #416]	; (800f5d8 <_dtoa_r+0x72c>)
 800f436:	f7f3 fa0f 	bl	8002858 <__aeabi_dsub>
 800f43a:	0022      	movs	r2, r4
 800f43c:	002b      	movs	r3, r5
 800f43e:	f7f1 f80b 	bl	8000458 <__aeabi_dcmplt>
 800f442:	2800      	cmp	r0, #0
 800f444:	d000      	beq.n	800f448 <_dtoa_r+0x59c>
 800f446:	e0d7      	b.n	800f5f8 <_dtoa_r+0x74c>
 800f448:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f44a:	9a08      	ldr	r2, [sp, #32]
 800f44c:	4293      	cmp	r3, r2
 800f44e:	d100      	bne.n	800f452 <_dtoa_r+0x5a6>
 800f450:	e771      	b.n	800f336 <_dtoa_r+0x48a>
 800f452:	2200      	movs	r2, #0
 800f454:	0020      	movs	r0, r4
 800f456:	0029      	movs	r1, r5
 800f458:	4b60      	ldr	r3, [pc, #384]	; (800f5dc <_dtoa_r+0x730>)
 800f45a:	f7f2 ff3b 	bl	80022d4 <__aeabi_dmul>
 800f45e:	4b5f      	ldr	r3, [pc, #380]	; (800f5dc <_dtoa_r+0x730>)
 800f460:	0004      	movs	r4, r0
 800f462:	000d      	movs	r5, r1
 800f464:	0030      	movs	r0, r6
 800f466:	0039      	movs	r1, r7
 800f468:	2200      	movs	r2, #0
 800f46a:	f7f2 ff33 	bl	80022d4 <__aeabi_dmul>
 800f46e:	9b08      	ldr	r3, [sp, #32]
 800f470:	0006      	movs	r6, r0
 800f472:	000f      	movs	r7, r1
 800f474:	9314      	str	r3, [sp, #80]	; 0x50
 800f476:	e7be      	b.n	800f3f6 <_dtoa_r+0x54a>
 800f478:	0020      	movs	r0, r4
 800f47a:	0029      	movs	r1, r5
 800f47c:	f7f2 ff2a 	bl	80022d4 <__aeabi_dmul>
 800f480:	9a06      	ldr	r2, [sp, #24]
 800f482:	9b06      	ldr	r3, [sp, #24]
 800f484:	4694      	mov	ip, r2
 800f486:	9308      	str	r3, [sp, #32]
 800f488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f48a:	9014      	str	r0, [sp, #80]	; 0x50
 800f48c:	9115      	str	r1, [sp, #84]	; 0x54
 800f48e:	4463      	add	r3, ip
 800f490:	9319      	str	r3, [sp, #100]	; 0x64
 800f492:	0030      	movs	r0, r6
 800f494:	0039      	movs	r1, r7
 800f496:	f7f3 fd7f 	bl	8002f98 <__aeabi_d2iz>
 800f49a:	9018      	str	r0, [sp, #96]	; 0x60
 800f49c:	f7f3 fdb2 	bl	8003004 <__aeabi_i2d>
 800f4a0:	0002      	movs	r2, r0
 800f4a2:	000b      	movs	r3, r1
 800f4a4:	0030      	movs	r0, r6
 800f4a6:	0039      	movs	r1, r7
 800f4a8:	f7f3 f9d6 	bl	8002858 <__aeabi_dsub>
 800f4ac:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800f4ae:	9b08      	ldr	r3, [sp, #32]
 800f4b0:	3630      	adds	r6, #48	; 0x30
 800f4b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f4b4:	701e      	strb	r6, [r3, #0]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	0004      	movs	r4, r0
 800f4ba:	000d      	movs	r5, r1
 800f4bc:	9308      	str	r3, [sp, #32]
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d12d      	bne.n	800f51e <_dtoa_r+0x672>
 800f4c2:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f4c4:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f4c6:	9a06      	ldr	r2, [sp, #24]
 800f4c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f4ca:	4694      	mov	ip, r2
 800f4cc:	4463      	add	r3, ip
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	9308      	str	r3, [sp, #32]
 800f4d2:	4b47      	ldr	r3, [pc, #284]	; (800f5f0 <_dtoa_r+0x744>)
 800f4d4:	f7f1 ffa4 	bl	8001420 <__aeabi_dadd>
 800f4d8:	0002      	movs	r2, r0
 800f4da:	000b      	movs	r3, r1
 800f4dc:	0020      	movs	r0, r4
 800f4de:	0029      	movs	r1, r5
 800f4e0:	f7f0 ffce 	bl	8000480 <__aeabi_dcmpgt>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d000      	beq.n	800f4ea <_dtoa_r+0x63e>
 800f4e8:	e086      	b.n	800f5f8 <_dtoa_r+0x74c>
 800f4ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f4ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	493f      	ldr	r1, [pc, #252]	; (800f5f0 <_dtoa_r+0x744>)
 800f4f2:	f7f3 f9b1 	bl	8002858 <__aeabi_dsub>
 800f4f6:	0002      	movs	r2, r0
 800f4f8:	000b      	movs	r3, r1
 800f4fa:	0020      	movs	r0, r4
 800f4fc:	0029      	movs	r1, r5
 800f4fe:	f7f0 ffab 	bl	8000458 <__aeabi_dcmplt>
 800f502:	2800      	cmp	r0, #0
 800f504:	d100      	bne.n	800f508 <_dtoa_r+0x65c>
 800f506:	e716      	b.n	800f336 <_dtoa_r+0x48a>
 800f508:	9b08      	ldr	r3, [sp, #32]
 800f50a:	001a      	movs	r2, r3
 800f50c:	3a01      	subs	r2, #1
 800f50e:	9208      	str	r2, [sp, #32]
 800f510:	7812      	ldrb	r2, [r2, #0]
 800f512:	2a30      	cmp	r2, #48	; 0x30
 800f514:	d0f8      	beq.n	800f508 <_dtoa_r+0x65c>
 800f516:	9308      	str	r3, [sp, #32]
 800f518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f51a:	9303      	str	r3, [sp, #12]
 800f51c:	e046      	b.n	800f5ac <_dtoa_r+0x700>
 800f51e:	2200      	movs	r2, #0
 800f520:	4b2e      	ldr	r3, [pc, #184]	; (800f5dc <_dtoa_r+0x730>)
 800f522:	f7f2 fed7 	bl	80022d4 <__aeabi_dmul>
 800f526:	0006      	movs	r6, r0
 800f528:	000f      	movs	r7, r1
 800f52a:	e7b2      	b.n	800f492 <_dtoa_r+0x5e6>
 800f52c:	9b06      	ldr	r3, [sp, #24]
 800f52e:	9a06      	ldr	r2, [sp, #24]
 800f530:	930a      	str	r3, [sp, #40]	; 0x28
 800f532:	9b07      	ldr	r3, [sp, #28]
 800f534:	9c08      	ldr	r4, [sp, #32]
 800f536:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800f538:	3b01      	subs	r3, #1
 800f53a:	189b      	adds	r3, r3, r2
 800f53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f53e:	0032      	movs	r2, r6
 800f540:	003b      	movs	r3, r7
 800f542:	0020      	movs	r0, r4
 800f544:	0029      	movs	r1, r5
 800f546:	f7f2 facb 	bl	8001ae0 <__aeabi_ddiv>
 800f54a:	f7f3 fd25 	bl	8002f98 <__aeabi_d2iz>
 800f54e:	9007      	str	r0, [sp, #28]
 800f550:	f7f3 fd58 	bl	8003004 <__aeabi_i2d>
 800f554:	0032      	movs	r2, r6
 800f556:	003b      	movs	r3, r7
 800f558:	f7f2 febc 	bl	80022d4 <__aeabi_dmul>
 800f55c:	0002      	movs	r2, r0
 800f55e:	000b      	movs	r3, r1
 800f560:	0020      	movs	r0, r4
 800f562:	0029      	movs	r1, r5
 800f564:	f7f3 f978 	bl	8002858 <__aeabi_dsub>
 800f568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f56a:	001a      	movs	r2, r3
 800f56c:	3201      	adds	r2, #1
 800f56e:	920a      	str	r2, [sp, #40]	; 0x28
 800f570:	9208      	str	r2, [sp, #32]
 800f572:	9a07      	ldr	r2, [sp, #28]
 800f574:	3230      	adds	r2, #48	; 0x30
 800f576:	701a      	strb	r2, [r3, #0]
 800f578:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d14f      	bne.n	800f61e <_dtoa_r+0x772>
 800f57e:	0002      	movs	r2, r0
 800f580:	000b      	movs	r3, r1
 800f582:	f7f1 ff4d 	bl	8001420 <__aeabi_dadd>
 800f586:	0032      	movs	r2, r6
 800f588:	003b      	movs	r3, r7
 800f58a:	0004      	movs	r4, r0
 800f58c:	000d      	movs	r5, r1
 800f58e:	f7f0 ff77 	bl	8000480 <__aeabi_dcmpgt>
 800f592:	2800      	cmp	r0, #0
 800f594:	d12e      	bne.n	800f5f4 <_dtoa_r+0x748>
 800f596:	0032      	movs	r2, r6
 800f598:	003b      	movs	r3, r7
 800f59a:	0020      	movs	r0, r4
 800f59c:	0029      	movs	r1, r5
 800f59e:	f7f0 ff55 	bl	800044c <__aeabi_dcmpeq>
 800f5a2:	2800      	cmp	r0, #0
 800f5a4:	d002      	beq.n	800f5ac <_dtoa_r+0x700>
 800f5a6:	9b07      	ldr	r3, [sp, #28]
 800f5a8:	07de      	lsls	r6, r3, #31
 800f5aa:	d423      	bmi.n	800f5f4 <_dtoa_r+0x748>
 800f5ac:	9905      	ldr	r1, [sp, #20]
 800f5ae:	9804      	ldr	r0, [sp, #16]
 800f5b0:	f000 fe86 	bl	80102c0 <_Bfree>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	9a08      	ldr	r2, [sp, #32]
 800f5b8:	7013      	strb	r3, [r2, #0]
 800f5ba:	9b03      	ldr	r3, [sp, #12]
 800f5bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800f5be:	3301      	adds	r3, #1
 800f5c0:	6013      	str	r3, [r2, #0]
 800f5c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d100      	bne.n	800f5ca <_dtoa_r+0x71e>
 800f5c8:	e4ba      	b.n	800ef40 <_dtoa_r+0x94>
 800f5ca:	9a08      	ldr	r2, [sp, #32]
 800f5cc:	601a      	str	r2, [r3, #0]
 800f5ce:	e4b7      	b.n	800ef40 <_dtoa_r+0x94>
 800f5d0:	08013a98 	.word	0x08013a98
 800f5d4:	08013a70 	.word	0x08013a70
 800f5d8:	3ff00000 	.word	0x3ff00000
 800f5dc:	40240000 	.word	0x40240000
 800f5e0:	401c0000 	.word	0x401c0000
 800f5e4:	fcc00000 	.word	0xfcc00000
 800f5e8:	40140000 	.word	0x40140000
 800f5ec:	7cc00000 	.word	0x7cc00000
 800f5f0:	3fe00000 	.word	0x3fe00000
 800f5f4:	9b03      	ldr	r3, [sp, #12]
 800f5f6:	930e      	str	r3, [sp, #56]	; 0x38
 800f5f8:	9b08      	ldr	r3, [sp, #32]
 800f5fa:	9308      	str	r3, [sp, #32]
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	781a      	ldrb	r2, [r3, #0]
 800f600:	2a39      	cmp	r2, #57	; 0x39
 800f602:	d108      	bne.n	800f616 <_dtoa_r+0x76a>
 800f604:	9a06      	ldr	r2, [sp, #24]
 800f606:	429a      	cmp	r2, r3
 800f608:	d1f7      	bne.n	800f5fa <_dtoa_r+0x74e>
 800f60a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f60c:	9906      	ldr	r1, [sp, #24]
 800f60e:	3201      	adds	r2, #1
 800f610:	920e      	str	r2, [sp, #56]	; 0x38
 800f612:	2230      	movs	r2, #48	; 0x30
 800f614:	700a      	strb	r2, [r1, #0]
 800f616:	781a      	ldrb	r2, [r3, #0]
 800f618:	3201      	adds	r2, #1
 800f61a:	701a      	strb	r2, [r3, #0]
 800f61c:	e77c      	b.n	800f518 <_dtoa_r+0x66c>
 800f61e:	2200      	movs	r2, #0
 800f620:	4ba9      	ldr	r3, [pc, #676]	; (800f8c8 <_dtoa_r+0xa1c>)
 800f622:	f7f2 fe57 	bl	80022d4 <__aeabi_dmul>
 800f626:	2200      	movs	r2, #0
 800f628:	2300      	movs	r3, #0
 800f62a:	0004      	movs	r4, r0
 800f62c:	000d      	movs	r5, r1
 800f62e:	f7f0 ff0d 	bl	800044c <__aeabi_dcmpeq>
 800f632:	2800      	cmp	r0, #0
 800f634:	d100      	bne.n	800f638 <_dtoa_r+0x78c>
 800f636:	e782      	b.n	800f53e <_dtoa_r+0x692>
 800f638:	e7b8      	b.n	800f5ac <_dtoa_r+0x700>
 800f63a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800f63c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f63e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f640:	2f00      	cmp	r7, #0
 800f642:	d012      	beq.n	800f66a <_dtoa_r+0x7be>
 800f644:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f646:	2a01      	cmp	r2, #1
 800f648:	dc6e      	bgt.n	800f728 <_dtoa_r+0x87c>
 800f64a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f64c:	2a00      	cmp	r2, #0
 800f64e:	d065      	beq.n	800f71c <_dtoa_r+0x870>
 800f650:	4a9e      	ldr	r2, [pc, #632]	; (800f8cc <_dtoa_r+0xa20>)
 800f652:	189b      	adds	r3, r3, r2
 800f654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f656:	2101      	movs	r1, #1
 800f658:	18d2      	adds	r2, r2, r3
 800f65a:	920a      	str	r2, [sp, #40]	; 0x28
 800f65c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f65e:	9804      	ldr	r0, [sp, #16]
 800f660:	18d3      	adds	r3, r2, r3
 800f662:	930c      	str	r3, [sp, #48]	; 0x30
 800f664:	f000 ff28 	bl	80104b8 <__i2b>
 800f668:	0007      	movs	r7, r0
 800f66a:	2c00      	cmp	r4, #0
 800f66c:	d00e      	beq.n	800f68c <_dtoa_r+0x7e0>
 800f66e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f670:	2b00      	cmp	r3, #0
 800f672:	dd0b      	ble.n	800f68c <_dtoa_r+0x7e0>
 800f674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f676:	0023      	movs	r3, r4
 800f678:	4294      	cmp	r4, r2
 800f67a:	dd00      	ble.n	800f67e <_dtoa_r+0x7d2>
 800f67c:	0013      	movs	r3, r2
 800f67e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f680:	1ae4      	subs	r4, r4, r3
 800f682:	1ad2      	subs	r2, r2, r3
 800f684:	920a      	str	r2, [sp, #40]	; 0x28
 800f686:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	930c      	str	r3, [sp, #48]	; 0x30
 800f68c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d01e      	beq.n	800f6d0 <_dtoa_r+0x824>
 800f692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f694:	2b00      	cmp	r3, #0
 800f696:	d05c      	beq.n	800f752 <_dtoa_r+0x8a6>
 800f698:	2d00      	cmp	r5, #0
 800f69a:	dd10      	ble.n	800f6be <_dtoa_r+0x812>
 800f69c:	0039      	movs	r1, r7
 800f69e:	002a      	movs	r2, r5
 800f6a0:	9804      	ldr	r0, [sp, #16]
 800f6a2:	f000 ffd1 	bl	8010648 <__pow5mult>
 800f6a6:	9a05      	ldr	r2, [sp, #20]
 800f6a8:	0001      	movs	r1, r0
 800f6aa:	0007      	movs	r7, r0
 800f6ac:	9804      	ldr	r0, [sp, #16]
 800f6ae:	f000 ff1b 	bl	80104e8 <__multiply>
 800f6b2:	0006      	movs	r6, r0
 800f6b4:	9905      	ldr	r1, [sp, #20]
 800f6b6:	9804      	ldr	r0, [sp, #16]
 800f6b8:	f000 fe02 	bl	80102c0 <_Bfree>
 800f6bc:	9605      	str	r6, [sp, #20]
 800f6be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6c0:	1b5a      	subs	r2, r3, r5
 800f6c2:	42ab      	cmp	r3, r5
 800f6c4:	d004      	beq.n	800f6d0 <_dtoa_r+0x824>
 800f6c6:	9905      	ldr	r1, [sp, #20]
 800f6c8:	9804      	ldr	r0, [sp, #16]
 800f6ca:	f000 ffbd 	bl	8010648 <__pow5mult>
 800f6ce:	9005      	str	r0, [sp, #20]
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	9804      	ldr	r0, [sp, #16]
 800f6d4:	f000 fef0 	bl	80104b8 <__i2b>
 800f6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f6da:	0006      	movs	r6, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	dd3a      	ble.n	800f756 <_dtoa_r+0x8aa>
 800f6e0:	001a      	movs	r2, r3
 800f6e2:	0001      	movs	r1, r0
 800f6e4:	9804      	ldr	r0, [sp, #16]
 800f6e6:	f000 ffaf 	bl	8010648 <__pow5mult>
 800f6ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f6ec:	0006      	movs	r6, r0
 800f6ee:	2500      	movs	r5, #0
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	dc38      	bgt.n	800f766 <_dtoa_r+0x8ba>
 800f6f4:	2500      	movs	r5, #0
 800f6f6:	9b08      	ldr	r3, [sp, #32]
 800f6f8:	42ab      	cmp	r3, r5
 800f6fa:	d130      	bne.n	800f75e <_dtoa_r+0x8b2>
 800f6fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6fe:	031b      	lsls	r3, r3, #12
 800f700:	42ab      	cmp	r3, r5
 800f702:	d12c      	bne.n	800f75e <_dtoa_r+0x8b2>
 800f704:	4b72      	ldr	r3, [pc, #456]	; (800f8d0 <_dtoa_r+0xa24>)
 800f706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f708:	4213      	tst	r3, r2
 800f70a:	d028      	beq.n	800f75e <_dtoa_r+0x8b2>
 800f70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f70e:	3501      	adds	r5, #1
 800f710:	3301      	adds	r3, #1
 800f712:	930a      	str	r3, [sp, #40]	; 0x28
 800f714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f716:	3301      	adds	r3, #1
 800f718:	930c      	str	r3, [sp, #48]	; 0x30
 800f71a:	e020      	b.n	800f75e <_dtoa_r+0x8b2>
 800f71c:	2336      	movs	r3, #54	; 0x36
 800f71e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f720:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f722:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f724:	1a9b      	subs	r3, r3, r2
 800f726:	e795      	b.n	800f654 <_dtoa_r+0x7a8>
 800f728:	9b07      	ldr	r3, [sp, #28]
 800f72a:	1e5d      	subs	r5, r3, #1
 800f72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f72e:	42ab      	cmp	r3, r5
 800f730:	db07      	blt.n	800f742 <_dtoa_r+0x896>
 800f732:	1b5d      	subs	r5, r3, r5
 800f734:	9b07      	ldr	r3, [sp, #28]
 800f736:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f738:	2b00      	cmp	r3, #0
 800f73a:	da8b      	bge.n	800f654 <_dtoa_r+0x7a8>
 800f73c:	1ae4      	subs	r4, r4, r3
 800f73e:	2300      	movs	r3, #0
 800f740:	e788      	b.n	800f654 <_dtoa_r+0x7a8>
 800f742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f744:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f746:	1aeb      	subs	r3, r5, r3
 800f748:	18d3      	adds	r3, r2, r3
 800f74a:	950d      	str	r5, [sp, #52]	; 0x34
 800f74c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f74e:	2500      	movs	r5, #0
 800f750:	e7f0      	b.n	800f734 <_dtoa_r+0x888>
 800f752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f754:	e7b7      	b.n	800f6c6 <_dtoa_r+0x81a>
 800f756:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f758:	2500      	movs	r5, #0
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	ddca      	ble.n	800f6f4 <_dtoa_r+0x848>
 800f75e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f760:	2001      	movs	r0, #1
 800f762:	2b00      	cmp	r3, #0
 800f764:	d008      	beq.n	800f778 <_dtoa_r+0x8cc>
 800f766:	6933      	ldr	r3, [r6, #16]
 800f768:	3303      	adds	r3, #3
 800f76a:	009b      	lsls	r3, r3, #2
 800f76c:	18f3      	adds	r3, r6, r3
 800f76e:	6858      	ldr	r0, [r3, #4]
 800f770:	f000 fe5a 	bl	8010428 <__hi0bits>
 800f774:	2320      	movs	r3, #32
 800f776:	1a18      	subs	r0, r3, r0
 800f778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f77a:	1818      	adds	r0, r3, r0
 800f77c:	0002      	movs	r2, r0
 800f77e:	231f      	movs	r3, #31
 800f780:	401a      	ands	r2, r3
 800f782:	4218      	tst	r0, r3
 800f784:	d047      	beq.n	800f816 <_dtoa_r+0x96a>
 800f786:	3301      	adds	r3, #1
 800f788:	1a9b      	subs	r3, r3, r2
 800f78a:	2b04      	cmp	r3, #4
 800f78c:	dd3f      	ble.n	800f80e <_dtoa_r+0x962>
 800f78e:	231c      	movs	r3, #28
 800f790:	1a9b      	subs	r3, r3, r2
 800f792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f794:	18e4      	adds	r4, r4, r3
 800f796:	18d2      	adds	r2, r2, r3
 800f798:	920a      	str	r2, [sp, #40]	; 0x28
 800f79a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f79c:	18d3      	adds	r3, r2, r3
 800f79e:	930c      	str	r3, [sp, #48]	; 0x30
 800f7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	dd05      	ble.n	800f7b2 <_dtoa_r+0x906>
 800f7a6:	001a      	movs	r2, r3
 800f7a8:	9905      	ldr	r1, [sp, #20]
 800f7aa:	9804      	ldr	r0, [sp, #16]
 800f7ac:	f000 ffa8 	bl	8010700 <__lshift>
 800f7b0:	9005      	str	r0, [sp, #20]
 800f7b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dd05      	ble.n	800f7c4 <_dtoa_r+0x918>
 800f7b8:	0031      	movs	r1, r6
 800f7ba:	001a      	movs	r2, r3
 800f7bc:	9804      	ldr	r0, [sp, #16]
 800f7be:	f000 ff9f 	bl	8010700 <__lshift>
 800f7c2:	0006      	movs	r6, r0
 800f7c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d027      	beq.n	800f81a <_dtoa_r+0x96e>
 800f7ca:	0031      	movs	r1, r6
 800f7cc:	9805      	ldr	r0, [sp, #20]
 800f7ce:	f001 f805 	bl	80107dc <__mcmp>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	da21      	bge.n	800f81a <_dtoa_r+0x96e>
 800f7d6:	9b03      	ldr	r3, [sp, #12]
 800f7d8:	220a      	movs	r2, #10
 800f7da:	3b01      	subs	r3, #1
 800f7dc:	9303      	str	r3, [sp, #12]
 800f7de:	9905      	ldr	r1, [sp, #20]
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	9804      	ldr	r0, [sp, #16]
 800f7e4:	f000 fd90 	bl	8010308 <__multadd>
 800f7e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7ea:	9005      	str	r0, [sp, #20]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d100      	bne.n	800f7f2 <_dtoa_r+0x946>
 800f7f0:	e15d      	b.n	800faae <_dtoa_r+0xc02>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	0039      	movs	r1, r7
 800f7f6:	220a      	movs	r2, #10
 800f7f8:	9804      	ldr	r0, [sp, #16]
 800f7fa:	f000 fd85 	bl	8010308 <__multadd>
 800f7fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f800:	0007      	movs	r7, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	dc49      	bgt.n	800f89a <_dtoa_r+0x9ee>
 800f806:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f808:	2b02      	cmp	r3, #2
 800f80a:	dc0e      	bgt.n	800f82a <_dtoa_r+0x97e>
 800f80c:	e045      	b.n	800f89a <_dtoa_r+0x9ee>
 800f80e:	2b04      	cmp	r3, #4
 800f810:	d0c6      	beq.n	800f7a0 <_dtoa_r+0x8f4>
 800f812:	331c      	adds	r3, #28
 800f814:	e7bd      	b.n	800f792 <_dtoa_r+0x8e6>
 800f816:	0013      	movs	r3, r2
 800f818:	e7fb      	b.n	800f812 <_dtoa_r+0x966>
 800f81a:	9b07      	ldr	r3, [sp, #28]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	dc36      	bgt.n	800f88e <_dtoa_r+0x9e2>
 800f820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f822:	2b02      	cmp	r3, #2
 800f824:	dd33      	ble.n	800f88e <_dtoa_r+0x9e2>
 800f826:	9b07      	ldr	r3, [sp, #28]
 800f828:	930b      	str	r3, [sp, #44]	; 0x2c
 800f82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d10c      	bne.n	800f84a <_dtoa_r+0x99e>
 800f830:	0031      	movs	r1, r6
 800f832:	2205      	movs	r2, #5
 800f834:	9804      	ldr	r0, [sp, #16]
 800f836:	f000 fd67 	bl	8010308 <__multadd>
 800f83a:	0006      	movs	r6, r0
 800f83c:	0001      	movs	r1, r0
 800f83e:	9805      	ldr	r0, [sp, #20]
 800f840:	f000 ffcc 	bl	80107dc <__mcmp>
 800f844:	2800      	cmp	r0, #0
 800f846:	dd00      	ble.n	800f84a <_dtoa_r+0x99e>
 800f848:	e59f      	b.n	800f38a <_dtoa_r+0x4de>
 800f84a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f84c:	43db      	mvns	r3, r3
 800f84e:	9303      	str	r3, [sp, #12]
 800f850:	9b06      	ldr	r3, [sp, #24]
 800f852:	9308      	str	r3, [sp, #32]
 800f854:	2500      	movs	r5, #0
 800f856:	0031      	movs	r1, r6
 800f858:	9804      	ldr	r0, [sp, #16]
 800f85a:	f000 fd31 	bl	80102c0 <_Bfree>
 800f85e:	2f00      	cmp	r7, #0
 800f860:	d100      	bne.n	800f864 <_dtoa_r+0x9b8>
 800f862:	e6a3      	b.n	800f5ac <_dtoa_r+0x700>
 800f864:	2d00      	cmp	r5, #0
 800f866:	d005      	beq.n	800f874 <_dtoa_r+0x9c8>
 800f868:	42bd      	cmp	r5, r7
 800f86a:	d003      	beq.n	800f874 <_dtoa_r+0x9c8>
 800f86c:	0029      	movs	r1, r5
 800f86e:	9804      	ldr	r0, [sp, #16]
 800f870:	f000 fd26 	bl	80102c0 <_Bfree>
 800f874:	0039      	movs	r1, r7
 800f876:	9804      	ldr	r0, [sp, #16]
 800f878:	f000 fd22 	bl	80102c0 <_Bfree>
 800f87c:	e696      	b.n	800f5ac <_dtoa_r+0x700>
 800f87e:	2600      	movs	r6, #0
 800f880:	0037      	movs	r7, r6
 800f882:	e7e2      	b.n	800f84a <_dtoa_r+0x99e>
 800f884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f886:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800f888:	9303      	str	r3, [sp, #12]
 800f88a:	0037      	movs	r7, r6
 800f88c:	e57d      	b.n	800f38a <_dtoa_r+0x4de>
 800f88e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f890:	2b00      	cmp	r3, #0
 800f892:	d100      	bne.n	800f896 <_dtoa_r+0x9ea>
 800f894:	e0c3      	b.n	800fa1e <_dtoa_r+0xb72>
 800f896:	9b07      	ldr	r3, [sp, #28]
 800f898:	930b      	str	r3, [sp, #44]	; 0x2c
 800f89a:	2c00      	cmp	r4, #0
 800f89c:	dd05      	ble.n	800f8aa <_dtoa_r+0x9fe>
 800f89e:	0039      	movs	r1, r7
 800f8a0:	0022      	movs	r2, r4
 800f8a2:	9804      	ldr	r0, [sp, #16]
 800f8a4:	f000 ff2c 	bl	8010700 <__lshift>
 800f8a8:	0007      	movs	r7, r0
 800f8aa:	0038      	movs	r0, r7
 800f8ac:	2d00      	cmp	r5, #0
 800f8ae:	d024      	beq.n	800f8fa <_dtoa_r+0xa4e>
 800f8b0:	6879      	ldr	r1, [r7, #4]
 800f8b2:	9804      	ldr	r0, [sp, #16]
 800f8b4:	f000 fcc0 	bl	8010238 <_Balloc>
 800f8b8:	1e04      	subs	r4, r0, #0
 800f8ba:	d111      	bne.n	800f8e0 <_dtoa_r+0xa34>
 800f8bc:	0022      	movs	r2, r4
 800f8be:	4b05      	ldr	r3, [pc, #20]	; (800f8d4 <_dtoa_r+0xa28>)
 800f8c0:	4805      	ldr	r0, [pc, #20]	; (800f8d8 <_dtoa_r+0xa2c>)
 800f8c2:	4906      	ldr	r1, [pc, #24]	; (800f8dc <_dtoa_r+0xa30>)
 800f8c4:	f7ff fb07 	bl	800eed6 <_dtoa_r+0x2a>
 800f8c8:	40240000 	.word	0x40240000
 800f8cc:	00000433 	.word	0x00000433
 800f8d0:	7ff00000 	.word	0x7ff00000
 800f8d4:	080139a4 	.word	0x080139a4
 800f8d8:	0801394c 	.word	0x0801394c
 800f8dc:	000002ef 	.word	0x000002ef
 800f8e0:	0039      	movs	r1, r7
 800f8e2:	693a      	ldr	r2, [r7, #16]
 800f8e4:	310c      	adds	r1, #12
 800f8e6:	3202      	adds	r2, #2
 800f8e8:	0092      	lsls	r2, r2, #2
 800f8ea:	300c      	adds	r0, #12
 800f8ec:	f7ff fa1c 	bl	800ed28 <memcpy>
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	0021      	movs	r1, r4
 800f8f4:	9804      	ldr	r0, [sp, #16]
 800f8f6:	f000 ff03 	bl	8010700 <__lshift>
 800f8fa:	9b06      	ldr	r3, [sp, #24]
 800f8fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8fe:	9307      	str	r3, [sp, #28]
 800f900:	3b01      	subs	r3, #1
 800f902:	189b      	adds	r3, r3, r2
 800f904:	2201      	movs	r2, #1
 800f906:	003d      	movs	r5, r7
 800f908:	0007      	movs	r7, r0
 800f90a:	930e      	str	r3, [sp, #56]	; 0x38
 800f90c:	9b08      	ldr	r3, [sp, #32]
 800f90e:	4013      	ands	r3, r2
 800f910:	930d      	str	r3, [sp, #52]	; 0x34
 800f912:	0031      	movs	r1, r6
 800f914:	9805      	ldr	r0, [sp, #20]
 800f916:	f7ff fa39 	bl	800ed8c <quorem>
 800f91a:	0029      	movs	r1, r5
 800f91c:	0004      	movs	r4, r0
 800f91e:	900b      	str	r0, [sp, #44]	; 0x2c
 800f920:	9805      	ldr	r0, [sp, #20]
 800f922:	f000 ff5b 	bl	80107dc <__mcmp>
 800f926:	003a      	movs	r2, r7
 800f928:	900c      	str	r0, [sp, #48]	; 0x30
 800f92a:	0031      	movs	r1, r6
 800f92c:	9804      	ldr	r0, [sp, #16]
 800f92e:	f000 ff71 	bl	8010814 <__mdiff>
 800f932:	2201      	movs	r2, #1
 800f934:	68c3      	ldr	r3, [r0, #12]
 800f936:	3430      	adds	r4, #48	; 0x30
 800f938:	9008      	str	r0, [sp, #32]
 800f93a:	920a      	str	r2, [sp, #40]	; 0x28
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d104      	bne.n	800f94a <_dtoa_r+0xa9e>
 800f940:	0001      	movs	r1, r0
 800f942:	9805      	ldr	r0, [sp, #20]
 800f944:	f000 ff4a 	bl	80107dc <__mcmp>
 800f948:	900a      	str	r0, [sp, #40]	; 0x28
 800f94a:	9908      	ldr	r1, [sp, #32]
 800f94c:	9804      	ldr	r0, [sp, #16]
 800f94e:	f000 fcb7 	bl	80102c0 <_Bfree>
 800f952:	9b07      	ldr	r3, [sp, #28]
 800f954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f956:	3301      	adds	r3, #1
 800f958:	9308      	str	r3, [sp, #32]
 800f95a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f95c:	4313      	orrs	r3, r2
 800f95e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f960:	4313      	orrs	r3, r2
 800f962:	d109      	bne.n	800f978 <_dtoa_r+0xacc>
 800f964:	2c39      	cmp	r4, #57	; 0x39
 800f966:	d022      	beq.n	800f9ae <_dtoa_r+0xb02>
 800f968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	dd01      	ble.n	800f972 <_dtoa_r+0xac6>
 800f96e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f970:	3431      	adds	r4, #49	; 0x31
 800f972:	9b07      	ldr	r3, [sp, #28]
 800f974:	701c      	strb	r4, [r3, #0]
 800f976:	e76e      	b.n	800f856 <_dtoa_r+0x9aa>
 800f978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	db04      	blt.n	800f988 <_dtoa_r+0xadc>
 800f97e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f980:	4313      	orrs	r3, r2
 800f982:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f984:	4313      	orrs	r3, r2
 800f986:	d11e      	bne.n	800f9c6 <_dtoa_r+0xb1a>
 800f988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	ddf1      	ble.n	800f972 <_dtoa_r+0xac6>
 800f98e:	9905      	ldr	r1, [sp, #20]
 800f990:	2201      	movs	r2, #1
 800f992:	9804      	ldr	r0, [sp, #16]
 800f994:	f000 feb4 	bl	8010700 <__lshift>
 800f998:	0031      	movs	r1, r6
 800f99a:	9005      	str	r0, [sp, #20]
 800f99c:	f000 ff1e 	bl	80107dc <__mcmp>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	dc02      	bgt.n	800f9aa <_dtoa_r+0xafe>
 800f9a4:	d1e5      	bne.n	800f972 <_dtoa_r+0xac6>
 800f9a6:	07e3      	lsls	r3, r4, #31
 800f9a8:	d5e3      	bpl.n	800f972 <_dtoa_r+0xac6>
 800f9aa:	2c39      	cmp	r4, #57	; 0x39
 800f9ac:	d1df      	bne.n	800f96e <_dtoa_r+0xac2>
 800f9ae:	2339      	movs	r3, #57	; 0x39
 800f9b0:	9a07      	ldr	r2, [sp, #28]
 800f9b2:	7013      	strb	r3, [r2, #0]
 800f9b4:	9b08      	ldr	r3, [sp, #32]
 800f9b6:	9308      	str	r3, [sp, #32]
 800f9b8:	3b01      	subs	r3, #1
 800f9ba:	781a      	ldrb	r2, [r3, #0]
 800f9bc:	2a39      	cmp	r2, #57	; 0x39
 800f9be:	d063      	beq.n	800fa88 <_dtoa_r+0xbdc>
 800f9c0:	3201      	adds	r2, #1
 800f9c2:	701a      	strb	r2, [r3, #0]
 800f9c4:	e747      	b.n	800f856 <_dtoa_r+0x9aa>
 800f9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	dd03      	ble.n	800f9d4 <_dtoa_r+0xb28>
 800f9cc:	2c39      	cmp	r4, #57	; 0x39
 800f9ce:	d0ee      	beq.n	800f9ae <_dtoa_r+0xb02>
 800f9d0:	3401      	adds	r4, #1
 800f9d2:	e7ce      	b.n	800f972 <_dtoa_r+0xac6>
 800f9d4:	9b07      	ldr	r3, [sp, #28]
 800f9d6:	9a07      	ldr	r2, [sp, #28]
 800f9d8:	701c      	strb	r4, [r3, #0]
 800f9da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d03e      	beq.n	800fa5e <_dtoa_r+0xbb2>
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	220a      	movs	r2, #10
 800f9e4:	9905      	ldr	r1, [sp, #20]
 800f9e6:	9804      	ldr	r0, [sp, #16]
 800f9e8:	f000 fc8e 	bl	8010308 <__multadd>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	9005      	str	r0, [sp, #20]
 800f9f0:	220a      	movs	r2, #10
 800f9f2:	0029      	movs	r1, r5
 800f9f4:	9804      	ldr	r0, [sp, #16]
 800f9f6:	42bd      	cmp	r5, r7
 800f9f8:	d106      	bne.n	800fa08 <_dtoa_r+0xb5c>
 800f9fa:	f000 fc85 	bl	8010308 <__multadd>
 800f9fe:	0005      	movs	r5, r0
 800fa00:	0007      	movs	r7, r0
 800fa02:	9b08      	ldr	r3, [sp, #32]
 800fa04:	9307      	str	r3, [sp, #28]
 800fa06:	e784      	b.n	800f912 <_dtoa_r+0xa66>
 800fa08:	f000 fc7e 	bl	8010308 <__multadd>
 800fa0c:	0039      	movs	r1, r7
 800fa0e:	0005      	movs	r5, r0
 800fa10:	2300      	movs	r3, #0
 800fa12:	220a      	movs	r2, #10
 800fa14:	9804      	ldr	r0, [sp, #16]
 800fa16:	f000 fc77 	bl	8010308 <__multadd>
 800fa1a:	0007      	movs	r7, r0
 800fa1c:	e7f1      	b.n	800fa02 <_dtoa_r+0xb56>
 800fa1e:	9b07      	ldr	r3, [sp, #28]
 800fa20:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa22:	2500      	movs	r5, #0
 800fa24:	0031      	movs	r1, r6
 800fa26:	9805      	ldr	r0, [sp, #20]
 800fa28:	f7ff f9b0 	bl	800ed8c <quorem>
 800fa2c:	9b06      	ldr	r3, [sp, #24]
 800fa2e:	3030      	adds	r0, #48	; 0x30
 800fa30:	5558      	strb	r0, [r3, r5]
 800fa32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa34:	3501      	adds	r5, #1
 800fa36:	0004      	movs	r4, r0
 800fa38:	42ab      	cmp	r3, r5
 800fa3a:	dd07      	ble.n	800fa4c <_dtoa_r+0xba0>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	220a      	movs	r2, #10
 800fa40:	9905      	ldr	r1, [sp, #20]
 800fa42:	9804      	ldr	r0, [sp, #16]
 800fa44:	f000 fc60 	bl	8010308 <__multadd>
 800fa48:	9005      	str	r0, [sp, #20]
 800fa4a:	e7eb      	b.n	800fa24 <_dtoa_r+0xb78>
 800fa4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa4e:	2301      	movs	r3, #1
 800fa50:	2a00      	cmp	r2, #0
 800fa52:	dd00      	ble.n	800fa56 <_dtoa_r+0xbaa>
 800fa54:	0013      	movs	r3, r2
 800fa56:	2500      	movs	r5, #0
 800fa58:	9a06      	ldr	r2, [sp, #24]
 800fa5a:	18d3      	adds	r3, r2, r3
 800fa5c:	9308      	str	r3, [sp, #32]
 800fa5e:	9905      	ldr	r1, [sp, #20]
 800fa60:	2201      	movs	r2, #1
 800fa62:	9804      	ldr	r0, [sp, #16]
 800fa64:	f000 fe4c 	bl	8010700 <__lshift>
 800fa68:	0031      	movs	r1, r6
 800fa6a:	9005      	str	r0, [sp, #20]
 800fa6c:	f000 feb6 	bl	80107dc <__mcmp>
 800fa70:	2800      	cmp	r0, #0
 800fa72:	dc9f      	bgt.n	800f9b4 <_dtoa_r+0xb08>
 800fa74:	d101      	bne.n	800fa7a <_dtoa_r+0xbce>
 800fa76:	07e4      	lsls	r4, r4, #31
 800fa78:	d49c      	bmi.n	800f9b4 <_dtoa_r+0xb08>
 800fa7a:	9b08      	ldr	r3, [sp, #32]
 800fa7c:	9308      	str	r3, [sp, #32]
 800fa7e:	3b01      	subs	r3, #1
 800fa80:	781a      	ldrb	r2, [r3, #0]
 800fa82:	2a30      	cmp	r2, #48	; 0x30
 800fa84:	d0fa      	beq.n	800fa7c <_dtoa_r+0xbd0>
 800fa86:	e6e6      	b.n	800f856 <_dtoa_r+0x9aa>
 800fa88:	9a06      	ldr	r2, [sp, #24]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d193      	bne.n	800f9b6 <_dtoa_r+0xb0a>
 800fa8e:	9b03      	ldr	r3, [sp, #12]
 800fa90:	3301      	adds	r3, #1
 800fa92:	9303      	str	r3, [sp, #12]
 800fa94:	2331      	movs	r3, #49	; 0x31
 800fa96:	7013      	strb	r3, [r2, #0]
 800fa98:	e6dd      	b.n	800f856 <_dtoa_r+0x9aa>
 800fa9a:	4b09      	ldr	r3, [pc, #36]	; (800fac0 <_dtoa_r+0xc14>)
 800fa9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800fa9e:	9306      	str	r3, [sp, #24]
 800faa0:	4b08      	ldr	r3, [pc, #32]	; (800fac4 <_dtoa_r+0xc18>)
 800faa2:	2a00      	cmp	r2, #0
 800faa4:	d001      	beq.n	800faaa <_dtoa_r+0xbfe>
 800faa6:	f7ff fa49 	bl	800ef3c <_dtoa_r+0x90>
 800faaa:	f7ff fa49 	bl	800ef40 <_dtoa_r+0x94>
 800faae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	dcb6      	bgt.n	800fa22 <_dtoa_r+0xb76>
 800fab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800fab6:	2b02      	cmp	r3, #2
 800fab8:	dd00      	ble.n	800fabc <_dtoa_r+0xc10>
 800faba:	e6b6      	b.n	800f82a <_dtoa_r+0x97e>
 800fabc:	e7b1      	b.n	800fa22 <_dtoa_r+0xb76>
 800fabe:	46c0      	nop			; (mov r8, r8)
 800fac0:	0801393f 	.word	0x0801393f
 800fac4:	08013947 	.word	0x08013947

0800fac8 <_free_r>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	0005      	movs	r5, r0
 800facc:	2900      	cmp	r1, #0
 800face:	d010      	beq.n	800faf2 <_free_r+0x2a>
 800fad0:	1f0c      	subs	r4, r1, #4
 800fad2:	6823      	ldr	r3, [r4, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	da00      	bge.n	800fada <_free_r+0x12>
 800fad8:	18e4      	adds	r4, r4, r3
 800fada:	0028      	movs	r0, r5
 800fadc:	f7fd f88a 	bl	800cbf4 <__malloc_lock>
 800fae0:	4a1d      	ldr	r2, [pc, #116]	; (800fb58 <_free_r+0x90>)
 800fae2:	6813      	ldr	r3, [r2, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d105      	bne.n	800faf4 <_free_r+0x2c>
 800fae8:	6063      	str	r3, [r4, #4]
 800faea:	6014      	str	r4, [r2, #0]
 800faec:	0028      	movs	r0, r5
 800faee:	f7fd f889 	bl	800cc04 <__malloc_unlock>
 800faf2:	bd70      	pop	{r4, r5, r6, pc}
 800faf4:	42a3      	cmp	r3, r4
 800faf6:	d908      	bls.n	800fb0a <_free_r+0x42>
 800faf8:	6820      	ldr	r0, [r4, #0]
 800fafa:	1821      	adds	r1, r4, r0
 800fafc:	428b      	cmp	r3, r1
 800fafe:	d1f3      	bne.n	800fae8 <_free_r+0x20>
 800fb00:	6819      	ldr	r1, [r3, #0]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	1809      	adds	r1, r1, r0
 800fb06:	6021      	str	r1, [r4, #0]
 800fb08:	e7ee      	b.n	800fae8 <_free_r+0x20>
 800fb0a:	001a      	movs	r2, r3
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d001      	beq.n	800fb16 <_free_r+0x4e>
 800fb12:	42a3      	cmp	r3, r4
 800fb14:	d9f9      	bls.n	800fb0a <_free_r+0x42>
 800fb16:	6811      	ldr	r1, [r2, #0]
 800fb18:	1850      	adds	r0, r2, r1
 800fb1a:	42a0      	cmp	r0, r4
 800fb1c:	d10b      	bne.n	800fb36 <_free_r+0x6e>
 800fb1e:	6820      	ldr	r0, [r4, #0]
 800fb20:	1809      	adds	r1, r1, r0
 800fb22:	1850      	adds	r0, r2, r1
 800fb24:	6011      	str	r1, [r2, #0]
 800fb26:	4283      	cmp	r3, r0
 800fb28:	d1e0      	bne.n	800faec <_free_r+0x24>
 800fb2a:	6818      	ldr	r0, [r3, #0]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	1841      	adds	r1, r0, r1
 800fb30:	6011      	str	r1, [r2, #0]
 800fb32:	6053      	str	r3, [r2, #4]
 800fb34:	e7da      	b.n	800faec <_free_r+0x24>
 800fb36:	42a0      	cmp	r0, r4
 800fb38:	d902      	bls.n	800fb40 <_free_r+0x78>
 800fb3a:	230c      	movs	r3, #12
 800fb3c:	602b      	str	r3, [r5, #0]
 800fb3e:	e7d5      	b.n	800faec <_free_r+0x24>
 800fb40:	6820      	ldr	r0, [r4, #0]
 800fb42:	1821      	adds	r1, r4, r0
 800fb44:	428b      	cmp	r3, r1
 800fb46:	d103      	bne.n	800fb50 <_free_r+0x88>
 800fb48:	6819      	ldr	r1, [r3, #0]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	1809      	adds	r1, r1, r0
 800fb4e:	6021      	str	r1, [r4, #0]
 800fb50:	6063      	str	r3, [r4, #4]
 800fb52:	6054      	str	r4, [r2, #4]
 800fb54:	e7ca      	b.n	800faec <_free_r+0x24>
 800fb56:	46c0      	nop			; (mov r8, r8)
 800fb58:	200064d8 	.word	0x200064d8

0800fb5c <rshift>:
 800fb5c:	0002      	movs	r2, r0
 800fb5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb60:	6904      	ldr	r4, [r0, #16]
 800fb62:	114b      	asrs	r3, r1, #5
 800fb64:	b085      	sub	sp, #20
 800fb66:	3214      	adds	r2, #20
 800fb68:	9302      	str	r3, [sp, #8]
 800fb6a:	114d      	asrs	r5, r1, #5
 800fb6c:	0013      	movs	r3, r2
 800fb6e:	42ac      	cmp	r4, r5
 800fb70:	dd32      	ble.n	800fbd8 <rshift+0x7c>
 800fb72:	261f      	movs	r6, #31
 800fb74:	000f      	movs	r7, r1
 800fb76:	114b      	asrs	r3, r1, #5
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	00a5      	lsls	r5, r4, #2
 800fb7c:	18d3      	adds	r3, r2, r3
 800fb7e:	4037      	ands	r7, r6
 800fb80:	1955      	adds	r5, r2, r5
 800fb82:	9300      	str	r3, [sp, #0]
 800fb84:	9701      	str	r7, [sp, #4]
 800fb86:	4231      	tst	r1, r6
 800fb88:	d10d      	bne.n	800fba6 <rshift+0x4a>
 800fb8a:	0016      	movs	r6, r2
 800fb8c:	0019      	movs	r1, r3
 800fb8e:	428d      	cmp	r5, r1
 800fb90:	d836      	bhi.n	800fc00 <rshift+0xa4>
 800fb92:	9900      	ldr	r1, [sp, #0]
 800fb94:	2300      	movs	r3, #0
 800fb96:	3903      	subs	r1, #3
 800fb98:	428d      	cmp	r5, r1
 800fb9a:	d302      	bcc.n	800fba2 <rshift+0x46>
 800fb9c:	9b02      	ldr	r3, [sp, #8]
 800fb9e:	1ae4      	subs	r4, r4, r3
 800fba0:	00a3      	lsls	r3, r4, #2
 800fba2:	18d3      	adds	r3, r2, r3
 800fba4:	e018      	b.n	800fbd8 <rshift+0x7c>
 800fba6:	2120      	movs	r1, #32
 800fba8:	9e01      	ldr	r6, [sp, #4]
 800fbaa:	9f01      	ldr	r7, [sp, #4]
 800fbac:	1b89      	subs	r1, r1, r6
 800fbae:	9e00      	ldr	r6, [sp, #0]
 800fbb0:	9103      	str	r1, [sp, #12]
 800fbb2:	ce02      	ldmia	r6!, {r1}
 800fbb4:	4694      	mov	ip, r2
 800fbb6:	40f9      	lsrs	r1, r7
 800fbb8:	42b5      	cmp	r5, r6
 800fbba:	d816      	bhi.n	800fbea <rshift+0x8e>
 800fbbc:	9e00      	ldr	r6, [sp, #0]
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	3601      	adds	r6, #1
 800fbc2:	42b5      	cmp	r5, r6
 800fbc4:	d303      	bcc.n	800fbce <rshift+0x72>
 800fbc6:	9b02      	ldr	r3, [sp, #8]
 800fbc8:	1ae3      	subs	r3, r4, r3
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	3b04      	subs	r3, #4
 800fbce:	18d3      	adds	r3, r2, r3
 800fbd0:	6019      	str	r1, [r3, #0]
 800fbd2:	2900      	cmp	r1, #0
 800fbd4:	d000      	beq.n	800fbd8 <rshift+0x7c>
 800fbd6:	3304      	adds	r3, #4
 800fbd8:	1a99      	subs	r1, r3, r2
 800fbda:	1089      	asrs	r1, r1, #2
 800fbdc:	6101      	str	r1, [r0, #16]
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d101      	bne.n	800fbe6 <rshift+0x8a>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	6143      	str	r3, [r0, #20]
 800fbe6:	b005      	add	sp, #20
 800fbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbea:	6837      	ldr	r7, [r6, #0]
 800fbec:	9b03      	ldr	r3, [sp, #12]
 800fbee:	409f      	lsls	r7, r3
 800fbf0:	430f      	orrs	r7, r1
 800fbf2:	4661      	mov	r1, ip
 800fbf4:	c180      	stmia	r1!, {r7}
 800fbf6:	468c      	mov	ip, r1
 800fbf8:	9b01      	ldr	r3, [sp, #4]
 800fbfa:	ce02      	ldmia	r6!, {r1}
 800fbfc:	40d9      	lsrs	r1, r3
 800fbfe:	e7db      	b.n	800fbb8 <rshift+0x5c>
 800fc00:	c980      	ldmia	r1!, {r7}
 800fc02:	c680      	stmia	r6!, {r7}
 800fc04:	e7c3      	b.n	800fb8e <rshift+0x32>

0800fc06 <__hexdig_fun>:
 800fc06:	0002      	movs	r2, r0
 800fc08:	3a30      	subs	r2, #48	; 0x30
 800fc0a:	0003      	movs	r3, r0
 800fc0c:	2a09      	cmp	r2, #9
 800fc0e:	d802      	bhi.n	800fc16 <__hexdig_fun+0x10>
 800fc10:	3b20      	subs	r3, #32
 800fc12:	b2d8      	uxtb	r0, r3
 800fc14:	4770      	bx	lr
 800fc16:	0002      	movs	r2, r0
 800fc18:	3a61      	subs	r2, #97	; 0x61
 800fc1a:	2a05      	cmp	r2, #5
 800fc1c:	d801      	bhi.n	800fc22 <__hexdig_fun+0x1c>
 800fc1e:	3b47      	subs	r3, #71	; 0x47
 800fc20:	e7f7      	b.n	800fc12 <__hexdig_fun+0xc>
 800fc22:	001a      	movs	r2, r3
 800fc24:	3a41      	subs	r2, #65	; 0x41
 800fc26:	2000      	movs	r0, #0
 800fc28:	2a05      	cmp	r2, #5
 800fc2a:	d8f3      	bhi.n	800fc14 <__hexdig_fun+0xe>
 800fc2c:	3b27      	subs	r3, #39	; 0x27
 800fc2e:	e7f0      	b.n	800fc12 <__hexdig_fun+0xc>

0800fc30 <__gethex>:
 800fc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc32:	b089      	sub	sp, #36	; 0x24
 800fc34:	9307      	str	r3, [sp, #28]
 800fc36:	2302      	movs	r3, #2
 800fc38:	9201      	str	r2, [sp, #4]
 800fc3a:	680a      	ldr	r2, [r1, #0]
 800fc3c:	425b      	negs	r3, r3
 800fc3e:	9003      	str	r0, [sp, #12]
 800fc40:	9106      	str	r1, [sp, #24]
 800fc42:	1c96      	adds	r6, r2, #2
 800fc44:	1a9b      	subs	r3, r3, r2
 800fc46:	199a      	adds	r2, r3, r6
 800fc48:	9600      	str	r6, [sp, #0]
 800fc4a:	9205      	str	r2, [sp, #20]
 800fc4c:	9a00      	ldr	r2, [sp, #0]
 800fc4e:	3601      	adds	r6, #1
 800fc50:	7810      	ldrb	r0, [r2, #0]
 800fc52:	2830      	cmp	r0, #48	; 0x30
 800fc54:	d0f7      	beq.n	800fc46 <__gethex+0x16>
 800fc56:	f7ff ffd6 	bl	800fc06 <__hexdig_fun>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	001d      	movs	r5, r3
 800fc5e:	9302      	str	r3, [sp, #8]
 800fc60:	4298      	cmp	r0, r3
 800fc62:	d11d      	bne.n	800fca0 <__gethex+0x70>
 800fc64:	2201      	movs	r2, #1
 800fc66:	49a6      	ldr	r1, [pc, #664]	; (800ff00 <__gethex+0x2d0>)
 800fc68:	9800      	ldr	r0, [sp, #0]
 800fc6a:	f7fe feae 	bl	800e9ca <strncmp>
 800fc6e:	0007      	movs	r7, r0
 800fc70:	42a8      	cmp	r0, r5
 800fc72:	d169      	bne.n	800fd48 <__gethex+0x118>
 800fc74:	9b00      	ldr	r3, [sp, #0]
 800fc76:	0034      	movs	r4, r6
 800fc78:	7858      	ldrb	r0, [r3, #1]
 800fc7a:	f7ff ffc4 	bl	800fc06 <__hexdig_fun>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	9302      	str	r3, [sp, #8]
 800fc82:	42a8      	cmp	r0, r5
 800fc84:	d02f      	beq.n	800fce6 <__gethex+0xb6>
 800fc86:	9600      	str	r6, [sp, #0]
 800fc88:	9b00      	ldr	r3, [sp, #0]
 800fc8a:	7818      	ldrb	r0, [r3, #0]
 800fc8c:	2830      	cmp	r0, #48	; 0x30
 800fc8e:	d009      	beq.n	800fca4 <__gethex+0x74>
 800fc90:	f7ff ffb9 	bl	800fc06 <__hexdig_fun>
 800fc94:	4242      	negs	r2, r0
 800fc96:	4142      	adcs	r2, r0
 800fc98:	2301      	movs	r3, #1
 800fc9a:	0035      	movs	r5, r6
 800fc9c:	9202      	str	r2, [sp, #8]
 800fc9e:	9305      	str	r3, [sp, #20]
 800fca0:	9c00      	ldr	r4, [sp, #0]
 800fca2:	e004      	b.n	800fcae <__gethex+0x7e>
 800fca4:	9b00      	ldr	r3, [sp, #0]
 800fca6:	3301      	adds	r3, #1
 800fca8:	9300      	str	r3, [sp, #0]
 800fcaa:	e7ed      	b.n	800fc88 <__gethex+0x58>
 800fcac:	3401      	adds	r4, #1
 800fcae:	7820      	ldrb	r0, [r4, #0]
 800fcb0:	f7ff ffa9 	bl	800fc06 <__hexdig_fun>
 800fcb4:	1e07      	subs	r7, r0, #0
 800fcb6:	d1f9      	bne.n	800fcac <__gethex+0x7c>
 800fcb8:	2201      	movs	r2, #1
 800fcba:	0020      	movs	r0, r4
 800fcbc:	4990      	ldr	r1, [pc, #576]	; (800ff00 <__gethex+0x2d0>)
 800fcbe:	f7fe fe84 	bl	800e9ca <strncmp>
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	d10d      	bne.n	800fce2 <__gethex+0xb2>
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	d106      	bne.n	800fcd8 <__gethex+0xa8>
 800fcca:	3401      	adds	r4, #1
 800fccc:	0025      	movs	r5, r4
 800fcce:	7820      	ldrb	r0, [r4, #0]
 800fcd0:	f7ff ff99 	bl	800fc06 <__hexdig_fun>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d102      	bne.n	800fcde <__gethex+0xae>
 800fcd8:	1b2d      	subs	r5, r5, r4
 800fcda:	00af      	lsls	r7, r5, #2
 800fcdc:	e003      	b.n	800fce6 <__gethex+0xb6>
 800fcde:	3401      	adds	r4, #1
 800fce0:	e7f5      	b.n	800fcce <__gethex+0x9e>
 800fce2:	2d00      	cmp	r5, #0
 800fce4:	d1f8      	bne.n	800fcd8 <__gethex+0xa8>
 800fce6:	2220      	movs	r2, #32
 800fce8:	7823      	ldrb	r3, [r4, #0]
 800fcea:	0026      	movs	r6, r4
 800fcec:	4393      	bics	r3, r2
 800fcee:	2b50      	cmp	r3, #80	; 0x50
 800fcf0:	d11d      	bne.n	800fd2e <__gethex+0xfe>
 800fcf2:	7863      	ldrb	r3, [r4, #1]
 800fcf4:	2b2b      	cmp	r3, #43	; 0x2b
 800fcf6:	d02c      	beq.n	800fd52 <__gethex+0x122>
 800fcf8:	2b2d      	cmp	r3, #45	; 0x2d
 800fcfa:	d02e      	beq.n	800fd5a <__gethex+0x12a>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	1c66      	adds	r6, r4, #1
 800fd00:	9304      	str	r3, [sp, #16]
 800fd02:	7830      	ldrb	r0, [r6, #0]
 800fd04:	f7ff ff7f 	bl	800fc06 <__hexdig_fun>
 800fd08:	1e43      	subs	r3, r0, #1
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b18      	cmp	r3, #24
 800fd0e:	d82b      	bhi.n	800fd68 <__gethex+0x138>
 800fd10:	3810      	subs	r0, #16
 800fd12:	0005      	movs	r5, r0
 800fd14:	7870      	ldrb	r0, [r6, #1]
 800fd16:	f7ff ff76 	bl	800fc06 <__hexdig_fun>
 800fd1a:	1e43      	subs	r3, r0, #1
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	3601      	adds	r6, #1
 800fd20:	2b18      	cmp	r3, #24
 800fd22:	d91c      	bls.n	800fd5e <__gethex+0x12e>
 800fd24:	9b04      	ldr	r3, [sp, #16]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d000      	beq.n	800fd2c <__gethex+0xfc>
 800fd2a:	426d      	negs	r5, r5
 800fd2c:	197f      	adds	r7, r7, r5
 800fd2e:	9b06      	ldr	r3, [sp, #24]
 800fd30:	601e      	str	r6, [r3, #0]
 800fd32:	9b02      	ldr	r3, [sp, #8]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d019      	beq.n	800fd6c <__gethex+0x13c>
 800fd38:	2600      	movs	r6, #0
 800fd3a:	9b05      	ldr	r3, [sp, #20]
 800fd3c:	42b3      	cmp	r3, r6
 800fd3e:	d100      	bne.n	800fd42 <__gethex+0x112>
 800fd40:	3606      	adds	r6, #6
 800fd42:	0030      	movs	r0, r6
 800fd44:	b009      	add	sp, #36	; 0x24
 800fd46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd48:	2301      	movs	r3, #1
 800fd4a:	2700      	movs	r7, #0
 800fd4c:	9c00      	ldr	r4, [sp, #0]
 800fd4e:	9302      	str	r3, [sp, #8]
 800fd50:	e7c9      	b.n	800fce6 <__gethex+0xb6>
 800fd52:	2300      	movs	r3, #0
 800fd54:	9304      	str	r3, [sp, #16]
 800fd56:	1ca6      	adds	r6, r4, #2
 800fd58:	e7d3      	b.n	800fd02 <__gethex+0xd2>
 800fd5a:	2301      	movs	r3, #1
 800fd5c:	e7fa      	b.n	800fd54 <__gethex+0x124>
 800fd5e:	230a      	movs	r3, #10
 800fd60:	435d      	muls	r5, r3
 800fd62:	182d      	adds	r5, r5, r0
 800fd64:	3d10      	subs	r5, #16
 800fd66:	e7d5      	b.n	800fd14 <__gethex+0xe4>
 800fd68:	0026      	movs	r6, r4
 800fd6a:	e7e0      	b.n	800fd2e <__gethex+0xfe>
 800fd6c:	9b00      	ldr	r3, [sp, #0]
 800fd6e:	9902      	ldr	r1, [sp, #8]
 800fd70:	1ae3      	subs	r3, r4, r3
 800fd72:	3b01      	subs	r3, #1
 800fd74:	2b07      	cmp	r3, #7
 800fd76:	dc0a      	bgt.n	800fd8e <__gethex+0x15e>
 800fd78:	9803      	ldr	r0, [sp, #12]
 800fd7a:	f000 fa5d 	bl	8010238 <_Balloc>
 800fd7e:	1e05      	subs	r5, r0, #0
 800fd80:	d108      	bne.n	800fd94 <__gethex+0x164>
 800fd82:	002a      	movs	r2, r5
 800fd84:	21e4      	movs	r1, #228	; 0xe4
 800fd86:	4b5f      	ldr	r3, [pc, #380]	; (800ff04 <__gethex+0x2d4>)
 800fd88:	485f      	ldr	r0, [pc, #380]	; (800ff08 <__gethex+0x2d8>)
 800fd8a:	f7fe ffe1 	bl	800ed50 <__assert_func>
 800fd8e:	3101      	adds	r1, #1
 800fd90:	105b      	asrs	r3, r3, #1
 800fd92:	e7ef      	b.n	800fd74 <__gethex+0x144>
 800fd94:	0003      	movs	r3, r0
 800fd96:	3314      	adds	r3, #20
 800fd98:	9302      	str	r3, [sp, #8]
 800fd9a:	9305      	str	r3, [sp, #20]
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	001e      	movs	r6, r3
 800fda0:	9304      	str	r3, [sp, #16]
 800fda2:	9b00      	ldr	r3, [sp, #0]
 800fda4:	42a3      	cmp	r3, r4
 800fda6:	d33f      	bcc.n	800fe28 <__gethex+0x1f8>
 800fda8:	9c05      	ldr	r4, [sp, #20]
 800fdaa:	9b02      	ldr	r3, [sp, #8]
 800fdac:	c440      	stmia	r4!, {r6}
 800fdae:	1ae4      	subs	r4, r4, r3
 800fdb0:	10a4      	asrs	r4, r4, #2
 800fdb2:	0030      	movs	r0, r6
 800fdb4:	612c      	str	r4, [r5, #16]
 800fdb6:	f000 fb37 	bl	8010428 <__hi0bits>
 800fdba:	9b01      	ldr	r3, [sp, #4]
 800fdbc:	0164      	lsls	r4, r4, #5
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	1a26      	subs	r6, r4, r0
 800fdc2:	9300      	str	r3, [sp, #0]
 800fdc4:	429e      	cmp	r6, r3
 800fdc6:	dd51      	ble.n	800fe6c <__gethex+0x23c>
 800fdc8:	1af6      	subs	r6, r6, r3
 800fdca:	0031      	movs	r1, r6
 800fdcc:	0028      	movs	r0, r5
 800fdce:	f000 fecb 	bl	8010b68 <__any_on>
 800fdd2:	1e04      	subs	r4, r0, #0
 800fdd4:	d016      	beq.n	800fe04 <__gethex+0x1d4>
 800fdd6:	2401      	movs	r4, #1
 800fdd8:	231f      	movs	r3, #31
 800fdda:	0020      	movs	r0, r4
 800fddc:	1e72      	subs	r2, r6, #1
 800fdde:	4013      	ands	r3, r2
 800fde0:	4098      	lsls	r0, r3
 800fde2:	0003      	movs	r3, r0
 800fde4:	1151      	asrs	r1, r2, #5
 800fde6:	9802      	ldr	r0, [sp, #8]
 800fde8:	0089      	lsls	r1, r1, #2
 800fdea:	5809      	ldr	r1, [r1, r0]
 800fdec:	4219      	tst	r1, r3
 800fdee:	d009      	beq.n	800fe04 <__gethex+0x1d4>
 800fdf0:	42a2      	cmp	r2, r4
 800fdf2:	dd06      	ble.n	800fe02 <__gethex+0x1d2>
 800fdf4:	0028      	movs	r0, r5
 800fdf6:	1eb1      	subs	r1, r6, #2
 800fdf8:	f000 feb6 	bl	8010b68 <__any_on>
 800fdfc:	3402      	adds	r4, #2
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d100      	bne.n	800fe04 <__gethex+0x1d4>
 800fe02:	2402      	movs	r4, #2
 800fe04:	0031      	movs	r1, r6
 800fe06:	0028      	movs	r0, r5
 800fe08:	f7ff fea8 	bl	800fb5c <rshift>
 800fe0c:	19bf      	adds	r7, r7, r6
 800fe0e:	9b01      	ldr	r3, [sp, #4]
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	42bb      	cmp	r3, r7
 800fe14:	da3a      	bge.n	800fe8c <__gethex+0x25c>
 800fe16:	0029      	movs	r1, r5
 800fe18:	9803      	ldr	r0, [sp, #12]
 800fe1a:	f000 fa51 	bl	80102c0 <_Bfree>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fe22:	26a3      	movs	r6, #163	; 0xa3
 800fe24:	6013      	str	r3, [r2, #0]
 800fe26:	e78c      	b.n	800fd42 <__gethex+0x112>
 800fe28:	3c01      	subs	r4, #1
 800fe2a:	7823      	ldrb	r3, [r4, #0]
 800fe2c:	2b2e      	cmp	r3, #46	; 0x2e
 800fe2e:	d012      	beq.n	800fe56 <__gethex+0x226>
 800fe30:	9b04      	ldr	r3, [sp, #16]
 800fe32:	2b20      	cmp	r3, #32
 800fe34:	d104      	bne.n	800fe40 <__gethex+0x210>
 800fe36:	9b05      	ldr	r3, [sp, #20]
 800fe38:	c340      	stmia	r3!, {r6}
 800fe3a:	2600      	movs	r6, #0
 800fe3c:	9305      	str	r3, [sp, #20]
 800fe3e:	9604      	str	r6, [sp, #16]
 800fe40:	7820      	ldrb	r0, [r4, #0]
 800fe42:	f7ff fee0 	bl	800fc06 <__hexdig_fun>
 800fe46:	230f      	movs	r3, #15
 800fe48:	4018      	ands	r0, r3
 800fe4a:	9b04      	ldr	r3, [sp, #16]
 800fe4c:	4098      	lsls	r0, r3
 800fe4e:	3304      	adds	r3, #4
 800fe50:	4306      	orrs	r6, r0
 800fe52:	9304      	str	r3, [sp, #16]
 800fe54:	e7a5      	b.n	800fda2 <__gethex+0x172>
 800fe56:	9b00      	ldr	r3, [sp, #0]
 800fe58:	42a3      	cmp	r3, r4
 800fe5a:	d8e9      	bhi.n	800fe30 <__gethex+0x200>
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	0020      	movs	r0, r4
 800fe60:	4927      	ldr	r1, [pc, #156]	; (800ff00 <__gethex+0x2d0>)
 800fe62:	f7fe fdb2 	bl	800e9ca <strncmp>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	d1e2      	bne.n	800fe30 <__gethex+0x200>
 800fe6a:	e79a      	b.n	800fda2 <__gethex+0x172>
 800fe6c:	9b00      	ldr	r3, [sp, #0]
 800fe6e:	2400      	movs	r4, #0
 800fe70:	429e      	cmp	r6, r3
 800fe72:	dacc      	bge.n	800fe0e <__gethex+0x1de>
 800fe74:	1b9e      	subs	r6, r3, r6
 800fe76:	0029      	movs	r1, r5
 800fe78:	0032      	movs	r2, r6
 800fe7a:	9803      	ldr	r0, [sp, #12]
 800fe7c:	f000 fc40 	bl	8010700 <__lshift>
 800fe80:	0003      	movs	r3, r0
 800fe82:	3314      	adds	r3, #20
 800fe84:	0005      	movs	r5, r0
 800fe86:	1bbf      	subs	r7, r7, r6
 800fe88:	9302      	str	r3, [sp, #8]
 800fe8a:	e7c0      	b.n	800fe0e <__gethex+0x1de>
 800fe8c:	9b01      	ldr	r3, [sp, #4]
 800fe8e:	685e      	ldr	r6, [r3, #4]
 800fe90:	42be      	cmp	r6, r7
 800fe92:	dd70      	ble.n	800ff76 <__gethex+0x346>
 800fe94:	9b00      	ldr	r3, [sp, #0]
 800fe96:	1bf6      	subs	r6, r6, r7
 800fe98:	42b3      	cmp	r3, r6
 800fe9a:	dc37      	bgt.n	800ff0c <__gethex+0x2dc>
 800fe9c:	9b01      	ldr	r3, [sp, #4]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	2b02      	cmp	r3, #2
 800fea2:	d024      	beq.n	800feee <__gethex+0x2be>
 800fea4:	2b03      	cmp	r3, #3
 800fea6:	d026      	beq.n	800fef6 <__gethex+0x2c6>
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d117      	bne.n	800fedc <__gethex+0x2ac>
 800feac:	9b00      	ldr	r3, [sp, #0]
 800feae:	42b3      	cmp	r3, r6
 800feb0:	d114      	bne.n	800fedc <__gethex+0x2ac>
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d10b      	bne.n	800fece <__gethex+0x29e>
 800feb6:	9b01      	ldr	r3, [sp, #4]
 800feb8:	9a07      	ldr	r2, [sp, #28]
 800feba:	685b      	ldr	r3, [r3, #4]
 800febc:	2662      	movs	r6, #98	; 0x62
 800febe:	6013      	str	r3, [r2, #0]
 800fec0:	2301      	movs	r3, #1
 800fec2:	9a02      	ldr	r2, [sp, #8]
 800fec4:	612b      	str	r3, [r5, #16]
 800fec6:	6013      	str	r3, [r2, #0]
 800fec8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800feca:	601d      	str	r5, [r3, #0]
 800fecc:	e739      	b.n	800fd42 <__gethex+0x112>
 800fece:	9900      	ldr	r1, [sp, #0]
 800fed0:	0028      	movs	r0, r5
 800fed2:	3901      	subs	r1, #1
 800fed4:	f000 fe48 	bl	8010b68 <__any_on>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d1ec      	bne.n	800feb6 <__gethex+0x286>
 800fedc:	0029      	movs	r1, r5
 800fede:	9803      	ldr	r0, [sp, #12]
 800fee0:	f000 f9ee 	bl	80102c0 <_Bfree>
 800fee4:	2300      	movs	r3, #0
 800fee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fee8:	2650      	movs	r6, #80	; 0x50
 800feea:	6013      	str	r3, [r2, #0]
 800feec:	e729      	b.n	800fd42 <__gethex+0x112>
 800feee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d1f3      	bne.n	800fedc <__gethex+0x2ac>
 800fef4:	e7df      	b.n	800feb6 <__gethex+0x286>
 800fef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1dc      	bne.n	800feb6 <__gethex+0x286>
 800fefc:	e7ee      	b.n	800fedc <__gethex+0x2ac>
 800fefe:	46c0      	nop			; (mov r8, r8)
 800ff00:	080136fc 	.word	0x080136fc
 800ff04:	080139a4 	.word	0x080139a4
 800ff08:	080139b5 	.word	0x080139b5
 800ff0c:	1e77      	subs	r7, r6, #1
 800ff0e:	2c00      	cmp	r4, #0
 800ff10:	d12f      	bne.n	800ff72 <__gethex+0x342>
 800ff12:	2f00      	cmp	r7, #0
 800ff14:	d004      	beq.n	800ff20 <__gethex+0x2f0>
 800ff16:	0039      	movs	r1, r7
 800ff18:	0028      	movs	r0, r5
 800ff1a:	f000 fe25 	bl	8010b68 <__any_on>
 800ff1e:	0004      	movs	r4, r0
 800ff20:	231f      	movs	r3, #31
 800ff22:	117a      	asrs	r2, r7, #5
 800ff24:	401f      	ands	r7, r3
 800ff26:	3b1e      	subs	r3, #30
 800ff28:	40bb      	lsls	r3, r7
 800ff2a:	9902      	ldr	r1, [sp, #8]
 800ff2c:	0092      	lsls	r2, r2, #2
 800ff2e:	5852      	ldr	r2, [r2, r1]
 800ff30:	421a      	tst	r2, r3
 800ff32:	d001      	beq.n	800ff38 <__gethex+0x308>
 800ff34:	2302      	movs	r3, #2
 800ff36:	431c      	orrs	r4, r3
 800ff38:	9b00      	ldr	r3, [sp, #0]
 800ff3a:	0031      	movs	r1, r6
 800ff3c:	1b9b      	subs	r3, r3, r6
 800ff3e:	2602      	movs	r6, #2
 800ff40:	0028      	movs	r0, r5
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	f7ff fe0a 	bl	800fb5c <rshift>
 800ff48:	9b01      	ldr	r3, [sp, #4]
 800ff4a:	685f      	ldr	r7, [r3, #4]
 800ff4c:	2c00      	cmp	r4, #0
 800ff4e:	d041      	beq.n	800ffd4 <__gethex+0x3a4>
 800ff50:	9b01      	ldr	r3, [sp, #4]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	2b02      	cmp	r3, #2
 800ff56:	d010      	beq.n	800ff7a <__gethex+0x34a>
 800ff58:	2b03      	cmp	r3, #3
 800ff5a:	d012      	beq.n	800ff82 <__gethex+0x352>
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d106      	bne.n	800ff6e <__gethex+0x33e>
 800ff60:	07a2      	lsls	r2, r4, #30
 800ff62:	d504      	bpl.n	800ff6e <__gethex+0x33e>
 800ff64:	9a02      	ldr	r2, [sp, #8]
 800ff66:	6812      	ldr	r2, [r2, #0]
 800ff68:	4314      	orrs	r4, r2
 800ff6a:	421c      	tst	r4, r3
 800ff6c:	d10c      	bne.n	800ff88 <__gethex+0x358>
 800ff6e:	2310      	movs	r3, #16
 800ff70:	e02f      	b.n	800ffd2 <__gethex+0x3a2>
 800ff72:	2401      	movs	r4, #1
 800ff74:	e7d4      	b.n	800ff20 <__gethex+0x2f0>
 800ff76:	2601      	movs	r6, #1
 800ff78:	e7e8      	b.n	800ff4c <__gethex+0x31c>
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ff7e:	1a9b      	subs	r3, r3, r2
 800ff80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d0f2      	beq.n	800ff6e <__gethex+0x33e>
 800ff88:	692b      	ldr	r3, [r5, #16]
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	9302      	str	r3, [sp, #8]
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	9304      	str	r3, [sp, #16]
 800ff92:	002b      	movs	r3, r5
 800ff94:	9a04      	ldr	r2, [sp, #16]
 800ff96:	3314      	adds	r3, #20
 800ff98:	1899      	adds	r1, r3, r2
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	1c54      	adds	r4, r2, #1
 800ff9e:	d01e      	beq.n	800ffde <__gethex+0x3ae>
 800ffa0:	3201      	adds	r2, #1
 800ffa2:	601a      	str	r2, [r3, #0]
 800ffa4:	002b      	movs	r3, r5
 800ffa6:	3314      	adds	r3, #20
 800ffa8:	2e02      	cmp	r6, #2
 800ffaa:	d141      	bne.n	8010030 <__gethex+0x400>
 800ffac:	9a01      	ldr	r2, [sp, #4]
 800ffae:	9900      	ldr	r1, [sp, #0]
 800ffb0:	6812      	ldr	r2, [r2, #0]
 800ffb2:	3a01      	subs	r2, #1
 800ffb4:	428a      	cmp	r2, r1
 800ffb6:	d10b      	bne.n	800ffd0 <__gethex+0x3a0>
 800ffb8:	221f      	movs	r2, #31
 800ffba:	9800      	ldr	r0, [sp, #0]
 800ffbc:	1149      	asrs	r1, r1, #5
 800ffbe:	4002      	ands	r2, r0
 800ffc0:	2001      	movs	r0, #1
 800ffc2:	0004      	movs	r4, r0
 800ffc4:	4094      	lsls	r4, r2
 800ffc6:	0089      	lsls	r1, r1, #2
 800ffc8:	58cb      	ldr	r3, [r1, r3]
 800ffca:	4223      	tst	r3, r4
 800ffcc:	d000      	beq.n	800ffd0 <__gethex+0x3a0>
 800ffce:	2601      	movs	r6, #1
 800ffd0:	2320      	movs	r3, #32
 800ffd2:	431e      	orrs	r6, r3
 800ffd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ffd6:	601d      	str	r5, [r3, #0]
 800ffd8:	9b07      	ldr	r3, [sp, #28]
 800ffda:	601f      	str	r7, [r3, #0]
 800ffdc:	e6b1      	b.n	800fd42 <__gethex+0x112>
 800ffde:	c301      	stmia	r3!, {r0}
 800ffe0:	4299      	cmp	r1, r3
 800ffe2:	d8da      	bhi.n	800ff9a <__gethex+0x36a>
 800ffe4:	68ab      	ldr	r3, [r5, #8]
 800ffe6:	9a02      	ldr	r2, [sp, #8]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	db18      	blt.n	801001e <__gethex+0x3ee>
 800ffec:	6869      	ldr	r1, [r5, #4]
 800ffee:	9803      	ldr	r0, [sp, #12]
 800fff0:	3101      	adds	r1, #1
 800fff2:	f000 f921 	bl	8010238 <_Balloc>
 800fff6:	1e04      	subs	r4, r0, #0
 800fff8:	d104      	bne.n	8010004 <__gethex+0x3d4>
 800fffa:	0022      	movs	r2, r4
 800fffc:	2184      	movs	r1, #132	; 0x84
 800fffe:	4b1c      	ldr	r3, [pc, #112]	; (8010070 <__gethex+0x440>)
 8010000:	481c      	ldr	r0, [pc, #112]	; (8010074 <__gethex+0x444>)
 8010002:	e6c2      	b.n	800fd8a <__gethex+0x15a>
 8010004:	0029      	movs	r1, r5
 8010006:	692a      	ldr	r2, [r5, #16]
 8010008:	310c      	adds	r1, #12
 801000a:	3202      	adds	r2, #2
 801000c:	0092      	lsls	r2, r2, #2
 801000e:	300c      	adds	r0, #12
 8010010:	f7fe fe8a 	bl	800ed28 <memcpy>
 8010014:	0029      	movs	r1, r5
 8010016:	9803      	ldr	r0, [sp, #12]
 8010018:	f000 f952 	bl	80102c0 <_Bfree>
 801001c:	0025      	movs	r5, r4
 801001e:	692b      	ldr	r3, [r5, #16]
 8010020:	1c5a      	adds	r2, r3, #1
 8010022:	612a      	str	r2, [r5, #16]
 8010024:	2201      	movs	r2, #1
 8010026:	3304      	adds	r3, #4
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	18eb      	adds	r3, r5, r3
 801002c:	605a      	str	r2, [r3, #4]
 801002e:	e7b9      	b.n	800ffa4 <__gethex+0x374>
 8010030:	692a      	ldr	r2, [r5, #16]
 8010032:	9902      	ldr	r1, [sp, #8]
 8010034:	428a      	cmp	r2, r1
 8010036:	dd09      	ble.n	801004c <__gethex+0x41c>
 8010038:	2101      	movs	r1, #1
 801003a:	0028      	movs	r0, r5
 801003c:	f7ff fd8e 	bl	800fb5c <rshift>
 8010040:	9b01      	ldr	r3, [sp, #4]
 8010042:	3701      	adds	r7, #1
 8010044:	689b      	ldr	r3, [r3, #8]
 8010046:	42bb      	cmp	r3, r7
 8010048:	dac1      	bge.n	800ffce <__gethex+0x39e>
 801004a:	e6e4      	b.n	800fe16 <__gethex+0x1e6>
 801004c:	221f      	movs	r2, #31
 801004e:	9c00      	ldr	r4, [sp, #0]
 8010050:	9900      	ldr	r1, [sp, #0]
 8010052:	2601      	movs	r6, #1
 8010054:	4014      	ands	r4, r2
 8010056:	4211      	tst	r1, r2
 8010058:	d0ba      	beq.n	800ffd0 <__gethex+0x3a0>
 801005a:	9a04      	ldr	r2, [sp, #16]
 801005c:	189b      	adds	r3, r3, r2
 801005e:	3b04      	subs	r3, #4
 8010060:	6818      	ldr	r0, [r3, #0]
 8010062:	f000 f9e1 	bl	8010428 <__hi0bits>
 8010066:	2320      	movs	r3, #32
 8010068:	1b1b      	subs	r3, r3, r4
 801006a:	4298      	cmp	r0, r3
 801006c:	dbe4      	blt.n	8010038 <__gethex+0x408>
 801006e:	e7af      	b.n	800ffd0 <__gethex+0x3a0>
 8010070:	080139a4 	.word	0x080139a4
 8010074:	080139b5 	.word	0x080139b5

08010078 <L_shift>:
 8010078:	2308      	movs	r3, #8
 801007a:	b570      	push	{r4, r5, r6, lr}
 801007c:	2520      	movs	r5, #32
 801007e:	1a9a      	subs	r2, r3, r2
 8010080:	0092      	lsls	r2, r2, #2
 8010082:	1aad      	subs	r5, r5, r2
 8010084:	6843      	ldr	r3, [r0, #4]
 8010086:	6804      	ldr	r4, [r0, #0]
 8010088:	001e      	movs	r6, r3
 801008a:	40ae      	lsls	r6, r5
 801008c:	40d3      	lsrs	r3, r2
 801008e:	4334      	orrs	r4, r6
 8010090:	6004      	str	r4, [r0, #0]
 8010092:	6043      	str	r3, [r0, #4]
 8010094:	3004      	adds	r0, #4
 8010096:	4288      	cmp	r0, r1
 8010098:	d3f4      	bcc.n	8010084 <L_shift+0xc>
 801009a:	bd70      	pop	{r4, r5, r6, pc}

0801009c <__match>:
 801009c:	b530      	push	{r4, r5, lr}
 801009e:	6803      	ldr	r3, [r0, #0]
 80100a0:	780c      	ldrb	r4, [r1, #0]
 80100a2:	3301      	adds	r3, #1
 80100a4:	2c00      	cmp	r4, #0
 80100a6:	d102      	bne.n	80100ae <__match+0x12>
 80100a8:	6003      	str	r3, [r0, #0]
 80100aa:	2001      	movs	r0, #1
 80100ac:	bd30      	pop	{r4, r5, pc}
 80100ae:	781a      	ldrb	r2, [r3, #0]
 80100b0:	0015      	movs	r5, r2
 80100b2:	3d41      	subs	r5, #65	; 0x41
 80100b4:	2d19      	cmp	r5, #25
 80100b6:	d800      	bhi.n	80100ba <__match+0x1e>
 80100b8:	3220      	adds	r2, #32
 80100ba:	3101      	adds	r1, #1
 80100bc:	42a2      	cmp	r2, r4
 80100be:	d0ef      	beq.n	80100a0 <__match+0x4>
 80100c0:	2000      	movs	r0, #0
 80100c2:	e7f3      	b.n	80100ac <__match+0x10>

080100c4 <__hexnan>:
 80100c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100c6:	680b      	ldr	r3, [r1, #0]
 80100c8:	b08b      	sub	sp, #44	; 0x2c
 80100ca:	9201      	str	r2, [sp, #4]
 80100cc:	9901      	ldr	r1, [sp, #4]
 80100ce:	115a      	asrs	r2, r3, #5
 80100d0:	0092      	lsls	r2, r2, #2
 80100d2:	188a      	adds	r2, r1, r2
 80100d4:	9202      	str	r2, [sp, #8]
 80100d6:	0019      	movs	r1, r3
 80100d8:	221f      	movs	r2, #31
 80100da:	4011      	ands	r1, r2
 80100dc:	9008      	str	r0, [sp, #32]
 80100de:	9106      	str	r1, [sp, #24]
 80100e0:	4213      	tst	r3, r2
 80100e2:	d002      	beq.n	80100ea <__hexnan+0x26>
 80100e4:	9b02      	ldr	r3, [sp, #8]
 80100e6:	3304      	adds	r3, #4
 80100e8:	9302      	str	r3, [sp, #8]
 80100ea:	9b02      	ldr	r3, [sp, #8]
 80100ec:	2500      	movs	r5, #0
 80100ee:	1f1f      	subs	r7, r3, #4
 80100f0:	003e      	movs	r6, r7
 80100f2:	003c      	movs	r4, r7
 80100f4:	9b08      	ldr	r3, [sp, #32]
 80100f6:	603d      	str	r5, [r7, #0]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	9507      	str	r5, [sp, #28]
 80100fc:	9305      	str	r3, [sp, #20]
 80100fe:	9503      	str	r5, [sp, #12]
 8010100:	9b05      	ldr	r3, [sp, #20]
 8010102:	3301      	adds	r3, #1
 8010104:	9309      	str	r3, [sp, #36]	; 0x24
 8010106:	9b05      	ldr	r3, [sp, #20]
 8010108:	785b      	ldrb	r3, [r3, #1]
 801010a:	9304      	str	r3, [sp, #16]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d028      	beq.n	8010162 <__hexnan+0x9e>
 8010110:	9804      	ldr	r0, [sp, #16]
 8010112:	f7ff fd78 	bl	800fc06 <__hexdig_fun>
 8010116:	2800      	cmp	r0, #0
 8010118:	d154      	bne.n	80101c4 <__hexnan+0x100>
 801011a:	9b04      	ldr	r3, [sp, #16]
 801011c:	2b20      	cmp	r3, #32
 801011e:	d819      	bhi.n	8010154 <__hexnan+0x90>
 8010120:	9b03      	ldr	r3, [sp, #12]
 8010122:	9a07      	ldr	r2, [sp, #28]
 8010124:	4293      	cmp	r3, r2
 8010126:	dd12      	ble.n	801014e <__hexnan+0x8a>
 8010128:	42b4      	cmp	r4, r6
 801012a:	d206      	bcs.n	801013a <__hexnan+0x76>
 801012c:	2d07      	cmp	r5, #7
 801012e:	dc04      	bgt.n	801013a <__hexnan+0x76>
 8010130:	002a      	movs	r2, r5
 8010132:	0031      	movs	r1, r6
 8010134:	0020      	movs	r0, r4
 8010136:	f7ff ff9f 	bl	8010078 <L_shift>
 801013a:	9b01      	ldr	r3, [sp, #4]
 801013c:	2508      	movs	r5, #8
 801013e:	429c      	cmp	r4, r3
 8010140:	d905      	bls.n	801014e <__hexnan+0x8a>
 8010142:	1f26      	subs	r6, r4, #4
 8010144:	2500      	movs	r5, #0
 8010146:	0034      	movs	r4, r6
 8010148:	9b03      	ldr	r3, [sp, #12]
 801014a:	6035      	str	r5, [r6, #0]
 801014c:	9307      	str	r3, [sp, #28]
 801014e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010150:	9305      	str	r3, [sp, #20]
 8010152:	e7d5      	b.n	8010100 <__hexnan+0x3c>
 8010154:	9b04      	ldr	r3, [sp, #16]
 8010156:	2b29      	cmp	r3, #41	; 0x29
 8010158:	d159      	bne.n	801020e <__hexnan+0x14a>
 801015a:	9b05      	ldr	r3, [sp, #20]
 801015c:	9a08      	ldr	r2, [sp, #32]
 801015e:	3302      	adds	r3, #2
 8010160:	6013      	str	r3, [r2, #0]
 8010162:	9b03      	ldr	r3, [sp, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d052      	beq.n	801020e <__hexnan+0x14a>
 8010168:	42b4      	cmp	r4, r6
 801016a:	d206      	bcs.n	801017a <__hexnan+0xb6>
 801016c:	2d07      	cmp	r5, #7
 801016e:	dc04      	bgt.n	801017a <__hexnan+0xb6>
 8010170:	002a      	movs	r2, r5
 8010172:	0031      	movs	r1, r6
 8010174:	0020      	movs	r0, r4
 8010176:	f7ff ff7f 	bl	8010078 <L_shift>
 801017a:	9b01      	ldr	r3, [sp, #4]
 801017c:	429c      	cmp	r4, r3
 801017e:	d935      	bls.n	80101ec <__hexnan+0x128>
 8010180:	001a      	movs	r2, r3
 8010182:	0023      	movs	r3, r4
 8010184:	cb02      	ldmia	r3!, {r1}
 8010186:	c202      	stmia	r2!, {r1}
 8010188:	429f      	cmp	r7, r3
 801018a:	d2fb      	bcs.n	8010184 <__hexnan+0xc0>
 801018c:	9b02      	ldr	r3, [sp, #8]
 801018e:	1c62      	adds	r2, r4, #1
 8010190:	1ed9      	subs	r1, r3, #3
 8010192:	2304      	movs	r3, #4
 8010194:	4291      	cmp	r1, r2
 8010196:	d305      	bcc.n	80101a4 <__hexnan+0xe0>
 8010198:	9b02      	ldr	r3, [sp, #8]
 801019a:	3b04      	subs	r3, #4
 801019c:	1b1b      	subs	r3, r3, r4
 801019e:	089b      	lsrs	r3, r3, #2
 80101a0:	3301      	adds	r3, #1
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	9a01      	ldr	r2, [sp, #4]
 80101a6:	18d3      	adds	r3, r2, r3
 80101a8:	2200      	movs	r2, #0
 80101aa:	c304      	stmia	r3!, {r2}
 80101ac:	429f      	cmp	r7, r3
 80101ae:	d2fc      	bcs.n	80101aa <__hexnan+0xe6>
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d104      	bne.n	80101c0 <__hexnan+0xfc>
 80101b6:	9b01      	ldr	r3, [sp, #4]
 80101b8:	429f      	cmp	r7, r3
 80101ba:	d126      	bne.n	801020a <__hexnan+0x146>
 80101bc:	2301      	movs	r3, #1
 80101be:	603b      	str	r3, [r7, #0]
 80101c0:	2005      	movs	r0, #5
 80101c2:	e025      	b.n	8010210 <__hexnan+0x14c>
 80101c4:	9b03      	ldr	r3, [sp, #12]
 80101c6:	3501      	adds	r5, #1
 80101c8:	3301      	adds	r3, #1
 80101ca:	9303      	str	r3, [sp, #12]
 80101cc:	2d08      	cmp	r5, #8
 80101ce:	dd06      	ble.n	80101de <__hexnan+0x11a>
 80101d0:	9b01      	ldr	r3, [sp, #4]
 80101d2:	429c      	cmp	r4, r3
 80101d4:	d9bb      	bls.n	801014e <__hexnan+0x8a>
 80101d6:	2300      	movs	r3, #0
 80101d8:	2501      	movs	r5, #1
 80101da:	3c04      	subs	r4, #4
 80101dc:	6023      	str	r3, [r4, #0]
 80101de:	220f      	movs	r2, #15
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	4010      	ands	r0, r2
 80101e4:	011b      	lsls	r3, r3, #4
 80101e6:	4303      	orrs	r3, r0
 80101e8:	6023      	str	r3, [r4, #0]
 80101ea:	e7b0      	b.n	801014e <__hexnan+0x8a>
 80101ec:	9b06      	ldr	r3, [sp, #24]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d0de      	beq.n	80101b0 <__hexnan+0xec>
 80101f2:	2320      	movs	r3, #32
 80101f4:	9a06      	ldr	r2, [sp, #24]
 80101f6:	9902      	ldr	r1, [sp, #8]
 80101f8:	1a9b      	subs	r3, r3, r2
 80101fa:	2201      	movs	r2, #1
 80101fc:	4252      	negs	r2, r2
 80101fe:	40da      	lsrs	r2, r3
 8010200:	3904      	subs	r1, #4
 8010202:	680b      	ldr	r3, [r1, #0]
 8010204:	4013      	ands	r3, r2
 8010206:	600b      	str	r3, [r1, #0]
 8010208:	e7d2      	b.n	80101b0 <__hexnan+0xec>
 801020a:	3f04      	subs	r7, #4
 801020c:	e7d0      	b.n	80101b0 <__hexnan+0xec>
 801020e:	2004      	movs	r0, #4
 8010210:	b00b      	add	sp, #44	; 0x2c
 8010212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010214 <__ascii_mbtowc>:
 8010214:	b082      	sub	sp, #8
 8010216:	2900      	cmp	r1, #0
 8010218:	d100      	bne.n	801021c <__ascii_mbtowc+0x8>
 801021a:	a901      	add	r1, sp, #4
 801021c:	1e10      	subs	r0, r2, #0
 801021e:	d006      	beq.n	801022e <__ascii_mbtowc+0x1a>
 8010220:	2b00      	cmp	r3, #0
 8010222:	d006      	beq.n	8010232 <__ascii_mbtowc+0x1e>
 8010224:	7813      	ldrb	r3, [r2, #0]
 8010226:	600b      	str	r3, [r1, #0]
 8010228:	7810      	ldrb	r0, [r2, #0]
 801022a:	1e43      	subs	r3, r0, #1
 801022c:	4198      	sbcs	r0, r3
 801022e:	b002      	add	sp, #8
 8010230:	4770      	bx	lr
 8010232:	2002      	movs	r0, #2
 8010234:	4240      	negs	r0, r0
 8010236:	e7fa      	b.n	801022e <__ascii_mbtowc+0x1a>

08010238 <_Balloc>:
 8010238:	b570      	push	{r4, r5, r6, lr}
 801023a:	69c5      	ldr	r5, [r0, #28]
 801023c:	0006      	movs	r6, r0
 801023e:	000c      	movs	r4, r1
 8010240:	2d00      	cmp	r5, #0
 8010242:	d10e      	bne.n	8010262 <_Balloc+0x2a>
 8010244:	2010      	movs	r0, #16
 8010246:	f7fc fc27 	bl	800ca98 <malloc>
 801024a:	1e02      	subs	r2, r0, #0
 801024c:	61f0      	str	r0, [r6, #28]
 801024e:	d104      	bne.n	801025a <_Balloc+0x22>
 8010250:	216b      	movs	r1, #107	; 0x6b
 8010252:	4b19      	ldr	r3, [pc, #100]	; (80102b8 <_Balloc+0x80>)
 8010254:	4819      	ldr	r0, [pc, #100]	; (80102bc <_Balloc+0x84>)
 8010256:	f7fe fd7b 	bl	800ed50 <__assert_func>
 801025a:	6045      	str	r5, [r0, #4]
 801025c:	6085      	str	r5, [r0, #8]
 801025e:	6005      	str	r5, [r0, #0]
 8010260:	60c5      	str	r5, [r0, #12]
 8010262:	69f5      	ldr	r5, [r6, #28]
 8010264:	68eb      	ldr	r3, [r5, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d013      	beq.n	8010292 <_Balloc+0x5a>
 801026a:	69f3      	ldr	r3, [r6, #28]
 801026c:	00a2      	lsls	r2, r4, #2
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	189b      	adds	r3, r3, r2
 8010272:	6818      	ldr	r0, [r3, #0]
 8010274:	2800      	cmp	r0, #0
 8010276:	d118      	bne.n	80102aa <_Balloc+0x72>
 8010278:	2101      	movs	r1, #1
 801027a:	000d      	movs	r5, r1
 801027c:	40a5      	lsls	r5, r4
 801027e:	1d6a      	adds	r2, r5, #5
 8010280:	0030      	movs	r0, r6
 8010282:	0092      	lsls	r2, r2, #2
 8010284:	f000 fee2 	bl	801104c <_calloc_r>
 8010288:	2800      	cmp	r0, #0
 801028a:	d00c      	beq.n	80102a6 <_Balloc+0x6e>
 801028c:	6044      	str	r4, [r0, #4]
 801028e:	6085      	str	r5, [r0, #8]
 8010290:	e00d      	b.n	80102ae <_Balloc+0x76>
 8010292:	2221      	movs	r2, #33	; 0x21
 8010294:	2104      	movs	r1, #4
 8010296:	0030      	movs	r0, r6
 8010298:	f000 fed8 	bl	801104c <_calloc_r>
 801029c:	69f3      	ldr	r3, [r6, #28]
 801029e:	60e8      	str	r0, [r5, #12]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d1e1      	bne.n	801026a <_Balloc+0x32>
 80102a6:	2000      	movs	r0, #0
 80102a8:	bd70      	pop	{r4, r5, r6, pc}
 80102aa:	6802      	ldr	r2, [r0, #0]
 80102ac:	601a      	str	r2, [r3, #0]
 80102ae:	2300      	movs	r3, #0
 80102b0:	6103      	str	r3, [r0, #16]
 80102b2:	60c3      	str	r3, [r0, #12]
 80102b4:	e7f8      	b.n	80102a8 <_Balloc+0x70>
 80102b6:	46c0      	nop			; (mov r8, r8)
 80102b8:	0801388a 	.word	0x0801388a
 80102bc:	08013a15 	.word	0x08013a15

080102c0 <_Bfree>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	69c6      	ldr	r6, [r0, #28]
 80102c4:	0005      	movs	r5, r0
 80102c6:	000c      	movs	r4, r1
 80102c8:	2e00      	cmp	r6, #0
 80102ca:	d10e      	bne.n	80102ea <_Bfree+0x2a>
 80102cc:	2010      	movs	r0, #16
 80102ce:	f7fc fbe3 	bl	800ca98 <malloc>
 80102d2:	1e02      	subs	r2, r0, #0
 80102d4:	61e8      	str	r0, [r5, #28]
 80102d6:	d104      	bne.n	80102e2 <_Bfree+0x22>
 80102d8:	218f      	movs	r1, #143	; 0x8f
 80102da:	4b09      	ldr	r3, [pc, #36]	; (8010300 <_Bfree+0x40>)
 80102dc:	4809      	ldr	r0, [pc, #36]	; (8010304 <_Bfree+0x44>)
 80102de:	f7fe fd37 	bl	800ed50 <__assert_func>
 80102e2:	6046      	str	r6, [r0, #4]
 80102e4:	6086      	str	r6, [r0, #8]
 80102e6:	6006      	str	r6, [r0, #0]
 80102e8:	60c6      	str	r6, [r0, #12]
 80102ea:	2c00      	cmp	r4, #0
 80102ec:	d007      	beq.n	80102fe <_Bfree+0x3e>
 80102ee:	69eb      	ldr	r3, [r5, #28]
 80102f0:	6862      	ldr	r2, [r4, #4]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	0092      	lsls	r2, r2, #2
 80102f6:	189b      	adds	r3, r3, r2
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	6022      	str	r2, [r4, #0]
 80102fc:	601c      	str	r4, [r3, #0]
 80102fe:	bd70      	pop	{r4, r5, r6, pc}
 8010300:	0801388a 	.word	0x0801388a
 8010304:	08013a15 	.word	0x08013a15

08010308 <__multadd>:
 8010308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801030a:	000e      	movs	r6, r1
 801030c:	9001      	str	r0, [sp, #4]
 801030e:	000c      	movs	r4, r1
 8010310:	001d      	movs	r5, r3
 8010312:	2000      	movs	r0, #0
 8010314:	690f      	ldr	r7, [r1, #16]
 8010316:	3614      	adds	r6, #20
 8010318:	6833      	ldr	r3, [r6, #0]
 801031a:	3001      	adds	r0, #1
 801031c:	b299      	uxth	r1, r3
 801031e:	4351      	muls	r1, r2
 8010320:	0c1b      	lsrs	r3, r3, #16
 8010322:	4353      	muls	r3, r2
 8010324:	1949      	adds	r1, r1, r5
 8010326:	0c0d      	lsrs	r5, r1, #16
 8010328:	195b      	adds	r3, r3, r5
 801032a:	0c1d      	lsrs	r5, r3, #16
 801032c:	b289      	uxth	r1, r1
 801032e:	041b      	lsls	r3, r3, #16
 8010330:	185b      	adds	r3, r3, r1
 8010332:	c608      	stmia	r6!, {r3}
 8010334:	4287      	cmp	r7, r0
 8010336:	dcef      	bgt.n	8010318 <__multadd+0x10>
 8010338:	2d00      	cmp	r5, #0
 801033a:	d022      	beq.n	8010382 <__multadd+0x7a>
 801033c:	68a3      	ldr	r3, [r4, #8]
 801033e:	42bb      	cmp	r3, r7
 8010340:	dc19      	bgt.n	8010376 <__multadd+0x6e>
 8010342:	6861      	ldr	r1, [r4, #4]
 8010344:	9801      	ldr	r0, [sp, #4]
 8010346:	3101      	adds	r1, #1
 8010348:	f7ff ff76 	bl	8010238 <_Balloc>
 801034c:	1e06      	subs	r6, r0, #0
 801034e:	d105      	bne.n	801035c <__multadd+0x54>
 8010350:	0032      	movs	r2, r6
 8010352:	21ba      	movs	r1, #186	; 0xba
 8010354:	4b0c      	ldr	r3, [pc, #48]	; (8010388 <__multadd+0x80>)
 8010356:	480d      	ldr	r0, [pc, #52]	; (801038c <__multadd+0x84>)
 8010358:	f7fe fcfa 	bl	800ed50 <__assert_func>
 801035c:	0021      	movs	r1, r4
 801035e:	6922      	ldr	r2, [r4, #16]
 8010360:	310c      	adds	r1, #12
 8010362:	3202      	adds	r2, #2
 8010364:	0092      	lsls	r2, r2, #2
 8010366:	300c      	adds	r0, #12
 8010368:	f7fe fcde 	bl	800ed28 <memcpy>
 801036c:	0021      	movs	r1, r4
 801036e:	9801      	ldr	r0, [sp, #4]
 8010370:	f7ff ffa6 	bl	80102c0 <_Bfree>
 8010374:	0034      	movs	r4, r6
 8010376:	1d3b      	adds	r3, r7, #4
 8010378:	009b      	lsls	r3, r3, #2
 801037a:	18e3      	adds	r3, r4, r3
 801037c:	605d      	str	r5, [r3, #4]
 801037e:	1c7b      	adds	r3, r7, #1
 8010380:	6123      	str	r3, [r4, #16]
 8010382:	0020      	movs	r0, r4
 8010384:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010386:	46c0      	nop			; (mov r8, r8)
 8010388:	080139a4 	.word	0x080139a4
 801038c:	08013a15 	.word	0x08013a15

08010390 <__s2b>:
 8010390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010392:	0006      	movs	r6, r0
 8010394:	0018      	movs	r0, r3
 8010396:	000c      	movs	r4, r1
 8010398:	3008      	adds	r0, #8
 801039a:	2109      	movs	r1, #9
 801039c:	9301      	str	r3, [sp, #4]
 801039e:	0015      	movs	r5, r2
 80103a0:	f7ef ff58 	bl	8000254 <__divsi3>
 80103a4:	2301      	movs	r3, #1
 80103a6:	2100      	movs	r1, #0
 80103a8:	4283      	cmp	r3, r0
 80103aa:	db0a      	blt.n	80103c2 <__s2b+0x32>
 80103ac:	0030      	movs	r0, r6
 80103ae:	f7ff ff43 	bl	8010238 <_Balloc>
 80103b2:	1e01      	subs	r1, r0, #0
 80103b4:	d108      	bne.n	80103c8 <__s2b+0x38>
 80103b6:	000a      	movs	r2, r1
 80103b8:	4b19      	ldr	r3, [pc, #100]	; (8010420 <__s2b+0x90>)
 80103ba:	481a      	ldr	r0, [pc, #104]	; (8010424 <__s2b+0x94>)
 80103bc:	31d3      	adds	r1, #211	; 0xd3
 80103be:	f7fe fcc7 	bl	800ed50 <__assert_func>
 80103c2:	005b      	lsls	r3, r3, #1
 80103c4:	3101      	adds	r1, #1
 80103c6:	e7ef      	b.n	80103a8 <__s2b+0x18>
 80103c8:	9b08      	ldr	r3, [sp, #32]
 80103ca:	6143      	str	r3, [r0, #20]
 80103cc:	2301      	movs	r3, #1
 80103ce:	6103      	str	r3, [r0, #16]
 80103d0:	2d09      	cmp	r5, #9
 80103d2:	dd18      	ble.n	8010406 <__s2b+0x76>
 80103d4:	0023      	movs	r3, r4
 80103d6:	3309      	adds	r3, #9
 80103d8:	001f      	movs	r7, r3
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	1964      	adds	r4, r4, r5
 80103de:	783b      	ldrb	r3, [r7, #0]
 80103e0:	220a      	movs	r2, #10
 80103e2:	0030      	movs	r0, r6
 80103e4:	3b30      	subs	r3, #48	; 0x30
 80103e6:	f7ff ff8f 	bl	8010308 <__multadd>
 80103ea:	3701      	adds	r7, #1
 80103ec:	0001      	movs	r1, r0
 80103ee:	42a7      	cmp	r7, r4
 80103f0:	d1f5      	bne.n	80103de <__s2b+0x4e>
 80103f2:	002c      	movs	r4, r5
 80103f4:	9b00      	ldr	r3, [sp, #0]
 80103f6:	3c08      	subs	r4, #8
 80103f8:	191c      	adds	r4, r3, r4
 80103fa:	002f      	movs	r7, r5
 80103fc:	9b01      	ldr	r3, [sp, #4]
 80103fe:	429f      	cmp	r7, r3
 8010400:	db04      	blt.n	801040c <__s2b+0x7c>
 8010402:	0008      	movs	r0, r1
 8010404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010406:	2509      	movs	r5, #9
 8010408:	340a      	adds	r4, #10
 801040a:	e7f6      	b.n	80103fa <__s2b+0x6a>
 801040c:	1b63      	subs	r3, r4, r5
 801040e:	5ddb      	ldrb	r3, [r3, r7]
 8010410:	220a      	movs	r2, #10
 8010412:	0030      	movs	r0, r6
 8010414:	3b30      	subs	r3, #48	; 0x30
 8010416:	f7ff ff77 	bl	8010308 <__multadd>
 801041a:	3701      	adds	r7, #1
 801041c:	0001      	movs	r1, r0
 801041e:	e7ed      	b.n	80103fc <__s2b+0x6c>
 8010420:	080139a4 	.word	0x080139a4
 8010424:	08013a15 	.word	0x08013a15

08010428 <__hi0bits>:
 8010428:	0003      	movs	r3, r0
 801042a:	0c02      	lsrs	r2, r0, #16
 801042c:	2000      	movs	r0, #0
 801042e:	4282      	cmp	r2, r0
 8010430:	d101      	bne.n	8010436 <__hi0bits+0xe>
 8010432:	041b      	lsls	r3, r3, #16
 8010434:	3010      	adds	r0, #16
 8010436:	0e1a      	lsrs	r2, r3, #24
 8010438:	d101      	bne.n	801043e <__hi0bits+0x16>
 801043a:	3008      	adds	r0, #8
 801043c:	021b      	lsls	r3, r3, #8
 801043e:	0f1a      	lsrs	r2, r3, #28
 8010440:	d101      	bne.n	8010446 <__hi0bits+0x1e>
 8010442:	3004      	adds	r0, #4
 8010444:	011b      	lsls	r3, r3, #4
 8010446:	0f9a      	lsrs	r2, r3, #30
 8010448:	d101      	bne.n	801044e <__hi0bits+0x26>
 801044a:	3002      	adds	r0, #2
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	2b00      	cmp	r3, #0
 8010450:	db03      	blt.n	801045a <__hi0bits+0x32>
 8010452:	3001      	adds	r0, #1
 8010454:	005b      	lsls	r3, r3, #1
 8010456:	d400      	bmi.n	801045a <__hi0bits+0x32>
 8010458:	2020      	movs	r0, #32
 801045a:	4770      	bx	lr

0801045c <__lo0bits>:
 801045c:	6803      	ldr	r3, [r0, #0]
 801045e:	0001      	movs	r1, r0
 8010460:	2207      	movs	r2, #7
 8010462:	0018      	movs	r0, r3
 8010464:	4010      	ands	r0, r2
 8010466:	4213      	tst	r3, r2
 8010468:	d00d      	beq.n	8010486 <__lo0bits+0x2a>
 801046a:	3a06      	subs	r2, #6
 801046c:	2000      	movs	r0, #0
 801046e:	4213      	tst	r3, r2
 8010470:	d105      	bne.n	801047e <__lo0bits+0x22>
 8010472:	3002      	adds	r0, #2
 8010474:	4203      	tst	r3, r0
 8010476:	d003      	beq.n	8010480 <__lo0bits+0x24>
 8010478:	40d3      	lsrs	r3, r2
 801047a:	0010      	movs	r0, r2
 801047c:	600b      	str	r3, [r1, #0]
 801047e:	4770      	bx	lr
 8010480:	089b      	lsrs	r3, r3, #2
 8010482:	600b      	str	r3, [r1, #0]
 8010484:	e7fb      	b.n	801047e <__lo0bits+0x22>
 8010486:	b29a      	uxth	r2, r3
 8010488:	2a00      	cmp	r2, #0
 801048a:	d101      	bne.n	8010490 <__lo0bits+0x34>
 801048c:	2010      	movs	r0, #16
 801048e:	0c1b      	lsrs	r3, r3, #16
 8010490:	b2da      	uxtb	r2, r3
 8010492:	2a00      	cmp	r2, #0
 8010494:	d101      	bne.n	801049a <__lo0bits+0x3e>
 8010496:	3008      	adds	r0, #8
 8010498:	0a1b      	lsrs	r3, r3, #8
 801049a:	071a      	lsls	r2, r3, #28
 801049c:	d101      	bne.n	80104a2 <__lo0bits+0x46>
 801049e:	3004      	adds	r0, #4
 80104a0:	091b      	lsrs	r3, r3, #4
 80104a2:	079a      	lsls	r2, r3, #30
 80104a4:	d101      	bne.n	80104aa <__lo0bits+0x4e>
 80104a6:	3002      	adds	r0, #2
 80104a8:	089b      	lsrs	r3, r3, #2
 80104aa:	07da      	lsls	r2, r3, #31
 80104ac:	d4e9      	bmi.n	8010482 <__lo0bits+0x26>
 80104ae:	3001      	adds	r0, #1
 80104b0:	085b      	lsrs	r3, r3, #1
 80104b2:	d1e6      	bne.n	8010482 <__lo0bits+0x26>
 80104b4:	2020      	movs	r0, #32
 80104b6:	e7e2      	b.n	801047e <__lo0bits+0x22>

080104b8 <__i2b>:
 80104b8:	b510      	push	{r4, lr}
 80104ba:	000c      	movs	r4, r1
 80104bc:	2101      	movs	r1, #1
 80104be:	f7ff febb 	bl	8010238 <_Balloc>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d107      	bne.n	80104d6 <__i2b+0x1e>
 80104c6:	2146      	movs	r1, #70	; 0x46
 80104c8:	4c05      	ldr	r4, [pc, #20]	; (80104e0 <__i2b+0x28>)
 80104ca:	0002      	movs	r2, r0
 80104cc:	4b05      	ldr	r3, [pc, #20]	; (80104e4 <__i2b+0x2c>)
 80104ce:	0020      	movs	r0, r4
 80104d0:	31ff      	adds	r1, #255	; 0xff
 80104d2:	f7fe fc3d 	bl	800ed50 <__assert_func>
 80104d6:	2301      	movs	r3, #1
 80104d8:	6144      	str	r4, [r0, #20]
 80104da:	6103      	str	r3, [r0, #16]
 80104dc:	bd10      	pop	{r4, pc}
 80104de:	46c0      	nop			; (mov r8, r8)
 80104e0:	08013a15 	.word	0x08013a15
 80104e4:	080139a4 	.word	0x080139a4

080104e8 <__multiply>:
 80104e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ea:	0015      	movs	r5, r2
 80104ec:	690a      	ldr	r2, [r1, #16]
 80104ee:	692b      	ldr	r3, [r5, #16]
 80104f0:	000c      	movs	r4, r1
 80104f2:	b08b      	sub	sp, #44	; 0x2c
 80104f4:	429a      	cmp	r2, r3
 80104f6:	da01      	bge.n	80104fc <__multiply+0x14>
 80104f8:	002c      	movs	r4, r5
 80104fa:	000d      	movs	r5, r1
 80104fc:	6927      	ldr	r7, [r4, #16]
 80104fe:	692e      	ldr	r6, [r5, #16]
 8010500:	6861      	ldr	r1, [r4, #4]
 8010502:	19bb      	adds	r3, r7, r6
 8010504:	9303      	str	r3, [sp, #12]
 8010506:	68a3      	ldr	r3, [r4, #8]
 8010508:	19ba      	adds	r2, r7, r6
 801050a:	4293      	cmp	r3, r2
 801050c:	da00      	bge.n	8010510 <__multiply+0x28>
 801050e:	3101      	adds	r1, #1
 8010510:	f7ff fe92 	bl	8010238 <_Balloc>
 8010514:	9002      	str	r0, [sp, #8]
 8010516:	2800      	cmp	r0, #0
 8010518:	d106      	bne.n	8010528 <__multiply+0x40>
 801051a:	21b1      	movs	r1, #177	; 0xb1
 801051c:	4b48      	ldr	r3, [pc, #288]	; (8010640 <__multiply+0x158>)
 801051e:	4849      	ldr	r0, [pc, #292]	; (8010644 <__multiply+0x15c>)
 8010520:	9a02      	ldr	r2, [sp, #8]
 8010522:	0049      	lsls	r1, r1, #1
 8010524:	f7fe fc14 	bl	800ed50 <__assert_func>
 8010528:	9b02      	ldr	r3, [sp, #8]
 801052a:	2200      	movs	r2, #0
 801052c:	3314      	adds	r3, #20
 801052e:	469c      	mov	ip, r3
 8010530:	19bb      	adds	r3, r7, r6
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	4463      	add	r3, ip
 8010536:	9304      	str	r3, [sp, #16]
 8010538:	4663      	mov	r3, ip
 801053a:	9904      	ldr	r1, [sp, #16]
 801053c:	428b      	cmp	r3, r1
 801053e:	d32a      	bcc.n	8010596 <__multiply+0xae>
 8010540:	0023      	movs	r3, r4
 8010542:	00bf      	lsls	r7, r7, #2
 8010544:	3314      	adds	r3, #20
 8010546:	3514      	adds	r5, #20
 8010548:	9308      	str	r3, [sp, #32]
 801054a:	00b6      	lsls	r6, r6, #2
 801054c:	19db      	adds	r3, r3, r7
 801054e:	9305      	str	r3, [sp, #20]
 8010550:	19ab      	adds	r3, r5, r6
 8010552:	9309      	str	r3, [sp, #36]	; 0x24
 8010554:	2304      	movs	r3, #4
 8010556:	9306      	str	r3, [sp, #24]
 8010558:	0023      	movs	r3, r4
 801055a:	9a05      	ldr	r2, [sp, #20]
 801055c:	3315      	adds	r3, #21
 801055e:	9501      	str	r5, [sp, #4]
 8010560:	429a      	cmp	r2, r3
 8010562:	d305      	bcc.n	8010570 <__multiply+0x88>
 8010564:	1b13      	subs	r3, r2, r4
 8010566:	3b15      	subs	r3, #21
 8010568:	089b      	lsrs	r3, r3, #2
 801056a:	3301      	adds	r3, #1
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	9306      	str	r3, [sp, #24]
 8010570:	9b01      	ldr	r3, [sp, #4]
 8010572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010574:	4293      	cmp	r3, r2
 8010576:	d310      	bcc.n	801059a <__multiply+0xb2>
 8010578:	9b03      	ldr	r3, [sp, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	dd05      	ble.n	801058a <__multiply+0xa2>
 801057e:	9b04      	ldr	r3, [sp, #16]
 8010580:	3b04      	subs	r3, #4
 8010582:	9304      	str	r3, [sp, #16]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d056      	beq.n	8010638 <__multiply+0x150>
 801058a:	9b02      	ldr	r3, [sp, #8]
 801058c:	9a03      	ldr	r2, [sp, #12]
 801058e:	0018      	movs	r0, r3
 8010590:	611a      	str	r2, [r3, #16]
 8010592:	b00b      	add	sp, #44	; 0x2c
 8010594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010596:	c304      	stmia	r3!, {r2}
 8010598:	e7cf      	b.n	801053a <__multiply+0x52>
 801059a:	9b01      	ldr	r3, [sp, #4]
 801059c:	6818      	ldr	r0, [r3, #0]
 801059e:	b280      	uxth	r0, r0
 80105a0:	2800      	cmp	r0, #0
 80105a2:	d01e      	beq.n	80105e2 <__multiply+0xfa>
 80105a4:	4667      	mov	r7, ip
 80105a6:	2500      	movs	r5, #0
 80105a8:	9e08      	ldr	r6, [sp, #32]
 80105aa:	ce02      	ldmia	r6!, {r1}
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	9307      	str	r3, [sp, #28]
 80105b0:	b28b      	uxth	r3, r1
 80105b2:	4343      	muls	r3, r0
 80105b4:	001a      	movs	r2, r3
 80105b6:	466b      	mov	r3, sp
 80105b8:	8b9b      	ldrh	r3, [r3, #28]
 80105ba:	18d3      	adds	r3, r2, r3
 80105bc:	195b      	adds	r3, r3, r5
 80105be:	0c0d      	lsrs	r5, r1, #16
 80105c0:	4345      	muls	r5, r0
 80105c2:	9a07      	ldr	r2, [sp, #28]
 80105c4:	0c11      	lsrs	r1, r2, #16
 80105c6:	1869      	adds	r1, r5, r1
 80105c8:	0c1a      	lsrs	r2, r3, #16
 80105ca:	188a      	adds	r2, r1, r2
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	0c15      	lsrs	r5, r2, #16
 80105d0:	0412      	lsls	r2, r2, #16
 80105d2:	431a      	orrs	r2, r3
 80105d4:	9b05      	ldr	r3, [sp, #20]
 80105d6:	c704      	stmia	r7!, {r2}
 80105d8:	42b3      	cmp	r3, r6
 80105da:	d8e6      	bhi.n	80105aa <__multiply+0xc2>
 80105dc:	4663      	mov	r3, ip
 80105de:	9a06      	ldr	r2, [sp, #24]
 80105e0:	509d      	str	r5, [r3, r2]
 80105e2:	9b01      	ldr	r3, [sp, #4]
 80105e4:	6818      	ldr	r0, [r3, #0]
 80105e6:	0c00      	lsrs	r0, r0, #16
 80105e8:	d020      	beq.n	801062c <__multiply+0x144>
 80105ea:	4663      	mov	r3, ip
 80105ec:	0025      	movs	r5, r4
 80105ee:	4661      	mov	r1, ip
 80105f0:	2700      	movs	r7, #0
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3514      	adds	r5, #20
 80105f6:	682a      	ldr	r2, [r5, #0]
 80105f8:	680e      	ldr	r6, [r1, #0]
 80105fa:	b292      	uxth	r2, r2
 80105fc:	4342      	muls	r2, r0
 80105fe:	0c36      	lsrs	r6, r6, #16
 8010600:	1992      	adds	r2, r2, r6
 8010602:	19d2      	adds	r2, r2, r7
 8010604:	0416      	lsls	r6, r2, #16
 8010606:	b29b      	uxth	r3, r3
 8010608:	431e      	orrs	r6, r3
 801060a:	600e      	str	r6, [r1, #0]
 801060c:	cd40      	ldmia	r5!, {r6}
 801060e:	684b      	ldr	r3, [r1, #4]
 8010610:	0c36      	lsrs	r6, r6, #16
 8010612:	4346      	muls	r6, r0
 8010614:	b29b      	uxth	r3, r3
 8010616:	0c12      	lsrs	r2, r2, #16
 8010618:	18f3      	adds	r3, r6, r3
 801061a:	189b      	adds	r3, r3, r2
 801061c:	9a05      	ldr	r2, [sp, #20]
 801061e:	0c1f      	lsrs	r7, r3, #16
 8010620:	3104      	adds	r1, #4
 8010622:	42aa      	cmp	r2, r5
 8010624:	d8e7      	bhi.n	80105f6 <__multiply+0x10e>
 8010626:	4662      	mov	r2, ip
 8010628:	9906      	ldr	r1, [sp, #24]
 801062a:	5053      	str	r3, [r2, r1]
 801062c:	9b01      	ldr	r3, [sp, #4]
 801062e:	3304      	adds	r3, #4
 8010630:	9301      	str	r3, [sp, #4]
 8010632:	2304      	movs	r3, #4
 8010634:	449c      	add	ip, r3
 8010636:	e79b      	b.n	8010570 <__multiply+0x88>
 8010638:	9b03      	ldr	r3, [sp, #12]
 801063a:	3b01      	subs	r3, #1
 801063c:	9303      	str	r3, [sp, #12]
 801063e:	e79b      	b.n	8010578 <__multiply+0x90>
 8010640:	080139a4 	.word	0x080139a4
 8010644:	08013a15 	.word	0x08013a15

08010648 <__pow5mult>:
 8010648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801064a:	2303      	movs	r3, #3
 801064c:	0015      	movs	r5, r2
 801064e:	0007      	movs	r7, r0
 8010650:	000e      	movs	r6, r1
 8010652:	401a      	ands	r2, r3
 8010654:	421d      	tst	r5, r3
 8010656:	d008      	beq.n	801066a <__pow5mult+0x22>
 8010658:	4925      	ldr	r1, [pc, #148]	; (80106f0 <__pow5mult+0xa8>)
 801065a:	3a01      	subs	r2, #1
 801065c:	0092      	lsls	r2, r2, #2
 801065e:	5852      	ldr	r2, [r2, r1]
 8010660:	2300      	movs	r3, #0
 8010662:	0031      	movs	r1, r6
 8010664:	f7ff fe50 	bl	8010308 <__multadd>
 8010668:	0006      	movs	r6, r0
 801066a:	10ad      	asrs	r5, r5, #2
 801066c:	d03d      	beq.n	80106ea <__pow5mult+0xa2>
 801066e:	69fc      	ldr	r4, [r7, #28]
 8010670:	2c00      	cmp	r4, #0
 8010672:	d10f      	bne.n	8010694 <__pow5mult+0x4c>
 8010674:	2010      	movs	r0, #16
 8010676:	f7fc fa0f 	bl	800ca98 <malloc>
 801067a:	1e02      	subs	r2, r0, #0
 801067c:	61f8      	str	r0, [r7, #28]
 801067e:	d105      	bne.n	801068c <__pow5mult+0x44>
 8010680:	21b4      	movs	r1, #180	; 0xb4
 8010682:	4b1c      	ldr	r3, [pc, #112]	; (80106f4 <__pow5mult+0xac>)
 8010684:	481c      	ldr	r0, [pc, #112]	; (80106f8 <__pow5mult+0xb0>)
 8010686:	31ff      	adds	r1, #255	; 0xff
 8010688:	f7fe fb62 	bl	800ed50 <__assert_func>
 801068c:	6044      	str	r4, [r0, #4]
 801068e:	6084      	str	r4, [r0, #8]
 8010690:	6004      	str	r4, [r0, #0]
 8010692:	60c4      	str	r4, [r0, #12]
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	689c      	ldr	r4, [r3, #8]
 8010698:	9301      	str	r3, [sp, #4]
 801069a:	2c00      	cmp	r4, #0
 801069c:	d108      	bne.n	80106b0 <__pow5mult+0x68>
 801069e:	0038      	movs	r0, r7
 80106a0:	4916      	ldr	r1, [pc, #88]	; (80106fc <__pow5mult+0xb4>)
 80106a2:	f7ff ff09 	bl	80104b8 <__i2b>
 80106a6:	9b01      	ldr	r3, [sp, #4]
 80106a8:	0004      	movs	r4, r0
 80106aa:	6098      	str	r0, [r3, #8]
 80106ac:	2300      	movs	r3, #0
 80106ae:	6003      	str	r3, [r0, #0]
 80106b0:	2301      	movs	r3, #1
 80106b2:	421d      	tst	r5, r3
 80106b4:	d00a      	beq.n	80106cc <__pow5mult+0x84>
 80106b6:	0031      	movs	r1, r6
 80106b8:	0022      	movs	r2, r4
 80106ba:	0038      	movs	r0, r7
 80106bc:	f7ff ff14 	bl	80104e8 <__multiply>
 80106c0:	0031      	movs	r1, r6
 80106c2:	9001      	str	r0, [sp, #4]
 80106c4:	0038      	movs	r0, r7
 80106c6:	f7ff fdfb 	bl	80102c0 <_Bfree>
 80106ca:	9e01      	ldr	r6, [sp, #4]
 80106cc:	106d      	asrs	r5, r5, #1
 80106ce:	d00c      	beq.n	80106ea <__pow5mult+0xa2>
 80106d0:	6820      	ldr	r0, [r4, #0]
 80106d2:	2800      	cmp	r0, #0
 80106d4:	d107      	bne.n	80106e6 <__pow5mult+0x9e>
 80106d6:	0022      	movs	r2, r4
 80106d8:	0021      	movs	r1, r4
 80106da:	0038      	movs	r0, r7
 80106dc:	f7ff ff04 	bl	80104e8 <__multiply>
 80106e0:	2300      	movs	r3, #0
 80106e2:	6020      	str	r0, [r4, #0]
 80106e4:	6003      	str	r3, [r0, #0]
 80106e6:	0004      	movs	r4, r0
 80106e8:	e7e2      	b.n	80106b0 <__pow5mult+0x68>
 80106ea:	0030      	movs	r0, r6
 80106ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80106ee:	46c0      	nop			; (mov r8, r8)
 80106f0:	08013b60 	.word	0x08013b60
 80106f4:	0801388a 	.word	0x0801388a
 80106f8:	08013a15 	.word	0x08013a15
 80106fc:	00000271 	.word	0x00000271

08010700 <__lshift>:
 8010700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010702:	000c      	movs	r4, r1
 8010704:	0017      	movs	r7, r2
 8010706:	6923      	ldr	r3, [r4, #16]
 8010708:	1155      	asrs	r5, r2, #5
 801070a:	b087      	sub	sp, #28
 801070c:	18eb      	adds	r3, r5, r3
 801070e:	9302      	str	r3, [sp, #8]
 8010710:	3301      	adds	r3, #1
 8010712:	9301      	str	r3, [sp, #4]
 8010714:	6849      	ldr	r1, [r1, #4]
 8010716:	68a3      	ldr	r3, [r4, #8]
 8010718:	9004      	str	r0, [sp, #16]
 801071a:	9a01      	ldr	r2, [sp, #4]
 801071c:	4293      	cmp	r3, r2
 801071e:	db10      	blt.n	8010742 <__lshift+0x42>
 8010720:	9804      	ldr	r0, [sp, #16]
 8010722:	f7ff fd89 	bl	8010238 <_Balloc>
 8010726:	2300      	movs	r3, #0
 8010728:	0002      	movs	r2, r0
 801072a:	0006      	movs	r6, r0
 801072c:	0019      	movs	r1, r3
 801072e:	3214      	adds	r2, #20
 8010730:	4298      	cmp	r0, r3
 8010732:	d10c      	bne.n	801074e <__lshift+0x4e>
 8010734:	31df      	adds	r1, #223	; 0xdf
 8010736:	0032      	movs	r2, r6
 8010738:	4b26      	ldr	r3, [pc, #152]	; (80107d4 <__lshift+0xd4>)
 801073a:	4827      	ldr	r0, [pc, #156]	; (80107d8 <__lshift+0xd8>)
 801073c:	31ff      	adds	r1, #255	; 0xff
 801073e:	f7fe fb07 	bl	800ed50 <__assert_func>
 8010742:	3101      	adds	r1, #1
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	e7e8      	b.n	801071a <__lshift+0x1a>
 8010748:	0098      	lsls	r0, r3, #2
 801074a:	5011      	str	r1, [r2, r0]
 801074c:	3301      	adds	r3, #1
 801074e:	42ab      	cmp	r3, r5
 8010750:	dbfa      	blt.n	8010748 <__lshift+0x48>
 8010752:	43eb      	mvns	r3, r5
 8010754:	17db      	asrs	r3, r3, #31
 8010756:	401d      	ands	r5, r3
 8010758:	211f      	movs	r1, #31
 801075a:	0023      	movs	r3, r4
 801075c:	0038      	movs	r0, r7
 801075e:	00ad      	lsls	r5, r5, #2
 8010760:	1955      	adds	r5, r2, r5
 8010762:	6922      	ldr	r2, [r4, #16]
 8010764:	3314      	adds	r3, #20
 8010766:	0092      	lsls	r2, r2, #2
 8010768:	4008      	ands	r0, r1
 801076a:	4684      	mov	ip, r0
 801076c:	189a      	adds	r2, r3, r2
 801076e:	420f      	tst	r7, r1
 8010770:	d02a      	beq.n	80107c8 <__lshift+0xc8>
 8010772:	3101      	adds	r1, #1
 8010774:	1a09      	subs	r1, r1, r0
 8010776:	9105      	str	r1, [sp, #20]
 8010778:	2100      	movs	r1, #0
 801077a:	9503      	str	r5, [sp, #12]
 801077c:	4667      	mov	r7, ip
 801077e:	6818      	ldr	r0, [r3, #0]
 8010780:	40b8      	lsls	r0, r7
 8010782:	4308      	orrs	r0, r1
 8010784:	9903      	ldr	r1, [sp, #12]
 8010786:	c101      	stmia	r1!, {r0}
 8010788:	9103      	str	r1, [sp, #12]
 801078a:	9805      	ldr	r0, [sp, #20]
 801078c:	cb02      	ldmia	r3!, {r1}
 801078e:	40c1      	lsrs	r1, r0
 8010790:	429a      	cmp	r2, r3
 8010792:	d8f3      	bhi.n	801077c <__lshift+0x7c>
 8010794:	0020      	movs	r0, r4
 8010796:	3015      	adds	r0, #21
 8010798:	2304      	movs	r3, #4
 801079a:	4282      	cmp	r2, r0
 801079c:	d304      	bcc.n	80107a8 <__lshift+0xa8>
 801079e:	1b13      	subs	r3, r2, r4
 80107a0:	3b15      	subs	r3, #21
 80107a2:	089b      	lsrs	r3, r3, #2
 80107a4:	3301      	adds	r3, #1
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	50e9      	str	r1, [r5, r3]
 80107aa:	2900      	cmp	r1, #0
 80107ac:	d002      	beq.n	80107b4 <__lshift+0xb4>
 80107ae:	9b02      	ldr	r3, [sp, #8]
 80107b0:	3302      	adds	r3, #2
 80107b2:	9301      	str	r3, [sp, #4]
 80107b4:	9b01      	ldr	r3, [sp, #4]
 80107b6:	9804      	ldr	r0, [sp, #16]
 80107b8:	3b01      	subs	r3, #1
 80107ba:	0021      	movs	r1, r4
 80107bc:	6133      	str	r3, [r6, #16]
 80107be:	f7ff fd7f 	bl	80102c0 <_Bfree>
 80107c2:	0030      	movs	r0, r6
 80107c4:	b007      	add	sp, #28
 80107c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107c8:	cb02      	ldmia	r3!, {r1}
 80107ca:	c502      	stmia	r5!, {r1}
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d8fb      	bhi.n	80107c8 <__lshift+0xc8>
 80107d0:	e7f0      	b.n	80107b4 <__lshift+0xb4>
 80107d2:	46c0      	nop			; (mov r8, r8)
 80107d4:	080139a4 	.word	0x080139a4
 80107d8:	08013a15 	.word	0x08013a15

080107dc <__mcmp>:
 80107dc:	b530      	push	{r4, r5, lr}
 80107de:	690b      	ldr	r3, [r1, #16]
 80107e0:	6904      	ldr	r4, [r0, #16]
 80107e2:	0002      	movs	r2, r0
 80107e4:	1ae0      	subs	r0, r4, r3
 80107e6:	429c      	cmp	r4, r3
 80107e8:	d10e      	bne.n	8010808 <__mcmp+0x2c>
 80107ea:	3214      	adds	r2, #20
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	3114      	adds	r1, #20
 80107f0:	0014      	movs	r4, r2
 80107f2:	18c9      	adds	r1, r1, r3
 80107f4:	18d2      	adds	r2, r2, r3
 80107f6:	3a04      	subs	r2, #4
 80107f8:	3904      	subs	r1, #4
 80107fa:	6815      	ldr	r5, [r2, #0]
 80107fc:	680b      	ldr	r3, [r1, #0]
 80107fe:	429d      	cmp	r5, r3
 8010800:	d003      	beq.n	801080a <__mcmp+0x2e>
 8010802:	2001      	movs	r0, #1
 8010804:	429d      	cmp	r5, r3
 8010806:	d303      	bcc.n	8010810 <__mcmp+0x34>
 8010808:	bd30      	pop	{r4, r5, pc}
 801080a:	4294      	cmp	r4, r2
 801080c:	d3f3      	bcc.n	80107f6 <__mcmp+0x1a>
 801080e:	e7fb      	b.n	8010808 <__mcmp+0x2c>
 8010810:	4240      	negs	r0, r0
 8010812:	e7f9      	b.n	8010808 <__mcmp+0x2c>

08010814 <__mdiff>:
 8010814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010816:	000e      	movs	r6, r1
 8010818:	0007      	movs	r7, r0
 801081a:	0011      	movs	r1, r2
 801081c:	0030      	movs	r0, r6
 801081e:	b087      	sub	sp, #28
 8010820:	0014      	movs	r4, r2
 8010822:	f7ff ffdb 	bl	80107dc <__mcmp>
 8010826:	1e05      	subs	r5, r0, #0
 8010828:	d110      	bne.n	801084c <__mdiff+0x38>
 801082a:	0001      	movs	r1, r0
 801082c:	0038      	movs	r0, r7
 801082e:	f7ff fd03 	bl	8010238 <_Balloc>
 8010832:	1e02      	subs	r2, r0, #0
 8010834:	d104      	bne.n	8010840 <__mdiff+0x2c>
 8010836:	4b3f      	ldr	r3, [pc, #252]	; (8010934 <__mdiff+0x120>)
 8010838:	483f      	ldr	r0, [pc, #252]	; (8010938 <__mdiff+0x124>)
 801083a:	4940      	ldr	r1, [pc, #256]	; (801093c <__mdiff+0x128>)
 801083c:	f7fe fa88 	bl	800ed50 <__assert_func>
 8010840:	2301      	movs	r3, #1
 8010842:	6145      	str	r5, [r0, #20]
 8010844:	6103      	str	r3, [r0, #16]
 8010846:	0010      	movs	r0, r2
 8010848:	b007      	add	sp, #28
 801084a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801084c:	2301      	movs	r3, #1
 801084e:	9301      	str	r3, [sp, #4]
 8010850:	2800      	cmp	r0, #0
 8010852:	db04      	blt.n	801085e <__mdiff+0x4a>
 8010854:	0023      	movs	r3, r4
 8010856:	0034      	movs	r4, r6
 8010858:	001e      	movs	r6, r3
 801085a:	2300      	movs	r3, #0
 801085c:	9301      	str	r3, [sp, #4]
 801085e:	0038      	movs	r0, r7
 8010860:	6861      	ldr	r1, [r4, #4]
 8010862:	f7ff fce9 	bl	8010238 <_Balloc>
 8010866:	1e02      	subs	r2, r0, #0
 8010868:	d103      	bne.n	8010872 <__mdiff+0x5e>
 801086a:	4b32      	ldr	r3, [pc, #200]	; (8010934 <__mdiff+0x120>)
 801086c:	4832      	ldr	r0, [pc, #200]	; (8010938 <__mdiff+0x124>)
 801086e:	4934      	ldr	r1, [pc, #208]	; (8010940 <__mdiff+0x12c>)
 8010870:	e7e4      	b.n	801083c <__mdiff+0x28>
 8010872:	9b01      	ldr	r3, [sp, #4]
 8010874:	2700      	movs	r7, #0
 8010876:	60c3      	str	r3, [r0, #12]
 8010878:	6920      	ldr	r0, [r4, #16]
 801087a:	3414      	adds	r4, #20
 801087c:	0083      	lsls	r3, r0, #2
 801087e:	18e3      	adds	r3, r4, r3
 8010880:	0021      	movs	r1, r4
 8010882:	9401      	str	r4, [sp, #4]
 8010884:	0034      	movs	r4, r6
 8010886:	9302      	str	r3, [sp, #8]
 8010888:	6933      	ldr	r3, [r6, #16]
 801088a:	3414      	adds	r4, #20
 801088c:	009b      	lsls	r3, r3, #2
 801088e:	18e3      	adds	r3, r4, r3
 8010890:	9303      	str	r3, [sp, #12]
 8010892:	0013      	movs	r3, r2
 8010894:	3314      	adds	r3, #20
 8010896:	469c      	mov	ip, r3
 8010898:	9305      	str	r3, [sp, #20]
 801089a:	9104      	str	r1, [sp, #16]
 801089c:	9b04      	ldr	r3, [sp, #16]
 801089e:	cc02      	ldmia	r4!, {r1}
 80108a0:	cb20      	ldmia	r3!, {r5}
 80108a2:	9304      	str	r3, [sp, #16]
 80108a4:	b2ab      	uxth	r3, r5
 80108a6:	19df      	adds	r7, r3, r7
 80108a8:	b28b      	uxth	r3, r1
 80108aa:	1afb      	subs	r3, r7, r3
 80108ac:	0c09      	lsrs	r1, r1, #16
 80108ae:	0c2d      	lsrs	r5, r5, #16
 80108b0:	1a6d      	subs	r5, r5, r1
 80108b2:	1419      	asrs	r1, r3, #16
 80108b4:	1869      	adds	r1, r5, r1
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	140f      	asrs	r7, r1, #16
 80108ba:	0409      	lsls	r1, r1, #16
 80108bc:	4319      	orrs	r1, r3
 80108be:	4663      	mov	r3, ip
 80108c0:	c302      	stmia	r3!, {r1}
 80108c2:	469c      	mov	ip, r3
 80108c4:	9b03      	ldr	r3, [sp, #12]
 80108c6:	42a3      	cmp	r3, r4
 80108c8:	d8e8      	bhi.n	801089c <__mdiff+0x88>
 80108ca:	0031      	movs	r1, r6
 80108cc:	9c03      	ldr	r4, [sp, #12]
 80108ce:	3115      	adds	r1, #21
 80108d0:	2304      	movs	r3, #4
 80108d2:	428c      	cmp	r4, r1
 80108d4:	d304      	bcc.n	80108e0 <__mdiff+0xcc>
 80108d6:	1ba3      	subs	r3, r4, r6
 80108d8:	3b15      	subs	r3, #21
 80108da:	089b      	lsrs	r3, r3, #2
 80108dc:	3301      	adds	r3, #1
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	9901      	ldr	r1, [sp, #4]
 80108e2:	18cd      	adds	r5, r1, r3
 80108e4:	9905      	ldr	r1, [sp, #20]
 80108e6:	002e      	movs	r6, r5
 80108e8:	18cb      	adds	r3, r1, r3
 80108ea:	469c      	mov	ip, r3
 80108ec:	9902      	ldr	r1, [sp, #8]
 80108ee:	428e      	cmp	r6, r1
 80108f0:	d310      	bcc.n	8010914 <__mdiff+0x100>
 80108f2:	9e02      	ldr	r6, [sp, #8]
 80108f4:	1ee9      	subs	r1, r5, #3
 80108f6:	2400      	movs	r4, #0
 80108f8:	428e      	cmp	r6, r1
 80108fa:	d304      	bcc.n	8010906 <__mdiff+0xf2>
 80108fc:	0031      	movs	r1, r6
 80108fe:	3103      	adds	r1, #3
 8010900:	1b49      	subs	r1, r1, r5
 8010902:	0889      	lsrs	r1, r1, #2
 8010904:	008c      	lsls	r4, r1, #2
 8010906:	191b      	adds	r3, r3, r4
 8010908:	3b04      	subs	r3, #4
 801090a:	6819      	ldr	r1, [r3, #0]
 801090c:	2900      	cmp	r1, #0
 801090e:	d00f      	beq.n	8010930 <__mdiff+0x11c>
 8010910:	6110      	str	r0, [r2, #16]
 8010912:	e798      	b.n	8010846 <__mdiff+0x32>
 8010914:	ce02      	ldmia	r6!, {r1}
 8010916:	b28c      	uxth	r4, r1
 8010918:	19e4      	adds	r4, r4, r7
 801091a:	0c0f      	lsrs	r7, r1, #16
 801091c:	1421      	asrs	r1, r4, #16
 801091e:	1879      	adds	r1, r7, r1
 8010920:	b2a4      	uxth	r4, r4
 8010922:	140f      	asrs	r7, r1, #16
 8010924:	0409      	lsls	r1, r1, #16
 8010926:	4321      	orrs	r1, r4
 8010928:	4664      	mov	r4, ip
 801092a:	c402      	stmia	r4!, {r1}
 801092c:	46a4      	mov	ip, r4
 801092e:	e7dd      	b.n	80108ec <__mdiff+0xd8>
 8010930:	3801      	subs	r0, #1
 8010932:	e7e9      	b.n	8010908 <__mdiff+0xf4>
 8010934:	080139a4 	.word	0x080139a4
 8010938:	08013a15 	.word	0x08013a15
 801093c:	00000237 	.word	0x00000237
 8010940:	00000245 	.word	0x00000245

08010944 <__ulp>:
 8010944:	2000      	movs	r0, #0
 8010946:	4b0b      	ldr	r3, [pc, #44]	; (8010974 <__ulp+0x30>)
 8010948:	4019      	ands	r1, r3
 801094a:	4b0b      	ldr	r3, [pc, #44]	; (8010978 <__ulp+0x34>)
 801094c:	18c9      	adds	r1, r1, r3
 801094e:	4281      	cmp	r1, r0
 8010950:	dc06      	bgt.n	8010960 <__ulp+0x1c>
 8010952:	4249      	negs	r1, r1
 8010954:	150b      	asrs	r3, r1, #20
 8010956:	2b13      	cmp	r3, #19
 8010958:	dc03      	bgt.n	8010962 <__ulp+0x1e>
 801095a:	2180      	movs	r1, #128	; 0x80
 801095c:	0309      	lsls	r1, r1, #12
 801095e:	4119      	asrs	r1, r3
 8010960:	4770      	bx	lr
 8010962:	3b14      	subs	r3, #20
 8010964:	2001      	movs	r0, #1
 8010966:	2b1e      	cmp	r3, #30
 8010968:	dc02      	bgt.n	8010970 <__ulp+0x2c>
 801096a:	2080      	movs	r0, #128	; 0x80
 801096c:	0600      	lsls	r0, r0, #24
 801096e:	40d8      	lsrs	r0, r3
 8010970:	2100      	movs	r1, #0
 8010972:	e7f5      	b.n	8010960 <__ulp+0x1c>
 8010974:	7ff00000 	.word	0x7ff00000
 8010978:	fcc00000 	.word	0xfcc00000

0801097c <__b2d>:
 801097c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801097e:	0006      	movs	r6, r0
 8010980:	6903      	ldr	r3, [r0, #16]
 8010982:	3614      	adds	r6, #20
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	18f3      	adds	r3, r6, r3
 8010988:	1f1d      	subs	r5, r3, #4
 801098a:	682c      	ldr	r4, [r5, #0]
 801098c:	000f      	movs	r7, r1
 801098e:	0020      	movs	r0, r4
 8010990:	9301      	str	r3, [sp, #4]
 8010992:	f7ff fd49 	bl	8010428 <__hi0bits>
 8010996:	2220      	movs	r2, #32
 8010998:	1a12      	subs	r2, r2, r0
 801099a:	603a      	str	r2, [r7, #0]
 801099c:	0003      	movs	r3, r0
 801099e:	4a1c      	ldr	r2, [pc, #112]	; (8010a10 <__b2d+0x94>)
 80109a0:	280a      	cmp	r0, #10
 80109a2:	dc15      	bgt.n	80109d0 <__b2d+0x54>
 80109a4:	210b      	movs	r1, #11
 80109a6:	0027      	movs	r7, r4
 80109a8:	1a09      	subs	r1, r1, r0
 80109aa:	40cf      	lsrs	r7, r1
 80109ac:	433a      	orrs	r2, r7
 80109ae:	468c      	mov	ip, r1
 80109b0:	0011      	movs	r1, r2
 80109b2:	2200      	movs	r2, #0
 80109b4:	42ae      	cmp	r6, r5
 80109b6:	d202      	bcs.n	80109be <__b2d+0x42>
 80109b8:	9a01      	ldr	r2, [sp, #4]
 80109ba:	3a08      	subs	r2, #8
 80109bc:	6812      	ldr	r2, [r2, #0]
 80109be:	3315      	adds	r3, #21
 80109c0:	409c      	lsls	r4, r3
 80109c2:	4663      	mov	r3, ip
 80109c4:	0027      	movs	r7, r4
 80109c6:	40da      	lsrs	r2, r3
 80109c8:	4317      	orrs	r7, r2
 80109ca:	0038      	movs	r0, r7
 80109cc:	b003      	add	sp, #12
 80109ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109d0:	2700      	movs	r7, #0
 80109d2:	42ae      	cmp	r6, r5
 80109d4:	d202      	bcs.n	80109dc <__b2d+0x60>
 80109d6:	9d01      	ldr	r5, [sp, #4]
 80109d8:	3d08      	subs	r5, #8
 80109da:	682f      	ldr	r7, [r5, #0]
 80109dc:	210b      	movs	r1, #11
 80109de:	4249      	negs	r1, r1
 80109e0:	468c      	mov	ip, r1
 80109e2:	449c      	add	ip, r3
 80109e4:	2b0b      	cmp	r3, #11
 80109e6:	d010      	beq.n	8010a0a <__b2d+0x8e>
 80109e8:	4661      	mov	r1, ip
 80109ea:	2320      	movs	r3, #32
 80109ec:	408c      	lsls	r4, r1
 80109ee:	1a5b      	subs	r3, r3, r1
 80109f0:	0039      	movs	r1, r7
 80109f2:	40d9      	lsrs	r1, r3
 80109f4:	430c      	orrs	r4, r1
 80109f6:	4322      	orrs	r2, r4
 80109f8:	0011      	movs	r1, r2
 80109fa:	2200      	movs	r2, #0
 80109fc:	42b5      	cmp	r5, r6
 80109fe:	d901      	bls.n	8010a04 <__b2d+0x88>
 8010a00:	3d04      	subs	r5, #4
 8010a02:	682a      	ldr	r2, [r5, #0]
 8010a04:	4664      	mov	r4, ip
 8010a06:	40a7      	lsls	r7, r4
 8010a08:	e7dd      	b.n	80109c6 <__b2d+0x4a>
 8010a0a:	4322      	orrs	r2, r4
 8010a0c:	0011      	movs	r1, r2
 8010a0e:	e7dc      	b.n	80109ca <__b2d+0x4e>
 8010a10:	3ff00000 	.word	0x3ff00000

08010a14 <__d2b>:
 8010a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a16:	2101      	movs	r1, #1
 8010a18:	0014      	movs	r4, r2
 8010a1a:	001d      	movs	r5, r3
 8010a1c:	9f08      	ldr	r7, [sp, #32]
 8010a1e:	f7ff fc0b 	bl	8010238 <_Balloc>
 8010a22:	1e06      	subs	r6, r0, #0
 8010a24:	d105      	bne.n	8010a32 <__d2b+0x1e>
 8010a26:	0032      	movs	r2, r6
 8010a28:	4b24      	ldr	r3, [pc, #144]	; (8010abc <__d2b+0xa8>)
 8010a2a:	4825      	ldr	r0, [pc, #148]	; (8010ac0 <__d2b+0xac>)
 8010a2c:	4925      	ldr	r1, [pc, #148]	; (8010ac4 <__d2b+0xb0>)
 8010a2e:	f7fe f98f 	bl	800ed50 <__assert_func>
 8010a32:	032b      	lsls	r3, r5, #12
 8010a34:	006d      	lsls	r5, r5, #1
 8010a36:	0b1b      	lsrs	r3, r3, #12
 8010a38:	0d6d      	lsrs	r5, r5, #21
 8010a3a:	d125      	bne.n	8010a88 <__d2b+0x74>
 8010a3c:	9301      	str	r3, [sp, #4]
 8010a3e:	2c00      	cmp	r4, #0
 8010a40:	d028      	beq.n	8010a94 <__d2b+0x80>
 8010a42:	4668      	mov	r0, sp
 8010a44:	9400      	str	r4, [sp, #0]
 8010a46:	f7ff fd09 	bl	801045c <__lo0bits>
 8010a4a:	9b01      	ldr	r3, [sp, #4]
 8010a4c:	9900      	ldr	r1, [sp, #0]
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	d01e      	beq.n	8010a90 <__d2b+0x7c>
 8010a52:	2220      	movs	r2, #32
 8010a54:	001c      	movs	r4, r3
 8010a56:	1a12      	subs	r2, r2, r0
 8010a58:	4094      	lsls	r4, r2
 8010a5a:	0022      	movs	r2, r4
 8010a5c:	40c3      	lsrs	r3, r0
 8010a5e:	430a      	orrs	r2, r1
 8010a60:	6172      	str	r2, [r6, #20]
 8010a62:	9301      	str	r3, [sp, #4]
 8010a64:	9c01      	ldr	r4, [sp, #4]
 8010a66:	61b4      	str	r4, [r6, #24]
 8010a68:	1e63      	subs	r3, r4, #1
 8010a6a:	419c      	sbcs	r4, r3
 8010a6c:	3401      	adds	r4, #1
 8010a6e:	6134      	str	r4, [r6, #16]
 8010a70:	2d00      	cmp	r5, #0
 8010a72:	d017      	beq.n	8010aa4 <__d2b+0x90>
 8010a74:	2435      	movs	r4, #53	; 0x35
 8010a76:	4b14      	ldr	r3, [pc, #80]	; (8010ac8 <__d2b+0xb4>)
 8010a78:	18ed      	adds	r5, r5, r3
 8010a7a:	182d      	adds	r5, r5, r0
 8010a7c:	603d      	str	r5, [r7, #0]
 8010a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a80:	1a24      	subs	r4, r4, r0
 8010a82:	601c      	str	r4, [r3, #0]
 8010a84:	0030      	movs	r0, r6
 8010a86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010a88:	2280      	movs	r2, #128	; 0x80
 8010a8a:	0352      	lsls	r2, r2, #13
 8010a8c:	4313      	orrs	r3, r2
 8010a8e:	e7d5      	b.n	8010a3c <__d2b+0x28>
 8010a90:	6171      	str	r1, [r6, #20]
 8010a92:	e7e7      	b.n	8010a64 <__d2b+0x50>
 8010a94:	a801      	add	r0, sp, #4
 8010a96:	f7ff fce1 	bl	801045c <__lo0bits>
 8010a9a:	9b01      	ldr	r3, [sp, #4]
 8010a9c:	2401      	movs	r4, #1
 8010a9e:	6173      	str	r3, [r6, #20]
 8010aa0:	3020      	adds	r0, #32
 8010aa2:	e7e4      	b.n	8010a6e <__d2b+0x5a>
 8010aa4:	4b09      	ldr	r3, [pc, #36]	; (8010acc <__d2b+0xb8>)
 8010aa6:	18c0      	adds	r0, r0, r3
 8010aa8:	4b09      	ldr	r3, [pc, #36]	; (8010ad0 <__d2b+0xbc>)
 8010aaa:	6038      	str	r0, [r7, #0]
 8010aac:	18e3      	adds	r3, r4, r3
 8010aae:	009b      	lsls	r3, r3, #2
 8010ab0:	18f3      	adds	r3, r6, r3
 8010ab2:	6958      	ldr	r0, [r3, #20]
 8010ab4:	f7ff fcb8 	bl	8010428 <__hi0bits>
 8010ab8:	0164      	lsls	r4, r4, #5
 8010aba:	e7e0      	b.n	8010a7e <__d2b+0x6a>
 8010abc:	080139a4 	.word	0x080139a4
 8010ac0:	08013a15 	.word	0x08013a15
 8010ac4:	0000030f 	.word	0x0000030f
 8010ac8:	fffffbcd 	.word	0xfffffbcd
 8010acc:	fffffbce 	.word	0xfffffbce
 8010ad0:	3fffffff 	.word	0x3fffffff

08010ad4 <__ratio>:
 8010ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ad6:	b087      	sub	sp, #28
 8010ad8:	000f      	movs	r7, r1
 8010ada:	a904      	add	r1, sp, #16
 8010adc:	0006      	movs	r6, r0
 8010ade:	f7ff ff4d 	bl	801097c <__b2d>
 8010ae2:	9000      	str	r0, [sp, #0]
 8010ae4:	9101      	str	r1, [sp, #4]
 8010ae6:	9c00      	ldr	r4, [sp, #0]
 8010ae8:	9d01      	ldr	r5, [sp, #4]
 8010aea:	0038      	movs	r0, r7
 8010aec:	a905      	add	r1, sp, #20
 8010aee:	f7ff ff45 	bl	801097c <__b2d>
 8010af2:	9002      	str	r0, [sp, #8]
 8010af4:	9103      	str	r1, [sp, #12]
 8010af6:	9a02      	ldr	r2, [sp, #8]
 8010af8:	9b03      	ldr	r3, [sp, #12]
 8010afa:	6930      	ldr	r0, [r6, #16]
 8010afc:	6939      	ldr	r1, [r7, #16]
 8010afe:	9e04      	ldr	r6, [sp, #16]
 8010b00:	1a40      	subs	r0, r0, r1
 8010b02:	9905      	ldr	r1, [sp, #20]
 8010b04:	0140      	lsls	r0, r0, #5
 8010b06:	1a71      	subs	r1, r6, r1
 8010b08:	1841      	adds	r1, r0, r1
 8010b0a:	0508      	lsls	r0, r1, #20
 8010b0c:	2900      	cmp	r1, #0
 8010b0e:	dd07      	ble.n	8010b20 <__ratio+0x4c>
 8010b10:	9901      	ldr	r1, [sp, #4]
 8010b12:	1845      	adds	r5, r0, r1
 8010b14:	0020      	movs	r0, r4
 8010b16:	0029      	movs	r1, r5
 8010b18:	f7f0 ffe2 	bl	8001ae0 <__aeabi_ddiv>
 8010b1c:	b007      	add	sp, #28
 8010b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b20:	9903      	ldr	r1, [sp, #12]
 8010b22:	1a0b      	subs	r3, r1, r0
 8010b24:	e7f6      	b.n	8010b14 <__ratio+0x40>

08010b26 <__copybits>:
 8010b26:	b570      	push	{r4, r5, r6, lr}
 8010b28:	0014      	movs	r4, r2
 8010b2a:	0005      	movs	r5, r0
 8010b2c:	3901      	subs	r1, #1
 8010b2e:	6913      	ldr	r3, [r2, #16]
 8010b30:	1149      	asrs	r1, r1, #5
 8010b32:	3101      	adds	r1, #1
 8010b34:	0089      	lsls	r1, r1, #2
 8010b36:	3414      	adds	r4, #20
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	1841      	adds	r1, r0, r1
 8010b3c:	18e3      	adds	r3, r4, r3
 8010b3e:	42a3      	cmp	r3, r4
 8010b40:	d80d      	bhi.n	8010b5e <__copybits+0x38>
 8010b42:	0014      	movs	r4, r2
 8010b44:	3411      	adds	r4, #17
 8010b46:	2500      	movs	r5, #0
 8010b48:	429c      	cmp	r4, r3
 8010b4a:	d803      	bhi.n	8010b54 <__copybits+0x2e>
 8010b4c:	1a9b      	subs	r3, r3, r2
 8010b4e:	3b11      	subs	r3, #17
 8010b50:	089b      	lsrs	r3, r3, #2
 8010b52:	009d      	lsls	r5, r3, #2
 8010b54:	2300      	movs	r3, #0
 8010b56:	1940      	adds	r0, r0, r5
 8010b58:	4281      	cmp	r1, r0
 8010b5a:	d803      	bhi.n	8010b64 <__copybits+0x3e>
 8010b5c:	bd70      	pop	{r4, r5, r6, pc}
 8010b5e:	cc40      	ldmia	r4!, {r6}
 8010b60:	c540      	stmia	r5!, {r6}
 8010b62:	e7ec      	b.n	8010b3e <__copybits+0x18>
 8010b64:	c008      	stmia	r0!, {r3}
 8010b66:	e7f7      	b.n	8010b58 <__copybits+0x32>

08010b68 <__any_on>:
 8010b68:	0002      	movs	r2, r0
 8010b6a:	6900      	ldr	r0, [r0, #16]
 8010b6c:	b510      	push	{r4, lr}
 8010b6e:	3214      	adds	r2, #20
 8010b70:	114b      	asrs	r3, r1, #5
 8010b72:	4298      	cmp	r0, r3
 8010b74:	db13      	blt.n	8010b9e <__any_on+0x36>
 8010b76:	dd0c      	ble.n	8010b92 <__any_on+0x2a>
 8010b78:	241f      	movs	r4, #31
 8010b7a:	0008      	movs	r0, r1
 8010b7c:	4020      	ands	r0, r4
 8010b7e:	4221      	tst	r1, r4
 8010b80:	d007      	beq.n	8010b92 <__any_on+0x2a>
 8010b82:	0099      	lsls	r1, r3, #2
 8010b84:	588c      	ldr	r4, [r1, r2]
 8010b86:	0021      	movs	r1, r4
 8010b88:	40c1      	lsrs	r1, r0
 8010b8a:	4081      	lsls	r1, r0
 8010b8c:	2001      	movs	r0, #1
 8010b8e:	428c      	cmp	r4, r1
 8010b90:	d104      	bne.n	8010b9c <__any_on+0x34>
 8010b92:	009b      	lsls	r3, r3, #2
 8010b94:	18d3      	adds	r3, r2, r3
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d803      	bhi.n	8010ba2 <__any_on+0x3a>
 8010b9a:	2000      	movs	r0, #0
 8010b9c:	bd10      	pop	{r4, pc}
 8010b9e:	0003      	movs	r3, r0
 8010ba0:	e7f7      	b.n	8010b92 <__any_on+0x2a>
 8010ba2:	3b04      	subs	r3, #4
 8010ba4:	6819      	ldr	r1, [r3, #0]
 8010ba6:	2900      	cmp	r1, #0
 8010ba8:	d0f5      	beq.n	8010b96 <__any_on+0x2e>
 8010baa:	2001      	movs	r0, #1
 8010bac:	e7f6      	b.n	8010b9c <__any_on+0x34>

08010bae <__ascii_wctomb>:
 8010bae:	0003      	movs	r3, r0
 8010bb0:	1e08      	subs	r0, r1, #0
 8010bb2:	d005      	beq.n	8010bc0 <__ascii_wctomb+0x12>
 8010bb4:	2aff      	cmp	r2, #255	; 0xff
 8010bb6:	d904      	bls.n	8010bc2 <__ascii_wctomb+0x14>
 8010bb8:	228a      	movs	r2, #138	; 0x8a
 8010bba:	2001      	movs	r0, #1
 8010bbc:	601a      	str	r2, [r3, #0]
 8010bbe:	4240      	negs	r0, r0
 8010bc0:	4770      	bx	lr
 8010bc2:	2001      	movs	r0, #1
 8010bc4:	700a      	strb	r2, [r1, #0]
 8010bc6:	e7fb      	b.n	8010bc0 <__ascii_wctomb+0x12>

08010bc8 <__ssputs_r>:
 8010bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	9301      	str	r3, [sp, #4]
 8010bce:	9203      	str	r2, [sp, #12]
 8010bd0:	688e      	ldr	r6, [r1, #8]
 8010bd2:	9a01      	ldr	r2, [sp, #4]
 8010bd4:	0007      	movs	r7, r0
 8010bd6:	000c      	movs	r4, r1
 8010bd8:	680b      	ldr	r3, [r1, #0]
 8010bda:	4296      	cmp	r6, r2
 8010bdc:	d831      	bhi.n	8010c42 <__ssputs_r+0x7a>
 8010bde:	898a      	ldrh	r2, [r1, #12]
 8010be0:	2190      	movs	r1, #144	; 0x90
 8010be2:	00c9      	lsls	r1, r1, #3
 8010be4:	420a      	tst	r2, r1
 8010be6:	d029      	beq.n	8010c3c <__ssputs_r+0x74>
 8010be8:	2003      	movs	r0, #3
 8010bea:	6921      	ldr	r1, [r4, #16]
 8010bec:	1a5b      	subs	r3, r3, r1
 8010bee:	9302      	str	r3, [sp, #8]
 8010bf0:	6963      	ldr	r3, [r4, #20]
 8010bf2:	4343      	muls	r3, r0
 8010bf4:	0fdd      	lsrs	r5, r3, #31
 8010bf6:	18ed      	adds	r5, r5, r3
 8010bf8:	9b01      	ldr	r3, [sp, #4]
 8010bfa:	9802      	ldr	r0, [sp, #8]
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	181b      	adds	r3, r3, r0
 8010c00:	106d      	asrs	r5, r5, #1
 8010c02:	42ab      	cmp	r3, r5
 8010c04:	d900      	bls.n	8010c08 <__ssputs_r+0x40>
 8010c06:	001d      	movs	r5, r3
 8010c08:	0552      	lsls	r2, r2, #21
 8010c0a:	d529      	bpl.n	8010c60 <__ssputs_r+0x98>
 8010c0c:	0029      	movs	r1, r5
 8010c0e:	0038      	movs	r0, r7
 8010c10:	f7fb ff6e 	bl	800caf0 <_malloc_r>
 8010c14:	1e06      	subs	r6, r0, #0
 8010c16:	d02d      	beq.n	8010c74 <__ssputs_r+0xac>
 8010c18:	9a02      	ldr	r2, [sp, #8]
 8010c1a:	6921      	ldr	r1, [r4, #16]
 8010c1c:	f7fe f884 	bl	800ed28 <memcpy>
 8010c20:	89a2      	ldrh	r2, [r4, #12]
 8010c22:	4b19      	ldr	r3, [pc, #100]	; (8010c88 <__ssputs_r+0xc0>)
 8010c24:	401a      	ands	r2, r3
 8010c26:	2380      	movs	r3, #128	; 0x80
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	81a3      	strh	r3, [r4, #12]
 8010c2c:	9b02      	ldr	r3, [sp, #8]
 8010c2e:	6126      	str	r6, [r4, #16]
 8010c30:	18f6      	adds	r6, r6, r3
 8010c32:	6026      	str	r6, [r4, #0]
 8010c34:	6165      	str	r5, [r4, #20]
 8010c36:	9e01      	ldr	r6, [sp, #4]
 8010c38:	1aed      	subs	r5, r5, r3
 8010c3a:	60a5      	str	r5, [r4, #8]
 8010c3c:	9b01      	ldr	r3, [sp, #4]
 8010c3e:	429e      	cmp	r6, r3
 8010c40:	d900      	bls.n	8010c44 <__ssputs_r+0x7c>
 8010c42:	9e01      	ldr	r6, [sp, #4]
 8010c44:	0032      	movs	r2, r6
 8010c46:	9903      	ldr	r1, [sp, #12]
 8010c48:	6820      	ldr	r0, [r4, #0]
 8010c4a:	f000 f9e5 	bl	8011018 <memmove>
 8010c4e:	2000      	movs	r0, #0
 8010c50:	68a3      	ldr	r3, [r4, #8]
 8010c52:	1b9b      	subs	r3, r3, r6
 8010c54:	60a3      	str	r3, [r4, #8]
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	199b      	adds	r3, r3, r6
 8010c5a:	6023      	str	r3, [r4, #0]
 8010c5c:	b005      	add	sp, #20
 8010c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c60:	002a      	movs	r2, r5
 8010c62:	0038      	movs	r0, r7
 8010c64:	f000 fa1f 	bl	80110a6 <_realloc_r>
 8010c68:	1e06      	subs	r6, r0, #0
 8010c6a:	d1df      	bne.n	8010c2c <__ssputs_r+0x64>
 8010c6c:	0038      	movs	r0, r7
 8010c6e:	6921      	ldr	r1, [r4, #16]
 8010c70:	f7fe ff2a 	bl	800fac8 <_free_r>
 8010c74:	230c      	movs	r3, #12
 8010c76:	2001      	movs	r0, #1
 8010c78:	603b      	str	r3, [r7, #0]
 8010c7a:	89a2      	ldrh	r2, [r4, #12]
 8010c7c:	3334      	adds	r3, #52	; 0x34
 8010c7e:	4313      	orrs	r3, r2
 8010c80:	81a3      	strh	r3, [r4, #12]
 8010c82:	4240      	negs	r0, r0
 8010c84:	e7ea      	b.n	8010c5c <__ssputs_r+0x94>
 8010c86:	46c0      	nop			; (mov r8, r8)
 8010c88:	fffffb7f 	.word	0xfffffb7f

08010c8c <_svfiprintf_r>:
 8010c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c8e:	b0a1      	sub	sp, #132	; 0x84
 8010c90:	9003      	str	r0, [sp, #12]
 8010c92:	001d      	movs	r5, r3
 8010c94:	898b      	ldrh	r3, [r1, #12]
 8010c96:	000f      	movs	r7, r1
 8010c98:	0016      	movs	r6, r2
 8010c9a:	061b      	lsls	r3, r3, #24
 8010c9c:	d511      	bpl.n	8010cc2 <_svfiprintf_r+0x36>
 8010c9e:	690b      	ldr	r3, [r1, #16]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10e      	bne.n	8010cc2 <_svfiprintf_r+0x36>
 8010ca4:	2140      	movs	r1, #64	; 0x40
 8010ca6:	f7fb ff23 	bl	800caf0 <_malloc_r>
 8010caa:	6038      	str	r0, [r7, #0]
 8010cac:	6138      	str	r0, [r7, #16]
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	d105      	bne.n	8010cbe <_svfiprintf_r+0x32>
 8010cb2:	230c      	movs	r3, #12
 8010cb4:	9a03      	ldr	r2, [sp, #12]
 8010cb6:	3801      	subs	r0, #1
 8010cb8:	6013      	str	r3, [r2, #0]
 8010cba:	b021      	add	sp, #132	; 0x84
 8010cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cbe:	2340      	movs	r3, #64	; 0x40
 8010cc0:	617b      	str	r3, [r7, #20]
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	ac08      	add	r4, sp, #32
 8010cc6:	6163      	str	r3, [r4, #20]
 8010cc8:	3320      	adds	r3, #32
 8010cca:	7663      	strb	r3, [r4, #25]
 8010ccc:	3310      	adds	r3, #16
 8010cce:	76a3      	strb	r3, [r4, #26]
 8010cd0:	9507      	str	r5, [sp, #28]
 8010cd2:	0035      	movs	r5, r6
 8010cd4:	782b      	ldrb	r3, [r5, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <_svfiprintf_r+0x52>
 8010cda:	2b25      	cmp	r3, #37	; 0x25
 8010cdc:	d148      	bne.n	8010d70 <_svfiprintf_r+0xe4>
 8010cde:	1bab      	subs	r3, r5, r6
 8010ce0:	9305      	str	r3, [sp, #20]
 8010ce2:	42b5      	cmp	r5, r6
 8010ce4:	d00b      	beq.n	8010cfe <_svfiprintf_r+0x72>
 8010ce6:	0032      	movs	r2, r6
 8010ce8:	0039      	movs	r1, r7
 8010cea:	9803      	ldr	r0, [sp, #12]
 8010cec:	f7ff ff6c 	bl	8010bc8 <__ssputs_r>
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	d100      	bne.n	8010cf6 <_svfiprintf_r+0x6a>
 8010cf4:	e0af      	b.n	8010e56 <_svfiprintf_r+0x1ca>
 8010cf6:	6963      	ldr	r3, [r4, #20]
 8010cf8:	9a05      	ldr	r2, [sp, #20]
 8010cfa:	189b      	adds	r3, r3, r2
 8010cfc:	6163      	str	r3, [r4, #20]
 8010cfe:	782b      	ldrb	r3, [r5, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d100      	bne.n	8010d06 <_svfiprintf_r+0x7a>
 8010d04:	e0a7      	b.n	8010e56 <_svfiprintf_r+0x1ca>
 8010d06:	2201      	movs	r2, #1
 8010d08:	2300      	movs	r3, #0
 8010d0a:	4252      	negs	r2, r2
 8010d0c:	6062      	str	r2, [r4, #4]
 8010d0e:	a904      	add	r1, sp, #16
 8010d10:	3254      	adds	r2, #84	; 0x54
 8010d12:	1852      	adds	r2, r2, r1
 8010d14:	1c6e      	adds	r6, r5, #1
 8010d16:	6023      	str	r3, [r4, #0]
 8010d18:	60e3      	str	r3, [r4, #12]
 8010d1a:	60a3      	str	r3, [r4, #8]
 8010d1c:	7013      	strb	r3, [r2, #0]
 8010d1e:	65a3      	str	r3, [r4, #88]	; 0x58
 8010d20:	4b55      	ldr	r3, [pc, #340]	; (8010e78 <_svfiprintf_r+0x1ec>)
 8010d22:	2205      	movs	r2, #5
 8010d24:	0018      	movs	r0, r3
 8010d26:	7831      	ldrb	r1, [r6, #0]
 8010d28:	9305      	str	r3, [sp, #20]
 8010d2a:	f7fd fff2 	bl	800ed12 <memchr>
 8010d2e:	1c75      	adds	r5, r6, #1
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d11f      	bne.n	8010d74 <_svfiprintf_r+0xe8>
 8010d34:	6822      	ldr	r2, [r4, #0]
 8010d36:	06d3      	lsls	r3, r2, #27
 8010d38:	d504      	bpl.n	8010d44 <_svfiprintf_r+0xb8>
 8010d3a:	2353      	movs	r3, #83	; 0x53
 8010d3c:	a904      	add	r1, sp, #16
 8010d3e:	185b      	adds	r3, r3, r1
 8010d40:	2120      	movs	r1, #32
 8010d42:	7019      	strb	r1, [r3, #0]
 8010d44:	0713      	lsls	r3, r2, #28
 8010d46:	d504      	bpl.n	8010d52 <_svfiprintf_r+0xc6>
 8010d48:	2353      	movs	r3, #83	; 0x53
 8010d4a:	a904      	add	r1, sp, #16
 8010d4c:	185b      	adds	r3, r3, r1
 8010d4e:	212b      	movs	r1, #43	; 0x2b
 8010d50:	7019      	strb	r1, [r3, #0]
 8010d52:	7833      	ldrb	r3, [r6, #0]
 8010d54:	2b2a      	cmp	r3, #42	; 0x2a
 8010d56:	d016      	beq.n	8010d86 <_svfiprintf_r+0xfa>
 8010d58:	0035      	movs	r5, r6
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	200a      	movs	r0, #10
 8010d5e:	68e3      	ldr	r3, [r4, #12]
 8010d60:	782a      	ldrb	r2, [r5, #0]
 8010d62:	1c6e      	adds	r6, r5, #1
 8010d64:	3a30      	subs	r2, #48	; 0x30
 8010d66:	2a09      	cmp	r2, #9
 8010d68:	d94e      	bls.n	8010e08 <_svfiprintf_r+0x17c>
 8010d6a:	2900      	cmp	r1, #0
 8010d6c:	d111      	bne.n	8010d92 <_svfiprintf_r+0x106>
 8010d6e:	e017      	b.n	8010da0 <_svfiprintf_r+0x114>
 8010d70:	3501      	adds	r5, #1
 8010d72:	e7af      	b.n	8010cd4 <_svfiprintf_r+0x48>
 8010d74:	9b05      	ldr	r3, [sp, #20]
 8010d76:	6822      	ldr	r2, [r4, #0]
 8010d78:	1ac0      	subs	r0, r0, r3
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	4083      	lsls	r3, r0
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	002e      	movs	r6, r5
 8010d82:	6023      	str	r3, [r4, #0]
 8010d84:	e7cc      	b.n	8010d20 <_svfiprintf_r+0x94>
 8010d86:	9b07      	ldr	r3, [sp, #28]
 8010d88:	1d19      	adds	r1, r3, #4
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	9107      	str	r1, [sp, #28]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	db01      	blt.n	8010d96 <_svfiprintf_r+0x10a>
 8010d92:	930b      	str	r3, [sp, #44]	; 0x2c
 8010d94:	e004      	b.n	8010da0 <_svfiprintf_r+0x114>
 8010d96:	425b      	negs	r3, r3
 8010d98:	60e3      	str	r3, [r4, #12]
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	6023      	str	r3, [r4, #0]
 8010da0:	782b      	ldrb	r3, [r5, #0]
 8010da2:	2b2e      	cmp	r3, #46	; 0x2e
 8010da4:	d10a      	bne.n	8010dbc <_svfiprintf_r+0x130>
 8010da6:	786b      	ldrb	r3, [r5, #1]
 8010da8:	2b2a      	cmp	r3, #42	; 0x2a
 8010daa:	d135      	bne.n	8010e18 <_svfiprintf_r+0x18c>
 8010dac:	9b07      	ldr	r3, [sp, #28]
 8010dae:	3502      	adds	r5, #2
 8010db0:	1d1a      	adds	r2, r3, #4
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	9207      	str	r2, [sp, #28]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	db2b      	blt.n	8010e12 <_svfiprintf_r+0x186>
 8010dba:	9309      	str	r3, [sp, #36]	; 0x24
 8010dbc:	4e2f      	ldr	r6, [pc, #188]	; (8010e7c <_svfiprintf_r+0x1f0>)
 8010dbe:	2203      	movs	r2, #3
 8010dc0:	0030      	movs	r0, r6
 8010dc2:	7829      	ldrb	r1, [r5, #0]
 8010dc4:	f7fd ffa5 	bl	800ed12 <memchr>
 8010dc8:	2800      	cmp	r0, #0
 8010dca:	d006      	beq.n	8010dda <_svfiprintf_r+0x14e>
 8010dcc:	2340      	movs	r3, #64	; 0x40
 8010dce:	1b80      	subs	r0, r0, r6
 8010dd0:	4083      	lsls	r3, r0
 8010dd2:	6822      	ldr	r2, [r4, #0]
 8010dd4:	3501      	adds	r5, #1
 8010dd6:	4313      	orrs	r3, r2
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	7829      	ldrb	r1, [r5, #0]
 8010ddc:	2206      	movs	r2, #6
 8010dde:	4828      	ldr	r0, [pc, #160]	; (8010e80 <_svfiprintf_r+0x1f4>)
 8010de0:	1c6e      	adds	r6, r5, #1
 8010de2:	7621      	strb	r1, [r4, #24]
 8010de4:	f7fd ff95 	bl	800ed12 <memchr>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d03c      	beq.n	8010e66 <_svfiprintf_r+0x1da>
 8010dec:	4b25      	ldr	r3, [pc, #148]	; (8010e84 <_svfiprintf_r+0x1f8>)
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d125      	bne.n	8010e3e <_svfiprintf_r+0x1b2>
 8010df2:	2207      	movs	r2, #7
 8010df4:	9b07      	ldr	r3, [sp, #28]
 8010df6:	3307      	adds	r3, #7
 8010df8:	4393      	bics	r3, r2
 8010dfa:	3308      	adds	r3, #8
 8010dfc:	9307      	str	r3, [sp, #28]
 8010dfe:	6963      	ldr	r3, [r4, #20]
 8010e00:	9a04      	ldr	r2, [sp, #16]
 8010e02:	189b      	adds	r3, r3, r2
 8010e04:	6163      	str	r3, [r4, #20]
 8010e06:	e764      	b.n	8010cd2 <_svfiprintf_r+0x46>
 8010e08:	4343      	muls	r3, r0
 8010e0a:	0035      	movs	r5, r6
 8010e0c:	2101      	movs	r1, #1
 8010e0e:	189b      	adds	r3, r3, r2
 8010e10:	e7a6      	b.n	8010d60 <_svfiprintf_r+0xd4>
 8010e12:	2301      	movs	r3, #1
 8010e14:	425b      	negs	r3, r3
 8010e16:	e7d0      	b.n	8010dba <_svfiprintf_r+0x12e>
 8010e18:	2300      	movs	r3, #0
 8010e1a:	200a      	movs	r0, #10
 8010e1c:	001a      	movs	r2, r3
 8010e1e:	3501      	adds	r5, #1
 8010e20:	6063      	str	r3, [r4, #4]
 8010e22:	7829      	ldrb	r1, [r5, #0]
 8010e24:	1c6e      	adds	r6, r5, #1
 8010e26:	3930      	subs	r1, #48	; 0x30
 8010e28:	2909      	cmp	r1, #9
 8010e2a:	d903      	bls.n	8010e34 <_svfiprintf_r+0x1a8>
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d0c5      	beq.n	8010dbc <_svfiprintf_r+0x130>
 8010e30:	9209      	str	r2, [sp, #36]	; 0x24
 8010e32:	e7c3      	b.n	8010dbc <_svfiprintf_r+0x130>
 8010e34:	4342      	muls	r2, r0
 8010e36:	0035      	movs	r5, r6
 8010e38:	2301      	movs	r3, #1
 8010e3a:	1852      	adds	r2, r2, r1
 8010e3c:	e7f1      	b.n	8010e22 <_svfiprintf_r+0x196>
 8010e3e:	aa07      	add	r2, sp, #28
 8010e40:	9200      	str	r2, [sp, #0]
 8010e42:	0021      	movs	r1, r4
 8010e44:	003a      	movs	r2, r7
 8010e46:	4b10      	ldr	r3, [pc, #64]	; (8010e88 <_svfiprintf_r+0x1fc>)
 8010e48:	9803      	ldr	r0, [sp, #12]
 8010e4a:	f7fc fe59 	bl	800db00 <_printf_float>
 8010e4e:	9004      	str	r0, [sp, #16]
 8010e50:	9b04      	ldr	r3, [sp, #16]
 8010e52:	3301      	adds	r3, #1
 8010e54:	d1d3      	bne.n	8010dfe <_svfiprintf_r+0x172>
 8010e56:	89bb      	ldrh	r3, [r7, #12]
 8010e58:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010e5a:	065b      	lsls	r3, r3, #25
 8010e5c:	d400      	bmi.n	8010e60 <_svfiprintf_r+0x1d4>
 8010e5e:	e72c      	b.n	8010cba <_svfiprintf_r+0x2e>
 8010e60:	2001      	movs	r0, #1
 8010e62:	4240      	negs	r0, r0
 8010e64:	e729      	b.n	8010cba <_svfiprintf_r+0x2e>
 8010e66:	aa07      	add	r2, sp, #28
 8010e68:	9200      	str	r2, [sp, #0]
 8010e6a:	0021      	movs	r1, r4
 8010e6c:	003a      	movs	r2, r7
 8010e6e:	4b06      	ldr	r3, [pc, #24]	; (8010e88 <_svfiprintf_r+0x1fc>)
 8010e70:	9803      	ldr	r0, [sp, #12]
 8010e72:	f7fd f90b 	bl	800e08c <_printf_i>
 8010e76:	e7ea      	b.n	8010e4e <_svfiprintf_r+0x1c2>
 8010e78:	08013b6c 	.word	0x08013b6c
 8010e7c:	08013b72 	.word	0x08013b72
 8010e80:	08013b76 	.word	0x08013b76
 8010e84:	0800db01 	.word	0x0800db01
 8010e88:	08010bc9 	.word	0x08010bc9

08010e8c <__sflush_r>:
 8010e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e8e:	898b      	ldrh	r3, [r1, #12]
 8010e90:	0005      	movs	r5, r0
 8010e92:	000c      	movs	r4, r1
 8010e94:	071a      	lsls	r2, r3, #28
 8010e96:	d45c      	bmi.n	8010f52 <__sflush_r+0xc6>
 8010e98:	684a      	ldr	r2, [r1, #4]
 8010e9a:	2a00      	cmp	r2, #0
 8010e9c:	dc04      	bgt.n	8010ea8 <__sflush_r+0x1c>
 8010e9e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8010ea0:	2a00      	cmp	r2, #0
 8010ea2:	dc01      	bgt.n	8010ea8 <__sflush_r+0x1c>
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010ea8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010eaa:	2f00      	cmp	r7, #0
 8010eac:	d0fa      	beq.n	8010ea4 <__sflush_r+0x18>
 8010eae:	2200      	movs	r2, #0
 8010eb0:	2080      	movs	r0, #128	; 0x80
 8010eb2:	682e      	ldr	r6, [r5, #0]
 8010eb4:	602a      	str	r2, [r5, #0]
 8010eb6:	001a      	movs	r2, r3
 8010eb8:	0140      	lsls	r0, r0, #5
 8010eba:	6a21      	ldr	r1, [r4, #32]
 8010ebc:	4002      	ands	r2, r0
 8010ebe:	4203      	tst	r3, r0
 8010ec0:	d034      	beq.n	8010f2c <__sflush_r+0xa0>
 8010ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ec4:	89a3      	ldrh	r3, [r4, #12]
 8010ec6:	075b      	lsls	r3, r3, #29
 8010ec8:	d506      	bpl.n	8010ed8 <__sflush_r+0x4c>
 8010eca:	6863      	ldr	r3, [r4, #4]
 8010ecc:	1ac0      	subs	r0, r0, r3
 8010ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <__sflush_r+0x4c>
 8010ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010ed6:	1ac0      	subs	r0, r0, r3
 8010ed8:	0002      	movs	r2, r0
 8010eda:	2300      	movs	r3, #0
 8010edc:	0028      	movs	r0, r5
 8010ede:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010ee0:	6a21      	ldr	r1, [r4, #32]
 8010ee2:	47b8      	blx	r7
 8010ee4:	89a2      	ldrh	r2, [r4, #12]
 8010ee6:	1c43      	adds	r3, r0, #1
 8010ee8:	d106      	bne.n	8010ef8 <__sflush_r+0x6c>
 8010eea:	6829      	ldr	r1, [r5, #0]
 8010eec:	291d      	cmp	r1, #29
 8010eee:	d82c      	bhi.n	8010f4a <__sflush_r+0xbe>
 8010ef0:	4b2a      	ldr	r3, [pc, #168]	; (8010f9c <__sflush_r+0x110>)
 8010ef2:	410b      	asrs	r3, r1
 8010ef4:	07db      	lsls	r3, r3, #31
 8010ef6:	d428      	bmi.n	8010f4a <__sflush_r+0xbe>
 8010ef8:	2300      	movs	r3, #0
 8010efa:	6063      	str	r3, [r4, #4]
 8010efc:	6923      	ldr	r3, [r4, #16]
 8010efe:	6023      	str	r3, [r4, #0]
 8010f00:	04d2      	lsls	r2, r2, #19
 8010f02:	d505      	bpl.n	8010f10 <__sflush_r+0x84>
 8010f04:	1c43      	adds	r3, r0, #1
 8010f06:	d102      	bne.n	8010f0e <__sflush_r+0x82>
 8010f08:	682b      	ldr	r3, [r5, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d100      	bne.n	8010f10 <__sflush_r+0x84>
 8010f0e:	6560      	str	r0, [r4, #84]	; 0x54
 8010f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f12:	602e      	str	r6, [r5, #0]
 8010f14:	2900      	cmp	r1, #0
 8010f16:	d0c5      	beq.n	8010ea4 <__sflush_r+0x18>
 8010f18:	0023      	movs	r3, r4
 8010f1a:	3344      	adds	r3, #68	; 0x44
 8010f1c:	4299      	cmp	r1, r3
 8010f1e:	d002      	beq.n	8010f26 <__sflush_r+0x9a>
 8010f20:	0028      	movs	r0, r5
 8010f22:	f7fe fdd1 	bl	800fac8 <_free_r>
 8010f26:	2000      	movs	r0, #0
 8010f28:	6360      	str	r0, [r4, #52]	; 0x34
 8010f2a:	e7bc      	b.n	8010ea6 <__sflush_r+0x1a>
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	0028      	movs	r0, r5
 8010f30:	47b8      	blx	r7
 8010f32:	1c43      	adds	r3, r0, #1
 8010f34:	d1c6      	bne.n	8010ec4 <__sflush_r+0x38>
 8010f36:	682b      	ldr	r3, [r5, #0]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d0c3      	beq.n	8010ec4 <__sflush_r+0x38>
 8010f3c:	2b1d      	cmp	r3, #29
 8010f3e:	d001      	beq.n	8010f44 <__sflush_r+0xb8>
 8010f40:	2b16      	cmp	r3, #22
 8010f42:	d101      	bne.n	8010f48 <__sflush_r+0xbc>
 8010f44:	602e      	str	r6, [r5, #0]
 8010f46:	e7ad      	b.n	8010ea4 <__sflush_r+0x18>
 8010f48:	89a2      	ldrh	r2, [r4, #12]
 8010f4a:	2340      	movs	r3, #64	; 0x40
 8010f4c:	4313      	orrs	r3, r2
 8010f4e:	81a3      	strh	r3, [r4, #12]
 8010f50:	e7a9      	b.n	8010ea6 <__sflush_r+0x1a>
 8010f52:	690e      	ldr	r6, [r1, #16]
 8010f54:	2e00      	cmp	r6, #0
 8010f56:	d0a5      	beq.n	8010ea4 <__sflush_r+0x18>
 8010f58:	680f      	ldr	r7, [r1, #0]
 8010f5a:	600e      	str	r6, [r1, #0]
 8010f5c:	1bba      	subs	r2, r7, r6
 8010f5e:	9201      	str	r2, [sp, #4]
 8010f60:	2200      	movs	r2, #0
 8010f62:	079b      	lsls	r3, r3, #30
 8010f64:	d100      	bne.n	8010f68 <__sflush_r+0xdc>
 8010f66:	694a      	ldr	r2, [r1, #20]
 8010f68:	60a2      	str	r2, [r4, #8]
 8010f6a:	9b01      	ldr	r3, [sp, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	dd99      	ble.n	8010ea4 <__sflush_r+0x18>
 8010f70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f72:	0032      	movs	r2, r6
 8010f74:	001f      	movs	r7, r3
 8010f76:	0028      	movs	r0, r5
 8010f78:	9b01      	ldr	r3, [sp, #4]
 8010f7a:	6a21      	ldr	r1, [r4, #32]
 8010f7c:	47b8      	blx	r7
 8010f7e:	2800      	cmp	r0, #0
 8010f80:	dc06      	bgt.n	8010f90 <__sflush_r+0x104>
 8010f82:	2340      	movs	r3, #64	; 0x40
 8010f84:	2001      	movs	r0, #1
 8010f86:	89a2      	ldrh	r2, [r4, #12]
 8010f88:	4240      	negs	r0, r0
 8010f8a:	4313      	orrs	r3, r2
 8010f8c:	81a3      	strh	r3, [r4, #12]
 8010f8e:	e78a      	b.n	8010ea6 <__sflush_r+0x1a>
 8010f90:	9b01      	ldr	r3, [sp, #4]
 8010f92:	1836      	adds	r6, r6, r0
 8010f94:	1a1b      	subs	r3, r3, r0
 8010f96:	9301      	str	r3, [sp, #4]
 8010f98:	e7e7      	b.n	8010f6a <__sflush_r+0xde>
 8010f9a:	46c0      	nop			; (mov r8, r8)
 8010f9c:	dfbffffe 	.word	0xdfbffffe

08010fa0 <_fflush_r>:
 8010fa0:	690b      	ldr	r3, [r1, #16]
 8010fa2:	b570      	push	{r4, r5, r6, lr}
 8010fa4:	0005      	movs	r5, r0
 8010fa6:	000c      	movs	r4, r1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d102      	bne.n	8010fb2 <_fflush_r+0x12>
 8010fac:	2500      	movs	r5, #0
 8010fae:	0028      	movs	r0, r5
 8010fb0:	bd70      	pop	{r4, r5, r6, pc}
 8010fb2:	2800      	cmp	r0, #0
 8010fb4:	d004      	beq.n	8010fc0 <_fflush_r+0x20>
 8010fb6:	6a03      	ldr	r3, [r0, #32]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d101      	bne.n	8010fc0 <_fflush_r+0x20>
 8010fbc:	f7fd fc0e 	bl	800e7dc <__sinit>
 8010fc0:	220c      	movs	r2, #12
 8010fc2:	5ea3      	ldrsh	r3, [r4, r2]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d0f1      	beq.n	8010fac <_fflush_r+0xc>
 8010fc8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010fca:	07d2      	lsls	r2, r2, #31
 8010fcc:	d404      	bmi.n	8010fd8 <_fflush_r+0x38>
 8010fce:	059b      	lsls	r3, r3, #22
 8010fd0:	d402      	bmi.n	8010fd8 <_fflush_r+0x38>
 8010fd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fd4:	f7fd fe93 	bl	800ecfe <__retarget_lock_acquire_recursive>
 8010fd8:	0028      	movs	r0, r5
 8010fda:	0021      	movs	r1, r4
 8010fdc:	f7ff ff56 	bl	8010e8c <__sflush_r>
 8010fe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fe2:	0005      	movs	r5, r0
 8010fe4:	07db      	lsls	r3, r3, #31
 8010fe6:	d4e2      	bmi.n	8010fae <_fflush_r+0xe>
 8010fe8:	89a3      	ldrh	r3, [r4, #12]
 8010fea:	059b      	lsls	r3, r3, #22
 8010fec:	d4df      	bmi.n	8010fae <_fflush_r+0xe>
 8010fee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ff0:	f7fd fe86 	bl	800ed00 <__retarget_lock_release_recursive>
 8010ff4:	e7db      	b.n	8010fae <_fflush_r+0xe>
	...

08010ff8 <fiprintf>:
 8010ff8:	b40e      	push	{r1, r2, r3}
 8010ffa:	b517      	push	{r0, r1, r2, r4, lr}
 8010ffc:	4c05      	ldr	r4, [pc, #20]	; (8011014 <fiprintf+0x1c>)
 8010ffe:	ab05      	add	r3, sp, #20
 8011000:	cb04      	ldmia	r3!, {r2}
 8011002:	0001      	movs	r1, r0
 8011004:	6820      	ldr	r0, [r4, #0]
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	f000 f8a4 	bl	8011154 <_vfiprintf_r>
 801100c:	bc1e      	pop	{r1, r2, r3, r4}
 801100e:	bc08      	pop	{r3}
 8011010:	b003      	add	sp, #12
 8011012:	4718      	bx	r3
 8011014:	200002f0 	.word	0x200002f0

08011018 <memmove>:
 8011018:	b510      	push	{r4, lr}
 801101a:	4288      	cmp	r0, r1
 801101c:	d902      	bls.n	8011024 <memmove+0xc>
 801101e:	188b      	adds	r3, r1, r2
 8011020:	4298      	cmp	r0, r3
 8011022:	d303      	bcc.n	801102c <memmove+0x14>
 8011024:	2300      	movs	r3, #0
 8011026:	e007      	b.n	8011038 <memmove+0x20>
 8011028:	5c8b      	ldrb	r3, [r1, r2]
 801102a:	5483      	strb	r3, [r0, r2]
 801102c:	3a01      	subs	r2, #1
 801102e:	d2fb      	bcs.n	8011028 <memmove+0x10>
 8011030:	bd10      	pop	{r4, pc}
 8011032:	5ccc      	ldrb	r4, [r1, r3]
 8011034:	54c4      	strb	r4, [r0, r3]
 8011036:	3301      	adds	r3, #1
 8011038:	429a      	cmp	r2, r3
 801103a:	d1fa      	bne.n	8011032 <memmove+0x1a>
 801103c:	e7f8      	b.n	8011030 <memmove+0x18>

0801103e <abort>:
 801103e:	2006      	movs	r0, #6
 8011040:	b510      	push	{r4, lr}
 8011042:	f000 fa73 	bl	801152c <raise>
 8011046:	2001      	movs	r0, #1
 8011048:	f7f6 fc30 	bl	80078ac <_exit>

0801104c <_calloc_r>:
 801104c:	b570      	push	{r4, r5, r6, lr}
 801104e:	0c0b      	lsrs	r3, r1, #16
 8011050:	0c15      	lsrs	r5, r2, #16
 8011052:	2b00      	cmp	r3, #0
 8011054:	d11e      	bne.n	8011094 <_calloc_r+0x48>
 8011056:	2d00      	cmp	r5, #0
 8011058:	d10c      	bne.n	8011074 <_calloc_r+0x28>
 801105a:	b289      	uxth	r1, r1
 801105c:	b294      	uxth	r4, r2
 801105e:	434c      	muls	r4, r1
 8011060:	0021      	movs	r1, r4
 8011062:	f7fb fd45 	bl	800caf0 <_malloc_r>
 8011066:	1e05      	subs	r5, r0, #0
 8011068:	d01b      	beq.n	80110a2 <_calloc_r+0x56>
 801106a:	0022      	movs	r2, r4
 801106c:	2100      	movs	r1, #0
 801106e:	f7fd fc89 	bl	800e984 <memset>
 8011072:	e016      	b.n	80110a2 <_calloc_r+0x56>
 8011074:	1c2b      	adds	r3, r5, #0
 8011076:	1c0c      	adds	r4, r1, #0
 8011078:	b289      	uxth	r1, r1
 801107a:	b292      	uxth	r2, r2
 801107c:	434a      	muls	r2, r1
 801107e:	b2a1      	uxth	r1, r4
 8011080:	b29c      	uxth	r4, r3
 8011082:	434c      	muls	r4, r1
 8011084:	0c13      	lsrs	r3, r2, #16
 8011086:	18e4      	adds	r4, r4, r3
 8011088:	0c23      	lsrs	r3, r4, #16
 801108a:	d107      	bne.n	801109c <_calloc_r+0x50>
 801108c:	0424      	lsls	r4, r4, #16
 801108e:	b292      	uxth	r2, r2
 8011090:	4314      	orrs	r4, r2
 8011092:	e7e5      	b.n	8011060 <_calloc_r+0x14>
 8011094:	2d00      	cmp	r5, #0
 8011096:	d101      	bne.n	801109c <_calloc_r+0x50>
 8011098:	1c14      	adds	r4, r2, #0
 801109a:	e7ed      	b.n	8011078 <_calloc_r+0x2c>
 801109c:	230c      	movs	r3, #12
 801109e:	2500      	movs	r5, #0
 80110a0:	6003      	str	r3, [r0, #0]
 80110a2:	0028      	movs	r0, r5
 80110a4:	bd70      	pop	{r4, r5, r6, pc}

080110a6 <_realloc_r>:
 80110a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110a8:	0007      	movs	r7, r0
 80110aa:	000e      	movs	r6, r1
 80110ac:	0014      	movs	r4, r2
 80110ae:	2900      	cmp	r1, #0
 80110b0:	d105      	bne.n	80110be <_realloc_r+0x18>
 80110b2:	0011      	movs	r1, r2
 80110b4:	f7fb fd1c 	bl	800caf0 <_malloc_r>
 80110b8:	0005      	movs	r5, r0
 80110ba:	0028      	movs	r0, r5
 80110bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80110be:	2a00      	cmp	r2, #0
 80110c0:	d103      	bne.n	80110ca <_realloc_r+0x24>
 80110c2:	f7fe fd01 	bl	800fac8 <_free_r>
 80110c6:	0025      	movs	r5, r4
 80110c8:	e7f7      	b.n	80110ba <_realloc_r+0x14>
 80110ca:	f000 fa4f 	bl	801156c <_malloc_usable_size_r>
 80110ce:	9001      	str	r0, [sp, #4]
 80110d0:	4284      	cmp	r4, r0
 80110d2:	d803      	bhi.n	80110dc <_realloc_r+0x36>
 80110d4:	0035      	movs	r5, r6
 80110d6:	0843      	lsrs	r3, r0, #1
 80110d8:	42a3      	cmp	r3, r4
 80110da:	d3ee      	bcc.n	80110ba <_realloc_r+0x14>
 80110dc:	0021      	movs	r1, r4
 80110de:	0038      	movs	r0, r7
 80110e0:	f7fb fd06 	bl	800caf0 <_malloc_r>
 80110e4:	1e05      	subs	r5, r0, #0
 80110e6:	d0e8      	beq.n	80110ba <_realloc_r+0x14>
 80110e8:	9b01      	ldr	r3, [sp, #4]
 80110ea:	0022      	movs	r2, r4
 80110ec:	429c      	cmp	r4, r3
 80110ee:	d900      	bls.n	80110f2 <_realloc_r+0x4c>
 80110f0:	001a      	movs	r2, r3
 80110f2:	0031      	movs	r1, r6
 80110f4:	0028      	movs	r0, r5
 80110f6:	f7fd fe17 	bl	800ed28 <memcpy>
 80110fa:	0031      	movs	r1, r6
 80110fc:	0038      	movs	r0, r7
 80110fe:	f7fe fce3 	bl	800fac8 <_free_r>
 8011102:	e7da      	b.n	80110ba <_realloc_r+0x14>

08011104 <__sfputc_r>:
 8011104:	6893      	ldr	r3, [r2, #8]
 8011106:	b510      	push	{r4, lr}
 8011108:	3b01      	subs	r3, #1
 801110a:	6093      	str	r3, [r2, #8]
 801110c:	2b00      	cmp	r3, #0
 801110e:	da04      	bge.n	801111a <__sfputc_r+0x16>
 8011110:	6994      	ldr	r4, [r2, #24]
 8011112:	42a3      	cmp	r3, r4
 8011114:	db07      	blt.n	8011126 <__sfputc_r+0x22>
 8011116:	290a      	cmp	r1, #10
 8011118:	d005      	beq.n	8011126 <__sfputc_r+0x22>
 801111a:	6813      	ldr	r3, [r2, #0]
 801111c:	1c58      	adds	r0, r3, #1
 801111e:	6010      	str	r0, [r2, #0]
 8011120:	7019      	strb	r1, [r3, #0]
 8011122:	0008      	movs	r0, r1
 8011124:	bd10      	pop	{r4, pc}
 8011126:	f000 f931 	bl	801138c <__swbuf_r>
 801112a:	0001      	movs	r1, r0
 801112c:	e7f9      	b.n	8011122 <__sfputc_r+0x1e>

0801112e <__sfputs_r>:
 801112e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011130:	0006      	movs	r6, r0
 8011132:	000f      	movs	r7, r1
 8011134:	0014      	movs	r4, r2
 8011136:	18d5      	adds	r5, r2, r3
 8011138:	42ac      	cmp	r4, r5
 801113a:	d101      	bne.n	8011140 <__sfputs_r+0x12>
 801113c:	2000      	movs	r0, #0
 801113e:	e007      	b.n	8011150 <__sfputs_r+0x22>
 8011140:	7821      	ldrb	r1, [r4, #0]
 8011142:	003a      	movs	r2, r7
 8011144:	0030      	movs	r0, r6
 8011146:	f7ff ffdd 	bl	8011104 <__sfputc_r>
 801114a:	3401      	adds	r4, #1
 801114c:	1c43      	adds	r3, r0, #1
 801114e:	d1f3      	bne.n	8011138 <__sfputs_r+0xa>
 8011150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011154 <_vfiprintf_r>:
 8011154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011156:	b0a1      	sub	sp, #132	; 0x84
 8011158:	000f      	movs	r7, r1
 801115a:	0015      	movs	r5, r2
 801115c:	001e      	movs	r6, r3
 801115e:	9003      	str	r0, [sp, #12]
 8011160:	2800      	cmp	r0, #0
 8011162:	d004      	beq.n	801116e <_vfiprintf_r+0x1a>
 8011164:	6a03      	ldr	r3, [r0, #32]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d101      	bne.n	801116e <_vfiprintf_r+0x1a>
 801116a:	f7fd fb37 	bl	800e7dc <__sinit>
 801116e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011170:	07db      	lsls	r3, r3, #31
 8011172:	d405      	bmi.n	8011180 <_vfiprintf_r+0x2c>
 8011174:	89bb      	ldrh	r3, [r7, #12]
 8011176:	059b      	lsls	r3, r3, #22
 8011178:	d402      	bmi.n	8011180 <_vfiprintf_r+0x2c>
 801117a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801117c:	f7fd fdbf 	bl	800ecfe <__retarget_lock_acquire_recursive>
 8011180:	89bb      	ldrh	r3, [r7, #12]
 8011182:	071b      	lsls	r3, r3, #28
 8011184:	d502      	bpl.n	801118c <_vfiprintf_r+0x38>
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d113      	bne.n	80111b4 <_vfiprintf_r+0x60>
 801118c:	0039      	movs	r1, r7
 801118e:	9803      	ldr	r0, [sp, #12]
 8011190:	f000 f93e 	bl	8011410 <__swsetup_r>
 8011194:	2800      	cmp	r0, #0
 8011196:	d00d      	beq.n	80111b4 <_vfiprintf_r+0x60>
 8011198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801119a:	07db      	lsls	r3, r3, #31
 801119c:	d503      	bpl.n	80111a6 <_vfiprintf_r+0x52>
 801119e:	2001      	movs	r0, #1
 80111a0:	4240      	negs	r0, r0
 80111a2:	b021      	add	sp, #132	; 0x84
 80111a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111a6:	89bb      	ldrh	r3, [r7, #12]
 80111a8:	059b      	lsls	r3, r3, #22
 80111aa:	d4f8      	bmi.n	801119e <_vfiprintf_r+0x4a>
 80111ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80111ae:	f7fd fda7 	bl	800ed00 <__retarget_lock_release_recursive>
 80111b2:	e7f4      	b.n	801119e <_vfiprintf_r+0x4a>
 80111b4:	2300      	movs	r3, #0
 80111b6:	ac08      	add	r4, sp, #32
 80111b8:	6163      	str	r3, [r4, #20]
 80111ba:	3320      	adds	r3, #32
 80111bc:	7663      	strb	r3, [r4, #25]
 80111be:	3310      	adds	r3, #16
 80111c0:	76a3      	strb	r3, [r4, #26]
 80111c2:	9607      	str	r6, [sp, #28]
 80111c4:	002e      	movs	r6, r5
 80111c6:	7833      	ldrb	r3, [r6, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <_vfiprintf_r+0x7c>
 80111cc:	2b25      	cmp	r3, #37	; 0x25
 80111ce:	d148      	bne.n	8011262 <_vfiprintf_r+0x10e>
 80111d0:	1b73      	subs	r3, r6, r5
 80111d2:	9305      	str	r3, [sp, #20]
 80111d4:	42ae      	cmp	r6, r5
 80111d6:	d00b      	beq.n	80111f0 <_vfiprintf_r+0x9c>
 80111d8:	002a      	movs	r2, r5
 80111da:	0039      	movs	r1, r7
 80111dc:	9803      	ldr	r0, [sp, #12]
 80111de:	f7ff ffa6 	bl	801112e <__sfputs_r>
 80111e2:	3001      	adds	r0, #1
 80111e4:	d100      	bne.n	80111e8 <_vfiprintf_r+0x94>
 80111e6:	e0af      	b.n	8011348 <_vfiprintf_r+0x1f4>
 80111e8:	6963      	ldr	r3, [r4, #20]
 80111ea:	9a05      	ldr	r2, [sp, #20]
 80111ec:	189b      	adds	r3, r3, r2
 80111ee:	6163      	str	r3, [r4, #20]
 80111f0:	7833      	ldrb	r3, [r6, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d100      	bne.n	80111f8 <_vfiprintf_r+0xa4>
 80111f6:	e0a7      	b.n	8011348 <_vfiprintf_r+0x1f4>
 80111f8:	2201      	movs	r2, #1
 80111fa:	2300      	movs	r3, #0
 80111fc:	4252      	negs	r2, r2
 80111fe:	6062      	str	r2, [r4, #4]
 8011200:	a904      	add	r1, sp, #16
 8011202:	3254      	adds	r2, #84	; 0x54
 8011204:	1852      	adds	r2, r2, r1
 8011206:	1c75      	adds	r5, r6, #1
 8011208:	6023      	str	r3, [r4, #0]
 801120a:	60e3      	str	r3, [r4, #12]
 801120c:	60a3      	str	r3, [r4, #8]
 801120e:	7013      	strb	r3, [r2, #0]
 8011210:	65a3      	str	r3, [r4, #88]	; 0x58
 8011212:	4b59      	ldr	r3, [pc, #356]	; (8011378 <_vfiprintf_r+0x224>)
 8011214:	2205      	movs	r2, #5
 8011216:	0018      	movs	r0, r3
 8011218:	7829      	ldrb	r1, [r5, #0]
 801121a:	9305      	str	r3, [sp, #20]
 801121c:	f7fd fd79 	bl	800ed12 <memchr>
 8011220:	1c6e      	adds	r6, r5, #1
 8011222:	2800      	cmp	r0, #0
 8011224:	d11f      	bne.n	8011266 <_vfiprintf_r+0x112>
 8011226:	6822      	ldr	r2, [r4, #0]
 8011228:	06d3      	lsls	r3, r2, #27
 801122a:	d504      	bpl.n	8011236 <_vfiprintf_r+0xe2>
 801122c:	2353      	movs	r3, #83	; 0x53
 801122e:	a904      	add	r1, sp, #16
 8011230:	185b      	adds	r3, r3, r1
 8011232:	2120      	movs	r1, #32
 8011234:	7019      	strb	r1, [r3, #0]
 8011236:	0713      	lsls	r3, r2, #28
 8011238:	d504      	bpl.n	8011244 <_vfiprintf_r+0xf0>
 801123a:	2353      	movs	r3, #83	; 0x53
 801123c:	a904      	add	r1, sp, #16
 801123e:	185b      	adds	r3, r3, r1
 8011240:	212b      	movs	r1, #43	; 0x2b
 8011242:	7019      	strb	r1, [r3, #0]
 8011244:	782b      	ldrb	r3, [r5, #0]
 8011246:	2b2a      	cmp	r3, #42	; 0x2a
 8011248:	d016      	beq.n	8011278 <_vfiprintf_r+0x124>
 801124a:	002e      	movs	r6, r5
 801124c:	2100      	movs	r1, #0
 801124e:	200a      	movs	r0, #10
 8011250:	68e3      	ldr	r3, [r4, #12]
 8011252:	7832      	ldrb	r2, [r6, #0]
 8011254:	1c75      	adds	r5, r6, #1
 8011256:	3a30      	subs	r2, #48	; 0x30
 8011258:	2a09      	cmp	r2, #9
 801125a:	d94e      	bls.n	80112fa <_vfiprintf_r+0x1a6>
 801125c:	2900      	cmp	r1, #0
 801125e:	d111      	bne.n	8011284 <_vfiprintf_r+0x130>
 8011260:	e017      	b.n	8011292 <_vfiprintf_r+0x13e>
 8011262:	3601      	adds	r6, #1
 8011264:	e7af      	b.n	80111c6 <_vfiprintf_r+0x72>
 8011266:	9b05      	ldr	r3, [sp, #20]
 8011268:	6822      	ldr	r2, [r4, #0]
 801126a:	1ac0      	subs	r0, r0, r3
 801126c:	2301      	movs	r3, #1
 801126e:	4083      	lsls	r3, r0
 8011270:	4313      	orrs	r3, r2
 8011272:	0035      	movs	r5, r6
 8011274:	6023      	str	r3, [r4, #0]
 8011276:	e7cc      	b.n	8011212 <_vfiprintf_r+0xbe>
 8011278:	9b07      	ldr	r3, [sp, #28]
 801127a:	1d19      	adds	r1, r3, #4
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	9107      	str	r1, [sp, #28]
 8011280:	2b00      	cmp	r3, #0
 8011282:	db01      	blt.n	8011288 <_vfiprintf_r+0x134>
 8011284:	930b      	str	r3, [sp, #44]	; 0x2c
 8011286:	e004      	b.n	8011292 <_vfiprintf_r+0x13e>
 8011288:	425b      	negs	r3, r3
 801128a:	60e3      	str	r3, [r4, #12]
 801128c:	2302      	movs	r3, #2
 801128e:	4313      	orrs	r3, r2
 8011290:	6023      	str	r3, [r4, #0]
 8011292:	7833      	ldrb	r3, [r6, #0]
 8011294:	2b2e      	cmp	r3, #46	; 0x2e
 8011296:	d10a      	bne.n	80112ae <_vfiprintf_r+0x15a>
 8011298:	7873      	ldrb	r3, [r6, #1]
 801129a:	2b2a      	cmp	r3, #42	; 0x2a
 801129c:	d135      	bne.n	801130a <_vfiprintf_r+0x1b6>
 801129e:	9b07      	ldr	r3, [sp, #28]
 80112a0:	3602      	adds	r6, #2
 80112a2:	1d1a      	adds	r2, r3, #4
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	9207      	str	r2, [sp, #28]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	db2b      	blt.n	8011304 <_vfiprintf_r+0x1b0>
 80112ac:	9309      	str	r3, [sp, #36]	; 0x24
 80112ae:	4d33      	ldr	r5, [pc, #204]	; (801137c <_vfiprintf_r+0x228>)
 80112b0:	2203      	movs	r2, #3
 80112b2:	0028      	movs	r0, r5
 80112b4:	7831      	ldrb	r1, [r6, #0]
 80112b6:	f7fd fd2c 	bl	800ed12 <memchr>
 80112ba:	2800      	cmp	r0, #0
 80112bc:	d006      	beq.n	80112cc <_vfiprintf_r+0x178>
 80112be:	2340      	movs	r3, #64	; 0x40
 80112c0:	1b40      	subs	r0, r0, r5
 80112c2:	4083      	lsls	r3, r0
 80112c4:	6822      	ldr	r2, [r4, #0]
 80112c6:	3601      	adds	r6, #1
 80112c8:	4313      	orrs	r3, r2
 80112ca:	6023      	str	r3, [r4, #0]
 80112cc:	7831      	ldrb	r1, [r6, #0]
 80112ce:	2206      	movs	r2, #6
 80112d0:	482b      	ldr	r0, [pc, #172]	; (8011380 <_vfiprintf_r+0x22c>)
 80112d2:	1c75      	adds	r5, r6, #1
 80112d4:	7621      	strb	r1, [r4, #24]
 80112d6:	f7fd fd1c 	bl	800ed12 <memchr>
 80112da:	2800      	cmp	r0, #0
 80112dc:	d043      	beq.n	8011366 <_vfiprintf_r+0x212>
 80112de:	4b29      	ldr	r3, [pc, #164]	; (8011384 <_vfiprintf_r+0x230>)
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d125      	bne.n	8011330 <_vfiprintf_r+0x1dc>
 80112e4:	2207      	movs	r2, #7
 80112e6:	9b07      	ldr	r3, [sp, #28]
 80112e8:	3307      	adds	r3, #7
 80112ea:	4393      	bics	r3, r2
 80112ec:	3308      	adds	r3, #8
 80112ee:	9307      	str	r3, [sp, #28]
 80112f0:	6963      	ldr	r3, [r4, #20]
 80112f2:	9a04      	ldr	r2, [sp, #16]
 80112f4:	189b      	adds	r3, r3, r2
 80112f6:	6163      	str	r3, [r4, #20]
 80112f8:	e764      	b.n	80111c4 <_vfiprintf_r+0x70>
 80112fa:	4343      	muls	r3, r0
 80112fc:	002e      	movs	r6, r5
 80112fe:	2101      	movs	r1, #1
 8011300:	189b      	adds	r3, r3, r2
 8011302:	e7a6      	b.n	8011252 <_vfiprintf_r+0xfe>
 8011304:	2301      	movs	r3, #1
 8011306:	425b      	negs	r3, r3
 8011308:	e7d0      	b.n	80112ac <_vfiprintf_r+0x158>
 801130a:	2300      	movs	r3, #0
 801130c:	200a      	movs	r0, #10
 801130e:	001a      	movs	r2, r3
 8011310:	3601      	adds	r6, #1
 8011312:	6063      	str	r3, [r4, #4]
 8011314:	7831      	ldrb	r1, [r6, #0]
 8011316:	1c75      	adds	r5, r6, #1
 8011318:	3930      	subs	r1, #48	; 0x30
 801131a:	2909      	cmp	r1, #9
 801131c:	d903      	bls.n	8011326 <_vfiprintf_r+0x1d2>
 801131e:	2b00      	cmp	r3, #0
 8011320:	d0c5      	beq.n	80112ae <_vfiprintf_r+0x15a>
 8011322:	9209      	str	r2, [sp, #36]	; 0x24
 8011324:	e7c3      	b.n	80112ae <_vfiprintf_r+0x15a>
 8011326:	4342      	muls	r2, r0
 8011328:	002e      	movs	r6, r5
 801132a:	2301      	movs	r3, #1
 801132c:	1852      	adds	r2, r2, r1
 801132e:	e7f1      	b.n	8011314 <_vfiprintf_r+0x1c0>
 8011330:	aa07      	add	r2, sp, #28
 8011332:	9200      	str	r2, [sp, #0]
 8011334:	0021      	movs	r1, r4
 8011336:	003a      	movs	r2, r7
 8011338:	4b13      	ldr	r3, [pc, #76]	; (8011388 <_vfiprintf_r+0x234>)
 801133a:	9803      	ldr	r0, [sp, #12]
 801133c:	f7fc fbe0 	bl	800db00 <_printf_float>
 8011340:	9004      	str	r0, [sp, #16]
 8011342:	9b04      	ldr	r3, [sp, #16]
 8011344:	3301      	adds	r3, #1
 8011346:	d1d3      	bne.n	80112f0 <_vfiprintf_r+0x19c>
 8011348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801134a:	07db      	lsls	r3, r3, #31
 801134c:	d405      	bmi.n	801135a <_vfiprintf_r+0x206>
 801134e:	89bb      	ldrh	r3, [r7, #12]
 8011350:	059b      	lsls	r3, r3, #22
 8011352:	d402      	bmi.n	801135a <_vfiprintf_r+0x206>
 8011354:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8011356:	f7fd fcd3 	bl	800ed00 <__retarget_lock_release_recursive>
 801135a:	89bb      	ldrh	r3, [r7, #12]
 801135c:	065b      	lsls	r3, r3, #25
 801135e:	d500      	bpl.n	8011362 <_vfiprintf_r+0x20e>
 8011360:	e71d      	b.n	801119e <_vfiprintf_r+0x4a>
 8011362:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011364:	e71d      	b.n	80111a2 <_vfiprintf_r+0x4e>
 8011366:	aa07      	add	r2, sp, #28
 8011368:	9200      	str	r2, [sp, #0]
 801136a:	0021      	movs	r1, r4
 801136c:	003a      	movs	r2, r7
 801136e:	4b06      	ldr	r3, [pc, #24]	; (8011388 <_vfiprintf_r+0x234>)
 8011370:	9803      	ldr	r0, [sp, #12]
 8011372:	f7fc fe8b 	bl	800e08c <_printf_i>
 8011376:	e7e3      	b.n	8011340 <_vfiprintf_r+0x1ec>
 8011378:	08013b6c 	.word	0x08013b6c
 801137c:	08013b72 	.word	0x08013b72
 8011380:	08013b76 	.word	0x08013b76
 8011384:	0800db01 	.word	0x0800db01
 8011388:	0801112f 	.word	0x0801112f

0801138c <__swbuf_r>:
 801138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801138e:	0006      	movs	r6, r0
 8011390:	000d      	movs	r5, r1
 8011392:	0014      	movs	r4, r2
 8011394:	2800      	cmp	r0, #0
 8011396:	d004      	beq.n	80113a2 <__swbuf_r+0x16>
 8011398:	6a03      	ldr	r3, [r0, #32]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d101      	bne.n	80113a2 <__swbuf_r+0x16>
 801139e:	f7fd fa1d 	bl	800e7dc <__sinit>
 80113a2:	69a3      	ldr	r3, [r4, #24]
 80113a4:	60a3      	str	r3, [r4, #8]
 80113a6:	89a3      	ldrh	r3, [r4, #12]
 80113a8:	071b      	lsls	r3, r3, #28
 80113aa:	d528      	bpl.n	80113fe <__swbuf_r+0x72>
 80113ac:	6923      	ldr	r3, [r4, #16]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d025      	beq.n	80113fe <__swbuf_r+0x72>
 80113b2:	6923      	ldr	r3, [r4, #16]
 80113b4:	6820      	ldr	r0, [r4, #0]
 80113b6:	b2ef      	uxtb	r7, r5
 80113b8:	1ac0      	subs	r0, r0, r3
 80113ba:	6963      	ldr	r3, [r4, #20]
 80113bc:	b2ed      	uxtb	r5, r5
 80113be:	4283      	cmp	r3, r0
 80113c0:	dc05      	bgt.n	80113ce <__swbuf_r+0x42>
 80113c2:	0021      	movs	r1, r4
 80113c4:	0030      	movs	r0, r6
 80113c6:	f7ff fdeb 	bl	8010fa0 <_fflush_r>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	d11d      	bne.n	801140a <__swbuf_r+0x7e>
 80113ce:	68a3      	ldr	r3, [r4, #8]
 80113d0:	3001      	adds	r0, #1
 80113d2:	3b01      	subs	r3, #1
 80113d4:	60a3      	str	r3, [r4, #8]
 80113d6:	6823      	ldr	r3, [r4, #0]
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	6022      	str	r2, [r4, #0]
 80113dc:	701f      	strb	r7, [r3, #0]
 80113de:	6963      	ldr	r3, [r4, #20]
 80113e0:	4283      	cmp	r3, r0
 80113e2:	d004      	beq.n	80113ee <__swbuf_r+0x62>
 80113e4:	89a3      	ldrh	r3, [r4, #12]
 80113e6:	07db      	lsls	r3, r3, #31
 80113e8:	d507      	bpl.n	80113fa <__swbuf_r+0x6e>
 80113ea:	2d0a      	cmp	r5, #10
 80113ec:	d105      	bne.n	80113fa <__swbuf_r+0x6e>
 80113ee:	0021      	movs	r1, r4
 80113f0:	0030      	movs	r0, r6
 80113f2:	f7ff fdd5 	bl	8010fa0 <_fflush_r>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d107      	bne.n	801140a <__swbuf_r+0x7e>
 80113fa:	0028      	movs	r0, r5
 80113fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113fe:	0021      	movs	r1, r4
 8011400:	0030      	movs	r0, r6
 8011402:	f000 f805 	bl	8011410 <__swsetup_r>
 8011406:	2800      	cmp	r0, #0
 8011408:	d0d3      	beq.n	80113b2 <__swbuf_r+0x26>
 801140a:	2501      	movs	r5, #1
 801140c:	426d      	negs	r5, r5
 801140e:	e7f4      	b.n	80113fa <__swbuf_r+0x6e>

08011410 <__swsetup_r>:
 8011410:	4b30      	ldr	r3, [pc, #192]	; (80114d4 <__swsetup_r+0xc4>)
 8011412:	b570      	push	{r4, r5, r6, lr}
 8011414:	0005      	movs	r5, r0
 8011416:	6818      	ldr	r0, [r3, #0]
 8011418:	000c      	movs	r4, r1
 801141a:	2800      	cmp	r0, #0
 801141c:	d004      	beq.n	8011428 <__swsetup_r+0x18>
 801141e:	6a03      	ldr	r3, [r0, #32]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d101      	bne.n	8011428 <__swsetup_r+0x18>
 8011424:	f7fd f9da 	bl	800e7dc <__sinit>
 8011428:	230c      	movs	r3, #12
 801142a:	5ee2      	ldrsh	r2, [r4, r3]
 801142c:	b293      	uxth	r3, r2
 801142e:	0711      	lsls	r1, r2, #28
 8011430:	d423      	bmi.n	801147a <__swsetup_r+0x6a>
 8011432:	06d9      	lsls	r1, r3, #27
 8011434:	d407      	bmi.n	8011446 <__swsetup_r+0x36>
 8011436:	2309      	movs	r3, #9
 8011438:	2001      	movs	r0, #1
 801143a:	602b      	str	r3, [r5, #0]
 801143c:	3337      	adds	r3, #55	; 0x37
 801143e:	4313      	orrs	r3, r2
 8011440:	81a3      	strh	r3, [r4, #12]
 8011442:	4240      	negs	r0, r0
 8011444:	bd70      	pop	{r4, r5, r6, pc}
 8011446:	075b      	lsls	r3, r3, #29
 8011448:	d513      	bpl.n	8011472 <__swsetup_r+0x62>
 801144a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801144c:	2900      	cmp	r1, #0
 801144e:	d008      	beq.n	8011462 <__swsetup_r+0x52>
 8011450:	0023      	movs	r3, r4
 8011452:	3344      	adds	r3, #68	; 0x44
 8011454:	4299      	cmp	r1, r3
 8011456:	d002      	beq.n	801145e <__swsetup_r+0x4e>
 8011458:	0028      	movs	r0, r5
 801145a:	f7fe fb35 	bl	800fac8 <_free_r>
 801145e:	2300      	movs	r3, #0
 8011460:	6363      	str	r3, [r4, #52]	; 0x34
 8011462:	2224      	movs	r2, #36	; 0x24
 8011464:	89a3      	ldrh	r3, [r4, #12]
 8011466:	4393      	bics	r3, r2
 8011468:	81a3      	strh	r3, [r4, #12]
 801146a:	2300      	movs	r3, #0
 801146c:	6063      	str	r3, [r4, #4]
 801146e:	6923      	ldr	r3, [r4, #16]
 8011470:	6023      	str	r3, [r4, #0]
 8011472:	2308      	movs	r3, #8
 8011474:	89a2      	ldrh	r2, [r4, #12]
 8011476:	4313      	orrs	r3, r2
 8011478:	81a3      	strh	r3, [r4, #12]
 801147a:	6923      	ldr	r3, [r4, #16]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d10b      	bne.n	8011498 <__swsetup_r+0x88>
 8011480:	21a0      	movs	r1, #160	; 0xa0
 8011482:	2280      	movs	r2, #128	; 0x80
 8011484:	89a3      	ldrh	r3, [r4, #12]
 8011486:	0089      	lsls	r1, r1, #2
 8011488:	0092      	lsls	r2, r2, #2
 801148a:	400b      	ands	r3, r1
 801148c:	4293      	cmp	r3, r2
 801148e:	d003      	beq.n	8011498 <__swsetup_r+0x88>
 8011490:	0021      	movs	r1, r4
 8011492:	0028      	movs	r0, r5
 8011494:	f000 f89a 	bl	80115cc <__smakebuf_r>
 8011498:	220c      	movs	r2, #12
 801149a:	5ea3      	ldrsh	r3, [r4, r2]
 801149c:	2001      	movs	r0, #1
 801149e:	001a      	movs	r2, r3
 80114a0:	b299      	uxth	r1, r3
 80114a2:	4002      	ands	r2, r0
 80114a4:	4203      	tst	r3, r0
 80114a6:	d00f      	beq.n	80114c8 <__swsetup_r+0xb8>
 80114a8:	2200      	movs	r2, #0
 80114aa:	60a2      	str	r2, [r4, #8]
 80114ac:	6962      	ldr	r2, [r4, #20]
 80114ae:	4252      	negs	r2, r2
 80114b0:	61a2      	str	r2, [r4, #24]
 80114b2:	2000      	movs	r0, #0
 80114b4:	6922      	ldr	r2, [r4, #16]
 80114b6:	4282      	cmp	r2, r0
 80114b8:	d1c4      	bne.n	8011444 <__swsetup_r+0x34>
 80114ba:	0609      	lsls	r1, r1, #24
 80114bc:	d5c2      	bpl.n	8011444 <__swsetup_r+0x34>
 80114be:	2240      	movs	r2, #64	; 0x40
 80114c0:	4313      	orrs	r3, r2
 80114c2:	81a3      	strh	r3, [r4, #12]
 80114c4:	3801      	subs	r0, #1
 80114c6:	e7bd      	b.n	8011444 <__swsetup_r+0x34>
 80114c8:	0788      	lsls	r0, r1, #30
 80114ca:	d400      	bmi.n	80114ce <__swsetup_r+0xbe>
 80114cc:	6962      	ldr	r2, [r4, #20]
 80114ce:	60a2      	str	r2, [r4, #8]
 80114d0:	e7ef      	b.n	80114b2 <__swsetup_r+0xa2>
 80114d2:	46c0      	nop			; (mov r8, r8)
 80114d4:	200002f0 	.word	0x200002f0

080114d8 <_raise_r>:
 80114d8:	b570      	push	{r4, r5, r6, lr}
 80114da:	0004      	movs	r4, r0
 80114dc:	000d      	movs	r5, r1
 80114de:	291f      	cmp	r1, #31
 80114e0:	d904      	bls.n	80114ec <_raise_r+0x14>
 80114e2:	2316      	movs	r3, #22
 80114e4:	6003      	str	r3, [r0, #0]
 80114e6:	2001      	movs	r0, #1
 80114e8:	4240      	negs	r0, r0
 80114ea:	bd70      	pop	{r4, r5, r6, pc}
 80114ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d004      	beq.n	80114fc <_raise_r+0x24>
 80114f2:	008a      	lsls	r2, r1, #2
 80114f4:	189b      	adds	r3, r3, r2
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	2a00      	cmp	r2, #0
 80114fa:	d108      	bne.n	801150e <_raise_r+0x36>
 80114fc:	0020      	movs	r0, r4
 80114fe:	f000 f831 	bl	8011564 <_getpid_r>
 8011502:	002a      	movs	r2, r5
 8011504:	0001      	movs	r1, r0
 8011506:	0020      	movs	r0, r4
 8011508:	f000 f81a 	bl	8011540 <_kill_r>
 801150c:	e7ed      	b.n	80114ea <_raise_r+0x12>
 801150e:	2000      	movs	r0, #0
 8011510:	2a01      	cmp	r2, #1
 8011512:	d0ea      	beq.n	80114ea <_raise_r+0x12>
 8011514:	1c51      	adds	r1, r2, #1
 8011516:	d103      	bne.n	8011520 <_raise_r+0x48>
 8011518:	2316      	movs	r3, #22
 801151a:	3001      	adds	r0, #1
 801151c:	6023      	str	r3, [r4, #0]
 801151e:	e7e4      	b.n	80114ea <_raise_r+0x12>
 8011520:	2400      	movs	r4, #0
 8011522:	0028      	movs	r0, r5
 8011524:	601c      	str	r4, [r3, #0]
 8011526:	4790      	blx	r2
 8011528:	0020      	movs	r0, r4
 801152a:	e7de      	b.n	80114ea <_raise_r+0x12>

0801152c <raise>:
 801152c:	b510      	push	{r4, lr}
 801152e:	4b03      	ldr	r3, [pc, #12]	; (801153c <raise+0x10>)
 8011530:	0001      	movs	r1, r0
 8011532:	6818      	ldr	r0, [r3, #0]
 8011534:	f7ff ffd0 	bl	80114d8 <_raise_r>
 8011538:	bd10      	pop	{r4, pc}
 801153a:	46c0      	nop			; (mov r8, r8)
 801153c:	200002f0 	.word	0x200002f0

08011540 <_kill_r>:
 8011540:	2300      	movs	r3, #0
 8011542:	b570      	push	{r4, r5, r6, lr}
 8011544:	4d06      	ldr	r5, [pc, #24]	; (8011560 <_kill_r+0x20>)
 8011546:	0004      	movs	r4, r0
 8011548:	0008      	movs	r0, r1
 801154a:	0011      	movs	r1, r2
 801154c:	602b      	str	r3, [r5, #0]
 801154e:	f7f6 f9a5 	bl	800789c <_kill>
 8011552:	1c43      	adds	r3, r0, #1
 8011554:	d103      	bne.n	801155e <_kill_r+0x1e>
 8011556:	682b      	ldr	r3, [r5, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d000      	beq.n	801155e <_kill_r+0x1e>
 801155c:	6023      	str	r3, [r4, #0]
 801155e:	bd70      	pop	{r4, r5, r6, pc}
 8011560:	2000661c 	.word	0x2000661c

08011564 <_getpid_r>:
 8011564:	b510      	push	{r4, lr}
 8011566:	f7f6 f997 	bl	8007898 <_getpid>
 801156a:	bd10      	pop	{r4, pc}

0801156c <_malloc_usable_size_r>:
 801156c:	1f0b      	subs	r3, r1, #4
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	1f18      	subs	r0, r3, #4
 8011572:	2b00      	cmp	r3, #0
 8011574:	da01      	bge.n	801157a <_malloc_usable_size_r+0xe>
 8011576:	580b      	ldr	r3, [r1, r0]
 8011578:	18c0      	adds	r0, r0, r3
 801157a:	4770      	bx	lr

0801157c <__swhatbuf_r>:
 801157c:	b570      	push	{r4, r5, r6, lr}
 801157e:	000e      	movs	r6, r1
 8011580:	001d      	movs	r5, r3
 8011582:	230e      	movs	r3, #14
 8011584:	5ec9      	ldrsh	r1, [r1, r3]
 8011586:	0014      	movs	r4, r2
 8011588:	b096      	sub	sp, #88	; 0x58
 801158a:	2900      	cmp	r1, #0
 801158c:	da0c      	bge.n	80115a8 <__swhatbuf_r+0x2c>
 801158e:	89b2      	ldrh	r2, [r6, #12]
 8011590:	2380      	movs	r3, #128	; 0x80
 8011592:	0011      	movs	r1, r2
 8011594:	4019      	ands	r1, r3
 8011596:	421a      	tst	r2, r3
 8011598:	d013      	beq.n	80115c2 <__swhatbuf_r+0x46>
 801159a:	2100      	movs	r1, #0
 801159c:	3b40      	subs	r3, #64	; 0x40
 801159e:	2000      	movs	r0, #0
 80115a0:	6029      	str	r1, [r5, #0]
 80115a2:	6023      	str	r3, [r4, #0]
 80115a4:	b016      	add	sp, #88	; 0x58
 80115a6:	bd70      	pop	{r4, r5, r6, pc}
 80115a8:	466a      	mov	r2, sp
 80115aa:	f000 f84d 	bl	8011648 <_fstat_r>
 80115ae:	2800      	cmp	r0, #0
 80115b0:	dbed      	blt.n	801158e <__swhatbuf_r+0x12>
 80115b2:	23f0      	movs	r3, #240	; 0xf0
 80115b4:	9901      	ldr	r1, [sp, #4]
 80115b6:	021b      	lsls	r3, r3, #8
 80115b8:	4019      	ands	r1, r3
 80115ba:	4b03      	ldr	r3, [pc, #12]	; (80115c8 <__swhatbuf_r+0x4c>)
 80115bc:	18c9      	adds	r1, r1, r3
 80115be:	424b      	negs	r3, r1
 80115c0:	4159      	adcs	r1, r3
 80115c2:	2380      	movs	r3, #128	; 0x80
 80115c4:	00db      	lsls	r3, r3, #3
 80115c6:	e7ea      	b.n	801159e <__swhatbuf_r+0x22>
 80115c8:	ffffe000 	.word	0xffffe000

080115cc <__smakebuf_r>:
 80115cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115ce:	2602      	movs	r6, #2
 80115d0:	898b      	ldrh	r3, [r1, #12]
 80115d2:	0005      	movs	r5, r0
 80115d4:	000c      	movs	r4, r1
 80115d6:	4233      	tst	r3, r6
 80115d8:	d006      	beq.n	80115e8 <__smakebuf_r+0x1c>
 80115da:	0023      	movs	r3, r4
 80115dc:	3347      	adds	r3, #71	; 0x47
 80115de:	6023      	str	r3, [r4, #0]
 80115e0:	6123      	str	r3, [r4, #16]
 80115e2:	2301      	movs	r3, #1
 80115e4:	6163      	str	r3, [r4, #20]
 80115e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80115e8:	466a      	mov	r2, sp
 80115ea:	ab01      	add	r3, sp, #4
 80115ec:	f7ff ffc6 	bl	801157c <__swhatbuf_r>
 80115f0:	9900      	ldr	r1, [sp, #0]
 80115f2:	0007      	movs	r7, r0
 80115f4:	0028      	movs	r0, r5
 80115f6:	f7fb fa7b 	bl	800caf0 <_malloc_r>
 80115fa:	2800      	cmp	r0, #0
 80115fc:	d108      	bne.n	8011610 <__smakebuf_r+0x44>
 80115fe:	220c      	movs	r2, #12
 8011600:	5ea3      	ldrsh	r3, [r4, r2]
 8011602:	059a      	lsls	r2, r3, #22
 8011604:	d4ef      	bmi.n	80115e6 <__smakebuf_r+0x1a>
 8011606:	2203      	movs	r2, #3
 8011608:	4393      	bics	r3, r2
 801160a:	431e      	orrs	r6, r3
 801160c:	81a6      	strh	r6, [r4, #12]
 801160e:	e7e4      	b.n	80115da <__smakebuf_r+0xe>
 8011610:	2380      	movs	r3, #128	; 0x80
 8011612:	89a2      	ldrh	r2, [r4, #12]
 8011614:	6020      	str	r0, [r4, #0]
 8011616:	4313      	orrs	r3, r2
 8011618:	81a3      	strh	r3, [r4, #12]
 801161a:	9b00      	ldr	r3, [sp, #0]
 801161c:	6120      	str	r0, [r4, #16]
 801161e:	6163      	str	r3, [r4, #20]
 8011620:	9b01      	ldr	r3, [sp, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d00c      	beq.n	8011640 <__smakebuf_r+0x74>
 8011626:	0028      	movs	r0, r5
 8011628:	230e      	movs	r3, #14
 801162a:	5ee1      	ldrsh	r1, [r4, r3]
 801162c:	f000 f81e 	bl	801166c <_isatty_r>
 8011630:	2800      	cmp	r0, #0
 8011632:	d005      	beq.n	8011640 <__smakebuf_r+0x74>
 8011634:	2303      	movs	r3, #3
 8011636:	89a2      	ldrh	r2, [r4, #12]
 8011638:	439a      	bics	r2, r3
 801163a:	3b02      	subs	r3, #2
 801163c:	4313      	orrs	r3, r2
 801163e:	81a3      	strh	r3, [r4, #12]
 8011640:	89a3      	ldrh	r3, [r4, #12]
 8011642:	433b      	orrs	r3, r7
 8011644:	81a3      	strh	r3, [r4, #12]
 8011646:	e7ce      	b.n	80115e6 <__smakebuf_r+0x1a>

08011648 <_fstat_r>:
 8011648:	2300      	movs	r3, #0
 801164a:	b570      	push	{r4, r5, r6, lr}
 801164c:	4d06      	ldr	r5, [pc, #24]	; (8011668 <_fstat_r+0x20>)
 801164e:	0004      	movs	r4, r0
 8011650:	0008      	movs	r0, r1
 8011652:	0011      	movs	r1, r2
 8011654:	602b      	str	r3, [r5, #0]
 8011656:	f7f6 f94f 	bl	80078f8 <_fstat>
 801165a:	1c43      	adds	r3, r0, #1
 801165c:	d103      	bne.n	8011666 <_fstat_r+0x1e>
 801165e:	682b      	ldr	r3, [r5, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d000      	beq.n	8011666 <_fstat_r+0x1e>
 8011664:	6023      	str	r3, [r4, #0]
 8011666:	bd70      	pop	{r4, r5, r6, pc}
 8011668:	2000661c 	.word	0x2000661c

0801166c <_isatty_r>:
 801166c:	2300      	movs	r3, #0
 801166e:	b570      	push	{r4, r5, r6, lr}
 8011670:	4d06      	ldr	r5, [pc, #24]	; (801168c <_isatty_r+0x20>)
 8011672:	0004      	movs	r4, r0
 8011674:	0008      	movs	r0, r1
 8011676:	602b      	str	r3, [r5, #0]
 8011678:	f7f6 f944 	bl	8007904 <_isatty>
 801167c:	1c43      	adds	r3, r0, #1
 801167e:	d103      	bne.n	8011688 <_isatty_r+0x1c>
 8011680:	682b      	ldr	r3, [r5, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d000      	beq.n	8011688 <_isatty_r+0x1c>
 8011686:	6023      	str	r3, [r4, #0]
 8011688:	bd70      	pop	{r4, r5, r6, pc}
 801168a:	46c0      	nop			; (mov r8, r8)
 801168c:	2000661c 	.word	0x2000661c

08011690 <pow>:
 8011690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011692:	0014      	movs	r4, r2
 8011694:	001d      	movs	r5, r3
 8011696:	9000      	str	r0, [sp, #0]
 8011698:	9101      	str	r1, [sp, #4]
 801169a:	f000 f86f 	bl	801177c <__ieee754_pow>
 801169e:	0022      	movs	r2, r4
 80116a0:	0006      	movs	r6, r0
 80116a2:	000f      	movs	r7, r1
 80116a4:	002b      	movs	r3, r5
 80116a6:	0020      	movs	r0, r4
 80116a8:	0029      	movs	r1, r5
 80116aa:	f7f1 fc57 	bl	8002f5c <__aeabi_dcmpun>
 80116ae:	2800      	cmp	r0, #0
 80116b0:	d13f      	bne.n	8011732 <pow+0xa2>
 80116b2:	9800      	ldr	r0, [sp, #0]
 80116b4:	9901      	ldr	r1, [sp, #4]
 80116b6:	2200      	movs	r2, #0
 80116b8:	2300      	movs	r3, #0
 80116ba:	f7ee fec7 	bl	800044c <__aeabi_dcmpeq>
 80116be:	2800      	cmp	r0, #0
 80116c0:	d019      	beq.n	80116f6 <pow+0x66>
 80116c2:	2200      	movs	r2, #0
 80116c4:	2300      	movs	r3, #0
 80116c6:	0020      	movs	r0, r4
 80116c8:	0029      	movs	r1, r5
 80116ca:	f7ee febf 	bl	800044c <__aeabi_dcmpeq>
 80116ce:	2800      	cmp	r0, #0
 80116d0:	d146      	bne.n	8011760 <pow+0xd0>
 80116d2:	0020      	movs	r0, r4
 80116d4:	0029      	movs	r1, r5
 80116d6:	f000 f849 	bl	801176c <finite>
 80116da:	2800      	cmp	r0, #0
 80116dc:	d029      	beq.n	8011732 <pow+0xa2>
 80116de:	2200      	movs	r2, #0
 80116e0:	2300      	movs	r3, #0
 80116e2:	0020      	movs	r0, r4
 80116e4:	0029      	movs	r1, r5
 80116e6:	f7ee feb7 	bl	8000458 <__aeabi_dcmplt>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d021      	beq.n	8011732 <pow+0xa2>
 80116ee:	f7fd fadb 	bl	800eca8 <__errno>
 80116f2:	2322      	movs	r3, #34	; 0x22
 80116f4:	e01c      	b.n	8011730 <pow+0xa0>
 80116f6:	0030      	movs	r0, r6
 80116f8:	0039      	movs	r1, r7
 80116fa:	f000 f837 	bl	801176c <finite>
 80116fe:	2800      	cmp	r0, #0
 8011700:	d11b      	bne.n	801173a <pow+0xaa>
 8011702:	9800      	ldr	r0, [sp, #0]
 8011704:	9901      	ldr	r1, [sp, #4]
 8011706:	f000 f831 	bl	801176c <finite>
 801170a:	2800      	cmp	r0, #0
 801170c:	d015      	beq.n	801173a <pow+0xaa>
 801170e:	0020      	movs	r0, r4
 8011710:	0029      	movs	r1, r5
 8011712:	f000 f82b 	bl	801176c <finite>
 8011716:	2800      	cmp	r0, #0
 8011718:	d00f      	beq.n	801173a <pow+0xaa>
 801171a:	0032      	movs	r2, r6
 801171c:	003b      	movs	r3, r7
 801171e:	0030      	movs	r0, r6
 8011720:	0039      	movs	r1, r7
 8011722:	f7f1 fc1b 	bl	8002f5c <__aeabi_dcmpun>
 8011726:	2800      	cmp	r0, #0
 8011728:	d0e1      	beq.n	80116ee <pow+0x5e>
 801172a:	f7fd fabd 	bl	800eca8 <__errno>
 801172e:	2321      	movs	r3, #33	; 0x21
 8011730:	6003      	str	r3, [r0, #0]
 8011732:	0030      	movs	r0, r6
 8011734:	0039      	movs	r1, r7
 8011736:	b003      	add	sp, #12
 8011738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801173a:	2200      	movs	r2, #0
 801173c:	2300      	movs	r3, #0
 801173e:	0030      	movs	r0, r6
 8011740:	0039      	movs	r1, r7
 8011742:	f7ee fe83 	bl	800044c <__aeabi_dcmpeq>
 8011746:	2800      	cmp	r0, #0
 8011748:	d0f3      	beq.n	8011732 <pow+0xa2>
 801174a:	9800      	ldr	r0, [sp, #0]
 801174c:	9901      	ldr	r1, [sp, #4]
 801174e:	f000 f80d 	bl	801176c <finite>
 8011752:	2800      	cmp	r0, #0
 8011754:	d0ed      	beq.n	8011732 <pow+0xa2>
 8011756:	0020      	movs	r0, r4
 8011758:	0029      	movs	r1, r5
 801175a:	f000 f807 	bl	801176c <finite>
 801175e:	e7c4      	b.n	80116ea <pow+0x5a>
 8011760:	2600      	movs	r6, #0
 8011762:	4f01      	ldr	r7, [pc, #4]	; (8011768 <pow+0xd8>)
 8011764:	e7e5      	b.n	8011732 <pow+0xa2>
 8011766:	46c0      	nop			; (mov r8, r8)
 8011768:	3ff00000 	.word	0x3ff00000

0801176c <finite>:
 801176c:	4b02      	ldr	r3, [pc, #8]	; (8011778 <finite+0xc>)
 801176e:	0048      	lsls	r0, r1, #1
 8011770:	0840      	lsrs	r0, r0, #1
 8011772:	18c0      	adds	r0, r0, r3
 8011774:	0fc0      	lsrs	r0, r0, #31
 8011776:	4770      	bx	lr
 8011778:	80100000 	.word	0x80100000

0801177c <__ieee754_pow>:
 801177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801177e:	b095      	sub	sp, #84	; 0x54
 8011780:	9202      	str	r2, [sp, #8]
 8011782:	9303      	str	r3, [sp, #12]
 8011784:	9b03      	ldr	r3, [sp, #12]
 8011786:	9a03      	ldr	r2, [sp, #12]
 8011788:	9304      	str	r3, [sp, #16]
 801178a:	9b02      	ldr	r3, [sp, #8]
 801178c:	0056      	lsls	r6, r2, #1
 801178e:	001a      	movs	r2, r3
 8011790:	0876      	lsrs	r6, r6, #1
 8011792:	0007      	movs	r7, r0
 8011794:	000d      	movs	r5, r1
 8011796:	4332      	orrs	r2, r6
 8011798:	d119      	bne.n	80117ce <__ieee754_pow+0x52>
 801179a:	2180      	movs	r1, #128	; 0x80
 801179c:	0309      	lsls	r1, r1, #12
 801179e:	4069      	eors	r1, r5
 80117a0:	0002      	movs	r2, r0
 80117a2:	000b      	movs	r3, r1
 80117a4:	1892      	adds	r2, r2, r2
 80117a6:	415b      	adcs	r3, r3
 80117a8:	4989      	ldr	r1, [pc, #548]	; (80119d0 <__ieee754_pow+0x254>)
 80117aa:	428b      	cmp	r3, r1
 80117ac:	d806      	bhi.n	80117bc <__ieee754_pow+0x40>
 80117ae:	d001      	beq.n	80117b4 <__ieee754_pow+0x38>
 80117b0:	f000 fcb6 	bl	8012120 <__ieee754_pow+0x9a4>
 80117b4:	2a00      	cmp	r2, #0
 80117b6:	d101      	bne.n	80117bc <__ieee754_pow+0x40>
 80117b8:	f000 fcb2 	bl	8012120 <__ieee754_pow+0x9a4>
 80117bc:	9a02      	ldr	r2, [sp, #8]
 80117be:	9b03      	ldr	r3, [sp, #12]
 80117c0:	0038      	movs	r0, r7
 80117c2:	0029      	movs	r1, r5
 80117c4:	f7ef fe2c 	bl	8001420 <__aeabi_dadd>
 80117c8:	9000      	str	r0, [sp, #0]
 80117ca:	9101      	str	r1, [sp, #4]
 80117cc:	e0ad      	b.n	801192a <__ieee754_pow+0x1ae>
 80117ce:	4a81      	ldr	r2, [pc, #516]	; (80119d4 <__ieee754_pow+0x258>)
 80117d0:	004c      	lsls	r4, r1, #1
 80117d2:	9108      	str	r1, [sp, #32]
 80117d4:	9000      	str	r0, [sp, #0]
 80117d6:	0864      	lsrs	r4, r4, #1
 80117d8:	4294      	cmp	r4, r2
 80117da:	dc08      	bgt.n	80117ee <__ieee754_pow+0x72>
 80117dc:	d101      	bne.n	80117e2 <__ieee754_pow+0x66>
 80117de:	2800      	cmp	r0, #0
 80117e0:	d1ec      	bne.n	80117bc <__ieee754_pow+0x40>
 80117e2:	4a7c      	ldr	r2, [pc, #496]	; (80119d4 <__ieee754_pow+0x258>)
 80117e4:	4296      	cmp	r6, r2
 80117e6:	dc02      	bgt.n	80117ee <__ieee754_pow+0x72>
 80117e8:	d10c      	bne.n	8011804 <__ieee754_pow+0x88>
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00a      	beq.n	8011804 <__ieee754_pow+0x88>
 80117ee:	4b7a      	ldr	r3, [pc, #488]	; (80119d8 <__ieee754_pow+0x25c>)
 80117f0:	18eb      	adds	r3, r5, r3
 80117f2:	433b      	orrs	r3, r7
 80117f4:	d1e2      	bne.n	80117bc <__ieee754_pow+0x40>
 80117f6:	2180      	movs	r1, #128	; 0x80
 80117f8:	9803      	ldr	r0, [sp, #12]
 80117fa:	0309      	lsls	r1, r1, #12
 80117fc:	4048      	eors	r0, r1
 80117fe:	0003      	movs	r3, r0
 8011800:	9a02      	ldr	r2, [sp, #8]
 8011802:	e7cf      	b.n	80117a4 <__ieee754_pow+0x28>
 8011804:	2200      	movs	r2, #0
 8011806:	9206      	str	r2, [sp, #24]
 8011808:	2d00      	cmp	r5, #0
 801180a:	da69      	bge.n	80118e0 <__ieee754_pow+0x164>
 801180c:	4a73      	ldr	r2, [pc, #460]	; (80119dc <__ieee754_pow+0x260>)
 801180e:	4296      	cmp	r6, r2
 8011810:	dc64      	bgt.n	80118dc <__ieee754_pow+0x160>
 8011812:	4a73      	ldr	r2, [pc, #460]	; (80119e0 <__ieee754_pow+0x264>)
 8011814:	4296      	cmp	r6, r2
 8011816:	dd11      	ble.n	801183c <__ieee754_pow+0xc0>
 8011818:	4972      	ldr	r1, [pc, #456]	; (80119e4 <__ieee754_pow+0x268>)
 801181a:	1532      	asrs	r2, r6, #20
 801181c:	1852      	adds	r2, r2, r1
 801181e:	2a14      	cmp	r2, #20
 8011820:	dd3c      	ble.n	801189c <__ieee754_pow+0x120>
 8011822:	2134      	movs	r1, #52	; 0x34
 8011824:	1a89      	subs	r1, r1, r2
 8011826:	9a02      	ldr	r2, [sp, #8]
 8011828:	40ca      	lsrs	r2, r1
 801182a:	0010      	movs	r0, r2
 801182c:	4088      	lsls	r0, r1
 801182e:	4298      	cmp	r0, r3
 8011830:	d104      	bne.n	801183c <__ieee754_pow+0xc0>
 8011832:	2101      	movs	r1, #1
 8011834:	400a      	ands	r2, r1
 8011836:	1849      	adds	r1, r1, r1
 8011838:	1a8a      	subs	r2, r1, r2
 801183a:	9206      	str	r2, [sp, #24]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d03c      	beq.n	80118ba <__ieee754_pow+0x13e>
 8011840:	0038      	movs	r0, r7
 8011842:	0029      	movs	r1, r5
 8011844:	f000 fca4 	bl	8012190 <fabs>
 8011848:	9000      	str	r0, [sp, #0]
 801184a:	9101      	str	r1, [sp, #4]
 801184c:	2f00      	cmp	r7, #0
 801184e:	d000      	beq.n	8011852 <__ieee754_pow+0xd6>
 8011850:	e094      	b.n	801197c <__ieee754_pow+0x200>
 8011852:	2c00      	cmp	r4, #0
 8011854:	d005      	beq.n	8011862 <__ieee754_pow+0xe6>
 8011856:	4a64      	ldr	r2, [pc, #400]	; (80119e8 <__ieee754_pow+0x26c>)
 8011858:	00ab      	lsls	r3, r5, #2
 801185a:	089b      	lsrs	r3, r3, #2
 801185c:	4293      	cmp	r3, r2
 801185e:	d000      	beq.n	8011862 <__ieee754_pow+0xe6>
 8011860:	e08c      	b.n	801197c <__ieee754_pow+0x200>
 8011862:	9b04      	ldr	r3, [sp, #16]
 8011864:	2b00      	cmp	r3, #0
 8011866:	da07      	bge.n	8011878 <__ieee754_pow+0xfc>
 8011868:	9a00      	ldr	r2, [sp, #0]
 801186a:	9b01      	ldr	r3, [sp, #4]
 801186c:	2000      	movs	r0, #0
 801186e:	495e      	ldr	r1, [pc, #376]	; (80119e8 <__ieee754_pow+0x26c>)
 8011870:	f7f0 f936 	bl	8001ae0 <__aeabi_ddiv>
 8011874:	9000      	str	r0, [sp, #0]
 8011876:	9101      	str	r1, [sp, #4]
 8011878:	9b08      	ldr	r3, [sp, #32]
 801187a:	2b00      	cmp	r3, #0
 801187c:	da55      	bge.n	801192a <__ieee754_pow+0x1ae>
 801187e:	4b56      	ldr	r3, [pc, #344]	; (80119d8 <__ieee754_pow+0x25c>)
 8011880:	18e4      	adds	r4, r4, r3
 8011882:	9b06      	ldr	r3, [sp, #24]
 8011884:	431c      	orrs	r4, r3
 8011886:	d000      	beq.n	801188a <__ieee754_pow+0x10e>
 8011888:	e06c      	b.n	8011964 <__ieee754_pow+0x1e8>
 801188a:	9a00      	ldr	r2, [sp, #0]
 801188c:	9b01      	ldr	r3, [sp, #4]
 801188e:	0010      	movs	r0, r2
 8011890:	0019      	movs	r1, r3
 8011892:	f7f0 ffe1 	bl	8002858 <__aeabi_dsub>
 8011896:	0002      	movs	r2, r0
 8011898:	000b      	movs	r3, r1
 801189a:	e01c      	b.n	80118d6 <__ieee754_pow+0x15a>
 801189c:	2b00      	cmp	r3, #0
 801189e:	d1cf      	bne.n	8011840 <__ieee754_pow+0xc4>
 80118a0:	3314      	adds	r3, #20
 80118a2:	1a9a      	subs	r2, r3, r2
 80118a4:	0033      	movs	r3, r6
 80118a6:	4113      	asrs	r3, r2
 80118a8:	0019      	movs	r1, r3
 80118aa:	4091      	lsls	r1, r2
 80118ac:	42b1      	cmp	r1, r6
 80118ae:	d104      	bne.n	80118ba <__ieee754_pow+0x13e>
 80118b0:	2201      	movs	r2, #1
 80118b2:	4013      	ands	r3, r2
 80118b4:	1892      	adds	r2, r2, r2
 80118b6:	1ad3      	subs	r3, r2, r3
 80118b8:	9306      	str	r3, [sp, #24]
 80118ba:	4b4b      	ldr	r3, [pc, #300]	; (80119e8 <__ieee754_pow+0x26c>)
 80118bc:	429e      	cmp	r6, r3
 80118be:	d138      	bne.n	8011932 <__ieee754_pow+0x1b6>
 80118c0:	0038      	movs	r0, r7
 80118c2:	0029      	movs	r1, r5
 80118c4:	9b04      	ldr	r3, [sp, #16]
 80118c6:	9000      	str	r0, [sp, #0]
 80118c8:	9101      	str	r1, [sp, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	da2d      	bge.n	801192a <__ieee754_pow+0x1ae>
 80118ce:	003a      	movs	r2, r7
 80118d0:	002b      	movs	r3, r5
 80118d2:	2000      	movs	r0, #0
 80118d4:	4944      	ldr	r1, [pc, #272]	; (80119e8 <__ieee754_pow+0x26c>)
 80118d6:	f7f0 f903 	bl	8001ae0 <__aeabi_ddiv>
 80118da:	e775      	b.n	80117c8 <__ieee754_pow+0x4c>
 80118dc:	2202      	movs	r2, #2
 80118de:	9206      	str	r2, [sp, #24]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1ad      	bne.n	8011840 <__ieee754_pow+0xc4>
 80118e4:	4b3b      	ldr	r3, [pc, #236]	; (80119d4 <__ieee754_pow+0x258>)
 80118e6:	429e      	cmp	r6, r3
 80118e8:	d1e7      	bne.n	80118ba <__ieee754_pow+0x13e>
 80118ea:	4b3b      	ldr	r3, [pc, #236]	; (80119d8 <__ieee754_pow+0x25c>)
 80118ec:	18e3      	adds	r3, r4, r3
 80118ee:	433b      	orrs	r3, r7
 80118f0:	d101      	bne.n	80118f6 <__ieee754_pow+0x17a>
 80118f2:	f000 fc15 	bl	8012120 <__ieee754_pow+0x9a4>
 80118f6:	4b3a      	ldr	r3, [pc, #232]	; (80119e0 <__ieee754_pow+0x264>)
 80118f8:	429c      	cmp	r4, r3
 80118fa:	dd09      	ble.n	8011910 <__ieee754_pow+0x194>
 80118fc:	9b04      	ldr	r3, [sp, #16]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	da01      	bge.n	8011906 <__ieee754_pow+0x18a>
 8011902:	f000 fc11 	bl	8012128 <__ieee754_pow+0x9ac>
 8011906:	9b02      	ldr	r3, [sp, #8]
 8011908:	9c03      	ldr	r4, [sp, #12]
 801190a:	9300      	str	r3, [sp, #0]
 801190c:	9401      	str	r4, [sp, #4]
 801190e:	e00c      	b.n	801192a <__ieee754_pow+0x1ae>
 8011910:	9b04      	ldr	r3, [sp, #16]
 8011912:	2b00      	cmp	r3, #0
 8011914:	db01      	blt.n	801191a <__ieee754_pow+0x19e>
 8011916:	f000 fc07 	bl	8012128 <__ieee754_pow+0x9ac>
 801191a:	2280      	movs	r2, #128	; 0x80
 801191c:	0612      	lsls	r2, r2, #24
 801191e:	4694      	mov	ip, r2
 8011920:	9b02      	ldr	r3, [sp, #8]
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	9b03      	ldr	r3, [sp, #12]
 8011926:	4463      	add	r3, ip
 8011928:	9301      	str	r3, [sp, #4]
 801192a:	9800      	ldr	r0, [sp, #0]
 801192c:	9901      	ldr	r1, [sp, #4]
 801192e:	b015      	add	sp, #84	; 0x54
 8011930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011932:	2380      	movs	r3, #128	; 0x80
 8011934:	9a04      	ldr	r2, [sp, #16]
 8011936:	05db      	lsls	r3, r3, #23
 8011938:	429a      	cmp	r2, r3
 801193a:	d106      	bne.n	801194a <__ieee754_pow+0x1ce>
 801193c:	003a      	movs	r2, r7
 801193e:	002b      	movs	r3, r5
 8011940:	0038      	movs	r0, r7
 8011942:	0029      	movs	r1, r5
 8011944:	f7f0 fcc6 	bl	80022d4 <__aeabi_dmul>
 8011948:	e73e      	b.n	80117c8 <__ieee754_pow+0x4c>
 801194a:	4b28      	ldr	r3, [pc, #160]	; (80119ec <__ieee754_pow+0x270>)
 801194c:	9a04      	ldr	r2, [sp, #16]
 801194e:	429a      	cmp	r2, r3
 8011950:	d000      	beq.n	8011954 <__ieee754_pow+0x1d8>
 8011952:	e775      	b.n	8011840 <__ieee754_pow+0xc4>
 8011954:	2d00      	cmp	r5, #0
 8011956:	da00      	bge.n	801195a <__ieee754_pow+0x1de>
 8011958:	e772      	b.n	8011840 <__ieee754_pow+0xc4>
 801195a:	0038      	movs	r0, r7
 801195c:	0029      	movs	r1, r5
 801195e:	f000 fcb7 	bl	80122d0 <__ieee754_sqrt>
 8011962:	e731      	b.n	80117c8 <__ieee754_pow+0x4c>
 8011964:	9b06      	ldr	r3, [sp, #24]
 8011966:	2b01      	cmp	r3, #1
 8011968:	d1df      	bne.n	801192a <__ieee754_pow+0x1ae>
 801196a:	9800      	ldr	r0, [sp, #0]
 801196c:	2180      	movs	r1, #128	; 0x80
 801196e:	0002      	movs	r2, r0
 8011970:	9801      	ldr	r0, [sp, #4]
 8011972:	0609      	lsls	r1, r1, #24
 8011974:	1843      	adds	r3, r0, r1
 8011976:	9200      	str	r2, [sp, #0]
 8011978:	9301      	str	r3, [sp, #4]
 801197a:	e7d6      	b.n	801192a <__ieee754_pow+0x1ae>
 801197c:	0feb      	lsrs	r3, r5, #31
 801197e:	3b01      	subs	r3, #1
 8011980:	930e      	str	r3, [sp, #56]	; 0x38
 8011982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011984:	9b06      	ldr	r3, [sp, #24]
 8011986:	4313      	orrs	r3, r2
 8011988:	d104      	bne.n	8011994 <__ieee754_pow+0x218>
 801198a:	003a      	movs	r2, r7
 801198c:	002b      	movs	r3, r5
 801198e:	0038      	movs	r0, r7
 8011990:	0029      	movs	r1, r5
 8011992:	e77e      	b.n	8011892 <__ieee754_pow+0x116>
 8011994:	4b16      	ldr	r3, [pc, #88]	; (80119f0 <__ieee754_pow+0x274>)
 8011996:	429e      	cmp	r6, r3
 8011998:	dc00      	bgt.n	801199c <__ieee754_pow+0x220>
 801199a:	e0f1      	b.n	8011b80 <__ieee754_pow+0x404>
 801199c:	4b15      	ldr	r3, [pc, #84]	; (80119f4 <__ieee754_pow+0x278>)
 801199e:	429e      	cmp	r6, r3
 80119a0:	dd09      	ble.n	80119b6 <__ieee754_pow+0x23a>
 80119a2:	4b0f      	ldr	r3, [pc, #60]	; (80119e0 <__ieee754_pow+0x264>)
 80119a4:	429c      	cmp	r4, r3
 80119a6:	dc0c      	bgt.n	80119c2 <__ieee754_pow+0x246>
 80119a8:	9b04      	ldr	r3, [sp, #16]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	da0c      	bge.n	80119c8 <__ieee754_pow+0x24c>
 80119ae:	2000      	movs	r0, #0
 80119b0:	f000 fc86 	bl	80122c0 <__math_oflow>
 80119b4:	e708      	b.n	80117c8 <__ieee754_pow+0x4c>
 80119b6:	4b10      	ldr	r3, [pc, #64]	; (80119f8 <__ieee754_pow+0x27c>)
 80119b8:	429c      	cmp	r4, r3
 80119ba:	ddf5      	ble.n	80119a8 <__ieee754_pow+0x22c>
 80119bc:	4b0a      	ldr	r3, [pc, #40]	; (80119e8 <__ieee754_pow+0x26c>)
 80119be:	429c      	cmp	r4, r3
 80119c0:	dd1c      	ble.n	80119fc <__ieee754_pow+0x280>
 80119c2:	9b04      	ldr	r3, [sp, #16]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	dcf2      	bgt.n	80119ae <__ieee754_pow+0x232>
 80119c8:	2000      	movs	r0, #0
 80119ca:	f000 fc72 	bl	80122b2 <__math_uflow>
 80119ce:	e6fb      	b.n	80117c8 <__ieee754_pow+0x4c>
 80119d0:	fff00000 	.word	0xfff00000
 80119d4:	7ff00000 	.word	0x7ff00000
 80119d8:	c0100000 	.word	0xc0100000
 80119dc:	433fffff 	.word	0x433fffff
 80119e0:	3fefffff 	.word	0x3fefffff
 80119e4:	fffffc01 	.word	0xfffffc01
 80119e8:	3ff00000 	.word	0x3ff00000
 80119ec:	3fe00000 	.word	0x3fe00000
 80119f0:	41e00000 	.word	0x41e00000
 80119f4:	43f00000 	.word	0x43f00000
 80119f8:	3feffffe 	.word	0x3feffffe
 80119fc:	2200      	movs	r2, #0
 80119fe:	9800      	ldr	r0, [sp, #0]
 8011a00:	9901      	ldr	r1, [sp, #4]
 8011a02:	4b53      	ldr	r3, [pc, #332]	; (8011b50 <__ieee754_pow+0x3d4>)
 8011a04:	f7f0 ff28 	bl	8002858 <__aeabi_dsub>
 8011a08:	22c0      	movs	r2, #192	; 0xc0
 8011a0a:	4b52      	ldr	r3, [pc, #328]	; (8011b54 <__ieee754_pow+0x3d8>)
 8011a0c:	05d2      	lsls	r2, r2, #23
 8011a0e:	0004      	movs	r4, r0
 8011a10:	000d      	movs	r5, r1
 8011a12:	f7f0 fc5f 	bl	80022d4 <__aeabi_dmul>
 8011a16:	4a50      	ldr	r2, [pc, #320]	; (8011b58 <__ieee754_pow+0x3dc>)
 8011a18:	0006      	movs	r6, r0
 8011a1a:	000f      	movs	r7, r1
 8011a1c:	0020      	movs	r0, r4
 8011a1e:	0029      	movs	r1, r5
 8011a20:	4b4e      	ldr	r3, [pc, #312]	; (8011b5c <__ieee754_pow+0x3e0>)
 8011a22:	f7f0 fc57 	bl	80022d4 <__aeabi_dmul>
 8011a26:	2200      	movs	r2, #0
 8011a28:	9000      	str	r0, [sp, #0]
 8011a2a:	9101      	str	r1, [sp, #4]
 8011a2c:	4b4c      	ldr	r3, [pc, #304]	; (8011b60 <__ieee754_pow+0x3e4>)
 8011a2e:	0020      	movs	r0, r4
 8011a30:	0029      	movs	r1, r5
 8011a32:	f7f0 fc4f 	bl	80022d4 <__aeabi_dmul>
 8011a36:	0002      	movs	r2, r0
 8011a38:	000b      	movs	r3, r1
 8011a3a:	484a      	ldr	r0, [pc, #296]	; (8011b64 <__ieee754_pow+0x3e8>)
 8011a3c:	494a      	ldr	r1, [pc, #296]	; (8011b68 <__ieee754_pow+0x3ec>)
 8011a3e:	f7f0 ff0b 	bl	8002858 <__aeabi_dsub>
 8011a42:	0022      	movs	r2, r4
 8011a44:	002b      	movs	r3, r5
 8011a46:	f7f0 fc45 	bl	80022d4 <__aeabi_dmul>
 8011a4a:	0002      	movs	r2, r0
 8011a4c:	000b      	movs	r3, r1
 8011a4e:	2000      	movs	r0, #0
 8011a50:	4946      	ldr	r1, [pc, #280]	; (8011b6c <__ieee754_pow+0x3f0>)
 8011a52:	f7f0 ff01 	bl	8002858 <__aeabi_dsub>
 8011a56:	0022      	movs	r2, r4
 8011a58:	002b      	movs	r3, r5
 8011a5a:	9004      	str	r0, [sp, #16]
 8011a5c:	9105      	str	r1, [sp, #20]
 8011a5e:	0020      	movs	r0, r4
 8011a60:	0029      	movs	r1, r5
 8011a62:	f7f0 fc37 	bl	80022d4 <__aeabi_dmul>
 8011a66:	0002      	movs	r2, r0
 8011a68:	000b      	movs	r3, r1
 8011a6a:	9804      	ldr	r0, [sp, #16]
 8011a6c:	9905      	ldr	r1, [sp, #20]
 8011a6e:	f7f0 fc31 	bl	80022d4 <__aeabi_dmul>
 8011a72:	4a3f      	ldr	r2, [pc, #252]	; (8011b70 <__ieee754_pow+0x3f4>)
 8011a74:	4b37      	ldr	r3, [pc, #220]	; (8011b54 <__ieee754_pow+0x3d8>)
 8011a76:	f7f0 fc2d 	bl	80022d4 <__aeabi_dmul>
 8011a7a:	0002      	movs	r2, r0
 8011a7c:	000b      	movs	r3, r1
 8011a7e:	9800      	ldr	r0, [sp, #0]
 8011a80:	9901      	ldr	r1, [sp, #4]
 8011a82:	f7f0 fee9 	bl	8002858 <__aeabi_dsub>
 8011a86:	0002      	movs	r2, r0
 8011a88:	000b      	movs	r3, r1
 8011a8a:	0004      	movs	r4, r0
 8011a8c:	000d      	movs	r5, r1
 8011a8e:	0030      	movs	r0, r6
 8011a90:	0039      	movs	r1, r7
 8011a92:	f7ef fcc5 	bl	8001420 <__aeabi_dadd>
 8011a96:	2000      	movs	r0, #0
 8011a98:	0032      	movs	r2, r6
 8011a9a:	003b      	movs	r3, r7
 8011a9c:	9004      	str	r0, [sp, #16]
 8011a9e:	9105      	str	r1, [sp, #20]
 8011aa0:	f7f0 feda 	bl	8002858 <__aeabi_dsub>
 8011aa4:	0002      	movs	r2, r0
 8011aa6:	000b      	movs	r3, r1
 8011aa8:	0020      	movs	r0, r4
 8011aaa:	0029      	movs	r1, r5
 8011aac:	f7f0 fed4 	bl	8002858 <__aeabi_dsub>
 8011ab0:	9b06      	ldr	r3, [sp, #24]
 8011ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	0006      	movs	r6, r0
 8011ab8:	000f      	movs	r7, r1
 8011aba:	4313      	orrs	r3, r2
 8011abc:	d000      	beq.n	8011ac0 <__ieee754_pow+0x344>
 8011abe:	e1dc      	b.n	8011e7a <__ieee754_pow+0x6fe>
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	4c2c      	ldr	r4, [pc, #176]	; (8011b74 <__ieee754_pow+0x3f8>)
 8011ac4:	9300      	str	r3, [sp, #0]
 8011ac6:	9401      	str	r4, [sp, #4]
 8011ac8:	9c02      	ldr	r4, [sp, #8]
 8011aca:	9d03      	ldr	r5, [sp, #12]
 8011acc:	9802      	ldr	r0, [sp, #8]
 8011ace:	9903      	ldr	r1, [sp, #12]
 8011ad0:	2400      	movs	r4, #0
 8011ad2:	002b      	movs	r3, r5
 8011ad4:	0022      	movs	r2, r4
 8011ad6:	f7f0 febf 	bl	8002858 <__aeabi_dsub>
 8011ada:	9a04      	ldr	r2, [sp, #16]
 8011adc:	9b05      	ldr	r3, [sp, #20]
 8011ade:	f7f0 fbf9 	bl	80022d4 <__aeabi_dmul>
 8011ae2:	9a02      	ldr	r2, [sp, #8]
 8011ae4:	9b03      	ldr	r3, [sp, #12]
 8011ae6:	9006      	str	r0, [sp, #24]
 8011ae8:	9107      	str	r1, [sp, #28]
 8011aea:	0030      	movs	r0, r6
 8011aec:	0039      	movs	r1, r7
 8011aee:	f7f0 fbf1 	bl	80022d4 <__aeabi_dmul>
 8011af2:	0002      	movs	r2, r0
 8011af4:	000b      	movs	r3, r1
 8011af6:	9806      	ldr	r0, [sp, #24]
 8011af8:	9907      	ldr	r1, [sp, #28]
 8011afa:	f7ef fc91 	bl	8001420 <__aeabi_dadd>
 8011afe:	0022      	movs	r2, r4
 8011b00:	002b      	movs	r3, r5
 8011b02:	0006      	movs	r6, r0
 8011b04:	000f      	movs	r7, r1
 8011b06:	9804      	ldr	r0, [sp, #16]
 8011b08:	9905      	ldr	r1, [sp, #20]
 8011b0a:	f7f0 fbe3 	bl	80022d4 <__aeabi_dmul>
 8011b0e:	0003      	movs	r3, r0
 8011b10:	000c      	movs	r4, r1
 8011b12:	9004      	str	r0, [sp, #16]
 8011b14:	9105      	str	r1, [sp, #20]
 8011b16:	9306      	str	r3, [sp, #24]
 8011b18:	9407      	str	r4, [sp, #28]
 8011b1a:	0002      	movs	r2, r0
 8011b1c:	000b      	movs	r3, r1
 8011b1e:	0030      	movs	r0, r6
 8011b20:	0039      	movs	r1, r7
 8011b22:	f7ef fc7d 	bl	8001420 <__aeabi_dadd>
 8011b26:	4b14      	ldr	r3, [pc, #80]	; (8011b78 <__ieee754_pow+0x3fc>)
 8011b28:	0005      	movs	r5, r0
 8011b2a:	000c      	movs	r4, r1
 8011b2c:	9108      	str	r1, [sp, #32]
 8011b2e:	4299      	cmp	r1, r3
 8011b30:	dc00      	bgt.n	8011b34 <__ieee754_pow+0x3b8>
 8011b32:	e2d4      	b.n	80120de <__ieee754_pow+0x962>
 8011b34:	4b11      	ldr	r3, [pc, #68]	; (8011b7c <__ieee754_pow+0x400>)
 8011b36:	18cb      	adds	r3, r1, r3
 8011b38:	4303      	orrs	r3, r0
 8011b3a:	d100      	bne.n	8011b3e <__ieee754_pow+0x3c2>
 8011b3c:	e1d6      	b.n	8011eec <__ieee754_pow+0x770>
 8011b3e:	9800      	ldr	r0, [sp, #0]
 8011b40:	9901      	ldr	r1, [sp, #4]
 8011b42:	2300      	movs	r3, #0
 8011b44:	2200      	movs	r2, #0
 8011b46:	f7ee fc87 	bl	8000458 <__aeabi_dcmplt>
 8011b4a:	1e43      	subs	r3, r0, #1
 8011b4c:	4198      	sbcs	r0, r3
 8011b4e:	e72f      	b.n	80119b0 <__ieee754_pow+0x234>
 8011b50:	3ff00000 	.word	0x3ff00000
 8011b54:	3ff71547 	.word	0x3ff71547
 8011b58:	f85ddf44 	.word	0xf85ddf44
 8011b5c:	3e54ae0b 	.word	0x3e54ae0b
 8011b60:	3fd00000 	.word	0x3fd00000
 8011b64:	55555555 	.word	0x55555555
 8011b68:	3fd55555 	.word	0x3fd55555
 8011b6c:	3fe00000 	.word	0x3fe00000
 8011b70:	652b82fe 	.word	0x652b82fe
 8011b74:	bff00000 	.word	0xbff00000
 8011b78:	408fffff 	.word	0x408fffff
 8011b7c:	bf700000 	.word	0xbf700000
 8011b80:	4bbf      	ldr	r3, [pc, #764]	; (8011e80 <__ieee754_pow+0x704>)
 8011b82:	2200      	movs	r2, #0
 8011b84:	422b      	tst	r3, r5
 8011b86:	d10a      	bne.n	8011b9e <__ieee754_pow+0x422>
 8011b88:	9800      	ldr	r0, [sp, #0]
 8011b8a:	9901      	ldr	r1, [sp, #4]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	4bbd      	ldr	r3, [pc, #756]	; (8011e84 <__ieee754_pow+0x708>)
 8011b90:	f7f0 fba0 	bl	80022d4 <__aeabi_dmul>
 8011b94:	2235      	movs	r2, #53	; 0x35
 8011b96:	9000      	str	r0, [sp, #0]
 8011b98:	9101      	str	r1, [sp, #4]
 8011b9a:	9c01      	ldr	r4, [sp, #4]
 8011b9c:	4252      	negs	r2, r2
 8011b9e:	49ba      	ldr	r1, [pc, #744]	; (8011e88 <__ieee754_pow+0x70c>)
 8011ba0:	1523      	asrs	r3, r4, #20
 8011ba2:	185b      	adds	r3, r3, r1
 8011ba4:	189b      	adds	r3, r3, r2
 8011ba6:	0324      	lsls	r4, r4, #12
 8011ba8:	4db8      	ldr	r5, [pc, #736]	; (8011e8c <__ieee754_pow+0x710>)
 8011baa:	930d      	str	r3, [sp, #52]	; 0x34
 8011bac:	4bb8      	ldr	r3, [pc, #736]	; (8011e90 <__ieee754_pow+0x714>)
 8011bae:	0b22      	lsrs	r2, r4, #12
 8011bb0:	4315      	orrs	r5, r2
 8011bb2:	2400      	movs	r4, #0
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	dd09      	ble.n	8011bcc <__ieee754_pow+0x450>
 8011bb8:	4bb6      	ldr	r3, [pc, #728]	; (8011e94 <__ieee754_pow+0x718>)
 8011bba:	3401      	adds	r4, #1
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	dd05      	ble.n	8011bcc <__ieee754_pow+0x450>
 8011bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bc2:	191b      	adds	r3, r3, r4
 8011bc4:	2400      	movs	r4, #0
 8011bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8011bc8:	4bb3      	ldr	r3, [pc, #716]	; (8011e98 <__ieee754_pow+0x71c>)
 8011bca:	18ed      	adds	r5, r5, r3
 8011bcc:	4bb3      	ldr	r3, [pc, #716]	; (8011e9c <__ieee754_pow+0x720>)
 8011bce:	00e2      	lsls	r2, r4, #3
 8011bd0:	189b      	adds	r3, r3, r2
 8011bd2:	9800      	ldr	r0, [sp, #0]
 8011bd4:	9901      	ldr	r1, [sp, #4]
 8011bd6:	920f      	str	r2, [sp, #60]	; 0x3c
 8011bd8:	0029      	movs	r1, r5
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	0006      	movs	r6, r0
 8011be0:	920a      	str	r2, [sp, #40]	; 0x28
 8011be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8011be4:	f7f0 fe38 	bl	8002858 <__aeabi_dsub>
 8011be8:	0032      	movs	r2, r6
 8011bea:	002b      	movs	r3, r5
 8011bec:	9010      	str	r0, [sp, #64]	; 0x40
 8011bee:	9111      	str	r1, [sp, #68]	; 0x44
 8011bf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bf4:	f7ef fc14 	bl	8001420 <__aeabi_dadd>
 8011bf8:	0002      	movs	r2, r0
 8011bfa:	000b      	movs	r3, r1
 8011bfc:	2000      	movs	r0, #0
 8011bfe:	49a3      	ldr	r1, [pc, #652]	; (8011e8c <__ieee754_pow+0x710>)
 8011c00:	f7ef ff6e 	bl	8001ae0 <__aeabi_ddiv>
 8011c04:	0002      	movs	r2, r0
 8011c06:	000b      	movs	r3, r1
 8011c08:	9012      	str	r0, [sp, #72]	; 0x48
 8011c0a:	9113      	str	r1, [sp, #76]	; 0x4c
 8011c0c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c10:	f7f0 fb60 	bl	80022d4 <__aeabi_dmul>
 8011c14:	9008      	str	r0, [sp, #32]
 8011c16:	9109      	str	r1, [sp, #36]	; 0x24
 8011c18:	9a08      	ldr	r2, [sp, #32]
 8011c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c1c:	9204      	str	r2, [sp, #16]
 8011c1e:	9305      	str	r3, [sp, #20]
 8011c20:	2300      	movs	r3, #0
 8011c22:	2180      	movs	r1, #128	; 0x80
 8011c24:	2080      	movs	r0, #128	; 0x80
 8011c26:	9304      	str	r3, [sp, #16]
 8011c28:	9a04      	ldr	r2, [sp, #16]
 8011c2a:	9b05      	ldr	r3, [sp, #20]
 8011c2c:	9200      	str	r2, [sp, #0]
 8011c2e:	9301      	str	r3, [sp, #4]
 8011c30:	2200      	movs	r2, #0
 8011c32:	002f      	movs	r7, r5
 8011c34:	0589      	lsls	r1, r1, #22
 8011c36:	106d      	asrs	r5, r5, #1
 8011c38:	4329      	orrs	r1, r5
 8011c3a:	0300      	lsls	r0, r0, #12
 8011c3c:	1809      	adds	r1, r1, r0
 8011c3e:	04a0      	lsls	r0, r4, #18
 8011c40:	180b      	adds	r3, r1, r0
 8011c42:	9800      	ldr	r0, [sp, #0]
 8011c44:	9901      	ldr	r1, [sp, #4]
 8011c46:	0014      	movs	r4, r2
 8011c48:	001d      	movs	r5, r3
 8011c4a:	f7f0 fb43 	bl	80022d4 <__aeabi_dmul>
 8011c4e:	0002      	movs	r2, r0
 8011c50:	000b      	movs	r3, r1
 8011c52:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c56:	f7f0 fdff 	bl	8002858 <__aeabi_dsub>
 8011c5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c5e:	9010      	str	r0, [sp, #64]	; 0x40
 8011c60:	9111      	str	r1, [sp, #68]	; 0x44
 8011c62:	0020      	movs	r0, r4
 8011c64:	0029      	movs	r1, r5
 8011c66:	f7f0 fdf7 	bl	8002858 <__aeabi_dsub>
 8011c6a:	0002      	movs	r2, r0
 8011c6c:	000b      	movs	r3, r1
 8011c6e:	0030      	movs	r0, r6
 8011c70:	0039      	movs	r1, r7
 8011c72:	f7f0 fdf1 	bl	8002858 <__aeabi_dsub>
 8011c76:	9a00      	ldr	r2, [sp, #0]
 8011c78:	9b01      	ldr	r3, [sp, #4]
 8011c7a:	f7f0 fb2b 	bl	80022d4 <__aeabi_dmul>
 8011c7e:	0002      	movs	r2, r0
 8011c80:	000b      	movs	r3, r1
 8011c82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011c84:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011c86:	f7f0 fde7 	bl	8002858 <__aeabi_dsub>
 8011c8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011c8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011c8e:	f7f0 fb21 	bl	80022d4 <__aeabi_dmul>
 8011c92:	9a08      	ldr	r2, [sp, #32]
 8011c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c96:	900a      	str	r0, [sp, #40]	; 0x28
 8011c98:	910b      	str	r1, [sp, #44]	; 0x2c
 8011c9a:	0010      	movs	r0, r2
 8011c9c:	0019      	movs	r1, r3
 8011c9e:	f7f0 fb19 	bl	80022d4 <__aeabi_dmul>
 8011ca2:	0006      	movs	r6, r0
 8011ca4:	000f      	movs	r7, r1
 8011ca6:	4a7e      	ldr	r2, [pc, #504]	; (8011ea0 <__ieee754_pow+0x724>)
 8011ca8:	4b7e      	ldr	r3, [pc, #504]	; (8011ea4 <__ieee754_pow+0x728>)
 8011caa:	f7f0 fb13 	bl	80022d4 <__aeabi_dmul>
 8011cae:	4a7e      	ldr	r2, [pc, #504]	; (8011ea8 <__ieee754_pow+0x72c>)
 8011cb0:	4b7e      	ldr	r3, [pc, #504]	; (8011eac <__ieee754_pow+0x730>)
 8011cb2:	f7ef fbb5 	bl	8001420 <__aeabi_dadd>
 8011cb6:	0032      	movs	r2, r6
 8011cb8:	003b      	movs	r3, r7
 8011cba:	f7f0 fb0b 	bl	80022d4 <__aeabi_dmul>
 8011cbe:	4a7c      	ldr	r2, [pc, #496]	; (8011eb0 <__ieee754_pow+0x734>)
 8011cc0:	4b7c      	ldr	r3, [pc, #496]	; (8011eb4 <__ieee754_pow+0x738>)
 8011cc2:	f7ef fbad 	bl	8001420 <__aeabi_dadd>
 8011cc6:	0032      	movs	r2, r6
 8011cc8:	003b      	movs	r3, r7
 8011cca:	f7f0 fb03 	bl	80022d4 <__aeabi_dmul>
 8011cce:	4a7a      	ldr	r2, [pc, #488]	; (8011eb8 <__ieee754_pow+0x73c>)
 8011cd0:	4b7a      	ldr	r3, [pc, #488]	; (8011ebc <__ieee754_pow+0x740>)
 8011cd2:	f7ef fba5 	bl	8001420 <__aeabi_dadd>
 8011cd6:	0032      	movs	r2, r6
 8011cd8:	003b      	movs	r3, r7
 8011cda:	f7f0 fafb 	bl	80022d4 <__aeabi_dmul>
 8011cde:	4a78      	ldr	r2, [pc, #480]	; (8011ec0 <__ieee754_pow+0x744>)
 8011ce0:	4b78      	ldr	r3, [pc, #480]	; (8011ec4 <__ieee754_pow+0x748>)
 8011ce2:	f7ef fb9d 	bl	8001420 <__aeabi_dadd>
 8011ce6:	0032      	movs	r2, r6
 8011ce8:	003b      	movs	r3, r7
 8011cea:	f7f0 faf3 	bl	80022d4 <__aeabi_dmul>
 8011cee:	4a76      	ldr	r2, [pc, #472]	; (8011ec8 <__ieee754_pow+0x74c>)
 8011cf0:	4b76      	ldr	r3, [pc, #472]	; (8011ecc <__ieee754_pow+0x750>)
 8011cf2:	f7ef fb95 	bl	8001420 <__aeabi_dadd>
 8011cf6:	0032      	movs	r2, r6
 8011cf8:	0004      	movs	r4, r0
 8011cfa:	000d      	movs	r5, r1
 8011cfc:	003b      	movs	r3, r7
 8011cfe:	0030      	movs	r0, r6
 8011d00:	0039      	movs	r1, r7
 8011d02:	f7f0 fae7 	bl	80022d4 <__aeabi_dmul>
 8011d06:	0002      	movs	r2, r0
 8011d08:	000b      	movs	r3, r1
 8011d0a:	0020      	movs	r0, r4
 8011d0c:	0029      	movs	r1, r5
 8011d0e:	f7f0 fae1 	bl	80022d4 <__aeabi_dmul>
 8011d12:	9a00      	ldr	r2, [sp, #0]
 8011d14:	9b01      	ldr	r3, [sp, #4]
 8011d16:	0004      	movs	r4, r0
 8011d18:	000d      	movs	r5, r1
 8011d1a:	9808      	ldr	r0, [sp, #32]
 8011d1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d1e:	f7ef fb7f 	bl	8001420 <__aeabi_dadd>
 8011d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d26:	f7f0 fad5 	bl	80022d4 <__aeabi_dmul>
 8011d2a:	0022      	movs	r2, r4
 8011d2c:	002b      	movs	r3, r5
 8011d2e:	f7ef fb77 	bl	8001420 <__aeabi_dadd>
 8011d32:	9a00      	ldr	r2, [sp, #0]
 8011d34:	9b01      	ldr	r3, [sp, #4]
 8011d36:	9010      	str	r0, [sp, #64]	; 0x40
 8011d38:	9111      	str	r1, [sp, #68]	; 0x44
 8011d3a:	0010      	movs	r0, r2
 8011d3c:	0019      	movs	r1, r3
 8011d3e:	f7f0 fac9 	bl	80022d4 <__aeabi_dmul>
 8011d42:	2200      	movs	r2, #0
 8011d44:	4b62      	ldr	r3, [pc, #392]	; (8011ed0 <__ieee754_pow+0x754>)
 8011d46:	0004      	movs	r4, r0
 8011d48:	000d      	movs	r5, r1
 8011d4a:	f7ef fb69 	bl	8001420 <__aeabi_dadd>
 8011d4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011d52:	f7ef fb65 	bl	8001420 <__aeabi_dadd>
 8011d56:	2000      	movs	r0, #0
 8011d58:	000f      	movs	r7, r1
 8011d5a:	0006      	movs	r6, r0
 8011d5c:	0002      	movs	r2, r0
 8011d5e:	000b      	movs	r3, r1
 8011d60:	9800      	ldr	r0, [sp, #0]
 8011d62:	9901      	ldr	r1, [sp, #4]
 8011d64:	f7f0 fab6 	bl	80022d4 <__aeabi_dmul>
 8011d68:	2200      	movs	r2, #0
 8011d6a:	9000      	str	r0, [sp, #0]
 8011d6c:	9101      	str	r1, [sp, #4]
 8011d6e:	4b58      	ldr	r3, [pc, #352]	; (8011ed0 <__ieee754_pow+0x754>)
 8011d70:	0030      	movs	r0, r6
 8011d72:	0039      	movs	r1, r7
 8011d74:	f7f0 fd70 	bl	8002858 <__aeabi_dsub>
 8011d78:	0022      	movs	r2, r4
 8011d7a:	002b      	movs	r3, r5
 8011d7c:	f7f0 fd6c 	bl	8002858 <__aeabi_dsub>
 8011d80:	0002      	movs	r2, r0
 8011d82:	000b      	movs	r3, r1
 8011d84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011d86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011d88:	f7f0 fd66 	bl	8002858 <__aeabi_dsub>
 8011d8c:	9a08      	ldr	r2, [sp, #32]
 8011d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d90:	f7f0 faa0 	bl	80022d4 <__aeabi_dmul>
 8011d94:	0032      	movs	r2, r6
 8011d96:	0004      	movs	r4, r0
 8011d98:	000d      	movs	r5, r1
 8011d9a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011d9e:	003b      	movs	r3, r7
 8011da0:	f7f0 fa98 	bl	80022d4 <__aeabi_dmul>
 8011da4:	0002      	movs	r2, r0
 8011da6:	000b      	movs	r3, r1
 8011da8:	0020      	movs	r0, r4
 8011daa:	0029      	movs	r1, r5
 8011dac:	f7ef fb38 	bl	8001420 <__aeabi_dadd>
 8011db0:	0004      	movs	r4, r0
 8011db2:	000d      	movs	r5, r1
 8011db4:	0002      	movs	r2, r0
 8011db6:	000b      	movs	r3, r1
 8011db8:	9800      	ldr	r0, [sp, #0]
 8011dba:	9901      	ldr	r1, [sp, #4]
 8011dbc:	f7ef fb30 	bl	8001420 <__aeabi_dadd>
 8011dc0:	22e0      	movs	r2, #224	; 0xe0
 8011dc2:	2000      	movs	r0, #0
 8011dc4:	4b43      	ldr	r3, [pc, #268]	; (8011ed4 <__ieee754_pow+0x758>)
 8011dc6:	0612      	lsls	r2, r2, #24
 8011dc8:	0006      	movs	r6, r0
 8011dca:	000f      	movs	r7, r1
 8011dcc:	f7f0 fa82 	bl	80022d4 <__aeabi_dmul>
 8011dd0:	9008      	str	r0, [sp, #32]
 8011dd2:	9109      	str	r1, [sp, #36]	; 0x24
 8011dd4:	9a00      	ldr	r2, [sp, #0]
 8011dd6:	9b01      	ldr	r3, [sp, #4]
 8011dd8:	0030      	movs	r0, r6
 8011dda:	0039      	movs	r1, r7
 8011ddc:	f7f0 fd3c 	bl	8002858 <__aeabi_dsub>
 8011de0:	0002      	movs	r2, r0
 8011de2:	000b      	movs	r3, r1
 8011de4:	0020      	movs	r0, r4
 8011de6:	0029      	movs	r1, r5
 8011de8:	f7f0 fd36 	bl	8002858 <__aeabi_dsub>
 8011dec:	4a3a      	ldr	r2, [pc, #232]	; (8011ed8 <__ieee754_pow+0x75c>)
 8011dee:	4b39      	ldr	r3, [pc, #228]	; (8011ed4 <__ieee754_pow+0x758>)
 8011df0:	f7f0 fa70 	bl	80022d4 <__aeabi_dmul>
 8011df4:	4a39      	ldr	r2, [pc, #228]	; (8011edc <__ieee754_pow+0x760>)
 8011df6:	0004      	movs	r4, r0
 8011df8:	000d      	movs	r5, r1
 8011dfa:	0030      	movs	r0, r6
 8011dfc:	0039      	movs	r1, r7
 8011dfe:	4b38      	ldr	r3, [pc, #224]	; (8011ee0 <__ieee754_pow+0x764>)
 8011e00:	f7f0 fa68 	bl	80022d4 <__aeabi_dmul>
 8011e04:	0002      	movs	r2, r0
 8011e06:	000b      	movs	r3, r1
 8011e08:	0020      	movs	r0, r4
 8011e0a:	0029      	movs	r1, r5
 8011e0c:	f7ef fb08 	bl	8001420 <__aeabi_dadd>
 8011e10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e12:	4b34      	ldr	r3, [pc, #208]	; (8011ee4 <__ieee754_pow+0x768>)
 8011e14:	189b      	adds	r3, r3, r2
 8011e16:	681a      	ldr	r2, [r3, #0]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	f7ef fb01 	bl	8001420 <__aeabi_dadd>
 8011e1e:	9000      	str	r0, [sp, #0]
 8011e20:	9101      	str	r1, [sp, #4]
 8011e22:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011e24:	f7f1 f8ee 	bl	8003004 <__aeabi_i2d>
 8011e28:	0004      	movs	r4, r0
 8011e2a:	000d      	movs	r5, r1
 8011e2c:	9808      	ldr	r0, [sp, #32]
 8011e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011e30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011e32:	4b2d      	ldr	r3, [pc, #180]	; (8011ee8 <__ieee754_pow+0x76c>)
 8011e34:	189b      	adds	r3, r3, r2
 8011e36:	681e      	ldr	r6, [r3, #0]
 8011e38:	685f      	ldr	r7, [r3, #4]
 8011e3a:	9a00      	ldr	r2, [sp, #0]
 8011e3c:	9b01      	ldr	r3, [sp, #4]
 8011e3e:	f7ef faef 	bl	8001420 <__aeabi_dadd>
 8011e42:	0032      	movs	r2, r6
 8011e44:	003b      	movs	r3, r7
 8011e46:	f7ef faeb 	bl	8001420 <__aeabi_dadd>
 8011e4a:	0022      	movs	r2, r4
 8011e4c:	002b      	movs	r3, r5
 8011e4e:	f7ef fae7 	bl	8001420 <__aeabi_dadd>
 8011e52:	2000      	movs	r0, #0
 8011e54:	0022      	movs	r2, r4
 8011e56:	002b      	movs	r3, r5
 8011e58:	9004      	str	r0, [sp, #16]
 8011e5a:	9105      	str	r1, [sp, #20]
 8011e5c:	f7f0 fcfc 	bl	8002858 <__aeabi_dsub>
 8011e60:	0032      	movs	r2, r6
 8011e62:	003b      	movs	r3, r7
 8011e64:	f7f0 fcf8 	bl	8002858 <__aeabi_dsub>
 8011e68:	9a08      	ldr	r2, [sp, #32]
 8011e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e6c:	f7f0 fcf4 	bl	8002858 <__aeabi_dsub>
 8011e70:	0002      	movs	r2, r0
 8011e72:	000b      	movs	r3, r1
 8011e74:	9800      	ldr	r0, [sp, #0]
 8011e76:	9901      	ldr	r1, [sp, #4]
 8011e78:	e618      	b.n	8011aac <__ieee754_pow+0x330>
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	4c03      	ldr	r4, [pc, #12]	; (8011e8c <__ieee754_pow+0x710>)
 8011e7e:	e621      	b.n	8011ac4 <__ieee754_pow+0x348>
 8011e80:	7ff00000 	.word	0x7ff00000
 8011e84:	43400000 	.word	0x43400000
 8011e88:	fffffc01 	.word	0xfffffc01
 8011e8c:	3ff00000 	.word	0x3ff00000
 8011e90:	0003988e 	.word	0x0003988e
 8011e94:	000bb679 	.word	0x000bb679
 8011e98:	fff00000 	.word	0xfff00000
 8011e9c:	08013b80 	.word	0x08013b80
 8011ea0:	4a454eef 	.word	0x4a454eef
 8011ea4:	3fca7e28 	.word	0x3fca7e28
 8011ea8:	93c9db65 	.word	0x93c9db65
 8011eac:	3fcd864a 	.word	0x3fcd864a
 8011eb0:	a91d4101 	.word	0xa91d4101
 8011eb4:	3fd17460 	.word	0x3fd17460
 8011eb8:	518f264d 	.word	0x518f264d
 8011ebc:	3fd55555 	.word	0x3fd55555
 8011ec0:	db6fabff 	.word	0xdb6fabff
 8011ec4:	3fdb6db6 	.word	0x3fdb6db6
 8011ec8:	33333303 	.word	0x33333303
 8011ecc:	3fe33333 	.word	0x3fe33333
 8011ed0:	40080000 	.word	0x40080000
 8011ed4:	3feec709 	.word	0x3feec709
 8011ed8:	dc3a03fd 	.word	0xdc3a03fd
 8011edc:	145b01f5 	.word	0x145b01f5
 8011ee0:	be3e2fe0 	.word	0xbe3e2fe0
 8011ee4:	08013ba0 	.word	0x08013ba0
 8011ee8:	08013b90 	.word	0x08013b90
 8011eec:	4a90      	ldr	r2, [pc, #576]	; (8012130 <__ieee754_pow+0x9b4>)
 8011eee:	4b91      	ldr	r3, [pc, #580]	; (8012134 <__ieee754_pow+0x9b8>)
 8011ef0:	0030      	movs	r0, r6
 8011ef2:	0039      	movs	r1, r7
 8011ef4:	f7ef fa94 	bl	8001420 <__aeabi_dadd>
 8011ef8:	9a04      	ldr	r2, [sp, #16]
 8011efa:	9b05      	ldr	r3, [sp, #20]
 8011efc:	9002      	str	r0, [sp, #8]
 8011efe:	9103      	str	r1, [sp, #12]
 8011f00:	0028      	movs	r0, r5
 8011f02:	0021      	movs	r1, r4
 8011f04:	f7f0 fca8 	bl	8002858 <__aeabi_dsub>
 8011f08:	0002      	movs	r2, r0
 8011f0a:	000b      	movs	r3, r1
 8011f0c:	9802      	ldr	r0, [sp, #8]
 8011f0e:	9903      	ldr	r1, [sp, #12]
 8011f10:	f7ee fab6 	bl	8000480 <__aeabi_dcmpgt>
 8011f14:	2800      	cmp	r0, #0
 8011f16:	d000      	beq.n	8011f1a <__ieee754_pow+0x79e>
 8011f18:	e611      	b.n	8011b3e <__ieee754_pow+0x3c2>
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	4a86      	ldr	r2, [pc, #536]	; (8012138 <__ieee754_pow+0x9bc>)
 8011f1e:	0063      	lsls	r3, r4, #1
 8011f20:	085b      	lsrs	r3, r3, #1
 8011f22:	9102      	str	r1, [sp, #8]
 8011f24:	4293      	cmp	r3, r2
 8011f26:	dd25      	ble.n	8011f74 <__ieee754_pow+0x7f8>
 8011f28:	4a84      	ldr	r2, [pc, #528]	; (801213c <__ieee754_pow+0x9c0>)
 8011f2a:	151b      	asrs	r3, r3, #20
 8011f2c:	189b      	adds	r3, r3, r2
 8011f2e:	2280      	movs	r2, #128	; 0x80
 8011f30:	0352      	lsls	r2, r2, #13
 8011f32:	0011      	movs	r1, r2
 8011f34:	4119      	asrs	r1, r3
 8011f36:	190b      	adds	r3, r1, r4
 8011f38:	005c      	lsls	r4, r3, #1
 8011f3a:	4981      	ldr	r1, [pc, #516]	; (8012140 <__ieee754_pow+0x9c4>)
 8011f3c:	4d81      	ldr	r5, [pc, #516]	; (8012144 <__ieee754_pow+0x9c8>)
 8011f3e:	0d64      	lsrs	r4, r4, #21
 8011f40:	1864      	adds	r4, r4, r1
 8011f42:	4125      	asrs	r5, r4
 8011f44:	401d      	ands	r5, r3
 8011f46:	031b      	lsls	r3, r3, #12
 8011f48:	0b1b      	lsrs	r3, r3, #12
 8011f4a:	4313      	orrs	r3, r2
 8011f4c:	2214      	movs	r2, #20
 8011f4e:	1b12      	subs	r2, r2, r4
 8011f50:	4113      	asrs	r3, r2
 8011f52:	9302      	str	r3, [sp, #8]
 8011f54:	9b08      	ldr	r3, [sp, #32]
 8011f56:	2000      	movs	r0, #0
 8011f58:	0029      	movs	r1, r5
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	da02      	bge.n	8011f64 <__ieee754_pow+0x7e8>
 8011f5e:	9b02      	ldr	r3, [sp, #8]
 8011f60:	425b      	negs	r3, r3
 8011f62:	9302      	str	r3, [sp, #8]
 8011f64:	0002      	movs	r2, r0
 8011f66:	000b      	movs	r3, r1
 8011f68:	9804      	ldr	r0, [sp, #16]
 8011f6a:	9905      	ldr	r1, [sp, #20]
 8011f6c:	f7f0 fc74 	bl	8002858 <__aeabi_dsub>
 8011f70:	9006      	str	r0, [sp, #24]
 8011f72:	9107      	str	r1, [sp, #28]
 8011f74:	9806      	ldr	r0, [sp, #24]
 8011f76:	9907      	ldr	r1, [sp, #28]
 8011f78:	0032      	movs	r2, r6
 8011f7a:	003b      	movs	r3, r7
 8011f7c:	f7ef fa50 	bl	8001420 <__aeabi_dadd>
 8011f80:	2000      	movs	r0, #0
 8011f82:	2200      	movs	r2, #0
 8011f84:	4b70      	ldr	r3, [pc, #448]	; (8012148 <__ieee754_pow+0x9cc>)
 8011f86:	9004      	str	r0, [sp, #16]
 8011f88:	9105      	str	r1, [sp, #20]
 8011f8a:	f7f0 f9a3 	bl	80022d4 <__aeabi_dmul>
 8011f8e:	9a06      	ldr	r2, [sp, #24]
 8011f90:	9b07      	ldr	r3, [sp, #28]
 8011f92:	9008      	str	r0, [sp, #32]
 8011f94:	9109      	str	r1, [sp, #36]	; 0x24
 8011f96:	9804      	ldr	r0, [sp, #16]
 8011f98:	9905      	ldr	r1, [sp, #20]
 8011f9a:	f7f0 fc5d 	bl	8002858 <__aeabi_dsub>
 8011f9e:	0002      	movs	r2, r0
 8011fa0:	000b      	movs	r3, r1
 8011fa2:	0030      	movs	r0, r6
 8011fa4:	0039      	movs	r1, r7
 8011fa6:	f7f0 fc57 	bl	8002858 <__aeabi_dsub>
 8011faa:	4a68      	ldr	r2, [pc, #416]	; (801214c <__ieee754_pow+0x9d0>)
 8011fac:	4b68      	ldr	r3, [pc, #416]	; (8012150 <__ieee754_pow+0x9d4>)
 8011fae:	f7f0 f991 	bl	80022d4 <__aeabi_dmul>
 8011fb2:	4a68      	ldr	r2, [pc, #416]	; (8012154 <__ieee754_pow+0x9d8>)
 8011fb4:	0004      	movs	r4, r0
 8011fb6:	000d      	movs	r5, r1
 8011fb8:	9804      	ldr	r0, [sp, #16]
 8011fba:	9905      	ldr	r1, [sp, #20]
 8011fbc:	4b66      	ldr	r3, [pc, #408]	; (8012158 <__ieee754_pow+0x9dc>)
 8011fbe:	f7f0 f989 	bl	80022d4 <__aeabi_dmul>
 8011fc2:	0002      	movs	r2, r0
 8011fc4:	000b      	movs	r3, r1
 8011fc6:	0020      	movs	r0, r4
 8011fc8:	0029      	movs	r1, r5
 8011fca:	f7ef fa29 	bl	8001420 <__aeabi_dadd>
 8011fce:	0004      	movs	r4, r0
 8011fd0:	000d      	movs	r5, r1
 8011fd2:	0002      	movs	r2, r0
 8011fd4:	000b      	movs	r3, r1
 8011fd6:	9808      	ldr	r0, [sp, #32]
 8011fd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011fda:	f7ef fa21 	bl	8001420 <__aeabi_dadd>
 8011fde:	9a08      	ldr	r2, [sp, #32]
 8011fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fe2:	0006      	movs	r6, r0
 8011fe4:	000f      	movs	r7, r1
 8011fe6:	f7f0 fc37 	bl	8002858 <__aeabi_dsub>
 8011fea:	0002      	movs	r2, r0
 8011fec:	000b      	movs	r3, r1
 8011fee:	0020      	movs	r0, r4
 8011ff0:	0029      	movs	r1, r5
 8011ff2:	f7f0 fc31 	bl	8002858 <__aeabi_dsub>
 8011ff6:	0032      	movs	r2, r6
 8011ff8:	9004      	str	r0, [sp, #16]
 8011ffa:	9105      	str	r1, [sp, #20]
 8011ffc:	003b      	movs	r3, r7
 8011ffe:	0030      	movs	r0, r6
 8012000:	0039      	movs	r1, r7
 8012002:	f7f0 f967 	bl	80022d4 <__aeabi_dmul>
 8012006:	0004      	movs	r4, r0
 8012008:	000d      	movs	r5, r1
 801200a:	4a54      	ldr	r2, [pc, #336]	; (801215c <__ieee754_pow+0x9e0>)
 801200c:	4b54      	ldr	r3, [pc, #336]	; (8012160 <__ieee754_pow+0x9e4>)
 801200e:	f7f0 f961 	bl	80022d4 <__aeabi_dmul>
 8012012:	4a54      	ldr	r2, [pc, #336]	; (8012164 <__ieee754_pow+0x9e8>)
 8012014:	4b54      	ldr	r3, [pc, #336]	; (8012168 <__ieee754_pow+0x9ec>)
 8012016:	f7f0 fc1f 	bl	8002858 <__aeabi_dsub>
 801201a:	0022      	movs	r2, r4
 801201c:	002b      	movs	r3, r5
 801201e:	f7f0 f959 	bl	80022d4 <__aeabi_dmul>
 8012022:	4a52      	ldr	r2, [pc, #328]	; (801216c <__ieee754_pow+0x9f0>)
 8012024:	4b52      	ldr	r3, [pc, #328]	; (8012170 <__ieee754_pow+0x9f4>)
 8012026:	f7ef f9fb 	bl	8001420 <__aeabi_dadd>
 801202a:	0022      	movs	r2, r4
 801202c:	002b      	movs	r3, r5
 801202e:	f7f0 f951 	bl	80022d4 <__aeabi_dmul>
 8012032:	4a50      	ldr	r2, [pc, #320]	; (8012174 <__ieee754_pow+0x9f8>)
 8012034:	4b50      	ldr	r3, [pc, #320]	; (8012178 <__ieee754_pow+0x9fc>)
 8012036:	f7f0 fc0f 	bl	8002858 <__aeabi_dsub>
 801203a:	0022      	movs	r2, r4
 801203c:	002b      	movs	r3, r5
 801203e:	f7f0 f949 	bl	80022d4 <__aeabi_dmul>
 8012042:	4a4e      	ldr	r2, [pc, #312]	; (801217c <__ieee754_pow+0xa00>)
 8012044:	4b4e      	ldr	r3, [pc, #312]	; (8012180 <__ieee754_pow+0xa04>)
 8012046:	f7ef f9eb 	bl	8001420 <__aeabi_dadd>
 801204a:	0022      	movs	r2, r4
 801204c:	002b      	movs	r3, r5
 801204e:	f7f0 f941 	bl	80022d4 <__aeabi_dmul>
 8012052:	0002      	movs	r2, r0
 8012054:	000b      	movs	r3, r1
 8012056:	0030      	movs	r0, r6
 8012058:	0039      	movs	r1, r7
 801205a:	f7f0 fbfd 	bl	8002858 <__aeabi_dsub>
 801205e:	0004      	movs	r4, r0
 8012060:	000d      	movs	r5, r1
 8012062:	0002      	movs	r2, r0
 8012064:	000b      	movs	r3, r1
 8012066:	0030      	movs	r0, r6
 8012068:	0039      	movs	r1, r7
 801206a:	f7f0 f933 	bl	80022d4 <__aeabi_dmul>
 801206e:	2380      	movs	r3, #128	; 0x80
 8012070:	9006      	str	r0, [sp, #24]
 8012072:	9107      	str	r1, [sp, #28]
 8012074:	2200      	movs	r2, #0
 8012076:	0020      	movs	r0, r4
 8012078:	0029      	movs	r1, r5
 801207a:	05db      	lsls	r3, r3, #23
 801207c:	f7f0 fbec 	bl	8002858 <__aeabi_dsub>
 8012080:	0002      	movs	r2, r0
 8012082:	000b      	movs	r3, r1
 8012084:	9806      	ldr	r0, [sp, #24]
 8012086:	9907      	ldr	r1, [sp, #28]
 8012088:	f7ef fd2a 	bl	8001ae0 <__aeabi_ddiv>
 801208c:	9a04      	ldr	r2, [sp, #16]
 801208e:	9b05      	ldr	r3, [sp, #20]
 8012090:	0004      	movs	r4, r0
 8012092:	000d      	movs	r5, r1
 8012094:	0030      	movs	r0, r6
 8012096:	0039      	movs	r1, r7
 8012098:	f7f0 f91c 	bl	80022d4 <__aeabi_dmul>
 801209c:	9a04      	ldr	r2, [sp, #16]
 801209e:	9b05      	ldr	r3, [sp, #20]
 80120a0:	f7ef f9be 	bl	8001420 <__aeabi_dadd>
 80120a4:	0002      	movs	r2, r0
 80120a6:	000b      	movs	r3, r1
 80120a8:	0020      	movs	r0, r4
 80120aa:	0029      	movs	r1, r5
 80120ac:	f7f0 fbd4 	bl	8002858 <__aeabi_dsub>
 80120b0:	0032      	movs	r2, r6
 80120b2:	003b      	movs	r3, r7
 80120b4:	f7f0 fbd0 	bl	8002858 <__aeabi_dsub>
 80120b8:	0002      	movs	r2, r0
 80120ba:	000b      	movs	r3, r1
 80120bc:	2000      	movs	r0, #0
 80120be:	4931      	ldr	r1, [pc, #196]	; (8012184 <__ieee754_pow+0xa08>)
 80120c0:	f7f0 fbca 	bl	8002858 <__aeabi_dsub>
 80120c4:	9b02      	ldr	r3, [sp, #8]
 80120c6:	051b      	lsls	r3, r3, #20
 80120c8:	185b      	adds	r3, r3, r1
 80120ca:	151a      	asrs	r2, r3, #20
 80120cc:	2a00      	cmp	r2, #0
 80120ce:	dc25      	bgt.n	801211c <__ieee754_pow+0x9a0>
 80120d0:	9a02      	ldr	r2, [sp, #8]
 80120d2:	f000 f861 	bl	8012198 <scalbn>
 80120d6:	9a00      	ldr	r2, [sp, #0]
 80120d8:	9b01      	ldr	r3, [sp, #4]
 80120da:	f7ff fc33 	bl	8011944 <__ieee754_pow+0x1c8>
 80120de:	4a2a      	ldr	r2, [pc, #168]	; (8012188 <__ieee754_pow+0xa0c>)
 80120e0:	004b      	lsls	r3, r1, #1
 80120e2:	085b      	lsrs	r3, r3, #1
 80120e4:	4293      	cmp	r3, r2
 80120e6:	dc00      	bgt.n	80120ea <__ieee754_pow+0x96e>
 80120e8:	e717      	b.n	8011f1a <__ieee754_pow+0x79e>
 80120ea:	4b28      	ldr	r3, [pc, #160]	; (801218c <__ieee754_pow+0xa10>)
 80120ec:	18cb      	adds	r3, r1, r3
 80120ee:	4303      	orrs	r3, r0
 80120f0:	d008      	beq.n	8012104 <__ieee754_pow+0x988>
 80120f2:	9800      	ldr	r0, [sp, #0]
 80120f4:	9901      	ldr	r1, [sp, #4]
 80120f6:	2300      	movs	r3, #0
 80120f8:	2200      	movs	r2, #0
 80120fa:	f7ee f9ad 	bl	8000458 <__aeabi_dcmplt>
 80120fe:	1e43      	subs	r3, r0, #1
 8012100:	4198      	sbcs	r0, r3
 8012102:	e462      	b.n	80119ca <__ieee754_pow+0x24e>
 8012104:	9a04      	ldr	r2, [sp, #16]
 8012106:	9b05      	ldr	r3, [sp, #20]
 8012108:	f7f0 fba6 	bl	8002858 <__aeabi_dsub>
 801210c:	0032      	movs	r2, r6
 801210e:	003b      	movs	r3, r7
 8012110:	f7ee f9c0 	bl	8000494 <__aeabi_dcmpge>
 8012114:	2800      	cmp	r0, #0
 8012116:	d100      	bne.n	801211a <__ieee754_pow+0x99e>
 8012118:	e6ff      	b.n	8011f1a <__ieee754_pow+0x79e>
 801211a:	e7ea      	b.n	80120f2 <__ieee754_pow+0x976>
 801211c:	0019      	movs	r1, r3
 801211e:	e7da      	b.n	80120d6 <__ieee754_pow+0x95a>
 8012120:	2300      	movs	r3, #0
 8012122:	4c18      	ldr	r4, [pc, #96]	; (8012184 <__ieee754_pow+0xa08>)
 8012124:	f7ff fbf1 	bl	801190a <__ieee754_pow+0x18e>
 8012128:	2300      	movs	r3, #0
 801212a:	2400      	movs	r4, #0
 801212c:	f7ff fbed 	bl	801190a <__ieee754_pow+0x18e>
 8012130:	652b82fe 	.word	0x652b82fe
 8012134:	3c971547 	.word	0x3c971547
 8012138:	3fe00000 	.word	0x3fe00000
 801213c:	fffffc02 	.word	0xfffffc02
 8012140:	fffffc01 	.word	0xfffffc01
 8012144:	fff00000 	.word	0xfff00000
 8012148:	3fe62e43 	.word	0x3fe62e43
 801214c:	fefa39ef 	.word	0xfefa39ef
 8012150:	3fe62e42 	.word	0x3fe62e42
 8012154:	0ca86c39 	.word	0x0ca86c39
 8012158:	be205c61 	.word	0xbe205c61
 801215c:	72bea4d0 	.word	0x72bea4d0
 8012160:	3e663769 	.word	0x3e663769
 8012164:	c5d26bf1 	.word	0xc5d26bf1
 8012168:	3ebbbd41 	.word	0x3ebbbd41
 801216c:	af25de2c 	.word	0xaf25de2c
 8012170:	3f11566a 	.word	0x3f11566a
 8012174:	16bebd93 	.word	0x16bebd93
 8012178:	3f66c16c 	.word	0x3f66c16c
 801217c:	5555553e 	.word	0x5555553e
 8012180:	3fc55555 	.word	0x3fc55555
 8012184:	3ff00000 	.word	0x3ff00000
 8012188:	4090cbff 	.word	0x4090cbff
 801218c:	3f6f3400 	.word	0x3f6f3400

08012190 <fabs>:
 8012190:	0049      	lsls	r1, r1, #1
 8012192:	084b      	lsrs	r3, r1, #1
 8012194:	0019      	movs	r1, r3
 8012196:	4770      	bx	lr

08012198 <scalbn>:
 8012198:	b570      	push	{r4, r5, r6, lr}
 801219a:	0014      	movs	r4, r2
 801219c:	004a      	lsls	r2, r1, #1
 801219e:	000b      	movs	r3, r1
 80121a0:	0d52      	lsrs	r2, r2, #21
 80121a2:	d10f      	bne.n	80121c4 <scalbn+0x2c>
 80121a4:	004b      	lsls	r3, r1, #1
 80121a6:	085b      	lsrs	r3, r3, #1
 80121a8:	4303      	orrs	r3, r0
 80121aa:	d011      	beq.n	80121d0 <scalbn+0x38>
 80121ac:	4b22      	ldr	r3, [pc, #136]	; (8012238 <scalbn+0xa0>)
 80121ae:	2200      	movs	r2, #0
 80121b0:	f7f0 f890 	bl	80022d4 <__aeabi_dmul>
 80121b4:	4b21      	ldr	r3, [pc, #132]	; (801223c <scalbn+0xa4>)
 80121b6:	429c      	cmp	r4, r3
 80121b8:	da0b      	bge.n	80121d2 <scalbn+0x3a>
 80121ba:	4a21      	ldr	r2, [pc, #132]	; (8012240 <scalbn+0xa8>)
 80121bc:	4b21      	ldr	r3, [pc, #132]	; (8012244 <scalbn+0xac>)
 80121be:	f7f0 f889 	bl	80022d4 <__aeabi_dmul>
 80121c2:	e005      	b.n	80121d0 <scalbn+0x38>
 80121c4:	4d20      	ldr	r5, [pc, #128]	; (8012248 <scalbn+0xb0>)
 80121c6:	42aa      	cmp	r2, r5
 80121c8:	d107      	bne.n	80121da <scalbn+0x42>
 80121ca:	0002      	movs	r2, r0
 80121cc:	f7ef f928 	bl	8001420 <__aeabi_dadd>
 80121d0:	bd70      	pop	{r4, r5, r6, pc}
 80121d2:	000b      	movs	r3, r1
 80121d4:	004a      	lsls	r2, r1, #1
 80121d6:	0d52      	lsrs	r2, r2, #21
 80121d8:	3a36      	subs	r2, #54	; 0x36
 80121da:	4d1c      	ldr	r5, [pc, #112]	; (801224c <scalbn+0xb4>)
 80121dc:	42ac      	cmp	r4, r5
 80121de:	dd0a      	ble.n	80121f6 <scalbn+0x5e>
 80121e0:	4c1b      	ldr	r4, [pc, #108]	; (8012250 <scalbn+0xb8>)
 80121e2:	4d1c      	ldr	r5, [pc, #112]	; (8012254 <scalbn+0xbc>)
 80121e4:	2900      	cmp	r1, #0
 80121e6:	da01      	bge.n	80121ec <scalbn+0x54>
 80121e8:	4c19      	ldr	r4, [pc, #100]	; (8012250 <scalbn+0xb8>)
 80121ea:	4d1b      	ldr	r5, [pc, #108]	; (8012258 <scalbn+0xc0>)
 80121ec:	4a18      	ldr	r2, [pc, #96]	; (8012250 <scalbn+0xb8>)
 80121ee:	4b19      	ldr	r3, [pc, #100]	; (8012254 <scalbn+0xbc>)
 80121f0:	0020      	movs	r0, r4
 80121f2:	0029      	movs	r1, r5
 80121f4:	e7e3      	b.n	80121be <scalbn+0x26>
 80121f6:	18a2      	adds	r2, r4, r2
 80121f8:	4c18      	ldr	r4, [pc, #96]	; (801225c <scalbn+0xc4>)
 80121fa:	42a2      	cmp	r2, r4
 80121fc:	dcf0      	bgt.n	80121e0 <scalbn+0x48>
 80121fe:	2a00      	cmp	r2, #0
 8012200:	dd05      	ble.n	801220e <scalbn+0x76>
 8012202:	4c17      	ldr	r4, [pc, #92]	; (8012260 <scalbn+0xc8>)
 8012204:	0512      	lsls	r2, r2, #20
 8012206:	4023      	ands	r3, r4
 8012208:	4313      	orrs	r3, r2
 801220a:	0019      	movs	r1, r3
 801220c:	e7e0      	b.n	80121d0 <scalbn+0x38>
 801220e:	0014      	movs	r4, r2
 8012210:	3435      	adds	r4, #53	; 0x35
 8012212:	da08      	bge.n	8012226 <scalbn+0x8e>
 8012214:	4c0a      	ldr	r4, [pc, #40]	; (8012240 <scalbn+0xa8>)
 8012216:	4d0b      	ldr	r5, [pc, #44]	; (8012244 <scalbn+0xac>)
 8012218:	2900      	cmp	r1, #0
 801221a:	da01      	bge.n	8012220 <scalbn+0x88>
 801221c:	4c08      	ldr	r4, [pc, #32]	; (8012240 <scalbn+0xa8>)
 801221e:	4d11      	ldr	r5, [pc, #68]	; (8012264 <scalbn+0xcc>)
 8012220:	4a07      	ldr	r2, [pc, #28]	; (8012240 <scalbn+0xa8>)
 8012222:	4b08      	ldr	r3, [pc, #32]	; (8012244 <scalbn+0xac>)
 8012224:	e7e4      	b.n	80121f0 <scalbn+0x58>
 8012226:	4c0e      	ldr	r4, [pc, #56]	; (8012260 <scalbn+0xc8>)
 8012228:	3236      	adds	r2, #54	; 0x36
 801222a:	4023      	ands	r3, r4
 801222c:	0512      	lsls	r2, r2, #20
 801222e:	431a      	orrs	r2, r3
 8012230:	0011      	movs	r1, r2
 8012232:	4b0d      	ldr	r3, [pc, #52]	; (8012268 <scalbn+0xd0>)
 8012234:	2200      	movs	r2, #0
 8012236:	e7c2      	b.n	80121be <scalbn+0x26>
 8012238:	43500000 	.word	0x43500000
 801223c:	ffff3cb0 	.word	0xffff3cb0
 8012240:	c2f8f359 	.word	0xc2f8f359
 8012244:	01a56e1f 	.word	0x01a56e1f
 8012248:	000007ff 	.word	0x000007ff
 801224c:	0000c350 	.word	0x0000c350
 8012250:	8800759c 	.word	0x8800759c
 8012254:	7e37e43c 	.word	0x7e37e43c
 8012258:	fe37e43c 	.word	0xfe37e43c
 801225c:	000007fe 	.word	0x000007fe
 8012260:	800fffff 	.word	0x800fffff
 8012264:	81a56e1f 	.word	0x81a56e1f
 8012268:	3c900000 	.word	0x3c900000

0801226c <with_errno>:
 801226c:	b570      	push	{r4, r5, r6, lr}
 801226e:	000d      	movs	r5, r1
 8012270:	0016      	movs	r6, r2
 8012272:	0004      	movs	r4, r0
 8012274:	f7fc fd18 	bl	800eca8 <__errno>
 8012278:	0029      	movs	r1, r5
 801227a:	6006      	str	r6, [r0, #0]
 801227c:	0020      	movs	r0, r4
 801227e:	bd70      	pop	{r4, r5, r6, pc}

08012280 <xflow>:
 8012280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012282:	0015      	movs	r5, r2
 8012284:	001c      	movs	r4, r3
 8012286:	2800      	cmp	r0, #0
 8012288:	d010      	beq.n	80122ac <xflow+0x2c>
 801228a:	2380      	movs	r3, #128	; 0x80
 801228c:	0010      	movs	r0, r2
 801228e:	061b      	lsls	r3, r3, #24
 8012290:	18e1      	adds	r1, r4, r3
 8012292:	9000      	str	r0, [sp, #0]
 8012294:	9101      	str	r1, [sp, #4]
 8012296:	9a00      	ldr	r2, [sp, #0]
 8012298:	9b01      	ldr	r3, [sp, #4]
 801229a:	0028      	movs	r0, r5
 801229c:	0021      	movs	r1, r4
 801229e:	f7f0 f819 	bl	80022d4 <__aeabi_dmul>
 80122a2:	2222      	movs	r2, #34	; 0x22
 80122a4:	f7ff ffe2 	bl	801226c <with_errno>
 80122a8:	b003      	add	sp, #12
 80122aa:	bd30      	pop	{r4, r5, pc}
 80122ac:	0010      	movs	r0, r2
 80122ae:	0019      	movs	r1, r3
 80122b0:	e7ef      	b.n	8012292 <xflow+0x12>

080122b2 <__math_uflow>:
 80122b2:	2380      	movs	r3, #128	; 0x80
 80122b4:	b510      	push	{r4, lr}
 80122b6:	2200      	movs	r2, #0
 80122b8:	055b      	lsls	r3, r3, #21
 80122ba:	f7ff ffe1 	bl	8012280 <xflow>
 80122be:	bd10      	pop	{r4, pc}

080122c0 <__math_oflow>:
 80122c0:	23e0      	movs	r3, #224	; 0xe0
 80122c2:	b510      	push	{r4, lr}
 80122c4:	2200      	movs	r2, #0
 80122c6:	05db      	lsls	r3, r3, #23
 80122c8:	f7ff ffda 	bl	8012280 <xflow>
 80122cc:	bd10      	pop	{r4, pc}
	...

080122d0 <__ieee754_sqrt>:
 80122d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122d2:	000a      	movs	r2, r1
 80122d4:	000c      	movs	r4, r1
 80122d6:	496f      	ldr	r1, [pc, #444]	; (8012494 <__ieee754_sqrt+0x1c4>)
 80122d8:	0005      	movs	r5, r0
 80122da:	0003      	movs	r3, r0
 80122dc:	0008      	movs	r0, r1
 80122de:	b087      	sub	sp, #28
 80122e0:	4020      	ands	r0, r4
 80122e2:	4288      	cmp	r0, r1
 80122e4:	d111      	bne.n	801230a <__ieee754_sqrt+0x3a>
 80122e6:	002a      	movs	r2, r5
 80122e8:	0023      	movs	r3, r4
 80122ea:	0028      	movs	r0, r5
 80122ec:	0021      	movs	r1, r4
 80122ee:	f7ef fff1 	bl	80022d4 <__aeabi_dmul>
 80122f2:	0002      	movs	r2, r0
 80122f4:	000b      	movs	r3, r1
 80122f6:	0028      	movs	r0, r5
 80122f8:	0021      	movs	r1, r4
 80122fa:	f7ef f891 	bl	8001420 <__aeabi_dadd>
 80122fe:	0005      	movs	r5, r0
 8012300:	000c      	movs	r4, r1
 8012302:	0028      	movs	r0, r5
 8012304:	0021      	movs	r1, r4
 8012306:	b007      	add	sp, #28
 8012308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801230a:	2c00      	cmp	r4, #0
 801230c:	dc12      	bgt.n	8012334 <__ieee754_sqrt+0x64>
 801230e:	0061      	lsls	r1, r4, #1
 8012310:	0849      	lsrs	r1, r1, #1
 8012312:	4329      	orrs	r1, r5
 8012314:	d0f5      	beq.n	8012302 <__ieee754_sqrt+0x32>
 8012316:	2100      	movs	r1, #0
 8012318:	428c      	cmp	r4, r1
 801231a:	d100      	bne.n	801231e <__ieee754_sqrt+0x4e>
 801231c:	e09f      	b.n	801245e <__ieee754_sqrt+0x18e>
 801231e:	002a      	movs	r2, r5
 8012320:	0023      	movs	r3, r4
 8012322:	0028      	movs	r0, r5
 8012324:	0021      	movs	r1, r4
 8012326:	f7f0 fa97 	bl	8002858 <__aeabi_dsub>
 801232a:	0002      	movs	r2, r0
 801232c:	000b      	movs	r3, r1
 801232e:	f7ef fbd7 	bl	8001ae0 <__aeabi_ddiv>
 8012332:	e7e4      	b.n	80122fe <__ieee754_sqrt+0x2e>
 8012334:	1521      	asrs	r1, r4, #20
 8012336:	d100      	bne.n	801233a <__ieee754_sqrt+0x6a>
 8012338:	e091      	b.n	801245e <__ieee754_sqrt+0x18e>
 801233a:	4857      	ldr	r0, [pc, #348]	; (8012498 <__ieee754_sqrt+0x1c8>)
 801233c:	0312      	lsls	r2, r2, #12
 801233e:	180c      	adds	r4, r1, r0
 8012340:	2080      	movs	r0, #128	; 0x80
 8012342:	0b12      	lsrs	r2, r2, #12
 8012344:	0340      	lsls	r0, r0, #13
 8012346:	4310      	orrs	r0, r2
 8012348:	07c9      	lsls	r1, r1, #31
 801234a:	d403      	bmi.n	8012354 <__ieee754_sqrt+0x84>
 801234c:	0fda      	lsrs	r2, r3, #31
 801234e:	0040      	lsls	r0, r0, #1
 8012350:	1810      	adds	r0, r2, r0
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	2500      	movs	r5, #0
 8012356:	1062      	asrs	r2, r4, #1
 8012358:	0040      	lsls	r0, r0, #1
 801235a:	2480      	movs	r4, #128	; 0x80
 801235c:	9205      	str	r2, [sp, #20]
 801235e:	0fda      	lsrs	r2, r3, #31
 8012360:	1812      	adds	r2, r2, r0
 8012362:	0029      	movs	r1, r5
 8012364:	2016      	movs	r0, #22
 8012366:	005b      	lsls	r3, r3, #1
 8012368:	03a4      	lsls	r4, r4, #14
 801236a:	190e      	adds	r6, r1, r4
 801236c:	4296      	cmp	r6, r2
 801236e:	dc02      	bgt.n	8012376 <__ieee754_sqrt+0xa6>
 8012370:	1931      	adds	r1, r6, r4
 8012372:	1b92      	subs	r2, r2, r6
 8012374:	192d      	adds	r5, r5, r4
 8012376:	0fde      	lsrs	r6, r3, #31
 8012378:	0052      	lsls	r2, r2, #1
 801237a:	3801      	subs	r0, #1
 801237c:	18b2      	adds	r2, r6, r2
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	0864      	lsrs	r4, r4, #1
 8012382:	2800      	cmp	r0, #0
 8012384:	d1f1      	bne.n	801236a <__ieee754_sqrt+0x9a>
 8012386:	2620      	movs	r6, #32
 8012388:	2780      	movs	r7, #128	; 0x80
 801238a:	0004      	movs	r4, r0
 801238c:	9604      	str	r6, [sp, #16]
 801238e:	063f      	lsls	r7, r7, #24
 8012390:	183e      	adds	r6, r7, r0
 8012392:	46b4      	mov	ip, r6
 8012394:	428a      	cmp	r2, r1
 8012396:	dc02      	bgt.n	801239e <__ieee754_sqrt+0xce>
 8012398:	d114      	bne.n	80123c4 <__ieee754_sqrt+0xf4>
 801239a:	429e      	cmp	r6, r3
 801239c:	d812      	bhi.n	80123c4 <__ieee754_sqrt+0xf4>
 801239e:	4660      	mov	r0, ip
 80123a0:	4666      	mov	r6, ip
 80123a2:	19c0      	adds	r0, r0, r7
 80123a4:	9100      	str	r1, [sp, #0]
 80123a6:	2e00      	cmp	r6, #0
 80123a8:	da03      	bge.n	80123b2 <__ieee754_sqrt+0xe2>
 80123aa:	43c6      	mvns	r6, r0
 80123ac:	0ff6      	lsrs	r6, r6, #31
 80123ae:	198e      	adds	r6, r1, r6
 80123b0:	9600      	str	r6, [sp, #0]
 80123b2:	1a52      	subs	r2, r2, r1
 80123b4:	4563      	cmp	r3, ip
 80123b6:	4189      	sbcs	r1, r1
 80123b8:	4249      	negs	r1, r1
 80123ba:	1a52      	subs	r2, r2, r1
 80123bc:	4661      	mov	r1, ip
 80123be:	1a5b      	subs	r3, r3, r1
 80123c0:	9900      	ldr	r1, [sp, #0]
 80123c2:	19e4      	adds	r4, r4, r7
 80123c4:	0fde      	lsrs	r6, r3, #31
 80123c6:	0052      	lsls	r2, r2, #1
 80123c8:	18b2      	adds	r2, r6, r2
 80123ca:	9e04      	ldr	r6, [sp, #16]
 80123cc:	005b      	lsls	r3, r3, #1
 80123ce:	3e01      	subs	r6, #1
 80123d0:	087f      	lsrs	r7, r7, #1
 80123d2:	9604      	str	r6, [sp, #16]
 80123d4:	2e00      	cmp	r6, #0
 80123d6:	d1db      	bne.n	8012390 <__ieee754_sqrt+0xc0>
 80123d8:	431a      	orrs	r2, r3
 80123da:	d01f      	beq.n	801241c <__ieee754_sqrt+0x14c>
 80123dc:	4e2f      	ldr	r6, [pc, #188]	; (801249c <__ieee754_sqrt+0x1cc>)
 80123de:	4f30      	ldr	r7, [pc, #192]	; (80124a0 <__ieee754_sqrt+0x1d0>)
 80123e0:	6830      	ldr	r0, [r6, #0]
 80123e2:	6871      	ldr	r1, [r6, #4]
 80123e4:	683a      	ldr	r2, [r7, #0]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	9200      	str	r2, [sp, #0]
 80123ea:	9301      	str	r3, [sp, #4]
 80123ec:	6832      	ldr	r2, [r6, #0]
 80123ee:	6873      	ldr	r3, [r6, #4]
 80123f0:	9202      	str	r2, [sp, #8]
 80123f2:	9303      	str	r3, [sp, #12]
 80123f4:	9a00      	ldr	r2, [sp, #0]
 80123f6:	9b01      	ldr	r3, [sp, #4]
 80123f8:	f7f0 fa2e 	bl	8002858 <__aeabi_dsub>
 80123fc:	0002      	movs	r2, r0
 80123fe:	000b      	movs	r3, r1
 8012400:	9802      	ldr	r0, [sp, #8]
 8012402:	9903      	ldr	r1, [sp, #12]
 8012404:	f7ee f832 	bl	800046c <__aeabi_dcmple>
 8012408:	2800      	cmp	r0, #0
 801240a:	d007      	beq.n	801241c <__ieee754_sqrt+0x14c>
 801240c:	6830      	ldr	r0, [r6, #0]
 801240e:	6871      	ldr	r1, [r6, #4]
 8012410:	683a      	ldr	r2, [r7, #0]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	1c67      	adds	r7, r4, #1
 8012416:	d127      	bne.n	8012468 <__ieee754_sqrt+0x198>
 8012418:	9c04      	ldr	r4, [sp, #16]
 801241a:	3501      	adds	r5, #1
 801241c:	4b21      	ldr	r3, [pc, #132]	; (80124a4 <__ieee754_sqrt+0x1d4>)
 801241e:	1069      	asrs	r1, r5, #1
 8012420:	18c9      	adds	r1, r1, r3
 8012422:	0864      	lsrs	r4, r4, #1
 8012424:	07ed      	lsls	r5, r5, #31
 8012426:	d502      	bpl.n	801242e <__ieee754_sqrt+0x15e>
 8012428:	2380      	movs	r3, #128	; 0x80
 801242a:	061b      	lsls	r3, r3, #24
 801242c:	431c      	orrs	r4, r3
 801242e:	9b05      	ldr	r3, [sp, #20]
 8012430:	0025      	movs	r5, r4
 8012432:	0518      	lsls	r0, r3, #20
 8012434:	1843      	adds	r3, r0, r1
 8012436:	001c      	movs	r4, r3
 8012438:	e763      	b.n	8012302 <__ieee754_sqrt+0x32>
 801243a:	0ada      	lsrs	r2, r3, #11
 801243c:	3815      	subs	r0, #21
 801243e:	055b      	lsls	r3, r3, #21
 8012440:	2a00      	cmp	r2, #0
 8012442:	d0fa      	beq.n	801243a <__ieee754_sqrt+0x16a>
 8012444:	2480      	movs	r4, #128	; 0x80
 8012446:	0364      	lsls	r4, r4, #13
 8012448:	4222      	tst	r2, r4
 801244a:	d00a      	beq.n	8012462 <__ieee754_sqrt+0x192>
 801244c:	2420      	movs	r4, #32
 801244e:	001e      	movs	r6, r3
 8012450:	1a64      	subs	r4, r4, r1
 8012452:	40e6      	lsrs	r6, r4
 8012454:	1e4d      	subs	r5, r1, #1
 8012456:	408b      	lsls	r3, r1
 8012458:	4332      	orrs	r2, r6
 801245a:	1b41      	subs	r1, r0, r5
 801245c:	e76d      	b.n	801233a <__ieee754_sqrt+0x6a>
 801245e:	2000      	movs	r0, #0
 8012460:	e7ee      	b.n	8012440 <__ieee754_sqrt+0x170>
 8012462:	0052      	lsls	r2, r2, #1
 8012464:	3101      	adds	r1, #1
 8012466:	e7ef      	b.n	8012448 <__ieee754_sqrt+0x178>
 8012468:	f7ee ffda 	bl	8001420 <__aeabi_dadd>
 801246c:	6877      	ldr	r7, [r6, #4]
 801246e:	6836      	ldr	r6, [r6, #0]
 8012470:	0002      	movs	r2, r0
 8012472:	000b      	movs	r3, r1
 8012474:	0030      	movs	r0, r6
 8012476:	0039      	movs	r1, r7
 8012478:	f7ed ffee 	bl	8000458 <__aeabi_dcmplt>
 801247c:	2800      	cmp	r0, #0
 801247e:	d004      	beq.n	801248a <__ieee754_sqrt+0x1ba>
 8012480:	3402      	adds	r4, #2
 8012482:	4263      	negs	r3, r4
 8012484:	4163      	adcs	r3, r4
 8012486:	18ed      	adds	r5, r5, r3
 8012488:	e7c8      	b.n	801241c <__ieee754_sqrt+0x14c>
 801248a:	2301      	movs	r3, #1
 801248c:	3401      	adds	r4, #1
 801248e:	439c      	bics	r4, r3
 8012490:	e7c4      	b.n	801241c <__ieee754_sqrt+0x14c>
 8012492:	46c0      	nop			; (mov r8, r8)
 8012494:	7ff00000 	.word	0x7ff00000
 8012498:	fffffc01 	.word	0xfffffc01
 801249c:	200002f8 	.word	0x200002f8
 80124a0:	20000300 	.word	0x20000300
 80124a4:	3fe00000 	.word	0x3fe00000

080124a8 <_init>:
 80124a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124aa:	46c0      	nop			; (mov r8, r8)
 80124ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ae:	bc08      	pop	{r3}
 80124b0:	469e      	mov	lr, r3
 80124b2:	4770      	bx	lr

080124b4 <_fini>:
 80124b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124b6:	46c0      	nop			; (mov r8, r8)
 80124b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ba:	bc08      	pop	{r3}
 80124bc:	469e      	mov	lr, r3
 80124be:	4770      	bx	lr
