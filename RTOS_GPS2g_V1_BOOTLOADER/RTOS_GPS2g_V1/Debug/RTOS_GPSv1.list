
RTOS_GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011abc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001840  08011b80  08011b80  00021b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133c0  080133c0  000302d0  2**0
                  CONTENTS
  4 .ARM          00000000  080133c0  080133c0  000302d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080133c0  080133c0  000302d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133c0  080133c0  000233c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133c4  080133c4  000233c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d0  20000000  080133c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057d0  200002d0  08013698  000302d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005aa0  08013698  00035aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000383ba  00000000  00000000  0003033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000548c  00000000  00000000  000686f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00017fb8  00000000  00000000  0006db81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f58  00000000  00000000  00085b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001cde  00000000  00000000  00087a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000621f  00000000  00000000  00089776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00032ba1  00000000  00000000  0008f995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000abeee  00000000  00000000  000c2536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000753c  00000000  00000000  0016e424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00175960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002d0 	.word	0x200002d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011b64 	.word	0x08011b64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002d4 	.word	0x200002d4
 8000104:	08011b64 	.word	0x08011b64

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fee5 	bl	800220c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe35 	bl	80020bc <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fed7 	bl	800220c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecd 	bl	800220c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe5d 	bl	8002140 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe53 	bl	8002140 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fbc9 	bl	8000c48 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fb55 	bl	8000b70 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fbbb 	bl	8000c48 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbb1 	bl	8000c48 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb61 	bl	8000bbc <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fb57 	bl	8000bbc <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 fd31 	bl	8002f98 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f002 f98a 	bl	8002858 <__aeabi_dsub>
 8000544:	f002 fd28 	bl	8002f98 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
 800055c:	000c      	movs	r4, r1
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	0028      	movs	r0, r5
 8000564:	0021      	movs	r1, r4
 8000566:	f7ff ff77 	bl	8000458 <__aeabi_dcmplt>
 800056a:	2800      	cmp	r0, #0
 800056c:	d108      	bne.n	8000580 <__aeabi_d2lz+0x28>
 800056e:	0028      	movs	r0, r5
 8000570:	0021      	movs	r1, r4
 8000572:	f000 f80f 	bl	8000594 <__aeabi_d2ulz>
 8000576:	0002      	movs	r2, r0
 8000578:	000b      	movs	r3, r1
 800057a:	0010      	movs	r0, r2
 800057c:	0019      	movs	r1, r3
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	18e1      	adds	r1, r4, r3
 8000586:	0028      	movs	r0, r5
 8000588:	f000 f804 	bl	8000594 <__aeabi_d2ulz>
 800058c:	2300      	movs	r3, #0
 800058e:	4242      	negs	r2, r0
 8000590:	418b      	sbcs	r3, r1
 8000592:	e7f2      	b.n	800057a <__aeabi_d2lz+0x22>

08000594 <__aeabi_d2ulz>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2200      	movs	r2, #0
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <__aeabi_d2ulz+0x34>)
 800059a:	000d      	movs	r5, r1
 800059c:	0004      	movs	r4, r0
 800059e:	f001 fe99 	bl	80022d4 <__aeabi_dmul>
 80005a2:	f7ff ffbb 	bl	800051c <__aeabi_d2uiz>
 80005a6:	0006      	movs	r6, r0
 80005a8:	f002 fd5c 	bl	8003064 <__aeabi_ui2d>
 80005ac:	2200      	movs	r2, #0
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <__aeabi_d2ulz+0x38>)
 80005b0:	f001 fe90 	bl	80022d4 <__aeabi_dmul>
 80005b4:	0002      	movs	r2, r0
 80005b6:	000b      	movs	r3, r1
 80005b8:	0020      	movs	r0, r4
 80005ba:	0029      	movs	r1, r5
 80005bc:	f002 f94c 	bl	8002858 <__aeabi_dsub>
 80005c0:	f7ff ffac 	bl	800051c <__aeabi_d2uiz>
 80005c4:	0031      	movs	r1, r6
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	3df00000 	.word	0x3df00000
 80005cc:	41f00000 	.word	0x41f00000

080005d0 <__aeabi_l2d>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0006      	movs	r6, r0
 80005d4:	0008      	movs	r0, r1
 80005d6:	f002 fd15 	bl	8003004 <__aeabi_i2d>
 80005da:	2200      	movs	r2, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <__aeabi_l2d+0x28>)
 80005de:	f001 fe79 	bl	80022d4 <__aeabi_dmul>
 80005e2:	000d      	movs	r5, r1
 80005e4:	0004      	movs	r4, r0
 80005e6:	0030      	movs	r0, r6
 80005e8:	f002 fd3c 	bl	8003064 <__aeabi_ui2d>
 80005ec:	002b      	movs	r3, r5
 80005ee:	0022      	movs	r2, r4
 80005f0:	f000 ff16 	bl	8001420 <__aeabi_dadd>
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	41f00000 	.word	0x41f00000

080005fc <__aeabi_fadd>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	4647      	mov	r7, r8
 8000600:	46ce      	mov	lr, r9
 8000602:	024a      	lsls	r2, r1, #9
 8000604:	0243      	lsls	r3, r0, #9
 8000606:	0045      	lsls	r5, r0, #1
 8000608:	0fc4      	lsrs	r4, r0, #31
 800060a:	0a50      	lsrs	r0, r2, #9
 800060c:	4680      	mov	r8, r0
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	0e00      	lsrs	r0, r0, #24
 8000614:	0992      	lsrs	r2, r2, #6
 8000616:	4694      	mov	ip, r2
 8000618:	b580      	push	{r7, lr}
 800061a:	001e      	movs	r6, r3
 800061c:	4681      	mov	r9, r0
 800061e:	0002      	movs	r2, r0
 8000620:	0e2d      	lsrs	r5, r5, #24
 8000622:	00df      	lsls	r7, r3, #3
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	428c      	cmp	r4, r1
 8000628:	d024      	beq.n	8000674 <__aeabi_fadd+0x78>
 800062a:	1a28      	subs	r0, r5, r0
 800062c:	2800      	cmp	r0, #0
 800062e:	dd0e      	ble.n	800064e <__aeabi_fadd+0x52>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d13e      	bne.n	80006b2 <__aeabi_fadd+0xb6>
 8000634:	4662      	mov	r2, ip
 8000636:	2a00      	cmp	r2, #0
 8000638:	d100      	bne.n	800063c <__aeabi_fadd+0x40>
 800063a:	e0fd      	b.n	8000838 <__aeabi_fadd+0x23c>
 800063c:	1e42      	subs	r2, r0, #1
 800063e:	2801      	cmp	r0, #1
 8000640:	d100      	bne.n	8000644 <__aeabi_fadd+0x48>
 8000642:	e137      	b.n	80008b4 <__aeabi_fadd+0x2b8>
 8000644:	28ff      	cmp	r0, #255	; 0xff
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x4e>
 8000648:	e0a9      	b.n	800079e <__aeabi_fadd+0x1a2>
 800064a:	0010      	movs	r0, r2
 800064c:	e039      	b.n	80006c2 <__aeabi_fadd+0xc6>
 800064e:	2800      	cmp	r0, #0
 8000650:	d063      	beq.n	800071a <__aeabi_fadd+0x11e>
 8000652:	464b      	mov	r3, r9
 8000654:	1b52      	subs	r2, r2, r5
 8000656:	2d00      	cmp	r5, #0
 8000658:	d000      	beq.n	800065c <__aeabi_fadd+0x60>
 800065a:	e0e0      	b.n	800081e <__aeabi_fadd+0x222>
 800065c:	2f00      	cmp	r7, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x66>
 8000660:	e0ce      	b.n	8000800 <__aeabi_fadd+0x204>
 8000662:	1e53      	subs	r3, r2, #1
 8000664:	2a01      	cmp	r2, #1
 8000666:	d100      	bne.n	800066a <__aeabi_fadd+0x6e>
 8000668:	e155      	b.n	8000916 <__aeabi_fadd+0x31a>
 800066a:	2aff      	cmp	r2, #255	; 0xff
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x74>
 800066e:	e094      	b.n	800079a <__aeabi_fadd+0x19e>
 8000670:	001a      	movs	r2, r3
 8000672:	e0d9      	b.n	8000828 <__aeabi_fadd+0x22c>
 8000674:	1a2a      	subs	r2, r5, r0
 8000676:	2a00      	cmp	r2, #0
 8000678:	dc00      	bgt.n	800067c <__aeabi_fadd+0x80>
 800067a:	e099      	b.n	80007b0 <__aeabi_fadd+0x1b4>
 800067c:	2800      	cmp	r0, #0
 800067e:	d062      	beq.n	8000746 <__aeabi_fadd+0x14a>
 8000680:	2dff      	cmp	r5, #255	; 0xff
 8000682:	d100      	bne.n	8000686 <__aeabi_fadd+0x8a>
 8000684:	e08b      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	4661      	mov	r1, ip
 800068a:	04db      	lsls	r3, r3, #19
 800068c:	4319      	orrs	r1, r3
 800068e:	468c      	mov	ip, r1
 8000690:	2a1b      	cmp	r2, #27
 8000692:	dc00      	bgt.n	8000696 <__aeabi_fadd+0x9a>
 8000694:	e0d2      	b.n	800083c <__aeabi_fadd+0x240>
 8000696:	2301      	movs	r3, #1
 8000698:	19db      	adds	r3, r3, r7
 800069a:	015a      	lsls	r2, r3, #5
 800069c:	d56a      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800069e:	3501      	adds	r5, #1
 80006a0:	2dff      	cmp	r5, #255	; 0xff
 80006a2:	d05b      	beq.n	800075c <__aeabi_fadd+0x160>
 80006a4:	2201      	movs	r2, #1
 80006a6:	49a3      	ldr	r1, [pc, #652]	; (8000934 <__aeabi_fadd+0x338>)
 80006a8:	401a      	ands	r2, r3
 80006aa:	085b      	lsrs	r3, r3, #1
 80006ac:	400b      	ands	r3, r1
 80006ae:	4313      	orrs	r3, r2
 80006b0:	e01c      	b.n	80006ec <__aeabi_fadd+0xf0>
 80006b2:	2dff      	cmp	r5, #255	; 0xff
 80006b4:	d100      	bne.n	80006b8 <__aeabi_fadd+0xbc>
 80006b6:	e072      	b.n	800079e <__aeabi_fadd+0x1a2>
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	4662      	mov	r2, ip
 80006bc:	04db      	lsls	r3, r3, #19
 80006be:	431a      	orrs	r2, r3
 80006c0:	4694      	mov	ip, r2
 80006c2:	281b      	cmp	r0, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0xcc>
 80006c6:	e090      	b.n	80007ea <__aeabi_fadd+0x1ee>
 80006c8:	2301      	movs	r3, #1
 80006ca:	1afb      	subs	r3, r7, r3
 80006cc:	015a      	lsls	r2, r3, #5
 80006ce:	d551      	bpl.n	8000774 <__aeabi_fadd+0x178>
 80006d0:	019b      	lsls	r3, r3, #6
 80006d2:	099e      	lsrs	r6, r3, #6
 80006d4:	0030      	movs	r0, r6
 80006d6:	f002 fdb9 	bl	800324c <__clzsi2>
 80006da:	0033      	movs	r3, r6
 80006dc:	3805      	subs	r0, #5
 80006de:	4083      	lsls	r3, r0
 80006e0:	4285      	cmp	r5, r0
 80006e2:	dc00      	bgt.n	80006e6 <__aeabi_fadd+0xea>
 80006e4:	e075      	b.n	80007d2 <__aeabi_fadd+0x1d6>
 80006e6:	4a94      	ldr	r2, [pc, #592]	; (8000938 <__aeabi_fadd+0x33c>)
 80006e8:	1a2d      	subs	r5, r5, r0
 80006ea:	4013      	ands	r3, r2
 80006ec:	075a      	lsls	r2, r3, #29
 80006ee:	d004      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f0:	220f      	movs	r2, #15
 80006f2:	401a      	ands	r2, r3
 80006f4:	2a04      	cmp	r2, #4
 80006f6:	d000      	beq.n	80006fa <__aeabi_fadd+0xfe>
 80006f8:	3304      	adds	r3, #4
 80006fa:	015a      	lsls	r2, r3, #5
 80006fc:	d53c      	bpl.n	8000778 <__aeabi_fadd+0x17c>
 80006fe:	1c68      	adds	r0, r5, #1
 8000700:	2dfe      	cmp	r5, #254	; 0xfe
 8000702:	d02b      	beq.n	800075c <__aeabi_fadd+0x160>
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	0a5e      	lsrs	r6, r3, #9
 8000708:	b2c0      	uxtb	r0, r0
 800070a:	05c0      	lsls	r0, r0, #23
 800070c:	4330      	orrs	r0, r6
 800070e:	07e4      	lsls	r4, r4, #31
 8000710:	4320      	orrs	r0, r4
 8000712:	bcc0      	pop	{r6, r7}
 8000714:	46b9      	mov	r9, r7
 8000716:	46b0      	mov	r8, r6
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	20fe      	movs	r0, #254	; 0xfe
 800071c:	1c6a      	adds	r2, r5, #1
 800071e:	4210      	tst	r0, r2
 8000720:	d172      	bne.n	8000808 <__aeabi_fadd+0x20c>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d000      	beq.n	8000728 <__aeabi_fadd+0x12c>
 8000726:	e0ae      	b.n	8000886 <__aeabi_fadd+0x28a>
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_fadd+0x132>
 800072c:	e0ec      	b.n	8000908 <__aeabi_fadd+0x30c>
 800072e:	4663      	mov	r3, ip
 8000730:	2000      	movs	r0, #0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0e9      	beq.n	800070a <__aeabi_fadd+0x10e>
 8000736:	1afb      	subs	r3, r7, r3
 8000738:	015a      	lsls	r2, r3, #5
 800073a:	d400      	bmi.n	800073e <__aeabi_fadd+0x142>
 800073c:	e0f3      	b.n	8000926 <__aeabi_fadd+0x32a>
 800073e:	4663      	mov	r3, ip
 8000740:	000c      	movs	r4, r1
 8000742:	1bdb      	subs	r3, r3, r7
 8000744:	e7d2      	b.n	80006ec <__aeabi_fadd+0xf0>
 8000746:	4661      	mov	r1, ip
 8000748:	2900      	cmp	r1, #0
 800074a:	d05b      	beq.n	8000804 <__aeabi_fadd+0x208>
 800074c:	1e51      	subs	r1, r2, #1
 800074e:	2a01      	cmp	r2, #1
 8000750:	d100      	bne.n	8000754 <__aeabi_fadd+0x158>
 8000752:	e0a7      	b.n	80008a4 <__aeabi_fadd+0x2a8>
 8000754:	2aff      	cmp	r2, #255	; 0xff
 8000756:	d022      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000758:	000a      	movs	r2, r1
 800075a:	e799      	b.n	8000690 <__aeabi_fadd+0x94>
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2600      	movs	r6, #0
 8000760:	e7d3      	b.n	800070a <__aeabi_fadd+0x10e>
 8000762:	21fe      	movs	r1, #254	; 0xfe
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	4211      	tst	r1, r2
 8000768:	d073      	beq.n	8000852 <__aeabi_fadd+0x256>
 800076a:	2aff      	cmp	r2, #255	; 0xff
 800076c:	d0f6      	beq.n	800075c <__aeabi_fadd+0x160>
 800076e:	0015      	movs	r5, r2
 8000770:	4467      	add	r7, ip
 8000772:	087b      	lsrs	r3, r7, #1
 8000774:	075a      	lsls	r2, r3, #29
 8000776:	d1bb      	bne.n	80006f0 <__aeabi_fadd+0xf4>
 8000778:	08db      	lsrs	r3, r3, #3
 800077a:	2dff      	cmp	r5, #255	; 0xff
 800077c:	d00f      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	0a5e      	lsrs	r6, r3, #9
 8000782:	b2e8      	uxtb	r0, r5
 8000784:	e7c1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000786:	4662      	mov	r2, ip
 8000788:	2a00      	cmp	r2, #0
 800078a:	d008      	beq.n	800079e <__aeabi_fadd+0x1a2>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	03d2      	lsls	r2, r2, #15
 8000790:	4213      	tst	r3, r2
 8000792:	d004      	beq.n	800079e <__aeabi_fadd+0x1a2>
 8000794:	4640      	mov	r0, r8
 8000796:	4210      	tst	r0, r2
 8000798:	d101      	bne.n	800079e <__aeabi_fadd+0x1a2>
 800079a:	000c      	movs	r4, r1
 800079c:	4643      	mov	r3, r8
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0dc      	beq.n	800075c <__aeabi_fadd+0x160>
 80007a2:	2680      	movs	r6, #128	; 0x80
 80007a4:	03f6      	lsls	r6, r6, #15
 80007a6:	431e      	orrs	r6, r3
 80007a8:	0276      	lsls	r6, r6, #9
 80007aa:	20ff      	movs	r0, #255	; 0xff
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	e7ac      	b.n	800070a <__aeabi_fadd+0x10e>
 80007b0:	2a00      	cmp	r2, #0
 80007b2:	d0d6      	beq.n	8000762 <__aeabi_fadd+0x166>
 80007b4:	1b42      	subs	r2, r0, r5
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	d05c      	beq.n	8000874 <__aeabi_fadd+0x278>
 80007ba:	28ff      	cmp	r0, #255	; 0xff
 80007bc:	d0ee      	beq.n	800079c <__aeabi_fadd+0x1a0>
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	04db      	lsls	r3, r3, #19
 80007c2:	431f      	orrs	r7, r3
 80007c4:	2a1b      	cmp	r2, #27
 80007c6:	dc00      	bgt.n	80007ca <__aeabi_fadd+0x1ce>
 80007c8:	e082      	b.n	80008d0 <__aeabi_fadd+0x2d4>
 80007ca:	2301      	movs	r3, #1
 80007cc:	464d      	mov	r5, r9
 80007ce:	4463      	add	r3, ip
 80007d0:	e763      	b.n	800069a <__aeabi_fadd+0x9e>
 80007d2:	2220      	movs	r2, #32
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	3001      	adds	r0, #1
 80007d8:	1a12      	subs	r2, r2, r0
 80007da:	0019      	movs	r1, r3
 80007dc:	4093      	lsls	r3, r2
 80007de:	40c1      	lsrs	r1, r0
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	2500      	movs	r5, #0
 80007e6:	430b      	orrs	r3, r1
 80007e8:	e780      	b.n	80006ec <__aeabi_fadd+0xf0>
 80007ea:	2320      	movs	r3, #32
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	4099      	lsls	r1, r3
 80007f2:	4662      	mov	r2, ip
 80007f4:	000b      	movs	r3, r1
 80007f6:	40c2      	lsrs	r2, r0
 80007f8:	1e59      	subs	r1, r3, #1
 80007fa:	418b      	sbcs	r3, r1
 80007fc:	4313      	orrs	r3, r2
 80007fe:	e764      	b.n	80006ca <__aeabi_fadd+0xce>
 8000800:	000c      	movs	r4, r1
 8000802:	4643      	mov	r3, r8
 8000804:	0015      	movs	r5, r2
 8000806:	e7b8      	b.n	800077a <__aeabi_fadd+0x17e>
 8000808:	4663      	mov	r3, ip
 800080a:	1afe      	subs	r6, r7, r3
 800080c:	0173      	lsls	r3, r6, #5
 800080e:	d445      	bmi.n	800089c <__aeabi_fadd+0x2a0>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d000      	beq.n	8000816 <__aeabi_fadd+0x21a>
 8000814:	e75e      	b.n	80006d4 <__aeabi_fadd+0xd8>
 8000816:	2400      	movs	r4, #0
 8000818:	2000      	movs	r0, #0
 800081a:	2600      	movs	r6, #0
 800081c:	e775      	b.n	800070a <__aeabi_fadd+0x10e>
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d0bb      	beq.n	800079a <__aeabi_fadd+0x19e>
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	04db      	lsls	r3, r3, #19
 8000826:	431f      	orrs	r7, r3
 8000828:	2a1b      	cmp	r2, #27
 800082a:	dd47      	ble.n	80008bc <__aeabi_fadd+0x2c0>
 800082c:	2301      	movs	r3, #1
 800082e:	4662      	mov	r2, ip
 8000830:	000c      	movs	r4, r1
 8000832:	464d      	mov	r5, r9
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	e749      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000838:	0005      	movs	r5, r0
 800083a:	e79e      	b.n	800077a <__aeabi_fadd+0x17e>
 800083c:	4661      	mov	r1, ip
 800083e:	2320      	movs	r3, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	4662      	mov	r2, ip
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	4193      	sbcs	r3, r2
 800084e:	430b      	orrs	r3, r1
 8000850:	e722      	b.n	8000698 <__aeabi_fadd+0x9c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d146      	bne.n	80008e4 <__aeabi_fadd+0x2e8>
 8000856:	2f00      	cmp	r7, #0
 8000858:	d062      	beq.n	8000920 <__aeabi_fadd+0x324>
 800085a:	4663      	mov	r3, ip
 800085c:	2000      	movs	r0, #0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d100      	bne.n	8000864 <__aeabi_fadd+0x268>
 8000862:	e752      	b.n	800070a <__aeabi_fadd+0x10e>
 8000864:	003b      	movs	r3, r7
 8000866:	4463      	add	r3, ip
 8000868:	015a      	lsls	r2, r3, #5
 800086a:	d583      	bpl.n	8000774 <__aeabi_fadd+0x178>
 800086c:	4a32      	ldr	r2, [pc, #200]	; (8000938 <__aeabi_fadd+0x33c>)
 800086e:	3501      	adds	r5, #1
 8000870:	4013      	ands	r3, r2
 8000872:	e77f      	b.n	8000774 <__aeabi_fadd+0x178>
 8000874:	2f00      	cmp	r7, #0
 8000876:	d0c4      	beq.n	8000802 <__aeabi_fadd+0x206>
 8000878:	1e53      	subs	r3, r2, #1
 800087a:	2a01      	cmp	r2, #1
 800087c:	d012      	beq.n	80008a4 <__aeabi_fadd+0x2a8>
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d08c      	beq.n	800079c <__aeabi_fadd+0x1a0>
 8000882:	001a      	movs	r2, r3
 8000884:	e79e      	b.n	80007c4 <__aeabi_fadd+0x1c8>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x290>
 800088a:	e77c      	b.n	8000786 <__aeabi_fadd+0x18a>
 800088c:	4663      	mov	r3, ip
 800088e:	2b00      	cmp	r3, #0
 8000890:	d183      	bne.n	800079a <__aeabi_fadd+0x19e>
 8000892:	2680      	movs	r6, #128	; 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	; 0xff
 8000898:	03f6      	lsls	r6, r6, #15
 800089a:	e736      	b.n	800070a <__aeabi_fadd+0x10e>
 800089c:	4663      	mov	r3, ip
 800089e:	000c      	movs	r4, r1
 80008a0:	1bde      	subs	r6, r3, r7
 80008a2:	e717      	b.n	80006d4 <__aeabi_fadd+0xd8>
 80008a4:	003b      	movs	r3, r7
 80008a6:	4463      	add	r3, ip
 80008a8:	2501      	movs	r5, #1
 80008aa:	015a      	lsls	r2, r3, #5
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_fadd+0x2b4>
 80008ae:	e761      	b.n	8000774 <__aeabi_fadd+0x178>
 80008b0:	2502      	movs	r5, #2
 80008b2:	e6f7      	b.n	80006a4 <__aeabi_fadd+0xa8>
 80008b4:	4663      	mov	r3, ip
 80008b6:	2501      	movs	r5, #1
 80008b8:	1afb      	subs	r3, r7, r3
 80008ba:	e707      	b.n	80006cc <__aeabi_fadd+0xd0>
 80008bc:	2320      	movs	r3, #32
 80008be:	1a9b      	subs	r3, r3, r2
 80008c0:	0038      	movs	r0, r7
 80008c2:	409f      	lsls	r7, r3
 80008c4:	003b      	movs	r3, r7
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4193      	sbcs	r3, r2
 80008cc:	4303      	orrs	r3, r0
 80008ce:	e7ae      	b.n	800082e <__aeabi_fadd+0x232>
 80008d0:	2320      	movs	r3, #32
 80008d2:	1a9b      	subs	r3, r3, r2
 80008d4:	0039      	movs	r1, r7
 80008d6:	409f      	lsls	r7, r3
 80008d8:	003b      	movs	r3, r7
 80008da:	40d1      	lsrs	r1, r2
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	4193      	sbcs	r3, r2
 80008e0:	430b      	orrs	r3, r1
 80008e2:	e773      	b.n	80007cc <__aeabi_fadd+0x1d0>
 80008e4:	2f00      	cmp	r7, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2ee>
 80008e8:	e758      	b.n	800079c <__aeabi_fadd+0x1a0>
 80008ea:	4662      	mov	r2, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x2f6>
 80008f0:	e755      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_fadd+0x300>
 80008fa:	e750      	b.n	800079e <__aeabi_fadd+0x1a2>
 80008fc:	4641      	mov	r1, r8
 80008fe:	4211      	tst	r1, r2
 8000900:	d000      	beq.n	8000904 <__aeabi_fadd+0x308>
 8000902:	e74c      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000904:	4643      	mov	r3, r8
 8000906:	e74a      	b.n	800079e <__aeabi_fadd+0x1a2>
 8000908:	4663      	mov	r3, ip
 800090a:	2b00      	cmp	r3, #0
 800090c:	d083      	beq.n	8000816 <__aeabi_fadd+0x21a>
 800090e:	000c      	movs	r4, r1
 8000910:	4646      	mov	r6, r8
 8000912:	2000      	movs	r0, #0
 8000914:	e6f9      	b.n	800070a <__aeabi_fadd+0x10e>
 8000916:	4663      	mov	r3, ip
 8000918:	000c      	movs	r4, r1
 800091a:	1bdb      	subs	r3, r3, r7
 800091c:	3501      	adds	r5, #1
 800091e:	e6d5      	b.n	80006cc <__aeabi_fadd+0xd0>
 8000920:	4646      	mov	r6, r8
 8000922:	2000      	movs	r0, #0
 8000924:	e6f1      	b.n	800070a <__aeabi_fadd+0x10e>
 8000926:	2b00      	cmp	r3, #0
 8000928:	d000      	beq.n	800092c <__aeabi_fadd+0x330>
 800092a:	e723      	b.n	8000774 <__aeabi_fadd+0x178>
 800092c:	2400      	movs	r4, #0
 800092e:	2600      	movs	r6, #0
 8000930:	e6eb      	b.n	800070a <__aeabi_fadd+0x10e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	7dffffff 	.word	0x7dffffff
 8000938:	fbffffff 	.word	0xfbffffff

0800093c <__aeabi_fdiv>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464f      	mov	r7, r9
 8000940:	4646      	mov	r6, r8
 8000942:	46d6      	mov	lr, sl
 8000944:	0245      	lsls	r5, r0, #9
 8000946:	b5c0      	push	{r6, r7, lr}
 8000948:	0047      	lsls	r7, r0, #1
 800094a:	1c0c      	adds	r4, r1, #0
 800094c:	0a6d      	lsrs	r5, r5, #9
 800094e:	0e3f      	lsrs	r7, r7, #24
 8000950:	0fc6      	lsrs	r6, r0, #31
 8000952:	2f00      	cmp	r7, #0
 8000954:	d100      	bne.n	8000958 <__aeabi_fdiv+0x1c>
 8000956:	e06f      	b.n	8000a38 <__aeabi_fdiv+0xfc>
 8000958:	2fff      	cmp	r7, #255	; 0xff
 800095a:	d100      	bne.n	800095e <__aeabi_fdiv+0x22>
 800095c:	e074      	b.n	8000a48 <__aeabi_fdiv+0x10c>
 800095e:	2300      	movs	r3, #0
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4699      	mov	r9, r3
 8000964:	469a      	mov	sl, r3
 8000966:	00ed      	lsls	r5, r5, #3
 8000968:	04d2      	lsls	r2, r2, #19
 800096a:	4315      	orrs	r5, r2
 800096c:	3f7f      	subs	r7, #127	; 0x7f
 800096e:	0263      	lsls	r3, r4, #9
 8000970:	0a5b      	lsrs	r3, r3, #9
 8000972:	4698      	mov	r8, r3
 8000974:	0063      	lsls	r3, r4, #1
 8000976:	0e1b      	lsrs	r3, r3, #24
 8000978:	0fe4      	lsrs	r4, r4, #31
 800097a:	2b00      	cmp	r3, #0
 800097c:	d04d      	beq.n	8000a1a <__aeabi_fdiv+0xde>
 800097e:	2bff      	cmp	r3, #255	; 0xff
 8000980:	d045      	beq.n	8000a0e <__aeabi_fdiv+0xd2>
 8000982:	4642      	mov	r2, r8
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	00d2      	lsls	r2, r2, #3
 8000988:	04c9      	lsls	r1, r1, #19
 800098a:	4311      	orrs	r1, r2
 800098c:	4688      	mov	r8, r1
 800098e:	2200      	movs	r2, #0
 8000990:	3b7f      	subs	r3, #127	; 0x7f
 8000992:	0031      	movs	r1, r6
 8000994:	1aff      	subs	r7, r7, r3
 8000996:	464b      	mov	r3, r9
 8000998:	4061      	eors	r1, r4
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d900      	bls.n	80009a2 <__aeabi_fdiv+0x66>
 80009a0:	e0b8      	b.n	8000b14 <__aeabi_fdiv+0x1d8>
 80009a2:	4870      	ldr	r0, [pc, #448]	; (8000b64 <__aeabi_fdiv+0x228>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58c3      	ldr	r3, [r0, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2300      	movs	r3, #0
 80009ac:	4698      	mov	r8, r3
 80009ae:	0026      	movs	r6, r4
 80009b0:	4645      	mov	r5, r8
 80009b2:	4692      	mov	sl, r2
 80009b4:	4653      	mov	r3, sl
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d100      	bne.n	80009bc <__aeabi_fdiv+0x80>
 80009ba:	e08d      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d100      	bne.n	80009c2 <__aeabi_fdiv+0x86>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_fdiv+0x1ca>
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d018      	beq.n	80009f8 <__aeabi_fdiv+0xbc>
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	dd6d      	ble.n	8000aaa <__aeabi_fdiv+0x16e>
 80009ce:	076a      	lsls	r2, r5, #29
 80009d0:	d004      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009d2:	220f      	movs	r2, #15
 80009d4:	402a      	ands	r2, r5
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d000      	beq.n	80009dc <__aeabi_fdiv+0xa0>
 80009da:	3504      	adds	r5, #4
 80009dc:	012a      	lsls	r2, r5, #4
 80009de:	d503      	bpl.n	80009e8 <__aeabi_fdiv+0xac>
 80009e0:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <__aeabi_fdiv+0x22c>)
 80009e2:	401d      	ands	r5, r3
 80009e4:	003b      	movs	r3, r7
 80009e6:	3380      	adds	r3, #128	; 0x80
 80009e8:	2bfe      	cmp	r3, #254	; 0xfe
 80009ea:	dd00      	ble.n	80009ee <__aeabi_fdiv+0xb2>
 80009ec:	e074      	b.n	8000ad8 <__aeabi_fdiv+0x19c>
 80009ee:	01aa      	lsls	r2, r5, #6
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	b2d8      	uxtb	r0, r3
 80009f4:	e002      	b.n	80009fc <__aeabi_fdiv+0xc0>
 80009f6:	000e      	movs	r6, r1
 80009f8:	2000      	movs	r0, #0
 80009fa:	2200      	movs	r2, #0
 80009fc:	05c0      	lsls	r0, r0, #23
 80009fe:	07f6      	lsls	r6, r6, #31
 8000a00:	4310      	orrs	r0, r2
 8000a02:	4330      	orrs	r0, r6
 8000a04:	bce0      	pop	{r5, r6, r7}
 8000a06:	46ba      	mov	sl, r7
 8000a08:	46b1      	mov	r9, r6
 8000a0a:	46a8      	mov	r8, r5
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	4643      	mov	r3, r8
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d13f      	bne.n	8000a94 <__aeabi_fdiv+0x158>
 8000a14:	2202      	movs	r2, #2
 8000a16:	3fff      	subs	r7, #255	; 0xff
 8000a18:	e003      	b.n	8000a22 <__aeabi_fdiv+0xe6>
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12d      	bne.n	8000a7c <__aeabi_fdiv+0x140>
 8000a20:	2201      	movs	r2, #1
 8000a22:	0031      	movs	r1, r6
 8000a24:	464b      	mov	r3, r9
 8000a26:	4061      	eors	r1, r4
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d838      	bhi.n	8000aa2 <__aeabi_fdiv+0x166>
 8000a30:	484e      	ldr	r0, [pc, #312]	; (8000b6c <__aeabi_fdiv+0x230>)
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	58c3      	ldr	r3, [r0, r3]
 8000a36:	469f      	mov	pc, r3
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d113      	bne.n	8000a64 <__aeabi_fdiv+0x128>
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	3b03      	subs	r3, #3
 8000a42:	2700      	movs	r7, #0
 8000a44:	469a      	mov	sl, r3
 8000a46:	e792      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_fdiv+0x11c>
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	4699      	mov	r9, r3
 8000a50:	3b06      	subs	r3, #6
 8000a52:	27ff      	movs	r7, #255	; 0xff
 8000a54:	469a      	mov	sl, r3
 8000a56:	e78a      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a58:	230c      	movs	r3, #12
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	3b09      	subs	r3, #9
 8000a5e:	27ff      	movs	r7, #255	; 0xff
 8000a60:	469a      	mov	sl, r3
 8000a62:	e784      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a64:	0028      	movs	r0, r5
 8000a66:	f002 fbf1 	bl	800324c <__clzsi2>
 8000a6a:	2776      	movs	r7, #118	; 0x76
 8000a6c:	1f43      	subs	r3, r0, #5
 8000a6e:	409d      	lsls	r5, r3
 8000a70:	2300      	movs	r3, #0
 8000a72:	427f      	negs	r7, r7
 8000a74:	4699      	mov	r9, r3
 8000a76:	469a      	mov	sl, r3
 8000a78:	1a3f      	subs	r7, r7, r0
 8000a7a:	e778      	b.n	800096e <__aeabi_fdiv+0x32>
 8000a7c:	4640      	mov	r0, r8
 8000a7e:	f002 fbe5 	bl	800324c <__clzsi2>
 8000a82:	4642      	mov	r2, r8
 8000a84:	1f43      	subs	r3, r0, #5
 8000a86:	409a      	lsls	r2, r3
 8000a88:	2376      	movs	r3, #118	; 0x76
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	1a1b      	subs	r3, r3, r0
 8000a90:	2200      	movs	r2, #0
 8000a92:	e77e      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000a94:	2303      	movs	r3, #3
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	4691      	mov	r9, r2
 8000a9c:	33fc      	adds	r3, #252	; 0xfc
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	e777      	b.n	8000992 <__aeabi_fdiv+0x56>
 8000aa2:	000e      	movs	r6, r1
 8000aa4:	20ff      	movs	r0, #255	; 0xff
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	e7a8      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000aaa:	2201      	movs	r2, #1
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	2b1b      	cmp	r3, #27
 8000ab0:	dca2      	bgt.n	80009f8 <__aeabi_fdiv+0xbc>
 8000ab2:	379e      	adds	r7, #158	; 0x9e
 8000ab4:	002a      	movs	r2, r5
 8000ab6:	40bd      	lsls	r5, r7
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	1e6b      	subs	r3, r5, #1
 8000abc:	419d      	sbcs	r5, r3
 8000abe:	4315      	orrs	r5, r2
 8000ac0:	076a      	lsls	r2, r5, #29
 8000ac2:	d004      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	402a      	ands	r2, r5
 8000ac8:	2a04      	cmp	r2, #4
 8000aca:	d000      	beq.n	8000ace <__aeabi_fdiv+0x192>
 8000acc:	3504      	adds	r5, #4
 8000ace:	016a      	lsls	r2, r5, #5
 8000ad0:	d544      	bpl.n	8000b5c <__aeabi_fdiv+0x220>
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e791      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ad8:	20ff      	movs	r0, #255	; 0xff
 8000ada:	2200      	movs	r2, #0
 8000adc:	e78e      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	2600      	movs	r6, #0
 8000ae2:	20ff      	movs	r0, #255	; 0xff
 8000ae4:	03d2      	lsls	r2, r2, #15
 8000ae6:	e789      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	4698      	mov	r8, r3
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4215      	tst	r5, r2
 8000af2:	d008      	beq.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000af4:	4643      	mov	r3, r8
 8000af6:	4213      	tst	r3, r2
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0x1ca>
 8000afa:	431a      	orrs	r2, r3
 8000afc:	0252      	lsls	r2, r2, #9
 8000afe:	0026      	movs	r6, r4
 8000b00:	20ff      	movs	r0, #255	; 0xff
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e77a      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	432a      	orrs	r2, r5
 8000b0c:	0252      	lsls	r2, r2, #9
 8000b0e:	20ff      	movs	r0, #255	; 0xff
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e773      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b14:	4642      	mov	r2, r8
 8000b16:	016b      	lsls	r3, r5, #5
 8000b18:	0155      	lsls	r5, r2, #5
 8000b1a:	42ab      	cmp	r3, r5
 8000b1c:	d21a      	bcs.n	8000b54 <__aeabi_fdiv+0x218>
 8000b1e:	201b      	movs	r0, #27
 8000b20:	2200      	movs	r2, #0
 8000b22:	3f01      	subs	r7, #1
 8000b24:	2601      	movs	r6, #1
 8000b26:	001c      	movs	r4, r3
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	db01      	blt.n	8000b34 <__aeabi_fdiv+0x1f8>
 8000b30:	429d      	cmp	r5, r3
 8000b32:	d801      	bhi.n	8000b38 <__aeabi_fdiv+0x1fc>
 8000b34:	1b5b      	subs	r3, r3, r5
 8000b36:	4332      	orrs	r2, r6
 8000b38:	3801      	subs	r0, #1
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1f3      	bne.n	8000b26 <__aeabi_fdiv+0x1ea>
 8000b3e:	1e58      	subs	r0, r3, #1
 8000b40:	4183      	sbcs	r3, r0
 8000b42:	4313      	orrs	r3, r2
 8000b44:	001d      	movs	r5, r3
 8000b46:	003b      	movs	r3, r7
 8000b48:	337f      	adds	r3, #127	; 0x7f
 8000b4a:	000e      	movs	r6, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	dd00      	ble.n	8000b52 <__aeabi_fdiv+0x216>
 8000b50:	e73d      	b.n	80009ce <__aeabi_fdiv+0x92>
 8000b52:	e7aa      	b.n	8000aaa <__aeabi_fdiv+0x16e>
 8000b54:	201a      	movs	r0, #26
 8000b56:	2201      	movs	r2, #1
 8000b58:	1b5b      	subs	r3, r3, r5
 8000b5a:	e7e3      	b.n	8000b24 <__aeabi_fdiv+0x1e8>
 8000b5c:	01aa      	lsls	r2, r5, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e74b      	b.n	80009fc <__aeabi_fdiv+0xc0>
 8000b64:	08011c40 	.word	0x08011c40
 8000b68:	f7ffffff 	.word	0xf7ffffff
 8000b6c:	08011c80 	.word	0x08011c80

08000b70 <__eqsf2>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	0042      	lsls	r2, r0, #1
 8000b74:	0245      	lsls	r5, r0, #9
 8000b76:	024e      	lsls	r6, r1, #9
 8000b78:	004c      	lsls	r4, r1, #1
 8000b7a:	0fc3      	lsrs	r3, r0, #31
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	2001      	movs	r0, #1
 8000b80:	0e12      	lsrs	r2, r2, #24
 8000b82:	0a76      	lsrs	r6, r6, #9
 8000b84:	0e24      	lsrs	r4, r4, #24
 8000b86:	0fc9      	lsrs	r1, r1, #31
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d006      	beq.n	8000b9a <__eqsf2+0x2a>
 8000b8c:	2cff      	cmp	r4, #255	; 0xff
 8000b8e:	d003      	beq.n	8000b98 <__eqsf2+0x28>
 8000b90:	42a2      	cmp	r2, r4
 8000b92:	d101      	bne.n	8000b98 <__eqsf2+0x28>
 8000b94:	42b5      	cmp	r5, r6
 8000b96:	d006      	beq.n	8000ba6 <__eqsf2+0x36>
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d1fc      	bne.n	8000b98 <__eqsf2+0x28>
 8000b9e:	2cff      	cmp	r4, #255	; 0xff
 8000ba0:	d1fa      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d1f8      	bne.n	8000b98 <__eqsf2+0x28>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d006      	beq.n	8000bb8 <__eqsf2+0x48>
 8000baa:	2001      	movs	r0, #1
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	d1f3      	bne.n	8000b98 <__eqsf2+0x28>
 8000bb0:	0028      	movs	r0, r5
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
 8000bb6:	e7ef      	b.n	8000b98 <__eqsf2+0x28>
 8000bb8:	2000      	movs	r0, #0
 8000bba:	e7ed      	b.n	8000b98 <__eqsf2+0x28>

08000bbc <__gesf2>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	0042      	lsls	r2, r0, #1
 8000bc0:	0245      	lsls	r5, r0, #9
 8000bc2:	024e      	lsls	r6, r1, #9
 8000bc4:	004c      	lsls	r4, r1, #1
 8000bc6:	0fc3      	lsrs	r3, r0, #31
 8000bc8:	0a6d      	lsrs	r5, r5, #9
 8000bca:	0e12      	lsrs	r2, r2, #24
 8000bcc:	0a76      	lsrs	r6, r6, #9
 8000bce:	0e24      	lsrs	r4, r4, #24
 8000bd0:	0fc8      	lsrs	r0, r1, #31
 8000bd2:	2aff      	cmp	r2, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <__gesf2+0x52>
 8000bd6:	2cff      	cmp	r4, #255	; 0xff
 8000bd8:	d00e      	beq.n	8000bf8 <__gesf2+0x3c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d11b      	bne.n	8000c16 <__gesf2+0x5a>
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	d101      	bne.n	8000be6 <__gesf2+0x2a>
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d01c      	beq.n	8000c20 <__gesf2+0x64>
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d00c      	beq.n	8000c04 <__gesf2+0x48>
 8000bea:	4283      	cmp	r3, r0
 8000bec:	d01c      	beq.n	8000c28 <__gesf2+0x6c>
 8000bee:	2102      	movs	r1, #2
 8000bf0:	1e58      	subs	r0, r3, #1
 8000bf2:	4008      	ands	r0, r1
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d122      	bne.n	8000c42 <__gesf2+0x86>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d1f4      	bne.n	8000bea <__gesf2+0x2e>
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d1f2      	bne.n	8000bea <__gesf2+0x2e>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d1f6      	bne.n	8000bf6 <__gesf2+0x3a>
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	e7f3      	b.n	8000bf6 <__gesf2+0x3a>
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	d117      	bne.n	8000c42 <__gesf2+0x86>
 8000c12:	2cff      	cmp	r4, #255	; 0xff
 8000c14:	d0f0      	beq.n	8000bf8 <__gesf2+0x3c>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d1e7      	bne.n	8000bea <__gesf2+0x2e>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d1e5      	bne.n	8000bea <__gesf2+0x2e>
 8000c1e:	e7e6      	b.n	8000bee <__gesf2+0x32>
 8000c20:	2000      	movs	r0, #0
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e7      	beq.n	8000bf6 <__gesf2+0x3a>
 8000c26:	e7e2      	b.n	8000bee <__gesf2+0x32>
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	dc05      	bgt.n	8000c38 <__gesf2+0x7c>
 8000c2c:	dbea      	blt.n	8000c04 <__gesf2+0x48>
 8000c2e:	42b5      	cmp	r5, r6
 8000c30:	d802      	bhi.n	8000c38 <__gesf2+0x7c>
 8000c32:	d3e7      	bcc.n	8000c04 <__gesf2+0x48>
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7de      	b.n	8000bf6 <__gesf2+0x3a>
 8000c38:	4243      	negs	r3, r0
 8000c3a:	4158      	adcs	r0, r3
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	3801      	subs	r0, #1
 8000c40:	e7d9      	b.n	8000bf6 <__gesf2+0x3a>
 8000c42:	2002      	movs	r0, #2
 8000c44:	4240      	negs	r0, r0
 8000c46:	e7d6      	b.n	8000bf6 <__gesf2+0x3a>

08000c48 <__lesf2>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	0042      	lsls	r2, r0, #1
 8000c4c:	0245      	lsls	r5, r0, #9
 8000c4e:	024e      	lsls	r6, r1, #9
 8000c50:	004c      	lsls	r4, r1, #1
 8000c52:	0fc3      	lsrs	r3, r0, #31
 8000c54:	0a6d      	lsrs	r5, r5, #9
 8000c56:	0e12      	lsrs	r2, r2, #24
 8000c58:	0a76      	lsrs	r6, r6, #9
 8000c5a:	0e24      	lsrs	r4, r4, #24
 8000c5c:	0fc8      	lsrs	r0, r1, #31
 8000c5e:	2aff      	cmp	r2, #255	; 0xff
 8000c60:	d00b      	beq.n	8000c7a <__lesf2+0x32>
 8000c62:	2cff      	cmp	r4, #255	; 0xff
 8000c64:	d00d      	beq.n	8000c82 <__lesf2+0x3a>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d11f      	bne.n	8000caa <__lesf2+0x62>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d116      	bne.n	8000c9c <__lesf2+0x54>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d114      	bne.n	8000c9c <__lesf2+0x54>
 8000c72:	2000      	movs	r0, #0
 8000c74:	2d00      	cmp	r5, #0
 8000c76:	d010      	beq.n	8000c9a <__lesf2+0x52>
 8000c78:	e009      	b.n	8000c8e <__lesf2+0x46>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d10c      	bne.n	8000c98 <__lesf2+0x50>
 8000c7e:	2cff      	cmp	r4, #255	; 0xff
 8000c80:	d113      	bne.n	8000caa <__lesf2+0x62>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d108      	bne.n	8000c98 <__lesf2+0x50>
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d008      	beq.n	8000c9c <__lesf2+0x54>
 8000c8a:	4283      	cmp	r3, r0
 8000c8c:	d012      	beq.n	8000cb4 <__lesf2+0x6c>
 8000c8e:	2102      	movs	r1, #2
 8000c90:	1e58      	subs	r0, r3, #1
 8000c92:	4008      	ands	r0, r1
 8000c94:	3801      	subs	r0, #1
 8000c96:	e000      	b.n	8000c9a <__lesf2+0x52>
 8000c98:	2002      	movs	r0, #2
 8000c9a:	bd70      	pop	{r4, r5, r6, pc}
 8000c9c:	2d00      	cmp	r5, #0
 8000c9e:	d1f4      	bne.n	8000c8a <__lesf2+0x42>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d1fa      	bne.n	8000c9a <__lesf2+0x52>
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	e7f7      	b.n	8000c9a <__lesf2+0x52>
 8000caa:	2c00      	cmp	r4, #0
 8000cac:	d1ed      	bne.n	8000c8a <__lesf2+0x42>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d1eb      	bne.n	8000c8a <__lesf2+0x42>
 8000cb2:	e7ec      	b.n	8000c8e <__lesf2+0x46>
 8000cb4:	42a2      	cmp	r2, r4
 8000cb6:	dc05      	bgt.n	8000cc4 <__lesf2+0x7c>
 8000cb8:	dbf2      	blt.n	8000ca0 <__lesf2+0x58>
 8000cba:	42b5      	cmp	r5, r6
 8000cbc:	d802      	bhi.n	8000cc4 <__lesf2+0x7c>
 8000cbe:	d3ef      	bcc.n	8000ca0 <__lesf2+0x58>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7ea      	b.n	8000c9a <__lesf2+0x52>
 8000cc4:	4243      	negs	r3, r0
 8000cc6:	4158      	adcs	r0, r3
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	3801      	subs	r0, #1
 8000ccc:	e7e5      	b.n	8000c9a <__lesf2+0x52>
 8000cce:	46c0      	nop			; (mov r8, r8)

08000cd0 <__aeabi_fmul>:
 8000cd0:	0243      	lsls	r3, r0, #9
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	464f      	mov	r7, r9
 8000cd8:	4646      	mov	r6, r8
 8000cda:	4699      	mov	r9, r3
 8000cdc:	46d6      	mov	lr, sl
 8000cde:	0fc3      	lsrs	r3, r0, #31
 8000ce0:	0045      	lsls	r5, r0, #1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	b5c0      	push	{r6, r7, lr}
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	1c0f      	adds	r7, r1, #0
 8000cea:	0e2d      	lsrs	r5, r5, #24
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fmul+0x20>
 8000cee:	e0cb      	b.n	8000e88 <__aeabi_fmul+0x1b8>
 8000cf0:	2dff      	cmp	r5, #255	; 0xff
 8000cf2:	d100      	bne.n	8000cf6 <__aeabi_fmul+0x26>
 8000cf4:	e0cf      	b.n	8000e96 <__aeabi_fmul+0x1c6>
 8000cf6:	2280      	movs	r2, #128	; 0x80
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	04d2      	lsls	r2, r2, #19
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	2300      	movs	r3, #0
 8000d00:	4691      	mov	r9, r2
 8000d02:	2600      	movs	r6, #0
 8000d04:	469a      	mov	sl, r3
 8000d06:	3d7f      	subs	r5, #127	; 0x7f
 8000d08:	027c      	lsls	r4, r7, #9
 8000d0a:	007b      	lsls	r3, r7, #1
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	0e1b      	lsrs	r3, r3, #24
 8000d10:	0fff      	lsrs	r7, r7, #31
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_fmul+0x48>
 8000d16:	e0a9      	b.n	8000e6c <__aeabi_fmul+0x19c>
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d011      	beq.n	8000d40 <__aeabi_fmul+0x70>
 8000d1c:	2280      	movs	r2, #128	; 0x80
 8000d1e:	00e4      	lsls	r4, r4, #3
 8000d20:	04d2      	lsls	r2, r2, #19
 8000d22:	4314      	orrs	r4, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	3b7f      	subs	r3, #127	; 0x7f
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	407a      	eors	r2, r7
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	1c5d      	adds	r5, r3, #1
 8000d32:	2e0a      	cmp	r6, #10
 8000d34:	dd13      	ble.n	8000d5e <__aeabi_fmul+0x8e>
 8000d36:	003a      	movs	r2, r7
 8000d38:	2e0b      	cmp	r6, #11
 8000d3a:	d047      	beq.n	8000dcc <__aeabi_fmul+0xfc>
 8000d3c:	4647      	mov	r7, r8
 8000d3e:	e03f      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000d40:	002b      	movs	r3, r5
 8000d42:	33ff      	adds	r3, #255	; 0xff
 8000d44:	2c00      	cmp	r4, #0
 8000d46:	d11e      	bne.n	8000d86 <__aeabi_fmul+0xb6>
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4316      	orrs	r6, r2
 8000d4c:	4642      	mov	r2, r8
 8000d4e:	3501      	adds	r5, #1
 8000d50:	407a      	eors	r2, r7
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	35ff      	adds	r5, #255	; 0xff
 8000d56:	2e0a      	cmp	r6, #10
 8000d58:	dd00      	ble.n	8000d5c <__aeabi_fmul+0x8c>
 8000d5a:	e0e4      	b.n	8000f26 <__aeabi_fmul+0x256>
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	2e02      	cmp	r6, #2
 8000d60:	dc1c      	bgt.n	8000d9c <__aeabi_fmul+0xcc>
 8000d62:	3e01      	subs	r6, #1
 8000d64:	2e01      	cmp	r6, #1
 8000d66:	d842      	bhi.n	8000dee <__aeabi_fmul+0x11e>
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d03d      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000d6c:	2801      	cmp	r0, #1
 8000d6e:	d166      	bne.n	8000e3e <__aeabi_fmul+0x16e>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	05c0      	lsls	r0, r0, #23
 8000d76:	4308      	orrs	r0, r1
 8000d78:	07d2      	lsls	r2, r2, #31
 8000d7a:	4310      	orrs	r0, r2
 8000d7c:	bce0      	pop	{r5, r6, r7}
 8000d7e:	46ba      	mov	sl, r7
 8000d80:	46b1      	mov	r9, r6
 8000d82:	46a8      	mov	r8, r5
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d86:	2203      	movs	r2, #3
 8000d88:	4316      	orrs	r6, r2
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	3501      	adds	r5, #1
 8000d8e:	407a      	eors	r2, r7
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	35ff      	adds	r5, #255	; 0xff
 8000d94:	2e0a      	cmp	r6, #10
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_fmul+0xca>
 8000d98:	e0e4      	b.n	8000f64 <__aeabi_fmul+0x294>
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	40b1      	lsls	r1, r6
 8000da0:	26a6      	movs	r6, #166	; 0xa6
 8000da2:	00f6      	lsls	r6, r6, #3
 8000da4:	4231      	tst	r1, r6
 8000da6:	d10a      	bne.n	8000dbe <__aeabi_fmul+0xee>
 8000da8:	2690      	movs	r6, #144	; 0x90
 8000daa:	00b6      	lsls	r6, r6, #2
 8000dac:	4231      	tst	r1, r6
 8000dae:	d116      	bne.n	8000dde <__aeabi_fmul+0x10e>
 8000db0:	3eb9      	subs	r6, #185	; 0xb9
 8000db2:	3eff      	subs	r6, #255	; 0xff
 8000db4:	420e      	tst	r6, r1
 8000db6:	d01a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	4682      	mov	sl, r0
 8000dbc:	e000      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000dbe:	0017      	movs	r7, r2
 8000dc0:	4653      	mov	r3, sl
 8000dc2:	003a      	movs	r2, r7
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d00f      	beq.n	8000de8 <__aeabi_fmul+0x118>
 8000dc8:	464c      	mov	r4, r9
 8000dca:	4650      	mov	r0, sl
 8000dcc:	2803      	cmp	r0, #3
 8000dce:	d1cd      	bne.n	8000d6c <__aeabi_fmul+0x9c>
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	03c9      	lsls	r1, r1, #15
 8000dd4:	4321      	orrs	r1, r4
 8000dd6:	0249      	lsls	r1, r1, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a49      	lsrs	r1, r1, #9
 8000ddc:	e7ca      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	2200      	movs	r2, #0
 8000de2:	20ff      	movs	r0, #255	; 0xff
 8000de4:	03c9      	lsls	r1, r1, #15
 8000de6:	e7c5      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000de8:	20ff      	movs	r0, #255	; 0xff
 8000dea:	2100      	movs	r1, #0
 8000dec:	e7c2      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000dee:	0c20      	lsrs	r0, r4, #16
 8000df0:	4649      	mov	r1, r9
 8000df2:	0424      	lsls	r4, r4, #16
 8000df4:	0c24      	lsrs	r4, r4, #16
 8000df6:	0027      	movs	r7, r4
 8000df8:	0c0e      	lsrs	r6, r1, #16
 8000dfa:	0409      	lsls	r1, r1, #16
 8000dfc:	0c09      	lsrs	r1, r1, #16
 8000dfe:	4374      	muls	r4, r6
 8000e00:	434f      	muls	r7, r1
 8000e02:	4346      	muls	r6, r0
 8000e04:	4348      	muls	r0, r1
 8000e06:	0c39      	lsrs	r1, r7, #16
 8000e08:	1900      	adds	r0, r0, r4
 8000e0a:	1809      	adds	r1, r1, r0
 8000e0c:	428c      	cmp	r4, r1
 8000e0e:	d903      	bls.n	8000e18 <__aeabi_fmul+0x148>
 8000e10:	2080      	movs	r0, #128	; 0x80
 8000e12:	0240      	lsls	r0, r0, #9
 8000e14:	4684      	mov	ip, r0
 8000e16:	4466      	add	r6, ip
 8000e18:	043f      	lsls	r7, r7, #16
 8000e1a:	0408      	lsls	r0, r1, #16
 8000e1c:	0c3f      	lsrs	r7, r7, #16
 8000e1e:	19c0      	adds	r0, r0, r7
 8000e20:	0184      	lsls	r4, r0, #6
 8000e22:	1e67      	subs	r7, r4, #1
 8000e24:	41bc      	sbcs	r4, r7
 8000e26:	0c09      	lsrs	r1, r1, #16
 8000e28:	0e80      	lsrs	r0, r0, #26
 8000e2a:	1989      	adds	r1, r1, r6
 8000e2c:	4304      	orrs	r4, r0
 8000e2e:	0189      	lsls	r1, r1, #6
 8000e30:	430c      	orrs	r4, r1
 8000e32:	0109      	lsls	r1, r1, #4
 8000e34:	d571      	bpl.n	8000f1a <__aeabi_fmul+0x24a>
 8000e36:	2301      	movs	r3, #1
 8000e38:	0861      	lsrs	r1, r4, #1
 8000e3a:	401c      	ands	r4, r3
 8000e3c:	430c      	orrs	r4, r1
 8000e3e:	002b      	movs	r3, r5
 8000e40:	337f      	adds	r3, #127	; 0x7f
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	dd51      	ble.n	8000eea <__aeabi_fmul+0x21a>
 8000e46:	0761      	lsls	r1, r4, #29
 8000e48:	d004      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e4a:	210f      	movs	r1, #15
 8000e4c:	4021      	ands	r1, r4
 8000e4e:	2904      	cmp	r1, #4
 8000e50:	d000      	beq.n	8000e54 <__aeabi_fmul+0x184>
 8000e52:	3404      	adds	r4, #4
 8000e54:	0121      	lsls	r1, r4, #4
 8000e56:	d503      	bpl.n	8000e60 <__aeabi_fmul+0x190>
 8000e58:	4b43      	ldr	r3, [pc, #268]	; (8000f68 <__aeabi_fmul+0x298>)
 8000e5a:	401c      	ands	r4, r3
 8000e5c:	002b      	movs	r3, r5
 8000e5e:	3380      	adds	r3, #128	; 0x80
 8000e60:	2bfe      	cmp	r3, #254	; 0xfe
 8000e62:	dcc1      	bgt.n	8000de8 <__aeabi_fmul+0x118>
 8000e64:	01a1      	lsls	r1, r4, #6
 8000e66:	0a49      	lsrs	r1, r1, #9
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	e783      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000e6c:	2c00      	cmp	r4, #0
 8000e6e:	d12c      	bne.n	8000eca <__aeabi_fmul+0x1fa>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4642      	mov	r2, r8
 8000e74:	431e      	orrs	r6, r3
 8000e76:	002b      	movs	r3, r5
 8000e78:	407a      	eors	r2, r7
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	1c5d      	adds	r5, r3, #1
 8000e80:	2e0a      	cmp	r6, #10
 8000e82:	dd00      	ble.n	8000e86 <__aeabi_fmul+0x1b6>
 8000e84:	e757      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000e86:	e76a      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <__aeabi_fmul+0x1de>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2604      	movs	r6, #4
 8000e90:	2500      	movs	r5, #0
 8000e92:	469a      	mov	sl, r3
 8000e94:	e738      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d104      	bne.n	8000ea4 <__aeabi_fmul+0x1d4>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	2608      	movs	r6, #8
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	e731      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	260c      	movs	r6, #12
 8000ea8:	25ff      	movs	r5, #255	; 0xff
 8000eaa:	469a      	mov	sl, r3
 8000eac:	e72c      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eae:	4648      	mov	r0, r9
 8000eb0:	f002 f9cc 	bl	800324c <__clzsi2>
 8000eb4:	464a      	mov	r2, r9
 8000eb6:	1f43      	subs	r3, r0, #5
 8000eb8:	2576      	movs	r5, #118	; 0x76
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	426d      	negs	r5, r5
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	2600      	movs	r6, #0
 8000ec4:	469a      	mov	sl, r3
 8000ec6:	1a2d      	subs	r5, r5, r0
 8000ec8:	e71e      	b.n	8000d08 <__aeabi_fmul+0x38>
 8000eca:	0020      	movs	r0, r4
 8000ecc:	f002 f9be 	bl	800324c <__clzsi2>
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	1f43      	subs	r3, r0, #5
 8000ed4:	409c      	lsls	r4, r3
 8000ed6:	1a2b      	subs	r3, r5, r0
 8000ed8:	3b76      	subs	r3, #118	; 0x76
 8000eda:	407a      	eors	r2, r7
 8000edc:	2000      	movs	r0, #0
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	1c5d      	adds	r5, r3, #1
 8000ee2:	2e0a      	cmp	r6, #10
 8000ee4:	dd00      	ble.n	8000ee8 <__aeabi_fmul+0x218>
 8000ee6:	e726      	b.n	8000d36 <__aeabi_fmul+0x66>
 8000ee8:	e739      	b.n	8000d5e <__aeabi_fmul+0x8e>
 8000eea:	2101      	movs	r1, #1
 8000eec:	1acb      	subs	r3, r1, r3
 8000eee:	2b1b      	cmp	r3, #27
 8000ef0:	dd00      	ble.n	8000ef4 <__aeabi_fmul+0x224>
 8000ef2:	e73d      	b.n	8000d70 <__aeabi_fmul+0xa0>
 8000ef4:	359e      	adds	r5, #158	; 0x9e
 8000ef6:	0021      	movs	r1, r4
 8000ef8:	40ac      	lsls	r4, r5
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	1e63      	subs	r3, r4, #1
 8000efe:	419c      	sbcs	r4, r3
 8000f00:	4321      	orrs	r1, r4
 8000f02:	074b      	lsls	r3, r1, #29
 8000f04:	d004      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f06:	230f      	movs	r3, #15
 8000f08:	400b      	ands	r3, r1
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fmul+0x240>
 8000f0e:	3104      	adds	r1, #4
 8000f10:	014b      	lsls	r3, r1, #5
 8000f12:	d504      	bpl.n	8000f1e <__aeabi_fmul+0x24e>
 8000f14:	2001      	movs	r0, #1
 8000f16:	2100      	movs	r1, #0
 8000f18:	e72c      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f1a:	001d      	movs	r5, r3
 8000f1c:	e78f      	b.n	8000e3e <__aeabi_fmul+0x16e>
 8000f1e:	0189      	lsls	r1, r1, #6
 8000f20:	2000      	movs	r0, #0
 8000f22:	0a49      	lsrs	r1, r1, #9
 8000f24:	e726      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f26:	2302      	movs	r3, #2
 8000f28:	2e0f      	cmp	r6, #15
 8000f2a:	d10c      	bne.n	8000f46 <__aeabi_fmul+0x276>
 8000f2c:	2180      	movs	r1, #128	; 0x80
 8000f2e:	464b      	mov	r3, r9
 8000f30:	03c9      	lsls	r1, r1, #15
 8000f32:	420b      	tst	r3, r1
 8000f34:	d00d      	beq.n	8000f52 <__aeabi_fmul+0x282>
 8000f36:	420c      	tst	r4, r1
 8000f38:	d10b      	bne.n	8000f52 <__aeabi_fmul+0x282>
 8000f3a:	4321      	orrs	r1, r4
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	003a      	movs	r2, r7
 8000f40:	20ff      	movs	r0, #255	; 0xff
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	e716      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f46:	2e0b      	cmp	r6, #11
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fmul+0x27c>
 8000f4a:	e6f7      	b.n	8000d3c <__aeabi_fmul+0x6c>
 8000f4c:	46a1      	mov	r9, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	e736      	b.n	8000dc0 <__aeabi_fmul+0xf0>
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	464b      	mov	r3, r9
 8000f56:	03c9      	lsls	r1, r1, #15
 8000f58:	4319      	orrs	r1, r3
 8000f5a:	0249      	lsls	r1, r1, #9
 8000f5c:	4642      	mov	r2, r8
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	0a49      	lsrs	r1, r1, #9
 8000f62:	e707      	b.n	8000d74 <__aeabi_fmul+0xa4>
 8000f64:	2303      	movs	r3, #3
 8000f66:	e7df      	b.n	8000f28 <__aeabi_fmul+0x258>
 8000f68:	f7ffffff 	.word	0xf7ffffff

08000f6c <__aeabi_fsub>:
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	46c6      	mov	lr, r8
 8000f70:	0243      	lsls	r3, r0, #9
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	0045      	lsls	r5, r0, #1
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	0fc4      	lsrs	r4, r0, #31
 8000f7a:	0248      	lsls	r0, r1, #9
 8000f7c:	004f      	lsls	r7, r1, #1
 8000f7e:	4694      	mov	ip, r2
 8000f80:	0a42      	lsrs	r2, r0, #9
 8000f82:	001e      	movs	r6, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	b500      	push	{lr}
 8000f88:	0e2d      	lsrs	r5, r5, #24
 8000f8a:	0e3f      	lsrs	r7, r7, #24
 8000f8c:	0fc9      	lsrs	r1, r1, #31
 8000f8e:	0980      	lsrs	r0, r0, #6
 8000f90:	2fff      	cmp	r7, #255	; 0xff
 8000f92:	d059      	beq.n	8001048 <__aeabi_fsub+0xdc>
 8000f94:	2201      	movs	r2, #1
 8000f96:	4051      	eors	r1, r2
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d039      	beq.n	8001010 <__aeabi_fsub+0xa4>
 8000f9c:	1bea      	subs	r2, r5, r7
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dd58      	ble.n	8001054 <__aeabi_fsub+0xe8>
 8000fa2:	2f00      	cmp	r7, #0
 8000fa4:	d068      	beq.n	8001078 <__aeabi_fsub+0x10c>
 8000fa6:	2dff      	cmp	r5, #255	; 0xff
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x40>
 8000faa:	e0d1      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8000fac:	2380      	movs	r3, #128	; 0x80
 8000fae:	04db      	lsls	r3, r3, #19
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	2a1b      	cmp	r2, #27
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_fsub+0x4c>
 8000fb6:	e0e3      	b.n	8001180 <__aeabi_fsub+0x214>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4662      	mov	r2, ip
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	015a      	lsls	r2, r3, #5
 8000fc0:	d400      	bmi.n	8000fc4 <__aeabi_fsub+0x58>
 8000fc2:	e0ac      	b.n	800111e <__aeabi_fsub+0x1b2>
 8000fc4:	019b      	lsls	r3, r3, #6
 8000fc6:	099e      	lsrs	r6, r3, #6
 8000fc8:	0030      	movs	r0, r6
 8000fca:	f002 f93f 	bl	800324c <__clzsi2>
 8000fce:	0033      	movs	r3, r6
 8000fd0:	3805      	subs	r0, #5
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	4285      	cmp	r5, r0
 8000fd6:	dc00      	bgt.n	8000fda <__aeabi_fsub+0x6e>
 8000fd8:	e0c6      	b.n	8001168 <__aeabi_fsub+0x1fc>
 8000fda:	4ab2      	ldr	r2, [pc, #712]	; (80012a4 <__aeabi_fsub+0x338>)
 8000fdc:	1a2d      	subs	r5, r5, r0
 8000fde:	4013      	ands	r3, r2
 8000fe0:	075a      	lsls	r2, r3, #29
 8000fe2:	d004      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d000      	beq.n	8000fee <__aeabi_fsub+0x82>
 8000fec:	3304      	adds	r3, #4
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_fsub+0x88>
 8000ff2:	e097      	b.n	8001124 <__aeabi_fsub+0x1b8>
 8000ff4:	1c6a      	adds	r2, r5, #1
 8000ff6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x90>
 8000ffa:	e084      	b.n	8001106 <__aeabi_fsub+0x19a>
 8000ffc:	019b      	lsls	r3, r3, #6
 8000ffe:	0a5e      	lsrs	r6, r3, #9
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	05d0      	lsls	r0, r2, #23
 8001004:	4330      	orrs	r0, r6
 8001006:	07e4      	lsls	r4, r4, #31
 8001008:	4320      	orrs	r0, r4
 800100a:	bc80      	pop	{r7}
 800100c:	46b8      	mov	r8, r7
 800100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001010:	1bea      	subs	r2, r5, r7
 8001012:	2a00      	cmp	r2, #0
 8001014:	dd41      	ble.n	800109a <__aeabi_fsub+0x12e>
 8001016:	2f00      	cmp	r7, #0
 8001018:	d06b      	beq.n	80010f2 <__aeabi_fsub+0x186>
 800101a:	2dff      	cmp	r5, #255	; 0xff
 800101c:	d100      	bne.n	8001020 <__aeabi_fsub+0xb4>
 800101e:	e097      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	04db      	lsls	r3, r3, #19
 8001024:	4318      	orrs	r0, r3
 8001026:	2a1b      	cmp	r2, #27
 8001028:	dc00      	bgt.n	800102c <__aeabi_fsub+0xc0>
 800102a:	e0cc      	b.n	80011c6 <__aeabi_fsub+0x25a>
 800102c:	2301      	movs	r3, #1
 800102e:	4463      	add	r3, ip
 8001030:	015a      	lsls	r2, r3, #5
 8001032:	d574      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 8001034:	3501      	adds	r5, #1
 8001036:	2dff      	cmp	r5, #255	; 0xff
 8001038:	d065      	beq.n	8001106 <__aeabi_fsub+0x19a>
 800103a:	2201      	movs	r2, #1
 800103c:	499a      	ldr	r1, [pc, #616]	; (80012a8 <__aeabi_fsub+0x33c>)
 800103e:	401a      	ands	r2, r3
 8001040:	085b      	lsrs	r3, r3, #1
 8001042:	400b      	ands	r3, r1
 8001044:	4313      	orrs	r3, r2
 8001046:	e7cb      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001048:	2800      	cmp	r0, #0
 800104a:	d01f      	beq.n	800108c <__aeabi_fsub+0x120>
 800104c:	428c      	cmp	r4, r1
 800104e:	d022      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001050:	002a      	movs	r2, r5
 8001052:	3aff      	subs	r2, #255	; 0xff
 8001054:	2a00      	cmp	r2, #0
 8001056:	d035      	beq.n	80010c4 <__aeabi_fsub+0x158>
 8001058:	1b7a      	subs	r2, r7, r5
 800105a:	2d00      	cmp	r5, #0
 800105c:	d000      	beq.n	8001060 <__aeabi_fsub+0xf4>
 800105e:	e099      	b.n	8001194 <__aeabi_fsub+0x228>
 8001060:	4663      	mov	r3, ip
 8001062:	2b00      	cmp	r3, #0
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0xfc>
 8001066:	e0dd      	b.n	8001224 <__aeabi_fsub+0x2b8>
 8001068:	1e53      	subs	r3, r2, #1
 800106a:	2a01      	cmp	r2, #1
 800106c:	d100      	bne.n	8001070 <__aeabi_fsub+0x104>
 800106e:	e105      	b.n	800127c <__aeabi_fsub+0x310>
 8001070:	2aff      	cmp	r2, #255	; 0xff
 8001072:	d06b      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001074:	001a      	movs	r2, r3
 8001076:	e094      	b.n	80011a2 <__aeabi_fsub+0x236>
 8001078:	2800      	cmp	r0, #0
 800107a:	d073      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 800107c:	1e51      	subs	r1, r2, #1
 800107e:	2a01      	cmp	r2, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x118>
 8001082:	e0df      	b.n	8001244 <__aeabi_fsub+0x2d8>
 8001084:	2aff      	cmp	r2, #255	; 0xff
 8001086:	d063      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001088:	000a      	movs	r2, r1
 800108a:	e792      	b.n	8000fb2 <__aeabi_fsub+0x46>
 800108c:	2201      	movs	r2, #1
 800108e:	4051      	eors	r1, r2
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x12a>
 8001094:	e782      	b.n	8000f9c <__aeabi_fsub+0x30>
 8001096:	002a      	movs	r2, r5
 8001098:	3aff      	subs	r2, #255	; 0xff
 800109a:	2a00      	cmp	r2, #0
 800109c:	d036      	beq.n	800110c <__aeabi_fsub+0x1a0>
 800109e:	1b7a      	subs	r2, r7, r5
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_fsub+0x13a>
 80010a4:	e0aa      	b.n	80011fc <__aeabi_fsub+0x290>
 80010a6:	2fff      	cmp	r7, #255	; 0xff
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x140>
 80010aa:	e0da      	b.n	8001262 <__aeabi_fsub+0x2f6>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4661      	mov	r1, ip
 80010b0:	04db      	lsls	r3, r3, #19
 80010b2:	4319      	orrs	r1, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	2a1b      	cmp	r2, #27
 80010b8:	dc00      	bgt.n	80010bc <__aeabi_fsub+0x150>
 80010ba:	e0d4      	b.n	8001266 <__aeabi_fsub+0x2fa>
 80010bc:	2301      	movs	r3, #1
 80010be:	003d      	movs	r5, r7
 80010c0:	181b      	adds	r3, r3, r0
 80010c2:	e7b5      	b.n	8001030 <__aeabi_fsub+0xc4>
 80010c4:	27fe      	movs	r7, #254	; 0xfe
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4217      	tst	r7, r2
 80010ca:	d171      	bne.n	80011b0 <__aeabi_fsub+0x244>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	d000      	beq.n	80010d2 <__aeabi_fsub+0x166>
 80010d0:	e09e      	b.n	8001210 <__aeabi_fsub+0x2a4>
 80010d2:	4663      	mov	r3, ip
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_fsub+0x16e>
 80010d8:	e0d5      	b.n	8001286 <__aeabi_fsub+0x31a>
 80010da:	2200      	movs	r2, #0
 80010dc:	2800      	cmp	r0, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x176>
 80010e0:	e78f      	b.n	8001002 <__aeabi_fsub+0x96>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	015e      	lsls	r6, r3, #5
 80010e6:	d400      	bmi.n	80010ea <__aeabi_fsub+0x17e>
 80010e8:	e0d6      	b.n	8001298 <__aeabi_fsub+0x32c>
 80010ea:	4663      	mov	r3, ip
 80010ec:	000c      	movs	r4, r1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e776      	b.n	8000fe0 <__aeabi_fsub+0x74>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d036      	beq.n	8001164 <__aeabi_fsub+0x1f8>
 80010f6:	1e51      	subs	r1, r2, #1
 80010f8:	2a01      	cmp	r2, #1
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x192>
 80010fc:	e09a      	b.n	8001234 <__aeabi_fsub+0x2c8>
 80010fe:	2aff      	cmp	r2, #255	; 0xff
 8001100:	d026      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001102:	000a      	movs	r2, r1
 8001104:	e78f      	b.n	8001026 <__aeabi_fsub+0xba>
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2600      	movs	r6, #0
 800110a:	e77a      	b.n	8001002 <__aeabi_fsub+0x96>
 800110c:	27fe      	movs	r7, #254	; 0xfe
 800110e:	1c6a      	adds	r2, r5, #1
 8001110:	4217      	tst	r7, r2
 8001112:	d062      	beq.n	80011da <__aeabi_fsub+0x26e>
 8001114:	2aff      	cmp	r2, #255	; 0xff
 8001116:	d0f6      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001118:	0015      	movs	r5, r2
 800111a:	4460      	add	r0, ip
 800111c:	0843      	lsrs	r3, r0, #1
 800111e:	075a      	lsls	r2, r3, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_fsub+0x1b8>
 8001122:	e75f      	b.n	8000fe4 <__aeabi_fsub+0x78>
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	2dff      	cmp	r5, #255	; 0xff
 8001128:	d012      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800112a:	025b      	lsls	r3, r3, #9
 800112c:	0a5e      	lsrs	r6, r3, #9
 800112e:	b2ea      	uxtb	r2, r5
 8001130:	e767      	b.n	8001002 <__aeabi_fsub+0x96>
 8001132:	4662      	mov	r2, ip
 8001134:	2a00      	cmp	r2, #0
 8001136:	d100      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001138:	e093      	b.n	8001262 <__aeabi_fsub+0x2f6>
 800113a:	2800      	cmp	r0, #0
 800113c:	d008      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	03d2      	lsls	r2, r2, #15
 8001142:	4213      	tst	r3, r2
 8001144:	d004      	beq.n	8001150 <__aeabi_fsub+0x1e4>
 8001146:	4640      	mov	r0, r8
 8001148:	4210      	tst	r0, r2
 800114a:	d101      	bne.n	8001150 <__aeabi_fsub+0x1e4>
 800114c:	000c      	movs	r4, r1
 800114e:	4643      	mov	r3, r8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0d8      	beq.n	8001106 <__aeabi_fsub+0x19a>
 8001154:	2680      	movs	r6, #128	; 0x80
 8001156:	03f6      	lsls	r6, r6, #15
 8001158:	431e      	orrs	r6, r3
 800115a:	0276      	lsls	r6, r6, #9
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	0a76      	lsrs	r6, r6, #9
 8001160:	e74f      	b.n	8001002 <__aeabi_fsub+0x96>
 8001162:	4643      	mov	r3, r8
 8001164:	0015      	movs	r5, r2
 8001166:	e7de      	b.n	8001126 <__aeabi_fsub+0x1ba>
 8001168:	2220      	movs	r2, #32
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	3001      	adds	r0, #1
 800116e:	1a12      	subs	r2, r2, r0
 8001170:	0019      	movs	r1, r3
 8001172:	4093      	lsls	r3, r2
 8001174:	40c1      	lsrs	r1, r0
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	2500      	movs	r5, #0
 800117c:	430b      	orrs	r3, r1
 800117e:	e72f      	b.n	8000fe0 <__aeabi_fsub+0x74>
 8001180:	2320      	movs	r3, #32
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	0001      	movs	r1, r0
 8001186:	4098      	lsls	r0, r3
 8001188:	0003      	movs	r3, r0
 800118a:	40d1      	lsrs	r1, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e712      	b.n	8000fba <__aeabi_fsub+0x4e>
 8001194:	2fff      	cmp	r7, #255	; 0xff
 8001196:	d0d9      	beq.n	800114c <__aeabi_fsub+0x1e0>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4664      	mov	r4, ip
 800119c:	04db      	lsls	r3, r3, #19
 800119e:	431c      	orrs	r4, r3
 80011a0:	46a4      	mov	ip, r4
 80011a2:	2a1b      	cmp	r2, #27
 80011a4:	dd52      	ble.n	800124c <__aeabi_fsub+0x2e0>
 80011a6:	2301      	movs	r3, #1
 80011a8:	000c      	movs	r4, r1
 80011aa:	003d      	movs	r5, r7
 80011ac:	1ac3      	subs	r3, r0, r3
 80011ae:	e706      	b.n	8000fbe <__aeabi_fsub+0x52>
 80011b0:	4663      	mov	r3, ip
 80011b2:	1a1e      	subs	r6, r3, r0
 80011b4:	0173      	lsls	r3, r6, #5
 80011b6:	d439      	bmi.n	800122c <__aeabi_fsub+0x2c0>
 80011b8:	2e00      	cmp	r6, #0
 80011ba:	d000      	beq.n	80011be <__aeabi_fsub+0x252>
 80011bc:	e704      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	e71d      	b.n	8001002 <__aeabi_fsub+0x96>
 80011c6:	2320      	movs	r3, #32
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	0001      	movs	r1, r0
 80011cc:	4098      	lsls	r0, r3
 80011ce:	0003      	movs	r3, r0
 80011d0:	40d1      	lsrs	r1, r2
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	4193      	sbcs	r3, r2
 80011d6:	430b      	orrs	r3, r1
 80011d8:	e729      	b.n	800102e <__aeabi_fsub+0xc2>
 80011da:	2d00      	cmp	r5, #0
 80011dc:	d1a9      	bne.n	8001132 <__aeabi_fsub+0x1c6>
 80011de:	4663      	mov	r3, ip
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d056      	beq.n	8001292 <__aeabi_fsub+0x326>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x280>
 80011ea:	e70a      	b.n	8001002 <__aeabi_fsub+0x96>
 80011ec:	0003      	movs	r3, r0
 80011ee:	4463      	add	r3, ip
 80011f0:	015a      	lsls	r2, r3, #5
 80011f2:	d594      	bpl.n	800111e <__aeabi_fsub+0x1b2>
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <__aeabi_fsub+0x338>)
 80011f6:	3501      	adds	r5, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	e790      	b.n	800111e <__aeabi_fsub+0x1b2>
 80011fc:	4663      	mov	r3, ip
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0af      	beq.n	8001162 <__aeabi_fsub+0x1f6>
 8001202:	1e53      	subs	r3, r2, #1
 8001204:	2a01      	cmp	r2, #1
 8001206:	d015      	beq.n	8001234 <__aeabi_fsub+0x2c8>
 8001208:	2aff      	cmp	r2, #255	; 0xff
 800120a:	d02a      	beq.n	8001262 <__aeabi_fsub+0x2f6>
 800120c:	001a      	movs	r2, r3
 800120e:	e752      	b.n	80010b6 <__aeabi_fsub+0x14a>
 8001210:	4662      	mov	r2, ip
 8001212:	2a00      	cmp	r2, #0
 8001214:	d191      	bne.n	800113a <__aeabi_fsub+0x1ce>
 8001216:	2800      	cmp	r0, #0
 8001218:	d198      	bne.n	800114c <__aeabi_fsub+0x1e0>
 800121a:	2680      	movs	r6, #128	; 0x80
 800121c:	2400      	movs	r4, #0
 800121e:	22ff      	movs	r2, #255	; 0xff
 8001220:	03f6      	lsls	r6, r6, #15
 8001222:	e6ee      	b.n	8001002 <__aeabi_fsub+0x96>
 8001224:	000c      	movs	r4, r1
 8001226:	4643      	mov	r3, r8
 8001228:	0015      	movs	r5, r2
 800122a:	e77c      	b.n	8001126 <__aeabi_fsub+0x1ba>
 800122c:	4663      	mov	r3, ip
 800122e:	000c      	movs	r4, r1
 8001230:	1ac6      	subs	r6, r0, r3
 8001232:	e6c9      	b.n	8000fc8 <__aeabi_fsub+0x5c>
 8001234:	0003      	movs	r3, r0
 8001236:	4463      	add	r3, ip
 8001238:	2501      	movs	r5, #1
 800123a:	015a      	lsls	r2, r3, #5
 800123c:	d400      	bmi.n	8001240 <__aeabi_fsub+0x2d4>
 800123e:	e76e      	b.n	800111e <__aeabi_fsub+0x1b2>
 8001240:	2502      	movs	r5, #2
 8001242:	e6fa      	b.n	800103a <__aeabi_fsub+0xce>
 8001244:	4663      	mov	r3, ip
 8001246:	2501      	movs	r5, #1
 8001248:	1a1b      	subs	r3, r3, r0
 800124a:	e6b8      	b.n	8000fbe <__aeabi_fsub+0x52>
 800124c:	4664      	mov	r4, ip
 800124e:	2320      	movs	r3, #32
 8001250:	40d4      	lsrs	r4, r2
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	4662      	mov	r2, ip
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	4193      	sbcs	r3, r2
 800125e:	4323      	orrs	r3, r4
 8001260:	e7a2      	b.n	80011a8 <__aeabi_fsub+0x23c>
 8001262:	4643      	mov	r3, r8
 8001264:	e774      	b.n	8001150 <__aeabi_fsub+0x1e4>
 8001266:	4661      	mov	r1, ip
 8001268:	2320      	movs	r3, #32
 800126a:	40d1      	lsrs	r1, r2
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	4662      	mov	r2, ip
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	4193      	sbcs	r3, r2
 8001278:	430b      	orrs	r3, r1
 800127a:	e720      	b.n	80010be <__aeabi_fsub+0x152>
 800127c:	4663      	mov	r3, ip
 800127e:	000c      	movs	r4, r1
 8001280:	2501      	movs	r5, #1
 8001282:	1ac3      	subs	r3, r0, r3
 8001284:	e69b      	b.n	8000fbe <__aeabi_fsub+0x52>
 8001286:	2800      	cmp	r0, #0
 8001288:	d099      	beq.n	80011be <__aeabi_fsub+0x252>
 800128a:	000c      	movs	r4, r1
 800128c:	4646      	mov	r6, r8
 800128e:	2200      	movs	r2, #0
 8001290:	e6b7      	b.n	8001002 <__aeabi_fsub+0x96>
 8001292:	4646      	mov	r6, r8
 8001294:	2200      	movs	r2, #0
 8001296:	e6b4      	b.n	8001002 <__aeabi_fsub+0x96>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <__aeabi_fsub+0x332>
 800129c:	e73f      	b.n	800111e <__aeabi_fsub+0x1b2>
 800129e:	2400      	movs	r4, #0
 80012a0:	2600      	movs	r6, #0
 80012a2:	e6ae      	b.n	8001002 <__aeabi_fsub+0x96>
 80012a4:	fbffffff 	.word	0xfbffffff
 80012a8:	7dffffff 	.word	0x7dffffff

080012ac <__aeabi_f2iz>:
 80012ac:	0241      	lsls	r1, r0, #9
 80012ae:	0042      	lsls	r2, r0, #1
 80012b0:	0fc3      	lsrs	r3, r0, #31
 80012b2:	0a49      	lsrs	r1, r1, #9
 80012b4:	2000      	movs	r0, #0
 80012b6:	0e12      	lsrs	r2, r2, #24
 80012b8:	2a7e      	cmp	r2, #126	; 0x7e
 80012ba:	dd03      	ble.n	80012c4 <__aeabi_f2iz+0x18>
 80012bc:	2a9d      	cmp	r2, #157	; 0x9d
 80012be:	dd02      	ble.n	80012c6 <__aeabi_f2iz+0x1a>
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <__aeabi_f2iz+0x3c>)
 80012c2:	1898      	adds	r0, r3, r2
 80012c4:	4770      	bx	lr
 80012c6:	2080      	movs	r0, #128	; 0x80
 80012c8:	0400      	lsls	r0, r0, #16
 80012ca:	4301      	orrs	r1, r0
 80012cc:	2a95      	cmp	r2, #149	; 0x95
 80012ce:	dc07      	bgt.n	80012e0 <__aeabi_f2iz+0x34>
 80012d0:	2096      	movs	r0, #150	; 0x96
 80012d2:	1a82      	subs	r2, r0, r2
 80012d4:	40d1      	lsrs	r1, r2
 80012d6:	4248      	negs	r0, r1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <__aeabi_f2iz+0x18>
 80012dc:	0008      	movs	r0, r1
 80012de:	e7f1      	b.n	80012c4 <__aeabi_f2iz+0x18>
 80012e0:	3a96      	subs	r2, #150	; 0x96
 80012e2:	4091      	lsls	r1, r2
 80012e4:	e7f7      	b.n	80012d6 <__aeabi_f2iz+0x2a>
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	7fffffff 	.word	0x7fffffff

080012ec <__aeabi_i2f>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d013      	beq.n	800131a <__aeabi_i2f+0x2e>
 80012f2:	17c3      	asrs	r3, r0, #31
 80012f4:	18c5      	adds	r5, r0, r3
 80012f6:	405d      	eors	r5, r3
 80012f8:	0fc4      	lsrs	r4, r0, #31
 80012fa:	0028      	movs	r0, r5
 80012fc:	f001 ffa6 	bl	800324c <__clzsi2>
 8001300:	239e      	movs	r3, #158	; 0x9e
 8001302:	0001      	movs	r1, r0
 8001304:	1a1b      	subs	r3, r3, r0
 8001306:	2b96      	cmp	r3, #150	; 0x96
 8001308:	dc0f      	bgt.n	800132a <__aeabi_i2f+0x3e>
 800130a:	2808      	cmp	r0, #8
 800130c:	d031      	beq.n	8001372 <__aeabi_i2f+0x86>
 800130e:	3908      	subs	r1, #8
 8001310:	408d      	lsls	r5, r1
 8001312:	026d      	lsls	r5, r5, #9
 8001314:	0a6d      	lsrs	r5, r5, #9
 8001316:	b2d8      	uxtb	r0, r3
 8001318:	e002      	b.n	8001320 <__aeabi_i2f+0x34>
 800131a:	2400      	movs	r4, #0
 800131c:	2000      	movs	r0, #0
 800131e:	2500      	movs	r5, #0
 8001320:	05c0      	lsls	r0, r0, #23
 8001322:	4328      	orrs	r0, r5
 8001324:	07e4      	lsls	r4, r4, #31
 8001326:	4320      	orrs	r0, r4
 8001328:	bd70      	pop	{r4, r5, r6, pc}
 800132a:	2b99      	cmp	r3, #153	; 0x99
 800132c:	dd0c      	ble.n	8001348 <__aeabi_i2f+0x5c>
 800132e:	2205      	movs	r2, #5
 8001330:	1a12      	subs	r2, r2, r0
 8001332:	0028      	movs	r0, r5
 8001334:	40d0      	lsrs	r0, r2
 8001336:	0002      	movs	r2, r0
 8001338:	0008      	movs	r0, r1
 800133a:	301b      	adds	r0, #27
 800133c:	4085      	lsls	r5, r0
 800133e:	0028      	movs	r0, r5
 8001340:	1e45      	subs	r5, r0, #1
 8001342:	41a8      	sbcs	r0, r5
 8001344:	4302      	orrs	r2, r0
 8001346:	0015      	movs	r5, r2
 8001348:	2905      	cmp	r1, #5
 800134a:	dc16      	bgt.n	800137a <__aeabi_i2f+0x8e>
 800134c:	002a      	movs	r2, r5
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <__aeabi_i2f+0xa0>)
 8001350:	4002      	ands	r2, r0
 8001352:	076e      	lsls	r6, r5, #29
 8001354:	d009      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001356:	260f      	movs	r6, #15
 8001358:	4035      	ands	r5, r6
 800135a:	2d04      	cmp	r5, #4
 800135c:	d005      	beq.n	800136a <__aeabi_i2f+0x7e>
 800135e:	3204      	adds	r2, #4
 8001360:	0155      	lsls	r5, r2, #5
 8001362:	d502      	bpl.n	800136a <__aeabi_i2f+0x7e>
 8001364:	239f      	movs	r3, #159	; 0x9f
 8001366:	4002      	ands	r2, r0
 8001368:	1a5b      	subs	r3, r3, r1
 800136a:	0192      	lsls	r2, r2, #6
 800136c:	0a55      	lsrs	r5, r2, #9
 800136e:	b2d8      	uxtb	r0, r3
 8001370:	e7d6      	b.n	8001320 <__aeabi_i2f+0x34>
 8001372:	026d      	lsls	r5, r5, #9
 8001374:	2096      	movs	r0, #150	; 0x96
 8001376:	0a6d      	lsrs	r5, r5, #9
 8001378:	e7d2      	b.n	8001320 <__aeabi_i2f+0x34>
 800137a:	1f4a      	subs	r2, r1, #5
 800137c:	4095      	lsls	r5, r2
 800137e:	002a      	movs	r2, r5
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <__aeabi_i2f+0xa0>)
 8001382:	4002      	ands	r2, r0
 8001384:	076e      	lsls	r6, r5, #29
 8001386:	d0f0      	beq.n	800136a <__aeabi_i2f+0x7e>
 8001388:	e7e5      	b.n	8001356 <__aeabi_i2f+0x6a>
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	fbffffff 	.word	0xfbffffff

08001390 <__aeabi_ui2f>:
 8001390:	b570      	push	{r4, r5, r6, lr}
 8001392:	1e04      	subs	r4, r0, #0
 8001394:	d00e      	beq.n	80013b4 <__aeabi_ui2f+0x24>
 8001396:	f001 ff59 	bl	800324c <__clzsi2>
 800139a:	239e      	movs	r3, #158	; 0x9e
 800139c:	0001      	movs	r1, r0
 800139e:	1a1b      	subs	r3, r3, r0
 80013a0:	2b96      	cmp	r3, #150	; 0x96
 80013a2:	dc0c      	bgt.n	80013be <__aeabi_ui2f+0x2e>
 80013a4:	2808      	cmp	r0, #8
 80013a6:	d02c      	beq.n	8001402 <__aeabi_ui2f+0x72>
 80013a8:	3908      	subs	r1, #8
 80013aa:	408c      	lsls	r4, r1
 80013ac:	0264      	lsls	r4, r4, #9
 80013ae:	0a64      	lsrs	r4, r4, #9
 80013b0:	b2d8      	uxtb	r0, r3
 80013b2:	e001      	b.n	80013b8 <__aeabi_ui2f+0x28>
 80013b4:	2000      	movs	r0, #0
 80013b6:	2400      	movs	r4, #0
 80013b8:	05c0      	lsls	r0, r0, #23
 80013ba:	4320      	orrs	r0, r4
 80013bc:	bd70      	pop	{r4, r5, r6, pc}
 80013be:	2b99      	cmp	r3, #153	; 0x99
 80013c0:	dd0a      	ble.n	80013d8 <__aeabi_ui2f+0x48>
 80013c2:	0002      	movs	r2, r0
 80013c4:	0020      	movs	r0, r4
 80013c6:	321b      	adds	r2, #27
 80013c8:	4090      	lsls	r0, r2
 80013ca:	0002      	movs	r2, r0
 80013cc:	1e50      	subs	r0, r2, #1
 80013ce:	4182      	sbcs	r2, r0
 80013d0:	2005      	movs	r0, #5
 80013d2:	1a40      	subs	r0, r0, r1
 80013d4:	40c4      	lsrs	r4, r0
 80013d6:	4314      	orrs	r4, r2
 80013d8:	2905      	cmp	r1, #5
 80013da:	dc16      	bgt.n	800140a <__aeabi_ui2f+0x7a>
 80013dc:	0022      	movs	r2, r4
 80013de:	480f      	ldr	r0, [pc, #60]	; (800141c <__aeabi_ui2f+0x8c>)
 80013e0:	4002      	ands	r2, r0
 80013e2:	0765      	lsls	r5, r4, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013e6:	250f      	movs	r5, #15
 80013e8:	402c      	ands	r4, r5
 80013ea:	2c04      	cmp	r4, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 80013ee:	3204      	adds	r2, #4
 80013f0:	0154      	lsls	r4, r2, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_ui2f+0x6a>
 80013f4:	239f      	movs	r3, #159	; 0x9f
 80013f6:	4002      	ands	r2, r0
 80013f8:	1a5b      	subs	r3, r3, r1
 80013fa:	0192      	lsls	r2, r2, #6
 80013fc:	0a54      	lsrs	r4, r2, #9
 80013fe:	b2d8      	uxtb	r0, r3
 8001400:	e7da      	b.n	80013b8 <__aeabi_ui2f+0x28>
 8001402:	0264      	lsls	r4, r4, #9
 8001404:	2096      	movs	r0, #150	; 0x96
 8001406:	0a64      	lsrs	r4, r4, #9
 8001408:	e7d6      	b.n	80013b8 <__aeabi_ui2f+0x28>
 800140a:	1f4a      	subs	r2, r1, #5
 800140c:	4094      	lsls	r4, r2
 800140e:	0022      	movs	r2, r4
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <__aeabi_ui2f+0x8c>)
 8001412:	4002      	ands	r2, r0
 8001414:	0765      	lsls	r5, r4, #29
 8001416:	d0f0      	beq.n	80013fa <__aeabi_ui2f+0x6a>
 8001418:	e7e5      	b.n	80013e6 <__aeabi_ui2f+0x56>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_dadd>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	464f      	mov	r7, r9
 8001424:	4646      	mov	r6, r8
 8001426:	46d6      	mov	lr, sl
 8001428:	0004      	movs	r4, r0
 800142a:	b5c0      	push	{r6, r7, lr}
 800142c:	001f      	movs	r7, r3
 800142e:	030b      	lsls	r3, r1, #12
 8001430:	0010      	movs	r0, r2
 8001432:	004e      	lsls	r6, r1, #1
 8001434:	0a5b      	lsrs	r3, r3, #9
 8001436:	0fcd      	lsrs	r5, r1, #31
 8001438:	0f61      	lsrs	r1, r4, #29
 800143a:	007a      	lsls	r2, r7, #1
 800143c:	4319      	orrs	r1, r3
 800143e:	00e3      	lsls	r3, r4, #3
 8001440:	033c      	lsls	r4, r7, #12
 8001442:	0fff      	lsrs	r7, r7, #31
 8001444:	46bc      	mov	ip, r7
 8001446:	0a64      	lsrs	r4, r4, #9
 8001448:	0f47      	lsrs	r7, r0, #29
 800144a:	4327      	orrs	r7, r4
 800144c:	0d76      	lsrs	r6, r6, #21
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	00c0      	lsls	r0, r0, #3
 8001452:	46b9      	mov	r9, r7
 8001454:	4680      	mov	r8, r0
 8001456:	1ab7      	subs	r7, r6, r2
 8001458:	4565      	cmp	r5, ip
 800145a:	d100      	bne.n	800145e <__aeabi_dadd+0x3e>
 800145c:	e09b      	b.n	8001596 <__aeabi_dadd+0x176>
 800145e:	2f00      	cmp	r7, #0
 8001460:	dc00      	bgt.n	8001464 <__aeabi_dadd+0x44>
 8001462:	e084      	b.n	800156e <__aeabi_dadd+0x14e>
 8001464:	2a00      	cmp	r2, #0
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x4a>
 8001468:	e0be      	b.n	80015e8 <__aeabi_dadd+0x1c8>
 800146a:	4ac8      	ldr	r2, [pc, #800]	; (800178c <__aeabi_dadd+0x36c>)
 800146c:	4296      	cmp	r6, r2
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x52>
 8001470:	e124      	b.n	80016bc <__aeabi_dadd+0x29c>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	464c      	mov	r4, r9
 8001476:	0412      	lsls	r2, r2, #16
 8001478:	4314      	orrs	r4, r2
 800147a:	46a1      	mov	r9, r4
 800147c:	2f38      	cmp	r7, #56	; 0x38
 800147e:	dd00      	ble.n	8001482 <__aeabi_dadd+0x62>
 8001480:	e167      	b.n	8001752 <__aeabi_dadd+0x332>
 8001482:	2f1f      	cmp	r7, #31
 8001484:	dd00      	ble.n	8001488 <__aeabi_dadd+0x68>
 8001486:	e1d6      	b.n	8001836 <__aeabi_dadd+0x416>
 8001488:	2220      	movs	r2, #32
 800148a:	464c      	mov	r4, r9
 800148c:	1bd2      	subs	r2, r2, r7
 800148e:	4094      	lsls	r4, r2
 8001490:	46a2      	mov	sl, r4
 8001492:	4644      	mov	r4, r8
 8001494:	40fc      	lsrs	r4, r7
 8001496:	0020      	movs	r0, r4
 8001498:	4654      	mov	r4, sl
 800149a:	4304      	orrs	r4, r0
 800149c:	4640      	mov	r0, r8
 800149e:	4090      	lsls	r0, r2
 80014a0:	1e42      	subs	r2, r0, #1
 80014a2:	4190      	sbcs	r0, r2
 80014a4:	464a      	mov	r2, r9
 80014a6:	40fa      	lsrs	r2, r7
 80014a8:	4304      	orrs	r4, r0
 80014aa:	1a89      	subs	r1, r1, r2
 80014ac:	1b1c      	subs	r4, r3, r4
 80014ae:	42a3      	cmp	r3, r4
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	4252      	negs	r2, r2
 80014b4:	1a8b      	subs	r3, r1, r2
 80014b6:	469a      	mov	sl, r3
 80014b8:	4653      	mov	r3, sl
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	d400      	bmi.n	80014c0 <__aeabi_dadd+0xa0>
 80014be:	e0d4      	b.n	800166a <__aeabi_dadd+0x24a>
 80014c0:	4653      	mov	r3, sl
 80014c2:	025a      	lsls	r2, r3, #9
 80014c4:	0a53      	lsrs	r3, r2, #9
 80014c6:	469a      	mov	sl, r3
 80014c8:	4653      	mov	r3, sl
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0xb0>
 80014ce:	e104      	b.n	80016da <__aeabi_dadd+0x2ba>
 80014d0:	4650      	mov	r0, sl
 80014d2:	f001 febb 	bl	800324c <__clzsi2>
 80014d6:	0003      	movs	r3, r0
 80014d8:	3b08      	subs	r3, #8
 80014da:	2220      	movs	r2, #32
 80014dc:	0020      	movs	r0, r4
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	4651      	mov	r1, sl
 80014e2:	40d0      	lsrs	r0, r2
 80014e4:	4099      	lsls	r1, r3
 80014e6:	0002      	movs	r2, r0
 80014e8:	409c      	lsls	r4, r3
 80014ea:	430a      	orrs	r2, r1
 80014ec:	42b3      	cmp	r3, r6
 80014ee:	da00      	bge.n	80014f2 <__aeabi_dadd+0xd2>
 80014f0:	e102      	b.n	80016f8 <__aeabi_dadd+0x2d8>
 80014f2:	1b9b      	subs	r3, r3, r6
 80014f4:	1c59      	adds	r1, r3, #1
 80014f6:	291f      	cmp	r1, #31
 80014f8:	dd00      	ble.n	80014fc <__aeabi_dadd+0xdc>
 80014fa:	e0a7      	b.n	800164c <__aeabi_dadd+0x22c>
 80014fc:	2320      	movs	r3, #32
 80014fe:	0010      	movs	r0, r2
 8001500:	0026      	movs	r6, r4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	409c      	lsls	r4, r3
 8001506:	4098      	lsls	r0, r3
 8001508:	40ce      	lsrs	r6, r1
 800150a:	40ca      	lsrs	r2, r1
 800150c:	1e63      	subs	r3, r4, #1
 800150e:	419c      	sbcs	r4, r3
 8001510:	4330      	orrs	r0, r6
 8001512:	4692      	mov	sl, r2
 8001514:	2600      	movs	r6, #0
 8001516:	4304      	orrs	r4, r0
 8001518:	0763      	lsls	r3, r4, #29
 800151a:	d009      	beq.n	8001530 <__aeabi_dadd+0x110>
 800151c:	230f      	movs	r3, #15
 800151e:	4023      	ands	r3, r4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <__aeabi_dadd+0x110>
 8001524:	1d23      	adds	r3, r4, #4
 8001526:	42a3      	cmp	r3, r4
 8001528:	41a4      	sbcs	r4, r4
 800152a:	4264      	negs	r4, r4
 800152c:	44a2      	add	sl, r4
 800152e:	001c      	movs	r4, r3
 8001530:	4653      	mov	r3, sl
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0x118>
 8001536:	e09b      	b.n	8001670 <__aeabi_dadd+0x250>
 8001538:	4b94      	ldr	r3, [pc, #592]	; (800178c <__aeabi_dadd+0x36c>)
 800153a:	3601      	adds	r6, #1
 800153c:	429e      	cmp	r6, r3
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x122>
 8001540:	e0b8      	b.n	80016b4 <__aeabi_dadd+0x294>
 8001542:	4653      	mov	r3, sl
 8001544:	4992      	ldr	r1, [pc, #584]	; (8001790 <__aeabi_dadd+0x370>)
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	400b      	ands	r3, r1
 800154a:	0019      	movs	r1, r3
 800154c:	075b      	lsls	r3, r3, #29
 800154e:	4323      	orrs	r3, r4
 8001550:	0572      	lsls	r2, r6, #21
 8001552:	024c      	lsls	r4, r1, #9
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	0d52      	lsrs	r2, r2, #21
 8001558:	0512      	lsls	r2, r2, #20
 800155a:	07ed      	lsls	r5, r5, #31
 800155c:	4322      	orrs	r2, r4
 800155e:	432a      	orrs	r2, r5
 8001560:	0018      	movs	r0, r3
 8001562:	0011      	movs	r1, r2
 8001564:	bce0      	pop	{r5, r6, r7}
 8001566:	46ba      	mov	sl, r7
 8001568:	46b1      	mov	r9, r6
 800156a:	46a8      	mov	r8, r5
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	2f00      	cmp	r7, #0
 8001570:	d048      	beq.n	8001604 <__aeabi_dadd+0x1e4>
 8001572:	1b97      	subs	r7, r2, r6
 8001574:	2e00      	cmp	r6, #0
 8001576:	d000      	beq.n	800157a <__aeabi_dadd+0x15a>
 8001578:	e10e      	b.n	8001798 <__aeabi_dadd+0x378>
 800157a:	000c      	movs	r4, r1
 800157c:	431c      	orrs	r4, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dadd+0x162>
 8001580:	e1b7      	b.n	80018f2 <__aeabi_dadd+0x4d2>
 8001582:	1e7c      	subs	r4, r7, #1
 8001584:	2f01      	cmp	r7, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x16a>
 8001588:	e226      	b.n	80019d8 <__aeabi_dadd+0x5b8>
 800158a:	4d80      	ldr	r5, [pc, #512]	; (800178c <__aeabi_dadd+0x36c>)
 800158c:	42af      	cmp	r7, r5
 800158e:	d100      	bne.n	8001592 <__aeabi_dadd+0x172>
 8001590:	e1d5      	b.n	800193e <__aeabi_dadd+0x51e>
 8001592:	0027      	movs	r7, r4
 8001594:	e107      	b.n	80017a6 <__aeabi_dadd+0x386>
 8001596:	2f00      	cmp	r7, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x17c>
 800159a:	e0b2      	b.n	8001702 <__aeabi_dadd+0x2e2>
 800159c:	2a00      	cmp	r2, #0
 800159e:	d047      	beq.n	8001630 <__aeabi_dadd+0x210>
 80015a0:	4a7a      	ldr	r2, [pc, #488]	; (800178c <__aeabi_dadd+0x36c>)
 80015a2:	4296      	cmp	r6, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x188>
 80015a6:	e089      	b.n	80016bc <__aeabi_dadd+0x29c>
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	464c      	mov	r4, r9
 80015ac:	0412      	lsls	r2, r2, #16
 80015ae:	4314      	orrs	r4, r2
 80015b0:	46a1      	mov	r9, r4
 80015b2:	2f38      	cmp	r7, #56	; 0x38
 80015b4:	dc6b      	bgt.n	800168e <__aeabi_dadd+0x26e>
 80015b6:	2f1f      	cmp	r7, #31
 80015b8:	dc00      	bgt.n	80015bc <__aeabi_dadd+0x19c>
 80015ba:	e16e      	b.n	800189a <__aeabi_dadd+0x47a>
 80015bc:	003a      	movs	r2, r7
 80015be:	4648      	mov	r0, r9
 80015c0:	3a20      	subs	r2, #32
 80015c2:	40d0      	lsrs	r0, r2
 80015c4:	4684      	mov	ip, r0
 80015c6:	2f20      	cmp	r7, #32
 80015c8:	d007      	beq.n	80015da <__aeabi_dadd+0x1ba>
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	4648      	mov	r0, r9
 80015ce:	1bd2      	subs	r2, r2, r7
 80015d0:	4090      	lsls	r0, r2
 80015d2:	0002      	movs	r2, r0
 80015d4:	4640      	mov	r0, r8
 80015d6:	4310      	orrs	r0, r2
 80015d8:	4680      	mov	r8, r0
 80015da:	4640      	mov	r0, r8
 80015dc:	1e42      	subs	r2, r0, #1
 80015de:	4190      	sbcs	r0, r2
 80015e0:	4662      	mov	r2, ip
 80015e2:	0004      	movs	r4, r0
 80015e4:	4314      	orrs	r4, r2
 80015e6:	e057      	b.n	8001698 <__aeabi_dadd+0x278>
 80015e8:	464a      	mov	r2, r9
 80015ea:	4302      	orrs	r2, r0
 80015ec:	d100      	bne.n	80015f0 <__aeabi_dadd+0x1d0>
 80015ee:	e103      	b.n	80017f8 <__aeabi_dadd+0x3d8>
 80015f0:	1e7a      	subs	r2, r7, #1
 80015f2:	2f01      	cmp	r7, #1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dadd+0x1d8>
 80015f6:	e193      	b.n	8001920 <__aeabi_dadd+0x500>
 80015f8:	4c64      	ldr	r4, [pc, #400]	; (800178c <__aeabi_dadd+0x36c>)
 80015fa:	42a7      	cmp	r7, r4
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x1e0>
 80015fe:	e18a      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001600:	0017      	movs	r7, r2
 8001602:	e73b      	b.n	800147c <__aeabi_dadd+0x5c>
 8001604:	4c63      	ldr	r4, [pc, #396]	; (8001794 <__aeabi_dadd+0x374>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x1ee>
 800160c:	e0e0      	b.n	80017d0 <__aeabi_dadd+0x3b0>
 800160e:	000a      	movs	r2, r1
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x1f8>
 8001616:	e174      	b.n	8001902 <__aeabi_dadd+0x4e2>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x1fe>
 800161c:	e1d0      	b.n	80019c0 <__aeabi_dadd+0x5a0>
 800161e:	464a      	mov	r2, r9
 8001620:	4302      	orrs	r2, r0
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x206>
 8001624:	e1e3      	b.n	80019ee <__aeabi_dadd+0x5ce>
 8001626:	074a      	lsls	r2, r1, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c9      	lsrs	r1, r1, #3
 800162e:	e029      	b.n	8001684 <__aeabi_dadd+0x264>
 8001630:	464a      	mov	r2, r9
 8001632:	4302      	orrs	r2, r0
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x218>
 8001636:	e17d      	b.n	8001934 <__aeabi_dadd+0x514>
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	2f01      	cmp	r7, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_dadd+0x220>
 800163e:	e0e0      	b.n	8001802 <__aeabi_dadd+0x3e2>
 8001640:	4c52      	ldr	r4, [pc, #328]	; (800178c <__aeabi_dadd+0x36c>)
 8001642:	42a7      	cmp	r7, r4
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x228>
 8001646:	e166      	b.n	8001916 <__aeabi_dadd+0x4f6>
 8001648:	0017      	movs	r7, r2
 800164a:	e7b2      	b.n	80015b2 <__aeabi_dadd+0x192>
 800164c:	0010      	movs	r0, r2
 800164e:	3b1f      	subs	r3, #31
 8001650:	40d8      	lsrs	r0, r3
 8001652:	2920      	cmp	r1, #32
 8001654:	d003      	beq.n	800165e <__aeabi_dadd+0x23e>
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	1a5b      	subs	r3, r3, r1
 800165a:	409a      	lsls	r2, r3
 800165c:	4314      	orrs	r4, r2
 800165e:	1e63      	subs	r3, r4, #1
 8001660:	419c      	sbcs	r4, r3
 8001662:	2300      	movs	r3, #0
 8001664:	2600      	movs	r6, #0
 8001666:	469a      	mov	sl, r3
 8001668:	4304      	orrs	r4, r0
 800166a:	0763      	lsls	r3, r4, #29
 800166c:	d000      	beq.n	8001670 <__aeabi_dadd+0x250>
 800166e:	e755      	b.n	800151c <__aeabi_dadd+0xfc>
 8001670:	4652      	mov	r2, sl
 8001672:	08e3      	lsrs	r3, r4, #3
 8001674:	0752      	lsls	r2, r2, #29
 8001676:	4313      	orrs	r3, r2
 8001678:	4652      	mov	r2, sl
 800167a:	0037      	movs	r7, r6
 800167c:	08d1      	lsrs	r1, r2, #3
 800167e:	4a43      	ldr	r2, [pc, #268]	; (800178c <__aeabi_dadd+0x36c>)
 8001680:	4297      	cmp	r7, r2
 8001682:	d01f      	beq.n	80016c4 <__aeabi_dadd+0x2a4>
 8001684:	0309      	lsls	r1, r1, #12
 8001686:	057a      	lsls	r2, r7, #21
 8001688:	0b0c      	lsrs	r4, r1, #12
 800168a:	0d52      	lsrs	r2, r2, #21
 800168c:	e764      	b.n	8001558 <__aeabi_dadd+0x138>
 800168e:	4642      	mov	r2, r8
 8001690:	464c      	mov	r4, r9
 8001692:	4314      	orrs	r4, r2
 8001694:	1e62      	subs	r2, r4, #1
 8001696:	4194      	sbcs	r4, r2
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	429c      	cmp	r4, r3
 800169c:	4192      	sbcs	r2, r2
 800169e:	4252      	negs	r2, r2
 80016a0:	4692      	mov	sl, r2
 80016a2:	448a      	add	sl, r1
 80016a4:	4653      	mov	r3, sl
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	d5df      	bpl.n	800166a <__aeabi_dadd+0x24a>
 80016aa:	4b38      	ldr	r3, [pc, #224]	; (800178c <__aeabi_dadd+0x36c>)
 80016ac:	3601      	adds	r6, #1
 80016ae:	429e      	cmp	r6, r3
 80016b0:	d000      	beq.n	80016b4 <__aeabi_dadd+0x294>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dadd+0x3fc>
 80016b4:	0032      	movs	r2, r6
 80016b6:	2400      	movs	r4, #0
 80016b8:	2300      	movs	r3, #0
 80016ba:	e74d      	b.n	8001558 <__aeabi_dadd+0x138>
 80016bc:	074a      	lsls	r2, r1, #29
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	08c9      	lsrs	r1, r1, #3
 80016c4:	001a      	movs	r2, r3
 80016c6:	430a      	orrs	r2, r1
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x2ac>
 80016ca:	e200      	b.n	8001ace <__aeabi_dadd+0x6ae>
 80016cc:	2480      	movs	r4, #128	; 0x80
 80016ce:	0324      	lsls	r4, r4, #12
 80016d0:	430c      	orrs	r4, r1
 80016d2:	0324      	lsls	r4, r4, #12
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <__aeabi_dadd+0x36c>)
 80016d6:	0b24      	lsrs	r4, r4, #12
 80016d8:	e73e      	b.n	8001558 <__aeabi_dadd+0x138>
 80016da:	0020      	movs	r0, r4
 80016dc:	f001 fdb6 	bl	800324c <__clzsi2>
 80016e0:	0003      	movs	r3, r0
 80016e2:	3318      	adds	r3, #24
 80016e4:	2b1f      	cmp	r3, #31
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_dadd+0x2ca>
 80016e8:	e6f7      	b.n	80014da <__aeabi_dadd+0xba>
 80016ea:	0022      	movs	r2, r4
 80016ec:	3808      	subs	r0, #8
 80016ee:	4082      	lsls	r2, r0
 80016f0:	2400      	movs	r4, #0
 80016f2:	42b3      	cmp	r3, r6
 80016f4:	db00      	blt.n	80016f8 <__aeabi_dadd+0x2d8>
 80016f6:	e6fc      	b.n	80014f2 <__aeabi_dadd+0xd2>
 80016f8:	1af6      	subs	r6, r6, r3
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__aeabi_dadd+0x370>)
 80016fc:	401a      	ands	r2, r3
 80016fe:	4692      	mov	sl, r2
 8001700:	e70a      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001702:	2f00      	cmp	r7, #0
 8001704:	d02b      	beq.n	800175e <__aeabi_dadd+0x33e>
 8001706:	1b97      	subs	r7, r2, r6
 8001708:	2e00      	cmp	r6, #0
 800170a:	d100      	bne.n	800170e <__aeabi_dadd+0x2ee>
 800170c:	e0b8      	b.n	8001880 <__aeabi_dadd+0x460>
 800170e:	4c1f      	ldr	r4, [pc, #124]	; (800178c <__aeabi_dadd+0x36c>)
 8001710:	42a2      	cmp	r2, r4
 8001712:	d100      	bne.n	8001716 <__aeabi_dadd+0x2f6>
 8001714:	e11c      	b.n	8001950 <__aeabi_dadd+0x530>
 8001716:	2480      	movs	r4, #128	; 0x80
 8001718:	0424      	lsls	r4, r4, #16
 800171a:	4321      	orrs	r1, r4
 800171c:	2f38      	cmp	r7, #56	; 0x38
 800171e:	dd00      	ble.n	8001722 <__aeabi_dadd+0x302>
 8001720:	e11e      	b.n	8001960 <__aeabi_dadd+0x540>
 8001722:	2f1f      	cmp	r7, #31
 8001724:	dd00      	ble.n	8001728 <__aeabi_dadd+0x308>
 8001726:	e19e      	b.n	8001a66 <__aeabi_dadd+0x646>
 8001728:	2620      	movs	r6, #32
 800172a:	000c      	movs	r4, r1
 800172c:	1bf6      	subs	r6, r6, r7
 800172e:	0018      	movs	r0, r3
 8001730:	40b3      	lsls	r3, r6
 8001732:	40b4      	lsls	r4, r6
 8001734:	40f8      	lsrs	r0, r7
 8001736:	1e5e      	subs	r6, r3, #1
 8001738:	41b3      	sbcs	r3, r6
 800173a:	40f9      	lsrs	r1, r7
 800173c:	4304      	orrs	r4, r0
 800173e:	431c      	orrs	r4, r3
 8001740:	4489      	add	r9, r1
 8001742:	4444      	add	r4, r8
 8001744:	4544      	cmp	r4, r8
 8001746:	419b      	sbcs	r3, r3
 8001748:	425b      	negs	r3, r3
 800174a:	444b      	add	r3, r9
 800174c:	469a      	mov	sl, r3
 800174e:	0016      	movs	r6, r2
 8001750:	e7a8      	b.n	80016a4 <__aeabi_dadd+0x284>
 8001752:	4642      	mov	r2, r8
 8001754:	464c      	mov	r4, r9
 8001756:	4314      	orrs	r4, r2
 8001758:	1e62      	subs	r2, r4, #1
 800175a:	4194      	sbcs	r4, r2
 800175c:	e6a6      	b.n	80014ac <__aeabi_dadd+0x8c>
 800175e:	4c0d      	ldr	r4, [pc, #52]	; (8001794 <__aeabi_dadd+0x374>)
 8001760:	1c72      	adds	r2, r6, #1
 8001762:	4222      	tst	r2, r4
 8001764:	d000      	beq.n	8001768 <__aeabi_dadd+0x348>
 8001766:	e0a8      	b.n	80018ba <__aeabi_dadd+0x49a>
 8001768:	000a      	movs	r2, r1
 800176a:	431a      	orrs	r2, r3
 800176c:	2e00      	cmp	r6, #0
 800176e:	d000      	beq.n	8001772 <__aeabi_dadd+0x352>
 8001770:	e10a      	b.n	8001988 <__aeabi_dadd+0x568>
 8001772:	2a00      	cmp	r2, #0
 8001774:	d100      	bne.n	8001778 <__aeabi_dadd+0x358>
 8001776:	e15e      	b.n	8001a36 <__aeabi_dadd+0x616>
 8001778:	464a      	mov	r2, r9
 800177a:	4302      	orrs	r2, r0
 800177c:	d000      	beq.n	8001780 <__aeabi_dadd+0x360>
 800177e:	e161      	b.n	8001a44 <__aeabi_dadd+0x624>
 8001780:	074a      	lsls	r2, r1, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	08c9      	lsrs	r1, r1, #3
 8001788:	e77c      	b.n	8001684 <__aeabi_dadd+0x264>
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	000007ff 	.word	0x000007ff
 8001790:	ff7fffff 	.word	0xff7fffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	4ccf      	ldr	r4, [pc, #828]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 800179a:	42a2      	cmp	r2, r4
 800179c:	d100      	bne.n	80017a0 <__aeabi_dadd+0x380>
 800179e:	e0ce      	b.n	800193e <__aeabi_dadd+0x51e>
 80017a0:	2480      	movs	r4, #128	; 0x80
 80017a2:	0424      	lsls	r4, r4, #16
 80017a4:	4321      	orrs	r1, r4
 80017a6:	2f38      	cmp	r7, #56	; 0x38
 80017a8:	dc5b      	bgt.n	8001862 <__aeabi_dadd+0x442>
 80017aa:	2f1f      	cmp	r7, #31
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dadd+0x390>
 80017ae:	e0dc      	b.n	800196a <__aeabi_dadd+0x54a>
 80017b0:	2520      	movs	r5, #32
 80017b2:	000c      	movs	r4, r1
 80017b4:	1bed      	subs	r5, r5, r7
 80017b6:	001e      	movs	r6, r3
 80017b8:	40ab      	lsls	r3, r5
 80017ba:	40ac      	lsls	r4, r5
 80017bc:	40fe      	lsrs	r6, r7
 80017be:	1e5d      	subs	r5, r3, #1
 80017c0:	41ab      	sbcs	r3, r5
 80017c2:	4334      	orrs	r4, r6
 80017c4:	40f9      	lsrs	r1, r7
 80017c6:	431c      	orrs	r4, r3
 80017c8:	464b      	mov	r3, r9
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4699      	mov	r9, r3
 80017ce:	e04c      	b.n	800186a <__aeabi_dadd+0x44a>
 80017d0:	464a      	mov	r2, r9
 80017d2:	1a1c      	subs	r4, r3, r0
 80017d4:	1a88      	subs	r0, r1, r2
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	4192      	sbcs	r2, r2
 80017da:	4252      	negs	r2, r2
 80017dc:	4692      	mov	sl, r2
 80017de:	0002      	movs	r2, r0
 80017e0:	4650      	mov	r0, sl
 80017e2:	1a12      	subs	r2, r2, r0
 80017e4:	4692      	mov	sl, r2
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	d478      	bmi.n	80018dc <__aeabi_dadd+0x4bc>
 80017ea:	4653      	mov	r3, sl
 80017ec:	4323      	orrs	r3, r4
 80017ee:	d000      	beq.n	80017f2 <__aeabi_dadd+0x3d2>
 80017f0:	e66a      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80017f2:	2100      	movs	r1, #0
 80017f4:	2500      	movs	r5, #0
 80017f6:	e745      	b.n	8001684 <__aeabi_dadd+0x264>
 80017f8:	074a      	lsls	r2, r1, #29
 80017fa:	08db      	lsrs	r3, r3, #3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	08c9      	lsrs	r1, r1, #3
 8001800:	e73d      	b.n	800167e <__aeabi_dadd+0x25e>
 8001802:	181c      	adds	r4, r3, r0
 8001804:	429c      	cmp	r4, r3
 8001806:	419b      	sbcs	r3, r3
 8001808:	4449      	add	r1, r9
 800180a:	468a      	mov	sl, r1
 800180c:	425b      	negs	r3, r3
 800180e:	449a      	add	sl, r3
 8001810:	4653      	mov	r3, sl
 8001812:	2601      	movs	r6, #1
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	d400      	bmi.n	800181a <__aeabi_dadd+0x3fa>
 8001818:	e727      	b.n	800166a <__aeabi_dadd+0x24a>
 800181a:	2602      	movs	r6, #2
 800181c:	4652      	mov	r2, sl
 800181e:	4baf      	ldr	r3, [pc, #700]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001820:	2101      	movs	r1, #1
 8001822:	401a      	ands	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	4021      	ands	r1, r4
 8001828:	0862      	lsrs	r2, r4, #1
 800182a:	430a      	orrs	r2, r1
 800182c:	07dc      	lsls	r4, r3, #31
 800182e:	085b      	lsrs	r3, r3, #1
 8001830:	469a      	mov	sl, r3
 8001832:	4314      	orrs	r4, r2
 8001834:	e670      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001836:	003a      	movs	r2, r7
 8001838:	464c      	mov	r4, r9
 800183a:	3a20      	subs	r2, #32
 800183c:	40d4      	lsrs	r4, r2
 800183e:	46a4      	mov	ip, r4
 8001840:	2f20      	cmp	r7, #32
 8001842:	d007      	beq.n	8001854 <__aeabi_dadd+0x434>
 8001844:	2240      	movs	r2, #64	; 0x40
 8001846:	4648      	mov	r0, r9
 8001848:	1bd2      	subs	r2, r2, r7
 800184a:	4090      	lsls	r0, r2
 800184c:	0002      	movs	r2, r0
 800184e:	4640      	mov	r0, r8
 8001850:	4310      	orrs	r0, r2
 8001852:	4680      	mov	r8, r0
 8001854:	4640      	mov	r0, r8
 8001856:	1e42      	subs	r2, r0, #1
 8001858:	4190      	sbcs	r0, r2
 800185a:	4662      	mov	r2, ip
 800185c:	0004      	movs	r4, r0
 800185e:	4314      	orrs	r4, r2
 8001860:	e624      	b.n	80014ac <__aeabi_dadd+0x8c>
 8001862:	4319      	orrs	r1, r3
 8001864:	000c      	movs	r4, r1
 8001866:	1e63      	subs	r3, r4, #1
 8001868:	419c      	sbcs	r4, r3
 800186a:	4643      	mov	r3, r8
 800186c:	1b1c      	subs	r4, r3, r4
 800186e:	45a0      	cmp	r8, r4
 8001870:	419b      	sbcs	r3, r3
 8001872:	4649      	mov	r1, r9
 8001874:	425b      	negs	r3, r3
 8001876:	1acb      	subs	r3, r1, r3
 8001878:	469a      	mov	sl, r3
 800187a:	4665      	mov	r5, ip
 800187c:	0016      	movs	r6, r2
 800187e:	e61b      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001880:	000c      	movs	r4, r1
 8001882:	431c      	orrs	r4, r3
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x468>
 8001886:	e0c7      	b.n	8001a18 <__aeabi_dadd+0x5f8>
 8001888:	1e7c      	subs	r4, r7, #1
 800188a:	2f01      	cmp	r7, #1
 800188c:	d100      	bne.n	8001890 <__aeabi_dadd+0x470>
 800188e:	e0f9      	b.n	8001a84 <__aeabi_dadd+0x664>
 8001890:	4e91      	ldr	r6, [pc, #580]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001892:	42b7      	cmp	r7, r6
 8001894:	d05c      	beq.n	8001950 <__aeabi_dadd+0x530>
 8001896:	0027      	movs	r7, r4
 8001898:	e740      	b.n	800171c <__aeabi_dadd+0x2fc>
 800189a:	2220      	movs	r2, #32
 800189c:	464c      	mov	r4, r9
 800189e:	4640      	mov	r0, r8
 80018a0:	1bd2      	subs	r2, r2, r7
 80018a2:	4094      	lsls	r4, r2
 80018a4:	40f8      	lsrs	r0, r7
 80018a6:	4304      	orrs	r4, r0
 80018a8:	4640      	mov	r0, r8
 80018aa:	4090      	lsls	r0, r2
 80018ac:	1e42      	subs	r2, r0, #1
 80018ae:	4190      	sbcs	r0, r2
 80018b0:	464a      	mov	r2, r9
 80018b2:	40fa      	lsrs	r2, r7
 80018b4:	4304      	orrs	r4, r0
 80018b6:	1889      	adds	r1, r1, r2
 80018b8:	e6ee      	b.n	8001698 <__aeabi_dadd+0x278>
 80018ba:	4c87      	ldr	r4, [pc, #540]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 80018bc:	42a2      	cmp	r2, r4
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x4a2>
 80018c0:	e6f9      	b.n	80016b6 <__aeabi_dadd+0x296>
 80018c2:	1818      	adds	r0, r3, r0
 80018c4:	4298      	cmp	r0, r3
 80018c6:	419b      	sbcs	r3, r3
 80018c8:	4449      	add	r1, r9
 80018ca:	425b      	negs	r3, r3
 80018cc:	18cb      	adds	r3, r1, r3
 80018ce:	07dc      	lsls	r4, r3, #31
 80018d0:	0840      	lsrs	r0, r0, #1
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	469a      	mov	sl, r3
 80018d6:	0016      	movs	r6, r2
 80018d8:	4304      	orrs	r4, r0
 80018da:	e6c6      	b.n	800166a <__aeabi_dadd+0x24a>
 80018dc:	4642      	mov	r2, r8
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	4180      	sbcs	r0, r0
 80018e4:	464b      	mov	r3, r9
 80018e6:	4240      	negs	r0, r0
 80018e8:	1a59      	subs	r1, r3, r1
 80018ea:	1a0b      	subs	r3, r1, r0
 80018ec:	469a      	mov	sl, r3
 80018ee:	4665      	mov	r5, ip
 80018f0:	e5ea      	b.n	80014c8 <__aeabi_dadd+0xa8>
 80018f2:	464b      	mov	r3, r9
 80018f4:	464a      	mov	r2, r9
 80018f6:	08c0      	lsrs	r0, r0, #3
 80018f8:	075b      	lsls	r3, r3, #29
 80018fa:	4665      	mov	r5, ip
 80018fc:	4303      	orrs	r3, r0
 80018fe:	08d1      	lsrs	r1, r2, #3
 8001900:	e6bd      	b.n	800167e <__aeabi_dadd+0x25e>
 8001902:	2a00      	cmp	r2, #0
 8001904:	d000      	beq.n	8001908 <__aeabi_dadd+0x4e8>
 8001906:	e08e      	b.n	8001a26 <__aeabi_dadd+0x606>
 8001908:	464b      	mov	r3, r9
 800190a:	4303      	orrs	r3, r0
 800190c:	d117      	bne.n	800193e <__aeabi_dadd+0x51e>
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	2500      	movs	r5, #0
 8001912:	0309      	lsls	r1, r1, #12
 8001914:	e6da      	b.n	80016cc <__aeabi_dadd+0x2ac>
 8001916:	074a      	lsls	r2, r1, #29
 8001918:	08db      	lsrs	r3, r3, #3
 800191a:	4313      	orrs	r3, r2
 800191c:	08c9      	lsrs	r1, r1, #3
 800191e:	e6d1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001920:	1a1c      	subs	r4, r3, r0
 8001922:	464a      	mov	r2, r9
 8001924:	42a3      	cmp	r3, r4
 8001926:	419b      	sbcs	r3, r3
 8001928:	1a89      	subs	r1, r1, r2
 800192a:	425b      	negs	r3, r3
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	469a      	mov	sl, r3
 8001930:	2601      	movs	r6, #1
 8001932:	e5c1      	b.n	80014b8 <__aeabi_dadd+0x98>
 8001934:	074a      	lsls	r2, r1, #29
 8001936:	08db      	lsrs	r3, r3, #3
 8001938:	4313      	orrs	r3, r2
 800193a:	08c9      	lsrs	r1, r1, #3
 800193c:	e69f      	b.n	800167e <__aeabi_dadd+0x25e>
 800193e:	4643      	mov	r3, r8
 8001940:	08d8      	lsrs	r0, r3, #3
 8001942:	464b      	mov	r3, r9
 8001944:	464a      	mov	r2, r9
 8001946:	075b      	lsls	r3, r3, #29
 8001948:	4665      	mov	r5, ip
 800194a:	4303      	orrs	r3, r0
 800194c:	08d1      	lsrs	r1, r2, #3
 800194e:	e6b9      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001950:	4643      	mov	r3, r8
 8001952:	08d8      	lsrs	r0, r3, #3
 8001954:	464b      	mov	r3, r9
 8001956:	464a      	mov	r2, r9
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	4303      	orrs	r3, r0
 800195c:	08d1      	lsrs	r1, r2, #3
 800195e:	e6b1      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001960:	4319      	orrs	r1, r3
 8001962:	000c      	movs	r4, r1
 8001964:	1e63      	subs	r3, r4, #1
 8001966:	419c      	sbcs	r4, r3
 8001968:	e6eb      	b.n	8001742 <__aeabi_dadd+0x322>
 800196a:	003c      	movs	r4, r7
 800196c:	000d      	movs	r5, r1
 800196e:	3c20      	subs	r4, #32
 8001970:	40e5      	lsrs	r5, r4
 8001972:	2f20      	cmp	r7, #32
 8001974:	d003      	beq.n	800197e <__aeabi_dadd+0x55e>
 8001976:	2440      	movs	r4, #64	; 0x40
 8001978:	1be4      	subs	r4, r4, r7
 800197a:	40a1      	lsls	r1, r4
 800197c:	430b      	orrs	r3, r1
 800197e:	001c      	movs	r4, r3
 8001980:	1e63      	subs	r3, r4, #1
 8001982:	419c      	sbcs	r4, r3
 8001984:	432c      	orrs	r4, r5
 8001986:	e770      	b.n	800186a <__aeabi_dadd+0x44a>
 8001988:	2a00      	cmp	r2, #0
 800198a:	d0e1      	beq.n	8001950 <__aeabi_dadd+0x530>
 800198c:	464a      	mov	r2, r9
 800198e:	4302      	orrs	r2, r0
 8001990:	d0c1      	beq.n	8001916 <__aeabi_dadd+0x4f6>
 8001992:	074a      	lsls	r2, r1, #29
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	4313      	orrs	r3, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	08c9      	lsrs	r1, r1, #3
 800199c:	0312      	lsls	r2, r2, #12
 800199e:	4211      	tst	r1, r2
 80019a0:	d008      	beq.n	80019b4 <__aeabi_dadd+0x594>
 80019a2:	4648      	mov	r0, r9
 80019a4:	08c4      	lsrs	r4, r0, #3
 80019a6:	4214      	tst	r4, r2
 80019a8:	d104      	bne.n	80019b4 <__aeabi_dadd+0x594>
 80019aa:	4643      	mov	r3, r8
 80019ac:	0021      	movs	r1, r4
 80019ae:	08db      	lsrs	r3, r3, #3
 80019b0:	0742      	lsls	r2, r0, #29
 80019b2:	4313      	orrs	r3, r2
 80019b4:	0f5a      	lsrs	r2, r3, #29
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	0752      	lsls	r2, r2, #29
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	4313      	orrs	r3, r2
 80019be:	e681      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 80019c0:	464b      	mov	r3, r9
 80019c2:	4303      	orrs	r3, r0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dadd+0x5a8>
 80019c6:	e714      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 80019c8:	464b      	mov	r3, r9
 80019ca:	464a      	mov	r2, r9
 80019cc:	08c0      	lsrs	r0, r0, #3
 80019ce:	075b      	lsls	r3, r3, #29
 80019d0:	4665      	mov	r5, ip
 80019d2:	4303      	orrs	r3, r0
 80019d4:	08d1      	lsrs	r1, r2, #3
 80019d6:	e655      	b.n	8001684 <__aeabi_dadd+0x264>
 80019d8:	1ac4      	subs	r4, r0, r3
 80019da:	45a0      	cmp	r8, r4
 80019dc:	4180      	sbcs	r0, r0
 80019de:	464b      	mov	r3, r9
 80019e0:	4240      	negs	r0, r0
 80019e2:	1a59      	subs	r1, r3, r1
 80019e4:	1a0b      	subs	r3, r1, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	4665      	mov	r5, ip
 80019ea:	2601      	movs	r6, #1
 80019ec:	e564      	b.n	80014b8 <__aeabi_dadd+0x98>
 80019ee:	1a1c      	subs	r4, r3, r0
 80019f0:	464a      	mov	r2, r9
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	4180      	sbcs	r0, r0
 80019f6:	1a8a      	subs	r2, r1, r2
 80019f8:	4240      	negs	r0, r0
 80019fa:	1a12      	subs	r2, r2, r0
 80019fc:	4692      	mov	sl, r2
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	d549      	bpl.n	8001a96 <__aeabi_dadd+0x676>
 8001a02:	4642      	mov	r2, r8
 8001a04:	1ad4      	subs	r4, r2, r3
 8001a06:	45a0      	cmp	r8, r4
 8001a08:	4180      	sbcs	r0, r0
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a59      	subs	r1, r3, r1
 8001a10:	1a0b      	subs	r3, r1, r0
 8001a12:	469a      	mov	sl, r3
 8001a14:	4665      	mov	r5, ip
 8001a16:	e57f      	b.n	8001518 <__aeabi_dadd+0xf8>
 8001a18:	464b      	mov	r3, r9
 8001a1a:	464a      	mov	r2, r9
 8001a1c:	08c0      	lsrs	r0, r0, #3
 8001a1e:	075b      	lsls	r3, r3, #29
 8001a20:	4303      	orrs	r3, r0
 8001a22:	08d1      	lsrs	r1, r2, #3
 8001a24:	e62b      	b.n	800167e <__aeabi_dadd+0x25e>
 8001a26:	464a      	mov	r2, r9
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	d138      	bne.n	8001aa0 <__aeabi_dadd+0x680>
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	4313      	orrs	r3, r2
 8001a32:	08c9      	lsrs	r1, r1, #3
 8001a34:	e646      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001a36:	464b      	mov	r3, r9
 8001a38:	464a      	mov	r2, r9
 8001a3a:	08c0      	lsrs	r0, r0, #3
 8001a3c:	075b      	lsls	r3, r3, #29
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	08d1      	lsrs	r1, r2, #3
 8001a42:	e61f      	b.n	8001684 <__aeabi_dadd+0x264>
 8001a44:	181c      	adds	r4, r3, r0
 8001a46:	429c      	cmp	r4, r3
 8001a48:	419b      	sbcs	r3, r3
 8001a4a:	4449      	add	r1, r9
 8001a4c:	468a      	mov	sl, r1
 8001a4e:	425b      	negs	r3, r3
 8001a50:	449a      	add	sl, r3
 8001a52:	4653      	mov	r3, sl
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	d400      	bmi.n	8001a5a <__aeabi_dadd+0x63a>
 8001a58:	e607      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a5a:	4652      	mov	r2, sl
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <__aeabi_dadd+0x6bc>)
 8001a5e:	2601      	movs	r6, #1
 8001a60:	401a      	ands	r2, r3
 8001a62:	4692      	mov	sl, r2
 8001a64:	e601      	b.n	800166a <__aeabi_dadd+0x24a>
 8001a66:	003c      	movs	r4, r7
 8001a68:	000e      	movs	r6, r1
 8001a6a:	3c20      	subs	r4, #32
 8001a6c:	40e6      	lsrs	r6, r4
 8001a6e:	2f20      	cmp	r7, #32
 8001a70:	d003      	beq.n	8001a7a <__aeabi_dadd+0x65a>
 8001a72:	2440      	movs	r4, #64	; 0x40
 8001a74:	1be4      	subs	r4, r4, r7
 8001a76:	40a1      	lsls	r1, r4
 8001a78:	430b      	orrs	r3, r1
 8001a7a:	001c      	movs	r4, r3
 8001a7c:	1e63      	subs	r3, r4, #1
 8001a7e:	419c      	sbcs	r4, r3
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e65e      	b.n	8001742 <__aeabi_dadd+0x322>
 8001a84:	4443      	add	r3, r8
 8001a86:	4283      	cmp	r3, r0
 8001a88:	4180      	sbcs	r0, r0
 8001a8a:	4449      	add	r1, r9
 8001a8c:	468a      	mov	sl, r1
 8001a8e:	4240      	negs	r0, r0
 8001a90:	001c      	movs	r4, r3
 8001a92:	4482      	add	sl, r0
 8001a94:	e6bc      	b.n	8001810 <__aeabi_dadd+0x3f0>
 8001a96:	4653      	mov	r3, sl
 8001a98:	4323      	orrs	r3, r4
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_dadd+0x67e>
 8001a9c:	e6a9      	b.n	80017f2 <__aeabi_dadd+0x3d2>
 8001a9e:	e5e4      	b.n	800166a <__aeabi_dadd+0x24a>
 8001aa0:	074a      	lsls	r2, r1, #29
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	08c9      	lsrs	r1, r1, #3
 8001aa8:	0312      	lsls	r2, r2, #12
 8001aaa:	4211      	tst	r1, r2
 8001aac:	d009      	beq.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001aae:	4648      	mov	r0, r9
 8001ab0:	08c4      	lsrs	r4, r0, #3
 8001ab2:	4214      	tst	r4, r2
 8001ab4:	d105      	bne.n	8001ac2 <__aeabi_dadd+0x6a2>
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	4665      	mov	r5, ip
 8001aba:	0021      	movs	r1, r4
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	0742      	lsls	r2, r0, #29
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	0f5a      	lsrs	r2, r3, #29
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	0752      	lsls	r2, r2, #29
 8001aca:	4313      	orrs	r3, r2
 8001acc:	e5fa      	b.n	80016c4 <__aeabi_dadd+0x2a4>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	4a01      	ldr	r2, [pc, #4]	; (8001ad8 <__aeabi_dadd+0x6b8>)
 8001ad2:	001c      	movs	r4, r3
 8001ad4:	e540      	b.n	8001558 <__aeabi_dadd+0x138>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	000007ff 	.word	0x000007ff
 8001adc:	ff7fffff 	.word	0xff7fffff

08001ae0 <__aeabi_ddiv>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4657      	mov	r7, sl
 8001ae4:	464e      	mov	r6, r9
 8001ae6:	4645      	mov	r5, r8
 8001ae8:	46de      	mov	lr, fp
 8001aea:	b5e0      	push	{r5, r6, r7, lr}
 8001aec:	030c      	lsls	r4, r1, #12
 8001aee:	001f      	movs	r7, r3
 8001af0:	004b      	lsls	r3, r1, #1
 8001af2:	4681      	mov	r9, r0
 8001af4:	4692      	mov	sl, r2
 8001af6:	0005      	movs	r5, r0
 8001af8:	b085      	sub	sp, #20
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	0d5b      	lsrs	r3, r3, #21
 8001afe:	0fce      	lsrs	r6, r1, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d100      	bne.n	8001b06 <__aeabi_ddiv+0x26>
 8001b04:	e152      	b.n	8001dac <__aeabi_ddiv+0x2cc>
 8001b06:	4ad2      	ldr	r2, [pc, #840]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x2e>
 8001b0c:	e16e      	b.n	8001dec <__aeabi_ddiv+0x30c>
 8001b0e:	0f42      	lsrs	r2, r0, #29
 8001b10:	00e4      	lsls	r4, r4, #3
 8001b12:	4314      	orrs	r4, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0412      	lsls	r2, r2, #16
 8001b18:	4322      	orrs	r2, r4
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4acd      	ldr	r2, [pc, #820]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b1e:	00c5      	lsls	r5, r0, #3
 8001b20:	4693      	mov	fp, r2
 8001b22:	449b      	add	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	4699      	mov	r9, r3
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	033c      	lsls	r4, r7, #12
 8001b2c:	007b      	lsls	r3, r7, #1
 8001b2e:	4650      	mov	r0, sl
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	0d5b      	lsrs	r3, r3, #21
 8001b34:	0fff      	lsrs	r7, r7, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x5c>
 8001b3a:	e11a      	b.n	8001d72 <__aeabi_ddiv+0x292>
 8001b3c:	4ac4      	ldr	r2, [pc, #784]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d100      	bne.n	8001b44 <__aeabi_ddiv+0x64>
 8001b42:	e15e      	b.n	8001e02 <__aeabi_ddiv+0x322>
 8001b44:	0f42      	lsrs	r2, r0, #29
 8001b46:	00e4      	lsls	r4, r4, #3
 8001b48:	4322      	orrs	r2, r4
 8001b4a:	2480      	movs	r4, #128	; 0x80
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	4314      	orrs	r4, r2
 8001b50:	4ac0      	ldr	r2, [pc, #768]	; (8001e54 <__aeabi_ddiv+0x374>)
 8001b52:	00c1      	lsls	r1, r0, #3
 8001b54:	4694      	mov	ip, r2
 8001b56:	465a      	mov	r2, fp
 8001b58:	4463      	add	r3, ip
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	0033      	movs	r3, r6
 8001b62:	407b      	eors	r3, r7
 8001b64:	469a      	mov	sl, r3
 8001b66:	464b      	mov	r3, r9
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d827      	bhi.n	8001bbc <__aeabi_ddiv+0xdc>
 8001b6c:	4aba      	ldr	r2, [pc, #744]	; (8001e58 <__aeabi_ddiv+0x378>)
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	58d3      	ldr	r3, [r2, r3]
 8001b72:	469f      	mov	pc, r3
 8001b74:	46b2      	mov	sl, r6
 8001b76:	9b00      	ldr	r3, [sp, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d016      	beq.n	8001baa <__aeabi_ddiv+0xca>
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_ddiv+0xa2>
 8001b80:	e287      	b.n	8002092 <__aeabi_ddiv+0x5b2>
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d000      	beq.n	8001b88 <__aeabi_ddiv+0xa8>
 8001b86:	e0d5      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	051b      	lsls	r3, r3, #20
 8001b90:	4313      	orrs	r3, r2
 8001b92:	4652      	mov	r2, sl
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0028      	movs	r0, r5
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	b005      	add	sp, #20
 8001b9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba0:	46bb      	mov	fp, r7
 8001ba2:	46b2      	mov	sl, r6
 8001ba4:	46a9      	mov	r9, r5
 8001ba6:	46a0      	mov	r8, r4
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001baa:	2200      	movs	r2, #0
 8001bac:	2500      	movs	r5, #0
 8001bae:	4ba8      	ldr	r3, [pc, #672]	; (8001e50 <__aeabi_ddiv+0x370>)
 8001bb0:	e7ed      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001bb2:	46ba      	mov	sl, r7
 8001bb4:	46a0      	mov	r8, r4
 8001bb6:	000d      	movs	r5, r1
 8001bb8:	9000      	str	r0, [sp, #0]
 8001bba:	e7dc      	b.n	8001b76 <__aeabi_ddiv+0x96>
 8001bbc:	4544      	cmp	r4, r8
 8001bbe:	d200      	bcs.n	8001bc2 <__aeabi_ddiv+0xe2>
 8001bc0:	e1c4      	b.n	8001f4c <__aeabi_ddiv+0x46c>
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001bc4:	e1bf      	b.n	8001f46 <__aeabi_ddiv+0x466>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	425b      	negs	r3, r3
 8001bca:	469c      	mov	ip, r3
 8001bcc:	002e      	movs	r6, r5
 8001bce:	4640      	mov	r0, r8
 8001bd0:	2500      	movs	r5, #0
 8001bd2:	44e3      	add	fp, ip
 8001bd4:	0223      	lsls	r3, r4, #8
 8001bd6:	0e0c      	lsrs	r4, r1, #24
 8001bd8:	431c      	orrs	r4, r3
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	4699      	mov	r9, r3
 8001bde:	0423      	lsls	r3, r4, #16
 8001be0:	020a      	lsls	r2, r1, #8
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	4649      	mov	r1, r9
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9701      	str	r7, [sp, #4]
 8001bea:	f7fe fb2f 	bl	800024c <__aeabi_uidivmod>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	437a      	muls	r2, r7
 8001bf2:	040b      	lsls	r3, r1, #16
 8001bf4:	0c31      	lsrs	r1, r6, #16
 8001bf6:	4680      	mov	r8, r0
 8001bf8:	4319      	orrs	r1, r3
 8001bfa:	428a      	cmp	r2, r1
 8001bfc:	d907      	bls.n	8001c0e <__aeabi_ddiv+0x12e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	1909      	adds	r1, r1, r4
 8001c06:	44e0      	add	r8, ip
 8001c08:	428c      	cmp	r4, r1
 8001c0a:	d800      	bhi.n	8001c0e <__aeabi_ddiv+0x12e>
 8001c0c:	e201      	b.n	8002012 <__aeabi_ddiv+0x532>
 8001c0e:	1a88      	subs	r0, r1, r2
 8001c10:	4649      	mov	r1, r9
 8001c12:	f7fe fb1b 	bl	800024c <__aeabi_uidivmod>
 8001c16:	9a01      	ldr	r2, [sp, #4]
 8001c18:	0436      	lsls	r6, r6, #16
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	0409      	lsls	r1, r1, #16
 8001c1e:	0c36      	lsrs	r6, r6, #16
 8001c20:	0003      	movs	r3, r0
 8001c22:	430e      	orrs	r6, r1
 8001c24:	42b2      	cmp	r2, r6
 8001c26:	d904      	bls.n	8001c32 <__aeabi_ddiv+0x152>
 8001c28:	1936      	adds	r6, r6, r4
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	42b4      	cmp	r4, r6
 8001c2e:	d800      	bhi.n	8001c32 <__aeabi_ddiv+0x152>
 8001c30:	e1e9      	b.n	8002006 <__aeabi_ddiv+0x526>
 8001c32:	1ab0      	subs	r0, r6, r2
 8001c34:	4642      	mov	r2, r8
 8001c36:	9e00      	ldr	r6, [sp, #0]
 8001c38:	0412      	lsls	r2, r2, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	0c33      	lsrs	r3, r6, #16
 8001c3e:	001f      	movs	r7, r3
 8001c40:	0c11      	lsrs	r1, r2, #16
 8001c42:	4690      	mov	r8, r2
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	0413      	lsls	r3, r2, #16
 8001c48:	0432      	lsls	r2, r6, #16
 8001c4a:	0c16      	lsrs	r6, r2, #16
 8001c4c:	0032      	movs	r2, r6
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	435a      	muls	r2, r3
 8001c52:	9603      	str	r6, [sp, #12]
 8001c54:	437b      	muls	r3, r7
 8001c56:	434e      	muls	r6, r1
 8001c58:	4379      	muls	r1, r7
 8001c5a:	0c17      	lsrs	r7, r2, #16
 8001c5c:	46bc      	mov	ip, r7
 8001c5e:	199b      	adds	r3, r3, r6
 8001c60:	4463      	add	r3, ip
 8001c62:	429e      	cmp	r6, r3
 8001c64:	d903      	bls.n	8001c6e <__aeabi_ddiv+0x18e>
 8001c66:	2680      	movs	r6, #128	; 0x80
 8001c68:	0276      	lsls	r6, r6, #9
 8001c6a:	46b4      	mov	ip, r6
 8001c6c:	4461      	add	r1, ip
 8001c6e:	0c1e      	lsrs	r6, r3, #16
 8001c70:	1871      	adds	r1, r6, r1
 8001c72:	0416      	lsls	r6, r2, #16
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	0c36      	lsrs	r6, r6, #16
 8001c78:	199e      	adds	r6, r3, r6
 8001c7a:	4288      	cmp	r0, r1
 8001c7c:	d302      	bcc.n	8001c84 <__aeabi_ddiv+0x1a4>
 8001c7e:	d112      	bne.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c80:	42b5      	cmp	r5, r6
 8001c82:	d210      	bcs.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8001c84:	4643      	mov	r3, r8
 8001c86:	1e5a      	subs	r2, r3, #1
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	4465      	add	r5, ip
 8001c8e:	001f      	movs	r7, r3
 8001c90:	429d      	cmp	r5, r3
 8001c92:	419b      	sbcs	r3, r3
 8001c94:	425b      	negs	r3, r3
 8001c96:	191b      	adds	r3, r3, r4
 8001c98:	18c0      	adds	r0, r0, r3
 8001c9a:	4284      	cmp	r4, r0
 8001c9c:	d200      	bcs.n	8001ca0 <__aeabi_ddiv+0x1c0>
 8001c9e:	e19e      	b.n	8001fde <__aeabi_ddiv+0x4fe>
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001ca2:	e199      	b.n	8001fd8 <__aeabi_ddiv+0x4f8>
 8001ca4:	4690      	mov	r8, r2
 8001ca6:	1bae      	subs	r6, r5, r6
 8001ca8:	42b5      	cmp	r5, r6
 8001caa:	41ad      	sbcs	r5, r5
 8001cac:	1a40      	subs	r0, r0, r1
 8001cae:	426d      	negs	r5, r5
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	4284      	cmp	r4, r0
 8001cb4:	d100      	bne.n	8001cb8 <__aeabi_ddiv+0x1d8>
 8001cb6:	e1d2      	b.n	800205e <__aeabi_ddiv+0x57e>
 8001cb8:	4649      	mov	r1, r9
 8001cba:	f7fe fac7 	bl	800024c <__aeabi_uidivmod>
 8001cbe:	9a01      	ldr	r2, [sp, #4]
 8001cc0:	040b      	lsls	r3, r1, #16
 8001cc2:	4342      	muls	r2, r0
 8001cc4:	0c31      	lsrs	r1, r6, #16
 8001cc6:	0005      	movs	r5, r0
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	428a      	cmp	r2, r1
 8001ccc:	d900      	bls.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001cce:	e16c      	b.n	8001faa <__aeabi_ddiv+0x4ca>
 8001cd0:	1a88      	subs	r0, r1, r2
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe faba 	bl	800024c <__aeabi_uidivmod>
 8001cd8:	9a01      	ldr	r2, [sp, #4]
 8001cda:	0436      	lsls	r6, r6, #16
 8001cdc:	4342      	muls	r2, r0
 8001cde:	0409      	lsls	r1, r1, #16
 8001ce0:	0c36      	lsrs	r6, r6, #16
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	430e      	orrs	r6, r1
 8001ce6:	42b2      	cmp	r2, r6
 8001ce8:	d900      	bls.n	8001cec <__aeabi_ddiv+0x20c>
 8001cea:	e153      	b.n	8001f94 <__aeabi_ddiv+0x4b4>
 8001cec:	9803      	ldr	r0, [sp, #12]
 8001cee:	1ab6      	subs	r6, r6, r2
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	042d      	lsls	r5, r5, #16
 8001cf4:	431d      	orrs	r5, r3
 8001cf6:	9f02      	ldr	r7, [sp, #8]
 8001cf8:	042b      	lsls	r3, r5, #16
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	435a      	muls	r2, r3
 8001cfe:	437b      	muls	r3, r7
 8001d00:	469c      	mov	ip, r3
 8001d02:	0c29      	lsrs	r1, r5, #16
 8001d04:	4348      	muls	r0, r1
 8001d06:	0c13      	lsrs	r3, r2, #16
 8001d08:	4484      	add	ip, r0
 8001d0a:	4463      	add	r3, ip
 8001d0c:	4379      	muls	r1, r7
 8001d0e:	4298      	cmp	r0, r3
 8001d10:	d903      	bls.n	8001d1a <__aeabi_ddiv+0x23a>
 8001d12:	2080      	movs	r0, #128	; 0x80
 8001d14:	0240      	lsls	r0, r0, #9
 8001d16:	4684      	mov	ip, r0
 8001d18:	4461      	add	r1, ip
 8001d1a:	0c18      	lsrs	r0, r3, #16
 8001d1c:	0412      	lsls	r2, r2, #16
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
 8001d22:	1840      	adds	r0, r0, r1
 8001d24:	189b      	adds	r3, r3, r2
 8001d26:	4286      	cmp	r6, r0
 8001d28:	d200      	bcs.n	8001d2c <__aeabi_ddiv+0x24c>
 8001d2a:	e100      	b.n	8001f2e <__aeabi_ddiv+0x44e>
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_ddiv+0x250>
 8001d2e:	e0fb      	b.n	8001f28 <__aeabi_ddiv+0x448>
 8001d30:	2301      	movs	r3, #1
 8001d32:	431d      	orrs	r5, r3
 8001d34:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <__aeabi_ddiv+0x37c>)
 8001d36:	445b      	add	r3, fp
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	dc00      	bgt.n	8001d3e <__aeabi_ddiv+0x25e>
 8001d3c:	e0aa      	b.n	8001e94 <__aeabi_ddiv+0x3b4>
 8001d3e:	076a      	lsls	r2, r5, #29
 8001d40:	d000      	beq.n	8001d44 <__aeabi_ddiv+0x264>
 8001d42:	e13d      	b.n	8001fc0 <__aeabi_ddiv+0x4e0>
 8001d44:	08e9      	lsrs	r1, r5, #3
 8001d46:	4642      	mov	r2, r8
 8001d48:	01d2      	lsls	r2, r2, #7
 8001d4a:	d506      	bpl.n	8001d5a <__aeabi_ddiv+0x27a>
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	4b44      	ldr	r3, [pc, #272]	; (8001e60 <__aeabi_ddiv+0x380>)
 8001d50:	401a      	ands	r2, r3
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	4690      	mov	r8, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	445b      	add	r3, fp
 8001d5a:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <__aeabi_ddiv+0x384>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	dd00      	ble.n	8001d62 <__aeabi_ddiv+0x282>
 8001d60:	e723      	b.n	8001baa <__aeabi_ddiv+0xca>
 8001d62:	4642      	mov	r2, r8
 8001d64:	055b      	lsls	r3, r3, #21
 8001d66:	0755      	lsls	r5, r2, #29
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	430d      	orrs	r5, r1
 8001d6c:	0b12      	lsrs	r2, r2, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e70d      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001d72:	4651      	mov	r1, sl
 8001d74:	4321      	orrs	r1, r4
 8001d76:	d100      	bne.n	8001d7a <__aeabi_ddiv+0x29a>
 8001d78:	e07c      	b.n	8001e74 <__aeabi_ddiv+0x394>
 8001d7a:	2c00      	cmp	r4, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_ddiv+0x2a0>
 8001d7e:	e0fb      	b.n	8001f78 <__aeabi_ddiv+0x498>
 8001d80:	0020      	movs	r0, r4
 8001d82:	f001 fa63 	bl	800324c <__clzsi2>
 8001d86:	0002      	movs	r2, r0
 8001d88:	3a0b      	subs	r2, #11
 8001d8a:	231d      	movs	r3, #29
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	4652      	mov	r2, sl
 8001d90:	0001      	movs	r1, r0
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4653      	mov	r3, sl
 8001d96:	3908      	subs	r1, #8
 8001d98:	408b      	lsls	r3, r1
 8001d9a:	408c      	lsls	r4, r1
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4314      	orrs	r4, r2
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <__aeabi_ddiv+0x388>)
 8001da2:	4458      	add	r0, fp
 8001da4:	469b      	mov	fp, r3
 8001da6:	4483      	add	fp, r0
 8001da8:	2000      	movs	r0, #0
 8001daa:	e6d9      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001dac:	0003      	movs	r3, r0
 8001dae:	4323      	orrs	r3, r4
 8001db0:	4698      	mov	r8, r3
 8001db2:	d044      	beq.n	8001e3e <__aeabi_ddiv+0x35e>
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d100      	bne.n	8001dba <__aeabi_ddiv+0x2da>
 8001db8:	e0cf      	b.n	8001f5a <__aeabi_ddiv+0x47a>
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f001 fa46 	bl	800324c <__clzsi2>
 8001dc0:	0001      	movs	r1, r0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	390b      	subs	r1, #11
 8001dc6:	231d      	movs	r3, #29
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	4649      	mov	r1, r9
 8001dcc:	0010      	movs	r0, r2
 8001dce:	40d9      	lsrs	r1, r3
 8001dd0:	3808      	subs	r0, #8
 8001dd2:	4084      	lsls	r4, r0
 8001dd4:	000b      	movs	r3, r1
 8001dd6:	464d      	mov	r5, r9
 8001dd8:	4323      	orrs	r3, r4
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4085      	lsls	r5, r0
 8001dde:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <__aeabi_ddiv+0x38c>)
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	4699      	mov	r9, r3
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	e69e      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001dec:	0002      	movs	r2, r0
 8001dee:	4322      	orrs	r2, r4
 8001df0:	4690      	mov	r8, r2
 8001df2:	d11d      	bne.n	8001e30 <__aeabi_ddiv+0x350>
 8001df4:	2208      	movs	r2, #8
 8001df6:	469b      	mov	fp, r3
 8001df8:	2302      	movs	r3, #2
 8001dfa:	2500      	movs	r5, #0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	e693      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4321      	orrs	r1, r4
 8001e06:	d109      	bne.n	8001e1c <__aeabi_ddiv+0x33c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	464a      	mov	r2, r9
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e10:	4691      	mov	r9, r2
 8001e12:	469c      	mov	ip, r3
 8001e14:	2400      	movs	r4, #0
 8001e16:	2002      	movs	r0, #2
 8001e18:	44e3      	add	fp, ip
 8001e1a:	e6a1      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	464a      	mov	r2, r9
 8001e20:	431a      	orrs	r2, r3
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <__aeabi_ddiv+0x390>)
 8001e24:	4691      	mov	r9, r2
 8001e26:	469c      	mov	ip, r3
 8001e28:	4651      	mov	r1, sl
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	44e3      	add	fp, ip
 8001e2e:	e697      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e30:	220c      	movs	r2, #12
 8001e32:	469b      	mov	fp, r3
 8001e34:	2303      	movs	r3, #3
 8001e36:	46a0      	mov	r8, r4
 8001e38:	4691      	mov	r9, r2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	e675      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	4699      	mov	r9, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	469b      	mov	fp, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	2500      	movs	r5, #0
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	e66d      	b.n	8001b2a <__aeabi_ddiv+0x4a>
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	000007ff 	.word	0x000007ff
 8001e54:	fffffc01 	.word	0xfffffc01
 8001e58:	08011cc0 	.word	0x08011cc0
 8001e5c:	000003ff 	.word	0x000003ff
 8001e60:	feffffff 	.word	0xfeffffff
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000003f3 	.word	0x000003f3
 8001e6c:	fffffc0d 	.word	0xfffffc0d
 8001e70:	fffff801 	.word	0xfffff801
 8001e74:	464a      	mov	r2, r9
 8001e76:	2301      	movs	r3, #1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e66e      	b.n	8001b60 <__aeabi_ddiv+0x80>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	469a      	mov	sl, r3
 8001e88:	2500      	movs	r5, #0
 8001e8a:	4b88      	ldr	r3, [pc, #544]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	e67e      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001e90:	2501      	movs	r5, #1
 8001e92:	426d      	negs	r5, r5
 8001e94:	2201      	movs	r2, #1
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	2a38      	cmp	r2, #56	; 0x38
 8001e9a:	dd00      	ble.n	8001e9e <__aeabi_ddiv+0x3be>
 8001e9c:	e674      	b.n	8001b88 <__aeabi_ddiv+0xa8>
 8001e9e:	2a1f      	cmp	r2, #31
 8001ea0:	dc00      	bgt.n	8001ea4 <__aeabi_ddiv+0x3c4>
 8001ea2:	e0bd      	b.n	8002020 <__aeabi_ddiv+0x540>
 8001ea4:	211f      	movs	r1, #31
 8001ea6:	4249      	negs	r1, r1
 8001ea8:	1acb      	subs	r3, r1, r3
 8001eaa:	4641      	mov	r1, r8
 8001eac:	40d9      	lsrs	r1, r3
 8001eae:	000b      	movs	r3, r1
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_ddiv+0x3de>
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	; (80020b0 <__aeabi_ddiv+0x5d0>)
 8001eb8:	445a      	add	r2, fp
 8001eba:	4091      	lsls	r1, r2
 8001ebc:	430d      	orrs	r5, r1
 8001ebe:	0029      	movs	r1, r5
 8001ec0:	1e4a      	subs	r2, r1, #1
 8001ec2:	4191      	sbcs	r1, r2
 8001ec4:	4319      	orrs	r1, r3
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	001d      	movs	r5, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	400d      	ands	r5, r1
 8001ece:	420b      	tst	r3, r1
 8001ed0:	d100      	bne.n	8001ed4 <__aeabi_ddiv+0x3f4>
 8001ed2:	e0d0      	b.n	8002076 <__aeabi_ddiv+0x596>
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	400a      	ands	r2, r1
 8001eda:	2a04      	cmp	r2, #4
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_ddiv+0x400>
 8001ede:	e0c7      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ee0:	1d0a      	adds	r2, r1, #4
 8001ee2:	428a      	cmp	r2, r1
 8001ee4:	4189      	sbcs	r1, r1
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	185b      	adds	r3, r3, r1
 8001eea:	0011      	movs	r1, r2
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	d400      	bmi.n	8001ef2 <__aeabi_ddiv+0x412>
 8001ef0:	e0be      	b.n	8002070 <__aeabi_ddiv+0x590>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2500      	movs	r5, #0
 8001ef8:	e649      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4643      	mov	r3, r8
 8001efe:	0312      	lsls	r2, r2, #12
 8001f00:	4213      	tst	r3, r2
 8001f02:	d008      	beq.n	8001f16 <__aeabi_ddiv+0x436>
 8001f04:	4214      	tst	r4, r2
 8001f06:	d106      	bne.n	8001f16 <__aeabi_ddiv+0x436>
 8001f08:	4322      	orrs	r2, r4
 8001f0a:	0312      	lsls	r2, r2, #12
 8001f0c:	46ba      	mov	sl, r7
 8001f0e:	000d      	movs	r5, r1
 8001f10:	4b66      	ldr	r3, [pc, #408]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f12:	0b12      	lsrs	r2, r2, #12
 8001f14:	e63b      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f16:	2280      	movs	r2, #128	; 0x80
 8001f18:	4643      	mov	r3, r8
 8001f1a:	0312      	lsls	r2, r2, #12
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	46b2      	mov	sl, r6
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <__aeabi_ddiv+0x5cc>)
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	e632      	b.n	8001b8e <__aeabi_ddiv+0xae>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d100      	bne.n	8001f2e <__aeabi_ddiv+0x44e>
 8001f2c:	e702      	b.n	8001d34 <__aeabi_ddiv+0x254>
 8001f2e:	19a6      	adds	r6, r4, r6
 8001f30:	1e6a      	subs	r2, r5, #1
 8001f32:	42a6      	cmp	r6, r4
 8001f34:	d200      	bcs.n	8001f38 <__aeabi_ddiv+0x458>
 8001f36:	e089      	b.n	800204c <__aeabi_ddiv+0x56c>
 8001f38:	4286      	cmp	r6, r0
 8001f3a:	d200      	bcs.n	8001f3e <__aeabi_ddiv+0x45e>
 8001f3c:	e09f      	b.n	800207e <__aeabi_ddiv+0x59e>
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_ddiv+0x462>
 8001f40:	e0af      	b.n	80020a2 <__aeabi_ddiv+0x5c2>
 8001f42:	0015      	movs	r5, r2
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8001f46:	42a9      	cmp	r1, r5
 8001f48:	d900      	bls.n	8001f4c <__aeabi_ddiv+0x46c>
 8001f4a:	e63c      	b.n	8001bc6 <__aeabi_ddiv+0xe6>
 8001f4c:	4643      	mov	r3, r8
 8001f4e:	07de      	lsls	r6, r3, #31
 8001f50:	0858      	lsrs	r0, r3, #1
 8001f52:	086b      	lsrs	r3, r5, #1
 8001f54:	431e      	orrs	r6, r3
 8001f56:	07ed      	lsls	r5, r5, #31
 8001f58:	e63c      	b.n	8001bd4 <__aeabi_ddiv+0xf4>
 8001f5a:	f001 f977 	bl	800324c <__clzsi2>
 8001f5e:	0001      	movs	r1, r0
 8001f60:	0002      	movs	r2, r0
 8001f62:	3115      	adds	r1, #21
 8001f64:	3220      	adds	r2, #32
 8001f66:	291c      	cmp	r1, #28
 8001f68:	dc00      	bgt.n	8001f6c <__aeabi_ddiv+0x48c>
 8001f6a:	e72c      	b.n	8001dc6 <__aeabi_ddiv+0x2e6>
 8001f6c:	464b      	mov	r3, r9
 8001f6e:	3808      	subs	r0, #8
 8001f70:	4083      	lsls	r3, r0
 8001f72:	2500      	movs	r5, #0
 8001f74:	4698      	mov	r8, r3
 8001f76:	e732      	b.n	8001dde <__aeabi_ddiv+0x2fe>
 8001f78:	f001 f968 	bl	800324c <__clzsi2>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	001a      	movs	r2, r3
 8001f80:	3215      	adds	r2, #21
 8001f82:	3020      	adds	r0, #32
 8001f84:	2a1c      	cmp	r2, #28
 8001f86:	dc00      	bgt.n	8001f8a <__aeabi_ddiv+0x4aa>
 8001f88:	e6ff      	b.n	8001d8a <__aeabi_ddiv+0x2aa>
 8001f8a:	4654      	mov	r4, sl
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2100      	movs	r1, #0
 8001f90:	409c      	lsls	r4, r3
 8001f92:	e705      	b.n	8001da0 <__aeabi_ddiv+0x2c0>
 8001f94:	1936      	adds	r6, r6, r4
 8001f96:	3b01      	subs	r3, #1
 8001f98:	42b4      	cmp	r4, r6
 8001f9a:	d900      	bls.n	8001f9e <__aeabi_ddiv+0x4be>
 8001f9c:	e6a6      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001f9e:	42b2      	cmp	r2, r6
 8001fa0:	d800      	bhi.n	8001fa4 <__aeabi_ddiv+0x4c4>
 8001fa2:	e6a3      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001fa4:	1e83      	subs	r3, r0, #2
 8001fa6:	1936      	adds	r6, r6, r4
 8001fa8:	e6a0      	b.n	8001cec <__aeabi_ddiv+0x20c>
 8001faa:	1909      	adds	r1, r1, r4
 8001fac:	3d01      	subs	r5, #1
 8001fae:	428c      	cmp	r4, r1
 8001fb0:	d900      	bls.n	8001fb4 <__aeabi_ddiv+0x4d4>
 8001fb2:	e68d      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fb4:	428a      	cmp	r2, r1
 8001fb6:	d800      	bhi.n	8001fba <__aeabi_ddiv+0x4da>
 8001fb8:	e68a      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fba:	1e85      	subs	r5, r0, #2
 8001fbc:	1909      	adds	r1, r1, r4
 8001fbe:	e687      	b.n	8001cd0 <__aeabi_ddiv+0x1f0>
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	402a      	ands	r2, r5
 8001fc4:	2a04      	cmp	r2, #4
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x4ea>
 8001fc8:	e6bc      	b.n	8001d44 <__aeabi_ddiv+0x264>
 8001fca:	1d29      	adds	r1, r5, #4
 8001fcc:	42a9      	cmp	r1, r5
 8001fce:	41ad      	sbcs	r5, r5
 8001fd0:	426d      	negs	r5, r5
 8001fd2:	08c9      	lsrs	r1, r1, #3
 8001fd4:	44a8      	add	r8, r5
 8001fd6:	e6b6      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8001fd8:	42af      	cmp	r7, r5
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4fe>
 8001fdc:	e662      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d804      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fe2:	d000      	beq.n	8001fe6 <__aeabi_ddiv+0x506>
 8001fe4:	e65e      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fe6:	42ae      	cmp	r6, r5
 8001fe8:	d800      	bhi.n	8001fec <__aeabi_ddiv+0x50c>
 8001fea:	e65b      	b.n	8001ca4 <__aeabi_ddiv+0x1c4>
 8001fec:	2302      	movs	r3, #2
 8001fee:	425b      	negs	r3, r3
 8001ff0:	469c      	mov	ip, r3
 8001ff2:	9b00      	ldr	r3, [sp, #0]
 8001ff4:	44e0      	add	r8, ip
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	4465      	add	r5, ip
 8001ffa:	429d      	cmp	r5, r3
 8001ffc:	419b      	sbcs	r3, r3
 8001ffe:	425b      	negs	r3, r3
 8002000:	191b      	adds	r3, r3, r4
 8002002:	18c0      	adds	r0, r0, r3
 8002004:	e64f      	b.n	8001ca6 <__aeabi_ddiv+0x1c6>
 8002006:	42b2      	cmp	r2, r6
 8002008:	d800      	bhi.n	800200c <__aeabi_ddiv+0x52c>
 800200a:	e612      	b.n	8001c32 <__aeabi_ddiv+0x152>
 800200c:	1e83      	subs	r3, r0, #2
 800200e:	1936      	adds	r6, r6, r4
 8002010:	e60f      	b.n	8001c32 <__aeabi_ddiv+0x152>
 8002012:	428a      	cmp	r2, r1
 8002014:	d800      	bhi.n	8002018 <__aeabi_ddiv+0x538>
 8002016:	e5fa      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002018:	1e83      	subs	r3, r0, #2
 800201a:	4698      	mov	r8, r3
 800201c:	1909      	adds	r1, r1, r4
 800201e:	e5f6      	b.n	8001c0e <__aeabi_ddiv+0x12e>
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <__aeabi_ddiv+0x5d4>)
 8002022:	0028      	movs	r0, r5
 8002024:	445b      	add	r3, fp
 8002026:	4641      	mov	r1, r8
 8002028:	409d      	lsls	r5, r3
 800202a:	4099      	lsls	r1, r3
 800202c:	40d0      	lsrs	r0, r2
 800202e:	1e6b      	subs	r3, r5, #1
 8002030:	419d      	sbcs	r5, r3
 8002032:	4643      	mov	r3, r8
 8002034:	4301      	orrs	r1, r0
 8002036:	4329      	orrs	r1, r5
 8002038:	40d3      	lsrs	r3, r2
 800203a:	074a      	lsls	r2, r1, #29
 800203c:	d100      	bne.n	8002040 <__aeabi_ddiv+0x560>
 800203e:	e755      	b.n	8001eec <__aeabi_ddiv+0x40c>
 8002040:	220f      	movs	r2, #15
 8002042:	400a      	ands	r2, r1
 8002044:	2a04      	cmp	r2, #4
 8002046:	d000      	beq.n	800204a <__aeabi_ddiv+0x56a>
 8002048:	e74a      	b.n	8001ee0 <__aeabi_ddiv+0x400>
 800204a:	e74f      	b.n	8001eec <__aeabi_ddiv+0x40c>
 800204c:	0015      	movs	r5, r2
 800204e:	4286      	cmp	r6, r0
 8002050:	d000      	beq.n	8002054 <__aeabi_ddiv+0x574>
 8002052:	e66d      	b.n	8001d30 <__aeabi_ddiv+0x250>
 8002054:	9a00      	ldr	r2, [sp, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d000      	beq.n	800205c <__aeabi_ddiv+0x57c>
 800205a:	e669      	b.n	8001d30 <__aeabi_ddiv+0x250>
 800205c:	e66a      	b.n	8001d34 <__aeabi_ddiv+0x254>
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <__aeabi_ddiv+0x5d8>)
 8002060:	445b      	add	r3, fp
 8002062:	2b00      	cmp	r3, #0
 8002064:	dc00      	bgt.n	8002068 <__aeabi_ddiv+0x588>
 8002066:	e713      	b.n	8001e90 <__aeabi_ddiv+0x3b0>
 8002068:	2501      	movs	r5, #1
 800206a:	2100      	movs	r1, #0
 800206c:	44a8      	add	r8, r5
 800206e:	e66a      	b.n	8001d46 <__aeabi_ddiv+0x266>
 8002070:	075d      	lsls	r5, r3, #29
 8002072:	025b      	lsls	r3, r3, #9
 8002074:	0b1a      	lsrs	r2, r3, #12
 8002076:	08c9      	lsrs	r1, r1, #3
 8002078:	2300      	movs	r3, #0
 800207a:	430d      	orrs	r5, r1
 800207c:	e587      	b.n	8001b8e <__aeabi_ddiv+0xae>
 800207e:	9900      	ldr	r1, [sp, #0]
 8002080:	3d02      	subs	r5, #2
 8002082:	004a      	lsls	r2, r1, #1
 8002084:	428a      	cmp	r2, r1
 8002086:	41bf      	sbcs	r7, r7
 8002088:	427f      	negs	r7, r7
 800208a:	193f      	adds	r7, r7, r4
 800208c:	19f6      	adds	r6, r6, r7
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	e7dd      	b.n	800204e <__aeabi_ddiv+0x56e>
 8002092:	2280      	movs	r2, #128	; 0x80
 8002094:	4643      	mov	r3, r8
 8002096:	0312      	lsls	r2, r2, #12
 8002098:	431a      	orrs	r2, r3
 800209a:	0312      	lsls	r2, r2, #12
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <__aeabi_ddiv+0x5cc>)
 800209e:	0b12      	lsrs	r2, r2, #12
 80020a0:	e575      	b.n	8001b8e <__aeabi_ddiv+0xae>
 80020a2:	9900      	ldr	r1, [sp, #0]
 80020a4:	4299      	cmp	r1, r3
 80020a6:	d3ea      	bcc.n	800207e <__aeabi_ddiv+0x59e>
 80020a8:	0015      	movs	r5, r2
 80020aa:	e7d3      	b.n	8002054 <__aeabi_ddiv+0x574>
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	0000043e 	.word	0x0000043e
 80020b4:	0000041e 	.word	0x0000041e
 80020b8:	000003ff 	.word	0x000003ff

080020bc <__eqdf2>:
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	464e      	mov	r6, r9
 80020c0:	4645      	mov	r5, r8
 80020c2:	46de      	mov	lr, fp
 80020c4:	4657      	mov	r7, sl
 80020c6:	4690      	mov	r8, r2
 80020c8:	b5e0      	push	{r5, r6, r7, lr}
 80020ca:	0017      	movs	r7, r2
 80020cc:	031a      	lsls	r2, r3, #12
 80020ce:	0b12      	lsrs	r2, r2, #12
 80020d0:	0005      	movs	r5, r0
 80020d2:	4684      	mov	ip, r0
 80020d4:	4819      	ldr	r0, [pc, #100]	; (800213c <__eqdf2+0x80>)
 80020d6:	030e      	lsls	r6, r1, #12
 80020d8:	004c      	lsls	r4, r1, #1
 80020da:	4691      	mov	r9, r2
 80020dc:	005a      	lsls	r2, r3, #1
 80020de:	0fdb      	lsrs	r3, r3, #31
 80020e0:	469b      	mov	fp, r3
 80020e2:	0b36      	lsrs	r6, r6, #12
 80020e4:	0d64      	lsrs	r4, r4, #21
 80020e6:	0fc9      	lsrs	r1, r1, #31
 80020e8:	0d52      	lsrs	r2, r2, #21
 80020ea:	4284      	cmp	r4, r0
 80020ec:	d019      	beq.n	8002122 <__eqdf2+0x66>
 80020ee:	4282      	cmp	r2, r0
 80020f0:	d010      	beq.n	8002114 <__eqdf2+0x58>
 80020f2:	2001      	movs	r0, #1
 80020f4:	4294      	cmp	r4, r2
 80020f6:	d10e      	bne.n	8002116 <__eqdf2+0x5a>
 80020f8:	454e      	cmp	r6, r9
 80020fa:	d10c      	bne.n	8002116 <__eqdf2+0x5a>
 80020fc:	2001      	movs	r0, #1
 80020fe:	45c4      	cmp	ip, r8
 8002100:	d109      	bne.n	8002116 <__eqdf2+0x5a>
 8002102:	4559      	cmp	r1, fp
 8002104:	d017      	beq.n	8002136 <__eqdf2+0x7a>
 8002106:	2c00      	cmp	r4, #0
 8002108:	d105      	bne.n	8002116 <__eqdf2+0x5a>
 800210a:	0030      	movs	r0, r6
 800210c:	4328      	orrs	r0, r5
 800210e:	1e43      	subs	r3, r0, #1
 8002110:	4198      	sbcs	r0, r3
 8002112:	e000      	b.n	8002116 <__eqdf2+0x5a>
 8002114:	2001      	movs	r0, #1
 8002116:	bcf0      	pop	{r4, r5, r6, r7}
 8002118:	46bb      	mov	fp, r7
 800211a:	46b2      	mov	sl, r6
 800211c:	46a9      	mov	r9, r5
 800211e:	46a0      	mov	r8, r4
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	0033      	movs	r3, r6
 8002124:	2001      	movs	r0, #1
 8002126:	432b      	orrs	r3, r5
 8002128:	d1f5      	bne.n	8002116 <__eqdf2+0x5a>
 800212a:	42a2      	cmp	r2, r4
 800212c:	d1f3      	bne.n	8002116 <__eqdf2+0x5a>
 800212e:	464b      	mov	r3, r9
 8002130:	433b      	orrs	r3, r7
 8002132:	d1f0      	bne.n	8002116 <__eqdf2+0x5a>
 8002134:	e7e2      	b.n	80020fc <__eqdf2+0x40>
 8002136:	2000      	movs	r0, #0
 8002138:	e7ed      	b.n	8002116 <__eqdf2+0x5a>
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	000007ff 	.word	0x000007ff

08002140 <__gedf2>:
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	4647      	mov	r7, r8
 8002144:	46ce      	mov	lr, r9
 8002146:	0004      	movs	r4, r0
 8002148:	0018      	movs	r0, r3
 800214a:	0016      	movs	r6, r2
 800214c:	031b      	lsls	r3, r3, #12
 800214e:	0b1b      	lsrs	r3, r3, #12
 8002150:	4d2d      	ldr	r5, [pc, #180]	; (8002208 <__gedf2+0xc8>)
 8002152:	004a      	lsls	r2, r1, #1
 8002154:	4699      	mov	r9, r3
 8002156:	b580      	push	{r7, lr}
 8002158:	0043      	lsls	r3, r0, #1
 800215a:	030f      	lsls	r7, r1, #12
 800215c:	46a4      	mov	ip, r4
 800215e:	46b0      	mov	r8, r6
 8002160:	0b3f      	lsrs	r7, r7, #12
 8002162:	0d52      	lsrs	r2, r2, #21
 8002164:	0fc9      	lsrs	r1, r1, #31
 8002166:	0d5b      	lsrs	r3, r3, #21
 8002168:	0fc0      	lsrs	r0, r0, #31
 800216a:	42aa      	cmp	r2, r5
 800216c:	d021      	beq.n	80021b2 <__gedf2+0x72>
 800216e:	42ab      	cmp	r3, r5
 8002170:	d013      	beq.n	800219a <__gedf2+0x5a>
 8002172:	2a00      	cmp	r2, #0
 8002174:	d122      	bne.n	80021bc <__gedf2+0x7c>
 8002176:	433c      	orrs	r4, r7
 8002178:	2b00      	cmp	r3, #0
 800217a:	d102      	bne.n	8002182 <__gedf2+0x42>
 800217c:	464d      	mov	r5, r9
 800217e:	432e      	orrs	r6, r5
 8002180:	d022      	beq.n	80021c8 <__gedf2+0x88>
 8002182:	2c00      	cmp	r4, #0
 8002184:	d010      	beq.n	80021a8 <__gedf2+0x68>
 8002186:	4281      	cmp	r1, r0
 8002188:	d022      	beq.n	80021d0 <__gedf2+0x90>
 800218a:	2002      	movs	r0, #2
 800218c:	3901      	subs	r1, #1
 800218e:	4008      	ands	r0, r1
 8002190:	3801      	subs	r0, #1
 8002192:	bcc0      	pop	{r6, r7}
 8002194:	46b9      	mov	r9, r7
 8002196:	46b0      	mov	r8, r6
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219a:	464d      	mov	r5, r9
 800219c:	432e      	orrs	r6, r5
 800219e:	d129      	bne.n	80021f4 <__gedf2+0xb4>
 80021a0:	2a00      	cmp	r2, #0
 80021a2:	d1f0      	bne.n	8002186 <__gedf2+0x46>
 80021a4:	433c      	orrs	r4, r7
 80021a6:	d1ee      	bne.n	8002186 <__gedf2+0x46>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d1f2      	bne.n	8002192 <__gedf2+0x52>
 80021ac:	2001      	movs	r0, #1
 80021ae:	4240      	negs	r0, r0
 80021b0:	e7ef      	b.n	8002192 <__gedf2+0x52>
 80021b2:	003d      	movs	r5, r7
 80021b4:	4325      	orrs	r5, r4
 80021b6:	d11d      	bne.n	80021f4 <__gedf2+0xb4>
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d0ee      	beq.n	800219a <__gedf2+0x5a>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e2      	bne.n	8002186 <__gedf2+0x46>
 80021c0:	464c      	mov	r4, r9
 80021c2:	4326      	orrs	r6, r4
 80021c4:	d1df      	bne.n	8002186 <__gedf2+0x46>
 80021c6:	e7e0      	b.n	800218a <__gedf2+0x4a>
 80021c8:	2000      	movs	r0, #0
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d0e1      	beq.n	8002192 <__gedf2+0x52>
 80021ce:	e7dc      	b.n	800218a <__gedf2+0x4a>
 80021d0:	429a      	cmp	r2, r3
 80021d2:	dc0a      	bgt.n	80021ea <__gedf2+0xaa>
 80021d4:	dbe8      	blt.n	80021a8 <__gedf2+0x68>
 80021d6:	454f      	cmp	r7, r9
 80021d8:	d8d7      	bhi.n	800218a <__gedf2+0x4a>
 80021da:	d00e      	beq.n	80021fa <__gedf2+0xba>
 80021dc:	2000      	movs	r0, #0
 80021de:	454f      	cmp	r7, r9
 80021e0:	d2d7      	bcs.n	8002192 <__gedf2+0x52>
 80021e2:	2900      	cmp	r1, #0
 80021e4:	d0e2      	beq.n	80021ac <__gedf2+0x6c>
 80021e6:	0008      	movs	r0, r1
 80021e8:	e7d3      	b.n	8002192 <__gedf2+0x52>
 80021ea:	4243      	negs	r3, r0
 80021ec:	4158      	adcs	r0, r3
 80021ee:	0040      	lsls	r0, r0, #1
 80021f0:	3801      	subs	r0, #1
 80021f2:	e7ce      	b.n	8002192 <__gedf2+0x52>
 80021f4:	2002      	movs	r0, #2
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7cb      	b.n	8002192 <__gedf2+0x52>
 80021fa:	45c4      	cmp	ip, r8
 80021fc:	d8c5      	bhi.n	800218a <__gedf2+0x4a>
 80021fe:	2000      	movs	r0, #0
 8002200:	45c4      	cmp	ip, r8
 8002202:	d2c6      	bcs.n	8002192 <__gedf2+0x52>
 8002204:	e7ed      	b.n	80021e2 <__gedf2+0xa2>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	000007ff 	.word	0x000007ff

0800220c <__ledf2>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4647      	mov	r7, r8
 8002210:	46ce      	mov	lr, r9
 8002212:	0004      	movs	r4, r0
 8002214:	0018      	movs	r0, r3
 8002216:	0016      	movs	r6, r2
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	0b1b      	lsrs	r3, r3, #12
 800221c:	4d2c      	ldr	r5, [pc, #176]	; (80022d0 <__ledf2+0xc4>)
 800221e:	004a      	lsls	r2, r1, #1
 8002220:	4699      	mov	r9, r3
 8002222:	b580      	push	{r7, lr}
 8002224:	0043      	lsls	r3, r0, #1
 8002226:	030f      	lsls	r7, r1, #12
 8002228:	46a4      	mov	ip, r4
 800222a:	46b0      	mov	r8, r6
 800222c:	0b3f      	lsrs	r7, r7, #12
 800222e:	0d52      	lsrs	r2, r2, #21
 8002230:	0fc9      	lsrs	r1, r1, #31
 8002232:	0d5b      	lsrs	r3, r3, #21
 8002234:	0fc0      	lsrs	r0, r0, #31
 8002236:	42aa      	cmp	r2, r5
 8002238:	d00d      	beq.n	8002256 <__ledf2+0x4a>
 800223a:	42ab      	cmp	r3, r5
 800223c:	d010      	beq.n	8002260 <__ledf2+0x54>
 800223e:	2a00      	cmp	r2, #0
 8002240:	d127      	bne.n	8002292 <__ledf2+0x86>
 8002242:	433c      	orrs	r4, r7
 8002244:	2b00      	cmp	r3, #0
 8002246:	d111      	bne.n	800226c <__ledf2+0x60>
 8002248:	464d      	mov	r5, r9
 800224a:	432e      	orrs	r6, r5
 800224c:	d10e      	bne.n	800226c <__ledf2+0x60>
 800224e:	2000      	movs	r0, #0
 8002250:	2c00      	cmp	r4, #0
 8002252:	d015      	beq.n	8002280 <__ledf2+0x74>
 8002254:	e00e      	b.n	8002274 <__ledf2+0x68>
 8002256:	003d      	movs	r5, r7
 8002258:	4325      	orrs	r5, r4
 800225a:	d110      	bne.n	800227e <__ledf2+0x72>
 800225c:	4293      	cmp	r3, r2
 800225e:	d118      	bne.n	8002292 <__ledf2+0x86>
 8002260:	464d      	mov	r5, r9
 8002262:	432e      	orrs	r6, r5
 8002264:	d10b      	bne.n	800227e <__ledf2+0x72>
 8002266:	2a00      	cmp	r2, #0
 8002268:	d102      	bne.n	8002270 <__ledf2+0x64>
 800226a:	433c      	orrs	r4, r7
 800226c:	2c00      	cmp	r4, #0
 800226e:	d00b      	beq.n	8002288 <__ledf2+0x7c>
 8002270:	4281      	cmp	r1, r0
 8002272:	d014      	beq.n	800229e <__ledf2+0x92>
 8002274:	2002      	movs	r0, #2
 8002276:	3901      	subs	r1, #1
 8002278:	4008      	ands	r0, r1
 800227a:	3801      	subs	r0, #1
 800227c:	e000      	b.n	8002280 <__ledf2+0x74>
 800227e:	2002      	movs	r0, #2
 8002280:	bcc0      	pop	{r6, r7}
 8002282:	46b9      	mov	r9, r7
 8002284:	46b0      	mov	r8, r6
 8002286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002288:	2800      	cmp	r0, #0
 800228a:	d1f9      	bne.n	8002280 <__ledf2+0x74>
 800228c:	2001      	movs	r0, #1
 800228e:	4240      	negs	r0, r0
 8002290:	e7f6      	b.n	8002280 <__ledf2+0x74>
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ec      	bne.n	8002270 <__ledf2+0x64>
 8002296:	464c      	mov	r4, r9
 8002298:	4326      	orrs	r6, r4
 800229a:	d1e9      	bne.n	8002270 <__ledf2+0x64>
 800229c:	e7ea      	b.n	8002274 <__ledf2+0x68>
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd04      	ble.n	80022ac <__ledf2+0xa0>
 80022a2:	4243      	negs	r3, r0
 80022a4:	4158      	adcs	r0, r3
 80022a6:	0040      	lsls	r0, r0, #1
 80022a8:	3801      	subs	r0, #1
 80022aa:	e7e9      	b.n	8002280 <__ledf2+0x74>
 80022ac:	429a      	cmp	r2, r3
 80022ae:	dbeb      	blt.n	8002288 <__ledf2+0x7c>
 80022b0:	454f      	cmp	r7, r9
 80022b2:	d8df      	bhi.n	8002274 <__ledf2+0x68>
 80022b4:	d006      	beq.n	80022c4 <__ledf2+0xb8>
 80022b6:	2000      	movs	r0, #0
 80022b8:	454f      	cmp	r7, r9
 80022ba:	d2e1      	bcs.n	8002280 <__ledf2+0x74>
 80022bc:	2900      	cmp	r1, #0
 80022be:	d0e5      	beq.n	800228c <__ledf2+0x80>
 80022c0:	0008      	movs	r0, r1
 80022c2:	e7dd      	b.n	8002280 <__ledf2+0x74>
 80022c4:	45c4      	cmp	ip, r8
 80022c6:	d8d5      	bhi.n	8002274 <__ledf2+0x68>
 80022c8:	2000      	movs	r0, #0
 80022ca:	45c4      	cmp	ip, r8
 80022cc:	d2d8      	bcs.n	8002280 <__ledf2+0x74>
 80022ce:	e7f5      	b.n	80022bc <__ledf2+0xb0>
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_dmul>:
 80022d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d6:	4645      	mov	r5, r8
 80022d8:	46de      	mov	lr, fp
 80022da:	4657      	mov	r7, sl
 80022dc:	464e      	mov	r6, r9
 80022de:	b5e0      	push	{r5, r6, r7, lr}
 80022e0:	001f      	movs	r7, r3
 80022e2:	030b      	lsls	r3, r1, #12
 80022e4:	0b1b      	lsrs	r3, r3, #12
 80022e6:	469b      	mov	fp, r3
 80022e8:	004d      	lsls	r5, r1, #1
 80022ea:	0fcb      	lsrs	r3, r1, #31
 80022ec:	0004      	movs	r4, r0
 80022ee:	4691      	mov	r9, r2
 80022f0:	4698      	mov	r8, r3
 80022f2:	b087      	sub	sp, #28
 80022f4:	0d6d      	lsrs	r5, r5, #21
 80022f6:	d100      	bne.n	80022fa <__aeabi_dmul+0x26>
 80022f8:	e1cd      	b.n	8002696 <__aeabi_dmul+0x3c2>
 80022fa:	4bce      	ldr	r3, [pc, #824]	; (8002634 <__aeabi_dmul+0x360>)
 80022fc:	429d      	cmp	r5, r3
 80022fe:	d100      	bne.n	8002302 <__aeabi_dmul+0x2e>
 8002300:	e1e9      	b.n	80026d6 <__aeabi_dmul+0x402>
 8002302:	465a      	mov	r2, fp
 8002304:	0f43      	lsrs	r3, r0, #29
 8002306:	00d2      	lsls	r2, r2, #3
 8002308:	4313      	orrs	r3, r2
 800230a:	2280      	movs	r2, #128	; 0x80
 800230c:	0412      	lsls	r2, r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	00c3      	lsls	r3, r0, #3
 8002312:	469a      	mov	sl, r3
 8002314:	4bc8      	ldr	r3, [pc, #800]	; (8002638 <__aeabi_dmul+0x364>)
 8002316:	4693      	mov	fp, r2
 8002318:	469c      	mov	ip, r3
 800231a:	2300      	movs	r3, #0
 800231c:	2600      	movs	r6, #0
 800231e:	4465      	add	r5, ip
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	033c      	lsls	r4, r7, #12
 8002324:	007b      	lsls	r3, r7, #1
 8002326:	4648      	mov	r0, r9
 8002328:	0b24      	lsrs	r4, r4, #12
 800232a:	0d5b      	lsrs	r3, r3, #21
 800232c:	0fff      	lsrs	r7, r7, #31
 800232e:	2b00      	cmp	r3, #0
 8002330:	d100      	bne.n	8002334 <__aeabi_dmul+0x60>
 8002332:	e189      	b.n	8002648 <__aeabi_dmul+0x374>
 8002334:	4abf      	ldr	r2, [pc, #764]	; (8002634 <__aeabi_dmul+0x360>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <__aeabi_dmul+0x9a>
 800233a:	0f42      	lsrs	r2, r0, #29
 800233c:	00e4      	lsls	r4, r4, #3
 800233e:	4322      	orrs	r2, r4
 8002340:	2480      	movs	r4, #128	; 0x80
 8002342:	0424      	lsls	r4, r4, #16
 8002344:	4314      	orrs	r4, r2
 8002346:	4abc      	ldr	r2, [pc, #752]	; (8002638 <__aeabi_dmul+0x364>)
 8002348:	2100      	movs	r1, #0
 800234a:	4694      	mov	ip, r2
 800234c:	4642      	mov	r2, r8
 800234e:	4463      	add	r3, ip
 8002350:	195b      	adds	r3, r3, r5
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	407a      	eors	r2, r7
 8002358:	3301      	adds	r3, #1
 800235a:	00c0      	lsls	r0, r0, #3
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	2e0a      	cmp	r6, #10
 8002362:	dd1c      	ble.n	800239e <__aeabi_dmul+0xca>
 8002364:	003a      	movs	r2, r7
 8002366:	2e0b      	cmp	r6, #11
 8002368:	d05e      	beq.n	8002428 <__aeabi_dmul+0x154>
 800236a:	4647      	mov	r7, r8
 800236c:	e056      	b.n	800241c <__aeabi_dmul+0x148>
 800236e:	4649      	mov	r1, r9
 8002370:	4bb0      	ldr	r3, [pc, #704]	; (8002634 <__aeabi_dmul+0x360>)
 8002372:	4321      	orrs	r1, r4
 8002374:	18eb      	adds	r3, r5, r3
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2900      	cmp	r1, #0
 800237a:	d12a      	bne.n	80023d2 <__aeabi_dmul+0xfe>
 800237c:	2080      	movs	r0, #128	; 0x80
 800237e:	2202      	movs	r2, #2
 8002380:	0100      	lsls	r0, r0, #4
 8002382:	002b      	movs	r3, r5
 8002384:	4684      	mov	ip, r0
 8002386:	4316      	orrs	r6, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	407a      	eors	r2, r7
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2e0a      	cmp	r6, #10
 8002394:	dd00      	ble.n	8002398 <__aeabi_dmul+0xc4>
 8002396:	e231      	b.n	80027fc <__aeabi_dmul+0x528>
 8002398:	2000      	movs	r0, #0
 800239a:	2400      	movs	r4, #0
 800239c:	2102      	movs	r1, #2
 800239e:	2e02      	cmp	r6, #2
 80023a0:	dc26      	bgt.n	80023f0 <__aeabi_dmul+0x11c>
 80023a2:	3e01      	subs	r6, #1
 80023a4:	2e01      	cmp	r6, #1
 80023a6:	d852      	bhi.n	800244e <__aeabi_dmul+0x17a>
 80023a8:	2902      	cmp	r1, #2
 80023aa:	d04c      	beq.n	8002446 <__aeabi_dmul+0x172>
 80023ac:	2901      	cmp	r1, #1
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dmul+0xde>
 80023b0:	e118      	b.n	80025e4 <__aeabi_dmul+0x310>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2400      	movs	r4, #0
 80023b6:	2500      	movs	r5, #0
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	4323      	orrs	r3, r4
 80023bc:	07d2      	lsls	r2, r2, #31
 80023be:	4313      	orrs	r3, r2
 80023c0:	0028      	movs	r0, r5
 80023c2:	0019      	movs	r1, r3
 80023c4:	b007      	add	sp, #28
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	2203      	movs	r2, #3
 80023d6:	0109      	lsls	r1, r1, #4
 80023d8:	002b      	movs	r3, r5
 80023da:	468c      	mov	ip, r1
 80023dc:	4316      	orrs	r6, r2
 80023de:	4642      	mov	r2, r8
 80023e0:	4463      	add	r3, ip
 80023e2:	407a      	eors	r2, r7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	2e0a      	cmp	r6, #10
 80023ea:	dd00      	ble.n	80023ee <__aeabi_dmul+0x11a>
 80023ec:	e228      	b.n	8002840 <__aeabi_dmul+0x56c>
 80023ee:	2103      	movs	r1, #3
 80023f0:	2501      	movs	r5, #1
 80023f2:	40b5      	lsls	r5, r6
 80023f4:	46ac      	mov	ip, r5
 80023f6:	26a6      	movs	r6, #166	; 0xa6
 80023f8:	4663      	mov	r3, ip
 80023fa:	00f6      	lsls	r6, r6, #3
 80023fc:	4035      	ands	r5, r6
 80023fe:	4233      	tst	r3, r6
 8002400:	d10b      	bne.n	800241a <__aeabi_dmul+0x146>
 8002402:	2690      	movs	r6, #144	; 0x90
 8002404:	00b6      	lsls	r6, r6, #2
 8002406:	4233      	tst	r3, r6
 8002408:	d118      	bne.n	800243c <__aeabi_dmul+0x168>
 800240a:	3eb9      	subs	r6, #185	; 0xb9
 800240c:	3eff      	subs	r6, #255	; 0xff
 800240e:	421e      	tst	r6, r3
 8002410:	d01d      	beq.n	800244e <__aeabi_dmul+0x17a>
 8002412:	46a3      	mov	fp, r4
 8002414:	4682      	mov	sl, r0
 8002416:	9100      	str	r1, [sp, #0]
 8002418:	e000      	b.n	800241c <__aeabi_dmul+0x148>
 800241a:	0017      	movs	r7, r2
 800241c:	9900      	ldr	r1, [sp, #0]
 800241e:	003a      	movs	r2, r7
 8002420:	2902      	cmp	r1, #2
 8002422:	d010      	beq.n	8002446 <__aeabi_dmul+0x172>
 8002424:	465c      	mov	r4, fp
 8002426:	4650      	mov	r0, sl
 8002428:	2903      	cmp	r1, #3
 800242a:	d1bf      	bne.n	80023ac <__aeabi_dmul+0xd8>
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	031b      	lsls	r3, r3, #12
 8002430:	431c      	orrs	r4, r3
 8002432:	0324      	lsls	r4, r4, #12
 8002434:	0005      	movs	r5, r0
 8002436:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <__aeabi_dmul+0x360>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	e7bd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800243c:	2480      	movs	r4, #128	; 0x80
 800243e:	2200      	movs	r2, #0
 8002440:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <__aeabi_dmul+0x360>)
 8002442:	0324      	lsls	r4, r4, #12
 8002444:	e7b8      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002446:	2400      	movs	r4, #0
 8002448:	2500      	movs	r5, #0
 800244a:	4b7a      	ldr	r3, [pc, #488]	; (8002634 <__aeabi_dmul+0x360>)
 800244c:	e7b4      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800244e:	4653      	mov	r3, sl
 8002450:	041e      	lsls	r6, r3, #16
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	0c1f      	lsrs	r7, r3, #16
 8002456:	0033      	movs	r3, r6
 8002458:	0c01      	lsrs	r1, r0, #16
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	0c00      	lsrs	r0, r0, #16
 800245e:	4343      	muls	r3, r0
 8002460:	4698      	mov	r8, r3
 8002462:	0003      	movs	r3, r0
 8002464:	437b      	muls	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	0033      	movs	r3, r6
 800246a:	434b      	muls	r3, r1
 800246c:	469c      	mov	ip, r3
 800246e:	4643      	mov	r3, r8
 8002470:	000d      	movs	r5, r1
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	469a      	mov	sl, r3
 8002476:	437d      	muls	r5, r7
 8002478:	44cc      	add	ip, r9
 800247a:	44d4      	add	ip, sl
 800247c:	9500      	str	r5, [sp, #0]
 800247e:	45e1      	cmp	r9, ip
 8002480:	d904      	bls.n	800248c <__aeabi_dmul+0x1b8>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4699      	mov	r9, r3
 8002488:	444d      	add	r5, r9
 800248a:	9500      	str	r5, [sp, #0]
 800248c:	4663      	mov	r3, ip
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	001d      	movs	r5, r3
 8002492:	4663      	mov	r3, ip
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	469c      	mov	ip, r3
 8002498:	4643      	mov	r3, r8
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	0c1b      	lsrs	r3, r3, #16
 800249e:	4698      	mov	r8, r3
 80024a0:	4663      	mov	r3, ip
 80024a2:	4443      	add	r3, r8
 80024a4:	9303      	str	r3, [sp, #12]
 80024a6:	0c23      	lsrs	r3, r4, #16
 80024a8:	4698      	mov	r8, r3
 80024aa:	0033      	movs	r3, r6
 80024ac:	0424      	lsls	r4, r4, #16
 80024ae:	0c24      	lsrs	r4, r4, #16
 80024b0:	4363      	muls	r3, r4
 80024b2:	469c      	mov	ip, r3
 80024b4:	0023      	movs	r3, r4
 80024b6:	437b      	muls	r3, r7
 80024b8:	4699      	mov	r9, r3
 80024ba:	4643      	mov	r3, r8
 80024bc:	435e      	muls	r6, r3
 80024be:	435f      	muls	r7, r3
 80024c0:	444e      	add	r6, r9
 80024c2:	4663      	mov	r3, ip
 80024c4:	46b2      	mov	sl, r6
 80024c6:	0c1e      	lsrs	r6, r3, #16
 80024c8:	4456      	add	r6, sl
 80024ca:	45b1      	cmp	r9, r6
 80024cc:	d903      	bls.n	80024d6 <__aeabi_dmul+0x202>
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	025b      	lsls	r3, r3, #9
 80024d2:	4699      	mov	r9, r3
 80024d4:	444f      	add	r7, r9
 80024d6:	0c33      	lsrs	r3, r6, #16
 80024d8:	4699      	mov	r9, r3
 80024da:	003b      	movs	r3, r7
 80024dc:	444b      	add	r3, r9
 80024de:	9305      	str	r3, [sp, #20]
 80024e0:	4663      	mov	r3, ip
 80024e2:	46ac      	mov	ip, r5
 80024e4:	041f      	lsls	r7, r3, #16
 80024e6:	0c3f      	lsrs	r7, r7, #16
 80024e8:	0436      	lsls	r6, r6, #16
 80024ea:	19f6      	adds	r6, r6, r7
 80024ec:	44b4      	add	ip, r6
 80024ee:	4663      	mov	r3, ip
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	465b      	mov	r3, fp
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	469c      	mov	ip, r3
 80024f8:	465b      	mov	r3, fp
 80024fa:	041f      	lsls	r7, r3, #16
 80024fc:	0c3f      	lsrs	r7, r7, #16
 80024fe:	003b      	movs	r3, r7
 8002500:	4343      	muls	r3, r0
 8002502:	4699      	mov	r9, r3
 8002504:	4663      	mov	r3, ip
 8002506:	4343      	muls	r3, r0
 8002508:	469a      	mov	sl, r3
 800250a:	464b      	mov	r3, r9
 800250c:	4660      	mov	r0, ip
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	469b      	mov	fp, r3
 8002512:	4348      	muls	r0, r1
 8002514:	4379      	muls	r1, r7
 8002516:	4451      	add	r1, sl
 8002518:	4459      	add	r1, fp
 800251a:	458a      	cmp	sl, r1
 800251c:	d903      	bls.n	8002526 <__aeabi_dmul+0x252>
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	469a      	mov	sl, r3
 8002524:	4450      	add	r0, sl
 8002526:	0c0b      	lsrs	r3, r1, #16
 8002528:	469a      	mov	sl, r3
 800252a:	464b      	mov	r3, r9
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	0c1b      	lsrs	r3, r3, #16
 8002530:	4699      	mov	r9, r3
 8002532:	003b      	movs	r3, r7
 8002534:	4363      	muls	r3, r4
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	4645      	mov	r5, r8
 800253a:	4449      	add	r1, r9
 800253c:	4699      	mov	r9, r3
 800253e:	4663      	mov	r3, ip
 8002540:	435c      	muls	r4, r3
 8002542:	436b      	muls	r3, r5
 8002544:	469c      	mov	ip, r3
 8002546:	464b      	mov	r3, r9
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	4698      	mov	r8, r3
 800254c:	436f      	muls	r7, r5
 800254e:	193f      	adds	r7, r7, r4
 8002550:	4447      	add	r7, r8
 8002552:	4450      	add	r0, sl
 8002554:	42bc      	cmp	r4, r7
 8002556:	d903      	bls.n	8002560 <__aeabi_dmul+0x28c>
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	025b      	lsls	r3, r3, #9
 800255c:	4698      	mov	r8, r3
 800255e:	44c4      	add	ip, r8
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	9d00      	ldr	r5, [sp, #0]
 8002564:	4698      	mov	r8, r3
 8002566:	4445      	add	r5, r8
 8002568:	42b5      	cmp	r5, r6
 800256a:	41b6      	sbcs	r6, r6
 800256c:	4273      	negs	r3, r6
 800256e:	4698      	mov	r8, r3
 8002570:	464b      	mov	r3, r9
 8002572:	041e      	lsls	r6, r3, #16
 8002574:	9b05      	ldr	r3, [sp, #20]
 8002576:	043c      	lsls	r4, r7, #16
 8002578:	4699      	mov	r9, r3
 800257a:	0c36      	lsrs	r6, r6, #16
 800257c:	19a4      	adds	r4, r4, r6
 800257e:	444c      	add	r4, r9
 8002580:	46a1      	mov	r9, r4
 8002582:	4683      	mov	fp, r0
 8002584:	186e      	adds	r6, r5, r1
 8002586:	44c1      	add	r9, r8
 8002588:	428e      	cmp	r6, r1
 800258a:	4189      	sbcs	r1, r1
 800258c:	44cb      	add	fp, r9
 800258e:	465d      	mov	r5, fp
 8002590:	4249      	negs	r1, r1
 8002592:	186d      	adds	r5, r5, r1
 8002594:	429c      	cmp	r4, r3
 8002596:	41a4      	sbcs	r4, r4
 8002598:	45c1      	cmp	r9, r8
 800259a:	419b      	sbcs	r3, r3
 800259c:	4583      	cmp	fp, r0
 800259e:	4180      	sbcs	r0, r0
 80025a0:	428d      	cmp	r5, r1
 80025a2:	4189      	sbcs	r1, r1
 80025a4:	425b      	negs	r3, r3
 80025a6:	4264      	negs	r4, r4
 80025a8:	431c      	orrs	r4, r3
 80025aa:	4240      	negs	r0, r0
 80025ac:	9b03      	ldr	r3, [sp, #12]
 80025ae:	4249      	negs	r1, r1
 80025b0:	4301      	orrs	r1, r0
 80025b2:	0270      	lsls	r0, r6, #9
 80025b4:	0c3f      	lsrs	r7, r7, #16
 80025b6:	4318      	orrs	r0, r3
 80025b8:	19e4      	adds	r4, r4, r7
 80025ba:	1e47      	subs	r7, r0, #1
 80025bc:	41b8      	sbcs	r0, r7
 80025be:	1864      	adds	r4, r4, r1
 80025c0:	4464      	add	r4, ip
 80025c2:	0df6      	lsrs	r6, r6, #23
 80025c4:	0261      	lsls	r1, r4, #9
 80025c6:	4330      	orrs	r0, r6
 80025c8:	0dec      	lsrs	r4, r5, #23
 80025ca:	026e      	lsls	r6, r5, #9
 80025cc:	430c      	orrs	r4, r1
 80025ce:	4330      	orrs	r0, r6
 80025d0:	01c9      	lsls	r1, r1, #7
 80025d2:	d400      	bmi.n	80025d6 <__aeabi_dmul+0x302>
 80025d4:	e0f1      	b.n	80027ba <__aeabi_dmul+0x4e6>
 80025d6:	2101      	movs	r1, #1
 80025d8:	0843      	lsrs	r3, r0, #1
 80025da:	4001      	ands	r1, r0
 80025dc:	430b      	orrs	r3, r1
 80025de:	07e0      	lsls	r0, r4, #31
 80025e0:	4318      	orrs	r0, r3
 80025e2:	0864      	lsrs	r4, r4, #1
 80025e4:	4915      	ldr	r1, [pc, #84]	; (800263c <__aeabi_dmul+0x368>)
 80025e6:	9b02      	ldr	r3, [sp, #8]
 80025e8:	468c      	mov	ip, r1
 80025ea:	4463      	add	r3, ip
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dc00      	bgt.n	80025f2 <__aeabi_dmul+0x31e>
 80025f0:	e097      	b.n	8002722 <__aeabi_dmul+0x44e>
 80025f2:	0741      	lsls	r1, r0, #29
 80025f4:	d009      	beq.n	800260a <__aeabi_dmul+0x336>
 80025f6:	210f      	movs	r1, #15
 80025f8:	4001      	ands	r1, r0
 80025fa:	2904      	cmp	r1, #4
 80025fc:	d005      	beq.n	800260a <__aeabi_dmul+0x336>
 80025fe:	1d01      	adds	r1, r0, #4
 8002600:	4281      	cmp	r1, r0
 8002602:	4180      	sbcs	r0, r0
 8002604:	4240      	negs	r0, r0
 8002606:	1824      	adds	r4, r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	01e1      	lsls	r1, r4, #7
 800260c:	d506      	bpl.n	800261c <__aeabi_dmul+0x348>
 800260e:	2180      	movs	r1, #128	; 0x80
 8002610:	00c9      	lsls	r1, r1, #3
 8002612:	468c      	mov	ip, r1
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <__aeabi_dmul+0x36c>)
 8002616:	401c      	ands	r4, r3
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	4463      	add	r3, ip
 800261c:	4909      	ldr	r1, [pc, #36]	; (8002644 <__aeabi_dmul+0x370>)
 800261e:	428b      	cmp	r3, r1
 8002620:	dd00      	ble.n	8002624 <__aeabi_dmul+0x350>
 8002622:	e710      	b.n	8002446 <__aeabi_dmul+0x172>
 8002624:	0761      	lsls	r1, r4, #29
 8002626:	08c5      	lsrs	r5, r0, #3
 8002628:	0264      	lsls	r4, r4, #9
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	430d      	orrs	r5, r1
 800262e:	0b24      	lsrs	r4, r4, #12
 8002630:	0d5b      	lsrs	r3, r3, #21
 8002632:	e6c1      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002634:	000007ff 	.word	0x000007ff
 8002638:	fffffc01 	.word	0xfffffc01
 800263c:	000003ff 	.word	0x000003ff
 8002640:	feffffff 	.word	0xfeffffff
 8002644:	000007fe 	.word	0x000007fe
 8002648:	464b      	mov	r3, r9
 800264a:	4323      	orrs	r3, r4
 800264c:	d059      	beq.n	8002702 <__aeabi_dmul+0x42e>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d100      	bne.n	8002654 <__aeabi_dmul+0x380>
 8002652:	e0a3      	b.n	800279c <__aeabi_dmul+0x4c8>
 8002654:	0020      	movs	r0, r4
 8002656:	f000 fdf9 	bl	800324c <__clzsi2>
 800265a:	0001      	movs	r1, r0
 800265c:	0003      	movs	r3, r0
 800265e:	390b      	subs	r1, #11
 8002660:	221d      	movs	r2, #29
 8002662:	1a52      	subs	r2, r2, r1
 8002664:	4649      	mov	r1, r9
 8002666:	0018      	movs	r0, r3
 8002668:	40d1      	lsrs	r1, r2
 800266a:	464a      	mov	r2, r9
 800266c:	3808      	subs	r0, #8
 800266e:	4082      	lsls	r2, r0
 8002670:	4084      	lsls	r4, r0
 8002672:	0010      	movs	r0, r2
 8002674:	430c      	orrs	r4, r1
 8002676:	4a74      	ldr	r2, [pc, #464]	; (8002848 <__aeabi_dmul+0x574>)
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	4694      	mov	ip, r2
 800267c:	4642      	mov	r2, r8
 800267e:	4463      	add	r3, ip
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	9b01      	ldr	r3, [sp, #4]
 8002684:	407a      	eors	r2, r7
 8002686:	3301      	adds	r3, #1
 8002688:	2100      	movs	r1, #0
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	9302      	str	r3, [sp, #8]
 800268e:	2e0a      	cmp	r6, #10
 8002690:	dd00      	ble.n	8002694 <__aeabi_dmul+0x3c0>
 8002692:	e667      	b.n	8002364 <__aeabi_dmul+0x90>
 8002694:	e683      	b.n	800239e <__aeabi_dmul+0xca>
 8002696:	465b      	mov	r3, fp
 8002698:	4303      	orrs	r3, r0
 800269a:	469a      	mov	sl, r3
 800269c:	d02a      	beq.n	80026f4 <__aeabi_dmul+0x420>
 800269e:	465b      	mov	r3, fp
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d06d      	beq.n	8002780 <__aeabi_dmul+0x4ac>
 80026a4:	4658      	mov	r0, fp
 80026a6:	f000 fdd1 	bl	800324c <__clzsi2>
 80026aa:	0001      	movs	r1, r0
 80026ac:	0003      	movs	r3, r0
 80026ae:	390b      	subs	r1, #11
 80026b0:	221d      	movs	r2, #29
 80026b2:	1a52      	subs	r2, r2, r1
 80026b4:	0021      	movs	r1, r4
 80026b6:	0018      	movs	r0, r3
 80026b8:	465d      	mov	r5, fp
 80026ba:	40d1      	lsrs	r1, r2
 80026bc:	3808      	subs	r0, #8
 80026be:	4085      	lsls	r5, r0
 80026c0:	000a      	movs	r2, r1
 80026c2:	4084      	lsls	r4, r0
 80026c4:	432a      	orrs	r2, r5
 80026c6:	4693      	mov	fp, r2
 80026c8:	46a2      	mov	sl, r4
 80026ca:	4d5f      	ldr	r5, [pc, #380]	; (8002848 <__aeabi_dmul+0x574>)
 80026cc:	2600      	movs	r6, #0
 80026ce:	1aed      	subs	r5, r5, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	e625      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026d6:	465b      	mov	r3, fp
 80026d8:	4303      	orrs	r3, r0
 80026da:	469a      	mov	sl, r3
 80026dc:	d105      	bne.n	80026ea <__aeabi_dmul+0x416>
 80026de:	2300      	movs	r3, #0
 80026e0:	469b      	mov	fp, r3
 80026e2:	3302      	adds	r3, #2
 80026e4:	2608      	movs	r6, #8
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	e61b      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026ea:	2303      	movs	r3, #3
 80026ec:	4682      	mov	sl, r0
 80026ee:	260c      	movs	r6, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	e616      	b.n	8002322 <__aeabi_dmul+0x4e>
 80026f4:	2300      	movs	r3, #0
 80026f6:	469b      	mov	fp, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	2604      	movs	r6, #4
 80026fc:	2500      	movs	r5, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	e60f      	b.n	8002322 <__aeabi_dmul+0x4e>
 8002702:	4642      	mov	r2, r8
 8002704:	3301      	adds	r3, #1
 8002706:	9501      	str	r5, [sp, #4]
 8002708:	431e      	orrs	r6, r3
 800270a:	9b01      	ldr	r3, [sp, #4]
 800270c:	407a      	eors	r2, r7
 800270e:	3301      	adds	r3, #1
 8002710:	2400      	movs	r4, #0
 8002712:	2000      	movs	r0, #0
 8002714:	2101      	movs	r1, #1
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	2e0a      	cmp	r6, #10
 800271c:	dd00      	ble.n	8002720 <__aeabi_dmul+0x44c>
 800271e:	e621      	b.n	8002364 <__aeabi_dmul+0x90>
 8002720:	e63d      	b.n	800239e <__aeabi_dmul+0xca>
 8002722:	2101      	movs	r1, #1
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	2938      	cmp	r1, #56	; 0x38
 8002728:	dd00      	ble.n	800272c <__aeabi_dmul+0x458>
 800272a:	e642      	b.n	80023b2 <__aeabi_dmul+0xde>
 800272c:	291f      	cmp	r1, #31
 800272e:	dd47      	ble.n	80027c0 <__aeabi_dmul+0x4ec>
 8002730:	261f      	movs	r6, #31
 8002732:	0025      	movs	r5, r4
 8002734:	4276      	negs	r6, r6
 8002736:	1af3      	subs	r3, r6, r3
 8002738:	40dd      	lsrs	r5, r3
 800273a:	002b      	movs	r3, r5
 800273c:	2920      	cmp	r1, #32
 800273e:	d005      	beq.n	800274c <__aeabi_dmul+0x478>
 8002740:	4942      	ldr	r1, [pc, #264]	; (800284c <__aeabi_dmul+0x578>)
 8002742:	9d02      	ldr	r5, [sp, #8]
 8002744:	468c      	mov	ip, r1
 8002746:	4465      	add	r5, ip
 8002748:	40ac      	lsls	r4, r5
 800274a:	4320      	orrs	r0, r4
 800274c:	1e41      	subs	r1, r0, #1
 800274e:	4188      	sbcs	r0, r1
 8002750:	4318      	orrs	r0, r3
 8002752:	2307      	movs	r3, #7
 8002754:	001d      	movs	r5, r3
 8002756:	2400      	movs	r4, #0
 8002758:	4005      	ands	r5, r0
 800275a:	4203      	tst	r3, r0
 800275c:	d04a      	beq.n	80027f4 <__aeabi_dmul+0x520>
 800275e:	230f      	movs	r3, #15
 8002760:	2400      	movs	r4, #0
 8002762:	4003      	ands	r3, r0
 8002764:	2b04      	cmp	r3, #4
 8002766:	d042      	beq.n	80027ee <__aeabi_dmul+0x51a>
 8002768:	1d03      	adds	r3, r0, #4
 800276a:	4283      	cmp	r3, r0
 800276c:	4180      	sbcs	r0, r0
 800276e:	4240      	negs	r0, r0
 8002770:	1824      	adds	r4, r4, r0
 8002772:	0018      	movs	r0, r3
 8002774:	0223      	lsls	r3, r4, #8
 8002776:	d53a      	bpl.n	80027ee <__aeabi_dmul+0x51a>
 8002778:	2301      	movs	r3, #1
 800277a:	2400      	movs	r4, #0
 800277c:	2500      	movs	r5, #0
 800277e:	e61b      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002780:	f000 fd64 	bl	800324c <__clzsi2>
 8002784:	0001      	movs	r1, r0
 8002786:	0003      	movs	r3, r0
 8002788:	3115      	adds	r1, #21
 800278a:	3320      	adds	r3, #32
 800278c:	291c      	cmp	r1, #28
 800278e:	dd8f      	ble.n	80026b0 <__aeabi_dmul+0x3dc>
 8002790:	3808      	subs	r0, #8
 8002792:	2200      	movs	r2, #0
 8002794:	4084      	lsls	r4, r0
 8002796:	4692      	mov	sl, r2
 8002798:	46a3      	mov	fp, r4
 800279a:	e796      	b.n	80026ca <__aeabi_dmul+0x3f6>
 800279c:	f000 fd56 	bl	800324c <__clzsi2>
 80027a0:	0001      	movs	r1, r0
 80027a2:	0003      	movs	r3, r0
 80027a4:	3115      	adds	r1, #21
 80027a6:	3320      	adds	r3, #32
 80027a8:	291c      	cmp	r1, #28
 80027aa:	dc00      	bgt.n	80027ae <__aeabi_dmul+0x4da>
 80027ac:	e758      	b.n	8002660 <__aeabi_dmul+0x38c>
 80027ae:	0002      	movs	r2, r0
 80027b0:	464c      	mov	r4, r9
 80027b2:	3a08      	subs	r2, #8
 80027b4:	2000      	movs	r0, #0
 80027b6:	4094      	lsls	r4, r2
 80027b8:	e75d      	b.n	8002676 <__aeabi_dmul+0x3a2>
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	e711      	b.n	80025e4 <__aeabi_dmul+0x310>
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <__aeabi_dmul+0x57c>)
 80027c2:	0026      	movs	r6, r4
 80027c4:	469c      	mov	ip, r3
 80027c6:	0003      	movs	r3, r0
 80027c8:	9d02      	ldr	r5, [sp, #8]
 80027ca:	40cb      	lsrs	r3, r1
 80027cc:	4465      	add	r5, ip
 80027ce:	40ae      	lsls	r6, r5
 80027d0:	431e      	orrs	r6, r3
 80027d2:	0003      	movs	r3, r0
 80027d4:	40ab      	lsls	r3, r5
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	4183      	sbcs	r3, r0
 80027da:	0030      	movs	r0, r6
 80027dc:	4318      	orrs	r0, r3
 80027de:	40cc      	lsrs	r4, r1
 80027e0:	0743      	lsls	r3, r0, #29
 80027e2:	d0c7      	beq.n	8002774 <__aeabi_dmul+0x4a0>
 80027e4:	230f      	movs	r3, #15
 80027e6:	4003      	ands	r3, r0
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d1bd      	bne.n	8002768 <__aeabi_dmul+0x494>
 80027ec:	e7c2      	b.n	8002774 <__aeabi_dmul+0x4a0>
 80027ee:	0765      	lsls	r5, r4, #29
 80027f0:	0264      	lsls	r4, r4, #9
 80027f2:	0b24      	lsrs	r4, r4, #12
 80027f4:	08c0      	lsrs	r0, r0, #3
 80027f6:	2300      	movs	r3, #0
 80027f8:	4305      	orrs	r5, r0
 80027fa:	e5dd      	b.n	80023b8 <__aeabi_dmul+0xe4>
 80027fc:	2500      	movs	r5, #0
 80027fe:	2302      	movs	r3, #2
 8002800:	2e0f      	cmp	r6, #15
 8002802:	d10c      	bne.n	800281e <__aeabi_dmul+0x54a>
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	465b      	mov	r3, fp
 8002808:	0324      	lsls	r4, r4, #12
 800280a:	4223      	tst	r3, r4
 800280c:	d00e      	beq.n	800282c <__aeabi_dmul+0x558>
 800280e:	4221      	tst	r1, r4
 8002810:	d10c      	bne.n	800282c <__aeabi_dmul+0x558>
 8002812:	430c      	orrs	r4, r1
 8002814:	0324      	lsls	r4, r4, #12
 8002816:	003a      	movs	r2, r7
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <__aeabi_dmul+0x580>)
 800281a:	0b24      	lsrs	r4, r4, #12
 800281c:	e5cc      	b.n	80023b8 <__aeabi_dmul+0xe4>
 800281e:	2e0b      	cmp	r6, #11
 8002820:	d000      	beq.n	8002824 <__aeabi_dmul+0x550>
 8002822:	e5a2      	b.n	800236a <__aeabi_dmul+0x96>
 8002824:	468b      	mov	fp, r1
 8002826:	46aa      	mov	sl, r5
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	e5f7      	b.n	800241c <__aeabi_dmul+0x148>
 800282c:	2480      	movs	r4, #128	; 0x80
 800282e:	465b      	mov	r3, fp
 8002830:	0324      	lsls	r4, r4, #12
 8002832:	431c      	orrs	r4, r3
 8002834:	0324      	lsls	r4, r4, #12
 8002836:	4642      	mov	r2, r8
 8002838:	4655      	mov	r5, sl
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <__aeabi_dmul+0x580>)
 800283c:	0b24      	lsrs	r4, r4, #12
 800283e:	e5bb      	b.n	80023b8 <__aeabi_dmul+0xe4>
 8002840:	464d      	mov	r5, r9
 8002842:	0021      	movs	r1, r4
 8002844:	2303      	movs	r3, #3
 8002846:	e7db      	b.n	8002800 <__aeabi_dmul+0x52c>
 8002848:	fffffc0d 	.word	0xfffffc0d
 800284c:	0000043e 	.word	0x0000043e
 8002850:	0000041e 	.word	0x0000041e
 8002854:	000007ff 	.word	0x000007ff

08002858 <__aeabi_dsub>:
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285a:	4657      	mov	r7, sl
 800285c:	464e      	mov	r6, r9
 800285e:	4645      	mov	r5, r8
 8002860:	46de      	mov	lr, fp
 8002862:	b5e0      	push	{r5, r6, r7, lr}
 8002864:	000d      	movs	r5, r1
 8002866:	0004      	movs	r4, r0
 8002868:	0019      	movs	r1, r3
 800286a:	0010      	movs	r0, r2
 800286c:	032b      	lsls	r3, r5, #12
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	0f62      	lsrs	r2, r4, #29
 8002872:	431a      	orrs	r2, r3
 8002874:	00e3      	lsls	r3, r4, #3
 8002876:	030c      	lsls	r4, r1, #12
 8002878:	0a64      	lsrs	r4, r4, #9
 800287a:	0f47      	lsrs	r7, r0, #29
 800287c:	4327      	orrs	r7, r4
 800287e:	4cd0      	ldr	r4, [pc, #832]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002880:	006e      	lsls	r6, r5, #1
 8002882:	4691      	mov	r9, r2
 8002884:	b083      	sub	sp, #12
 8002886:	004a      	lsls	r2, r1, #1
 8002888:	00c0      	lsls	r0, r0, #3
 800288a:	4698      	mov	r8, r3
 800288c:	46a2      	mov	sl, r4
 800288e:	0d76      	lsrs	r6, r6, #21
 8002890:	0fed      	lsrs	r5, r5, #31
 8002892:	0d52      	lsrs	r2, r2, #21
 8002894:	0fc9      	lsrs	r1, r1, #31
 8002896:	9001      	str	r0, [sp, #4]
 8002898:	42a2      	cmp	r2, r4
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x46>
 800289c:	e0b9      	b.n	8002a12 <__aeabi_dsub+0x1ba>
 800289e:	2401      	movs	r4, #1
 80028a0:	4061      	eors	r1, r4
 80028a2:	468b      	mov	fp, r1
 80028a4:	428d      	cmp	r5, r1
 80028a6:	d100      	bne.n	80028aa <__aeabi_dsub+0x52>
 80028a8:	e08d      	b.n	80029c6 <__aeabi_dsub+0x16e>
 80028aa:	1ab4      	subs	r4, r6, r2
 80028ac:	46a4      	mov	ip, r4
 80028ae:	2c00      	cmp	r4, #0
 80028b0:	dc00      	bgt.n	80028b4 <__aeabi_dsub+0x5c>
 80028b2:	e0b7      	b.n	8002a24 <__aeabi_dsub+0x1cc>
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d100      	bne.n	80028ba <__aeabi_dsub+0x62>
 80028b8:	e0cb      	b.n	8002a52 <__aeabi_dsub+0x1fa>
 80028ba:	4ac1      	ldr	r2, [pc, #772]	; (8002bc0 <__aeabi_dsub+0x368>)
 80028bc:	4296      	cmp	r6, r2
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x6a>
 80028c0:	e186      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0412      	lsls	r2, r2, #16
 80028c6:	4317      	orrs	r7, r2
 80028c8:	4662      	mov	r2, ip
 80028ca:	2a38      	cmp	r2, #56	; 0x38
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0x78>
 80028ce:	e1a4      	b.n	8002c1a <__aeabi_dsub+0x3c2>
 80028d0:	2a1f      	cmp	r2, #31
 80028d2:	dd00      	ble.n	80028d6 <__aeabi_dsub+0x7e>
 80028d4:	e21d      	b.n	8002d12 <__aeabi_dsub+0x4ba>
 80028d6:	4661      	mov	r1, ip
 80028d8:	2220      	movs	r2, #32
 80028da:	003c      	movs	r4, r7
 80028dc:	1a52      	subs	r2, r2, r1
 80028de:	0001      	movs	r1, r0
 80028e0:	4090      	lsls	r0, r2
 80028e2:	4094      	lsls	r4, r2
 80028e4:	1e42      	subs	r2, r0, #1
 80028e6:	4190      	sbcs	r0, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	46a0      	mov	r8, r4
 80028ec:	4664      	mov	r4, ip
 80028ee:	40d7      	lsrs	r7, r2
 80028f0:	464a      	mov	r2, r9
 80028f2:	40e1      	lsrs	r1, r4
 80028f4:	4644      	mov	r4, r8
 80028f6:	1bd2      	subs	r2, r2, r7
 80028f8:	4691      	mov	r9, r2
 80028fa:	430c      	orrs	r4, r1
 80028fc:	4304      	orrs	r4, r0
 80028fe:	1b1c      	subs	r4, r3, r4
 8002900:	42a3      	cmp	r3, r4
 8002902:	4192      	sbcs	r2, r2
 8002904:	464b      	mov	r3, r9
 8002906:	4252      	negs	r2, r2
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	469a      	mov	sl, r3
 800290c:	4653      	mov	r3, sl
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	d400      	bmi.n	8002914 <__aeabi_dsub+0xbc>
 8002912:	e12b      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002914:	4653      	mov	r3, sl
 8002916:	025a      	lsls	r2, r3, #9
 8002918:	0a53      	lsrs	r3, r2, #9
 800291a:	469a      	mov	sl, r3
 800291c:	4653      	mov	r3, sl
 800291e:	2b00      	cmp	r3, #0
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0xcc>
 8002922:	e166      	b.n	8002bf2 <__aeabi_dsub+0x39a>
 8002924:	4650      	mov	r0, sl
 8002926:	f000 fc91 	bl	800324c <__clzsi2>
 800292a:	0003      	movs	r3, r0
 800292c:	3b08      	subs	r3, #8
 800292e:	2220      	movs	r2, #32
 8002930:	0020      	movs	r0, r4
 8002932:	1ad2      	subs	r2, r2, r3
 8002934:	4651      	mov	r1, sl
 8002936:	40d0      	lsrs	r0, r2
 8002938:	4099      	lsls	r1, r3
 800293a:	0002      	movs	r2, r0
 800293c:	409c      	lsls	r4, r3
 800293e:	430a      	orrs	r2, r1
 8002940:	429e      	cmp	r6, r3
 8002942:	dd00      	ble.n	8002946 <__aeabi_dsub+0xee>
 8002944:	e164      	b.n	8002c10 <__aeabi_dsub+0x3b8>
 8002946:	1b9b      	subs	r3, r3, r6
 8002948:	1c59      	adds	r1, r3, #1
 800294a:	291f      	cmp	r1, #31
 800294c:	dd00      	ble.n	8002950 <__aeabi_dsub+0xf8>
 800294e:	e0fe      	b.n	8002b4e <__aeabi_dsub+0x2f6>
 8002950:	2320      	movs	r3, #32
 8002952:	0010      	movs	r0, r2
 8002954:	0026      	movs	r6, r4
 8002956:	1a5b      	subs	r3, r3, r1
 8002958:	409c      	lsls	r4, r3
 800295a:	4098      	lsls	r0, r3
 800295c:	40ce      	lsrs	r6, r1
 800295e:	40ca      	lsrs	r2, r1
 8002960:	1e63      	subs	r3, r4, #1
 8002962:	419c      	sbcs	r4, r3
 8002964:	4330      	orrs	r0, r6
 8002966:	4692      	mov	sl, r2
 8002968:	2600      	movs	r6, #0
 800296a:	4304      	orrs	r4, r0
 800296c:	0763      	lsls	r3, r4, #29
 800296e:	d009      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002970:	230f      	movs	r3, #15
 8002972:	4023      	ands	r3, r4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d005      	beq.n	8002984 <__aeabi_dsub+0x12c>
 8002978:	1d23      	adds	r3, r4, #4
 800297a:	42a3      	cmp	r3, r4
 800297c:	41a4      	sbcs	r4, r4
 800297e:	4264      	negs	r4, r4
 8002980:	44a2      	add	sl, r4
 8002982:	001c      	movs	r4, r3
 8002984:	4653      	mov	r3, sl
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	d400      	bmi.n	800298c <__aeabi_dsub+0x134>
 800298a:	e0f2      	b.n	8002b72 <__aeabi_dsub+0x31a>
 800298c:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <__aeabi_dsub+0x368>)
 800298e:	3601      	adds	r6, #1
 8002990:	429e      	cmp	r6, r3
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x13e>
 8002994:	e10f      	b.n	8002bb6 <__aeabi_dsub+0x35e>
 8002996:	4653      	mov	r3, sl
 8002998:	498a      	ldr	r1, [pc, #552]	; (8002bc4 <__aeabi_dsub+0x36c>)
 800299a:	08e4      	lsrs	r4, r4, #3
 800299c:	400b      	ands	r3, r1
 800299e:	0019      	movs	r1, r3
 80029a0:	075b      	lsls	r3, r3, #29
 80029a2:	4323      	orrs	r3, r4
 80029a4:	0572      	lsls	r2, r6, #21
 80029a6:	024c      	lsls	r4, r1, #9
 80029a8:	0b24      	lsrs	r4, r4, #12
 80029aa:	0d52      	lsrs	r2, r2, #21
 80029ac:	0512      	lsls	r2, r2, #20
 80029ae:	4322      	orrs	r2, r4
 80029b0:	07ed      	lsls	r5, r5, #31
 80029b2:	432a      	orrs	r2, r5
 80029b4:	0018      	movs	r0, r3
 80029b6:	0011      	movs	r1, r2
 80029b8:	b003      	add	sp, #12
 80029ba:	bcf0      	pop	{r4, r5, r6, r7}
 80029bc:	46bb      	mov	fp, r7
 80029be:	46b2      	mov	sl, r6
 80029c0:	46a9      	mov	r9, r5
 80029c2:	46a0      	mov	r8, r4
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c6:	1ab4      	subs	r4, r6, r2
 80029c8:	46a4      	mov	ip, r4
 80029ca:	2c00      	cmp	r4, #0
 80029cc:	dd59      	ble.n	8002a82 <__aeabi_dsub+0x22a>
 80029ce:	2a00      	cmp	r2, #0
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x17c>
 80029d2:	e0b0      	b.n	8002b36 <__aeabi_dsub+0x2de>
 80029d4:	4556      	cmp	r6, sl
 80029d6:	d100      	bne.n	80029da <__aeabi_dsub+0x182>
 80029d8:	e0fa      	b.n	8002bd0 <__aeabi_dsub+0x378>
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	0412      	lsls	r2, r2, #16
 80029de:	4317      	orrs	r7, r2
 80029e0:	4662      	mov	r2, ip
 80029e2:	2a38      	cmp	r2, #56	; 0x38
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x190>
 80029e6:	e0d4      	b.n	8002b92 <__aeabi_dsub+0x33a>
 80029e8:	2a1f      	cmp	r2, #31
 80029ea:	dc00      	bgt.n	80029ee <__aeabi_dsub+0x196>
 80029ec:	e1c0      	b.n	8002d70 <__aeabi_dsub+0x518>
 80029ee:	0039      	movs	r1, r7
 80029f0:	3a20      	subs	r2, #32
 80029f2:	40d1      	lsrs	r1, r2
 80029f4:	4662      	mov	r2, ip
 80029f6:	2a20      	cmp	r2, #32
 80029f8:	d006      	beq.n	8002a08 <__aeabi_dsub+0x1b0>
 80029fa:	4664      	mov	r4, ip
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1b12      	subs	r2, r2, r4
 8002a00:	003c      	movs	r4, r7
 8002a02:	4094      	lsls	r4, r2
 8002a04:	4304      	orrs	r4, r0
 8002a06:	9401      	str	r4, [sp, #4]
 8002a08:	9c01      	ldr	r4, [sp, #4]
 8002a0a:	1e62      	subs	r2, r4, #1
 8002a0c:	4194      	sbcs	r4, r2
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	e0c3      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002a12:	003c      	movs	r4, r7
 8002a14:	4304      	orrs	r4, r0
 8002a16:	d02b      	beq.n	8002a70 <__aeabi_dsub+0x218>
 8002a18:	468b      	mov	fp, r1
 8002a1a:	428d      	cmp	r5, r1
 8002a1c:	d02e      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a1e:	4c6a      	ldr	r4, [pc, #424]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a20:	46a4      	mov	ip, r4
 8002a22:	44b4      	add	ip, r6
 8002a24:	4664      	mov	r4, ip
 8002a26:	2c00      	cmp	r4, #0
 8002a28:	d05f      	beq.n	8002aea <__aeabi_dsub+0x292>
 8002a2a:	1b94      	subs	r4, r2, r6
 8002a2c:	46a4      	mov	ip, r4
 8002a2e:	2e00      	cmp	r6, #0
 8002a30:	d000      	beq.n	8002a34 <__aeabi_dsub+0x1dc>
 8002a32:	e120      	b.n	8002c76 <__aeabi_dsub+0x41e>
 8002a34:	464c      	mov	r4, r9
 8002a36:	431c      	orrs	r4, r3
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x1e4>
 8002a3a:	e1c7      	b.n	8002dcc <__aeabi_dsub+0x574>
 8002a3c:	4661      	mov	r1, ip
 8002a3e:	1e4c      	subs	r4, r1, #1
 8002a40:	2901      	cmp	r1, #1
 8002a42:	d100      	bne.n	8002a46 <__aeabi_dsub+0x1ee>
 8002a44:	e223      	b.n	8002e8e <__aeabi_dsub+0x636>
 8002a46:	4d5e      	ldr	r5, [pc, #376]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a48:	45ac      	cmp	ip, r5
 8002a4a:	d100      	bne.n	8002a4e <__aeabi_dsub+0x1f6>
 8002a4c:	e1d8      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002a4e:	46a4      	mov	ip, r4
 8002a50:	e11a      	b.n	8002c88 <__aeabi_dsub+0x430>
 8002a52:	003a      	movs	r2, r7
 8002a54:	4302      	orrs	r2, r0
 8002a56:	d100      	bne.n	8002a5a <__aeabi_dsub+0x202>
 8002a58:	e0e4      	b.n	8002c24 <__aeabi_dsub+0x3cc>
 8002a5a:	0022      	movs	r2, r4
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	2c01      	cmp	r4, #1
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x20c>
 8002a62:	e1c3      	b.n	8002dec <__aeabi_dsub+0x594>
 8002a64:	4956      	ldr	r1, [pc, #344]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d100      	bne.n	8002a6c <__aeabi_dsub+0x214>
 8002a6a:	e0b1      	b.n	8002bd0 <__aeabi_dsub+0x378>
 8002a6c:	4694      	mov	ip, r2
 8002a6e:	e72b      	b.n	80028c8 <__aeabi_dsub+0x70>
 8002a70:	2401      	movs	r4, #1
 8002a72:	4061      	eors	r1, r4
 8002a74:	468b      	mov	fp, r1
 8002a76:	428d      	cmp	r5, r1
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x224>
 8002a7a:	e716      	b.n	80028aa <__aeabi_dsub+0x52>
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <__aeabi_dsub+0x370>)
 8002a7e:	468c      	mov	ip, r1
 8002a80:	44b4      	add	ip, r6
 8002a82:	4664      	mov	r4, ip
 8002a84:	2c00      	cmp	r4, #0
 8002a86:	d100      	bne.n	8002a8a <__aeabi_dsub+0x232>
 8002a88:	e0d3      	b.n	8002c32 <__aeabi_dsub+0x3da>
 8002a8a:	1b91      	subs	r1, r2, r6
 8002a8c:	468c      	mov	ip, r1
 8002a8e:	2e00      	cmp	r6, #0
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x23c>
 8002a92:	e15e      	b.n	8002d52 <__aeabi_dsub+0x4fa>
 8002a94:	494a      	ldr	r1, [pc, #296]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002a96:	428a      	cmp	r2, r1
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x244>
 8002a9a:	e1be      	b.n	8002e1a <__aeabi_dsub+0x5c2>
 8002a9c:	2180      	movs	r1, #128	; 0x80
 8002a9e:	464c      	mov	r4, r9
 8002aa0:	0409      	lsls	r1, r1, #16
 8002aa2:	430c      	orrs	r4, r1
 8002aa4:	46a1      	mov	r9, r4
 8002aa6:	4661      	mov	r1, ip
 8002aa8:	2938      	cmp	r1, #56	; 0x38
 8002aaa:	dd00      	ble.n	8002aae <__aeabi_dsub+0x256>
 8002aac:	e1ba      	b.n	8002e24 <__aeabi_dsub+0x5cc>
 8002aae:	291f      	cmp	r1, #31
 8002ab0:	dd00      	ble.n	8002ab4 <__aeabi_dsub+0x25c>
 8002ab2:	e227      	b.n	8002f04 <__aeabi_dsub+0x6ac>
 8002ab4:	2420      	movs	r4, #32
 8002ab6:	1a64      	subs	r4, r4, r1
 8002ab8:	4649      	mov	r1, r9
 8002aba:	40a1      	lsls	r1, r4
 8002abc:	001e      	movs	r6, r3
 8002abe:	4688      	mov	r8, r1
 8002ac0:	4661      	mov	r1, ip
 8002ac2:	40a3      	lsls	r3, r4
 8002ac4:	40ce      	lsrs	r6, r1
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1e5c      	subs	r4, r3, #1
 8002aca:	41a3      	sbcs	r3, r4
 8002acc:	4331      	orrs	r1, r6
 8002ace:	4319      	orrs	r1, r3
 8002ad0:	000c      	movs	r4, r1
 8002ad2:	4663      	mov	r3, ip
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	40d9      	lsrs	r1, r3
 8002ad8:	187f      	adds	r7, r7, r1
 8002ada:	1824      	adds	r4, r4, r0
 8002adc:	4284      	cmp	r4, r0
 8002ade:	419b      	sbcs	r3, r3
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	469a      	mov	sl, r3
 8002ae4:	0016      	movs	r6, r2
 8002ae6:	44ba      	add	sl, r7
 8002ae8:	e05d      	b.n	8002ba6 <__aeabi_dsub+0x34e>
 8002aea:	4c38      	ldr	r4, [pc, #224]	; (8002bcc <__aeabi_dsub+0x374>)
 8002aec:	1c72      	adds	r2, r6, #1
 8002aee:	4222      	tst	r2, r4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dsub+0x29c>
 8002af2:	e0df      	b.n	8002cb4 <__aeabi_dsub+0x45c>
 8002af4:	464a      	mov	r2, r9
 8002af6:	431a      	orrs	r2, r3
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d000      	beq.n	8002afe <__aeabi_dsub+0x2a6>
 8002afc:	e15c      	b.n	8002db8 <__aeabi_dsub+0x560>
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x2ac>
 8002b02:	e1cf      	b.n	8002ea4 <__aeabi_dsub+0x64c>
 8002b04:	003a      	movs	r2, r7
 8002b06:	4302      	orrs	r2, r0
 8002b08:	d100      	bne.n	8002b0c <__aeabi_dsub+0x2b4>
 8002b0a:	e17f      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002b0c:	1a1c      	subs	r4, r3, r0
 8002b0e:	464a      	mov	r2, r9
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	4189      	sbcs	r1, r1
 8002b14:	1bd2      	subs	r2, r2, r7
 8002b16:	4249      	negs	r1, r1
 8002b18:	1a52      	subs	r2, r2, r1
 8002b1a:	4692      	mov	sl, r2
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	d400      	bmi.n	8002b22 <__aeabi_dsub+0x2ca>
 8002b20:	e20a      	b.n	8002f38 <__aeabi_dsub+0x6e0>
 8002b22:	1ac4      	subs	r4, r0, r3
 8002b24:	42a0      	cmp	r0, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	464b      	mov	r3, r9
 8002b2a:	4240      	negs	r0, r0
 8002b2c:	1aff      	subs	r7, r7, r3
 8002b2e:	1a3b      	subs	r3, r7, r0
 8002b30:	469a      	mov	sl, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e71a      	b.n	800296c <__aeabi_dsub+0x114>
 8002b36:	003a      	movs	r2, r7
 8002b38:	4302      	orrs	r2, r0
 8002b3a:	d073      	beq.n	8002c24 <__aeabi_dsub+0x3cc>
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	2c01      	cmp	r4, #1
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x2ee>
 8002b44:	e0cb      	b.n	8002cde <__aeabi_dsub+0x486>
 8002b46:	4554      	cmp	r4, sl
 8002b48:	d042      	beq.n	8002bd0 <__aeabi_dsub+0x378>
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	e748      	b.n	80029e0 <__aeabi_dsub+0x188>
 8002b4e:	0010      	movs	r0, r2
 8002b50:	3b1f      	subs	r3, #31
 8002b52:	40d8      	lsrs	r0, r3
 8002b54:	2920      	cmp	r1, #32
 8002b56:	d003      	beq.n	8002b60 <__aeabi_dsub+0x308>
 8002b58:	2340      	movs	r3, #64	; 0x40
 8002b5a:	1a5b      	subs	r3, r3, r1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	4314      	orrs	r4, r2
 8002b60:	1e63      	subs	r3, r4, #1
 8002b62:	419c      	sbcs	r4, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	2600      	movs	r6, #0
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4304      	orrs	r4, r0
 8002b6c:	0763      	lsls	r3, r4, #29
 8002b6e:	d000      	beq.n	8002b72 <__aeabi_dsub+0x31a>
 8002b70:	e6fe      	b.n	8002970 <__aeabi_dsub+0x118>
 8002b72:	4652      	mov	r2, sl
 8002b74:	08e3      	lsrs	r3, r4, #3
 8002b76:	0752      	lsls	r2, r2, #29
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	4652      	mov	r2, sl
 8002b7c:	46b4      	mov	ip, r6
 8002b7e:	08d2      	lsrs	r2, r2, #3
 8002b80:	490f      	ldr	r1, [pc, #60]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002b82:	458c      	cmp	ip, r1
 8002b84:	d02a      	beq.n	8002bdc <__aeabi_dsub+0x384>
 8002b86:	0312      	lsls	r2, r2, #12
 8002b88:	0b14      	lsrs	r4, r2, #12
 8002b8a:	4662      	mov	r2, ip
 8002b8c:	0552      	lsls	r2, r2, #21
 8002b8e:	0d52      	lsrs	r2, r2, #21
 8002b90:	e70c      	b.n	80029ac <__aeabi_dsub+0x154>
 8002b92:	003c      	movs	r4, r7
 8002b94:	4304      	orrs	r4, r0
 8002b96:	1e62      	subs	r2, r4, #1
 8002b98:	4194      	sbcs	r4, r2
 8002b9a:	18e4      	adds	r4, r4, r3
 8002b9c:	429c      	cmp	r4, r3
 8002b9e:	4192      	sbcs	r2, r2
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	444a      	add	r2, r9
 8002ba4:	4692      	mov	sl, r2
 8002ba6:	4653      	mov	r3, sl
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	d5df      	bpl.n	8002b6c <__aeabi_dsub+0x314>
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__aeabi_dsub+0x368>)
 8002bae:	3601      	adds	r6, #1
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	d000      	beq.n	8002bb6 <__aeabi_dsub+0x35e>
 8002bb4:	e0a0      	b.n	8002cf8 <__aeabi_dsub+0x4a0>
 8002bb6:	0032      	movs	r2, r6
 8002bb8:	2400      	movs	r4, #0
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e6f6      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	000007ff 	.word	0x000007ff
 8002bc4:	ff7fffff 	.word	0xff7fffff
 8002bc8:	fffff801 	.word	0xfffff801
 8002bcc:	000007fe 	.word	0x000007fe
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	464a      	mov	r2, r9
 8002bd4:	0752      	lsls	r2, r2, #29
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	464a      	mov	r2, r9
 8002bda:	08d2      	lsrs	r2, r2, #3
 8002bdc:	0019      	movs	r1, r3
 8002bde:	4311      	orrs	r1, r2
 8002be0:	d100      	bne.n	8002be4 <__aeabi_dsub+0x38c>
 8002be2:	e1b5      	b.n	8002f50 <__aeabi_dsub+0x6f8>
 8002be4:	2480      	movs	r4, #128	; 0x80
 8002be6:	0324      	lsls	r4, r4, #12
 8002be8:	4314      	orrs	r4, r2
 8002bea:	0324      	lsls	r4, r4, #12
 8002bec:	4ad5      	ldr	r2, [pc, #852]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002bee:	0b24      	lsrs	r4, r4, #12
 8002bf0:	e6dc      	b.n	80029ac <__aeabi_dsub+0x154>
 8002bf2:	0020      	movs	r0, r4
 8002bf4:	f000 fb2a 	bl	800324c <__clzsi2>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	3318      	adds	r3, #24
 8002bfc:	2b1f      	cmp	r3, #31
 8002bfe:	dc00      	bgt.n	8002c02 <__aeabi_dsub+0x3aa>
 8002c00:	e695      	b.n	800292e <__aeabi_dsub+0xd6>
 8002c02:	0022      	movs	r2, r4
 8002c04:	3808      	subs	r0, #8
 8002c06:	4082      	lsls	r2, r0
 8002c08:	2400      	movs	r4, #0
 8002c0a:	429e      	cmp	r6, r3
 8002c0c:	dc00      	bgt.n	8002c10 <__aeabi_dsub+0x3b8>
 8002c0e:	e69a      	b.n	8002946 <__aeabi_dsub+0xee>
 8002c10:	1af6      	subs	r6, r6, r3
 8002c12:	4bcd      	ldr	r3, [pc, #820]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c14:	401a      	ands	r2, r3
 8002c16:	4692      	mov	sl, r2
 8002c18:	e6a8      	b.n	800296c <__aeabi_dsub+0x114>
 8002c1a:	003c      	movs	r4, r7
 8002c1c:	4304      	orrs	r4, r0
 8002c1e:	1e62      	subs	r2, r4, #1
 8002c20:	4194      	sbcs	r4, r2
 8002c22:	e66c      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002c24:	464a      	mov	r2, r9
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	0752      	lsls	r2, r2, #29
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	464a      	mov	r2, r9
 8002c2e:	08d2      	lsrs	r2, r2, #3
 8002c30:	e7a6      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002c32:	4cc6      	ldr	r4, [pc, #792]	; (8002f4c <__aeabi_dsub+0x6f4>)
 8002c34:	1c72      	adds	r2, r6, #1
 8002c36:	4222      	tst	r2, r4
 8002c38:	d000      	beq.n	8002c3c <__aeabi_dsub+0x3e4>
 8002c3a:	e0ac      	b.n	8002d96 <__aeabi_dsub+0x53e>
 8002c3c:	464a      	mov	r2, r9
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	2e00      	cmp	r6, #0
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x3ee>
 8002c44:	e105      	b.n	8002e52 <__aeabi_dsub+0x5fa>
 8002c46:	2a00      	cmp	r2, #0
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x3f4>
 8002c4a:	e156      	b.n	8002efa <__aeabi_dsub+0x6a2>
 8002c4c:	003a      	movs	r2, r7
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x3fc>
 8002c52:	e0db      	b.n	8002e0c <__aeabi_dsub+0x5b4>
 8002c54:	181c      	adds	r4, r3, r0
 8002c56:	429c      	cmp	r4, r3
 8002c58:	419b      	sbcs	r3, r3
 8002c5a:	444f      	add	r7, r9
 8002c5c:	46ba      	mov	sl, r7
 8002c5e:	425b      	negs	r3, r3
 8002c60:	449a      	add	sl, r3
 8002c62:	4653      	mov	r3, sl
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	d400      	bmi.n	8002c6a <__aeabi_dsub+0x412>
 8002c68:	e780      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4bb6      	ldr	r3, [pc, #728]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002c6e:	2601      	movs	r6, #1
 8002c70:	401a      	ands	r2, r3
 8002c72:	4692      	mov	sl, r2
 8002c74:	e77a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002c76:	4cb3      	ldr	r4, [pc, #716]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002c78:	42a2      	cmp	r2, r4
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x426>
 8002c7c:	e0c0      	b.n	8002e00 <__aeabi_dsub+0x5a8>
 8002c7e:	2480      	movs	r4, #128	; 0x80
 8002c80:	464d      	mov	r5, r9
 8002c82:	0424      	lsls	r4, r4, #16
 8002c84:	4325      	orrs	r5, r4
 8002c86:	46a9      	mov	r9, r5
 8002c88:	4664      	mov	r4, ip
 8002c8a:	2c38      	cmp	r4, #56	; 0x38
 8002c8c:	dc53      	bgt.n	8002d36 <__aeabi_dsub+0x4de>
 8002c8e:	4661      	mov	r1, ip
 8002c90:	2c1f      	cmp	r4, #31
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dsub+0x43e>
 8002c94:	e0cd      	b.n	8002e32 <__aeabi_dsub+0x5da>
 8002c96:	2520      	movs	r5, #32
 8002c98:	001e      	movs	r6, r3
 8002c9a:	1b2d      	subs	r5, r5, r4
 8002c9c:	464c      	mov	r4, r9
 8002c9e:	40ab      	lsls	r3, r5
 8002ca0:	40ac      	lsls	r4, r5
 8002ca2:	40ce      	lsrs	r6, r1
 8002ca4:	1e5d      	subs	r5, r3, #1
 8002ca6:	41ab      	sbcs	r3, r5
 8002ca8:	4334      	orrs	r4, r6
 8002caa:	4323      	orrs	r3, r4
 8002cac:	464c      	mov	r4, r9
 8002cae:	40cc      	lsrs	r4, r1
 8002cb0:	1b3f      	subs	r7, r7, r4
 8002cb2:	e045      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002cb4:	464a      	mov	r2, r9
 8002cb6:	1a1c      	subs	r4, r3, r0
 8002cb8:	1bd1      	subs	r1, r2, r7
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	4192      	sbcs	r2, r2
 8002cbe:	4252      	negs	r2, r2
 8002cc0:	4692      	mov	sl, r2
 8002cc2:	000a      	movs	r2, r1
 8002cc4:	4651      	mov	r1, sl
 8002cc6:	1a52      	subs	r2, r2, r1
 8002cc8:	4692      	mov	sl, r2
 8002cca:	0212      	lsls	r2, r2, #8
 8002ccc:	d500      	bpl.n	8002cd0 <__aeabi_dsub+0x478>
 8002cce:	e083      	b.n	8002dd8 <__aeabi_dsub+0x580>
 8002cd0:	4653      	mov	r3, sl
 8002cd2:	4323      	orrs	r3, r4
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x480>
 8002cd6:	e621      	b.n	800291c <__aeabi_dsub+0xc4>
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2500      	movs	r5, #0
 8002cdc:	e753      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002cde:	181c      	adds	r4, r3, r0
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	419b      	sbcs	r3, r3
 8002ce4:	444f      	add	r7, r9
 8002ce6:	46ba      	mov	sl, r7
 8002ce8:	425b      	negs	r3, r3
 8002cea:	449a      	add	sl, r3
 8002cec:	4653      	mov	r3, sl
 8002cee:	2601      	movs	r6, #1
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x49e>
 8002cf4:	e73a      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002cf6:	2602      	movs	r6, #2
 8002cf8:	4652      	mov	r2, sl
 8002cfa:	4b93      	ldr	r3, [pc, #588]	; (8002f48 <__aeabi_dsub+0x6f0>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0013      	movs	r3, r2
 8002d02:	4021      	ands	r1, r4
 8002d04:	0862      	lsrs	r2, r4, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	07dc      	lsls	r4, r3, #31
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4314      	orrs	r4, r2
 8002d10:	e62c      	b.n	800296c <__aeabi_dsub+0x114>
 8002d12:	0039      	movs	r1, r7
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d1      	lsrs	r1, r2
 8002d18:	4662      	mov	r2, ip
 8002d1a:	2a20      	cmp	r2, #32
 8002d1c:	d006      	beq.n	8002d2c <__aeabi_dsub+0x4d4>
 8002d1e:	4664      	mov	r4, ip
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	1b12      	subs	r2, r2, r4
 8002d24:	003c      	movs	r4, r7
 8002d26:	4094      	lsls	r4, r2
 8002d28:	4304      	orrs	r4, r0
 8002d2a:	9401      	str	r4, [sp, #4]
 8002d2c:	9c01      	ldr	r4, [sp, #4]
 8002d2e:	1e62      	subs	r2, r4, #1
 8002d30:	4194      	sbcs	r4, r2
 8002d32:	430c      	orrs	r4, r1
 8002d34:	e5e3      	b.n	80028fe <__aeabi_dsub+0xa6>
 8002d36:	4649      	mov	r1, r9
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	1e5c      	subs	r4, r3, #1
 8002d3e:	41a3      	sbcs	r3, r4
 8002d40:	1ac4      	subs	r4, r0, r3
 8002d42:	42a0      	cmp	r0, r4
 8002d44:	419b      	sbcs	r3, r3
 8002d46:	425b      	negs	r3, r3
 8002d48:	1afb      	subs	r3, r7, r3
 8002d4a:	469a      	mov	sl, r3
 8002d4c:	465d      	mov	r5, fp
 8002d4e:	0016      	movs	r6, r2
 8002d50:	e5dc      	b.n	800290c <__aeabi_dsub+0xb4>
 8002d52:	4649      	mov	r1, r9
 8002d54:	4319      	orrs	r1, r3
 8002d56:	d100      	bne.n	8002d5a <__aeabi_dsub+0x502>
 8002d58:	e0ae      	b.n	8002eb8 <__aeabi_dsub+0x660>
 8002d5a:	4661      	mov	r1, ip
 8002d5c:	4664      	mov	r4, ip
 8002d5e:	3901      	subs	r1, #1
 8002d60:	2c01      	cmp	r4, #1
 8002d62:	d100      	bne.n	8002d66 <__aeabi_dsub+0x50e>
 8002d64:	e0e0      	b.n	8002f28 <__aeabi_dsub+0x6d0>
 8002d66:	4c77      	ldr	r4, [pc, #476]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d68:	45a4      	cmp	ip, r4
 8002d6a:	d056      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002d6c:	468c      	mov	ip, r1
 8002d6e:	e69a      	b.n	8002aa6 <__aeabi_dsub+0x24e>
 8002d70:	4661      	mov	r1, ip
 8002d72:	2220      	movs	r2, #32
 8002d74:	003c      	movs	r4, r7
 8002d76:	1a52      	subs	r2, r2, r1
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	0001      	movs	r1, r0
 8002d7c:	4090      	lsls	r0, r2
 8002d7e:	46a0      	mov	r8, r4
 8002d80:	4664      	mov	r4, ip
 8002d82:	1e42      	subs	r2, r0, #1
 8002d84:	4190      	sbcs	r0, r2
 8002d86:	4662      	mov	r2, ip
 8002d88:	40e1      	lsrs	r1, r4
 8002d8a:	4644      	mov	r4, r8
 8002d8c:	40d7      	lsrs	r7, r2
 8002d8e:	430c      	orrs	r4, r1
 8002d90:	4304      	orrs	r4, r0
 8002d92:	44b9      	add	r9, r7
 8002d94:	e701      	b.n	8002b9a <__aeabi_dsub+0x342>
 8002d96:	496b      	ldr	r1, [pc, #428]	; (8002f44 <__aeabi_dsub+0x6ec>)
 8002d98:	428a      	cmp	r2, r1
 8002d9a:	d100      	bne.n	8002d9e <__aeabi_dsub+0x546>
 8002d9c:	e70c      	b.n	8002bb8 <__aeabi_dsub+0x360>
 8002d9e:	1818      	adds	r0, r3, r0
 8002da0:	4298      	cmp	r0, r3
 8002da2:	419b      	sbcs	r3, r3
 8002da4:	444f      	add	r7, r9
 8002da6:	425b      	negs	r3, r3
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	07dc      	lsls	r4, r3, #31
 8002dac:	0840      	lsrs	r0, r0, #1
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	469a      	mov	sl, r3
 8002db2:	0016      	movs	r6, r2
 8002db4:	4304      	orrs	r4, r0
 8002db6:	e6d9      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d000      	beq.n	8002dbe <__aeabi_dsub+0x566>
 8002dbc:	e081      	b.n	8002ec2 <__aeabi_dsub+0x66a>
 8002dbe:	003b      	movs	r3, r7
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	d11d      	bne.n	8002e00 <__aeabi_dsub+0x5a8>
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	2500      	movs	r5, #0
 8002dc8:	0312      	lsls	r2, r2, #12
 8002dca:	e70b      	b.n	8002be4 <__aeabi_dsub+0x38c>
 8002dcc:	08c0      	lsrs	r0, r0, #3
 8002dce:	077b      	lsls	r3, r7, #29
 8002dd0:	465d      	mov	r5, fp
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	08fa      	lsrs	r2, r7, #3
 8002dd6:	e6d3      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002dd8:	1ac4      	subs	r4, r0, r3
 8002dda:	42a0      	cmp	r0, r4
 8002ddc:	4180      	sbcs	r0, r0
 8002dde:	464b      	mov	r3, r9
 8002de0:	4240      	negs	r0, r0
 8002de2:	1aff      	subs	r7, r7, r3
 8002de4:	1a3b      	subs	r3, r7, r0
 8002de6:	469a      	mov	sl, r3
 8002de8:	465d      	mov	r5, fp
 8002dea:	e597      	b.n	800291c <__aeabi_dsub+0xc4>
 8002dec:	1a1c      	subs	r4, r3, r0
 8002dee:	464a      	mov	r2, r9
 8002df0:	42a3      	cmp	r3, r4
 8002df2:	419b      	sbcs	r3, r3
 8002df4:	1bd7      	subs	r7, r2, r7
 8002df6:	425b      	negs	r3, r3
 8002df8:	1afb      	subs	r3, r7, r3
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	2601      	movs	r6, #1
 8002dfe:	e585      	b.n	800290c <__aeabi_dsub+0xb4>
 8002e00:	08c0      	lsrs	r0, r0, #3
 8002e02:	077b      	lsls	r3, r7, #29
 8002e04:	465d      	mov	r5, fp
 8002e06:	4303      	orrs	r3, r0
 8002e08:	08fa      	lsrs	r2, r7, #3
 8002e0a:	e6e7      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e0c:	464a      	mov	r2, r9
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	0752      	lsls	r2, r2, #29
 8002e12:	4313      	orrs	r3, r2
 8002e14:	464a      	mov	r2, r9
 8002e16:	08d2      	lsrs	r2, r2, #3
 8002e18:	e6b5      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002e1a:	08c0      	lsrs	r0, r0, #3
 8002e1c:	077b      	lsls	r3, r7, #29
 8002e1e:	4303      	orrs	r3, r0
 8002e20:	08fa      	lsrs	r2, r7, #3
 8002e22:	e6db      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e24:	4649      	mov	r1, r9
 8002e26:	4319      	orrs	r1, r3
 8002e28:	000b      	movs	r3, r1
 8002e2a:	1e59      	subs	r1, r3, #1
 8002e2c:	418b      	sbcs	r3, r1
 8002e2e:	001c      	movs	r4, r3
 8002e30:	e653      	b.n	8002ada <__aeabi_dsub+0x282>
 8002e32:	464d      	mov	r5, r9
 8002e34:	3c20      	subs	r4, #32
 8002e36:	40e5      	lsrs	r5, r4
 8002e38:	2920      	cmp	r1, #32
 8002e3a:	d005      	beq.n	8002e48 <__aeabi_dsub+0x5f0>
 8002e3c:	2440      	movs	r4, #64	; 0x40
 8002e3e:	1a64      	subs	r4, r4, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	40a1      	lsls	r1, r4
 8002e44:	430b      	orrs	r3, r1
 8002e46:	4698      	mov	r8, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	1e5c      	subs	r4, r3, #1
 8002e4c:	41a3      	sbcs	r3, r4
 8002e4e:	432b      	orrs	r3, r5
 8002e50:	e776      	b.n	8002d40 <__aeabi_dsub+0x4e8>
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d0e1      	beq.n	8002e1a <__aeabi_dsub+0x5c2>
 8002e56:	003a      	movs	r2, r7
 8002e58:	08db      	lsrs	r3, r3, #3
 8002e5a:	4302      	orrs	r2, r0
 8002e5c:	d100      	bne.n	8002e60 <__aeabi_dsub+0x608>
 8002e5e:	e6b8      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002e60:	464a      	mov	r2, r9
 8002e62:	0752      	lsls	r2, r2, #29
 8002e64:	2480      	movs	r4, #128	; 0x80
 8002e66:	4313      	orrs	r3, r2
 8002e68:	464a      	mov	r2, r9
 8002e6a:	0324      	lsls	r4, r4, #12
 8002e6c:	08d2      	lsrs	r2, r2, #3
 8002e6e:	4222      	tst	r2, r4
 8002e70:	d007      	beq.n	8002e82 <__aeabi_dsub+0x62a>
 8002e72:	08fe      	lsrs	r6, r7, #3
 8002e74:	4226      	tst	r6, r4
 8002e76:	d104      	bne.n	8002e82 <__aeabi_dsub+0x62a>
 8002e78:	465d      	mov	r5, fp
 8002e7a:	0032      	movs	r2, r6
 8002e7c:	08c3      	lsrs	r3, r0, #3
 8002e7e:	077f      	lsls	r7, r7, #29
 8002e80:	433b      	orrs	r3, r7
 8002e82:	0f59      	lsrs	r1, r3, #29
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	0749      	lsls	r1, r1, #29
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	430b      	orrs	r3, r1
 8002e8c:	e6a6      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002e8e:	1ac4      	subs	r4, r0, r3
 8002e90:	42a0      	cmp	r0, r4
 8002e92:	4180      	sbcs	r0, r0
 8002e94:	464b      	mov	r3, r9
 8002e96:	4240      	negs	r0, r0
 8002e98:	1aff      	subs	r7, r7, r3
 8002e9a:	1a3b      	subs	r3, r7, r0
 8002e9c:	469a      	mov	sl, r3
 8002e9e:	465d      	mov	r5, fp
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	e533      	b.n	800290c <__aeabi_dsub+0xb4>
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	d100      	bne.n	8002eac <__aeabi_dsub+0x654>
 8002eaa:	e715      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	077b      	lsls	r3, r7, #29
 8002eb0:	465d      	mov	r5, fp
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	08fa      	lsrs	r2, r7, #3
 8002eb6:	e666      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002eb8:	08c0      	lsrs	r0, r0, #3
 8002eba:	077b      	lsls	r3, r7, #29
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	08fa      	lsrs	r2, r7, #3
 8002ec0:	e65e      	b.n	8002b80 <__aeabi_dsub+0x328>
 8002ec2:	003a      	movs	r2, r7
 8002ec4:	08db      	lsrs	r3, r3, #3
 8002ec6:	4302      	orrs	r2, r0
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x674>
 8002eca:	e682      	b.n	8002bd2 <__aeabi_dsub+0x37a>
 8002ecc:	464a      	mov	r2, r9
 8002ece:	0752      	lsls	r2, r2, #29
 8002ed0:	2480      	movs	r4, #128	; 0x80
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	464a      	mov	r2, r9
 8002ed6:	0324      	lsls	r4, r4, #12
 8002ed8:	08d2      	lsrs	r2, r2, #3
 8002eda:	4222      	tst	r2, r4
 8002edc:	d007      	beq.n	8002eee <__aeabi_dsub+0x696>
 8002ede:	08fe      	lsrs	r6, r7, #3
 8002ee0:	4226      	tst	r6, r4
 8002ee2:	d104      	bne.n	8002eee <__aeabi_dsub+0x696>
 8002ee4:	465d      	mov	r5, fp
 8002ee6:	0032      	movs	r2, r6
 8002ee8:	08c3      	lsrs	r3, r0, #3
 8002eea:	077f      	lsls	r7, r7, #29
 8002eec:	433b      	orrs	r3, r7
 8002eee:	0f59      	lsrs	r1, r3, #29
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	0749      	lsls	r1, r1, #29
 8002ef6:	430b      	orrs	r3, r1
 8002ef8:	e670      	b.n	8002bdc <__aeabi_dsub+0x384>
 8002efa:	08c0      	lsrs	r0, r0, #3
 8002efc:	077b      	lsls	r3, r7, #29
 8002efe:	4303      	orrs	r3, r0
 8002f00:	08fa      	lsrs	r2, r7, #3
 8002f02:	e640      	b.n	8002b86 <__aeabi_dsub+0x32e>
 8002f04:	464c      	mov	r4, r9
 8002f06:	3920      	subs	r1, #32
 8002f08:	40cc      	lsrs	r4, r1
 8002f0a:	4661      	mov	r1, ip
 8002f0c:	2920      	cmp	r1, #32
 8002f0e:	d006      	beq.n	8002f1e <__aeabi_dsub+0x6c6>
 8002f10:	4666      	mov	r6, ip
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	1b89      	subs	r1, r1, r6
 8002f16:	464e      	mov	r6, r9
 8002f18:	408e      	lsls	r6, r1
 8002f1a:	4333      	orrs	r3, r6
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4643      	mov	r3, r8
 8002f20:	1e59      	subs	r1, r3, #1
 8002f22:	418b      	sbcs	r3, r1
 8002f24:	431c      	orrs	r4, r3
 8002f26:	e5d8      	b.n	8002ada <__aeabi_dsub+0x282>
 8002f28:	181c      	adds	r4, r3, r0
 8002f2a:	4284      	cmp	r4, r0
 8002f2c:	4180      	sbcs	r0, r0
 8002f2e:	444f      	add	r7, r9
 8002f30:	46ba      	mov	sl, r7
 8002f32:	4240      	negs	r0, r0
 8002f34:	4482      	add	sl, r0
 8002f36:	e6d9      	b.n	8002cec <__aeabi_dsub+0x494>
 8002f38:	4653      	mov	r3, sl
 8002f3a:	4323      	orrs	r3, r4
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x6e8>
 8002f3e:	e6cb      	b.n	8002cd8 <__aeabi_dsub+0x480>
 8002f40:	e614      	b.n	8002b6c <__aeabi_dsub+0x314>
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	000007ff 	.word	0x000007ff
 8002f48:	ff7fffff 	.word	0xff7fffff
 8002f4c:	000007fe 	.word	0x000007fe
 8002f50:	2300      	movs	r3, #0
 8002f52:	4a01      	ldr	r2, [pc, #4]	; (8002f58 <__aeabi_dsub+0x700>)
 8002f54:	001c      	movs	r4, r3
 8002f56:	e529      	b.n	80029ac <__aeabi_dsub+0x154>
 8002f58:	000007ff 	.word	0x000007ff

08002f5c <__aeabi_dcmpun>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	0005      	movs	r5, r0
 8002f60:	480c      	ldr	r0, [pc, #48]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f62:	031c      	lsls	r4, r3, #12
 8002f64:	0016      	movs	r6, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	030a      	lsls	r2, r1, #12
 8002f6a:	0049      	lsls	r1, r1, #1
 8002f6c:	0b12      	lsrs	r2, r2, #12
 8002f6e:	0d49      	lsrs	r1, r1, #21
 8002f70:	0b24      	lsrs	r4, r4, #12
 8002f72:	0d5b      	lsrs	r3, r3, #21
 8002f74:	4281      	cmp	r1, r0
 8002f76:	d008      	beq.n	8002f8a <__aeabi_dcmpun+0x2e>
 8002f78:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <__aeabi_dcmpun+0x38>)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d103      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f80:	0020      	movs	r0, r4
 8002f82:	4330      	orrs	r0, r6
 8002f84:	1e43      	subs	r3, r0, #1
 8002f86:	4198      	sbcs	r0, r3
 8002f88:	bd70      	pop	{r4, r5, r6, pc}
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	432a      	orrs	r2, r5
 8002f8e:	d1fb      	bne.n	8002f88 <__aeabi_dcmpun+0x2c>
 8002f90:	e7f2      	b.n	8002f78 <__aeabi_dcmpun+0x1c>
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	000007ff 	.word	0x000007ff

08002f98 <__aeabi_d2iz>:
 8002f98:	000a      	movs	r2, r1
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4c13      	ldr	r4, [pc, #76]	; (8002fec <__aeabi_d2iz+0x54>)
 8002f9e:	0053      	lsls	r3, r2, #1
 8002fa0:	0309      	lsls	r1, r1, #12
 8002fa2:	0005      	movs	r5, r0
 8002fa4:	0b09      	lsrs	r1, r1, #12
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	0d5b      	lsrs	r3, r3, #21
 8002faa:	0fd2      	lsrs	r2, r2, #31
 8002fac:	42a3      	cmp	r3, r4
 8002fae:	dd04      	ble.n	8002fba <__aeabi_d2iz+0x22>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <__aeabi_d2iz+0x58>)
 8002fb2:	4283      	cmp	r3, r0
 8002fb4:	dd02      	ble.n	8002fbc <__aeabi_d2iz+0x24>
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <__aeabi_d2iz+0x5c>)
 8002fb8:	18d0      	adds	r0, r2, r3
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	2080      	movs	r0, #128	; 0x80
 8002fbe:	0340      	lsls	r0, r0, #13
 8002fc0:	4301      	orrs	r1, r0
 8002fc2:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <__aeabi_d2iz+0x60>)
 8002fc4:	1ac0      	subs	r0, r0, r3
 8002fc6:	281f      	cmp	r0, #31
 8002fc8:	dd08      	ble.n	8002fdc <__aeabi_d2iz+0x44>
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <__aeabi_d2iz+0x64>)
 8002fcc:	1ac3      	subs	r3, r0, r3
 8002fce:	40d9      	lsrs	r1, r3
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	4258      	negs	r0, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d1f0      	bne.n	8002fba <__aeabi_d2iz+0x22>
 8002fd8:	0018      	movs	r0, r3
 8002fda:	e7ee      	b.n	8002fba <__aeabi_d2iz+0x22>
 8002fdc:	4c08      	ldr	r4, [pc, #32]	; (8003000 <__aeabi_d2iz+0x68>)
 8002fde:	40c5      	lsrs	r5, r0
 8002fe0:	46a4      	mov	ip, r4
 8002fe2:	4463      	add	r3, ip
 8002fe4:	4099      	lsls	r1, r3
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	432b      	orrs	r3, r5
 8002fea:	e7f2      	b.n	8002fd2 <__aeabi_d2iz+0x3a>
 8002fec:	000003fe 	.word	0x000003fe
 8002ff0:	0000041d 	.word	0x0000041d
 8002ff4:	7fffffff 	.word	0x7fffffff
 8002ff8:	00000433 	.word	0x00000433
 8002ffc:	00000413 	.word	0x00000413
 8003000:	fffffbed 	.word	0xfffffbed

08003004 <__aeabi_i2d>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2800      	cmp	r0, #0
 8003008:	d016      	beq.n	8003038 <__aeabi_i2d+0x34>
 800300a:	17c3      	asrs	r3, r0, #31
 800300c:	18c5      	adds	r5, r0, r3
 800300e:	405d      	eors	r5, r3
 8003010:	0fc4      	lsrs	r4, r0, #31
 8003012:	0028      	movs	r0, r5
 8003014:	f000 f91a 	bl	800324c <__clzsi2>
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <__aeabi_i2d+0x5c>)
 800301a:	1a1b      	subs	r3, r3, r0
 800301c:	280a      	cmp	r0, #10
 800301e:	dc16      	bgt.n	800304e <__aeabi_i2d+0x4a>
 8003020:	0002      	movs	r2, r0
 8003022:	002e      	movs	r6, r5
 8003024:	3215      	adds	r2, #21
 8003026:	4096      	lsls	r6, r2
 8003028:	220b      	movs	r2, #11
 800302a:	1a12      	subs	r2, r2, r0
 800302c:	40d5      	lsrs	r5, r2
 800302e:	055b      	lsls	r3, r3, #21
 8003030:	032d      	lsls	r5, r5, #12
 8003032:	0b2d      	lsrs	r5, r5, #12
 8003034:	0d5b      	lsrs	r3, r3, #21
 8003036:	e003      	b.n	8003040 <__aeabi_i2d+0x3c>
 8003038:	2400      	movs	r4, #0
 800303a:	2300      	movs	r3, #0
 800303c:	2500      	movs	r5, #0
 800303e:	2600      	movs	r6, #0
 8003040:	051b      	lsls	r3, r3, #20
 8003042:	432b      	orrs	r3, r5
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4323      	orrs	r3, r4
 8003048:	0030      	movs	r0, r6
 800304a:	0019      	movs	r1, r3
 800304c:	bd70      	pop	{r4, r5, r6, pc}
 800304e:	380b      	subs	r0, #11
 8003050:	4085      	lsls	r5, r0
 8003052:	055b      	lsls	r3, r3, #21
 8003054:	032d      	lsls	r5, r5, #12
 8003056:	2600      	movs	r6, #0
 8003058:	0b2d      	lsrs	r5, r5, #12
 800305a:	0d5b      	lsrs	r3, r3, #21
 800305c:	e7f0      	b.n	8003040 <__aeabi_i2d+0x3c>
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000041e 	.word	0x0000041e

08003064 <__aeabi_ui2d>:
 8003064:	b510      	push	{r4, lr}
 8003066:	1e04      	subs	r4, r0, #0
 8003068:	d010      	beq.n	800308c <__aeabi_ui2d+0x28>
 800306a:	f000 f8ef 	bl	800324c <__clzsi2>
 800306e:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <__aeabi_ui2d+0x48>)
 8003070:	1a1b      	subs	r3, r3, r0
 8003072:	280a      	cmp	r0, #10
 8003074:	dc11      	bgt.n	800309a <__aeabi_ui2d+0x36>
 8003076:	220b      	movs	r2, #11
 8003078:	0021      	movs	r1, r4
 800307a:	1a12      	subs	r2, r2, r0
 800307c:	40d1      	lsrs	r1, r2
 800307e:	3015      	adds	r0, #21
 8003080:	030a      	lsls	r2, r1, #12
 8003082:	055b      	lsls	r3, r3, #21
 8003084:	4084      	lsls	r4, r0
 8003086:	0b12      	lsrs	r2, r2, #12
 8003088:	0d5b      	lsrs	r3, r3, #21
 800308a:	e001      	b.n	8003090 <__aeabi_ui2d+0x2c>
 800308c:	2300      	movs	r3, #0
 800308e:	2200      	movs	r2, #0
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	4313      	orrs	r3, r2
 8003094:	0020      	movs	r0, r4
 8003096:	0019      	movs	r1, r3
 8003098:	bd10      	pop	{r4, pc}
 800309a:	0022      	movs	r2, r4
 800309c:	380b      	subs	r0, #11
 800309e:	4082      	lsls	r2, r0
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	0312      	lsls	r2, r2, #12
 80030a4:	2400      	movs	r4, #0
 80030a6:	0b12      	lsrs	r2, r2, #12
 80030a8:	0d5b      	lsrs	r3, r3, #21
 80030aa:	e7f1      	b.n	8003090 <__aeabi_ui2d+0x2c>
 80030ac:	0000041e 	.word	0x0000041e

080030b0 <__aeabi_f2d>:
 80030b0:	b570      	push	{r4, r5, r6, lr}
 80030b2:	0242      	lsls	r2, r0, #9
 80030b4:	0043      	lsls	r3, r0, #1
 80030b6:	0fc4      	lsrs	r4, r0, #31
 80030b8:	20fe      	movs	r0, #254	; 0xfe
 80030ba:	0e1b      	lsrs	r3, r3, #24
 80030bc:	1c59      	adds	r1, r3, #1
 80030be:	0a55      	lsrs	r5, r2, #9
 80030c0:	4208      	tst	r0, r1
 80030c2:	d00c      	beq.n	80030de <__aeabi_f2d+0x2e>
 80030c4:	21e0      	movs	r1, #224	; 0xe0
 80030c6:	0089      	lsls	r1, r1, #2
 80030c8:	468c      	mov	ip, r1
 80030ca:	076d      	lsls	r5, r5, #29
 80030cc:	0b12      	lsrs	r2, r2, #12
 80030ce:	4463      	add	r3, ip
 80030d0:	051b      	lsls	r3, r3, #20
 80030d2:	4313      	orrs	r3, r2
 80030d4:	07e4      	lsls	r4, r4, #31
 80030d6:	4323      	orrs	r3, r4
 80030d8:	0028      	movs	r0, r5
 80030da:	0019      	movs	r1, r3
 80030dc:	bd70      	pop	{r4, r5, r6, pc}
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d114      	bne.n	800310c <__aeabi_f2d+0x5c>
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	d01b      	beq.n	800311e <__aeabi_f2d+0x6e>
 80030e6:	0028      	movs	r0, r5
 80030e8:	f000 f8b0 	bl	800324c <__clzsi2>
 80030ec:	280a      	cmp	r0, #10
 80030ee:	dc1c      	bgt.n	800312a <__aeabi_f2d+0x7a>
 80030f0:	230b      	movs	r3, #11
 80030f2:	002a      	movs	r2, r5
 80030f4:	1a1b      	subs	r3, r3, r0
 80030f6:	40da      	lsrs	r2, r3
 80030f8:	0003      	movs	r3, r0
 80030fa:	3315      	adds	r3, #21
 80030fc:	409d      	lsls	r5, r3
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <__aeabi_f2d+0x88>)
 8003100:	0312      	lsls	r2, r2, #12
 8003102:	1a1b      	subs	r3, r3, r0
 8003104:	055b      	lsls	r3, r3, #21
 8003106:	0b12      	lsrs	r2, r2, #12
 8003108:	0d5b      	lsrs	r3, r3, #21
 800310a:	e7e1      	b.n	80030d0 <__aeabi_f2d+0x20>
 800310c:	2d00      	cmp	r5, #0
 800310e:	d009      	beq.n	8003124 <__aeabi_f2d+0x74>
 8003110:	0b13      	lsrs	r3, r2, #12
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	0312      	lsls	r2, r2, #12
 8003116:	431a      	orrs	r2, r3
 8003118:	076d      	lsls	r5, r5, #29
 800311a:	4b08      	ldr	r3, [pc, #32]	; (800313c <__aeabi_f2d+0x8c>)
 800311c:	e7d8      	b.n	80030d0 <__aeabi_f2d+0x20>
 800311e:	2300      	movs	r3, #0
 8003120:	2200      	movs	r2, #0
 8003122:	e7d5      	b.n	80030d0 <__aeabi_f2d+0x20>
 8003124:	2200      	movs	r2, #0
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <__aeabi_f2d+0x8c>)
 8003128:	e7d2      	b.n	80030d0 <__aeabi_f2d+0x20>
 800312a:	0003      	movs	r3, r0
 800312c:	002a      	movs	r2, r5
 800312e:	3b0b      	subs	r3, #11
 8003130:	409a      	lsls	r2, r3
 8003132:	2500      	movs	r5, #0
 8003134:	e7e3      	b.n	80030fe <__aeabi_f2d+0x4e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	00000389 	.word	0x00000389
 800313c:	000007ff 	.word	0x000007ff

08003140 <__aeabi_d2f>:
 8003140:	0002      	movs	r2, r0
 8003142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003144:	004b      	lsls	r3, r1, #1
 8003146:	030d      	lsls	r5, r1, #12
 8003148:	0f40      	lsrs	r0, r0, #29
 800314a:	0d5b      	lsrs	r3, r3, #21
 800314c:	0fcc      	lsrs	r4, r1, #31
 800314e:	0a6d      	lsrs	r5, r5, #9
 8003150:	493a      	ldr	r1, [pc, #232]	; (800323c <__aeabi_d2f+0xfc>)
 8003152:	4305      	orrs	r5, r0
 8003154:	1c58      	adds	r0, r3, #1
 8003156:	00d7      	lsls	r7, r2, #3
 8003158:	4208      	tst	r0, r1
 800315a:	d00a      	beq.n	8003172 <__aeabi_d2f+0x32>
 800315c:	4938      	ldr	r1, [pc, #224]	; (8003240 <__aeabi_d2f+0x100>)
 800315e:	1859      	adds	r1, r3, r1
 8003160:	29fe      	cmp	r1, #254	; 0xfe
 8003162:	dd16      	ble.n	8003192 <__aeabi_d2f+0x52>
 8003164:	20ff      	movs	r0, #255	; 0xff
 8003166:	2200      	movs	r2, #0
 8003168:	05c0      	lsls	r0, r0, #23
 800316a:	4310      	orrs	r0, r2
 800316c:	07e4      	lsls	r4, r4, #31
 800316e:	4320      	orrs	r0, r4
 8003170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <__aeabi_d2f+0x44>
 8003176:	433d      	orrs	r5, r7
 8003178:	d026      	beq.n	80031c8 <__aeabi_d2f+0x88>
 800317a:	2205      	movs	r2, #5
 800317c:	0192      	lsls	r2, r2, #6
 800317e:	0a52      	lsrs	r2, r2, #9
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	e7f1      	b.n	8003168 <__aeabi_d2f+0x28>
 8003184:	432f      	orrs	r7, r5
 8003186:	d0ed      	beq.n	8003164 <__aeabi_d2f+0x24>
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	03d2      	lsls	r2, r2, #15
 800318c:	20ff      	movs	r0, #255	; 0xff
 800318e:	432a      	orrs	r2, r5
 8003190:	e7ea      	b.n	8003168 <__aeabi_d2f+0x28>
 8003192:	2900      	cmp	r1, #0
 8003194:	dd1b      	ble.n	80031ce <__aeabi_d2f+0x8e>
 8003196:	0192      	lsls	r2, r2, #6
 8003198:	1e50      	subs	r0, r2, #1
 800319a:	4182      	sbcs	r2, r0
 800319c:	00ed      	lsls	r5, r5, #3
 800319e:	0f7f      	lsrs	r7, r7, #29
 80031a0:	432a      	orrs	r2, r5
 80031a2:	433a      	orrs	r2, r7
 80031a4:	0753      	lsls	r3, r2, #29
 80031a6:	d047      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031a8:	230f      	movs	r3, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d000      	beq.n	80031b2 <__aeabi_d2f+0x72>
 80031b0:	3204      	adds	r2, #4
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	04db      	lsls	r3, r3, #19
 80031b6:	4013      	ands	r3, r2
 80031b8:	d03e      	beq.n	8003238 <__aeabi_d2f+0xf8>
 80031ba:	1c48      	adds	r0, r1, #1
 80031bc:	29fe      	cmp	r1, #254	; 0xfe
 80031be:	d0d1      	beq.n	8003164 <__aeabi_d2f+0x24>
 80031c0:	0192      	lsls	r2, r2, #6
 80031c2:	0a52      	lsrs	r2, r2, #9
 80031c4:	b2c0      	uxtb	r0, r0
 80031c6:	e7cf      	b.n	8003168 <__aeabi_d2f+0x28>
 80031c8:	2000      	movs	r0, #0
 80031ca:	2200      	movs	r2, #0
 80031cc:	e7cc      	b.n	8003168 <__aeabi_d2f+0x28>
 80031ce:	000a      	movs	r2, r1
 80031d0:	3217      	adds	r2, #23
 80031d2:	db2f      	blt.n	8003234 <__aeabi_d2f+0xf4>
 80031d4:	2680      	movs	r6, #128	; 0x80
 80031d6:	0436      	lsls	r6, r6, #16
 80031d8:	432e      	orrs	r6, r5
 80031da:	251e      	movs	r5, #30
 80031dc:	1a6d      	subs	r5, r5, r1
 80031de:	2d1f      	cmp	r5, #31
 80031e0:	dd11      	ble.n	8003206 <__aeabi_d2f+0xc6>
 80031e2:	2202      	movs	r2, #2
 80031e4:	4252      	negs	r2, r2
 80031e6:	1a52      	subs	r2, r2, r1
 80031e8:	0031      	movs	r1, r6
 80031ea:	40d1      	lsrs	r1, r2
 80031ec:	2d20      	cmp	r5, #32
 80031ee:	d004      	beq.n	80031fa <__aeabi_d2f+0xba>
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <__aeabi_d2f+0x104>)
 80031f2:	4694      	mov	ip, r2
 80031f4:	4463      	add	r3, ip
 80031f6:	409e      	lsls	r6, r3
 80031f8:	4337      	orrs	r7, r6
 80031fa:	003a      	movs	r2, r7
 80031fc:	1e53      	subs	r3, r2, #1
 80031fe:	419a      	sbcs	r2, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	2100      	movs	r1, #0
 8003204:	e7ce      	b.n	80031a4 <__aeabi_d2f+0x64>
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <__aeabi_d2f+0x108>)
 8003208:	0038      	movs	r0, r7
 800320a:	4694      	mov	ip, r2
 800320c:	4463      	add	r3, ip
 800320e:	4098      	lsls	r0, r3
 8003210:	003a      	movs	r2, r7
 8003212:	1e41      	subs	r1, r0, #1
 8003214:	4188      	sbcs	r0, r1
 8003216:	409e      	lsls	r6, r3
 8003218:	40ea      	lsrs	r2, r5
 800321a:	4330      	orrs	r0, r6
 800321c:	4302      	orrs	r2, r0
 800321e:	2100      	movs	r1, #0
 8003220:	0753      	lsls	r3, r2, #29
 8003222:	d1c1      	bne.n	80031a8 <__aeabi_d2f+0x68>
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	0013      	movs	r3, r2
 8003228:	04c9      	lsls	r1, r1, #19
 800322a:	2001      	movs	r0, #1
 800322c:	400b      	ands	r3, r1
 800322e:	420a      	tst	r2, r1
 8003230:	d1c6      	bne.n	80031c0 <__aeabi_d2f+0x80>
 8003232:	e7a3      	b.n	800317c <__aeabi_d2f+0x3c>
 8003234:	2300      	movs	r3, #0
 8003236:	e7a0      	b.n	800317a <__aeabi_d2f+0x3a>
 8003238:	000b      	movs	r3, r1
 800323a:	e79f      	b.n	800317c <__aeabi_d2f+0x3c>
 800323c:	000007fe 	.word	0x000007fe
 8003240:	fffffc80 	.word	0xfffffc80
 8003244:	fffffca2 	.word	0xfffffca2
 8003248:	fffffc82 	.word	0xfffffc82

0800324c <__clzsi2>:
 800324c:	211c      	movs	r1, #28
 800324e:	2301      	movs	r3, #1
 8003250:	041b      	lsls	r3, r3, #16
 8003252:	4298      	cmp	r0, r3
 8003254:	d301      	bcc.n	800325a <__clzsi2+0xe>
 8003256:	0c00      	lsrs	r0, r0, #16
 8003258:	3910      	subs	r1, #16
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	4298      	cmp	r0, r3
 800325e:	d301      	bcc.n	8003264 <__clzsi2+0x18>
 8003260:	0a00      	lsrs	r0, r0, #8
 8003262:	3908      	subs	r1, #8
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	4298      	cmp	r0, r3
 8003268:	d301      	bcc.n	800326e <__clzsi2+0x22>
 800326a:	0900      	lsrs	r0, r0, #4
 800326c:	3904      	subs	r1, #4
 800326e:	a202      	add	r2, pc, #8	; (adr r2, 8003278 <__clzsi2+0x2c>)
 8003270:	5c10      	ldrb	r0, [r2, r0]
 8003272:	1840      	adds	r0, r0, r1
 8003274:	4770      	bx	lr
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	02020304 	.word	0x02020304
 800327c:	01010101 	.word	0x01010101
	...

08003288 <Read_ADC1>:

static void Init_ADC(){
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
}

static float Read_ADC1(){
 8003288:	b510      	push	{r4, lr}
	float val=(float)ADCvalue[0];
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <Read_ADC1+0x1c>)
 800328c:	6818      	ldr	r0, [r3, #0]
 800328e:	f7fe f87f 	bl	8001390 <__aeabi_ui2f>

	return ((float)(val*VSENSE*11));
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <Read_ADC1+0x20>)
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	f7fd fd1b 	bl	8000cd0 <__aeabi_fmul>
 800329a:	4904      	ldr	r1, [pc, #16]	; (80032ac <Read_ADC1+0x24>)
 800329c:	f7fd fd18 	bl	8000cd0 <__aeabi_fmul>
    	//HAL_Delay(1);
}
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	20000308 	.word	0x20000308
 80032a8:	200000b4 	.word	0x200000b4
 80032ac:	41300000 	.word	0x41300000

080032b0 <Read_ADC2>:

static float Read_ADC2(){
 80032b0:	b510      	push	{r4, lr}
	return (ADCvalue[1]*VSENSE*11);
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <Read_ADC2+0x1c>)
 80032b4:	6858      	ldr	r0, [r3, #4]
 80032b6:	f7fe f86b 	bl	8001390 <__aeabi_ui2f>
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <Read_ADC2+0x20>)
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	f7fd fd07 	bl	8000cd0 <__aeabi_fmul>
 80032c2:	4904      	ldr	r1, [pc, #16]	; (80032d4 <Read_ADC2+0x24>)
 80032c4:	f7fd fd04 	bl	8000cd0 <__aeabi_fmul>
	    	//HAL_Delay(1);
}
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	20000308 	.word	0x20000308
 80032d0:	200000b4 	.word	0x200000b4
 80032d4:	41300000 	.word	0x41300000

080032d8 <Read_EXT_B_SENSE>:
static float Read_EXT_B_SENSE(){
 80032d8:	b510      	push	{r4, lr}
	return (ADCvalue[2]*VSENSE*16);
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <Read_EXT_B_SENSE+0x1c>)
 80032dc:	6898      	ldr	r0, [r3, #8]
 80032de:	f7fe f857 	bl	8001390 <__aeabi_ui2f>
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <Read_EXT_B_SENSE+0x20>)
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	f7fd fcf3 	bl	8000cd0 <__aeabi_fmul>
 80032ea:	2183      	movs	r1, #131	; 0x83
 80032ec:	05c9      	lsls	r1, r1, #23
 80032ee:	f7fd fcef 	bl	8000cd0 <__aeabi_fmul>
	    	//HAL_Delay(1);
}
 80032f2:	bd10      	pop	{r4, pc}
 80032f4:	20000308 	.word	0x20000308
 80032f8:	200000b4 	.word	0x200000b4

080032fc <Read_INT_B_SENSE>:
static float Read_INT_B_SENSE(){
 80032fc:	b510      	push	{r4, lr}
	return (ADCvalue[3]*VSENSE*2);
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <Read_INT_B_SENSE+0x1c>)
 8003300:	68d8      	ldr	r0, [r3, #12]
 8003302:	f7fe f845 	bl	8001390 <__aeabi_ui2f>
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <Read_INT_B_SENSE+0x20>)
 8003308:	6819      	ldr	r1, [r3, #0]
 800330a:	f7fd fce1 	bl	8000cd0 <__aeabi_fmul>
 800330e:	1c01      	adds	r1, r0, #0
 8003310:	f7fd f974 	bl	80005fc <__aeabi_fadd>
	    	//HAL_Delay(1);
}
 8003314:	bd10      	pop	{r4, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	20000308 	.word	0x20000308
 800331c:	200000b4 	.word	0x200000b4

08003320 <Debug_Tx>:
}




static void Debug_Tx(char _out[]){
 8003320:	b530      	push	{r4, r5, lr}
 8003322:	b083      	sub	sp, #12
 8003324:	0004      	movs	r4, r0

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003326:	4d0b      	ldr	r5, [pc, #44]	; (8003354 <Debug_Tx+0x34>)
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	220c      	movs	r2, #12
 800332c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800332e:	f7fc feeb 	bl	8000108 <strlen>
 8003332:	b282      	uxth	r2, r0
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <Debug_Tx+0x38>)
 8003336:	0021      	movs	r1, r4
 8003338:	0028      	movs	r0, r5
 800333a:	f006 ffe5 	bl	800a308 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800333e:	a901      	add	r1, sp, #4
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <Debug_Tx+0x3c>)
 8003342:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8003344:	230a      	movs	r3, #10
 8003346:	2202      	movs	r2, #2
 8003348:	0028      	movs	r0, r5
 800334a:	f006 ffdd 	bl	800a308 <HAL_UART_Transmit>


}
 800334e:	b003      	add	sp, #12
 8003350:	bd30      	pop	{r4, r5, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	20003e30 	.word	0x20003e30
 8003358:	00001388 	.word	0x00001388
 800335c:	00000a0d 	.word	0x00000a0d

08003360 <GSM_Tx>:
}




static void GSM_Tx(const char _out[]){
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0004      	movs	r4, r0
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003364:	4d06      	ldr	r5, [pc, #24]	; (8003380 <GSM_Tx+0x20>)
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	220c      	movs	r2, #12
 800336a:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800336c:	f7fc fecc 	bl	8000108 <strlen>
 8003370:	2396      	movs	r3, #150	; 0x96
 8003372:	b282      	uxth	r2, r0
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	0021      	movs	r1, r4
 8003378:	0028      	movs	r0, r5
 800337a:	f006 ffc5 	bl	800a308 <HAL_UART_Transmit>
	//memset(_out,0,strlen(_out));
}
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	20003d08 	.word	0x20003d08

08003384 <Debug_Rx>:
static char* Debug_Rx(){
 8003384:	b510      	push	{r4, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8003386:	4807      	ldr	r0, [pc, #28]	; (80033a4 <Debug_Rx+0x20>)
 8003388:	6803      	ldr	r3, [r0, #0]
 800338a:	220c      	movs	r2, #12
 800338c:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 800338e:	2396      	movs	r3, #150	; 0x96
 8003390:	32ee      	adds	r2, #238	; 0xee
 8003392:	4c05      	ldr	r4, [pc, #20]	; (80033a8 <Debug_Rx+0x24>)
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	0021      	movs	r1, r4
 800339a:	f007 f82f 	bl	800a3fc <HAL_UART_Receive>
}
 800339e:	0020      	movs	r0, r4
 80033a0:	bd10      	pop	{r4, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20003e30 	.word	0x20003e30
 80033a8:	20003ec4 	.word	0x20003ec4

080033ac <readAcc>:





static float* readAcc(){
 80033ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ae:	46de      	mov	lr, fp
 80033b0:	4657      	mov	r7, sl
 80033b2:	464e      	mov	r6, r9
 80033b4:	4645      	mov	r5, r8
 80033b6:	b5e0      	push	{r5, r6, r7, lr}
 80033b8:	b089      	sub	sp, #36	; 0x24

	ACC_GYRO_data[0]=0;
 80033ba:	4c53      	ldr	r4, [pc, #332]	; (8003508 <readAcc+0x15c>)
 80033bc:	2300      	movs	r3, #0
 80033be:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=0;
 80033c0:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=0;
 80033c2:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=0;
 80033c4:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=0;
 80033c6:	6123      	str	r3, [r4, #16]
	ACC_GYRO_data[5]=0;
 80033c8:	6163      	str	r3, [r4, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80033ca:	4850      	ldr	r0, [pc, #320]	; (800350c <readAcc+0x160>)
 80033cc:	23fa      	movs	r3, #250	; 0xfa
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	469b      	mov	fp, r3
 80033d2:	9302      	str	r3, [sp, #8]
 80033d4:	2306      	movs	r3, #6
 80033d6:	4698      	mov	r8, r3
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	ad06      	add	r5, sp, #24
 80033dc:	9500      	str	r5, [sp, #0]
 80033de:	3b05      	subs	r3, #5
 80033e0:	223b      	movs	r2, #59	; 0x3b
 80033e2:	21d0      	movs	r1, #208	; 0xd0
 80033e4:	9005      	str	r0, [sp, #20]
 80033e6:	f004 ff19 	bl	800821c <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80033ea:	782b      	ldrb	r3, [r5, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	7868      	ldrb	r0, [r5, #1]
 80033f0:	4318      	orrs	r0, r3
 80033f2:	b200      	sxth	r0, r0
 80033f4:	4b46      	ldr	r3, [pc, #280]	; (8003510 <readAcc+0x164>)
 80033f6:	8018      	strh	r0, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80033f8:	78ab      	ldrb	r3, [r5, #2]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	78ef      	ldrb	r7, [r5, #3]
 80033fe:	431f      	orrs	r7, r3
 8003400:	b23f      	sxth	r7, r7
 8003402:	4b44      	ldr	r3, [pc, #272]	; (8003514 <readAcc+0x168>)
 8003404:	801f      	strh	r7, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8003406:	792b      	ldrb	r3, [r5, #4]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	796e      	ldrb	r6, [r5, #5]
 800340c:	431e      	orrs	r6, r3
 800340e:	b236      	sxth	r6, r6
 8003410:	4b41      	ldr	r3, [pc, #260]	; (8003518 <readAcc+0x16c>)
 8003412:	801e      	strh	r6, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 8003414:	4b41      	ldr	r3, [pc, #260]	; (800351c <readAcc+0x170>)
 8003416:	469a      	mov	sl, r3
 8003418:	f7ff fdf4 	bl	8003004 <__aeabi_i2d>
 800341c:	2200      	movs	r2, #0
 800341e:	4b40      	ldr	r3, [pc, #256]	; (8003520 <readAcc+0x174>)
 8003420:	f7fe ff58 	bl	80022d4 <__aeabi_dmul>
 8003424:	f7ff fe8c 	bl	8003140 <__aeabi_d2f>
 8003428:	4653      	mov	r3, sl
 800342a:	6018      	str	r0, [r3, #0]
	Ay = Accel_Y_RAW/16384.0;
 800342c:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <readAcc+0x178>)
 800342e:	4699      	mov	r9, r3
 8003430:	0038      	movs	r0, r7
 8003432:	f7ff fde7 	bl	8003004 <__aeabi_i2d>
 8003436:	2200      	movs	r2, #0
 8003438:	4b39      	ldr	r3, [pc, #228]	; (8003520 <readAcc+0x174>)
 800343a:	f7fe ff4b 	bl	80022d4 <__aeabi_dmul>
 800343e:	f7ff fe7f 	bl	8003140 <__aeabi_d2f>
 8003442:	464b      	mov	r3, r9
 8003444:	6018      	str	r0, [r3, #0]
	Az = Accel_Z_RAW/16384.0;
 8003446:	4f38      	ldr	r7, [pc, #224]	; (8003528 <readAcc+0x17c>)
 8003448:	0030      	movs	r0, r6
 800344a:	f7ff fddb 	bl	8003004 <__aeabi_i2d>
 800344e:	2200      	movs	r2, #0
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <readAcc+0x174>)
 8003452:	f7fe ff3f 	bl	80022d4 <__aeabi_dmul>
 8003456:	f7ff fe73 	bl	8003140 <__aeabi_d2f>
 800345a:	6038      	str	r0, [r7, #0]


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800345c:	465b      	mov	r3, fp
 800345e:	9302      	str	r3, [sp, #8]
 8003460:	4643      	mov	r3, r8
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	9500      	str	r5, [sp, #0]
 8003466:	3b05      	subs	r3, #5
 8003468:	2243      	movs	r2, #67	; 0x43
 800346a:	21d0      	movs	r1, #208	; 0xd0
 800346c:	9805      	ldr	r0, [sp, #20]
 800346e:	f004 fed5 	bl	800821c <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8003472:	782b      	ldrb	r3, [r5, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	7868      	ldrb	r0, [r5, #1]
 8003478:	4318      	orrs	r0, r3
 800347a:	b200      	sxth	r0, r0
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <readAcc+0x180>)
 800347e:	8018      	strh	r0, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8003480:	78ab      	ldrb	r3, [r5, #2]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	78ee      	ldrb	r6, [r5, #3]
 8003486:	431e      	orrs	r6, r3
 8003488:	b236      	sxth	r6, r6
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <readAcc+0x184>)
 800348c:	801e      	strh	r6, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800348e:	792b      	ldrb	r3, [r5, #4]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	796d      	ldrb	r5, [r5, #5]
 8003494:	431d      	orrs	r5, r3
 8003496:	b22d      	sxth	r5, r5
 8003498:	4b26      	ldr	r3, [pc, #152]	; (8003534 <readAcc+0x188>)
 800349a:	801d      	strh	r5, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800349c:	f7ff fdb2 	bl	8003004 <__aeabi_i2d>
 80034a0:	2200      	movs	r2, #0
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <readAcc+0x18c>)
 80034a4:	f7fe fb1c 	bl	8001ae0 <__aeabi_ddiv>
 80034a8:	f7ff fe4a 	bl	8003140 <__aeabi_d2f>
 80034ac:	4680      	mov	r8, r0
 80034ae:	4b23      	ldr	r3, [pc, #140]	; (800353c <readAcc+0x190>)
 80034b0:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80034b2:	0030      	movs	r0, r6
 80034b4:	f7ff fda6 	bl	8003004 <__aeabi_i2d>
 80034b8:	2200      	movs	r2, #0
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <readAcc+0x18c>)
 80034bc:	f7fe fb10 	bl	8001ae0 <__aeabi_ddiv>
 80034c0:	f7ff fe3e 	bl	8003140 <__aeabi_d2f>
 80034c4:	1c06      	adds	r6, r0, #0
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <readAcc+0x194>)
 80034c8:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 80034ca:	0028      	movs	r0, r5
 80034cc:	f7ff fd9a 	bl	8003004 <__aeabi_i2d>
 80034d0:	2200      	movs	r2, #0
 80034d2:	4b19      	ldr	r3, [pc, #100]	; (8003538 <readAcc+0x18c>)
 80034d4:	f7fe fb04 	bl	8001ae0 <__aeabi_ddiv>
 80034d8:	f7ff fe32 	bl	8003140 <__aeabi_d2f>
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <readAcc+0x198>)
 80034de:	6018      	str	r0, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 80034e0:	4653      	mov	r3, sl
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=Ay;
 80034e6:	464b      	mov	r3, r9
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=Az;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=Gx;
 80034f0:	4643      	mov	r3, r8
 80034f2:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=Gy;
 80034f4:	6126      	str	r6, [r4, #16]
	ACC_GYRO_data[5]=Gz;
 80034f6:	6160      	str	r0, [r4, #20]
	return(ACC_GYRO_data);

	//sprintf (buf, "%.2f", Ax);
}
 80034f8:	0020      	movs	r0, r4
 80034fa:	b009      	add	sp, #36	; 0x24
 80034fc:	bcf0      	pop	{r4, r5, r6, r7}
 80034fe:	46bb      	mov	fp, r7
 8003500:	46b2      	mov	sl, r6
 8003502:	46a9      	mov	r9, r5
 8003504:	46a0      	mov	r8, r4
 8003506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003508:	200002ec 	.word	0x200002ec
 800350c:	20003c04 	.word	0x20003c04
 8003510:	20000320 	.word	0x20000320
 8003514:	20000322 	.word	0x20000322
 8003518:	20000324 	.word	0x20000324
 800351c:	20000328 	.word	0x20000328
 8003520:	3f100000 	.word	0x3f100000
 8003524:	2000032c 	.word	0x2000032c
 8003528:	20000330 	.word	0x20000330
 800352c:	20001240 	.word	0x20001240
 8003530:	20001242 	.word	0x20001242
 8003534:	20001244 	.word	0x20001244
 8003538:	40606000 	.word	0x40606000
 800353c:	20001238 	.word	0x20001238
 8003540:	2000123c 	.word	0x2000123c
 8003544:	20001248 	.word	0x20001248

08003548 <Read_DI_MAINS_STATE>:
static int Read_DI_MAINS_STATE(){
 8003548:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 800354a:	2180      	movs	r1, #128	; 0x80
 800354c:	0189      	lsls	r1, r1, #6
 800354e:	4802      	ldr	r0, [pc, #8]	; (8003558 <Read_DI_MAINS_STATE+0x10>)
 8003550:	f004 fbb0 	bl	8007cb4 <HAL_GPIO_ReadPin>
}
 8003554:	bd10      	pop	{r4, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	50000400 	.word	0x50000400

0800355c <Read_DI_ACC_STATE>:
static int Read_DI_ACC_STATE(){
 800355c:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	01c9      	lsls	r1, r1, #7
 8003562:	4802      	ldr	r0, [pc, #8]	; (800356c <Read_DI_ACC_STATE+0x10>)
 8003564:	f004 fba6 	bl	8007cb4 <HAL_GPIO_ReadPin>
}
 8003568:	bd10      	pop	{r4, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	50000400 	.word	0x50000400

08003570 <Read_DI_BOX_STATE>:
static char Read_DI_BOX_STATE(){
 8003570:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	0209      	lsls	r1, r1, #8
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <Read_DI_BOX_STATE+0x1c>)
 8003578:	f004 fb9c 	bl	8007cb4 <HAL_GPIO_ReadPin>
		else box='C';
 800357c:	1e43      	subs	r3, r0, #1
 800357e:	425a      	negs	r2, r3
 8003580:	4153      	adcs	r3, r2
 8003582:	425b      	negs	r3, r3
 8003584:	200c      	movs	r0, #12
 8003586:	4018      	ands	r0, r3
 8003588:	3043      	adds	r0, #67	; 0x43
}
 800358a:	bd10      	pop	{r4, pc}
 800358c:	50000400 	.word	0x50000400

08003590 <Read_DI_SOS_STATE>:
static int Read_DI_SOS_STATE(){
 8003590:	b510      	push	{r4, lr}
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8003592:	2180      	movs	r1, #128	; 0x80
 8003594:	20a0      	movs	r0, #160	; 0xa0
 8003596:	0049      	lsls	r1, r1, #1
 8003598:	05c0      	lsls	r0, r0, #23
 800359a:	f004 fb8b 	bl	8007cb4 <HAL_GPIO_ReadPin>
}
 800359e:	bd10      	pop	{r4, pc}

080035a0 <StartTask02>:
{
 80035a0:	b510      	push	{r4, lr}
while(1){osDelay(1);
 80035a2:	2001      	movs	r0, #1
 80035a4:	f007 f9f8 	bl	800a998 <osDelay>
 80035a8:	e7fb      	b.n	80035a2 <StartTask02+0x2>

080035aa <StartTask03>:
{
 80035aa:	b510      	push	{r4, lr}
    osDelay(1);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f007 f9f3 	bl	800a998 <osDelay>
  for(;;)
 80035b2:	e7fb      	b.n	80035ac <StartTask03+0x2>

080035b4 <RestartGSM>:
	}
	return 1;
}

void RestartGSM()
{
 80035b4:	b570      	push	{r4, r5, r6, lr}
	}
}

static void SET_GSM_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80035b6:	4c20      	ldr	r4, [pc, #128]	; (8003638 <RestartGSM+0x84>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	2140      	movs	r1, #64	; 0x40
 80035bc:	0020      	movs	r0, r4
 80035be:	f004 fb7f 	bl	8007cc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2180      	movs	r1, #128	; 0x80
 80035c6:	0020      	movs	r0, r4
 80035c8:	f004 fb7a 	bl	8007cc0 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(1);
	SET_PWRKEY(0);
	HAL_Delay(700);
 80035cc:	25af      	movs	r5, #175	; 0xaf
 80035ce:	00ad      	lsls	r5, r5, #2
 80035d0:	0028      	movs	r0, r5
 80035d2:	f003 fca5 	bl	8006f20 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80035d6:	2201      	movs	r2, #1
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	0020      	movs	r0, r4
 80035dc:	f004 fb70 	bl	8007cc0 <HAL_GPIO_WritePin>
	SET_PWRKEY(1);
	HAL_Delay(500);
 80035e0:	26fa      	movs	r6, #250	; 0xfa
 80035e2:	0076      	lsls	r6, r6, #1
 80035e4:	0030      	movs	r0, r6
 80035e6:	f003 fc9b 	bl	8006f20 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	0020      	movs	r0, r4
 80035f0:	f004 fb66 	bl	8007cc0 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
	HAL_Delay(700);
 80035f4:	0028      	movs	r0, r5
 80035f6:	f003 fc93 	bl	8006f20 <HAL_Delay>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2140      	movs	r1, #64	; 0x40
 80035fe:	0020      	movs	r0, r4
 8003600:	f004 fb5e 	bl	8007cc0 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(0);
	HAL_Delay(700);
 8003604:	0028      	movs	r0, r5
 8003606:	f003 fc8b 	bl	8006f20 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800360a:	2201      	movs	r2, #1
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	0020      	movs	r0, r4
 8003610:	f004 fb56 	bl	8007cc0 <HAL_GPIO_WritePin>
	SET_PWRKEY(1);
	HAL_Delay(500);
 8003614:	0030      	movs	r0, r6
 8003616:	f003 fc83 	bl	8006f20 <HAL_Delay>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800361a:	2201      	movs	r2, #1
 800361c:	2140      	movs	r1, #64	; 0x40
 800361e:	0020      	movs	r0, r4
 8003620:	f004 fb4e 	bl	8007cc0 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(1);
	HAL_Delay(200);
 8003624:	20c8      	movs	r0, #200	; 0xc8
 8003626:	f003 fc7b 	bl	8006f20 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800362a:	2200      	movs	r2, #0
 800362c:	2180      	movs	r1, #128	; 0x80
 800362e:	0020      	movs	r0, r4
 8003630:	f004 fb46 	bl	8007cc0 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
}
 8003634:	bd70      	pop	{r4, r5, r6, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	50000800 	.word	0x50000800

0800363c <SendGSMCode>:

void SendGSMCode(const char cmd[])
{
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	0005      	movs	r5, r0

	memset(GSMData, 0, 990);
 8003640:	4818      	ldr	r0, [pc, #96]	; (80036a4 <SendGSMCode+0x68>)
 8003642:	4a19      	ldr	r2, [pc, #100]	; (80036a8 <SendGSMCode+0x6c>)
 8003644:	2100      	movs	r1, #0
 8003646:	f00a fd05 	bl	800e054 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <SendGSMCode+0x70>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	220c      	movs	r2, #12
 8003650:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003652:	4917      	ldr	r1, [pc, #92]	; (80036b0 <SendGSMCode+0x74>)
 8003654:	4817      	ldr	r0, [pc, #92]	; (80036b4 <SendGSMCode+0x78>)
 8003656:	3a0b      	subs	r2, #11
 8003658:	f007 f842 	bl	800a6e0 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 100);
 800365c:	4816      	ldr	r0, [pc, #88]	; (80036b8 <SendGSMCode+0x7c>)
 800365e:	2264      	movs	r2, #100	; 0x64
 8003660:	2100      	movs	r1, #0
 8003662:	f00a fcf7 	bl	800e054 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 8003666:	0028      	movs	r0, r5
 8003668:	f7fc fd4e 	bl	8000108 <strlen>
 800366c:	4b13      	ldr	r3, [pc, #76]	; (80036bc <SendGSMCode+0x80>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <SendGSMCode+0x3c>
 8003674:	285a      	cmp	r0, #90	; 0x5a
 8003676:	d810      	bhi.n	800369a <SendGSMCode+0x5e>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 8003678:	4c0f      	ldr	r4, [pc, #60]	; (80036b8 <SendGSMCode+0x7c>)
 800367a:	0029      	movs	r1, r5
 800367c:	0020      	movs	r0, r4
 800367e:	f00a fe9e 	bl	800e3be <strcpy>
	strcat(GSMTXC, "\r\n");
 8003682:	0020      	movs	r0, r4
 8003684:	f7fc fd40 	bl	8000108 <strlen>
 8003688:	1820      	adds	r0, r4, r0
 800368a:	490d      	ldr	r1, [pc, #52]	; (80036c0 <SendGSMCode+0x84>)
 800368c:	2203      	movs	r2, #3
 800368e:	f00a fea9 	bl	800e3e4 <memcpy>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 8003692:	0020      	movs	r0, r4
 8003694:	f7ff fe64 	bl	8003360 <GSM_Tx>
	// return GSM_Rx();
}
 8003698:	bd70      	pop	{r4, r5, r6, pc}
		Debug_Tx("Error:GSM Code Length Exceed");
 800369a:	480a      	ldr	r0, [pc, #40]	; (80036c4 <SendGSMCode+0x88>)
 800369c:	f7ff fe40 	bl	8003320 <Debug_Tx>
 80036a0:	e7ea      	b.n	8003678 <SendGSMCode+0x3c>
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	20000550 	.word	0x20000550
 80036a8:	000003de 	.word	0x000003de
 80036ac:	20003d9c 	.word	0x20003d9c
 80036b0:	2000054c 	.word	0x2000054c
 80036b4:	20003d08 	.word	0x20003d08
 80036b8:	200011d4 	.word	0x200011d4
 80036bc:	200000c4 	.word	0x200000c4
 80036c0:	08011d20 	.word	0x08011d20
 80036c4:	08011d00 	.word	0x08011d00

080036c8 <SendGSMCodeL>:
	GSM_Tx(cmd);
	// return GSM_Rx();
}

void SendGSMCodeL(const char cmd[])
{
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80036cc:	4b18      	ldr	r3, [pc, #96]	; (8003730 <SendGSMCodeL+0x68>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	220c      	movs	r2, #12
 80036d2:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80036d4:	4917      	ldr	r1, [pc, #92]	; (8003734 <SendGSMCodeL+0x6c>)
 80036d6:	4818      	ldr	r0, [pc, #96]	; (8003738 <SendGSMCodeL+0x70>)
 80036d8:	3a0b      	subs	r2, #11
 80036da:	f007 f801 	bl	800a6e0 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 80036de:	4817      	ldr	r0, [pc, #92]	; (800373c <SendGSMCodeL+0x74>)
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <SendGSMCodeL+0x78>)
 80036e2:	2100      	movs	r1, #0
 80036e4:	f00a fcb6 	bl	800e054 <memset>
	memset(GSMTXC, 0, 100);
 80036e8:	4816      	ldr	r0, [pc, #88]	; (8003744 <SendGSMCodeL+0x7c>)
 80036ea:	2264      	movs	r2, #100	; 0x64
 80036ec:	2100      	movs	r1, #0
 80036ee:	f00a fcb1 	bl	800e054 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 80036f2:	0028      	movs	r0, r5
 80036f4:	f7fc fd08 	bl	8000108 <strlen>
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <SendGSMCodeL+0x80>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <SendGSMCodeL+0x3c>
 8003700:	285a      	cmp	r0, #90	; 0x5a
 8003702:	d810      	bhi.n	8003726 <SendGSMCodeL+0x5e>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 8003704:	4c0f      	ldr	r4, [pc, #60]	; (8003744 <SendGSMCodeL+0x7c>)
 8003706:	0029      	movs	r1, r5
 8003708:	0020      	movs	r0, r4
 800370a:	f00a fe58 	bl	800e3be <strcpy>
	strcat(GSMTXC, "\r\n");
 800370e:	0020      	movs	r0, r4
 8003710:	f7fc fcfa 	bl	8000108 <strlen>
 8003714:	1820      	adds	r0, r4, r0
 8003716:	490d      	ldr	r1, [pc, #52]	; (800374c <SendGSMCodeL+0x84>)
 8003718:	2203      	movs	r2, #3
 800371a:	f00a fe63 	bl	800e3e4 <memcpy>
	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
 800371e:	0020      	movs	r0, r4
 8003720:	f7ff fe1e 	bl	8003360 <GSM_Tx>

	// return GSM_RxL();
}
 8003724:	bd70      	pop	{r4, r5, r6, pc}
		Debug_Tx("Error:GSM Code Length Exceed");
 8003726:	480a      	ldr	r0, [pc, #40]	; (8003750 <SendGSMCodeL+0x88>)
 8003728:	f7ff fdfa 	bl	8003320 <Debug_Tx>
 800372c:	e7ea      	b.n	8003704 <SendGSMCodeL+0x3c>
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	20003d9c 	.word	0x20003d9c
 8003734:	2000054c 	.word	0x2000054c
 8003738:	20003d08 	.word	0x20003d08
 800373c:	20000550 	.word	0x20000550
 8003740:	000003de 	.word	0x000003de
 8003744:	200011d4 	.word	0x200011d4
 8003748:	200000c4 	.word	0x200000c4
 800374c:	08011d20 	.word	0x08011d20
 8003750:	08011d00 	.word	0x08011d00

08003754 <SendGSMData>:

void SendGSMData(const char data[])
{
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	b083      	sub	sp, #12
 8003758:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <SendGSMData+0x58>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	270c      	movs	r7, #12
 8003760:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8003762:	4913      	ldr	r1, [pc, #76]	; (80037b0 <SendGSMData+0x5c>)
 8003764:	4c13      	ldr	r4, [pc, #76]	; (80037b4 <SendGSMData+0x60>)
 8003766:	2201      	movs	r2, #1
 8003768:	0020      	movs	r0, r4
 800376a:	f006 ffb9 	bl	800a6e0 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 800376e:	4812      	ldr	r0, [pc, #72]	; (80037b8 <SendGSMData+0x64>)
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <SendGSMData+0x68>)
 8003772:	2100      	movs	r1, #0
 8003774:	f00a fc6e 	bl	800e054 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 8003778:	ae01      	add	r6, sp, #4
 800377a:	2202      	movs	r2, #2
 800377c:	2100      	movs	r1, #0
 800377e:	466b      	mov	r3, sp
 8003780:	1d58      	adds	r0, r3, #5
 8003782:	f00a fc67 	bl	800e054 <memset>
	end[0] = 0x1A;
 8003786:	231a      	movs	r3, #26
 8003788:	7033      	strb	r3, [r6, #0]

static void GSM_TxL(const char _out[]){

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 800378e:	0028      	movs	r0, r5
 8003790:	f7fc fcba 	bl	8000108 <strlen>
 8003794:	b282      	uxth	r2, r0
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <SendGSMData+0x6c>)
 8003798:	0029      	movs	r1, r5
 800379a:	0020      	movs	r0, r4
 800379c:	f006 fdb4 	bl	800a308 <HAL_UART_Transmit>
	// memset(GSMTXD,0,300);
	// if((strlen(data)>) &(debug==1)){Debug_Tx("Error:GSM Data Length Exceed");}
	// strcpy(GSMTXD,data);
	// strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
	GSM_Tx((char *)end);
 80037a0:	0030      	movs	r0, r6
 80037a2:	f7ff fddd 	bl	8003360 <GSM_Tx>

	// return GSM_Rx();
}
 80037a6:	b003      	add	sp, #12
 80037a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	20003d9c 	.word	0x20003d9c
 80037b0:	2000054c 	.word	0x2000054c
 80037b4:	20003d08 	.word	0x20003d08
 80037b8:	20000550 	.word	0x20000550
 80037bc:	000003de 	.word	0x000003de
 80037c0:	00001388 	.word	0x00001388

080037c4 <EndTransfer>:

void EndTransfer()
{
 80037c4:	b510      	push	{r4, lr}
 80037c6:	b082      	sub	sp, #8

	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 80037c8:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <EndTransfer+0x3c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	220c      	movs	r2, #12
 80037ce:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <EndTransfer+0x40>)
 80037d2:	480d      	ldr	r0, [pc, #52]	; (8003808 <EndTransfer+0x44>)
 80037d4:	3a0b      	subs	r2, #11
 80037d6:	f006 ff83 	bl	800a6e0 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 990);
 80037da:	480c      	ldr	r0, [pc, #48]	; (800380c <EndTransfer+0x48>)
 80037dc:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <EndTransfer+0x4c>)
 80037de:	2100      	movs	r1, #0
 80037e0:	f00a fc38 	bl	800e054 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 80037e4:	ac01      	add	r4, sp, #4
 80037e6:	2202      	movs	r2, #2
 80037e8:	2100      	movs	r1, #0
 80037ea:	466b      	mov	r3, sp
 80037ec:	1d58      	adds	r0, r3, #5
 80037ee:	f00a fc31 	bl	800e054 <memset>
	end[0] = 0x1A;
 80037f2:	231a      	movs	r3, #26
 80037f4:	7023      	strb	r3, [r4, #0]
	GSM_Tx((char *)end);
 80037f6:	0020      	movs	r0, r4
 80037f8:	f7ff fdb2 	bl	8003360 <GSM_Tx>
	// return GSM_Rx();
}
 80037fc:	b002      	add	sp, #8
 80037fe:	bd10      	pop	{r4, pc}
 8003800:	20003d9c 	.word	0x20003d9c
 8003804:	2000054c 	.word	0x2000054c
 8003808:	20003d08 	.word	0x20003d08
 800380c:	20000550 	.word	0x20000550
 8003810:	000003de 	.word	0x000003de

08003814 <waitForResponse>:
int waitForResponse(const char* expectedResponse, int timeout) {
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	0006      	movs	r6, r0
 8003818:	000d      	movs	r5, r1
	memset(GSMReply3, 0, 500);
 800381a:	480f      	ldr	r0, [pc, #60]	; (8003858 <waitForResponse+0x44>)
 800381c:	22fa      	movs	r2, #250	; 0xfa
 800381e:	0052      	lsls	r2, r2, #1
 8003820:	2100      	movs	r1, #0
 8003822:	f00a fc17 	bl	800e054 <memset>
    uint16_t rxBufferIndex = 0;
    int ret=0;

	int stT = HAL_GetTick();
 8003826:	f003 fb75 	bl	8006f14 <HAL_GetTick>
 800382a:	0004      	movs	r4, r0
	while (((HAL_GetTick() - stT) <= timeout)){
		//HAL_UART_Receive(&huart1, (uint8_t*)(GSMReply3 + rxBufferIndex), 1, HAL_MAX_DELAY);
        //rxBufferIndex++;
		//strlen(GSMData)
        if (strstr(GSMData, expectedResponse) != NULL) {
 800382c:	4f0b      	ldr	r7, [pc, #44]	; (800385c <waitForResponse+0x48>)
	while (((HAL_GetTick() - stT) <= timeout)){
 800382e:	f003 fb71 	bl	8006f14 <HAL_GetTick>
 8003832:	1b00      	subs	r0, r0, r4
 8003834:	42a8      	cmp	r0, r5
 8003836:	d807      	bhi.n	8003848 <waitForResponse+0x34>
        if (strstr(GSMData, expectedResponse) != NULL) {
 8003838:	0031      	movs	r1, r6
 800383a:	0038      	movs	r0, r7
 800383c:	f00a fcba 	bl	800e1b4 <strstr>
 8003840:	2800      	cmp	r0, #0
 8003842:	d0f4      	beq.n	800382e <waitForResponse+0x1a>
        	ret=1;
 8003844:	2001      	movs	r0, #1
        }
    }
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
	return ret;

}
 8003846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
 8003848:	4805      	ldr	r0, [pc, #20]	; (8003860 <waitForResponse+0x4c>)
 800384a:	f7ff fd69 	bl	8003320 <Debug_Tx>
 800384e:	4803      	ldr	r0, [pc, #12]	; (800385c <waitForResponse+0x48>)
 8003850:	f7ff fd66 	bl	8003320 <Debug_Tx>
    int ret=0;
 8003854:	2000      	movs	r0, #0
 8003856:	e7f6      	b.n	8003846 <waitForResponse+0x32>
 8003858:	20000fdc 	.word	0x20000fdc
 800385c:	20000550 	.word	0x20000550
 8003860:	08011da8 	.word	0x08011da8

08003864 <GSMCellInfo>:
		ResetTCP();
	}
}

char *GSMCellInfo()
{
 8003864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003866:	46de      	mov	lr, fp
 8003868:	4657      	mov	r7, sl
 800386a:	464e      	mov	r6, r9
 800386c:	4645      	mov	r5, r8
 800386e:	b5e0      	push	{r5, r6, r7, lr}
 8003870:	b09d      	sub	sp, #116	; 0x74

	memset(SS0, 0, 4);
 8003872:	4aa3      	ldr	r2, [pc, #652]	; (8003b00 <GSMCellInfo+0x29c>)
 8003874:	2300      	movs	r3, #0
 8003876:	9211      	str	r2, [sp, #68]	; 0x44
 8003878:	8053      	strh	r3, [r2, #2]
	memset(SS1, 0, 4);
 800387a:	49a2      	ldr	r1, [pc, #648]	; (8003b04 <GSMCellInfo+0x2a0>)
 800387c:	9112      	str	r1, [sp, #72]	; 0x48
 800387e:	804b      	strh	r3, [r1, #2]
	memset(SS2, 0, 4);
 8003880:	48a1      	ldr	r0, [pc, #644]	; (8003b08 <GSMCellInfo+0x2a4>)
 8003882:	9013      	str	r0, [sp, #76]	; 0x4c
 8003884:	8043      	strh	r3, [r0, #2]
	memset(SS3, 0, 4);
 8003886:	4ca1      	ldr	r4, [pc, #644]	; (8003b0c <GSMCellInfo+0x2a8>)
 8003888:	9414      	str	r4, [sp, #80]	; 0x50
 800388a:	8063      	strh	r3, [r4, #2]
	memset(SS4, 0, 4);
 800388c:	4da0      	ldr	r5, [pc, #640]	; (8003b10 <GSMCellInfo+0x2ac>)
 800388e:	9515      	str	r5, [sp, #84]	; 0x54
 8003890:	806b      	strh	r3, [r5, #2]
	memset(MCC0, 0, 5);
 8003892:	4ba0      	ldr	r3, [pc, #640]	; (8003b14 <GSMCellInfo+0x2b0>)
 8003894:	469b      	mov	fp, r3
 8003896:	1c98      	adds	r0, r3, #2
 8003898:	2203      	movs	r2, #3
 800389a:	2100      	movs	r1, #0
 800389c:	f00a fbda 	bl	800e054 <memset>
	memset(MNC0, 0, 5);
 80038a0:	4b9d      	ldr	r3, [pc, #628]	; (8003b18 <GSMCellInfo+0x2b4>)
 80038a2:	469a      	mov	sl, r3
 80038a4:	1c98      	adds	r0, r3, #2
 80038a6:	2203      	movs	r2, #3
 80038a8:	2100      	movs	r1, #0
 80038aa:	f00a fbd3 	bl	800e054 <memset>
	memset(LAC0, 0, 6);
 80038ae:	4b9b      	ldr	r3, [pc, #620]	; (8003b1c <GSMCellInfo+0x2b8>)
 80038b0:	9316      	str	r3, [sp, #88]	; 0x58
 80038b2:	1c98      	adds	r0, r3, #2
 80038b4:	2204      	movs	r2, #4
 80038b6:	2100      	movs	r1, #0
 80038b8:	f00a fbcc 	bl	800e054 <memset>
	memset(LAC1, 0, 6);
 80038bc:	4e98      	ldr	r6, [pc, #608]	; (8003b20 <GSMCellInfo+0x2bc>)
 80038be:	9617      	str	r6, [sp, #92]	; 0x5c
 80038c0:	1cb0      	adds	r0, r6, #2
 80038c2:	2204      	movs	r2, #4
 80038c4:	2100      	movs	r1, #0
 80038c6:	f00a fbc5 	bl	800e054 <memset>
	memset(LAC2, 0, 6);
 80038ca:	4f96      	ldr	r7, [pc, #600]	; (8003b24 <GSMCellInfo+0x2c0>)
 80038cc:	9718      	str	r7, [sp, #96]	; 0x60
 80038ce:	1cb8      	adds	r0, r7, #2
 80038d0:	2204      	movs	r2, #4
 80038d2:	2100      	movs	r1, #0
 80038d4:	f00a fbbe 	bl	800e054 <memset>
	memset(LAC3, 0, 6);
 80038d8:	4b93      	ldr	r3, [pc, #588]	; (8003b28 <GSMCellInfo+0x2c4>)
 80038da:	9319      	str	r3, [sp, #100]	; 0x64
 80038dc:	1c98      	adds	r0, r3, #2
 80038de:	2204      	movs	r2, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	f00a fbb7 	bl	800e054 <memset>
	memset(LAC4, 0, 6);
 80038e6:	4c91      	ldr	r4, [pc, #580]	; (8003b2c <GSMCellInfo+0x2c8>)
 80038e8:	1ca0      	adds	r0, r4, #2
 80038ea:	2204      	movs	r2, #4
 80038ec:	2100      	movs	r1, #0
 80038ee:	f00a fbb1 	bl	800e054 <memset>
	memset(CID4, 0, 6);
 80038f2:	4d8f      	ldr	r5, [pc, #572]	; (8003b30 <GSMCellInfo+0x2cc>)
 80038f4:	1ca8      	adds	r0, r5, #2
 80038f6:	2204      	movs	r2, #4
 80038f8:	2100      	movs	r1, #0
 80038fa:	f00a fbab 	bl	800e054 <memset>
	memset(CID3, 0, 6);
 80038fe:	4e8d      	ldr	r6, [pc, #564]	; (8003b34 <GSMCellInfo+0x2d0>)
 8003900:	1cb0      	adds	r0, r6, #2
 8003902:	2204      	movs	r2, #4
 8003904:	2100      	movs	r1, #0
 8003906:	f00a fba5 	bl	800e054 <memset>
	memset(CID2, 0, 6);
 800390a:	4f8b      	ldr	r7, [pc, #556]	; (8003b38 <GSMCellInfo+0x2d4>)
 800390c:	1cb8      	adds	r0, r7, #2
 800390e:	2204      	movs	r2, #4
 8003910:	2100      	movs	r1, #0
 8003912:	f00a fb9f 	bl	800e054 <memset>
	memset(CID1, 0, 6);
 8003916:	4889      	ldr	r0, [pc, #548]	; (8003b3c <GSMCellInfo+0x2d8>)
 8003918:	4680      	mov	r8, r0
 800391a:	3002      	adds	r0, #2
 800391c:	2204      	movs	r2, #4
 800391e:	2100      	movs	r1, #0
 8003920:	f00a fb98 	bl	800e054 <memset>
	memset(CID0, 0, 6);
 8003924:	4886      	ldr	r0, [pc, #536]	; (8003b40 <GSMCellInfo+0x2dc>)
 8003926:	4681      	mov	r9, r0
 8003928:	3002      	adds	r0, #2
 800392a:	2204      	movs	r2, #4
 800392c:	2100      	movs	r1, #0
 800392e:	f00a fb91 	bl	800e054 <memset>
	strcpy(MCC0, "x\0");
 8003932:	2378      	movs	r3, #120	; 0x78
 8003934:	4658      	mov	r0, fp
 8003936:	8003      	strh	r3, [r0, #0]
	strcpy(MNC0, "x\0");
 8003938:	4650      	mov	r0, sl
 800393a:	8003      	strh	r3, [r0, #0]
	strcpy(LAC0, "x\0");
 800393c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800393e:	800b      	strh	r3, [r1, #0]
	strcpy(CID0, "x\0");
 8003940:	4648      	mov	r0, r9
 8003942:	8003      	strh	r3, [r0, #0]
	strcpy(SS0, "x\0");
 8003944:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003946:	8013      	strh	r3, [r2, #0]
	strcpy(SS1, "x\0");
 8003948:	9912      	ldr	r1, [sp, #72]	; 0x48
 800394a:	800b      	strh	r3, [r1, #0]
	strcpy(CID1, "x\0");
 800394c:	4642      	mov	r2, r8
 800394e:	8013      	strh	r3, [r2, #0]
	strcpy(LAC1, "x\0");
 8003950:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003952:	800b      	strh	r3, [r1, #0]

	strcpy(SS2, "x\0");
 8003954:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003956:	8003      	strh	r3, [r0, #0]
	strcpy(CID2, "x\0");
 8003958:	803b      	strh	r3, [r7, #0]
	strcpy(LAC2, "x\0");
 800395a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800395c:	803b      	strh	r3, [r7, #0]

	strcpy(SS3, "x\0");
 800395e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003960:	8013      	strh	r3, [r2, #0]
	strcpy(CID3, "x\0");
 8003962:	8033      	strh	r3, [r6, #0]
	strcpy(LAC3, "x\0");
 8003964:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003966:	800b      	strh	r3, [r1, #0]

	strcpy(SS4, "x\0");
 8003968:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800396a:	8013      	strh	r3, [r2, #0]
	strcpy(CID4, "x\0");
 800396c:	802b      	strh	r3, [r5, #0]
	strcpy(LAC4, "x\0");
 800396e:	8023      	strh	r3, [r4, #0]

	memset(GSMData, 0, 800);
 8003970:	4c74      	ldr	r4, [pc, #464]	; (8003b44 <GSMCellInfo+0x2e0>)
 8003972:	22c8      	movs	r2, #200	; 0xc8
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	2100      	movs	r1, #0
 8003978:	0020      	movs	r0, r4
 800397a:	f00a fb6b 	bl	800e054 <memset>

	SendGSMCodeL(" AT+QENG?");
 800397e:	4872      	ldr	r0, [pc, #456]	; (8003b48 <GSMCellInfo+0x2e4>)
 8003980:	f7ff fea2 	bl	80036c8 <SendGSMCodeL>
	// Debug_Tx(GSMData);

	HAL_Delay(500);
 8003984:	20fa      	movs	r0, #250	; 0xfa
 8003986:	0040      	lsls	r0, r0, #1
 8003988:	f003 faca 	bl	8006f20 <HAL_Delay>

	char *m0 = strstr(GSMData, "+QENG: 0");
 800398c:	496f      	ldr	r1, [pc, #444]	; (8003b4c <GSMCellInfo+0x2e8>)
 800398e:	0020      	movs	r0, r4
 8003990:	f00a fc10 	bl	800e1b4 <strstr>
 8003994:	0004      	movs	r4, r0
 8003996:	901b      	str	r0, [sp, #108]	; 0x6c
	if ((m0 != NULL) & (strlen(m0) > 1))
 8003998:	f7fc fbb6 	bl	8000108 <strlen>
 800399c:	2c00      	cmp	r4, #0
 800399e:	d026      	beq.n	80039ee <GSMCellInfo+0x18a>
	{

		// Debug_Tx(m0);
		int k = 0;
 80039a0:	2400      	movs	r4, #0
	if ((m0 != NULL) & (strlen(m0) > 1))
 80039a2:	2801      	cmp	r0, #1
 80039a4:	d923      	bls.n	80039ee <GSMCellInfo+0x18a>
		char *part;
		while ((part = strtok_r(m0, ",", &m0)))
 80039a6:	4d6a      	ldr	r5, [pc, #424]	; (8003b50 <GSMCellInfo+0x2ec>)
 80039a8:	4e6a      	ldr	r6, [pc, #424]	; (8003b54 <GSMCellInfo+0x2f0>)
			else if (k == 3)
				strcpy(LAC0, part);
			else if (k == 4)
				strcpy(CID0, part);
			else if (k == 7)
				strcpy(SS0, part);
 80039aa:	4f55      	ldr	r7, [pc, #340]	; (8003b00 <GSMCellInfo+0x29c>)
 80039ac:	e003      	b.n	80039b6 <GSMCellInfo+0x152>
				strcpy(MCC0, part);
 80039ae:	4859      	ldr	r0, [pc, #356]	; (8003b14 <GSMCellInfo+0x2b0>)
 80039b0:	f00a fd05 	bl	800e3be <strcpy>
			k++;
 80039b4:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80039b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80039b8:	aa1b      	add	r2, sp, #108	; 0x6c
 80039ba:	0029      	movs	r1, r5
 80039bc:	f00a fbf5 	bl	800e1aa <strtok_r>
 80039c0:	1e01      	subs	r1, r0, #0
 80039c2:	d017      	beq.n	80039f4 <GSMCellInfo+0x190>
			if (k == 1)
 80039c4:	2c07      	cmp	r4, #7
 80039c6:	d8f5      	bhi.n	80039b4 <GSMCellInfo+0x150>
 80039c8:	00a3      	lsls	r3, r4, #2
 80039ca:	58f3      	ldr	r3, [r6, r3]
 80039cc:	469f      	mov	pc, r3
				strcpy(MNC0, part);
 80039ce:	4852      	ldr	r0, [pc, #328]	; (8003b18 <GSMCellInfo+0x2b4>)
 80039d0:	f00a fcf5 	bl	800e3be <strcpy>
 80039d4:	e7ee      	b.n	80039b4 <GSMCellInfo+0x150>
				strcpy(LAC0, part);
 80039d6:	4851      	ldr	r0, [pc, #324]	; (8003b1c <GSMCellInfo+0x2b8>)
 80039d8:	f00a fcf1 	bl	800e3be <strcpy>
 80039dc:	e7ea      	b.n	80039b4 <GSMCellInfo+0x150>
				strcpy(CID0, part);
 80039de:	4858      	ldr	r0, [pc, #352]	; (8003b40 <GSMCellInfo+0x2dc>)
 80039e0:	f00a fced 	bl	800e3be <strcpy>
 80039e4:	e7e6      	b.n	80039b4 <GSMCellInfo+0x150>
				strcpy(SS0, part);
 80039e6:	0038      	movs	r0, r7
 80039e8:	f00a fce9 	bl	800e3be <strcpy>
 80039ec:	e7e2      	b.n	80039b4 <GSMCellInfo+0x150>
		}
	}
	else
	{
		Debug_Tx("GSM tower data  Signal");
 80039ee:	485a      	ldr	r0, [pc, #360]	; (8003b58 <GSMCellInfo+0x2f4>)
 80039f0:	f7ff fc96 	bl	8003320 <Debug_Tx>
	}
	char *m1 = strstr(GSMData, "+QENG: 1");
 80039f4:	4959      	ldr	r1, [pc, #356]	; (8003b5c <GSMCellInfo+0x2f8>)
 80039f6:	4853      	ldr	r0, [pc, #332]	; (8003b44 <GSMCellInfo+0x2e0>)
 80039f8:	f00a fbdc 	bl	800e1b4 <strstr>
 80039fc:	0004      	movs	r4, r0
 80039fe:	901a      	str	r0, [sp, #104]	; 0x68
	if ((m1 != NULL) & (strlen(m1) > 1))
 8003a00:	f7fc fb82 	bl	8000108 <strlen>
 8003a04:	2c00      	cmp	r4, #0
 8003a06:	d043      	beq.n	8003a90 <GSMCellInfo+0x22c>
	{
		// Debug_Tx(m1);
		int k = 0;
 8003a08:	2400      	movs	r4, #0
	if ((m1 != NULL) & (strlen(m1) > 1))
 8003a0a:	2801      	cmp	r0, #1
 8003a0c:	d940      	bls.n	8003a90 <GSMCellInfo+0x22c>
		char *part;
		while ((part = strtok_r(m1, ",", &m1)))
 8003a0e:	4d50      	ldr	r5, [pc, #320]	; (8003b50 <GSMCellInfo+0x2ec>)
 8003a10:	4e53      	ldr	r6, [pc, #332]	; (8003b60 <GSMCellInfo+0x2fc>)
			else if (k == 33)
				strcpy(SS4, part);
			else if (k == 40)
				strcpy(CID4, part);
			else if (k == 39)
				strcpy(LAC4, part);
 8003a12:	4f46      	ldr	r7, [pc, #280]	; (8003b2c <GSMCellInfo+0x2c8>)
 8003a14:	e003      	b.n	8003a1e <GSMCellInfo+0x1ba>
				strcpy(SS1, part);
 8003a16:	483b      	ldr	r0, [pc, #236]	; (8003b04 <GSMCellInfo+0x2a0>)
 8003a18:	f00a fcd1 	bl	800e3be <strcpy>
			k++;
 8003a1c:	3401      	adds	r4, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8003a1e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003a20:	aa1a      	add	r2, sp, #104	; 0x68
 8003a22:	0029      	movs	r1, r5
 8003a24:	f00a fbc1 	bl	800e1aa <strtok_r>
 8003a28:	1e01      	subs	r1, r0, #0
 8003a2a:	d031      	beq.n	8003a90 <GSMCellInfo+0x22c>
			if (k == 3)
 8003a2c:	1ee3      	subs	r3, r4, #3
 8003a2e:	2b25      	cmp	r3, #37	; 0x25
 8003a30:	d8f4      	bhi.n	8003a1c <GSMCellInfo+0x1b8>
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	58f3      	ldr	r3, [r6, r3]
 8003a36:	469f      	mov	pc, r3
				strcpy(CID1, part);
 8003a38:	4840      	ldr	r0, [pc, #256]	; (8003b3c <GSMCellInfo+0x2d8>)
 8003a3a:	f00a fcc0 	bl	800e3be <strcpy>
 8003a3e:	e7ed      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(LAC1, part);
 8003a40:	4837      	ldr	r0, [pc, #220]	; (8003b20 <GSMCellInfo+0x2bc>)
 8003a42:	f00a fcbc 	bl	800e3be <strcpy>
 8003a46:	e7e9      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(SS2, part);
 8003a48:	482f      	ldr	r0, [pc, #188]	; (8003b08 <GSMCellInfo+0x2a4>)
 8003a4a:	f00a fcb8 	bl	800e3be <strcpy>
 8003a4e:	e7e5      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(CID2, part);
 8003a50:	4839      	ldr	r0, [pc, #228]	; (8003b38 <GSMCellInfo+0x2d4>)
 8003a52:	f00a fcb4 	bl	800e3be <strcpy>
 8003a56:	e7e1      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(LAC2, part);
 8003a58:	4832      	ldr	r0, [pc, #200]	; (8003b24 <GSMCellInfo+0x2c0>)
 8003a5a:	f00a fcb0 	bl	800e3be <strcpy>
 8003a5e:	e7dd      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(SS3, part);
 8003a60:	482a      	ldr	r0, [pc, #168]	; (8003b0c <GSMCellInfo+0x2a8>)
 8003a62:	f00a fcac 	bl	800e3be <strcpy>
 8003a66:	e7d9      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(CID3, part);
 8003a68:	4832      	ldr	r0, [pc, #200]	; (8003b34 <GSMCellInfo+0x2d0>)
 8003a6a:	f00a fca8 	bl	800e3be <strcpy>
 8003a6e:	e7d5      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(LAC3, part);
 8003a70:	482d      	ldr	r0, [pc, #180]	; (8003b28 <GSMCellInfo+0x2c4>)
 8003a72:	f00a fca4 	bl	800e3be <strcpy>
 8003a76:	e7d1      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(SS4, part);
 8003a78:	4825      	ldr	r0, [pc, #148]	; (8003b10 <GSMCellInfo+0x2ac>)
 8003a7a:	f00a fca0 	bl	800e3be <strcpy>
 8003a7e:	e7cd      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(CID4, part);
 8003a80:	482b      	ldr	r0, [pc, #172]	; (8003b30 <GSMCellInfo+0x2cc>)
 8003a82:	f00a fc9c 	bl	800e3be <strcpy>
 8003a86:	e7c9      	b.n	8003a1c <GSMCellInfo+0x1b8>
				strcpy(LAC4, part);
 8003a88:	0038      	movs	r0, r7
 8003a8a:	f00a fc98 	bl	800e3be <strcpy>
 8003a8e:	e7c5      	b.n	8003a1c <GSMCellInfo+0x1b8>
		}
	}

	//

	memset(gsminfo, 0, 80);
 8003a90:	4c34      	ldr	r4, [pc, #208]	; (8003b64 <GSMCellInfo+0x300>)
 8003a92:	2250      	movs	r2, #80	; 0x50
 8003a94:	2100      	movs	r1, #0
 8003a96:	0020      	movs	r0, r4
 8003a98:	f00a fadc 	bl	800e054 <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
 8003a9c:	4d1d      	ldr	r5, [pc, #116]	; (8003b14 <GSMCellInfo+0x2b0>)
 8003a9e:	4b32      	ldr	r3, [pc, #200]	; (8003b68 <GSMCellInfo+0x304>)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f7fd fc03 	bl	80012ac <__aeabi_f2iz>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	4930      	ldr	r1, [pc, #192]	; (8003b6c <GSMCellInfo+0x308>)
 8003aaa:	4b19      	ldr	r3, [pc, #100]	; (8003b10 <GSMCellInfo+0x2ac>)
 8003aac:	930e      	str	r3, [sp, #56]	; 0x38
 8003aae:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <GSMCellInfo+0x2c8>)
 8003ab0:	930d      	str	r3, [sp, #52]	; 0x34
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	; (8003b30 <GSMCellInfo+0x2cc>)
 8003ab4:	930c      	str	r3, [sp, #48]	; 0x30
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <GSMCellInfo+0x2a8>)
 8003ab8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <GSMCellInfo+0x2c4>)
 8003abc:	930a      	str	r3, [sp, #40]	; 0x28
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <GSMCellInfo+0x2d0>)
 8003ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <GSMCellInfo+0x2a4>)
 8003ac4:	9308      	str	r3, [sp, #32]
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <GSMCellInfo+0x2c0>)
 8003ac8:	9307      	str	r3, [sp, #28]
 8003aca:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <GSMCellInfo+0x2d4>)
 8003acc:	9306      	str	r3, [sp, #24]
 8003ace:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <GSMCellInfo+0x2a0>)
 8003ad0:	9305      	str	r3, [sp, #20]
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <GSMCellInfo+0x2bc>)
 8003ad4:	9304      	str	r3, [sp, #16]
 8003ad6:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <GSMCellInfo+0x2d8>)
 8003ad8:	9303      	str	r3, [sp, #12]
 8003ada:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <GSMCellInfo+0x2dc>)
 8003adc:	9302      	str	r3, [sp, #8]
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <GSMCellInfo+0x2b8>)
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <GSMCellInfo+0x2b4>)
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	002b      	movs	r3, r5
 8003ae8:	0020      	movs	r0, r4
 8003aea:	f00a fa47 	bl	800df7c <siprintf>
			(int)GSMSignal, MCC0, MNC0, LAC0, CID0, CID1, LAC1, SS1, CID2, LAC2, SS2, CID3, LAC3, SS3, CID4, LAC4, SS4);
	// Debug_Tx(gsminfo);

	return (gsminfo);
}
 8003aee:	0020      	movs	r0, r4
 8003af0:	b01d      	add	sp, #116	; 0x74
 8003af2:	bcf0      	pop	{r4, r5, r6, r7}
 8003af4:	46bb      	mov	fp, r7
 8003af6:	46b2      	mov	sl, r6
 8003af8:	46a9      	mov	r9, r5
 8003afa:	46a0      	mov	r8, r4
 8003afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	200033b8 	.word	0x200033b8
 8003b04:	200033bc 	.word	0x200033bc
 8003b08:	200033c0 	.word	0x200033c0
 8003b0c:	200033c4 	.word	0x200033c4
 8003b10:	200033c8 	.word	0x200033c8
 8003b14:	2000132c 	.word	0x2000132c
 8003b18:	20001334 	.word	0x20001334
 8003b1c:	20001300 	.word	0x20001300
 8003b20:	20001308 	.word	0x20001308
 8003b24:	20001310 	.word	0x20001310
 8003b28:	20001318 	.word	0x20001318
 8003b2c:	20001320 	.word	0x20001320
 8003b30:	20000354 	.word	0x20000354
 8003b34:	2000034c 	.word	0x2000034c
 8003b38:	20000344 	.word	0x20000344
 8003b3c:	2000033c 	.word	0x2000033c
 8003b40:	20000334 	.word	0x20000334
 8003b44:	20000550 	.word	0x20000550
 8003b48:	08011dc0 	.word	0x08011dc0
 8003b4c:	08011dcc 	.word	0x08011dcc
 8003b50:	08011dd8 	.word	0x08011dd8
 8003b54:	08011e34 	.word	0x08011e34
 8003b58:	08011ddc 	.word	0x08011ddc
 8003b5c:	08011df4 	.word	0x08011df4
 8003b60:	08011e54 	.word	0x08011e54
 8003b64:	200039e0 	.word	0x200039e0
 8003b68:	200011d0 	.word	0x200011d0
 8003b6c:	08011e00 	.word	0x08011e00

08003b70 <SPI_flash_sent_byte>:
uint8_t buffer_SPI_Recive[30];
//The data you want to receive

//This is the definition of an array

void SPI_flash_sent_byte(uint8_t data){
 8003b70:	b500      	push	{lr}
 8003b72:	b083      	sub	sp, #12
 8003b74:	466b      	mov	r3, sp
 8003b76:	1dd9      	adds	r1, r3, #7
 8003b78:	7008      	strb	r0, [r1, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8003b7a:	23fa      	movs	r3, #250	; 0xfa
 8003b7c:	4803      	ldr	r0, [pc, #12]	; (8003b8c <SPI_flash_sent_byte+0x1c>)
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	2201      	movs	r2, #1
 8003b82:	f005 fb41 	bl	8009208 <HAL_SPI_Transmit>
}
 8003b86:	b003      	add	sp, #12
 8003b88:	bd00      	pop	{pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	20003c58 	.word	0x20003c58

08003b90 <SPI_flash_Write_Enable>:

void SPI_flash_Write_Enable() {
 8003b90:	b510      	push	{r4, lr}
    SPI_flash_cs_low;
 8003b92:	24a0      	movs	r4, #160	; 0xa0
 8003b94:	05e4      	lsls	r4, r4, #23
 8003b96:	2200      	movs	r2, #0
 8003b98:	2110      	movs	r1, #16
 8003b9a:	0020      	movs	r0, r4
 8003b9c:	f004 f890 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 8003ba0:	2006      	movs	r0, #6
 8003ba2:	f7ff ffe5 	bl	8003b70 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2110      	movs	r1, #16
 8003baa:	0020      	movs	r0, r4
 8003bac:	f004 f888 	bl	8007cc0 <HAL_GPIO_WritePin>
}
 8003bb0:	bd10      	pop	{r4, pc}

08003bb2 <SPI_flash_Write_Disable>:

void SPI_flash_Write_Disable() {
 8003bb2:	b510      	push	{r4, lr}
    SPI_flash_cs_low;
 8003bb4:	24a0      	movs	r4, #160	; 0xa0
 8003bb6:	05e4      	lsls	r4, r4, #23
 8003bb8:	2200      	movs	r2, #0
 8003bba:	2110      	movs	r1, #16
 8003bbc:	0020      	movs	r0, r4
 8003bbe:	f004 f87f 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8003bc2:	2004      	movs	r0, #4
 8003bc4:	f7ff ffd4 	bl	8003b70 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003bc8:	2201      	movs	r2, #1
 8003bca:	2110      	movs	r1, #16
 8003bcc:	0020      	movs	r0, r4
 8003bce:	f004 f877 	bl	8007cc0 <HAL_GPIO_WritePin>
}
 8003bd2:	bd10      	pop	{r4, pc}

08003bd4 <SPI_flash_sent_address>:

void SPI_flash_sent_address(uint8_t* Sent){
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	0001      	movs	r1, r0
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8003bd8:	23fa      	movs	r3, #250	; 0xfa
 8003bda:	4c03      	ldr	r4, [pc, #12]	; (8003be8 <SPI_flash_sent_address+0x14>)
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	2203      	movs	r2, #3
 8003be0:	0020      	movs	r0, r4
 8003be2:	f005 fb11 	bl	8009208 <HAL_SPI_Transmit>
}
 8003be6:	bd10      	pop	{r4, pc}
 8003be8:	20003c58 	.word	0x20003c58

08003bec <SPI_flash_TransmitReceive>:



void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
 8003bec:	b500      	push	{lr}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	0002      	movs	r2, r0
 8003bf2:	000b      	movs	r3, r1
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8003bf4:	4804      	ldr	r0, [pc, #16]	; (8003c08 <SPI_flash_TransmitReceive+0x1c>)
 8003bf6:	21fa      	movs	r1, #250	; 0xfa
 8003bf8:	0089      	lsls	r1, r1, #2
 8003bfa:	9100      	str	r1, [sp, #0]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	f005 fbdd 	bl	80093bc <HAL_SPI_TransmitReceive>
}
 8003c02:	b003      	add	sp, #12
 8003c04:	bd00      	pop	{pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	20003c58 	.word	0x20003c58

08003c0c <SPI_flash_get_device_ID>:

void SPI_flash_get_device_ID( ) {
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	b0a0      	sub	sp, #128	; 0x80
    SPI_flash_cs_low;
 8003c10:	26a0      	movs	r6, #160	; 0xa0
 8003c12:	05f6      	lsls	r6, r6, #23
 8003c14:	2200      	movs	r2, #0
 8003c16:	2110      	movs	r1, #16
 8003c18:	0030      	movs	r0, r6
 8003c1a:	f004 f851 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8003c1e:	2090      	movs	r0, #144	; 0x90
 8003c20:	f7ff ffa6 	bl	8003b70 <SPI_flash_sent_byte>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 8003c24:	ac1d      	add	r4, sp, #116	; 0x74
 8003c26:	2500      	movs	r5, #0
 8003c28:	7025      	strb	r5, [r4, #0]
    aa[1]=0;
 8003c2a:	7065      	strb	r5, [r4, #1]
    aa[2]=0;
 8003c2c:	70a5      	strb	r5, [r4, #2]
    aa[3]=0;
 8003c2e:	70e5      	strb	r5, [r4, #3]
    aa[4]=0;
 8003c30:	7125      	strb	r5, [r4, #4]
    aa[5]=0;
 8003c32:	7165      	strb	r5, [r4, #5]
    SPI_flash_sent_address (aa);
 8003c34:	0020      	movs	r0, r4
 8003c36:	f7ff ffcd 	bl	8003bd4 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(aa, 2);
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	0020      	movs	r0, r4
 8003c3e:	f7ff ffd5 	bl	8003bec <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003c42:	2201      	movs	r2, #1
 8003c44:	2110      	movs	r1, #16
 8003c46:	0030      	movs	r0, r6
 8003c48:	f004 f83a 	bl	8007cc0 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 8003c4c:	7863      	ldrb	r3, [r4, #1]
 8003c4e:	7822      	ldrb	r2, [r4, #0]
 8003c50:	492c      	ldr	r1, [pc, #176]	; (8003d04 <SPI_flash_get_device_ID+0xf8>)
 8003c52:	a804      	add	r0, sp, #16
 8003c54:	f00a f992 	bl	800df7c <siprintf>
    Debug_Tx((char*)bufd);
 8003c58:	a804      	add	r0, sp, #16
 8003c5a:	f7ff fb61 	bl	8003320 <Debug_Tx>

    SPI_flash_cs_low;
 8003c5e:	2200      	movs	r2, #0
 8003c60:	2110      	movs	r1, #16
 8003c62:	0030      	movs	r0, r6
 8003c64:	f004 f82c 	bl	8007cc0 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 8003c68:	209f      	movs	r0, #159	; 0x9f
 8003c6a:	f7ff ff81 	bl	8003b70 <SPI_flash_sent_byte>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8003c6e:	7025      	strb	r5, [r4, #0]
       aa[1]=0;
 8003c70:	7065      	strb	r5, [r4, #1]
       aa[2]=0;
 8003c72:	70a5      	strb	r5, [r4, #2]
       aa[3]=0;
 8003c74:	70e5      	strb	r5, [r4, #3]
       aa[4]=0;
 8003c76:	7125      	strb	r5, [r4, #4]
       aa[5]=0;
 8003c78:	7165      	strb	r5, [r4, #5]
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	0020      	movs	r0, r4
 8003c7e:	f7ff ffb5 	bl	8003bec <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8003c82:	2201      	movs	r2, #1
 8003c84:	2110      	movs	r1, #16
 8003c86:	0030      	movs	r0, r6
 8003c88:	f004 f81a 	bl	8007cc0 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8003c8c:	7863      	ldrb	r3, [r4, #1]
 8003c8e:	7822      	ldrb	r2, [r4, #0]
 8003c90:	491d      	ldr	r1, [pc, #116]	; (8003d08 <SPI_flash_get_device_ID+0xfc>)
 8003c92:	78a0      	ldrb	r0, [r4, #2]
 8003c94:	9000      	str	r0, [sp, #0]
 8003c96:	a804      	add	r0, sp, #16
 8003c98:	f00a f970 	bl	800df7c <siprintf>
       Debug_Tx((char*)bufd);
 8003c9c:	a804      	add	r0, sp, #16
 8003c9e:	f7ff fb3f 	bl	8003320 <Debug_Tx>



       SPI_flash_cs_low;
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2110      	movs	r1, #16
 8003ca6:	0030      	movs	r0, r6
 8003ca8:	f004 f80a 	bl	8007cc0 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8003cac:	204b      	movs	r0, #75	; 0x4b
 8003cae:	f7ff ff5f 	bl	8003b70 <SPI_flash_sent_byte>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8003cb2:	7025      	strb	r5, [r4, #0]
       aa[1]=0;
 8003cb4:	7065      	strb	r5, [r4, #1]
       aa[2]=0;
 8003cb6:	70a5      	strb	r5, [r4, #2]
       aa[3]=0;
 8003cb8:	70e5      	strb	r5, [r4, #3]
       aa[4]=0;
 8003cba:	7125      	strb	r5, [r4, #4]
       aa[5]=0;
 8003cbc:	7165      	strb	r5, [r4, #5]
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8003cbe:	23fa      	movs	r3, #250	; 0xfa
 8003cc0:	4812      	ldr	r0, [pc, #72]	; (8003d0c <SPI_flash_get_device_ID+0x100>)
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	0021      	movs	r1, r4
 8003cc8:	f005 fa9e 	bl	8009208 <HAL_SPI_Transmit>
       SPI_flash_TransmitReceive(aa, 6);
 8003ccc:	2106      	movs	r1, #6
 8003cce:	0020      	movs	r0, r4
 8003cd0:	f7ff ff8c 	bl	8003bec <SPI_flash_TransmitReceive>
       SPI_flash_cs_high;
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	2110      	movs	r1, #16
 8003cd8:	0030      	movs	r0, r6
 8003cda:	f003 fff1 	bl	8007cc0 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 8003cde:	7863      	ldrb	r3, [r4, #1]
 8003ce0:	7822      	ldrb	r2, [r4, #0]
 8003ce2:	490b      	ldr	r1, [pc, #44]	; (8003d10 <SPI_flash_get_device_ID+0x104>)
 8003ce4:	7960      	ldrb	r0, [r4, #5]
 8003ce6:	9003      	str	r0, [sp, #12]
 8003ce8:	7920      	ldrb	r0, [r4, #4]
 8003cea:	9002      	str	r0, [sp, #8]
 8003cec:	78e0      	ldrb	r0, [r4, #3]
 8003cee:	9001      	str	r0, [sp, #4]
 8003cf0:	78a0      	ldrb	r0, [r4, #2]
 8003cf2:	9000      	str	r0, [sp, #0]
 8003cf4:	a804      	add	r0, sp, #16
 8003cf6:	f00a f941 	bl	800df7c <siprintf>
       Debug_Tx((char*)bufd);
 8003cfa:	a804      	add	r0, sp, #16
 8003cfc:	f7ff fb10 	bl	8003320 <Debug_Tx>
}
 8003d00:	b020      	add	sp, #128	; 0x80
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	08011eec 	.word	0x08011eec
 8003d08:	08011f0c 	.word	0x08011f0c
 8003d0c:	20003c58 	.word	0x20003c58
 8003d10:	08011f28 	.word	0x08011f28

08003d14 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	0004      	movs	r4, r0
    SPI_flash_Write_Enable();
 8003d18:	f7ff ff3a 	bl	8003b90 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003d1c:	25a0      	movs	r5, #160	; 0xa0
 8003d1e:	05ed      	lsls	r5, r5, #23
 8003d20:	2200      	movs	r2, #0
 8003d22:	2110      	movs	r1, #16
 8003d24:	0028      	movs	r0, r5
 8003d26:	f003 ffcb 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8003d2a:	2020      	movs	r0, #32
 8003d2c:	f7ff ff20 	bl	8003b70 <SPI_flash_sent_byte>
    SPI_flash_sent_address (address);
 8003d30:	0020      	movs	r0, r4
 8003d32:	f7ff ff4f 	bl	8003bd4 <SPI_flash_sent_address>
    SPI_flash_cs_high;
 8003d36:	2201      	movs	r2, #1
 8003d38:	2110      	movs	r1, #16
 8003d3a:	0028      	movs	r0, r5
 8003d3c:	f003 ffc0 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003d40:	f7ff ff37 	bl	8003bb2 <SPI_flash_Write_Disable>
    //HAL_Delay(100);
	Debug_Rx();
 8003d44:	f7ff fb1e 	bl	8003384 <Debug_Rx>
}
 8003d48:	bd70      	pop	{r4, r5, r6, pc}

08003d4a <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 8003d4a:	b510      	push	{r4, lr}
    SPI_flash_Write_Enable();
 8003d4c:	f7ff ff20 	bl	8003b90 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003d50:	24a0      	movs	r4, #160	; 0xa0
 8003d52:	05e4      	lsls	r4, r4, #23
 8003d54:	2200      	movs	r2, #0
 8003d56:	2110      	movs	r1, #16
 8003d58:	0020      	movs	r0, r4
 8003d5a:	f003 ffb1 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 8003d5e:	20c7      	movs	r0, #199	; 0xc7
 8003d60:	f7ff ff06 	bl	8003b70 <SPI_flash_sent_byte>
    SPI_flash_cs_high;
 8003d64:	2201      	movs	r2, #1
 8003d66:	2110      	movs	r1, #16
 8003d68:	0020      	movs	r0, r4
 8003d6a:	f003 ffa9 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003d6e:	f7ff ff20 	bl	8003bb2 <SPI_flash_Write_Disable>
}
 8003d72:	bd10      	pop	{r4, pc}

08003d74 <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d76:	0006      	movs	r6, r0
 8003d78:	000c      	movs	r4, r1
 8003d7a:	0015      	movs	r5, r2
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
 8003d7c:	f7ff ff08 	bl	8003b90 <SPI_flash_Write_Enable>
    SPI_flash_cs_low;
 8003d80:	27a0      	movs	r7, #160	; 0xa0
 8003d82:	05ff      	lsls	r7, r7, #23
 8003d84:	2200      	movs	r2, #0
 8003d86:	2110      	movs	r1, #16
 8003d88:	0038      	movs	r0, r7
 8003d8a:	f003 ff99 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 8003d8e:	2002      	movs	r0, #2
 8003d90:	f7ff feee 	bl	8003b70 <SPI_flash_sent_byte>
    SPI_flash_sent_address (data_address);
 8003d94:	0030      	movs	r0, r6
 8003d96:	f7ff ff1d 	bl	8003bd4 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8003d9a:	0029      	movs	r1, r5
 8003d9c:	0020      	movs	r0, r4
 8003d9e:	f7ff ff25 	bl	8003bec <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003da2:	2201      	movs	r2, #1
 8003da4:	2110      	movs	r1, #16
 8003da6:	0038      	movs	r0, r7
 8003da8:	f003 ff8a 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
 8003dac:	f7ff ff01 	bl	8003bb2 <SPI_flash_Write_Disable>

	Debug_Rx();
 8003db0:	f7ff fae8 	bl	8003384 <Debug_Rx>
    //HAL_Delay(1);
}
 8003db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003db6 <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8003db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db8:	0006      	movs	r6, r0
 8003dba:	000c      	movs	r4, r1
 8003dbc:	0015      	movs	r5, r2
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 8003dbe:	27a0      	movs	r7, #160	; 0xa0
 8003dc0:	05ff      	lsls	r7, r7, #23
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2110      	movs	r1, #16
 8003dc6:	0038      	movs	r0, r7
 8003dc8:	f003 ff7a 	bl	8007cc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 8003dcc:	2003      	movs	r0, #3
 8003dce:	f7ff fecf 	bl	8003b70 <SPI_flash_sent_byte>
    SPI_flash_sent_address(data_address);
 8003dd2:	0030      	movs	r0, r6
 8003dd4:	f7ff fefe 	bl	8003bd4 <SPI_flash_sent_address>
    SPI_flash_TransmitReceive(data, size);
 8003dd8:	0029      	movs	r1, r5
 8003dda:	0020      	movs	r0, r4
 8003ddc:	f7ff ff06 	bl	8003bec <SPI_flash_TransmitReceive>
    SPI_flash_cs_high;
 8003de0:	2201      	movs	r2, #1
 8003de2:	2110      	movs	r1, #16
 8003de4:	0038      	movs	r0, r7
 8003de6:	f003 ff6b 	bl	8007cc0 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8003dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dec <incrimentAddress2>:


	return add;
}

void incrimentAddress2(int inc){
 8003dec:	b530      	push	{r4, r5, lr}
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8003dee:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <incrimentAddress2+0x44>)
 8003df0:	7813      	ldrb	r3, [r2, #0]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	7851      	ldrb	r1, [r2, #1]
 8003df6:	185b      	adds	r3, r3, r1
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	7891      	ldrb	r1, [r2, #2]
 8003dfc:	185b      	adds	r3, r3, r1
 8003dfe:	1818      	adds	r0, r3, r0
	WrtAdd[0]=addi/(256*256);
 8003e00:	17c4      	asrs	r4, r0, #31
 8003e02:	0423      	lsls	r3, r4, #16
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	181b      	adds	r3, r3, r0
 8003e08:	141b      	asrs	r3, r3, #16
 8003e0a:	7013      	strb	r3, [r2, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8003e0c:	0c21      	lsrs	r1, r4, #16
 8003e0e:	1843      	adds	r3, r0, r1
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	0c1b      	lsrs	r3, r3, #16
 8003e14:	1a5b      	subs	r3, r3, r1
 8003e16:	17d9      	asrs	r1, r3, #31
 8003e18:	25ff      	movs	r5, #255	; 0xff
 8003e1a:	4029      	ands	r1, r5
 8003e1c:	18cb      	adds	r3, r1, r3
 8003e1e:	121b      	asrs	r3, r3, #8
 8003e20:	7053      	strb	r3, [r2, #1]
	WrtAdd[2]=(addi)%256;
 8003e22:	0e24      	lsrs	r4, r4, #24
 8003e24:	1900      	adds	r0, r0, r4
 8003e26:	4005      	ands	r5, r0
 8003e28:	1b2d      	subs	r5, r5, r4
 8003e2a:	7095      	strb	r5, [r2, #2]


}
 8003e2c:	bd30      	pop	{r4, r5, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	200000c0 	.word	0x200000c0

08003e34 <WriteQdata>:
	memset(str,0,20);
	sprintf(str, "MemoryAdd:%X-%X-%X",WrtAdd[0],WrtAdd[1],WrtAdd[2]);
	Debug_Tx(str);
}

void WriteQdata(uint8_t* data, uint16_t len) {
 8003e34:	b510      	push	{r4, lr}
 8003e36:	000a      	movs	r2, r1
	//Writes data at the end of queue
	if (len<255){
 8003e38:	29fe      	cmp	r1, #254	; 0xfe
 8003e3a:	d900      	bls.n	8003e3e <WriteQdata+0xa>
		//Debug_Tx("---------------------\nWriting  Data");
		//printAdd();
		SPI_flash_Page_Program(WrtAdd, data,len);
		incrimentAddress2(256);
	}
}
 8003e3c:	bd10      	pop	{r4, pc}
		SPI_flash_Page_Program(WrtAdd, data,len);
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <WriteQdata+0x20>)
 8003e40:	0001      	movs	r1, r0
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7ff ff96 	bl	8003d74 <SPI_flash_Page_Program>
		incrimentAddress2(256);
 8003e48:	2080      	movs	r0, #128	; 0x80
 8003e4a:	0040      	lsls	r0, r0, #1
 8003e4c:	f7ff ffce 	bl	8003dec <incrimentAddress2>
}
 8003e50:	e7f4      	b.n	8003e3c <WriteQdata+0x8>
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	200000c0 	.word	0x200000c0

08003e58 <isQempty>:

int isQempty() {
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 8003e58:	4a05      	ldr	r2, [pc, #20]	; (8003e70 <isQempty+0x18>)
 8003e5a:	7813      	ldrb	r3, [r2, #0]
 8003e5c:	021b      	lsls	r3, r3, #8
 8003e5e:	7852      	ldrb	r2, [r2, #1]
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 8003e64:	4a03      	ldr	r2, [pc, #12]	; (8003e74 <isQempty+0x1c>)
 8003e66:	2000      	movs	r0, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	4148      	adcs	r0, r1
		return 1;
	}
	return 0;

}
 8003e6e:	4770      	bx	lr
 8003e70:	200000c0 	.word	0x200000c0
 8003e74:	000300ff 	.word	0x000300ff

08003e78 <ReadQdata>:

}



int ReadQdata() {
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	46c6      	mov	lr, r8
 8003e7c:	b500      	push	{lr}
 8003e7e:	b0c0      	sub	sp, #256	; 0x100
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 8003e80:	482f      	ldr	r0, [pc, #188]	; (8003f40 <ReadQdata+0xc8>)
 8003e82:	2480      	movs	r4, #128	; 0x80
 8003e84:	0164      	lsls	r4, r4, #5
 8003e86:	0022      	movs	r2, r4
 8003e88:	2100      	movs	r1, #0
 8003e8a:	f00a f8e3 	bl	800e054 <memset>
	memset(ReadMDataS,0,4096);
 8003e8e:	482d      	ldr	r0, [pc, #180]	; (8003f44 <ReadQdata+0xcc>)
 8003e90:	0022      	movs	r2, r4
 8003e92:	2100      	movs	r1, #0
 8003e94:	f00a f8de 	bl	800e054 <memset>
	if(isQempty()==1){
 8003e98:	f7ff ffde 	bl	8003e58 <isQempty>
 8003e9c:	2801      	cmp	r0, #1
 8003e9e:	d018      	beq.n	8003ed2 <ReadQdata+0x5a>
		Debug_Tx("Memory Empty");
		return 0;
	}
	incrimentAddress2(-1);
 8003ea0:	2001      	movs	r0, #1
 8003ea2:	4240      	negs	r0, r0
 8003ea4:	f7ff ffa2 	bl	8003dec <incrimentAddress2>
	int len=WrtAdd[1]%16;
 8003ea8:	4827      	ldr	r0, [pc, #156]	; (8003f48 <ReadQdata+0xd0>)
 8003eaa:	7843      	ldrb	r3, [r0, #1]
	len=len+1;
 8003eac:	270f      	movs	r7, #15
 8003eae:	401f      	ands	r7, r3
 8003eb0:	3701      	adds	r7, #1
	WrtAdd[1]=WrtAdd[1]/16;
	WrtAdd[1]=WrtAdd[1]*16;
 8003eb2:	220f      	movs	r2, #15
 8003eb4:	4393      	bics	r3, r2
 8003eb6:	7043      	strb	r3, [r0, #1]
	WrtAdd[2]=0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	7083      	strb	r3, [r0, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8003ebc:	023a      	lsls	r2, r7, #8
 8003ebe:	4c20      	ldr	r4, [pc, #128]	; (8003f40 <ReadQdata+0xc8>)
 8003ec0:	0021      	movs	r1, r4
 8003ec2:	f7ff ff78 	bl	8003db6 <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 8003ec6:	3f01      	subs	r7, #1
 8003ec8:	023f      	lsls	r7, r7, #8
 8003eca:	193c      	adds	r4, r7, r4
		memset(temp,0,256);
		for (int j=0;j<256;j++){
 8003ecc:	2580      	movs	r5, #128	; 0x80
 8003ece:	006d      	lsls	r5, r5, #1
 8003ed0:	e01d      	b.n	8003f0e <ReadQdata+0x96>
		Debug_Tx("Memory Empty");
 8003ed2:	481e      	ldr	r0, [pc, #120]	; (8003f4c <ReadQdata+0xd4>)
 8003ed4:	f7ff fa24 	bl	8003320 <Debug_Tx>
		return 0;
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e02c      	b.n	8003f36 <ReadQdata+0xbe>
			temp[j]=ReadMData[(len-i)*256+j];
			if (temp[j]==255){
				temp[j]=0;
 8003edc:	2200      	movs	r2, #0
 8003ede:	4669      	mov	r1, sp
 8003ee0:	54ca      	strb	r2, [r1, r3]
				break;
			}
		}
		temp[255]=0;
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <ReadQdata+0xd8>)
 8003ee4:	4698      	mov	r8, r3
 8003ee6:	23ff      	movs	r3, #255	; 0xff
 8003ee8:	2200      	movs	r2, #0
 8003eea:	4669      	mov	r1, sp
 8003eec:	54ca      	strb	r2, [r1, r3]
		strcat(ReadMDataS,temp);
 8003eee:	4e15      	ldr	r6, [pc, #84]	; (8003f44 <ReadQdata+0xcc>)
 8003ef0:	0030      	movs	r0, r6
 8003ef2:	f00a f8b7 	bl	800e064 <strcat>
		strcat(ReadMDataS,"\r\n");
 8003ef6:	0030      	movs	r0, r6
 8003ef8:	f7fc f906 	bl	8000108 <strlen>
 8003efc:	1830      	adds	r0, r6, r0
 8003efe:	4915      	ldr	r1, [pc, #84]	; (8003f54 <ReadQdata+0xdc>)
 8003f00:	2203      	movs	r2, #3
 8003f02:	f00a fa6f 	bl	800e3e4 <memcpy>
	for (int i=1;i<=len;i++){
 8003f06:	4447      	add	r7, r8
 8003f08:	4444      	add	r4, r8
 8003f0a:	4547      	cmp	r7, r8
 8003f0c:	d00f      	beq.n	8003f2e <ReadQdata+0xb6>
		memset(temp,0,256);
 8003f0e:	22ff      	movs	r2, #255	; 0xff
 8003f10:	2100      	movs	r1, #0
 8003f12:	4668      	mov	r0, sp
 8003f14:	f00a f89e 	bl	800e054 <memset>
		for (int j=0;j<256;j++){
 8003f18:	4668      	mov	r0, sp
 8003f1a:	2300      	movs	r3, #0
			temp[j]=ReadMData[(len-i)*256+j];
 8003f1c:	5ce2      	ldrb	r2, [r4, r3]
 8003f1e:	7002      	strb	r2, [r0, #0]
			if (temp[j]==255){
 8003f20:	2aff      	cmp	r2, #255	; 0xff
 8003f22:	d0db      	beq.n	8003edc <ReadQdata+0x64>
		for (int j=0;j<256;j++){
 8003f24:	3301      	adds	r3, #1
 8003f26:	3001      	adds	r0, #1
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	d1f7      	bne.n	8003f1c <ReadQdata+0xa4>
 8003f2c:	e7d9      	b.n	8003ee2 <ReadQdata+0x6a>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 8003f2e:	4806      	ldr	r0, [pc, #24]	; (8003f48 <ReadQdata+0xd0>)
 8003f30:	f7ff fef0 	bl	8003d14 <SPI_flash_Sector_Erase>
	return 1;
 8003f34:	2001      	movs	r0, #1
}
 8003f36:	b040      	add	sp, #256	; 0x100
 8003f38:	bc80      	pop	{r7}
 8003f3a:	46b8      	mov	r8, r7
 8003f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	20001368 	.word	0x20001368
 8003f44:	20002368 	.word	0x20002368
 8003f48:	200000c0 	.word	0x200000c0
 8003f4c:	08011f4c 	.word	0x08011f4c
 8003f50:	ffffff00 	.word	0xffffff00
 8003f54:	08011d20 	.word	0x08011d20

08003f58 <InitMEMQ>:

void InitMEMQ(){
 8003f58:	b530      	push	{r4, r5, lr}
 8003f5a:	b0c1      	sub	sp, #260	; 0x104
	if(isQempty()==1){
 8003f5c:	f7ff ff7c 	bl	8003e58 <isQempty>
 8003f60:	2801      	cmp	r0, #1
 8003f62:	d001      	beq.n	8003f68 <InitMEMQ+0x10>
		for(i=0;i<2;i++){
			ReadQdata();
		}
	}

}
 8003f64:	b041      	add	sp, #260	; 0x104
 8003f66:	bd30      	pop	{r4, r5, pc}
		Debug_Tx("------------------Init Mem:");
 8003f68:	480d      	ldr	r0, [pc, #52]	; (8003fa0 <InitMEMQ+0x48>)
 8003f6a:	f7ff f9d9 	bl	8003320 <Debug_Tx>
		for(i=0;i<5;i++){
 8003f6e:	2400      	movs	r4, #0
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 8003f70:	4d0c      	ldr	r5, [pc, #48]	; (8003fa4 <InitMEMQ+0x4c>)
 8003f72:	0023      	movs	r3, r4
 8003f74:	0022      	movs	r2, r4
 8003f76:	0029      	movs	r1, r5
 8003f78:	4668      	mov	r0, sp
 8003f7a:	f009 ffff 	bl	800df7c <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 8003f7e:	4668      	mov	r0, sp
 8003f80:	f7fc f8c2 	bl	8000108 <strlen>
 8003f84:	3001      	adds	r0, #1
 8003f86:	b281      	uxth	r1, r0
 8003f88:	4668      	mov	r0, sp
 8003f8a:	f7ff ff53 	bl	8003e34 <WriteQdata>
		for(i=0;i<5;i++){
 8003f8e:	3401      	adds	r4, #1
 8003f90:	2c05      	cmp	r4, #5
 8003f92:	d1ee      	bne.n	8003f72 <InitMEMQ+0x1a>
			ReadQdata();
 8003f94:	f7ff ff70 	bl	8003e78 <ReadQdata>
 8003f98:	f7ff ff6e 	bl	8003e78 <ReadQdata>
}
 8003f9c:	e7e2      	b.n	8003f64 <InitMEMQ+0xc>
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	08011f5c 	.word	0x08011f5c
 8003fa4:	08011f78 	.word	0x08011f78

08003fa8 <ClearQueue>:





void ClearQueue(){
 8003fa8:	b510      	push	{r4, lr}
	//uint8_t dat[]={0x01, 0x00,0x00,0x01, 0x00,0x00,0x00,0x00,0x00,0x00,0x01};
	//uint8_t add[]={0x00,0x10,0x00};

	//SPI_flash_Sector_Erase(add);
	SPI_flash_Chip_Erase();
 8003faa:	f7ff fece 	bl	8003d4a <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 8003fae:	4802      	ldr	r0, [pc, #8]	; (8003fb8 <ClearQueue+0x10>)
 8003fb0:	f002 ffb6 	bl	8006f20 <HAL_Delay>

	//SPI_flash_Page_Program(add,dat,11);
}
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	00007530 	.word	0x00007530

08003fbc <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fbe:	46de      	mov	lr, fp
 8003fc0:	4657      	mov	r7, sl
 8003fc2:	464e      	mov	r6, r9
 8003fc4:	4645      	mov	r5, r8
 8003fc6:	b5e0      	push	{r5, r6, r7, lr}
 8003fc8:	4c60      	ldr	r4, [pc, #384]	; (800414c <writeConfig+0x190>)
 8003fca:	44a5      	add	sp, r4
 8003fcc:	4682      	mov	sl, r0
 8003fce:	9001      	str	r0, [sp, #4]
 8003fd0:	000e      	movs	r6, r1
 8003fd2:	4691      	mov	r9, r2
 8003fd4:	4698      	mov	r8, r3
 8003fd6:	9dce      	ldr	r5, [sp, #824]	; 0x338
 8003fd8:	9ccf      	ldr	r4, [sp, #828]	; 0x33c
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 8003fda:	af03      	add	r7, sp, #12
 8003fdc:	4b5c      	ldr	r3, [pc, #368]	; (8004150 <writeConfig+0x194>)
 8003fde:	881a      	ldrh	r2, [r3, #0]
 8003fe0:	803a      	strh	r2, [r7, #0]
 8003fe2:	789b      	ldrb	r3, [r3, #2]
 8003fe4:	70bb      	strb	r3, [r7, #2]

	SPI_flash_Read_Data(add , data1 , 256);
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	469b      	mov	fp, r3
 8003fec:	001a      	movs	r2, r3
 8003fee:	a984      	add	r1, sp, #528	; 0x210
 8003ff0:	0038      	movs	r0, r7
 8003ff2:	f7ff fee0 	bl	8003db6 <SPI_flash_Read_Data>
	add[1]=0x01;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	707b      	strb	r3, [r7, #1]
	SPI_flash_Read_Data(add , data2 , 256);
 8003ffa:	465a      	mov	r2, fp
 8003ffc:	a944      	add	r1, sp, #272	; 0x110
 8003ffe:	0038      	movs	r0, r7
 8004000:	f7ff fed9 	bl	8003db6 <SPI_flash_Read_Data>
	add[1]=0x02;
 8004004:	2302      	movs	r3, #2
 8004006:	707b      	strb	r3, [r7, #1]
	SPI_flash_Read_Data(add , data3 , 256);
 8004008:	465a      	mov	r2, fp
 800400a:	a904      	add	r1, sp, #16
 800400c:	0038      	movs	r0, r7
 800400e:	f7ff fed2 	bl	8003db6 <SPI_flash_Read_Data>
 8004012:	2701      	movs	r7, #1


	int i=0;
	int j=0;
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
		data1[j+i]=RegNo[i];
 8004014:	4653      	mov	r3, sl
 8004016:	3b01      	subs	r3, #1
 8004018:	469a      	mov	sl, r3
 800401a:	4653      	mov	r3, sl
 800401c:	5ddb      	ldrb	r3, [r3, r7]
 800401e:	aa02      	add	r2, sp, #8
 8004020:	494c      	ldr	r1, [pc, #304]	; (8004154 <writeConfig+0x198>)
 8004022:	1852      	adds	r2, r2, r1
 8004024:	55d3      	strb	r3, [r2, r7]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 8004026:	9801      	ldr	r0, [sp, #4]
 8004028:	f7fc f86e 	bl	8000108 <strlen>
 800402c:	42b8      	cmp	r0, r7
 800402e:	d311      	bcc.n	8004054 <writeConfig+0x98>
 8004030:	3701      	adds	r7, #1
 8004032:	2f11      	cmp	r7, #17
 8004034:	d1f1      	bne.n	800401a <writeConfig+0x5e>
 8004036:	2700      	movs	r7, #0
	}
	j=j+RegNoLen;

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
		data1[j+i]=INSMS[i];
 8004038:	ab84      	add	r3, sp, #528	; 0x210
 800403a:	18fb      	adds	r3, r7, r3
 800403c:	5df2      	ldrb	r2, [r6, r7]
 800403e:	741a      	strb	r2, [r3, #16]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8004040:	3701      	adds	r7, #1
 8004042:	0030      	movs	r0, r6
 8004044:	f7fc f860 	bl	8000108 <strlen>
 8004048:	42b8      	cmp	r0, r7
 800404a:	d305      	bcc.n	8004058 <writeConfig+0x9c>
 800404c:	2f64      	cmp	r7, #100	; 0x64
 800404e:	d1f3      	bne.n	8004038 <writeConfig+0x7c>
 8004050:	2600      	movs	r6, #0
 8004052:	e002      	b.n	800405a <writeConfig+0x9e>
 8004054:	2700      	movs	r7, #0
 8004056:	e7ef      	b.n	8004038 <writeConfig+0x7c>
 8004058:	2600      	movs	r6, #0
	}
	j=j+INSMSLen;

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
		data1[j+i]=OUTSMS[i];
 800405a:	afa1      	add	r7, sp, #644	; 0x284
 800405c:	464b      	mov	r3, r9
 800405e:	5d9b      	ldrb	r3, [r3, r6]
 8004060:	55bb      	strb	r3, [r7, r6]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8004062:	3601      	adds	r6, #1
 8004064:	4648      	mov	r0, r9
 8004066:	f7fc f84f 	bl	8000108 <strlen>
 800406a:	42b0      	cmp	r0, r6
 800406c:	d303      	bcc.n	8004076 <writeConfig+0xba>
 800406e:	2e3c      	cmp	r6, #60	; 0x3c
 8004070:	d1f4      	bne.n	800405c <writeConfig+0xa0>
 8004072:	3e3b      	subs	r6, #59	; 0x3b
 8004074:	e000      	b.n	8004078 <writeConfig+0xbc>
 8004076:	2601      	movs	r6, #1
	}
	j=0;
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
		data2[j+i]=EmgIP[i];
 8004078:	2708      	movs	r7, #8
 800407a:	37ff      	adds	r7, #255	; 0xff
 800407c:	ab02      	add	r3, sp, #8
 800407e:	469c      	mov	ip, r3
 8004080:	4467      	add	r7, ip
 8004082:	2301      	movs	r3, #1
 8004084:	425b      	negs	r3, r3
 8004086:	4443      	add	r3, r8
 8004088:	4699      	mov	r9, r3
 800408a:	464b      	mov	r3, r9
 800408c:	5d9b      	ldrb	r3, [r3, r6]
 800408e:	55bb      	strb	r3, [r7, r6]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8004090:	4640      	mov	r0, r8
 8004092:	f7fc f839 	bl	8000108 <strlen>
 8004096:	42b0      	cmp	r0, r6
 8004098:	d304      	bcc.n	80040a4 <writeConfig+0xe8>
 800409a:	3601      	adds	r6, #1
 800409c:	2e29      	cmp	r6, #41	; 0x29
 800409e:	d1f4      	bne.n	800408a <writeConfig+0xce>
 80040a0:	2600      	movs	r6, #0
 80040a2:	e000      	b.n	80040a6 <writeConfig+0xea>
 80040a4:	2600      	movs	r6, #0
	}
	j=j+EmgIPLen;

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
		data2[j+i]=RegIP[i];
 80040a6:	af4e      	add	r7, sp, #312	; 0x138
 80040a8:	5dab      	ldrb	r3, [r5, r6]
 80040aa:	55bb      	strb	r3, [r7, r6]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 80040ac:	3601      	adds	r6, #1
 80040ae:	0028      	movs	r0, r5
 80040b0:	f7fc f82a 	bl	8000108 <strlen>
 80040b4:	42b0      	cmp	r0, r6
 80040b6:	d303      	bcc.n	80040c0 <writeConfig+0x104>
 80040b8:	2e28      	cmp	r6, #40	; 0x28
 80040ba:	d1f5      	bne.n	80040a8 <writeConfig+0xec>
 80040bc:	2500      	movs	r5, #0
 80040be:	e000      	b.n	80040c2 <writeConfig+0x106>
 80040c0:	2500      	movs	r5, #0
	}
	j=j+RegIPLen;


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
		data2[j+i]=TrackIP[i];
 80040c2:	af58      	add	r7, sp, #352	; 0x160
 80040c4:	5d63      	ldrb	r3, [r4, r5]
 80040c6:	557b      	strb	r3, [r7, r5]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 80040c8:	3501      	adds	r5, #1
 80040ca:	0020      	movs	r0, r4
 80040cc:	f7fc f81c 	bl	8000108 <strlen>
 80040d0:	42a8      	cmp	r0, r5
 80040d2:	d303      	bcc.n	80040dc <writeConfig+0x120>
 80040d4:	2d28      	cmp	r5, #40	; 0x28
 80040d6:	d1f5      	bne.n	80040c4 <writeConfig+0x108>
 80040d8:	2401      	movs	r4, #1
 80040da:	e000      	b.n	80040de <writeConfig+0x122>
 80040dc:	2401      	movs	r4, #1
	}
	j=0;


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
		data3[j+i]=OtherData[i];
 80040de:	ab02      	add	r3, sp, #8
 80040e0:	1ddd      	adds	r5, r3, #7
 80040e2:	9bd0      	ldr	r3, [sp, #832]	; 0x340
 80040e4:	1e5f      	subs	r7, r3, #1
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80040e6:	2302      	movs	r3, #2
 80040e8:	33ff      	adds	r3, #255	; 0xff
 80040ea:	4698      	mov	r8, r3
		data3[j+i]=OtherData[i];
 80040ec:	5d3b      	ldrb	r3, [r7, r4]
 80040ee:	552b      	strb	r3, [r5, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 80040f0:	98d0      	ldr	r0, [sp, #832]	; 0x340
 80040f2:	f7fc f809 	bl	8000108 <strlen>
 80040f6:	42a0      	cmp	r0, r4
 80040f8:	d302      	bcc.n	8004100 <writeConfig+0x144>
 80040fa:	3401      	adds	r4, #1
 80040fc:	4544      	cmp	r4, r8
 80040fe:	d1f5      	bne.n	80040ec <writeConfig+0x130>
	}
	j=j+OtherDataLen;


	add[1]=0x00;
 8004100:	ad03      	add	r5, sp, #12
 8004102:	2300      	movs	r3, #0
 8004104:	706b      	strb	r3, [r5, #1]

	SPI_flash_Sector_Erase(add);
 8004106:	0028      	movs	r0, r5
 8004108:	f7ff fe04 	bl	8003d14 <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 800410c:	2480      	movs	r4, #128	; 0x80
 800410e:	0064      	lsls	r4, r4, #1
 8004110:	0022      	movs	r2, r4
 8004112:	a984      	add	r1, sp, #528	; 0x210
 8004114:	0028      	movs	r0, r5
 8004116:	f7ff fe2d 	bl	8003d74 <SPI_flash_Page_Program>
	add[1]=0x01;
 800411a:	2301      	movs	r3, #1
 800411c:	706b      	strb	r3, [r5, #1]
	SPI_flash_Page_Program(add, data2,256);
 800411e:	0022      	movs	r2, r4
 8004120:	a944      	add	r1, sp, #272	; 0x110
 8004122:	0028      	movs	r0, r5
 8004124:	f7ff fe26 	bl	8003d74 <SPI_flash_Page_Program>
	add[1]=0x02;
 8004128:	2302      	movs	r3, #2
 800412a:	706b      	strb	r3, [r5, #1]
	SPI_flash_Page_Program(add, data3,256);
 800412c:	0022      	movs	r2, r4
 800412e:	a904      	add	r1, sp, #16
 8004130:	0028      	movs	r0, r5
 8004132:	f7ff fe1f 	bl	8003d74 <SPI_flash_Page_Program>
	return 1;

}
 8004136:	2001      	movs	r0, #1
 8004138:	23c5      	movs	r3, #197	; 0xc5
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	449d      	add	sp, r3
 800413e:	bcf0      	pop	{r4, r5, r6, r7}
 8004140:	46bb      	mov	fp, r7
 8004142:	46b2      	mov	sl, r6
 8004144:	46a9      	mov	r9, r5
 8004146:	46a0      	mov	r8, r4
 8004148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	fffffcec 	.word	0xfffffcec
 8004150:	08011b80 	.word	0x08011b80
 8004154:	00000207 	.word	0x00000207

08004158 <readRegNo>:



char* readRegNo(){
 8004158:	b510      	push	{r4, lr}
 800415a:	b082      	sub	sp, #8
	uint8_t add4[]={0x00, 0x00,0x00};
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <readRegNo+0x3c>)
 800415e:	881a      	ldrh	r2, [r3, #0]
 8004160:	4669      	mov	r1, sp
 8004162:	808a      	strh	r2, [r1, #4]
 8004164:	789b      	ldrb	r3, [r3, #2]
 8004166:	718b      	strb	r3, [r1, #6]

    memset(dataR,0,256);
 8004168:	4c0b      	ldr	r4, [pc, #44]	; (8004198 <readRegNo+0x40>)
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	0052      	lsls	r2, r2, #1
 800416e:	2100      	movs	r1, #0
 8004170:	0020      	movs	r0, r4
 8004172:	f009 ff6f 	bl	800e054 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 8004176:	2210      	movs	r2, #16
 8004178:	0021      	movs	r1, r4
 800417a:	a801      	add	r0, sp, #4
 800417c:	f7ff fe1b 	bl	8003db6 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8004180:	0020      	movs	r0, r4
 8004182:	f7fb ffc1 	bl	8000108 <strlen>
 8004186:	2801      	cmp	r0, #1
 8004188:	d902      	bls.n	8004190 <readRegNo+0x38>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
 800418a:	4803      	ldr	r0, [pc, #12]	; (8004198 <readRegNo+0x40>)
	}
	else{
		return "--Err RegNo--";
	}

}
 800418c:	b002      	add	sp, #8
 800418e:	bd10      	pop	{r4, pc}
		return "--Err RegNo--";
 8004190:	4802      	ldr	r0, [pc, #8]	; (800419c <readRegNo+0x44>)
 8004192:	e7fb      	b.n	800418c <readRegNo+0x34>
 8004194:	08011b80 	.word	0x08011b80
 8004198:	2000342c 	.word	0x2000342c
 800419c:	08012050 	.word	0x08012050

080041a0 <readINSMSno>:

char* readINSMSno(){
 80041a0:	b510      	push	{r4, lr}
 80041a2:	b082      	sub	sp, #8
	uint8_t add4[]={0x00, 0x00,0x00};
 80041a4:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <readINSMSno+0x24>)
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	466a      	mov	r2, sp
 80041aa:	8093      	strh	r3, [r2, #4]
	add4[2]=RegNoLen;
 80041ac:	2310      	movs	r3, #16
 80041ae:	7193      	strb	r3, [r2, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 80041b0:	4c05      	ldr	r4, [pc, #20]	; (80041c8 <readINSMSno+0x28>)
 80041b2:	2264      	movs	r2, #100	; 0x64
 80041b4:	0021      	movs	r1, r4
 80041b6:	a801      	add	r0, sp, #4
 80041b8:	f7ff fdfd 	bl	8003db6 <SPI_flash_Read_Data>
	return (char*) dataR;
}
 80041bc:	0020      	movs	r0, r4
 80041be:	b002      	add	sp, #8
 80041c0:	bd10      	pop	{r4, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	08011b80 	.word	0x08011b80
 80041c8:	2000342c 	.word	0x2000342c

080041cc <readOUTSMSno>:

char* readOUTSMSno(){
 80041cc:	b510      	push	{r4, lr}
 80041ce:	b082      	sub	sp, #8

	uint8_t  add4[]={0x00, 0x00,0x00};
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <readOUTSMSno+0x24>)
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	466a      	mov	r2, sp
 80041d6:	8093      	strh	r3, [r2, #4]
	add4[2]=RegNoLen+INSMSLen;
 80041d8:	2374      	movs	r3, #116	; 0x74
 80041da:	7193      	strb	r3, [r2, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 80041dc:	4c05      	ldr	r4, [pc, #20]	; (80041f4 <readOUTSMSno+0x28>)
 80041de:	223c      	movs	r2, #60	; 0x3c
 80041e0:	0021      	movs	r1, r4
 80041e2:	a801      	add	r0, sp, #4
 80041e4:	f7ff fde7 	bl	8003db6 <SPI_flash_Read_Data>
	return (char*) dataR;
}
 80041e8:	0020      	movs	r0, r4
 80041ea:	b002      	add	sp, #8
 80041ec:	bd10      	pop	{r4, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	08011b80 	.word	0x08011b80
 80041f4:	2000342c 	.word	0x2000342c

080041f8 <readEmgIP>:

char* readEmgIP(){
 80041f8:	b510      	push	{r4, lr}
 80041fa:	b082      	sub	sp, #8
	uint8_t  add4[]={0x00, 0x01,0x00};
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <readEmgIP+0x24>)
 80041fe:	889a      	ldrh	r2, [r3, #4]
 8004200:	4669      	mov	r1, sp
 8004202:	808a      	strh	r2, [r1, #4]
 8004204:	799b      	ldrb	r3, [r3, #6]
 8004206:	718b      	strb	r3, [r1, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8004208:	4c05      	ldr	r4, [pc, #20]	; (8004220 <readEmgIP+0x28>)
 800420a:	2228      	movs	r2, #40	; 0x28
 800420c:	0021      	movs	r1, r4
 800420e:	a801      	add	r0, sp, #4
 8004210:	f7ff fdd1 	bl	8003db6 <SPI_flash_Read_Data>
	return (char*) dataR;
}
 8004214:	0020      	movs	r0, r4
 8004216:	b002      	add	sp, #8
 8004218:	bd10      	pop	{r4, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	08011b80 	.word	0x08011b80
 8004220:	2000342c 	.word	0x2000342c

08004224 <readRegIP>:

char* readRegIP(){
 8004224:	b510      	push	{r4, lr}
 8004226:	b082      	sub	sp, #8
	uint8_t  add4[]={0x00, 0x01,0x00};
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <readRegIP+0x24>)
 800422a:	889b      	ldrh	r3, [r3, #4]
 800422c:	466a      	mov	r2, sp
 800422e:	8093      	strh	r3, [r2, #4]
	add4[2]=EmgIPLen;
 8004230:	2328      	movs	r3, #40	; 0x28
 8004232:	7193      	strb	r3, [r2, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8004234:	4c05      	ldr	r4, [pc, #20]	; (800424c <readRegIP+0x28>)
 8004236:	2228      	movs	r2, #40	; 0x28
 8004238:	0021      	movs	r1, r4
 800423a:	a801      	add	r0, sp, #4
 800423c:	f7ff fdbb 	bl	8003db6 <SPI_flash_Read_Data>
	return (char*) dataR;
}
 8004240:	0020      	movs	r0, r4
 8004242:	b002      	add	sp, #8
 8004244:	bd10      	pop	{r4, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	08011b80 	.word	0x08011b80
 800424c:	2000342c 	.word	0x2000342c

08004250 <readTracIP>:

char* readTracIP(){
 8004250:	b510      	push	{r4, lr}
 8004252:	b082      	sub	sp, #8
	uint8_t  add4[]={0x00, 0x01,0x00};
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <readTracIP+0x24>)
 8004256:	889b      	ldrh	r3, [r3, #4]
 8004258:	466a      	mov	r2, sp
 800425a:	8093      	strh	r3, [r2, #4]
	add4[2]=EmgIPLen+RegIPLen;
 800425c:	2350      	movs	r3, #80	; 0x50
 800425e:	7193      	strb	r3, [r2, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8004260:	4c05      	ldr	r4, [pc, #20]	; (8004278 <readTracIP+0x28>)
 8004262:	2228      	movs	r2, #40	; 0x28
 8004264:	0021      	movs	r1, r4
 8004266:	a801      	add	r0, sp, #4
 8004268:	f7ff fda5 	bl	8003db6 <SPI_flash_Read_Data>
	return (char*) dataR;
}
 800426c:	0020      	movs	r0, r4
 800426e:	b002      	add	sp, #8
 8004270:	bd10      	pop	{r4, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	08011b80 	.word	0x08011b80
 8004278:	2000342c 	.word	0x2000342c

0800427c <detectAcc>:


int detectAcc(){
 800427c:	b510      	push	{r4, lr}
	readAcc();
 800427e:	f7ff f895 	bl	80033ac <readAcc>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8004282:	4c14      	ldr	r4, [pc, #80]	; (80042d4 <detectAcc+0x58>)
 8004284:	6861      	ldr	r1, [r4, #4]
 8004286:	6820      	ldr	r0, [r4, #0]
 8004288:	f7fc f9b8 	bl	80005fc <__aeabi_fadd>
 800428c:	68a1      	ldr	r1, [r4, #8]
 800428e:	f7fc f9b5 	bl	80005fc <__aeabi_fadd>
 8004292:	1c04      	adds	r4, r0, #0
 8004294:	4910      	ldr	r1, [pc, #64]	; (80042d8 <detectAcc+0x5c>)
 8004296:	f7fc f92d 	bl	80004f4 <__aeabi_fcmpgt>
 800429a:	2800      	cmp	r0, #0
 800429c:	d116      	bne.n	80042cc <detectAcc+0x50>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 800429e:	490f      	ldr	r1, [pc, #60]	; (80042dc <detectAcc+0x60>)
 80042a0:	1c20      	adds	r0, r4, #0
 80042a2:	f7fc f913 	bl	80004cc <__aeabi_fcmplt>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d112      	bne.n	80042d0 <detectAcc+0x54>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 80042aa:	4c0a      	ldr	r4, [pc, #40]	; (80042d4 <detectAcc+0x58>)
 80042ac:	6921      	ldr	r1, [r4, #16]
 80042ae:	68e0      	ldr	r0, [r4, #12]
 80042b0:	f7fc f9a4 	bl	80005fc <__aeabi_fadd>
 80042b4:	6961      	ldr	r1, [r4, #20]
 80042b6:	f7fc f9a1 	bl	80005fc <__aeabi_fadd>
 80042ba:	4907      	ldr	r1, [pc, #28]	; (80042d8 <detectAcc+0x5c>)
 80042bc:	f7fc f91a 	bl	80004f4 <__aeabi_fcmpgt>


	return 0;
 80042c0:	1e43      	subs	r3, r0, #1
 80042c2:	4198      	sbcs	r0, r3
 80042c4:	4243      	negs	r3, r0
 80042c6:	2003      	movs	r0, #3
 80042c8:	4018      	ands	r0, r3
}
 80042ca:	bd10      	pop	{r4, pc}
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 80042cc:	2001      	movs	r0, #1
 80042ce:	e7fc      	b.n	80042ca <detectAcc+0x4e>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 80042d0:	2002      	movs	r0, #2
 80042d2:	e7fa      	b.n	80042ca <detectAcc+0x4e>
 80042d4:	200002ec 	.word	0x200002ec
 80042d8:	44fa0000 	.word	0x44fa0000
 80042dc:	c4fa0000 	.word	0xc4fa0000

080042e0 <initGPS>:
char printBuf[50];

//char* buffer
//int ProcessRunning_GPS=0;

void initGPS(){
 80042e0:	b570      	push	{r4, r5, r6, lr}
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 80042e2:	4c0e      	ldr	r4, [pc, #56]	; (800431c <initGPS+0x3c>)
 80042e4:	2300      	movs	r3, #0
 80042e6:	6023      	str	r3, [r4, #0]
	GPSInfo.lon=0.0;
 80042e8:	6063      	str	r3, [r4, #4]
	GPSInfo.alt=0.0;
 80042ea:	60a3      	str	r3, [r4, #8]
	GPSInfo.hdop=0.0;
 80042ec:	60e3      	str	r3, [r4, #12]
	GPSInfo.pdop=0.0;
 80042ee:	6123      	str	r3, [r4, #16]
	GPSInfo.head=0.0;
 80042f0:	6163      	str	r3, [r4, #20]
	GPSInfo.speed=0.0;
 80042f2:	61a3      	str	r3, [r4, #24]
	GPSInfo.fix=0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61e3      	str	r3, [r4, #28]
	GPSInfo.sat=0;
 80042f8:	6223      	str	r3, [r4, #32]
	strcpy(GPSInfo.latD,"x");
 80042fa:	2678      	movs	r6, #120	; 0x78
 80042fc:	8526      	strh	r6, [r4, #40]	; 0x28
	strcpy(GPSInfo.lonD,"x");
 80042fe:	0020      	movs	r0, r4
 8004300:	302b      	adds	r0, #43	; 0x2b
 8004302:	4d07      	ldr	r5, [pc, #28]	; (8004320 <initGPS+0x40>)
 8004304:	2202      	movs	r2, #2
 8004306:	0029      	movs	r1, r5
 8004308:	f00a f86c 	bl	800e3e4 <memcpy>
	strcpy(GPSInfo.time,"x");
 800430c:	85e6      	strh	r6, [r4, #46]	; 0x2e
	strcpy(GPSInfo.date,"x");
 800430e:	0020      	movs	r0, r4
 8004310:	303d      	adds	r0, #61	; 0x3d
 8004312:	2202      	movs	r2, #2
 8004314:	0029      	movs	r1, r5
 8004316:	f00a f865 	bl	800e3e4 <memcpy>
}
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	200004fc 	.word	0x200004fc
 8004320:	08012060 	.word	0x08012060

08004324 <getGPSString>:
void getGPSString(){
 8004324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004326:	46c6      	mov	lr, r8
 8004328:	b500      	push	{lr}
 800432a:	b096      	sub	sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 800432c:	4828      	ldr	r0, [pc, #160]	; (80043d0 <getGPSString+0xac>)
 800432e:	2246      	movs	r2, #70	; 0x46
 8004330:	2100      	movs	r1, #0
 8004332:	f009 fe8f 	bl	800e054 <memset>

	if(GPSInfo.fix==1){
 8004336:	4b27      	ldr	r3, [pc, #156]	; (80043d4 <getGPSString+0xb0>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d042      	beq.n	80043c4 <getGPSString+0xa0>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 800433e:	2200      	movs	r2, #0
 8004340:	2104      	movs	r1, #4
 8004342:	4825      	ldr	r0, [pc, #148]	; (80043d8 <getGPSString+0xb4>)
 8004344:	f003 fcbc 	bl	8007cc0 <HAL_GPIO_WritePin>
	}




	sprintf(gpsDataRet, "%1d,%s,%s,%0.6f,%1s,%0.6f,%s,%0.1f,%0.2f,%d,%0.1f,%0.1f,%0.1f",
 8004348:	4c22      	ldr	r4, [pc, #136]	; (80043d4 <getGPSString+0xb0>)
 800434a:	233d      	movs	r3, #61	; 0x3d
 800434c:	4698      	mov	r8, r3
 800434e:	44a0      	add	r8, r4
 8004350:	69e7      	ldr	r7, [r4, #28]
 8004352:	4e22      	ldr	r6, [pc, #136]	; (80043dc <getGPSString+0xb8>)
 8004354:	4d1e      	ldr	r5, [pc, #120]	; (80043d0 <getGPSString+0xac>)
 8004356:	68e0      	ldr	r0, [r4, #12]
 8004358:	f7fe feaa 	bl	80030b0 <__aeabi_f2d>
 800435c:	9014      	str	r0, [sp, #80]	; 0x50
 800435e:	9115      	str	r1, [sp, #84]	; 0x54
 8004360:	6920      	ldr	r0, [r4, #16]
 8004362:	f7fe fea5 	bl	80030b0 <__aeabi_f2d>
 8004366:	9012      	str	r0, [sp, #72]	; 0x48
 8004368:	9113      	str	r1, [sp, #76]	; 0x4c
 800436a:	68a0      	ldr	r0, [r4, #8]
 800436c:	f7fe fea0 	bl	80030b0 <__aeabi_f2d>
 8004370:	9010      	str	r0, [sp, #64]	; 0x40
 8004372:	9111      	str	r1, [sp, #68]	; 0x44
 8004374:	6a23      	ldr	r3, [r4, #32]
 8004376:	930e      	str	r3, [sp, #56]	; 0x38
 8004378:	6960      	ldr	r0, [r4, #20]
 800437a:	f7fe fe99 	bl	80030b0 <__aeabi_f2d>
 800437e:	900c      	str	r0, [sp, #48]	; 0x30
 8004380:	910d      	str	r1, [sp, #52]	; 0x34
 8004382:	69a0      	ldr	r0, [r4, #24]
 8004384:	f7fe fe94 	bl	80030b0 <__aeabi_f2d>
 8004388:	900a      	str	r0, [sp, #40]	; 0x28
 800438a:	910b      	str	r1, [sp, #44]	; 0x2c
 800438c:	0023      	movs	r3, r4
 800438e:	332b      	adds	r3, #43	; 0x2b
 8004390:	9308      	str	r3, [sp, #32]
 8004392:	6860      	ldr	r0, [r4, #4]
 8004394:	f7fe fe8c 	bl	80030b0 <__aeabi_f2d>
 8004398:	9006      	str	r0, [sp, #24]
 800439a:	9107      	str	r1, [sp, #28]
 800439c:	0023      	movs	r3, r4
 800439e:	3328      	adds	r3, #40	; 0x28
 80043a0:	9304      	str	r3, [sp, #16]
 80043a2:	6820      	ldr	r0, [r4, #0]
 80043a4:	f7fe fe84 	bl	80030b0 <__aeabi_f2d>
 80043a8:	9002      	str	r0, [sp, #8]
 80043aa:	9103      	str	r1, [sp, #12]
 80043ac:	342e      	adds	r4, #46	; 0x2e
 80043ae:	9400      	str	r4, [sp, #0]
 80043b0:	4643      	mov	r3, r8
 80043b2:	003a      	movs	r2, r7
 80043b4:	0031      	movs	r1, r6
 80043b6:	0028      	movs	r0, r5
 80043b8:	f009 fde0 	bl	800df7c <siprintf>
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
}
 80043bc:	b016      	add	sp, #88	; 0x58
 80043be:	bc80      	pop	{r7}
 80043c0:	46b8      	mov	r8, r7
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 80043c4:	2201      	movs	r2, #1
 80043c6:	2104      	movs	r1, #4
 80043c8:	4803      	ldr	r0, [pc, #12]	; (80043d8 <getGPSString+0xb4>)
 80043ca:	f003 fc79 	bl	8007cc0 <HAL_GPIO_WritePin>
}
 80043ce:	e7bb      	b.n	8004348 <getGPSString+0x24>
 80043d0:	20003994 	.word	0x20003994
 80043d4:	200004fc 	.word	0x200004fc
 80043d8:	50000c00 	.word	0x50000c00
 80043dc:	08012064 	.word	0x08012064

080043e0 <DegreeDecimalConvert>:



float DegreeDecimalConvert(float ddmmmm){
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	1c05      	adds	r5, r0, #0
    // printf("insfunction2 %f",ddmmmm);
    int dd1= ddmmmm/100;
 80043e4:	490c      	ldr	r1, [pc, #48]	; (8004418 <DegreeDecimalConvert+0x38>)
 80043e6:	f7fc faa9 	bl	800093c <__aeabi_fdiv>
 80043ea:	f7fc ff5f 	bl	80012ac <__aeabi_f2iz>
 80043ee:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 80043f0:	2064      	movs	r0, #100	; 0x64
 80043f2:	4360      	muls	r0, r4
 80043f4:	f7fc ff7a 	bl	80012ec <__aeabi_i2f>
 80043f8:	1c01      	adds	r1, r0, #0
 80043fa:	1c28      	adds	r0, r5, #0
 80043fc:	f7fc fdb6 	bl	8000f6c <__aeabi_fsub>
    mm=mm/60;
 8004400:	4906      	ldr	r1, [pc, #24]	; (800441c <DegreeDecimalConvert+0x3c>)
 8004402:	f7fc fa9b 	bl	800093c <__aeabi_fdiv>
 8004406:	1c05      	adds	r5, r0, #0
    mm=(float)dd1+mm;
 8004408:	0020      	movs	r0, r4
 800440a:	f7fc ff6f 	bl	80012ec <__aeabi_i2f>
 800440e:	1c29      	adds	r1, r5, #0
 8004410:	f7fc f8f4 	bl	80005fc <__aeabi_fadd>
    return(mm);
}
 8004414:	bd70      	pop	{r4, r5, r6, pc}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	42c80000 	.word	0x42c80000
 800441c:	42700000 	.word	0x42700000

08004420 <printInt>:
	snprintf(printBuf, 6, "%5.0f", x);
	//gcvt(x, 6, buf);
	Debug_Tx(printBuf);

}
void printInt(int x){
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	0005      	movs	r5, r0
	memset(printBuf,0,50);
 8004424:	4c07      	ldr	r4, [pc, #28]	; (8004444 <printInt+0x24>)
 8004426:	2232      	movs	r2, #50	; 0x32
 8004428:	2100      	movs	r1, #0
 800442a:	0020      	movs	r0, r4
 800442c:	f009 fe12 	bl	800e054 <memset>
	snprintf(printBuf, 6, "%d", x);
 8004430:	4a05      	ldr	r2, [pc, #20]	; (8004448 <printInt+0x28>)
 8004432:	002b      	movs	r3, r5
 8004434:	2106      	movs	r1, #6
 8004436:	0020      	movs	r0, r4
 8004438:	f009 fd6c 	bl	800df14 <sniprintf>
	//gcvt(x, 6, buf);
	Debug_Tx(printBuf);
 800443c:	0020      	movs	r0, r4
 800443e:	f7fe ff6f 	bl	8003320 <Debug_Tx>

}
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	20003ecc 	.word	0x20003ecc
 8004448:	08011da0 	.word	0x08011da0

0800444c <nmea0183_checksum>:
int nmea0183_checksum(char *s){//one extra blank char was found so last 4 char had to remove
 800444c:	0003      	movs	r3, r0
    int c = 0;
    while (*s)
 800444e:	7802      	ldrb	r2, [r0, #0]
 8004450:	2a00      	cmp	r2, #0
 8004452:	d006      	beq.n	8004462 <nmea0183_checksum+0x16>
    int c = 0;
 8004454:	2000      	movs	r0, #0
        c ^= *s++;
 8004456:	3301      	adds	r3, #1
 8004458:	4050      	eors	r0, r2
    while (*s)
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	2a00      	cmp	r2, #0
 800445e:	d1fa      	bne.n	8004456 <nmea0183_checksum+0xa>

    return c;

}
 8004460:	4770      	bx	lr
    int c = 0;
 8004462:	2000      	movs	r0, #0
    return c;
 8004464:	e7fc      	b.n	8004460 <nmea0183_checksum+0x14>

08004466 <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 8004466:	b510      	push	{r4, lr}
 8004468:	0004      	movs	r4, r0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 800446a:	212a      	movs	r1, #42	; 0x2a
 800446c:	f009 fe07 	bl	800e07e <strchr>
 8004470:	3001      	adds	r0, #1
 8004472:	2210      	movs	r2, #16
 8004474:	2100      	movs	r1, #0
 8004476:	f008 fdf7 	bl	800d068 <strtol>
 800447a:	b2c1      	uxtb	r1, r0

    char p;
    uint8_t sum = 0;
    ++message;
    while ((p = *message++) != '*') {
 800447c:	7863      	ldrb	r3, [r4, #1]
 800447e:	2b2a      	cmp	r3, #42	; 0x2a
 8004480:	d00c      	beq.n	800449c <nmea_valid_checksum+0x36>
 8004482:	3402      	adds	r4, #2
    uint8_t sum = 0;
 8004484:	2200      	movs	r2, #0
        sum ^= p;
 8004486:	405a      	eors	r2, r3
    while ((p = *message++) != '*') {
 8004488:	3401      	adds	r4, #1
 800448a:	1e63      	subs	r3, r4, #1
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b2a      	cmp	r3, #42	; 0x2a
 8004490:	d1f9      	bne.n	8004486 <nmea_valid_checksum+0x20>
    }

    if (sum != checksum) {
 8004492:	1a88      	subs	r0, r1, r2
 8004494:	4243      	negs	r3, r0
 8004496:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
}
 8004498:	b2c0      	uxtb	r0, r0
 800449a:	bd10      	pop	{r4, pc}
    uint8_t sum = 0;
 800449c:	2200      	movs	r2, #0
 800449e:	e7f8      	b.n	8004492 <nmea_valid_checksum+0x2c>

080044a0 <tic>:

int ticT;
int tocT;
char tocTxt[30];
char time1[10];
int tic(){
 80044a0:	b510      	push	{r4, lr}
	return HAL_GetTick();
 80044a2:	f002 fd37 	bl	8006f14 <HAL_GetTick>
}
 80044a6:	bd10      	pop	{r4, pc}

080044a8 <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 80044a8:	b510      	push	{r4, lr}
 80044aa:	b084      	sub	sp, #16
	int i=0;
	Debug_Tx("------------------Testing Memory:");
 80044ac:	480f      	ldr	r0, [pc, #60]	; (80044ec <TestMEM+0x44>)
 80044ae:	f7fe ff37 	bl	8003320 <Debug_Tx>
	for(i=0;i<1;i++){
		SPI_flash_get_device_ID( );
 80044b2:	f7ff fbab 	bl	8003c0c <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <TestMEM+0x48>)
 80044b8:	4c0e      	ldr	r4, [pc, #56]	; (80044f4 <TestMEM+0x4c>)
 80044ba:	0022      	movs	r2, r4
 80044bc:	320c      	adds	r2, #12
 80044be:	0021      	movs	r1, r4
 80044c0:	3134      	adds	r1, #52	; 0x34
 80044c2:	0020      	movs	r0, r4
 80044c4:	3058      	adds	r0, #88	; 0x58
 80044c6:	3468      	adds	r4, #104	; 0x68
 80044c8:	9402      	str	r4, [sp, #8]
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	f7ff fd75 	bl	8003fbc <writeConfig>
		 	  				  "216.10.243.86","216.10.243.86","216.10.243.86",
			  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");


		Debug_Tx("Reading RegNo--");
 80044d2:	4809      	ldr	r0, [pc, #36]	; (80044f8 <TestMEM+0x50>)
 80044d4:	f7fe ff24 	bl	8003320 <Debug_Tx>
		Debug_Tx(readRegNo());
 80044d8:	f7ff fe3e 	bl	8004158 <readRegNo>
 80044dc:	f7fe ff20 	bl	8003320 <Debug_Tx>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 80044e0:	20fa      	movs	r0, #250	; 0xfa
 80044e2:	00c0      	lsls	r0, r0, #3
 80044e4:	f002 fd1c 	bl	8006f20 <HAL_Delay>

	}


}
 80044e8:	b004      	add	sp, #16
 80044ea:	bd10      	pop	{r4, pc}
 80044ec:	080120a4 	.word	0x080120a4
 80044f0:	080120c8 	.word	0x080120c8
 80044f4:	08011b80 	.word	0x08011b80
 80044f8:	080120d8 	.word	0x080120d8

080044fc <SystemClock_Config>:
{
 80044fc:	b500      	push	{lr}
 80044fe:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004500:	2234      	movs	r2, #52	; 0x34
 8004502:	2100      	movs	r1, #0
 8004504:	a805      	add	r0, sp, #20
 8004506:	f009 fda5 	bl	800e054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800450a:	2210      	movs	r2, #16
 800450c:	2100      	movs	r1, #0
 800450e:	a801      	add	r0, sp, #4
 8004510:	f009 fda0 	bl	800e054 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004514:	2080      	movs	r0, #128	; 0x80
 8004516:	0080      	lsls	r0, r0, #2
 8004518:	f003 ffd6 	bl	80084c8 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800451c:	2302      	movs	r3, #2
 800451e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004520:	33fe      	adds	r3, #254	; 0xfe
 8004522:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004524:	2300      	movs	r3, #0
 8004526:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004528:	2240      	movs	r2, #64	; 0x40
 800452a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800452c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800452e:	a805      	add	r0, sp, #20
 8004530:	f003 fffc 	bl	800852c <HAL_RCC_OscConfig>
 8004534:	2800      	cmp	r0, #0
 8004536:	d10f      	bne.n	8004558 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004538:	2307      	movs	r3, #7
 800453a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800453c:	2300      	movs	r3, #0
 800453e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004540:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004542:	23a0      	movs	r3, #160	; 0xa0
 8004544:	01db      	lsls	r3, r3, #7
 8004546:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004548:	2100      	movs	r1, #0
 800454a:	a801      	add	r0, sp, #4
 800454c:	f004 face 	bl	8008aec <HAL_RCC_ClockConfig>
 8004550:	2800      	cmp	r0, #0
 8004552:	d103      	bne.n	800455c <SystemClock_Config+0x60>
}
 8004554:	b013      	add	sp, #76	; 0x4c
 8004556:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004558:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800455a:	e7fe      	b.n	800455a <SystemClock_Config+0x5e>
 800455c:	b672      	cpsid	i
 800455e:	e7fe      	b.n	800455e <SystemClock_Config+0x62>

08004560 <main>:
{
 8004560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004562:	46de      	mov	lr, fp
 8004564:	4657      	mov	r7, sl
 8004566:	464e      	mov	r6, r9
 8004568:	4645      	mov	r5, r8
 800456a:	b5e0      	push	{r5, r6, r7, lr}
 800456c:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 800456e:	f002 fcb1 	bl	8006ed4 <HAL_Init>
  SystemClock_Config();
 8004572:	f7ff ffc3 	bl	80044fc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004576:	2214      	movs	r2, #20
 8004578:	2100      	movs	r1, #0
 800457a:	a807      	add	r0, sp, #28
 800457c:	f009 fd6a 	bl	800e054 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004580:	4df1      	ldr	r5, [pc, #964]	; (8004948 <main+0x3e8>)
 8004582:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004584:	2704      	movs	r7, #4
 8004586:	433b      	orrs	r3, r7
 8004588:	636b      	str	r3, [r5, #52]	; 0x34
 800458a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800458c:	403b      	ands	r3, r7
 800458e:	9302      	str	r3, [sp, #8]
 8004590:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004592:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004594:	2220      	movs	r2, #32
 8004596:	4692      	mov	sl, r2
 8004598:	4313      	orrs	r3, r2
 800459a:	636b      	str	r3, [r5, #52]	; 0x34
 800459c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800459e:	4013      	ands	r3, r2
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80045a6:	2601      	movs	r6, #1
 80045a8:	4333      	orrs	r3, r6
 80045aa:	636b      	str	r3, [r5, #52]	; 0x34
 80045ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80045ae:	4033      	ands	r3, r6
 80045b0:	9304      	str	r3, [sp, #16]
 80045b2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80045b6:	2302      	movs	r3, #2
 80045b8:	431a      	orrs	r2, r3
 80045ba:	636a      	str	r2, [r5, #52]	; 0x34
 80045bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80045be:	4013      	ands	r3, r2
 80045c0:	9305      	str	r3, [sp, #20]
 80045c2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80045c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80045c6:	2308      	movs	r3, #8
 80045c8:	431a      	orrs	r2, r3
 80045ca:	636a      	str	r2, [r5, #52]	; 0x34
 80045cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80045ce:	4013      	ands	r3, r2
 80045d0:	9306      	str	r3, [sp, #24]
 80045d2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 80045d4:	4cdd      	ldr	r4, [pc, #884]	; (800494c <main+0x3ec>)
 80045d6:	23a0      	movs	r3, #160	; 0xa0
 80045d8:	05db      	lsls	r3, r3, #23
 80045da:	4699      	mov	r9, r3
 80045dc:	2200      	movs	r2, #0
 80045de:	0021      	movs	r1, r4
 80045e0:	0018      	movs	r0, r3
 80045e2:	f003 fb6d 	bl	8007cc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 80045e6:	4bda      	ldr	r3, [pc, #872]	; (8004950 <main+0x3f0>)
 80045e8:	469b      	mov	fp, r3
 80045ea:	2200      	movs	r2, #0
 80045ec:	21c0      	movs	r1, #192	; 0xc0
 80045ee:	0018      	movs	r0, r3
 80045f0:	f003 fb66 	bl	8007cc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 80045f4:	2200      	movs	r2, #0
 80045f6:	2107      	movs	r1, #7
 80045f8:	48d6      	ldr	r0, [pc, #856]	; (8004954 <main+0x3f4>)
 80045fa:	f003 fb61 	bl	8007cc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 80045fe:	4bd6      	ldr	r3, [pc, #856]	; (8004958 <main+0x3f8>)
 8004600:	4698      	mov	r8, r3
 8004602:	2200      	movs	r2, #0
 8004604:	218e      	movs	r1, #142	; 0x8e
 8004606:	0089      	lsls	r1, r1, #2
 8004608:	0018      	movs	r0, r3
 800460a:	f003 fb59 	bl	8007cc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 800460e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004610:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2400      	movs	r4, #0
 8004614:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004616:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004618:	a907      	add	r1, sp, #28
 800461a:	4648      	mov	r0, r9
 800461c:	f003 fa5e 	bl	8007adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 8004620:	23f2      	movs	r3, #242	; 0xf2
 8004622:	01db      	lsls	r3, r3, #7
 8004624:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004626:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004628:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800462a:	a907      	add	r1, sp, #28
 800462c:	4640      	mov	r0, r8
 800462e:	f003 fa55 	bl	8007adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  DI_BOX_STATE_Pin ;
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004638:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 800463a:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463c:	a907      	add	r1, sp, #28
 800463e:	4640      	mov	r0, r8
 8004640:	f003 fa4c 	bl	8007adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin ;
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800464a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 800464c:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800464e:	a907      	add	r1, sp, #28
 8004650:	4648      	mov	r0, r9
 8004652:	f003 fa43 	bl	8007adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN1_Pin;
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	015b      	lsls	r3, r3, #5
 800465a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800465c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004660:	a907      	add	r1, sp, #28
 8004662:	4648      	mov	r0, r9
 8004664:	f003 fa3a 	bl	8007adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 8004668:	23c0      	movs	r3, #192	; 0xc0
 800466a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800466c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004670:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004672:	a907      	add	r1, sp, #28
 8004674:	4658      	mov	r0, fp
 8004676:	f003 fa31 	bl	8007adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 800467a:	2307      	movs	r3, #7
 800467c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800467e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004682:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004684:	a907      	add	r1, sp, #28
 8004686:	48b3      	ldr	r0, [pc, #716]	; (8004954 <main+0x3f4>)
 8004688:	f003 fa28 	bl	8007adc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 800468c:	238e      	movs	r3, #142	; 0x8e
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004692:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004696:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004698:	a907      	add	r1, sp, #28
 800469a:	4640      	mov	r0, r8
 800469c:	f003 fa1e 	bl	8007adc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80046a2:	4333      	orrs	r3, r6
 80046a4:	63ab      	str	r3, [r5, #56]	; 0x38
 80046a6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80046a8:	401e      	ands	r6, r3
 80046aa:	9601      	str	r6, [sp, #4]
 80046ac:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2103      	movs	r1, #3
 80046b2:	2009      	movs	r0, #9
 80046b4:	f002 ffca 	bl	800764c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80046b8:	2009      	movs	r0, #9
 80046ba:	f002 fff9 	bl	80076b0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2103      	movs	r1, #3
 80046c2:	200a      	movs	r0, #10
 80046c4:	f002 ffc2 	bl	800764c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80046c8:	200a      	movs	r0, #10
 80046ca:	f002 fff1 	bl	80076b0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 3, 0);
 80046ce:	2200      	movs	r2, #0
 80046d0:	2103      	movs	r1, #3
 80046d2:	200b      	movs	r0, #11
 80046d4:	f002 ffba 	bl	800764c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 80046d8:	200b      	movs	r0, #11
 80046da:	f002 ffe9 	bl	80076b0 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80046de:	220c      	movs	r2, #12
 80046e0:	2100      	movs	r1, #0
 80046e2:	a807      	add	r0, sp, #28
 80046e4:	f009 fcb6 	bl	800e054 <memset>
  hadc1.Instance = ADC1;
 80046e8:	489c      	ldr	r0, [pc, #624]	; (800495c <main+0x3fc>)
 80046ea:	4b9d      	ldr	r3, [pc, #628]	; (8004960 <main+0x400>)
 80046ec:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	05db      	lsls	r3, r3, #23
 80046f2:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046f4:	6084      	str	r4, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046f6:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	039b      	lsls	r3, r3, #14
 80046fc:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046fe:	6147      	str	r7, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004700:	7604      	strb	r4, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004702:	7644      	strb	r4, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004704:	7684      	strb	r4, [r0, #26]
  hadc1.Init.NbrOfConversion = 4;
 8004706:	61c7      	str	r7, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004708:	4653      	mov	r3, sl
 800470a:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800470c:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800470e:	6284      	str	r4, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004710:	330c      	adds	r3, #12
 8004712:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004714:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8004716:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004718:	6384      	str	r4, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800471a:	3310      	adds	r3, #16
 800471c:	54c4      	strb	r4, [r0, r3]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800471e:	64c4      	str	r4, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004720:	f002 fc1c 	bl	8006f5c <HAL_ADC_Init>
 8004724:	2800      	cmp	r0, #0
 8004726:	d000      	beq.n	800472a <main+0x1ca>
 8004728:	e10c      	b.n	8004944 <main+0x3e4>
  sConfig.Channel = ADC_CHANNEL_1;
 800472a:	4b8e      	ldr	r3, [pc, #568]	; (8004964 <main+0x404>)
 800472c:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800472e:	2304      	movs	r3, #4
 8004730:	9308      	str	r3, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004732:	2300      	movs	r3, #0
 8004734:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004736:	4889      	ldr	r0, [pc, #548]	; (800495c <main+0x3fc>)
 8004738:	a907      	add	r1, sp, #28
 800473a:	f002 fd7f 	bl	800723c <HAL_ADC_ConfigChannel>
 800473e:	2800      	cmp	r0, #0
 8004740:	d000      	beq.n	8004744 <main+0x1e4>
 8004742:	e147      	b.n	80049d4 <main+0x474>
  sConfig.Channel = ADC_CHANNEL_9;
 8004744:	4b88      	ldr	r3, [pc, #544]	; (8004968 <main+0x408>)
 8004746:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004748:	2308      	movs	r3, #8
 800474a:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800474c:	4883      	ldr	r0, [pc, #524]	; (800495c <main+0x3fc>)
 800474e:	a907      	add	r1, sp, #28
 8004750:	f002 fd74 	bl	800723c <HAL_ADC_ConfigChannel>
 8004754:	2800      	cmp	r0, #0
 8004756:	d000      	beq.n	800475a <main+0x1fa>
 8004758:	e13e      	b.n	80049d8 <main+0x478>
  sConfig.Channel = ADC_CHANNEL_11;
 800475a:	4b84      	ldr	r3, [pc, #528]	; (800496c <main+0x40c>)
 800475c:	9307      	str	r3, [sp, #28]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800475e:	230c      	movs	r3, #12
 8004760:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004762:	487e      	ldr	r0, [pc, #504]	; (800495c <main+0x3fc>)
 8004764:	a907      	add	r1, sp, #28
 8004766:	f002 fd69 	bl	800723c <HAL_ADC_ConfigChannel>
 800476a:	2800      	cmp	r0, #0
 800476c:	d000      	beq.n	8004770 <main+0x210>
 800476e:	e135      	b.n	80049dc <main+0x47c>
  hi2c1.Instance = I2C1;
 8004770:	487f      	ldr	r0, [pc, #508]	; (8004970 <main+0x410>)
 8004772:	4b80      	ldr	r3, [pc, #512]	; (8004974 <main+0x414>)
 8004774:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8004776:	4b80      	ldr	r3, [pc, #512]	; (8004978 <main+0x418>)
 8004778:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800477e:	2201      	movs	r2, #1
 8004780:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004782:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004784:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004786:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004788:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800478a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800478c:	f003 fbe2 	bl	8007f54 <HAL_I2C_Init>
 8004790:	2800      	cmp	r0, #0
 8004792:	d000      	beq.n	8004796 <main+0x236>
 8004794:	e124      	b.n	80049e0 <main+0x480>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004796:	4876      	ldr	r0, [pc, #472]	; (8004970 <main+0x410>)
 8004798:	2100      	movs	r1, #0
 800479a:	f003 fe3f 	bl	800841c <HAL_I2CEx_ConfigAnalogFilter>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d000      	beq.n	80047a4 <main+0x244>
 80047a2:	e11f      	b.n	80049e4 <main+0x484>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80047a4:	4872      	ldr	r0, [pc, #456]	; (8004970 <main+0x410>)
 80047a6:	2100      	movs	r1, #0
 80047a8:	f003 fe64 	bl	8008474 <HAL_I2CEx_ConfigDigitalFilter>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d000      	beq.n	80047b2 <main+0x252>
 80047b0:	e11a      	b.n	80049e8 <main+0x488>
  hspi1.Instance = SPI1;
 80047b2:	4872      	ldr	r0, [pc, #456]	; (800497c <main+0x41c>)
 80047b4:	4b72      	ldr	r3, [pc, #456]	; (8004980 <main+0x420>)
 80047b6:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80047b8:	2382      	movs	r3, #130	; 0x82
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80047be:	2300      	movs	r3, #0
 80047c0:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80047c2:	22e0      	movs	r2, #224	; 0xe0
 80047c4:	00d2      	lsls	r2, r2, #3
 80047c6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80047c8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80047ca:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	0092      	lsls	r2, r2, #2
 80047d0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80047d2:	3af9      	subs	r2, #249	; 0xf9
 80047d4:	3aff      	subs	r2, #255	; 0xff
 80047d6:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80047d8:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80047da:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047dc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80047de:	2107      	movs	r1, #7
 80047e0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80047e2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80047e4:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80047e6:	f004 fc93 	bl	8009110 <HAL_SPI_Init>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d000      	beq.n	80047f0 <main+0x290>
 80047ee:	e0fd      	b.n	80049ec <main+0x48c>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047f0:	220c      	movs	r2, #12
 80047f2:	2100      	movs	r1, #0
 80047f4:	a807      	add	r0, sp, #28
 80047f6:	f009 fc2d 	bl	800e054 <memset>
  htim6.Instance = TIM6;
 80047fa:	4862      	ldr	r0, [pc, #392]	; (8004984 <main+0x424>)
 80047fc:	4b62      	ldr	r3, [pc, #392]	; (8004988 <main+0x428>)
 80047fe:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 8000-1;
 8004800:	4b62      	ldr	r3, [pc, #392]	; (800498c <main+0x42c>)
 8004802:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004804:	2300      	movs	r3, #0
 8004806:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 500-1;
 8004808:	22f4      	movs	r2, #244	; 0xf4
 800480a:	32ff      	adds	r2, #255	; 0xff
 800480c:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800480e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004810:	f005 f882 	bl	8009918 <HAL_TIM_Base_Init>
 8004814:	2800      	cmp	r0, #0
 8004816:	d000      	beq.n	800481a <main+0x2ba>
 8004818:	e0ea      	b.n	80049f0 <main+0x490>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800481e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004820:	4858      	ldr	r0, [pc, #352]	; (8004984 <main+0x424>)
 8004822:	a907      	add	r1, sp, #28
 8004824:	f005 f8a8 	bl	8009978 <HAL_TIMEx_MasterConfigSynchronization>
 8004828:	2800      	cmp	r0, #0
 800482a:	d000      	beq.n	800482e <main+0x2ce>
 800482c:	e0e2      	b.n	80049f4 <main+0x494>
  huart1.Instance = USART1;
 800482e:	4858      	ldr	r0, [pc, #352]	; (8004990 <main+0x430>)
 8004830:	4b58      	ldr	r3, [pc, #352]	; (8004994 <main+0x434>)
 8004832:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8004834:	2396      	movs	r3, #150	; 0x96
 8004836:	019b      	lsls	r3, r3, #6
 8004838:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800483a:	2300      	movs	r3, #0
 800483c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800483e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004840:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004842:	220c      	movs	r2, #12
 8004844:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004846:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004848:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800484a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800484c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800484e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004850:	f005 feb4 	bl	800a5bc <HAL_UART_Init>
 8004854:	2800      	cmp	r0, #0
 8004856:	d000      	beq.n	800485a <main+0x2fa>
 8004858:	e0ce      	b.n	80049f8 <main+0x498>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800485a:	484d      	ldr	r0, [pc, #308]	; (8004990 <main+0x430>)
 800485c:	2100      	movs	r1, #0
 800485e:	f005 ffbb 	bl	800a7d8 <HAL_UARTEx_SetTxFifoThreshold>
 8004862:	2800      	cmp	r0, #0
 8004864:	d000      	beq.n	8004868 <main+0x308>
 8004866:	e0c9      	b.n	80049fc <main+0x49c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004868:	4849      	ldr	r0, [pc, #292]	; (8004990 <main+0x430>)
 800486a:	2100      	movs	r1, #0
 800486c:	f005 ffda 	bl	800a824 <HAL_UARTEx_SetRxFifoThreshold>
 8004870:	2800      	cmp	r0, #0
 8004872:	d000      	beq.n	8004876 <main+0x316>
 8004874:	e0c4      	b.n	8004a00 <main+0x4a0>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004876:	4846      	ldr	r0, [pc, #280]	; (8004990 <main+0x430>)
 8004878:	f005 ff8e 	bl	800a798 <HAL_UARTEx_DisableFifoMode>
 800487c:	2800      	cmp	r0, #0
 800487e:	d000      	beq.n	8004882 <main+0x322>
 8004880:	e0c0      	b.n	8004a04 <main+0x4a4>
  huart2.Instance = USART2;
 8004882:	4845      	ldr	r0, [pc, #276]	; (8004998 <main+0x438>)
 8004884:	4b45      	ldr	r3, [pc, #276]	; (800499c <main+0x43c>)
 8004886:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 8004888:	2396      	movs	r3, #150	; 0x96
 800488a:	019b      	lsls	r3, r3, #6
 800488c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800488e:	2300      	movs	r3, #0
 8004890:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004892:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004894:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004896:	220c      	movs	r2, #12
 8004898:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800489a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800489c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800489e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048a0:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048a4:	f005 fe8a 	bl	800a5bc <HAL_UART_Init>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d000      	beq.n	80048ae <main+0x34e>
 80048ac:	e0ac      	b.n	8004a08 <main+0x4a8>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048ae:	483a      	ldr	r0, [pc, #232]	; (8004998 <main+0x438>)
 80048b0:	2100      	movs	r1, #0
 80048b2:	f005 ff91 	bl	800a7d8 <HAL_UARTEx_SetTxFifoThreshold>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d000      	beq.n	80048bc <main+0x35c>
 80048ba:	e0a7      	b.n	8004a0c <main+0x4ac>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048bc:	4836      	ldr	r0, [pc, #216]	; (8004998 <main+0x438>)
 80048be:	2100      	movs	r1, #0
 80048c0:	f005 ffb0 	bl	800a824 <HAL_UARTEx_SetRxFifoThreshold>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d000      	beq.n	80048ca <main+0x36a>
 80048c8:	e0a2      	b.n	8004a10 <main+0x4b0>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80048ca:	4833      	ldr	r0, [pc, #204]	; (8004998 <main+0x438>)
 80048cc:	f005 ff64 	bl	800a798 <HAL_UARTEx_DisableFifoMode>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d000      	beq.n	80048d6 <main+0x376>
 80048d4:	e09e      	b.n	8004a14 <main+0x4b4>
  huart3.Instance = USART3;
 80048d6:	4832      	ldr	r0, [pc, #200]	; (80049a0 <main+0x440>)
 80048d8:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <main+0x444>)
 80048da:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 80048dc:	2396      	movs	r3, #150	; 0x96
 80048de:	019b      	lsls	r3, r3, #6
 80048e0:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80048e2:	2300      	movs	r3, #0
 80048e4:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80048e6:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048e8:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048ea:	220c      	movs	r2, #12
 80048ec:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ee:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048f0:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048f2:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048f4:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048f8:	f005 fe60 	bl	800a5bc <HAL_UART_Init>
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d000      	beq.n	8004902 <main+0x3a2>
 8004900:	e08a      	b.n	8004a18 <main+0x4b8>
  osKernelInitialize();
 8004902:	f005 ffc5 	bl	800a890 <osKernelInitialize>
  testQHandle = osMessageQueueNew (16, sizeof(uint16_t), &testQ_attributes);
 8004906:	4a28      	ldr	r2, [pc, #160]	; (80049a8 <main+0x448>)
 8004908:	2102      	movs	r1, #2
 800490a:	2010      	movs	r0, #16
 800490c:	f006 f856 	bl	800a9bc <osMessageQueueNew>
 8004910:	4b26      	ldr	r3, [pc, #152]	; (80049ac <main+0x44c>)
 8004912:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004914:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <main+0x450>)
 8004916:	4827      	ldr	r0, [pc, #156]	; (80049b4 <main+0x454>)
 8004918:	2100      	movs	r1, #0
 800491a:	f005 ffed 	bl	800a8f8 <osThreadNew>
 800491e:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <main+0x458>)
 8004920:	6018      	str	r0, [r3, #0]
  GPS_readHandle = osThreadNew(StartTask02, NULL, &GPS_read_attributes);
 8004922:	4a26      	ldr	r2, [pc, #152]	; (80049bc <main+0x45c>)
 8004924:	4826      	ldr	r0, [pc, #152]	; (80049c0 <main+0x460>)
 8004926:	2100      	movs	r1, #0
 8004928:	f005 ffe6 	bl	800a8f8 <osThreadNew>
 800492c:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <main+0x464>)
 800492e:	6018      	str	r0, [r3, #0]
  StatusLEDHandle = osThreadNew(StartTask03, NULL, &StatusLED_attributes);
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <main+0x468>)
 8004932:	4826      	ldr	r0, [pc, #152]	; (80049cc <main+0x46c>)
 8004934:	2100      	movs	r1, #0
 8004936:	f005 ffdf 	bl	800a8f8 <osThreadNew>
 800493a:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <main+0x470>)
 800493c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800493e:	f005 ffbb 	bl	800a8b8 <osKernelStart>
  while (1)
 8004942:	e7fe      	b.n	8004942 <main+0x3e2>
 8004944:	b672      	cpsid	i
  while (1)
 8004946:	e7fe      	b.n	8004946 <main+0x3e6>
 8004948:	40021000 	.word	0x40021000
 800494c:	00008010 	.word	0x00008010
 8004950:	50000800 	.word	0x50000800
 8004954:	50000c00 	.word	0x50000c00
 8004958:	50000400 	.word	0x50000400
 800495c:	20003a30 	.word	0x20003a30
 8004960:	40012400 	.word	0x40012400
 8004964:	04000002 	.word	0x04000002
 8004968:	24000200 	.word	0x24000200
 800496c:	2c000800 	.word	0x2c000800
 8004970:	20003c04 	.word	0x20003c04
 8004974:	40005400 	.word	0x40005400
 8004978:	00000e14 	.word	0x00000e14
 800497c:	20003c58 	.word	0x20003c58
 8004980:	40013000 	.word	0x40013000
 8004984:	20003cbc 	.word	0x20003cbc
 8004988:	40001000 	.word	0x40001000
 800498c:	00001f3f 	.word	0x00001f3f
 8004990:	20003d08 	.word	0x20003d08
 8004994:	40013800 	.word	0x40013800
 8004998:	20003d9c 	.word	0x20003d9c
 800499c:	40004400 	.word	0x40004400
 80049a0:	20003e30 	.word	0x20003e30
 80049a4:	40004800 	.word	0x40004800
 80049a8:	08012e2c 	.word	0x08012e2c
 80049ac:	20003f20 	.word	0x20003f20
 80049b0:	08012e08 	.word	0x08012e08
 80049b4:	0800662d 	.word	0x0800662d
 80049b8:	2000359c 	.word	0x2000359c
 80049bc:	08012dbc 	.word	0x08012dbc
 80049c0:	080035a1 	.word	0x080035a1
 80049c4:	20000548 	.word	0x20000548
 80049c8:	08012de4 	.word	0x08012de4
 80049cc:	080035ab 	.word	0x080035ab
 80049d0:	200033d0 	.word	0x200033d0
 80049d4:	b672      	cpsid	i
 80049d6:	e7fe      	b.n	80049d6 <main+0x476>
 80049d8:	b672      	cpsid	i
 80049da:	e7fe      	b.n	80049da <main+0x47a>
 80049dc:	b672      	cpsid	i
 80049de:	e7fe      	b.n	80049de <main+0x47e>
 80049e0:	b672      	cpsid	i
 80049e2:	e7fe      	b.n	80049e2 <main+0x482>
 80049e4:	b672      	cpsid	i
 80049e6:	e7fe      	b.n	80049e6 <main+0x486>
 80049e8:	b672      	cpsid	i
 80049ea:	e7fe      	b.n	80049ea <main+0x48a>
 80049ec:	b672      	cpsid	i
 80049ee:	e7fe      	b.n	80049ee <main+0x48e>
 80049f0:	b672      	cpsid	i
 80049f2:	e7fe      	b.n	80049f2 <main+0x492>
 80049f4:	b672      	cpsid	i
 80049f6:	e7fe      	b.n	80049f6 <main+0x496>
 80049f8:	b672      	cpsid	i
 80049fa:	e7fe      	b.n	80049fa <main+0x49a>
 80049fc:	b672      	cpsid	i
 80049fe:	e7fe      	b.n	80049fe <main+0x49e>
 8004a00:	b672      	cpsid	i
 8004a02:	e7fe      	b.n	8004a02 <main+0x4a2>
 8004a04:	b672      	cpsid	i
 8004a06:	e7fe      	b.n	8004a06 <main+0x4a6>
 8004a08:	b672      	cpsid	i
 8004a0a:	e7fe      	b.n	8004a0a <main+0x4aa>
 8004a0c:	b672      	cpsid	i
 8004a0e:	e7fe      	b.n	8004a0e <main+0x4ae>
 8004a10:	b672      	cpsid	i
 8004a12:	e7fe      	b.n	8004a12 <main+0x4b2>
 8004a14:	b672      	cpsid	i
 8004a16:	e7fe      	b.n	8004a16 <main+0x4b6>
 8004a18:	b672      	cpsid	i
 8004a1a:	e7fe      	b.n	8004a1a <main+0x4ba>

08004a1c <timedWork>:
void timedWork(){
 8004a1c:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 8004a1e:	2104      	movs	r1, #4
 8004a20:	4809      	ldr	r0, [pc, #36]	; (8004a48 <timedWork+0x2c>)
 8004a22:	f003 f953 	bl	8007ccc <HAL_GPIO_TogglePin>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <timedWork+0x30>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d006      	beq.n	8004a3c <timedWork+0x20>
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <timedWork+0x34>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	dd01      	ble.n	8004a3a <timedWork+0x1e>
 8004a36:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <timedWork+0x30>)
 8004a38:	6013      	str	r3, [r2, #0]
}
 8004a3a:	bd10      	pop	{r4, pc}
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 8004a3c:	f7ff fc1e 	bl	800427c <detectAcc>
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <timedWork+0x34>)
 8004a42:	6018      	str	r0, [r3, #0]
 8004a44:	e7f3      	b.n	8004a2e <timedWork+0x12>
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	50000c00 	.word	0x50000c00
 8004a4c:	2000031c 	.word	0x2000031c
 8004a50:	20000318 	.word	0x20000318

08004a54 <stor>:
float stor(const char* str) {
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	46ce      	mov	lr, r9
 8004a58:	4647      	mov	r7, r8
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	0005      	movs	r5, r0
    float sign = *str == '-' ? str++, -1 : 1;
 8004a5e:	7803      	ldrb	r3, [r0, #0]
 8004a60:	2b2d      	cmp	r3, #45	; 0x2d
 8004a62:	d02f      	beq.n	8004ac4 <stor+0x70>
 8004a64:	23fe      	movs	r3, #254	; 0xfe
 8004a66:	059b      	lsls	r3, r3, #22
 8004a68:	4698      	mov	r8, r3
    while (*str >= '0' && *str <= '9') {
 8004a6a:	782e      	ldrb	r6, [r5, #0]
 8004a6c:	0033      	movs	r3, r6
 8004a6e:	3b30      	subs	r3, #48	; 0x30
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	d82b      	bhi.n	8004acc <stor+0x78>
    float result = 0;
 8004a74:	2400      	movs	r4, #0
        result *= 10;
 8004a76:	4f45      	ldr	r7, [pc, #276]	; (8004b8c <stor+0x138>)
 8004a78:	1c39      	adds	r1, r7, #0
 8004a7a:	1c20      	adds	r0, r4, #0
 8004a7c:	f7fc f928 	bl	8000cd0 <__aeabi_fmul>
 8004a80:	1c04      	adds	r4, r0, #0
        result += *str - '0';
 8004a82:	0030      	movs	r0, r6
 8004a84:	3830      	subs	r0, #48	; 0x30
 8004a86:	f7fc fc31 	bl	80012ec <__aeabi_i2f>
 8004a8a:	1c21      	adds	r1, r4, #0
 8004a8c:	f7fb fdb6 	bl	80005fc <__aeabi_fadd>
 8004a90:	1c04      	adds	r4, r0, #0
        str++;
 8004a92:	3501      	adds	r5, #1
    while (*str >= '0' && *str <= '9') {
 8004a94:	782e      	ldrb	r6, [r5, #0]
 8004a96:	0033      	movs	r3, r6
 8004a98:	3b30      	subs	r3, #48	; 0x30
 8004a9a:	2b09      	cmp	r3, #9
 8004a9c:	d9ec      	bls.n	8004a78 <stor+0x24>
    if (*str == ',' || *str == '.') {
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	439e      	bics	r6, r3
 8004aa2:	2e2c      	cmp	r6, #44	; 0x2c
 8004aa4:	d014      	beq.n	8004ad0 <stor+0x7c>
    result *= sign;
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	1c20      	adds	r0, r4, #0
 8004aaa:	f7fc f911 	bl	8000cd0 <__aeabi_fmul>
 8004aae:	4681      	mov	r9, r0
    if (*str == 'e' || *str == 'E') {
 8004ab0:	782b      	ldrb	r3, [r5, #0]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	2b45      	cmp	r3, #69	; 0x45
 8004ab8:	d02c      	beq.n	8004b14 <stor+0xc0>
}
 8004aba:	4648      	mov	r0, r9
 8004abc:	bcc0      	pop	{r6, r7}
 8004abe:	46b9      	mov	r9, r7
 8004ac0:	46b0      	mov	r8, r6
 8004ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    float sign = *str == '-' ? str++, -1 : 1;
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <stor+0x13c>)
 8004ac8:	4698      	mov	r8, r3
 8004aca:	e7ce      	b.n	8004a6a <stor+0x16>
    float result = 0;
 8004acc:	2400      	movs	r4, #0
 8004ace:	e7e6      	b.n	8004a9e <stor+0x4a>
        str++;
 8004ad0:	1c6e      	adds	r6, r5, #1
        while (*str >= '0' && *str <= '9') {
 8004ad2:	7868      	ldrb	r0, [r5, #1]
 8004ad4:	0002      	movs	r2, r0
 8004ad6:	3a30      	subs	r2, #48	; 0x30
 8004ad8:	2a09      	cmp	r2, #9
 8004ada:	d819      	bhi.n	8004b10 <stor+0xbc>
        float multiplier = 0.1;
 8004adc:	4d2d      	ldr	r5, [pc, #180]	; (8004b94 <stor+0x140>)
            multiplier /= 10;
 8004ade:	4f2b      	ldr	r7, [pc, #172]	; (8004b8c <stor+0x138>)
            result += (*str - '0') * multiplier;
 8004ae0:	3830      	subs	r0, #48	; 0x30
 8004ae2:	f7fc fc03 	bl	80012ec <__aeabi_i2f>
 8004ae6:	1c29      	adds	r1, r5, #0
 8004ae8:	f7fc f8f2 	bl	8000cd0 <__aeabi_fmul>
 8004aec:	1c01      	adds	r1, r0, #0
 8004aee:	1c20      	adds	r0, r4, #0
 8004af0:	f7fb fd84 	bl	80005fc <__aeabi_fadd>
 8004af4:	1c04      	adds	r4, r0, #0
            multiplier /= 10;
 8004af6:	1c39      	adds	r1, r7, #0
 8004af8:	1c28      	adds	r0, r5, #0
 8004afa:	f7fb ff1f 	bl	800093c <__aeabi_fdiv>
 8004afe:	1c05      	adds	r5, r0, #0
            str++;
 8004b00:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 8004b02:	7830      	ldrb	r0, [r6, #0]
 8004b04:	0002      	movs	r2, r0
 8004b06:	3a30      	subs	r2, #48	; 0x30
 8004b08:	2a09      	cmp	r2, #9
 8004b0a:	d9e9      	bls.n	8004ae0 <stor+0x8c>
            str++;
 8004b0c:	0035      	movs	r5, r6
 8004b0e:	e7ca      	b.n	8004aa6 <stor+0x52>
        str++;
 8004b10:	0035      	movs	r5, r6
 8004b12:	e7c8      	b.n	8004aa6 <stor+0x52>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8004b14:	786b      	ldrb	r3, [r5, #1]
 8004b16:	2b2d      	cmp	r3, #45	; 0x2d
 8004b18:	d032      	beq.n	8004b80 <stor+0x12c>
        str++;
 8004b1a:	1c6e      	adds	r6, r5, #1
        float powerer = *str == '-'? str++, 0.1 : 10;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <stor+0x138>)
 8004b1e:	4698      	mov	r8, r3
        while (*str >= '0' && *str <= '9') {
 8004b20:	7835      	ldrb	r5, [r6, #0]
 8004b22:	002b      	movs	r3, r5
 8004b24:	3b30      	subs	r3, #48	; 0x30
 8004b26:	2b09      	cmp	r3, #9
 8004b28:	d82e      	bhi.n	8004b88 <stor+0x134>
        float power = 0;
 8004b2a:	2000      	movs	r0, #0
            power *= 10;
 8004b2c:	4f17      	ldr	r7, [pc, #92]	; (8004b8c <stor+0x138>)
 8004b2e:	1c39      	adds	r1, r7, #0
 8004b30:	f7fc f8ce 	bl	8000cd0 <__aeabi_fmul>
 8004b34:	1c04      	adds	r4, r0, #0
            power += *str - '0';
 8004b36:	0028      	movs	r0, r5
 8004b38:	3830      	subs	r0, #48	; 0x30
 8004b3a:	f7fc fbd7 	bl	80012ec <__aeabi_i2f>
 8004b3e:	1c21      	adds	r1, r4, #0
 8004b40:	f7fb fd5c 	bl	80005fc <__aeabi_fadd>
            str++;
 8004b44:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 8004b46:	7835      	ldrb	r5, [r6, #0]
 8004b48:	002b      	movs	r3, r5
 8004b4a:	3b30      	subs	r3, #48	; 0x30
 8004b4c:	2b09      	cmp	r3, #9
 8004b4e:	d9ee      	bls.n	8004b2e <stor+0xda>
        result *= pow(powerer, power);
 8004b50:	f7fe faae 	bl	80030b0 <__aeabi_f2d>
 8004b54:	0006      	movs	r6, r0
 8004b56:	000f      	movs	r7, r1
 8004b58:	4640      	mov	r0, r8
 8004b5a:	f7fe faa9 	bl	80030b0 <__aeabi_f2d>
 8004b5e:	0032      	movs	r2, r6
 8004b60:	003b      	movs	r3, r7
 8004b62:	f00c f8f3 	bl	8010d4c <pow>
 8004b66:	0006      	movs	r6, r0
 8004b68:	000f      	movs	r7, r1
 8004b6a:	4648      	mov	r0, r9
 8004b6c:	f7fe faa0 	bl	80030b0 <__aeabi_f2d>
 8004b70:	0032      	movs	r2, r6
 8004b72:	003b      	movs	r3, r7
 8004b74:	f7fd fbae 	bl	80022d4 <__aeabi_dmul>
 8004b78:	f7fe fae2 	bl	8003140 <__aeabi_d2f>
 8004b7c:	4681      	mov	r9, r0
    return result;
 8004b7e:	e79c      	b.n	8004aba <stor+0x66>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8004b80:	1cae      	adds	r6, r5, #2
 8004b82:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <stor+0x140>)
 8004b84:	4698      	mov	r8, r3
 8004b86:	e7cb      	b.n	8004b20 <stor+0xcc>
        float power = 0;
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e7e1      	b.n	8004b50 <stor+0xfc>
 8004b8c:	41200000 	.word	0x41200000
 8004b90:	bf800000 	.word	0xbf800000
 8004b94:	3dcccccd 	.word	0x3dcccccd

08004b98 <getGNRMC>:
void getGNRMC(const char * ptra){
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	46ce      	mov	lr, r9
 8004b9c:	4647      	mov	r7, r8
 8004b9e:	b580      	push	{r7, lr}
    char *token = strtok((char *)ptra, ",");
 8004ba0:	493e      	ldr	r1, [pc, #248]	; (8004c9c <getGNRMC+0x104>)
 8004ba2:	f009 fa9f 	bl	800e0e4 <strtok>
 8004ba6:	1e05      	subs	r5, r0, #0
    while( token != NULL ) {
 8004ba8:	d073      	beq.n	8004c92 <getGNRMC+0xfa>
	int i=0;
 8004baa:	2400      	movs	r4, #0
  	        GPSInfo.head=stor(token);
 8004bac:	4b3c      	ldr	r3, [pc, #240]	; (8004ca0 <getGNRMC+0x108>)
 8004bae:	4699      	mov	r9, r3
  	        GPSInfo.speed=stor(token);
 8004bb0:	4698      	mov	r8, r3
  	        strcpy(GPSInfo.date,dd);
 8004bb2:	001f      	movs	r7, r3
 8004bb4:	373d      	adds	r7, #61	; 0x3d
  	    	strcpy(GPSInfo.lonD,token);
 8004bb6:	001e      	movs	r6, r3
 8004bb8:	362b      	adds	r6, #43	; 0x2b
 8004bba:	e020      	b.n	8004bfe <getGNRMC+0x66>
  	    	strncpy(GPSInfo.time,token,6);
 8004bbc:	4838      	ldr	r0, [pc, #224]	; (8004ca0 <getGNRMC+0x108>)
 8004bbe:	302e      	adds	r0, #46	; 0x2e
 8004bc0:	2206      	movs	r2, #6
 8004bc2:	0029      	movs	r1, r5
 8004bc4:	f009 fa7a 	bl	800e0bc <strncpy>
  	    if(i==3){ //Getting Latitude
 8004bc8:	e01f      	b.n	8004c0a <getGNRMC+0x72>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8004bca:	214e      	movs	r1, #78	; 0x4e
 8004bcc:	0028      	movs	r0, r5
 8004bce:	f009 fa56 	bl	800e07e <strchr>
  	        else{GPSInfo.fix=1;}
 8004bd2:	4b33      	ldr	r3, [pc, #204]	; (8004ca0 <getGNRMC+0x108>)
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8004bd4:	4242      	negs	r2, r0
 8004bd6:	4150      	adcs	r0, r2
  	        else{GPSInfo.fix=1;}
 8004bd8:	61d8      	str	r0, [r3, #28]
  	    if(i==5){ //Getting Longitude
 8004bda:	2c05      	cmp	r4, #5
 8004bdc:	d025      	beq.n	8004c2a <getGNRMC+0x92>
  	    if(i==6){ //Getting Longitude ind
 8004bde:	2c06      	cmp	r4, #6
 8004be0:	d02b      	beq.n	8004c3a <getGNRMC+0xa2>
  	    if(i==9){ //Getting Date
 8004be2:	2c09      	cmp	r4, #9
 8004be4:	d02e      	beq.n	8004c44 <getGNRMC+0xac>
  	    if(i==7){ //Getting Speed
 8004be6:	2c07      	cmp	r4, #7
 8004be8:	d047      	beq.n	8004c7a <getGNRMC+0xe2>
  	    if(i==8){ //Getting Course
 8004bea:	2c08      	cmp	r4, #8
 8004bec:	d04b      	beq.n	8004c86 <getGNRMC+0xee>
  	    token = strtok(NULL,",");
 8004bee:	492b      	ldr	r1, [pc, #172]	; (8004c9c <getGNRMC+0x104>)
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f009 fa77 	bl	800e0e4 <strtok>
 8004bf6:	0005      	movs	r5, r0
        i++;
 8004bf8:	3401      	adds	r4, #1
    while( token != NULL ) {
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d049      	beq.n	8004c92 <getGNRMC+0xfa>
  	    if(i==1){ //Getting time
 8004bfe:	2c01      	cmp	r4, #1
 8004c00:	d0dc      	beq.n	8004bbc <getGNRMC+0x24>
  	    if(i==10){ //Getting GPS status
 8004c02:	2c0a      	cmp	r4, #10
 8004c04:	d0e1      	beq.n	8004bca <getGNRMC+0x32>
  	    if(i==3){ //Getting Latitude
 8004c06:	2c03      	cmp	r4, #3
 8004c08:	d007      	beq.n	8004c1a <getGNRMC+0x82>
  	    if(i==4){ //Getting Latitude ind
 8004c0a:	2c04      	cmp	r4, #4
 8004c0c:	d1e5      	bne.n	8004bda <getGNRMC+0x42>
  	        strcpy(GPSInfo.latD,token);
 8004c0e:	4824      	ldr	r0, [pc, #144]	; (8004ca0 <getGNRMC+0x108>)
 8004c10:	3028      	adds	r0, #40	; 0x28
 8004c12:	0029      	movs	r1, r5
 8004c14:	f009 fbd3 	bl	800e3be <strcpy>
  	    if(i==6){ //Getting Longitude ind
 8004c18:	e7e3      	b.n	8004be2 <getGNRMC+0x4a>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8004c1a:	0028      	movs	r0, r5
 8004c1c:	f7ff ff1a 	bl	8004a54 <stor>
 8004c20:	f7ff fbde 	bl	80043e0 <DegreeDecimalConvert>
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <getGNRMC+0x108>)
 8004c26:	6018      	str	r0, [r3, #0]
  	    if(i==5){ //Getting Longitude
 8004c28:	e7d9      	b.n	8004bde <getGNRMC+0x46>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8004c2a:	0028      	movs	r0, r5
 8004c2c:	f7ff ff12 	bl	8004a54 <stor>
 8004c30:	f7ff fbd6 	bl	80043e0 <DegreeDecimalConvert>
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <getGNRMC+0x108>)
 8004c36:	6058      	str	r0, [r3, #4]
  	    if(i==9){ //Getting Date
 8004c38:	e7d5      	b.n	8004be6 <getGNRMC+0x4e>
  	    	strcpy(GPSInfo.lonD,token);
 8004c3a:	0029      	movs	r1, r5
 8004c3c:	0030      	movs	r0, r6
 8004c3e:	f009 fbbe 	bl	800e3be <strcpy>
  	    if(i==7){ //Getting Speed
 8004c42:	e7d2      	b.n	8004bea <getGNRMC+0x52>
  			memset(dd,0,10);
 8004c44:	4817      	ldr	r0, [pc, #92]	; (8004ca4 <getGNRMC+0x10c>)
 8004c46:	220a      	movs	r2, #10
 8004c48:	2100      	movs	r1, #0
 8004c4a:	f009 fa03 	bl	800e054 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8004c4e:	2300      	movs	r3, #0
 8004c50:	4914      	ldr	r1, [pc, #80]	; (8004ca4 <getGNRMC+0x10c>)
 8004c52:	5cea      	ldrb	r2, [r5, r3]
 8004c54:	545a      	strb	r2, [r3, r1]
 8004c56:	3301      	adds	r3, #1
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d1fa      	bne.n	8004c52 <getGNRMC+0xba>
  	        dd[4]='2';
 8004c5c:	4911      	ldr	r1, [pc, #68]	; (8004ca4 <getGNRMC+0x10c>)
 8004c5e:	332e      	adds	r3, #46	; 0x2e
 8004c60:	710b      	strb	r3, [r1, #4]
  	        dd[5]='0';
 8004c62:	3b02      	subs	r3, #2
 8004c64:	714b      	strb	r3, [r1, #5]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 8004c66:	792b      	ldrb	r3, [r5, #4]
 8004c68:	718b      	strb	r3, [r1, #6]
 8004c6a:	796b      	ldrb	r3, [r5, #5]
 8004c6c:	71cb      	strb	r3, [r1, #7]
  	        dd[8]='\0';
 8004c6e:	2300      	movs	r3, #0
 8004c70:	720b      	strb	r3, [r1, #8]
  	        strcpy(GPSInfo.date,dd);
 8004c72:	0038      	movs	r0, r7
 8004c74:	f009 fba3 	bl	800e3be <strcpy>
  	    if(i==8){ //Getting Course
 8004c78:	e7b9      	b.n	8004bee <getGNRMC+0x56>
  	        GPSInfo.speed=stor(token);
 8004c7a:	0028      	movs	r0, r5
 8004c7c:	f7ff feea 	bl	8004a54 <stor>
 8004c80:	4643      	mov	r3, r8
 8004c82:	6198      	str	r0, [r3, #24]
  	    if(i==8){ //Getting Course
 8004c84:	e7b3      	b.n	8004bee <getGNRMC+0x56>
  	        GPSInfo.head=stor(token);
 8004c86:	0028      	movs	r0, r5
 8004c88:	f7ff fee4 	bl	8004a54 <stor>
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	6158      	str	r0, [r3, #20]
 8004c90:	e7ad      	b.n	8004bee <getGNRMC+0x56>
}
 8004c92:	bcc0      	pop	{r6, r7}
 8004c94:	46b9      	mov	r9, r7
 8004c96:	46b0      	mov	r8, r6
 8004c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	08011dd8 	.word	0x08011dd8
 8004ca0:	200004fc 	.word	0x200004fc
 8004ca4:	20003590 	.word	0x20003590

08004ca8 <getGNGSA>:
void getGNGSA(const  char * ptra){
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8004caa:	490e      	ldr	r1, [pc, #56]	; (8004ce4 <getGNGSA+0x3c>)
 8004cac:	f009 fa1a 	bl	800e0e4 <strtok>
    while( token != NULL ) {
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d016      	beq.n	8004ce2 <getGNGSA+0x3a>
	int i=0;
 8004cb4:	2400      	movs	r4, #0
    	    GPSInfo.hdop=stor(token);
 8004cb6:	4f0c      	ldr	r7, [pc, #48]	; (8004ce8 <getGNGSA+0x40>)
    	    GPSInfo.pdop=stor(token);
 8004cb8:	003e      	movs	r6, r7
  	    token = strtok(NULL,",");
 8004cba:	4d0a      	ldr	r5, [pc, #40]	; (8004ce4 <getGNGSA+0x3c>)
 8004cbc:	e009      	b.n	8004cd2 <getGNGSA+0x2a>
    	    GPSInfo.pdop=stor(token);
 8004cbe:	f7ff fec9 	bl	8004a54 <stor>
 8004cc2:	6130      	str	r0, [r6, #16]
  	    token = strtok(NULL,",");
 8004cc4:	0029      	movs	r1, r5
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f009 fa0c 	bl	800e0e4 <strtok>
        i++;
 8004ccc:	3401      	adds	r4, #1
    while( token != NULL ) {
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d007      	beq.n	8004ce2 <getGNGSA+0x3a>
        if(i==15){ //Getting PDOP
 8004cd2:	2c0f      	cmp	r4, #15
 8004cd4:	d0f3      	beq.n	8004cbe <getGNGSA+0x16>
    	if(i==16){ //Getting HDOP
 8004cd6:	2c10      	cmp	r4, #16
 8004cd8:	d1f4      	bne.n	8004cc4 <getGNGSA+0x1c>
    	    GPSInfo.hdop=stor(token);
 8004cda:	f7ff febb 	bl	8004a54 <stor>
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	e7f0      	b.n	8004cc4 <getGNGSA+0x1c>
}
 8004ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ce4:	08011dd8 	.word	0x08011dd8
 8004ce8:	200004fc 	.word	0x200004fc

08004cec <getGNGGA>:
void getGNGGA(const  char * ptra){
 8004cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8004cee:	490e      	ldr	r1, [pc, #56]	; (8004d28 <getGNGGA+0x3c>)
 8004cf0:	f009 f9f8 	bl	800e0e4 <strtok>
    while( token != NULL ) {
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d016      	beq.n	8004d26 <getGNGGA+0x3a>
	int i=0;
 8004cf8:	2400      	movs	r4, #0
            GPSInfo.alt = stor(token);
 8004cfa:	4f0c      	ldr	r7, [pc, #48]	; (8004d2c <getGNGGA+0x40>)
            GPSInfo.sat = atoi(token);
 8004cfc:	003e      	movs	r6, r7
  	    token = strtok(NULL,",");
 8004cfe:	4d0a      	ldr	r5, [pc, #40]	; (8004d28 <getGNGGA+0x3c>)
 8004d00:	e009      	b.n	8004d16 <getGNGGA+0x2a>
            GPSInfo.sat = atoi(token);
 8004d02:	f007 fa2b 	bl	800c15c <atoi>
 8004d06:	6230      	str	r0, [r6, #32]
  	    token = strtok(NULL,",");
 8004d08:	0029      	movs	r1, r5
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f009 f9ea 	bl	800e0e4 <strtok>
        i++;
 8004d10:	3401      	adds	r4, #1
    while( token != NULL ) {
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d007      	beq.n	8004d26 <getGNGGA+0x3a>
    	if(i==7){ //Getting Satellites no
 8004d16:	2c07      	cmp	r4, #7
 8004d18:	d0f3      	beq.n	8004d02 <getGNGGA+0x16>
    	if(i==9){ //Getting Saltitute
 8004d1a:	2c09      	cmp	r4, #9
 8004d1c:	d1f4      	bne.n	8004d08 <getGNGGA+0x1c>
            GPSInfo.alt = stor(token);
 8004d1e:	f7ff fe99 	bl	8004a54 <stor>
 8004d22:	60b8      	str	r0, [r7, #8]
 8004d24:	e7f0      	b.n	8004d08 <getGNGGA+0x1c>
}
 8004d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d28:	08011dd8 	.word	0x08011dd8
 8004d2c:	200004fc 	.word	0x200004fc

08004d30 <validateGPS>:
int validateGPS(const char * str){
 8004d30:	b510      	push	{r4, lr}
 8004d32:	0004      	movs	r4, r0
	int GPStyp=0;

	uint8_t checksum = 0;
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8004d34:	f7ff fb97 	bl	8004466 <nmea_valid_checksum>
	        return 0;
 8004d38:	2300      	movs	r3, #0
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8004d3a:	2801      	cmp	r0, #1
 8004d3c:	d10e      	bne.n	8004d5c <validateGPS+0x2c>
	    }
	    if(strlen(str)<4){return 0;}
 8004d3e:	0020      	movs	r0, r4
 8004d40:	f7fb f9e2 	bl	8000108 <strlen>
 8004d44:	2803      	cmp	r0, #3
 8004d46:	d93a      	bls.n	8004dbe <validateGPS+0x8e>

	    if (strstr(str, "GNRMC") != NULL) {
 8004d48:	491e      	ldr	r1, [pc, #120]	; (8004dc4 <validateGPS+0x94>)
 8004d4a:	0020      	movs	r0, r4
 8004d4c:	f009 fa32 	bl	800e1b4 <strstr>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d005      	beq.n	8004d60 <validateGPS+0x30>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8004d54:	0020      	movs	r0, r4
 8004d56:	f7ff ff1f 	bl	8004b98 <getGNRMC>
 8004d5a:	2301      	movs	r3, #1
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
	    	GPStyp=6;
	    }
    return(GPStyp);
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	bd10      	pop	{r4, pc}
	    else if (strstr(str, "GNGGA") != NULL) {
 8004d60:	4919      	ldr	r1, [pc, #100]	; (8004dc8 <validateGPS+0x98>)
 8004d62:	0020      	movs	r0, r4
 8004d64:	f009 fa26 	bl	800e1b4 <strstr>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d11e      	bne.n	8004daa <validateGPS+0x7a>
	    else if (strstr(str, "GNGSA") != NULL) {
 8004d6c:	4917      	ldr	r1, [pc, #92]	; (8004dcc <validateGPS+0x9c>)
 8004d6e:	0020      	movs	r0, r4
 8004d70:	f009 fa20 	bl	800e1b4 <strstr>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d11d      	bne.n	8004db4 <validateGPS+0x84>
	    else if (strstr(str, "GNGSV") != NULL) {
 8004d78:	4915      	ldr	r1, [pc, #84]	; (8004dd0 <validateGPS+0xa0>)
 8004d7a:	0020      	movs	r0, r4
 8004d7c:	f009 fa1a 	bl	800e1b4 <strstr>
	    	GPStyp=4;
 8004d80:	2304      	movs	r3, #4
	    else if (strstr(str, "GNGSV") != NULL) {
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d1ea      	bne.n	8004d5c <validateGPS+0x2c>
	    else if (strstr(str, "GNGLL") != NULL) {
 8004d86:	4913      	ldr	r1, [pc, #76]	; (8004dd4 <validateGPS+0xa4>)
 8004d88:	0020      	movs	r0, r4
 8004d8a:	f009 fa13 	bl	800e1b4 <strstr>
	    	GPStyp=5;
 8004d8e:	2305      	movs	r3, #5
	    else if (strstr(str, "GNGLL") != NULL) {
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d1e3      	bne.n	8004d5c <validateGPS+0x2c>
	    else if (strstr(str, "GNVTG") != NULL) {
 8004d94:	4910      	ldr	r1, [pc, #64]	; (8004dd8 <validateGPS+0xa8>)
 8004d96:	0020      	movs	r0, r4
 8004d98:	f009 fa0c 	bl	800e1b4 <strstr>
	    	GPStyp=6;
 8004d9c:	4243      	negs	r3, r0
 8004d9e:	4158      	adcs	r0, r3
 8004da0:	4243      	negs	r3, r0
 8004da2:	2205      	movs	r2, #5
 8004da4:	4393      	bics	r3, r2
 8004da6:	3306      	adds	r3, #6
 8004da8:	e7d8      	b.n	8004d5c <validateGPS+0x2c>
	    	GPStyp=2; getGNGGA(str);
 8004daa:	0020      	movs	r0, r4
 8004dac:	f7ff ff9e 	bl	8004cec <getGNGGA>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e7d3      	b.n	8004d5c <validateGPS+0x2c>
	    	GPStyp=3;getGNGSA(str);
 8004db4:	0020      	movs	r0, r4
 8004db6:	f7ff ff77 	bl	8004ca8 <getGNGSA>
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e7ce      	b.n	8004d5c <validateGPS+0x2c>
	    if(strlen(str)<4){return 0;}
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e7cc      	b.n	8004d5c <validateGPS+0x2c>
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	080120e8 	.word	0x080120e8
 8004dc8:	080120f0 	.word	0x080120f0
 8004dcc:	080120f8 	.word	0x080120f8
 8004dd0:	08012100 	.word	0x08012100
 8004dd4:	08012108 	.word	0x08012108
 8004dd8:	08012110 	.word	0x08012110

08004ddc <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8004ddc:	b510      	push	{r4, lr}
 8004dde:	b082      	sub	sp, #8
	    //Debug_Tx(gpsData);
		int valid=0 ;
		if(strlen((char*)gpsData)>5){
 8004de0:	480d      	ldr	r0, [pc, #52]	; (8004e18 <ProcessGPS+0x3c>)
 8004de2:	f7fb f991 	bl	8000108 <strlen>
 8004de6:	2805      	cmp	r0, #5
 8004de8:	d801      	bhi.n	8004dee <ProcessGPS+0x12>
				valid=valid+validateGPS(token);
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
			}
			//free(token);
		}
}
 8004dea:	b002      	add	sp, #8
 8004dec:	bd10      	pop	{r4, pc}
			char *tk= NULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	9301      	str	r3, [sp, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8004df2:	490a      	ldr	r1, [pc, #40]	; (8004e1c <ProcessGPS+0x40>)
 8004df4:	4808      	ldr	r0, [pc, #32]	; (8004e18 <ProcessGPS+0x3c>)
 8004df6:	aa01      	add	r2, sp, #4
 8004df8:	f009 f9d7 	bl	800e1aa <strtok_r>
			while( token != NULL ) {
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d0f4      	beq.n	8004dea <ProcessGPS+0xe>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8004e00:	4c06      	ldr	r4, [pc, #24]	; (8004e1c <ProcessGPS+0x40>)
				valid=valid+validateGPS(token);
 8004e02:	f7ff ff95 	bl	8004d30 <validateGPS>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8004e06:	aa01      	add	r2, sp, #4
 8004e08:	0021      	movs	r1, r4
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f009 f9cd 	bl	800e1aa <strtok_r>
			while( token != NULL ) {
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d1f6      	bne.n	8004e02 <ProcessGPS+0x26>
 8004e14:	e7e9      	b.n	8004dea <ProcessGPS+0xe>
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	200035ac 	.word	0x200035ac
 8004e1c:	08011d20 	.word	0x08011d20

08004e20 <HAL_UART_TxCpltCallback>:
}
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8004e24:	b510      	push	{r4, lr}
	if(huart==&huart2){
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_UART_ErrorCallback+0x6c>)
 8004e28:	4298      	cmp	r0, r3
 8004e2a:	d003      	beq.n	8004e34 <HAL_UART_ErrorCallback+0x10>
	if(huart==&huart1){
 8004e2c:	4b19      	ldr	r3, [pc, #100]	; (8004e94 <HAL_UART_ErrorCallback+0x70>)
 8004e2e:	4298      	cmp	r0, r3
 8004e30:	d01c      	beq.n	8004e6c <HAL_UART_ErrorCallback+0x48>
}
 8004e32:	bd10      	pop	{r4, pc}
		if(dnlfile==0){
 8004e34:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <HAL_UART_ErrorCallback+0x74>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1fa      	bne.n	8004e32 <HAL_UART_ErrorCallback+0xe>
		if(DMAon==1){
 8004e3c:	4b17      	ldr	r3, [pc, #92]	; (8004e9c <HAL_UART_ErrorCallback+0x78>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d1f6      	bne.n	8004e32 <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <HAL_UART_ErrorCallback+0x7c>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <HAL_UART_ErrorCallback+0x3c>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e4c:	4810      	ldr	r0, [pc, #64]	; (8004e90 <HAL_UART_ErrorCallback+0x6c>)
 8004e4e:	6803      	ldr	r3, [r0, #0]
 8004e50:	220c      	movs	r2, #12
 8004e52:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8004e54:	32d5      	adds	r2, #213	; 0xd5
 8004e56:	4912      	ldr	r1, [pc, #72]	; (8004ea0 <HAL_UART_ErrorCallback+0x7c>)
 8004e58:	0092      	lsls	r2, r2, #2
 8004e5a:	f005 fc41 	bl	800a6e0 <HAL_UART_Receive_DMA>
 8004e5e:	e7e8      	b.n	8004e32 <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8004e60:	480f      	ldr	r0, [pc, #60]	; (8004ea0 <HAL_UART_ErrorCallback+0x7c>)
 8004e62:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <HAL_UART_ErrorCallback+0x80>)
 8004e64:	2100      	movs	r1, #0
 8004e66:	f009 f8f5 	bl	800e054 <memset>
 8004e6a:	e7ef      	b.n	8004e4c <HAL_UART_ErrorCallback+0x28>
		if(DMAon==1){
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_UART_ErrorCallback+0x78>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d1de      	bne.n	8004e32 <HAL_UART_ErrorCallback+0xe>
		GSMBuff[0]=0;
 8004e74:	490c      	ldr	r1, [pc, #48]	; (8004ea8 <HAL_UART_ErrorCallback+0x84>)
 8004e76:	2300      	movs	r3, #0
 8004e78:	700b      	strb	r3, [r1, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e7a:	4806      	ldr	r0, [pc, #24]	; (8004e94 <HAL_UART_ErrorCallback+0x70>)
 8004e7c:	6802      	ldr	r2, [r0, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	6213      	str	r3, [r2, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004e82:	4a03      	ldr	r2, [pc, #12]	; (8004e90 <HAL_UART_ErrorCallback+0x6c>)
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	6213      	str	r3, [r2, #32]
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f005 fc29 	bl	800a6e0 <HAL_UART_Receive_DMA>
}
 8004e8e:	e7d0      	b.n	8004e32 <HAL_UART_ErrorCallback+0xe>
 8004e90:	20003d9c 	.word	0x20003d9c
 8004e94:	20003d08 	.word	0x20003d08
 8004e98:	200035a0 	.word	0x200035a0
 8004e9c:	20000094 	.word	0x20000094
 8004ea0:	200035ac 	.word	0x200035ac
 8004ea4:	000003e7 	.word	0x000003e7
 8004ea8:	2000054c 	.word	0x2000054c

08004eac <HAL_TIM_PeriodElapsedCallback>:
{
 8004eac:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8004eae:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004eb0:	6802      	ldr	r2, [r0, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d000      	beq.n	8004eb8 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8004eb6:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8004eb8:	f002 f820 	bl	8006efc <HAL_IncTick>
}
 8004ebc:	e7fb      	b.n	8004eb6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	40012c00 	.word	0x40012c00

08004ec4 <restartGSMuart>:
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	4907      	ldr	r1, [pc, #28]	; (8004ee4 <restartGSMuart+0x20>)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	700b      	strb	r3, [r1, #0]
 8004ecc:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <restartGSMuart+0x24>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	230c      	movs	r3, #12
 8004ed2:	6213      	str	r3, [r2, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8004ed4:	4805      	ldr	r0, [pc, #20]	; (8004eec <restartGSMuart+0x28>)
 8004ed6:	6802      	ldr	r2, [r0, #0]
 8004ed8:	6213      	str	r3, [r2, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8004eda:	2201      	movs	r2, #1
 8004edc:	f005 fc00 	bl	800a6e0 <HAL_UART_Receive_DMA>
}
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	2000054c 	.word	0x2000054c
 8004ee8:	20003d9c 	.word	0x20003d9c
 8004eec:	20003d08 	.word	0x20003d08

08004ef0 <GetGSMReply>:
{
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	46de      	mov	lr, fp
 8004ef4:	4657      	mov	r7, sl
 8004ef6:	464e      	mov	r6, r9
 8004ef8:	4645      	mov	r5, r8
 8004efa:	b5e0      	push	{r5, r6, r7, lr}
 8004efc:	b083      	sub	sp, #12
 8004efe:	468a      	mov	sl, r1
 8004f00:	9201      	str	r2, [sp, #4]
 8004f02:	4698      	mov	r8, r3
 8004f04:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	memset(GSMReply, 0, 100);
 8004f06:	484e      	ldr	r0, [pc, #312]	; (8005040 <GetGSMReply+0x150>)
 8004f08:	2264      	movs	r2, #100	; 0x64
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f009 f8a2 	bl	800e054 <memset>
	memset(GSMInData, 0, 1000);
 8004f10:	484c      	ldr	r0, [pc, #304]	; (8005044 <GetGSMReply+0x154>)
 8004f12:	22fa      	movs	r2, #250	; 0xfa
 8004f14:	0092      	lsls	r2, r2, #2
 8004f16:	2100      	movs	r1, #0
 8004f18:	f009 f89c 	bl	800e054 <memset>
	int stT = HAL_GetTick();
 8004f1c:	f001 fffa 	bl	8006f14 <HAL_GetTick>
 8004f20:	0005      	movs	r5, r0
		if (strlen(GSMData) > 0)
 8004f22:	4f49      	ldr	r7, [pc, #292]	; (8005048 <GetGSMReply+0x158>)
			gsmER++;
 8004f24:	4c49      	ldr	r4, [pc, #292]	; (800504c <GetGSMReply+0x15c>)
				gsmER = 0;
 8004f26:	46a3      	mov	fp, r4
	while (((HAL_GetTick() - stT) <= timeout))
 8004f28:	e030      	b.n	8004f8c <GetGSMReply+0x9c>
			strcpy(GSMInData, GSMData);
 8004f2a:	4947      	ldr	r1, [pc, #284]	; (8005048 <GetGSMReply+0x158>)
 8004f2c:	4b45      	ldr	r3, [pc, #276]	; (8005044 <GetGSMReply+0x154>)
 8004f2e:	4699      	mov	r9, r3
 8004f30:	0018      	movs	r0, r3
 8004f32:	f009 fa44 	bl	800e3be <strcpy>
			char *pq = strstr(GSMInData, finChar);
 8004f36:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004f38:	4648      	mov	r0, r9
 8004f3a:	f009 f93b 	bl	800e1b4 <strstr>
			if ((pq != NULL))
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d064      	beq.n	800500c <GetGSMReply+0x11c>
				if ((strlen(find) < 1))
 8004f42:	4653      	mov	r3, sl
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d038      	beq.n	8004fbc <GetGSMReply+0xcc>
				char *p = strstr(GSMInData, find);
 8004f4a:	483e      	ldr	r0, [pc, #248]	; (8005044 <GetGSMReply+0x154>)
 8004f4c:	4651      	mov	r1, sl
 8004f4e:	f009 f931 	bl	800e1b4 <strstr>
 8004f52:	9000      	str	r0, [sp, #0]
				if ((strlen(LineEnd) < 1))
 8004f54:	4643      	mov	r3, r8
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d043      	beq.n	8004fe4 <GetGSMReply+0xf4>
					if ((strstr(GSMInData, LineEnd) != NULL))
 8004f5c:	4839      	ldr	r0, [pc, #228]	; (8005044 <GetGSMReply+0x154>)
 8004f5e:	4641      	mov	r1, r8
 8004f60:	f009 f928 	bl	800e1b4 <strstr>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d00e      	beq.n	8004f86 <GetGSMReply+0x96>
						if ((strlen(p + gap) > strlen(LineEnd)))
 8004f68:	9b00      	ldr	r3, [sp, #0]
 8004f6a:	9a01      	ldr	r2, [sp, #4]
 8004f6c:	4694      	mov	ip, r2
 8004f6e:	4463      	add	r3, ip
 8004f70:	4699      	mov	r9, r3
 8004f72:	0018      	movs	r0, r3
 8004f74:	f7fb f8c8 	bl	8000108 <strlen>
 8004f78:	9000      	str	r0, [sp, #0]
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	f7fb f8c4 	bl	8000108 <strlen>
 8004f80:	9b00      	ldr	r3, [sp, #0]
 8004f82:	4283      	cmp	r3, r0
 8004f84:	d833      	bhi.n	8004fee <GetGSMReply+0xfe>
			gsmER = 0;
 8004f86:	4b31      	ldr	r3, [pc, #196]	; (800504c <GetGSMReply+0x15c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
	while (((HAL_GetTick() - stT) <= timeout))
 8004f8c:	f001 ffc2 	bl	8006f14 <HAL_GetTick>
 8004f90:	1b40      	subs	r0, r0, r5
 8004f92:	42b0      	cmp	r0, r6
 8004f94:	d817      	bhi.n	8004fc6 <GetGSMReply+0xd6>
		HAL_Delay(70);
 8004f96:	2046      	movs	r0, #70	; 0x46
 8004f98:	f001 ffc2 	bl	8006f20 <HAL_Delay>
		if (strlen(GSMData) > 0)
 8004f9c:	783b      	ldrb	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1c3      	bne.n	8004f2a <GetGSMReply+0x3a>
			gsmER++;
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	6023      	str	r3, [r4, #0]
			if (gsmER > 9)
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	ddef      	ble.n	8004f8c <GetGSMReply+0x9c>
				RestartGSM();
 8004fac:	f7fe fb02 	bl	80035b4 <RestartGSM>
				restartGSMuart();
 8004fb0:	f7ff ff88 	bl	8004ec4 <restartGSMuart>
				gsmER = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	465a      	mov	r2, fp
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	e7e7      	b.n	8004f8c <GetGSMReply+0x9c>
					strcpy(GSMReply, pq);
 8004fbc:	4b20      	ldr	r3, [pc, #128]	; (8005040 <GetGSMReply+0x150>)
 8004fbe:	0001      	movs	r1, r0
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f009 f9fc 	bl	800e3be <strcpy>
	if (strlen(GSMReply) < 1)
 8004fc6:	4b1e      	ldr	r3, [pc, #120]	; (8005040 <GetGSMReply+0x150>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d02e      	beq.n	800502c <GetGSMReply+0x13c>
	HAL_Delay(100);
 8004fce:	2064      	movs	r0, #100	; 0x64
 8004fd0:	f001 ffa6 	bl	8006f20 <HAL_Delay>
	return GSMReply;
 8004fd4:	481a      	ldr	r0, [pc, #104]	; (8005040 <GetGSMReply+0x150>)
}
 8004fd6:	b003      	add	sp, #12
 8004fd8:	bcf0      	pop	{r4, r5, r6, r7}
 8004fda:	46bb      	mov	fp, r7
 8004fdc:	46b2      	mov	sl, r6
 8004fde:	46a9      	mov	r9, r5
 8004fe0:	46a0      	mov	r8, r4
 8004fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
					strcpy(GSMReply, p);
 8004fe4:	4816      	ldr	r0, [pc, #88]	; (8005040 <GetGSMReply+0x150>)
 8004fe6:	9900      	ldr	r1, [sp, #0]
 8004fe8:	f009 f9e9 	bl	800e3be <strcpy>
					break;
 8004fec:	e7eb      	b.n	8004fc6 <GetGSMReply+0xd6>
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 8004fee:	2200      	movs	r2, #0
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	4648      	mov	r0, r9
 8004ff4:	f009 f8d9 	bl	800e1aa <strtok_r>
 8004ff8:	4681      	mov	r9, r0
							if (strlen(p1) < 88)
 8004ffa:	f7fb f885 	bl	8000108 <strlen>
 8004ffe:	2857      	cmp	r0, #87	; 0x57
 8005000:	d8c1      	bhi.n	8004f86 <GetGSMReply+0x96>
								strcpy(GSMReply, p1);
 8005002:	480f      	ldr	r0, [pc, #60]	; (8005040 <GetGSMReply+0x150>)
 8005004:	4649      	mov	r1, r9
 8005006:	f009 f9da 	bl	800e3be <strcpy>
								break;
 800500a:	e7dc      	b.n	8004fc6 <GetGSMReply+0xd6>
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 800500c:	4910      	ldr	r1, [pc, #64]	; (8005050 <GetGSMReply+0x160>)
 800500e:	480d      	ldr	r0, [pc, #52]	; (8005044 <GetGSMReply+0x154>)
 8005010:	f009 f8d0 	bl	800e1b4 <strstr>
 8005014:	2800      	cmp	r0, #0
 8005016:	d105      	bne.n	8005024 <GetGSMReply+0x134>
 8005018:	490e      	ldr	r1, [pc, #56]	; (8005054 <GetGSMReply+0x164>)
 800501a:	480a      	ldr	r0, [pc, #40]	; (8005044 <GetGSMReply+0x154>)
 800501c:	f009 f8ca 	bl	800e1b4 <strstr>
 8005020:	2800      	cmp	r0, #0
 8005022:	d0b0      	beq.n	8004f86 <GetGSMReply+0x96>
					Debug_Tx("Err Found");
 8005024:	480c      	ldr	r0, [pc, #48]	; (8005058 <GetGSMReply+0x168>)
 8005026:	f7fe f97b 	bl	8003320 <Debug_Tx>
					break;
 800502a:	e7cc      	b.n	8004fc6 <GetGSMReply+0xd6>
		Debug_Tx("****");
 800502c:	480b      	ldr	r0, [pc, #44]	; (800505c <GetGSMReply+0x16c>)
 800502e:	f7fe f977 	bl	8003320 <Debug_Tx>
		Debug_Tx(GSMInData);
 8005032:	4804      	ldr	r0, [pc, #16]	; (8005044 <GetGSMReply+0x154>)
 8005034:	f7fe f974 	bl	8003320 <Debug_Tx>
		Debug_Tx((char *)ErrorMsg);
 8005038:	980c      	ldr	r0, [sp, #48]	; 0x30
 800503a:	f7fe f971 	bl	8003320 <Debug_Tx>
 800503e:	e7c6      	b.n	8004fce <GetGSMReply+0xde>
 8005040:	20000f78 	.word	0x20000f78
 8005044:	20000b90 	.word	0x20000b90
 8005048:	20000550 	.word	0x20000550
 800504c:	200039dc 	.word	0x200039dc
 8005050:	08012118 	.word	0x08012118
 8005054:	08012120 	.word	0x08012120
 8005058:	08012128 	.word	0x08012128
 800505c:	08012134 	.word	0x08012134

08005060 <GSMSimOperator>:
{
 8005060:	b500      	push	{lr}
 8005062:	b085      	sub	sp, #20
	SendGSMCode("  AT+COPS?");
 8005064:	4808      	ldr	r0, [pc, #32]	; (8005088 <GSMSimOperator+0x28>)
 8005066:	f7fe fae9 	bl	800363c <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 800506a:	4b08      	ldr	r3, [pc, #32]	; (800508c <GSMSimOperator+0x2c>)
 800506c:	4908      	ldr	r1, [pc, #32]	; (8005090 <GSMSimOperator+0x30>)
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <GSMSimOperator+0x34>)
 8005070:	9202      	str	r2, [sp, #8]
 8005072:	4a09      	ldr	r2, [pc, #36]	; (8005098 <GSMSimOperator+0x38>)
 8005074:	9201      	str	r2, [sp, #4]
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <GSMSimOperator+0x3c>)
 8005078:	9200      	str	r2, [sp, #0]
 800507a:	220c      	movs	r2, #12
 800507c:	2000      	movs	r0, #0
 800507e:	f7ff ff37 	bl	8004ef0 <GetGSMReply>
}
 8005082:	b005      	add	sp, #20
 8005084:	bd00      	pop	{pc}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	0801213c 	.word	0x0801213c
 800508c:	08012148 	.word	0x08012148
 8005090:	0801214c 	.word	0x0801214c
 8005094:	0801248c 	.word	0x0801248c
 8005098:	00001388 	.word	0x00001388
 800509c:	08012154 	.word	0x08012154

080050a0 <GSMIMEI>:
{
 80050a0:	b500      	push	{lr}
 80050a2:	b085      	sub	sp, #20
	SendGSMCode(" AT+QGSN");
 80050a4:	4808      	ldr	r0, [pc, #32]	; (80050c8 <GSMIMEI+0x28>)
 80050a6:	f7fe fac9 	bl	800363c <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 80050aa:	4b08      	ldr	r3, [pc, #32]	; (80050cc <GSMIMEI+0x2c>)
 80050ac:	4908      	ldr	r1, [pc, #32]	; (80050d0 <GSMIMEI+0x30>)
 80050ae:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <GSMIMEI+0x34>)
 80050b0:	9202      	str	r2, [sp, #8]
 80050b2:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <GSMIMEI+0x38>)
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	9201      	str	r2, [sp, #4]
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <GSMIMEI+0x3c>)
 80050ba:	9200      	str	r2, [sp, #0]
 80050bc:	2208      	movs	r2, #8
 80050be:	2000      	movs	r0, #0
 80050c0:	f7ff ff16 	bl	8004ef0 <GetGSMReply>
}
 80050c4:	b005      	add	sp, #20
 80050c6:	bd00      	pop	{pc}
 80050c8:	08012178 	.word	0x08012178
 80050cc:	08012148 	.word	0x08012148
 80050d0:	08012184 	.word	0x08012184
 80050d4:	0801248c 	.word	0x0801248c
 80050d8:	200000c8 	.word	0x200000c8
 80050dc:	0801218c 	.word	0x0801218c

080050e0 <StopTCPConnection>:
{
 80050e0:	b500      	push	{lr}
 80050e2:	b085      	sub	sp, #20
	gprsok = 0;
 80050e4:	4b10      	ldr	r3, [pc, #64]	; (8005128 <StopTCPConnection+0x48>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
		if (strlen(ip) > 4)
 80050ea:	4810      	ldr	r0, [pc, #64]	; (800512c <StopTCPConnection+0x4c>)
 80050ec:	f7fb f80c 	bl	8000108 <strlen>
 80050f0:	2804      	cmp	r0, #4
 80050f2:	d804      	bhi.n	80050fe <StopTCPConnection+0x1e>
	ServerConnected = 0;
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <StopTCPConnection+0x50>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	b005      	add	sp, #20
 80050fc:	bd00      	pop	{pc}
			SendGSMCode(" AT+QICLOSE=0");
 80050fe:	480d      	ldr	r0, [pc, #52]	; (8005134 <StopTCPConnection+0x54>)
 8005100:	f7fe fa9c 	bl	800363c <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
 8005104:	490c      	ldr	r1, [pc, #48]	; (8005138 <StopTCPConnection+0x58>)
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <StopTCPConnection+0x5c>)
 8005108:	9302      	str	r3, [sp, #8]
 800510a:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <StopTCPConnection+0x60>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <StopTCPConnection+0x64>)
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	000b      	movs	r3, r1
 8005116:	2200      	movs	r2, #0
 8005118:	2005      	movs	r0, #5
 800511a:	f7ff fee9 	bl	8004ef0 <GetGSMReply>
 800511e:	f7fa fff3 	bl	8000108 <strlen>
 8005122:	4b01      	ldr	r3, [pc, #4]	; (8005128 <StopTCPConnection+0x48>)
 8005124:	6018      	str	r0, [r3, #0]
 8005126:	e7e5      	b.n	80050f4 <StopTCPConnection+0x14>
 8005128:	200035a8 	.word	0x200035a8
 800512c:	200000d0 	.word	0x200000d0
 8005130:	200033cc 	.word	0x200033cc
 8005134:	0801242c 	.word	0x0801242c
 8005138:	0801251c 	.word	0x0801251c
 800513c:	0801243c 	.word	0x0801243c
 8005140:	200000c8 	.word	0x200000c8
 8005144:	08012448 	.word	0x08012448

08005148 <StartTCPConnection>:
{
 8005148:	b530      	push	{r4, r5, lr}
 800514a:	b085      	sub	sp, #20
	if (strlen(ip) > 4)
 800514c:	4824      	ldr	r0, [pc, #144]	; (80051e0 <StartTCPConnection+0x98>)
 800514e:	f7fa ffdb 	bl	8000108 <strlen>
 8005152:	2804      	cmp	r0, #4
 8005154:	d814      	bhi.n	8005180 <StartTCPConnection+0x38>
	HAL_Delay(1500);
 8005156:	4823      	ldr	r0, [pc, #140]	; (80051e4 <StartTCPConnection+0x9c>)
 8005158:	f001 fee2 	bl	8006f20 <HAL_Delay>
	if (gprsok)
 800515c:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <StartTCPConnection+0xa0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d137      	bne.n	80051d4 <StartTCPConnection+0x8c>
		ServerConnected = 1;
 8005164:	4a21      	ldr	r2, [pc, #132]	; (80051ec <StartTCPConnection+0xa4>)
 8005166:	6013      	str	r3, [r2, #0]
	HAL_Delay(1500);
 8005168:	481e      	ldr	r0, [pc, #120]	; (80051e4 <StartTCPConnection+0x9c>)
 800516a:	f001 fed9 	bl	8006f20 <HAL_Delay>
	SendTCPdata(data_LOGIN);
 800516e:	4820      	ldr	r0, [pc, #128]	; (80051f0 <StartTCPConnection+0xa8>)
 8005170:	f000 f854 	bl	800521c <SendTCPdata>
	HAL_Delay(500);
 8005174:	20fa      	movs	r0, #250	; 0xfa
 8005176:	0040      	lsls	r0, r0, #1
 8005178:	f001 fed2 	bl	8006f20 <HAL_Delay>
}
 800517c:	b005      	add	sp, #20
 800517e:	bd30      	pop	{r4, r5, pc}
		memset(GSMDataC, 0, 100);
 8005180:	4c1c      	ldr	r4, [pc, #112]	; (80051f4 <StartTCPConnection+0xac>)
 8005182:	0020      	movs	r0, r4
 8005184:	3014      	adds	r0, #20
 8005186:	2250      	movs	r2, #80	; 0x50
 8005188:	2100      	movs	r1, #0
 800518a:	f008 ff63 	bl	800e054 <memset>
		strcpy(GSMDataC, (char *)" AT+QIOPEN=0,\"TCP\",\"");
 800518e:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <StartTCPConnection+0xb0>)
 8005190:	0022      	movs	r2, r4
 8005192:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005194:	c223      	stmia	r2!, {r0, r1, r5}
 8005196:	cb03      	ldmia	r3!, {r0, r1}
 8005198:	c203      	stmia	r2!, {r0, r1}
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	7013      	strb	r3, [r2, #0]
		strcat(GSMDataC, ip);
 800519e:	4910      	ldr	r1, [pc, #64]	; (80051e0 <StartTCPConnection+0x98>)
 80051a0:	0020      	movs	r0, r4
 80051a2:	f008 ff5f 	bl	800e064 <strcat>
		gprsok = 0;
 80051a6:	4d10      	ldr	r5, [pc, #64]	; (80051e8 <StartTCPConnection+0xa0>)
 80051a8:	2300      	movs	r3, #0
 80051aa:	602b      	str	r3, [r5, #0]
			SendGSMCode(GSMDataC);
 80051ac:	0020      	movs	r0, r4
 80051ae:	f7fe fa45 	bl	800363c <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN 0 TCP Connection open ", gpsto_net, "CONNECT OK"));
 80051b2:	4912      	ldr	r1, [pc, #72]	; (80051fc <StartTCPConnection+0xb4>)
 80051b4:	4b12      	ldr	r3, [pc, #72]	; (8005200 <StartTCPConnection+0xb8>)
 80051b6:	9302      	str	r3, [sp, #8]
 80051b8:	4b12      	ldr	r3, [pc, #72]	; (8005204 <StartTCPConnection+0xbc>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	9301      	str	r3, [sp, #4]
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <StartTCPConnection+0xc0>)
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	000b      	movs	r3, r1
 80051c4:	2200      	movs	r2, #0
 80051c6:	2000      	movs	r0, #0
 80051c8:	f7ff fe92 	bl	8004ef0 <GetGSMReply>
 80051cc:	f7fa ff9c 	bl	8000108 <strlen>
 80051d0:	6028      	str	r0, [r5, #0]
		while ((ck > 0) && (gprsok < 1))
 80051d2:	e7c0      	b.n	8005156 <StartTCPConnection+0xe>
		Debug_Tx("connected ip2 ");
 80051d4:	480d      	ldr	r0, [pc, #52]	; (800520c <StartTCPConnection+0xc4>)
 80051d6:	f7fe f8a3 	bl	8003320 <Debug_Tx>
		ServerConnected = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	e7c2      	b.n	8005164 <StartTCPConnection+0x1c>
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	200000d0 	.word	0x200000d0
 80051e4:	000005dc 	.word	0x000005dc
 80051e8:	200035a8 	.word	0x200035a8
 80051ec:	200033cc 	.word	0x200033cc
 80051f0:	2000352c 	.word	0x2000352c
 80051f4:	20000b2c 	.word	0x20000b2c
 80051f8:	0801246c 	.word	0x0801246c
 80051fc:	0801251c 	.word	0x0801251c
 8005200:	08012484 	.word	0x08012484
 8005204:	200000cc 	.word	0x200000cc
 8005208:	08012490 	.word	0x08012490
 800520c:	080124b8 	.word	0x080124b8

08005210 <ResetTCP>:
	SendGSMCode(" AT+QIMUX=1");
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
}

void ResetTCP()
{
 8005210:	b510      	push	{r4, lr}
	//EndTransfer();
	StopTCPConnection();
 8005212:	f7ff ff65 	bl	80050e0 <StopTCPConnection>
	StartTCPConnection();
 8005216:	f7ff ff97 	bl	8005148 <StartTCPConnection>
}
 800521a:	bd10      	pop	{r4, pc}

0800521c <SendTCPdata>:
{
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	0004      	movs	r4, r0
	if (gprsok > 0)
 8005220:	4b22      	ldr	r3, [pc, #136]	; (80052ac <SendTCPdata+0x90>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	dd3a      	ble.n	800529e <SendTCPdata+0x82>
		if (strlen(ip) > 4)
 8005228:	4821      	ldr	r0, [pc, #132]	; (80052b0 <SendTCPdata+0x94>)
 800522a:	f7fa ff6d 	bl	8000108 <strlen>
 800522e:	2804      	cmp	r0, #4
 8005230:	d800      	bhi.n	8005234 <SendTCPdata+0x18>
}
 8005232:	bd70      	pop	{r4, r5, r6, pc}
			gprsok = 0;
 8005234:	4d1d      	ldr	r5, [pc, #116]	; (80052ac <SendTCPdata+0x90>)
 8005236:	2300      	movs	r3, #0
 8005238:	602b      	str	r3, [r5, #0]
				SendGSMCode(" AT+QISEND=0");
 800523a:	481e      	ldr	r0, [pc, #120]	; (80052b4 <SendTCPdata+0x98>)
 800523c:	f7fe f9fe 	bl	800363c <SendGSMCode>
				gprsok = waitForResponse(">",1000);
 8005240:	21fa      	movs	r1, #250	; 0xfa
 8005242:	481d      	ldr	r0, [pc, #116]	; (80052b8 <SendTCPdata+0x9c>)
 8005244:	0089      	lsls	r1, r1, #2
 8005246:	f7fe fae5 	bl	8003814 <waitForResponse>
 800524a:	6028      	str	r0, [r5, #0]
			if (gprsok > 0)
 800524c:	2800      	cmp	r0, #0
 800524e:	dd1a      	ble.n	8005286 <SendTCPdata+0x6a>
				gprsok = 0;
 8005250:	4d16      	ldr	r5, [pc, #88]	; (80052ac <SendTCPdata+0x90>)
 8005252:	2300      	movs	r3, #0
 8005254:	602b      	str	r3, [r5, #0]
					SendGSMData(data); // Debug_Tx(GSMData);
 8005256:	0020      	movs	r0, r4
 8005258:	f7fe fa7c 	bl	8003754 <SendGSMData>
					gprsok = waitForResponse("SEND OK",1000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 800525c:	21fa      	movs	r1, #250	; 0xfa
 800525e:	4817      	ldr	r0, [pc, #92]	; (80052bc <SendTCPdata+0xa0>)
 8005260:	0089      	lsls	r1, r1, #2
 8005262:	f7fe fad7 	bl	8003814 <waitForResponse>
 8005266:	6028      	str	r0, [r5, #0]
				if (gprsok<1){//SendGSMData("    ");
 8005268:	2800      	cmp	r0, #0
 800526a:	dd06      	ble.n	800527a <SendTCPdata+0x5e>
				else{Debug_Tx("DATASENT");Debug_Tx(data);}
 800526c:	4814      	ldr	r0, [pc, #80]	; (80052c0 <SendTCPdata+0xa4>)
 800526e:	f7fe f857 	bl	8003320 <Debug_Tx>
 8005272:	0020      	movs	r0, r4
 8005274:	f7fe f854 	bl	8003320 <Debug_Tx>
 8005278:	e7db      	b.n	8005232 <SendTCPdata+0x16>
				Debug_Tx("UNABLE TO11 SEND DATA STOPED CONNECTion");EndTransfer();
 800527a:	4812      	ldr	r0, [pc, #72]	; (80052c4 <SendTCPdata+0xa8>)
 800527c:	f7fe f850 	bl	8003320 <Debug_Tx>
 8005280:	f7fe faa0 	bl	80037c4 <EndTransfer>
 8005284:	e7d5      	b.n	8005232 <SendTCPdata+0x16>
				SendGSMData("    ");
 8005286:	4810      	ldr	r0, [pc, #64]	; (80052c8 <SendTCPdata+0xac>)
 8005288:	f7fe fa64 	bl	8003754 <SendGSMData>
				Debug_Tx("UNABLE TO SEND11 DATA STOPED CONNECTion");
 800528c:	480f      	ldr	r0, [pc, #60]	; (80052cc <SendTCPdata+0xb0>)
 800528e:	f7fe f847 	bl	8003320 <Debug_Tx>
				Debug_Tx(data);
 8005292:	0020      	movs	r0, r4
 8005294:	f7fe f844 	bl	8003320 <Debug_Tx>
				EndTransfer();
 8005298:	f7fe fa94 	bl	80037c4 <EndTransfer>
 800529c:	e7c9      	b.n	8005232 <SendTCPdata+0x16>
		Debug_Tx("DISCONNECTED FROM SERVER .resetting connection ");
 800529e:	480c      	ldr	r0, [pc, #48]	; (80052d0 <SendTCPdata+0xb4>)
 80052a0:	f7fe f83e 	bl	8003320 <Debug_Tx>
		ResetTCP();
 80052a4:	f7ff ffb4 	bl	8005210 <ResetTCP>
}
 80052a8:	e7c3      	b.n	8005232 <SendTCPdata+0x16>
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	200035a8 	.word	0x200035a8
 80052b0:	200000d0 	.word	0x200000d0
 80052b4:	080124c8 	.word	0x080124c8
 80052b8:	080124d8 	.word	0x080124d8
 80052bc:	080124dc 	.word	0x080124dc
 80052c0:	0801250c 	.word	0x0801250c
 80052c4:	080124e4 	.word	0x080124e4
 80052c8:	08012518 	.word	0x08012518
 80052cc:	08012520 	.word	0x08012520
 80052d0:	08012548 	.word	0x08012548

080052d4 <ProcessTCPAll>:

void ProcessTCPAll(char *data)
{
 80052d4:	b510      	push	{r4, lr}
 80052d6:	0004      	movs	r4, r0
	int tcpSENDDATA = tic();
 80052d8:	f7ff f8e2 	bl	80044a0 <tic>

	if (ServerConnected > 0)
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <ProcessTCPAll+0x48>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dc0a      	bgt.n	80052fa <ProcessTCPAll+0x26>
		SendTCPdata(data);
		Debug_Tx("dat send done  ");
	}
	else
	{
		if (debug == 1)
 80052e4:	4b0e      	ldr	r3, [pc, #56]	; (8005320 <ProcessTCPAll+0x4c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d013      	beq.n	8005314 <ProcessTCPAll+0x40>
		{
			Debug_Tx("Error: ServerSession disconnected ");
		}

		Debug_Tx("error insending data to ip ");
 80052ec:	480d      	ldr	r0, [pc, #52]	; (8005324 <ProcessTCPAll+0x50>)
 80052ee:	f7fe f817 	bl	8003320 <Debug_Tx>
		Debug_Tx(ip2);
 80052f2:	480d      	ldr	r0, [pc, #52]	; (8005328 <ProcessTCPAll+0x54>)
 80052f4:	f7fe f814 	bl	8003320 <Debug_Tx>
		//ResetTCP();
	}

	toc(tcpSENDDATA, "_________________________TCP SEND DATA");
}
 80052f8:	bd10      	pop	{r4, pc}
		Debug_Tx("sending data to ip ");
 80052fa:	480c      	ldr	r0, [pc, #48]	; (800532c <ProcessTCPAll+0x58>)
 80052fc:	f7fe f810 	bl	8003320 <Debug_Tx>
		Debug_Tx(ip2);
 8005300:	4809      	ldr	r0, [pc, #36]	; (8005328 <ProcessTCPAll+0x54>)
 8005302:	f7fe f80d 	bl	8003320 <Debug_Tx>
		SendTCPdata(data);
 8005306:	0020      	movs	r0, r4
 8005308:	f7ff ff88 	bl	800521c <SendTCPdata>
		Debug_Tx("dat send done  ");
 800530c:	4808      	ldr	r0, [pc, #32]	; (8005330 <ProcessTCPAll+0x5c>)
 800530e:	f7fe f807 	bl	8003320 <Debug_Tx>
 8005312:	e7f1      	b.n	80052f8 <ProcessTCPAll+0x24>
			Debug_Tx("Error: ServerSession disconnected ");
 8005314:	4807      	ldr	r0, [pc, #28]	; (8005334 <ProcessTCPAll+0x60>)
 8005316:	f7fe f803 	bl	8003320 <Debug_Tx>
 800531a:	e7e7      	b.n	80052ec <ProcessTCPAll+0x18>
 800531c:	200033cc 	.word	0x200033cc
 8005320:	200000c4 	.word	0x200000c4
 8005324:	080125ac 	.word	0x080125ac
 8005328:	20003ec8 	.word	0x20003ec8
 800532c:	080125b4 	.word	0x080125b4
 8005330:	08012578 	.word	0x08012578
 8005334:	08012588 	.word	0x08012588

08005338 <SetTCPMux>:
{
 8005338:	b500      	push	{lr}
 800533a:	b085      	sub	sp, #20
	SendGSMCode(" AT+QIMUX=1");
 800533c:	4808      	ldr	r0, [pc, #32]	; (8005360 <SetTCPMux+0x28>)
 800533e:	f7fe f97d 	bl	800363c <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8005342:	4908      	ldr	r1, [pc, #32]	; (8005364 <SetTCPMux+0x2c>)
 8005344:	4b08      	ldr	r3, [pc, #32]	; (8005368 <SetTCPMux+0x30>)
 8005346:	9302      	str	r3, [sp, #8]
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <SetTCPMux+0x34>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	4b08      	ldr	r3, [pc, #32]	; (8005370 <SetTCPMux+0x38>)
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	000b      	movs	r3, r1
 8005354:	2200      	movs	r2, #0
 8005356:	2000      	movs	r0, #0
 8005358:	f7ff fdca 	bl	8004ef0 <GetGSMReply>
}
 800535c:	b005      	add	sp, #20
 800535e:	bd00      	pop	{pc}
 8005360:	080125c8 	.word	0x080125c8
 8005364:	0801251c 	.word	0x0801251c
 8005368:	0801248c 	.word	0x0801248c
 800536c:	200000c8 	.word	0x200000c8
 8005370:	080125d4 	.word	0x080125d4

08005374 <SetupGPRS>:
	}
	return smsok;
}

void SetupGPRS(char *apn)
{
 8005374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005376:	46ce      	mov	lr, r9
 8005378:	4647      	mov	r7, r8
 800537a:	b580      	push	{r7, lr}
 800537c:	b085      	sub	sp, #20
 800537e:	4680      	mov	r8, r0

	int ck = 5;

	gprsok = 0;
 8005380:	4b2e      	ldr	r3, [pc, #184]	; (800543c <SetupGPRS+0xc8>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	2705      	movs	r7, #5
	{
		HAL_Delay(2000);
		ck = ck - 1;
		// SendGSMCode(" AT+CGACT=0,1");
		// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",500));
		memset(GSMDataC, 0, 100);
 8005388:	4c2d      	ldr	r4, [pc, #180]	; (8005440 <SetupGPRS+0xcc>)
 800538a:	0026      	movs	r6, r4
 800538c:	360c      	adds	r6, #12
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 800538e:	4b2d      	ldr	r3, [pc, #180]	; (8005444 <SetupGPRS+0xd0>)
 8005390:	4699      	mov	r9, r3
		HAL_Delay(2000);
 8005392:	20fa      	movs	r0, #250	; 0xfa
 8005394:	00c0      	lsls	r0, r0, #3
 8005396:	f001 fdc3 	bl	8006f20 <HAL_Delay>
		memset(GSMDataC, 0, 100);
 800539a:	2258      	movs	r2, #88	; 0x58
 800539c:	2100      	movs	r1, #0
 800539e:	0030      	movs	r0, r6
 80053a0:	f008 fe58 	bl	800e054 <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 80053a4:	0022      	movs	r2, r4
 80053a6:	464b      	mov	r3, r9
 80053a8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80053aa:	c223      	stmia	r2!, {r0, r1, r5}
 80053ac:	881a      	ldrh	r2, [r3, #0]
 80053ae:	8032      	strh	r2, [r6, #0]
 80053b0:	789b      	ldrb	r3, [r3, #2]
 80053b2:	70b3      	strb	r3, [r6, #2]
		strcat(GSMDataC, apn);
 80053b4:	4641      	mov	r1, r8
 80053b6:	0020      	movs	r0, r4
 80053b8:	f008 fe54 	bl	800e064 <strcat>
		strcat(GSMDataC, "\",\"\",\"\",0");
 80053bc:	0020      	movs	r0, r4
 80053be:	f7fa fea3 	bl	8000108 <strlen>
 80053c2:	1820      	adds	r0, r4, r0
 80053c4:	4920      	ldr	r1, [pc, #128]	; (8005448 <SetupGPRS+0xd4>)
 80053c6:	220a      	movs	r2, #10
 80053c8:	f009 f80c 	bl	800e3e4 <memcpy>
		SendGSMCode(GSMDataC);
 80053cc:	0020      	movs	r0, r4
 80053ce:	f7fe f935 	bl	800363c <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 80053d2:	491e      	ldr	r1, [pc, #120]	; (800544c <SetupGPRS+0xd8>)
 80053d4:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <SetupGPRS+0xdc>)
 80053d6:	9302      	str	r3, [sp, #8]
 80053d8:	4b1e      	ldr	r3, [pc, #120]	; (8005454 <SetupGPRS+0xe0>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <SetupGPRS+0xe4>)
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	000b      	movs	r3, r1
 80053e4:	2200      	movs	r2, #0
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7ff fd82 	bl	8004ef0 <GetGSMReply>
 80053ec:	f7fa fe8c 	bl	8000108 <strlen>
 80053f0:	4b12      	ldr	r3, [pc, #72]	; (800543c <SetupGPRS+0xc8>)
 80053f2:	6018      	str	r0, [r3, #0]

		// gprsok=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CGACT=0,1 GPRS Setup",10));
		if (gprsok > 0)
 80053f4:	2800      	cmp	r0, #0
 80053f6:	dc07      	bgt.n	8005408 <SetupGPRS+0x94>
	while ((ck > 0) && (gprsok < 1))
 80053f8:	3f01      	subs	r7, #1
 80053fa:	2f00      	cmp	r7, #0
 80053fc:	d1c9      	bne.n	8005392 <SetupGPRS+0x1e>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 80053fe:	b005      	add	sp, #20
 8005400:	bcc0      	pop	{r6, r7}
 8005402:	46b9      	mov	r9, r7
 8005404:	46b0      	mov	r8, r6
 8005406:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SendGSMCode(" AT+QIMODE=0");
 8005408:	4814      	ldr	r0, [pc, #80]	; (800545c <SetupGPRS+0xe8>)
 800540a:	f7fe f917 	bl	800363c <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 800540e:	490f      	ldr	r1, [pc, #60]	; (800544c <SetupGPRS+0xd8>)
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <SetupGPRS+0xdc>)
 8005412:	9302      	str	r3, [sp, #8]
 8005414:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <SetupGPRS+0xe0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	9301      	str	r3, [sp, #4]
 800541a:	4b11      	ldr	r3, [pc, #68]	; (8005460 <SetupGPRS+0xec>)
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	000b      	movs	r3, r1
 8005420:	2200      	movs	r2, #0
 8005422:	2000      	movs	r0, #0
 8005424:	f7ff fd64 	bl	8004ef0 <GetGSMReply>
 8005428:	f7fa fe6e 	bl	8000108 <strlen>
 800542c:	4b03      	ldr	r3, [pc, #12]	; (800543c <SetupGPRS+0xc8>)
 800542e:	6018      	str	r0, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 8005430:	3f01      	subs	r7, #1
 8005432:	2f00      	cmp	r7, #0
 8005434:	d0e3      	beq.n	80053fe <SetupGPRS+0x8a>
 8005436:	2800      	cmp	r0, #0
 8005438:	ddab      	ble.n	8005392 <SetupGPRS+0x1e>
 800543a:	e7e0      	b.n	80053fe <SetupGPRS+0x8a>
 800543c:	200035a8 	.word	0x200035a8
 8005440:	20000b2c 	.word	0x20000b2c
 8005444:	080125f4 	.word	0x080125f4
 8005448:	08012604 	.word	0x08012604
 800544c:	0801251c 	.word	0x0801251c
 8005450:	0801248c 	.word	0x0801248c
 8005454:	200000c8 	.word	0x200000c8
 8005458:	08012610 	.word	0x08012610
 800545c:	08012630 	.word	0x08012630
 8005460:	08012640 	.word	0x08012640

08005464 <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 8005464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005466:	46c6      	mov	lr, r8
 8005468:	b500      	push	{lr}
 800546a:	b084      	sub	sp, #16
	// RestartGSM();
	int ook;
	Debug_Tx("______________Begin_____________________________");
 800546c:	486a      	ldr	r0, [pc, #424]	; (8005618 <ShiftGSMProfile+0x1b4>)
 800546e:	f7fd ff57 	bl	8003320 <Debug_Tx>

	// Debug_Tx("______________print operator_____________________________");
	// Debug_Tx(GSMSimOperator());

	// Debug_Tx("______________setup stk_____________________________");
	int ck = 10;
 8005472:	240a      	movs	r4, #10
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		HAL_Delay(3000);
		ck = ck - 1;
		SendGSMCode(" AT+QSTK=1");
 8005474:	4f69      	ldr	r7, [pc, #420]	; (800561c <ShiftGSMProfile+0x1b8>)
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8005476:	4d6a      	ldr	r5, [pc, #424]	; (8005620 <ShiftGSMProfile+0x1bc>)
 8005478:	4e6a      	ldr	r6, [pc, #424]	; (8005624 <ShiftGSMProfile+0x1c0>)
		HAL_Delay(3000);
 800547a:	486b      	ldr	r0, [pc, #428]	; (8005628 <ShiftGSMProfile+0x1c4>)
 800547c:	f001 fd50 	bl	8006f20 <HAL_Delay>
		ck = ck - 1;
 8005480:	3c01      	subs	r4, #1
		SendGSMCode(" AT+QSTK=1");
 8005482:	0038      	movs	r0, r7
 8005484:	f7fe f8da 	bl	800363c <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8005488:	9602      	str	r6, [sp, #8]
 800548a:	4b68      	ldr	r3, [pc, #416]	; (800562c <ShiftGSMProfile+0x1c8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	4b67      	ldr	r3, [pc, #412]	; (8005630 <ShiftGSMProfile+0x1cc>)
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	002b      	movs	r3, r5
 8005496:	2200      	movs	r2, #0
 8005498:	0029      	movs	r1, r5
 800549a:	2000      	movs	r0, #0
 800549c:	f7ff fd28 	bl	8004ef0 <GetGSMReply>
 80054a0:	f7fa fe32 	bl	8000108 <strlen>
		if (ook > 0)
 80054a4:	2800      	cmp	r0, #0
 80054a6:	dc2f      	bgt.n	8005508 <ShiftGSMProfile+0xa4>
	while ((ck > 0) && (ook < 1))
 80054a8:	2c00      	cmp	r4, #0
 80054aa:	dce6      	bgt.n	800547a <ShiftGSMProfile+0x16>
				}
			}
		}
	}

	Debug_Tx("_____________Restart_____________________________");
 80054ac:	4861      	ldr	r0, [pc, #388]	; (8005634 <ShiftGSMProfile+0x1d0>)
 80054ae:	f7fd ff37 	bl	8003320 <Debug_Tx>
	ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+QPOWD=1");
 80054b2:	4861      	ldr	r0, [pc, #388]	; (8005638 <ShiftGSMProfile+0x1d4>)
 80054b4:	f7fe f8c2 	bl	800363c <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 80054b8:	4959      	ldr	r1, [pc, #356]	; (8005620 <ShiftGSMProfile+0x1bc>)
 80054ba:	4b60      	ldr	r3, [pc, #384]	; (800563c <ShiftGSMProfile+0x1d8>)
 80054bc:	9302      	str	r3, [sp, #8]
 80054be:	4b60      	ldr	r3, [pc, #384]	; (8005640 <ShiftGSMProfile+0x1dc>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	4b5f      	ldr	r3, [pc, #380]	; (8005644 <ShiftGSMProfile+0x1e0>)
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	000b      	movs	r3, r1
 80054ca:	2200      	movs	r2, #0
 80054cc:	200f      	movs	r0, #15
 80054ce:	f7ff fd0f 	bl	8004ef0 <GetGSMReply>
 80054d2:	f7fa fe19 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 80054d6:	2800      	cmp	r0, #0
 80054d8:	dc0f      	bgt.n	80054fa <ShiftGSMProfile+0x96>
		SendGSMCode(" AT+QPOWD=1");
 80054da:	4857      	ldr	r0, [pc, #348]	; (8005638 <ShiftGSMProfile+0x1d4>)
 80054dc:	f7fe f8ae 	bl	800363c <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 80054e0:	494f      	ldr	r1, [pc, #316]	; (8005620 <ShiftGSMProfile+0x1bc>)
 80054e2:	4b56      	ldr	r3, [pc, #344]	; (800563c <ShiftGSMProfile+0x1d8>)
 80054e4:	9302      	str	r3, [sp, #8]
 80054e6:	4b56      	ldr	r3, [pc, #344]	; (8005640 <ShiftGSMProfile+0x1dc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	4b55      	ldr	r3, [pc, #340]	; (8005644 <ShiftGSMProfile+0x1e0>)
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	000b      	movs	r3, r1
 80054f2:	2200      	movs	r2, #0
 80054f4:	200f      	movs	r0, #15
 80054f6:	f7ff fcfb 	bl	8004ef0 <GetGSMReply>
	}
	HAL_Delay(6000);
 80054fa:	4853      	ldr	r0, [pc, #332]	; (8005648 <ShiftGSMProfile+0x1e4>)
 80054fc:	f001 fd10 	bl	8006f20 <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 8005500:	b004      	add	sp, #16
 8005502:	bc80      	pop	{r7}
 8005504:	46b8      	mov	r8, r7
 8005506:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Debug_Tx("______________Setup Menu_____________________________");
 8005508:	4850      	ldr	r0, [pc, #320]	; (800564c <ShiftGSMProfile+0x1e8>)
 800550a:	f7fd ff09 	bl	8003320 <Debug_Tx>
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 800550e:	4850      	ldr	r0, [pc, #320]	; (8005650 <ShiftGSMProfile+0x1ec>)
 8005510:	f7fe f894 	bl	800363c <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", gpsto_net, "OK"));
 8005514:	4942      	ldr	r1, [pc, #264]	; (8005620 <ShiftGSMProfile+0x1bc>)
 8005516:	4b43      	ldr	r3, [pc, #268]	; (8005624 <ShiftGSMProfile+0x1c0>)
 8005518:	9302      	str	r3, [sp, #8]
 800551a:	4b44      	ldr	r3, [pc, #272]	; (800562c <ShiftGSMProfile+0x1c8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	4b4c      	ldr	r3, [pc, #304]	; (8005654 <ShiftGSMProfile+0x1f0>)
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	000b      	movs	r3, r1
 8005526:	2200      	movs	r2, #0
 8005528:	2000      	movs	r0, #0
 800552a:	f7ff fce1 	bl	8004ef0 <GetGSMReply>
 800552e:	f7fa fdeb 	bl	8000108 <strlen>
 8005532:	4680      	mov	r8, r0
			HAL_Delay(3000);
 8005534:	483c      	ldr	r0, [pc, #240]	; (8005628 <ShiftGSMProfile+0x1c4>)
 8005536:	f001 fcf3 	bl	8006f20 <HAL_Delay>
			if (ook > 0)
 800553a:	4643      	mov	r3, r8
 800553c:	2b00      	cmp	r3, #0
 800553e:	ddb3      	ble.n	80054a8 <ShiftGSMProfile+0x44>
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
 8005540:	4845      	ldr	r0, [pc, #276]	; (8005658 <ShiftGSMProfile+0x1f4>)
 8005542:	f7fd feed 	bl	8003320 <Debug_Tx>
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 8005546:	4845      	ldr	r0, [pc, #276]	; (800565c <ShiftGSMProfile+0x1f8>)
 8005548:	f7fe f878 	bl	800363c <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 800554c:	4934      	ldr	r1, [pc, #208]	; (8005620 <ShiftGSMProfile+0x1bc>)
 800554e:	4b35      	ldr	r3, [pc, #212]	; (8005624 <ShiftGSMProfile+0x1c0>)
 8005550:	9302      	str	r3, [sp, #8]
 8005552:	4b36      	ldr	r3, [pc, #216]	; (800562c <ShiftGSMProfile+0x1c8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	4b41      	ldr	r3, [pc, #260]	; (8005660 <ShiftGSMProfile+0x1fc>)
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	000b      	movs	r3, r1
 800555e:	2200      	movs	r2, #0
 8005560:	2000      	movs	r0, #0
 8005562:	f7ff fcc5 	bl	8004ef0 <GetGSMReply>
 8005566:	f7fa fdcf 	bl	8000108 <strlen>
				if (ook > 0)
 800556a:	2800      	cmp	r0, #0
 800556c:	dd9c      	ble.n	80054a8 <ShiftGSMProfile+0x44>
					if (GSMProf == 0)
 800556e:	4b3d      	ldr	r3, [pc, #244]	; (8005664 <ShiftGSMProfile+0x200>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01d      	beq.n	80055b2 <ShiftGSMProfile+0x14e>
					else if (GSMProf == 1)
 8005576:	2b01      	cmp	r3, #1
 8005578:	d037      	beq.n	80055ea <ShiftGSMProfile+0x186>
						Debug_Tx("_____________Refresh_____________________________");
 800557a:	483b      	ldr	r0, [pc, #236]	; (8005668 <ShiftGSMProfile+0x204>)
 800557c:	f7fd fed0 	bl	8003320 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 8005580:	483a      	ldr	r0, [pc, #232]	; (800566c <ShiftGSMProfile+0x208>)
 8005582:	f7fe f85b 	bl	800363c <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh", gpsto_net, "OK"));
 8005586:	4926      	ldr	r1, [pc, #152]	; (8005620 <ShiftGSMProfile+0x1bc>)
 8005588:	4b26      	ldr	r3, [pc, #152]	; (8005624 <ShiftGSMProfile+0x1c0>)
 800558a:	9302      	str	r3, [sp, #8]
 800558c:	4b27      	ldr	r3, [pc, #156]	; (800562c <ShiftGSMProfile+0x1c8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	4b37      	ldr	r3, [pc, #220]	; (8005670 <ShiftGSMProfile+0x20c>)
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	000b      	movs	r3, r1
 8005598:	2200      	movs	r2, #0
 800559a:	2000      	movs	r0, #0
 800559c:	f7ff fca8 	bl	8004ef0 <GetGSMReply>
 80055a0:	f7fa fdb2 	bl	8000108 <strlen>
	while ((ck > 0) && (ook < 1))
 80055a4:	2c00      	cmp	r4, #0
 80055a6:	dc00      	bgt.n	80055aa <ShiftGSMProfile+0x146>
 80055a8:	e780      	b.n	80054ac <ShiftGSMProfile+0x48>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	dd00      	ble.n	80055b0 <ShiftGSMProfile+0x14c>
 80055ae:	e77d      	b.n	80054ac <ShiftGSMProfile+0x48>
 80055b0:	e763      	b.n	800547a <ShiftGSMProfile+0x16>
						Debug_Tx("_____________BSNL profile Selection_____________________________");
 80055b2:	4830      	ldr	r0, [pc, #192]	; (8005674 <ShiftGSMProfile+0x210>)
 80055b4:	f7fd feb4 	bl	8003320 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 80055b8:	482f      	ldr	r0, [pc, #188]	; (8005678 <ShiftGSMProfile+0x214>)
 80055ba:	f7fe f83f 	bl	800363c <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
 80055be:	4918      	ldr	r1, [pc, #96]	; (8005620 <ShiftGSMProfile+0x1bc>)
 80055c0:	4b18      	ldr	r3, [pc, #96]	; (8005624 <ShiftGSMProfile+0x1c0>)
 80055c2:	9302      	str	r3, [sp, #8]
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <ShiftGSMProfile+0x1c8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	4b2c      	ldr	r3, [pc, #176]	; (800567c <ShiftGSMProfile+0x218>)
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	000b      	movs	r3, r1
 80055d0:	2200      	movs	r2, #0
 80055d2:	2000      	movs	r0, #0
 80055d4:	f7ff fc8c 	bl	8004ef0 <GetGSMReply>
 80055d8:	f7fa fd96 	bl	8000108 <strlen>
						GSMProf = 1;
 80055dc:	2201      	movs	r2, #1
 80055de:	4b21      	ldr	r3, [pc, #132]	; (8005664 <ShiftGSMProfile+0x200>)
 80055e0:	601a      	str	r2, [r3, #0]
					if (ook > 0)
 80055e2:	2800      	cmp	r0, #0
 80055e4:	dc00      	bgt.n	80055e8 <ShiftGSMProfile+0x184>
 80055e6:	e75f      	b.n	80054a8 <ShiftGSMProfile+0x44>
 80055e8:	e7c7      	b.n	800557a <ShiftGSMProfile+0x116>
						Debug_Tx("_____________Airtel profile Selection_____________________________");
 80055ea:	4825      	ldr	r0, [pc, #148]	; (8005680 <ShiftGSMProfile+0x21c>)
 80055ec:	f7fd fe98 	bl	8003320 <Debug_Tx>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 80055f0:	4824      	ldr	r0, [pc, #144]	; (8005684 <ShiftGSMProfile+0x220>)
 80055f2:	f7fe f823 	bl	800363c <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", gpsto_net, "OK"));
 80055f6:	490a      	ldr	r1, [pc, #40]	; (8005620 <ShiftGSMProfile+0x1bc>)
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <ShiftGSMProfile+0x1c0>)
 80055fa:	9302      	str	r3, [sp, #8]
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <ShiftGSMProfile+0x1c8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	4b21      	ldr	r3, [pc, #132]	; (8005688 <ShiftGSMProfile+0x224>)
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	000b      	movs	r3, r1
 8005608:	2200      	movs	r2, #0
 800560a:	2000      	movs	r0, #0
 800560c:	f7ff fc70 	bl	8004ef0 <GetGSMReply>
 8005610:	f7fa fd7a 	bl	8000108 <strlen>
 8005614:	2200      	movs	r2, #0
 8005616:	e7e2      	b.n	80055de <ShiftGSMProfile+0x17a>
 8005618:	08012664 	.word	0x08012664
 800561c:	08012698 	.word	0x08012698
 8005620:	0801251c 	.word	0x0801251c
 8005624:	0801248c 	.word	0x0801248c
 8005628:	00000bb8 	.word	0x00000bb8
 800562c:	200000cc 	.word	0x200000cc
 8005630:	080126a4 	.word	0x080126a4
 8005634:	0801295c 	.word	0x0801295c
 8005638:	08012990 	.word	0x08012990
 800563c:	0801299c 	.word	0x0801299c
 8005640:	200000c8 	.word	0x200000c8
 8005644:	080129b0 	.word	0x080129b0
 8005648:	00001770 	.word	0x00001770
 800564c:	080126c0 	.word	0x080126c0
 8005650:	080126f8 	.word	0x080126f8
 8005654:	08012720 	.word	0x08012720
 8005658:	08012740 	.word	0x08012740
 800565c:	08012780 	.word	0x08012780
 8005660:	080127a0 	.word	0x080127a0
 8005664:	2000009c 	.word	0x2000009c
 8005668:	080128e4 	.word	0x080128e4
 800566c:	08012918 	.word	0x08012918
 8005670:	08012940 	.word	0x08012940
 8005674:	080127c4 	.word	0x080127c4
 8005678:	08012808 	.word	0x08012808
 800567c:	08012834 	.word	0x08012834
 8005680:	08012854 	.word	0x08012854
 8005684:	08012898 	.word	0x08012898
 8005688:	080128c4 	.word	0x080128c4

0800568c <InitGSM>:

void InitGSM()
{
 800568c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800568e:	46c6      	mov	lr, r8
 8005690:	b500      	push	{lr}
 8005692:	b084      	sub	sp, #16
	// RestartGSM();
	HAL_Delay(5000);
 8005694:	48a9      	ldr	r0, [pc, #676]	; (800593c <InitGSM+0x2b0>)
 8005696:	f001 fc43 	bl	8006f20 <HAL_Delay>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 800569a:	48a9      	ldr	r0, [pc, #676]	; (8005940 <InitGSM+0x2b4>)
 800569c:	f7fd ffce 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 80056a0:	49a8      	ldr	r1, [pc, #672]	; (8005944 <InitGSM+0x2b8>)
 80056a2:	4ba9      	ldr	r3, [pc, #676]	; (8005948 <InitGSM+0x2bc>)
 80056a4:	9302      	str	r3, [sp, #8]
 80056a6:	4ba9      	ldr	r3, [pc, #676]	; (800594c <InitGSM+0x2c0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	4ba8      	ldr	r3, [pc, #672]	; (8005950 <InitGSM+0x2c4>)
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	000b      	movs	r3, r1
 80056b2:	2200      	movs	r2, #0
 80056b4:	200f      	movs	r0, #15
 80056b6:	f7ff fc1b 	bl	8004ef0 <GetGSMReply>
 80056ba:	f7fa fd25 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 80056be:	2800      	cmp	r0, #0
 80056c0:	dc0f      	bgt.n	80056e2 <InitGSM+0x56>
		SendGSMCode(" ATE0");
 80056c2:	489f      	ldr	r0, [pc, #636]	; (8005940 <InitGSM+0x2b4>)
 80056c4:	f7fd ffba 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 80056c8:	499e      	ldr	r1, [pc, #632]	; (8005944 <InitGSM+0x2b8>)
 80056ca:	4b9f      	ldr	r3, [pc, #636]	; (8005948 <InitGSM+0x2bc>)
 80056cc:	9302      	str	r3, [sp, #8]
 80056ce:	4b9f      	ldr	r3, [pc, #636]	; (800594c <InitGSM+0x2c0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	4b9e      	ldr	r3, [pc, #632]	; (8005950 <InitGSM+0x2c4>)
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	000b      	movs	r3, r1
 80056da:	2200      	movs	r2, #0
 80056dc:	200f      	movs	r0, #15
 80056de:	f7ff fc07 	bl	8004ef0 <GetGSMReply>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 80056e2:	489c      	ldr	r0, [pc, #624]	; (8005954 <InitGSM+0x2c8>)
 80056e4:	f7fd ffaa 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 80056e8:	4996      	ldr	r1, [pc, #600]	; (8005944 <InitGSM+0x2b8>)
 80056ea:	4b97      	ldr	r3, [pc, #604]	; (8005948 <InitGSM+0x2bc>)
 80056ec:	9302      	str	r3, [sp, #8]
 80056ee:	4b97      	ldr	r3, [pc, #604]	; (800594c <InitGSM+0x2c0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	4b98      	ldr	r3, [pc, #608]	; (8005958 <InitGSM+0x2cc>)
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	000b      	movs	r3, r1
 80056fa:	2200      	movs	r2, #0
 80056fc:	200f      	movs	r0, #15
 80056fe:	f7ff fbf7 	bl	8004ef0 <GetGSMReply>
 8005702:	f7fa fd01 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 8005706:	2800      	cmp	r0, #0
 8005708:	dc0f      	bgt.n	800572a <InitGSM+0x9e>
		SendGSMCode(" AT");
 800570a:	4892      	ldr	r0, [pc, #584]	; (8005954 <InitGSM+0x2c8>)
 800570c:	f7fd ff96 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8005710:	498c      	ldr	r1, [pc, #560]	; (8005944 <InitGSM+0x2b8>)
 8005712:	4b8d      	ldr	r3, [pc, #564]	; (8005948 <InitGSM+0x2bc>)
 8005714:	9302      	str	r3, [sp, #8]
 8005716:	4b8d      	ldr	r3, [pc, #564]	; (800594c <InitGSM+0x2c0>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	4b8e      	ldr	r3, [pc, #568]	; (8005958 <InitGSM+0x2cc>)
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	000b      	movs	r3, r1
 8005722:	2200      	movs	r2, #0
 8005724:	200f      	movs	r0, #15
 8005726:	f7ff fbe3 	bl	8004ef0 <GetGSMReply>
	}

	HAL_Delay(2000);
 800572a:	20fa      	movs	r0, #250	; 0xfa
 800572c:	00c0      	lsls	r0, r0, #3
 800572e:	f001 fbf7 	bl	8006f20 <HAL_Delay>
	ShiftGSMProfile();
 8005732:	f7ff fe97 	bl	8005464 <ShiftGSMProfile>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 8005736:	4882      	ldr	r0, [pc, #520]	; (8005940 <InitGSM+0x2b4>)
 8005738:	f7fd ff80 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 800573c:	4981      	ldr	r1, [pc, #516]	; (8005944 <InitGSM+0x2b8>)
 800573e:	4b82      	ldr	r3, [pc, #520]	; (8005948 <InitGSM+0x2bc>)
 8005740:	9302      	str	r3, [sp, #8]
 8005742:	4b82      	ldr	r3, [pc, #520]	; (800594c <InitGSM+0x2c0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	4b84      	ldr	r3, [pc, #528]	; (800595c <InitGSM+0x2d0>)
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	000b      	movs	r3, r1
 800574e:	2200      	movs	r2, #0
 8005750:	200a      	movs	r0, #10
 8005752:	f7ff fbcd 	bl	8004ef0 <GetGSMReply>
 8005756:	f7fa fcd7 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 800575a:	2800      	cmp	r0, #0
 800575c:	dc0f      	bgt.n	800577e <InitGSM+0xf2>
		SendGSMCode(" ATE0");
 800575e:	4878      	ldr	r0, [pc, #480]	; (8005940 <InitGSM+0x2b4>)
 8005760:	f7fd ff6c 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8005764:	4977      	ldr	r1, [pc, #476]	; (8005944 <InitGSM+0x2b8>)
 8005766:	4b78      	ldr	r3, [pc, #480]	; (8005948 <InitGSM+0x2bc>)
 8005768:	9302      	str	r3, [sp, #8]
 800576a:	4b78      	ldr	r3, [pc, #480]	; (800594c <InitGSM+0x2c0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	4b7a      	ldr	r3, [pc, #488]	; (800595c <InitGSM+0x2d0>)
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	000b      	movs	r3, r1
 8005776:	2200      	movs	r2, #0
 8005778:	200a      	movs	r0, #10
 800577a:	f7ff fbb9 	bl	8004ef0 <GetGSMReply>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 800577e:	4875      	ldr	r0, [pc, #468]	; (8005954 <InitGSM+0x2c8>)
 8005780:	f7fd ff5c 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8005784:	496f      	ldr	r1, [pc, #444]	; (8005944 <InitGSM+0x2b8>)
 8005786:	4b70      	ldr	r3, [pc, #448]	; (8005948 <InitGSM+0x2bc>)
 8005788:	9302      	str	r3, [sp, #8]
 800578a:	4b70      	ldr	r3, [pc, #448]	; (800594c <InitGSM+0x2c0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	4b71      	ldr	r3, [pc, #452]	; (8005958 <InitGSM+0x2cc>)
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	000b      	movs	r3, r1
 8005796:	2200      	movs	r2, #0
 8005798:	200a      	movs	r0, #10
 800579a:	f7ff fba9 	bl	8004ef0 <GetGSMReply>
 800579e:	f7fa fcb3 	bl	8000108 <strlen>
	while ((ck > 0) && (i < 1))
 80057a2:	2800      	cmp	r0, #0
 80057a4:	dc0f      	bgt.n	80057c6 <InitGSM+0x13a>
		SendGSMCode(" AT");
 80057a6:	486b      	ldr	r0, [pc, #428]	; (8005954 <InitGSM+0x2c8>)
 80057a8:	f7fd ff48 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 80057ac:	4965      	ldr	r1, [pc, #404]	; (8005944 <InitGSM+0x2b8>)
 80057ae:	4b66      	ldr	r3, [pc, #408]	; (8005948 <InitGSM+0x2bc>)
 80057b0:	9302      	str	r3, [sp, #8]
 80057b2:	4b66      	ldr	r3, [pc, #408]	; (800594c <InitGSM+0x2c0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	4b67      	ldr	r3, [pc, #412]	; (8005958 <InitGSM+0x2cc>)
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	000b      	movs	r3, r1
 80057be:	2200      	movs	r2, #0
 80057c0:	200a      	movs	r0, #10
 80057c2:	f7ff fb95 	bl	8004ef0 <GetGSMReply>
{
 80057c6:	250a      	movs	r5, #10
	ck = 10;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 80057c8:	4b65      	ldr	r3, [pc, #404]	; (8005960 <InitGSM+0x2d4>)
 80057ca:	4698      	mov	r8, r3
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 80057cc:	4e5d      	ldr	r6, [pc, #372]	; (8005944 <InitGSM+0x2b8>)
 80057ce:	4f5e      	ldr	r7, [pc, #376]	; (8005948 <InitGSM+0x2bc>)
 80057d0:	e011      	b.n	80057f6 <InitGSM+0x16a>
								{

									HAL_Delay(1000);
									if (GSMProf == 0)
									{
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
 80057d2:	4864      	ldr	r0, [pc, #400]	; (8005964 <InitGSM+0x2d8>)
 80057d4:	f7fd fda4 	bl	8003320 <Debug_Tx>
										SetupGPRS("taisysnet"); // taisysnet");
 80057d8:	4863      	ldr	r0, [pc, #396]	; (8005968 <InitGSM+0x2dc>)
 80057da:	f7ff fdcb 	bl	8005374 <SetupGPRS>
 80057de:	e096      	b.n	800590e <InitGSM+0x282>
									}
									else if (GSMProf == 1)
									{
										Debug_Tx("_____________BSNL APN SET_____________________________");
 80057e0:	4862      	ldr	r0, [pc, #392]	; (800596c <InitGSM+0x2e0>)
 80057e2:	f7fd fd9d 	bl	8003320 <Debug_Tx>
										SetupGPRS("bsnlnet"); // taisysnet");
 80057e6:	4862      	ldr	r0, [pc, #392]	; (8005970 <InitGSM+0x2e4>)
 80057e8:	f7ff fdc4 	bl	8005374 <SetupGPRS>
 80057ec:	e08f      	b.n	800590e <InitGSM+0x282>
	while ((ck > 0) && (i < 1))
 80057ee:	3d01      	subs	r5, #1
 80057f0:	2d00      	cmp	r5, #0
 80057f2:	d100      	bne.n	80057f6 <InitGSM+0x16a>
 80057f4:	e09d      	b.n	8005932 <InitGSM+0x2a6>
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 80057f6:	4640      	mov	r0, r8
 80057f8:	f7fd ff20 	bl	800363c <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 80057fc:	9702      	str	r7, [sp, #8]
 80057fe:	4b53      	ldr	r3, [pc, #332]	; (800594c <InitGSM+0x2c0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	4b5b      	ldr	r3, [pc, #364]	; (8005974 <InitGSM+0x2e8>)
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	0033      	movs	r3, r6
 800580a:	2200      	movs	r2, #0
 800580c:	0031      	movs	r1, r6
 800580e:	2005      	movs	r0, #5
 8005810:	f7ff fb6e 	bl	8004ef0 <GetGSMReply>
 8005814:	f7fa fc78 	bl	8000108 <strlen>
 8005818:	0004      	movs	r4, r0
		HAL_Delay(1000);
 800581a:	20fa      	movs	r0, #250	; 0xfa
 800581c:	0080      	lsls	r0, r0, #2
 800581e:	f001 fb7f 	bl	8006f20 <HAL_Delay>
		if (i > 0)
 8005822:	2c00      	cmp	r4, #0
 8005824:	dde3      	ble.n	80057ee <InitGSM+0x162>
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 8005826:	4854      	ldr	r0, [pc, #336]	; (8005978 <InitGSM+0x2ec>)
 8005828:	f7fd ff08 	bl	800363c <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 800582c:	4945      	ldr	r1, [pc, #276]	; (8005944 <InitGSM+0x2b8>)
 800582e:	4b46      	ldr	r3, [pc, #280]	; (8005948 <InitGSM+0x2bc>)
 8005830:	9302      	str	r3, [sp, #8]
 8005832:	4b46      	ldr	r3, [pc, #280]	; (800594c <InitGSM+0x2c0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	9301      	str	r3, [sp, #4]
 8005838:	4b50      	ldr	r3, [pc, #320]	; (800597c <InitGSM+0x2f0>)
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	000b      	movs	r3, r1
 800583e:	2200      	movs	r2, #0
 8005840:	2000      	movs	r0, #0
 8005842:	f7ff fb55 	bl	8004ef0 <GetGSMReply>
 8005846:	f7fa fc5f 	bl	8000108 <strlen>
			if (i > 0)
 800584a:	2800      	cmp	r0, #0
 800584c:	ddcf      	ble.n	80057ee <InitGSM+0x162>
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 800584e:	484c      	ldr	r0, [pc, #304]	; (8005980 <InitGSM+0x2f4>)
 8005850:	f7fd fef4 	bl	800363c <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 8005854:	493b      	ldr	r1, [pc, #236]	; (8005944 <InitGSM+0x2b8>)
 8005856:	4b3c      	ldr	r3, [pc, #240]	; (8005948 <InitGSM+0x2bc>)
 8005858:	9302      	str	r3, [sp, #8]
 800585a:	4b3c      	ldr	r3, [pc, #240]	; (800594c <InitGSM+0x2c0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	4b48      	ldr	r3, [pc, #288]	; (8005984 <InitGSM+0x2f8>)
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	000b      	movs	r3, r1
 8005866:	2200      	movs	r2, #0
 8005868:	2000      	movs	r0, #0
 800586a:	f7ff fb41 	bl	8004ef0 <GetGSMReply>
 800586e:	f7fa fc4b 	bl	8000108 <strlen>
				if (i > 0)
 8005872:	2800      	cmp	r0, #0
 8005874:	ddbb      	ble.n	80057ee <InitGSM+0x162>
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 8005876:	4844      	ldr	r0, [pc, #272]	; (8005988 <InitGSM+0x2fc>)
 8005878:	f7fd fee0 	bl	800363c <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 800587c:	4931      	ldr	r1, [pc, #196]	; (8005944 <InitGSM+0x2b8>)
 800587e:	4b32      	ldr	r3, [pc, #200]	; (8005948 <InitGSM+0x2bc>)
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	4b32      	ldr	r3, [pc, #200]	; (800594c <InitGSM+0x2c0>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	9301      	str	r3, [sp, #4]
 8005888:	4b40      	ldr	r3, [pc, #256]	; (800598c <InitGSM+0x300>)
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	000b      	movs	r3, r1
 800588e:	2200      	movs	r2, #0
 8005890:	2000      	movs	r0, #0
 8005892:	f7ff fb2d 	bl	8004ef0 <GetGSMReply>
 8005896:	f7fa fc37 	bl	8000108 <strlen>
					if (i > 0)
 800589a:	2800      	cmp	r0, #0
 800589c:	dda7      	ble.n	80057ee <InitGSM+0x162>
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 800589e:	483c      	ldr	r0, [pc, #240]	; (8005990 <InitGSM+0x304>)
 80058a0:	f7fd fecc 	bl	800363c <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 80058a4:	4927      	ldr	r1, [pc, #156]	; (8005944 <InitGSM+0x2b8>)
 80058a6:	4b28      	ldr	r3, [pc, #160]	; (8005948 <InitGSM+0x2bc>)
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	4b28      	ldr	r3, [pc, #160]	; (800594c <InitGSM+0x2c0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	9301      	str	r3, [sp, #4]
 80058b0:	4b38      	ldr	r3, [pc, #224]	; (8005994 <InitGSM+0x308>)
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	000b      	movs	r3, r1
 80058b6:	2200      	movs	r2, #0
 80058b8:	2000      	movs	r0, #0
 80058ba:	f7ff fb19 	bl	8004ef0 <GetGSMReply>
 80058be:	f7fa fc23 	bl	8000108 <strlen>
						if (i > 0)
 80058c2:	2800      	cmp	r0, #0
 80058c4:	dd93      	ble.n	80057ee <InitGSM+0x162>
							HAL_Delay(3000);
 80058c6:	4834      	ldr	r0, [pc, #208]	; (8005998 <InitGSM+0x30c>)
 80058c8:	f001 fb2a 	bl	8006f20 <HAL_Delay>
								SendGSMCode(" AT+QENG=1,4");
 80058cc:	4833      	ldr	r0, [pc, #204]	; (800599c <InitGSM+0x310>)
 80058ce:	f7fd feb5 	bl	800363c <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 80058d2:	491c      	ldr	r1, [pc, #112]	; (8005944 <InitGSM+0x2b8>)
 80058d4:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <InitGSM+0x2bc>)
 80058d6:	9302      	str	r3, [sp, #8]
 80058d8:	4b1c      	ldr	r3, [pc, #112]	; (800594c <InitGSM+0x2c0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	9301      	str	r3, [sp, #4]
 80058de:	4b30      	ldr	r3, [pc, #192]	; (80059a0 <InitGSM+0x314>)
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	000b      	movs	r3, r1
 80058e4:	2200      	movs	r2, #0
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7ff fb02 	bl	8004ef0 <GetGSMReply>
 80058ec:	f7fa fc0c 	bl	8000108 <strlen>
								if (i > 0)
 80058f0:	2800      	cmp	r0, #0
 80058f2:	dc00      	bgt.n	80058f6 <InitGSM+0x26a>
 80058f4:	e77b      	b.n	80057ee <InitGSM+0x162>
									HAL_Delay(1000);
 80058f6:	20fa      	movs	r0, #250	; 0xfa
 80058f8:	0080      	lsls	r0, r0, #2
 80058fa:	f001 fb11 	bl	8006f20 <HAL_Delay>
									if (GSMProf == 0)
 80058fe:	4b29      	ldr	r3, [pc, #164]	; (80059a4 <InitGSM+0x318>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d100      	bne.n	8005908 <InitGSM+0x27c>
 8005906:	e764      	b.n	80057d2 <InitGSM+0x146>
									else if (GSMProf == 1)
 8005908:	2b01      	cmp	r3, #1
 800590a:	d100      	bne.n	800590e <InitGSM+0x282>
 800590c:	e768      	b.n	80057e0 <InitGSM+0x154>
									}
									HAL_Delay(1000);
 800590e:	24fa      	movs	r4, #250	; 0xfa
 8005910:	00a4      	lsls	r4, r4, #2
 8005912:	0020      	movs	r0, r4
 8005914:	f001 fb04 	bl	8006f20 <HAL_Delay>

									Debug_Tx("_____________Operator again_____________________________");
 8005918:	4823      	ldr	r0, [pc, #140]	; (80059a8 <InitGSM+0x31c>)
 800591a:	f7fd fd01 	bl	8003320 <Debug_Tx>
									// Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 800591e:	0020      	movs	r0, r4
 8005920:	f001 fafe 	bl	8006f20 <HAL_Delay>
									SetTCPMux();
 8005924:	f7ff fd08 	bl	8005338 <SetTCPMux>
									HAL_Delay(1000);
 8005928:	0020      	movs	r0, r4
 800592a:	f001 faf9 	bl	8006f20 <HAL_Delay>
									SetTCPMux();
 800592e:	f7ff fd03 	bl	8005338 <SetTCPMux>
					}
				}
			}
		}
	}
}
 8005932:	b004      	add	sp, #16
 8005934:	bc80      	pop	{r7}
 8005936:	46b8      	mov	r8, r7
 8005938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800593a:	46c0      	nop			; (mov r8, r8)
 800593c:	00001388 	.word	0x00001388
 8005940:	080129cc 	.word	0x080129cc
 8005944:	0801251c 	.word	0x0801251c
 8005948:	0801248c 	.word	0x0801248c
 800594c:	200000c8 	.word	0x200000c8
 8005950:	080129d4 	.word	0x080129d4
 8005954:	08011da4 	.word	0x08011da4
 8005958:	080129e8 	.word	0x080129e8
 800595c:	080129fc 	.word	0x080129fc
 8005960:	08012a10 	.word	0x08012a10
 8005964:	08012b50 	.word	0x08012b50
 8005968:	08012b8c 	.word	0x08012b8c
 800596c:	08012b98 	.word	0x08012b98
 8005970:	08012bd0 	.word	0x08012bd0
 8005974:	08012a1c 	.word	0x08012a1c
 8005978:	08012a44 	.word	0x08012a44
 800597c:	08012a50 	.word	0x08012a50
 8005980:	08012a78 	.word	0x08012a78
 8005984:	08012a84 	.word	0x08012a84
 8005988:	08012aa0 	.word	0x08012aa0
 800598c:	08012aac 	.word	0x08012aac
 8005990:	08012adc 	.word	0x08012adc
 8005994:	08012aec 	.word	0x08012aec
 8005998:	00000bb8 	.word	0x00000bb8
 800599c:	08012b18 	.word	0x08012b18
 80059a0:	08012b28 	.word	0x08012b28
 80059a4:	2000009c 	.word	0x2000009c
 80059a8:	08012bd8 	.word	0x08012bd8

080059ac <GSMSigQuality>:
{
 80059ac:	b510      	push	{r4, lr}
 80059ae:	b084      	sub	sp, #16
	GSMSignal = 0;
 80059b0:	4c23      	ldr	r4, [pc, #140]	; (8005a40 <GSMSigQuality+0x94>)
 80059b2:	2300      	movs	r3, #0
 80059b4:	6023      	str	r3, [r4, #0]
	SendGSMCode(" AT+CSQ");
 80059b6:	4823      	ldr	r0, [pc, #140]	; (8005a44 <GSMSigQuality+0x98>)
 80059b8:	f7fd fe40 	bl	800363c <SendGSMCode>
	HAL_Delay(100);
 80059bc:	2064      	movs	r0, #100	; 0x64
 80059be:	f001 faaf 	bl	8006f20 <HAL_Delay>
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 80059c2:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <GSMSigQuality+0x9c>)
 80059c4:	4921      	ldr	r1, [pc, #132]	; (8005a4c <GSMSigQuality+0xa0>)
 80059c6:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <GSMSigQuality+0xa4>)
 80059c8:	9202      	str	r2, [sp, #8]
 80059ca:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <GSMSigQuality+0xa8>)
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	9201      	str	r2, [sp, #4]
 80059d0:	4a21      	ldr	r2, [pc, #132]	; (8005a58 <GSMSigQuality+0xac>)
 80059d2:	9200      	str	r2, [sp, #0]
 80059d4:	2205      	movs	r2, #5
 80059d6:	2000      	movs	r0, #0
 80059d8:	f7ff fa8a 	bl	8004ef0 <GetGSMReply>
 80059dc:	2100      	movs	r1, #0
 80059de:	f007 faab 	bl	800cf38 <strtod>
 80059e2:	f7fd fbad 	bl	8003140 <__aeabi_d2f>
 80059e6:	6020      	str	r0, [r4, #0]
	if (GSMSignal > 5)
 80059e8:	491c      	ldr	r1, [pc, #112]	; (8005a5c <GSMSigQuality+0xb0>)
 80059ea:	f7fa fd83 	bl	80004f4 <__aeabi_fcmpgt>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d010      	beq.n	8005a14 <GSMSigQuality+0x68>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 80059f2:	2201      	movs	r2, #1
 80059f4:	2102      	movs	r1, #2
 80059f6:	481a      	ldr	r0, [pc, #104]	; (8005a60 <GSMSigQuality+0xb4>)
 80059f8:	f002 f962 	bl	8007cc0 <HAL_GPIO_WritePin>
		ServerConnected = 1;
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <GSMSigQuality+0xb8>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
		Debug_Tx("GSM HIGH");
 8005a02:	4819      	ldr	r0, [pc, #100]	; (8005a68 <GSMSigQuality+0xbc>)
 8005a04:	f7fd fc8c 	bl	8003320 <Debug_Tx>
	return (GSMSignal); // must be higher than 5 ,range 0-33
 8005a08:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <GSMSigQuality+0x94>)
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	f7fb fc4e 	bl	80012ac <__aeabi_f2iz>
}
 8005a10:	b004      	add	sp, #16
 8005a12:	bd10      	pop	{r4, pc}
		Debug_Tx("GSM low");
 8005a14:	4815      	ldr	r0, [pc, #84]	; (8005a6c <GSMSigQuality+0xc0>)
 8005a16:	f7fd fc83 	bl	8003320 <Debug_Tx>
		Debug_Tx("GSM No Signal");
 8005a1a:	4815      	ldr	r0, [pc, #84]	; (8005a70 <GSMSigQuality+0xc4>)
 8005a1c:	f7fd fc80 	bl	8003320 <Debug_Tx>
		gprsok = 0;
 8005a20:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <GSMSigQuality+0xc8>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
		ServerConnected = 0;
 8005a26:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <GSMSigQuality+0xb8>)
 8005a28:	601a      	str	r2, [r3, #0]
		restartGSMuart();
 8005a2a:	f7ff fa4b 	bl	8004ec4 <restartGSMuart>
		Debug_Tx("GSMTRstarted");
 8005a2e:	4812      	ldr	r0, [pc, #72]	; (8005a78 <GSMSigQuality+0xcc>)
 8005a30:	f7fd fc76 	bl	8003320 <Debug_Tx>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 8005a34:	2200      	movs	r2, #0
 8005a36:	2102      	movs	r1, #2
 8005a38:	4809      	ldr	r0, [pc, #36]	; (8005a60 <GSMSigQuality+0xb4>)
 8005a3a:	f002 f941 	bl	8007cc0 <HAL_GPIO_WritePin>
 8005a3e:	e7e3      	b.n	8005a08 <GSMSigQuality+0x5c>
 8005a40:	200011d0 	.word	0x200011d0
 8005a44:	08012c14 	.word	0x08012c14
 8005a48:	08011dd8 	.word	0x08011dd8
 8005a4c:	08012c1c 	.word	0x08012c1c
 8005a50:	08012c24 	.word	0x08012c24
 8005a54:	200000c8 	.word	0x200000c8
 8005a58:	08012c28 	.word	0x08012c28
 8005a5c:	40a00000 	.word	0x40a00000
 8005a60:	50000c00 	.word	0x50000c00
 8005a64:	200033cc 	.word	0x200033cc
 8005a68:	08012c48 	.word	0x08012c48
 8005a6c:	08012c54 	.word	0x08012c54
 8005a70:	08012c5c 	.word	0x08012c5c
 8005a74:	200035a8 	.word	0x200035a8
 8005a78:	08012c6c 	.word	0x08012c6c

08005a7c <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	b084      	sub	sp, #16
	ClearQueue();
 8005a80:	f7fe fa92 	bl	8003fa8 <ClearQueue>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <initFirstRun+0x28>)
 8005a86:	4c08      	ldr	r4, [pc, #32]	; (8005aa8 <initFirstRun+0x2c>)
 8005a88:	0022      	movs	r2, r4
 8005a8a:	320c      	adds	r2, #12
 8005a8c:	0021      	movs	r1, r4
 8005a8e:	3134      	adds	r1, #52	; 0x34
 8005a90:	4806      	ldr	r0, [pc, #24]	; (8005aac <initFirstRun+0x30>)
 8005a92:	3024      	adds	r0, #36	; 0x24
 8005a94:	3468      	adds	r4, #104	; 0x68
 8005a96:	9402      	str	r4, [sp, #8]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	f7fe fa8e 	bl	8003fbc <writeConfig>
}
 8005aa0:	b004      	add	sp, #16
 8005aa2:	bd10      	pop	{r4, pc}
 8005aa4:	08012c7c 	.word	0x08012c7c
 8005aa8:	08011b80 	.word	0x08011b80
 8005aac:	08011c00 	.word	0x08011c00

08005ab0 <ReadAllGPIO>:
void ReadAllGPIO(){
 8005ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab2:	46de      	mov	lr, fp
 8005ab4:	4657      	mov	r7, sl
 8005ab6:	464e      	mov	r6, r9
 8005ab8:	4645      	mov	r5, r8
 8005aba:	b5e0      	push	{r5, r6, r7, lr}
 8005abc:	b089      	sub	sp, #36	; 0x24
	memset(StatusStrng,0,20);
 8005abe:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <ReadAllGPIO+0x11c>)
 8005ac0:	2214      	movs	r2, #20
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	9306      	str	r3, [sp, #24]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f008 fac4 	bl	800e054 <memset>
	memset(Dig_io,0,30);
 8005acc:	4d40      	ldr	r5, [pc, #256]	; (8005bd0 <ReadAllGPIO+0x120>)
 8005ace:	221e      	movs	r2, #30
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	0028      	movs	r0, r5
 8005ad4:	f008 fabe 	bl	800e054 <memset>
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 8005ad8:	2780      	movs	r7, #128	; 0x80
 8005ada:	017f      	lsls	r7, r7, #5
 8005adc:	20a0      	movs	r0, #160	; 0xa0
 8005ade:	0039      	movs	r1, r7
 8005ae0:	05c0      	lsls	r0, r0, #23
 8005ae2:	f002 f8e7 	bl	8007cb4 <HAL_GPIO_ReadPin>
	Dig_in[0]=Read_DI_IN1();
 8005ae6:	4c3b      	ldr	r4, [pc, #236]	; (8005bd4 <ReadAllGPIO+0x124>)
 8005ae8:	6020      	str	r0, [r4, #0]
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	4e3a      	ldr	r6, [pc, #232]	; (8005bd8 <ReadAllGPIO+0x128>)
 8005aee:	0109      	lsls	r1, r1, #4
 8005af0:	0030      	movs	r0, r6
 8005af2:	f002 f8df 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8005af6:	6060      	str	r0, [r4, #4]
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 8005af8:	0039      	movs	r1, r7
 8005afa:	0030      	movs	r0, r6
 8005afc:	f002 f8da 	bl	8007cb4 <HAL_GPIO_ReadPin>
 8005b00:	60a0      	str	r0, [r4, #8]
	MAINS_STATE=Read_DI_MAINS_STATE();
 8005b02:	f7fd fd21 	bl	8003548 <Read_DI_MAINS_STATE>
 8005b06:	4b35      	ldr	r3, [pc, #212]	; (8005bdc <ReadAllGPIO+0x12c>)
 8005b08:	469a      	mov	sl, r3
 8005b0a:	6018      	str	r0, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 8005b0c:	f7fd fd26 	bl	800355c <Read_DI_ACC_STATE>
 8005b10:	4b33      	ldr	r3, [pc, #204]	; (8005be0 <ReadAllGPIO+0x130>)
 8005b12:	4699      	mov	r9, r3
 8005b14:	6018      	str	r0, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 8005b16:	f7fd fd2b 	bl	8003570 <Read_DI_BOX_STATE>
 8005b1a:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <ReadAllGPIO+0x134>)
 8005b1c:	9307      	str	r3, [sp, #28]
 8005b1e:	7018      	strb	r0, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 8005b20:	f7fd fd36 	bl	8003590 <Read_DI_SOS_STATE>
 8005b24:	4a30      	ldr	r2, [pc, #192]	; (8005be8 <ReadAllGPIO+0x138>)
 8005b26:	4690      	mov	r8, r2
 8005b28:	6010      	str	r0, [r2, #0]
	EXT_B=Read_EXT_B_SENSE();
 8005b2a:	f7fd fbd5 	bl	80032d8 <Read_EXT_B_SENSE>
 8005b2e:	4e2f      	ldr	r6, [pc, #188]	; (8005bec <ReadAllGPIO+0x13c>)
 8005b30:	6030      	str	r0, [r6, #0]
	INT_B=Read_INT_B_SENSE();
 8005b32:	f7fd fbe3 	bl	80032fc <Read_INT_B_SENSE>
 8005b36:	4f2e      	ldr	r7, [pc, #184]	; (8005bf0 <ReadAllGPIO+0x140>)
 8005b38:	6038      	str	r0, [r7, #0]
	adc[0]=Read_ADC1();
 8005b3a:	f7fd fba5 	bl	8003288 <Read_ADC1>
 8005b3e:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <ReadAllGPIO+0x144>)
 8005b40:	4693      	mov	fp, r2
 8005b42:	6010      	str	r0, [r2, #0]
	adc[1]=Read_ADC2();
 8005b44:	f7fd fbb4 	bl	80032b0 <Read_ADC2>
 8005b48:	465a      	mov	r2, fp
 8005b4a:	6050      	str	r0, [r2, #4]
	memset(StatusStrng,0,20);
 8005b4c:	2214      	movs	r2, #20
 8005b4e:	2100      	movs	r1, #0
 8005b50:	9b06      	ldr	r3, [sp, #24]
 8005b52:	469b      	mov	fp, r3
 8005b54:	0018      	movs	r0, r3
 8005b56:	f008 fa7d 	bl	800e054 <memset>
	memset(Dig_io,0,30);
 8005b5a:	221e      	movs	r2, #30
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	0028      	movs	r0, r5
 8005b60:	f008 fa78 	bl	800e054 <memset>
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	4923      	ldr	r1, [pc, #140]	; (8005bf8 <ReadAllGPIO+0x148>)
 8005b6a:	4824      	ldr	r0, [pc, #144]	; (8005bfc <ReadAllGPIO+0x14c>)
 8005b6c:	6800      	ldr	r0, [r0, #0]
 8005b6e:	9003      	str	r0, [sp, #12]
 8005b70:	4823      	ldr	r0, [pc, #140]	; (8005c00 <ReadAllGPIO+0x150>)
 8005b72:	6800      	ldr	r0, [r0, #0]
 8005b74:	9002      	str	r0, [sp, #8]
 8005b76:	4823      	ldr	r0, [pc, #140]	; (8005c04 <ReadAllGPIO+0x154>)
 8005b78:	6800      	ldr	r0, [r0, #0]
 8005b7a:	9001      	str	r0, [sp, #4]
 8005b7c:	68a0      	ldr	r0, [r4, #8]
 8005b7e:	9000      	str	r0, [sp, #0]
 8005b80:	0028      	movs	r0, r5
 8005b82:	f008 f9fb 	bl	800df7c <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 8005b86:	4652      	mov	r2, sl
 8005b88:	6815      	ldr	r5, [r2, #0]
 8005b8a:	464a      	mov	r2, r9
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	4691      	mov	r9, r2
 8005b90:	4c1d      	ldr	r4, [pc, #116]	; (8005c08 <ReadAllGPIO+0x158>)
 8005b92:	9b07      	ldr	r3, [sp, #28]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	9305      	str	r3, [sp, #20]
 8005b98:	4643      	mov	r3, r8
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	9304      	str	r3, [sp, #16]
 8005b9e:	6838      	ldr	r0, [r7, #0]
 8005ba0:	f7fd fa86 	bl	80030b0 <__aeabi_f2d>
 8005ba4:	9002      	str	r0, [sp, #8]
 8005ba6:	9103      	str	r1, [sp, #12]
 8005ba8:	6830      	ldr	r0, [r6, #0]
 8005baa:	f7fd fa81 	bl	80030b0 <__aeabi_f2d>
 8005bae:	9000      	str	r0, [sp, #0]
 8005bb0:	9101      	str	r1, [sp, #4]
 8005bb2:	002b      	movs	r3, r5
 8005bb4:	464a      	mov	r2, r9
 8005bb6:	0021      	movs	r1, r4
 8005bb8:	4658      	mov	r0, fp
 8005bba:	f008 f9df 	bl	800df7c <siprintf>
}
 8005bbe:	b009      	add	sp, #36	; 0x24
 8005bc0:	bcf0      	pop	{r4, r5, r6, r7}
 8005bc2:	46bb      	mov	fp, r7
 8005bc4:	46b2      	mov	sl, r6
 8005bc6:	46a9      	mov	r9, r5
 8005bc8:	46a0      	mov	r8, r4
 8005bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bcc:	200033d4 	.word	0x200033d4
 8005bd0:	20000494 	.word	0x20000494
 8005bd4:	20000488 	.word	0x20000488
 8005bd8:	50000400 	.word	0x50000400
 8005bdc:	20001328 	.word	0x20001328
 8005be0:	20000304 	.word	0x20000304
 8005be4:	20000090 	.word	0x20000090
 8005be8:	200033b4 	.word	0x200033b4
 8005bec:	200004bc 	.word	0x200004bc
 8005bf0:	200012ec 	.word	0x200012ec
 8005bf4:	20003420 	.word	0x20003420
 8005bf8:	08012c8c 	.word	0x08012c8c
 8005bfc:	20003f00 	.word	0x20003f00
 8005c00:	200004b8 	.word	0x200004b8
 8005c04:	200004b4 	.word	0x200004b4
 8005c08:	08012ca4 	.word	0x08012ca4

08005c0c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	0004      	movs	r4, r0
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8005c10:	2104      	movs	r1, #4
 8005c12:	4827      	ldr	r0, [pc, #156]	; (8005cb0 <HAL_UART_RxCpltCallback+0xa4>)
 8005c14:	f002 f85a 	bl	8007ccc <HAL_GPIO_TogglePin>
	if(huart==&huart2){
 8005c18:	4b26      	ldr	r3, [pc, #152]	; (8005cb4 <HAL_UART_RxCpltCallback+0xa8>)
 8005c1a:	429c      	cmp	r4, r3
 8005c1c:	d003      	beq.n	8005c26 <HAL_UART_RxCpltCallback+0x1a>
	if(huart==&huart1){
 8005c1e:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <HAL_UART_RxCpltCallback+0xac>)
 8005c20:	429c      	cmp	r4, r3
 8005c22:	d028      	beq.n	8005c76 <HAL_UART_RxCpltCallback+0x6a>
}
 8005c24:	bd10      	pop	{r4, pc}
		if(dnlfile==0){
 8005c26:	4b25      	ldr	r3, [pc, #148]	; (8005cbc <HAL_UART_RxCpltCallback+0xb0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1fa      	bne.n	8005c24 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>10){
 8005c2e:	4824      	ldr	r0, [pc, #144]	; (8005cc0 <HAL_UART_RxCpltCallback+0xb4>)
 8005c30:	f7fa fa6a 	bl	8000108 <strlen>
 8005c34:	280a      	cmp	r0, #10
 8005c36:	d80e      	bhi.n	8005c56 <HAL_UART_RxCpltCallback+0x4a>
		if(DMAon==1){
 8005c38:	4b22      	ldr	r3, [pc, #136]	; (8005cc4 <HAL_UART_RxCpltCallback+0xb8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d1f1      	bne.n	8005c24 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8005c40:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <HAL_UART_RxCpltCallback+0xb4>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d110      	bne.n	8005c6a <HAL_UART_RxCpltCallback+0x5e>
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 8005c48:	22e1      	movs	r2, #225	; 0xe1
 8005c4a:	491d      	ldr	r1, [pc, #116]	; (8005cc0 <HAL_UART_RxCpltCallback+0xb4>)
 8005c4c:	4819      	ldr	r0, [pc, #100]	; (8005cb4 <HAL_UART_RxCpltCallback+0xa8>)
 8005c4e:	0092      	lsls	r2, r2, #2
 8005c50:	f004 fd46 	bl	800a6e0 <HAL_UART_Receive_DMA>
 8005c54:	e7e6      	b.n	8005c24 <HAL_UART_RxCpltCallback+0x18>
			ProcessGPS((char*)gpsData);
 8005c56:	481a      	ldr	r0, [pc, #104]	; (8005cc0 <HAL_UART_RxCpltCallback+0xb4>)
 8005c58:	f7ff f8c0 	bl	8004ddc <ProcessGPS>
			getGPSString();
 8005c5c:	f7fe fb62 	bl	8004324 <getGPSString>
			timedWork();
 8005c60:	f7fe fedc 	bl	8004a1c <timedWork>
			ReadAllGPIO();
 8005c64:	f7ff ff24 	bl	8005ab0 <ReadAllGPIO>
 8005c68:	e7e6      	b.n	8005c38 <HAL_UART_RxCpltCallback+0x2c>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8005c6a:	4815      	ldr	r0, [pc, #84]	; (8005cc0 <HAL_UART_RxCpltCallback+0xb4>)
 8005c6c:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <HAL_UART_RxCpltCallback+0xbc>)
 8005c6e:	2100      	movs	r1, #0
 8005c70:	f008 f9f0 	bl	800e054 <memset>
 8005c74:	e7e8      	b.n	8005c48 <HAL_UART_RxCpltCallback+0x3c>
		if(strlen((char*)GSMData)<900){
 8005c76:	4815      	ldr	r0, [pc, #84]	; (8005ccc <HAL_UART_RxCpltCallback+0xc0>)
 8005c78:	f7fa fa46 	bl	8000108 <strlen>
 8005c7c:	23e1      	movs	r3, #225	; 0xe1
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4298      	cmp	r0, r3
 8005c82:	d203      	bcs.n	8005c8c <HAL_UART_RxCpltCallback+0x80>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8005c84:	4b12      	ldr	r3, [pc, #72]	; (8005cd0 <HAL_UART_RxCpltCallback+0xc4>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10b      	bne.n	8005ca4 <HAL_UART_RxCpltCallback+0x98>
		if(DMAon==1){
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	; (8005cc4 <HAL_UART_RxCpltCallback+0xb8>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d1c7      	bne.n	8005c24 <HAL_UART_RxCpltCallback+0x18>
		GSMBuff[0]=0;
 8005c94:	490e      	ldr	r1, [pc, #56]	; (8005cd0 <HAL_UART_RxCpltCallback+0xc4>)
 8005c96:	2300      	movs	r3, #0
 8005c98:	700b      	strb	r3, [r1, #0]
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8005c9a:	4807      	ldr	r0, [pc, #28]	; (8005cb8 <HAL_UART_RxCpltCallback+0xac>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f004 fd1f 	bl	800a6e0 <HAL_UART_Receive_DMA>
}
 8005ca2:	e7bf      	b.n	8005c24 <HAL_UART_RxCpltCallback+0x18>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8005ca4:	490a      	ldr	r1, [pc, #40]	; (8005cd0 <HAL_UART_RxCpltCallback+0xc4>)
 8005ca6:	4809      	ldr	r0, [pc, #36]	; (8005ccc <HAL_UART_RxCpltCallback+0xc0>)
 8005ca8:	f008 f9dc 	bl	800e064 <strcat>
 8005cac:	e7ee      	b.n	8005c8c <HAL_UART_RxCpltCallback+0x80>
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	50000c00 	.word	0x50000c00
 8005cb4:	20003d9c 	.word	0x20003d9c
 8005cb8:	20003d08 	.word	0x20003d08
 8005cbc:	200035a0 	.word	0x200035a0
 8005cc0:	200035ac 	.word	0x200035ac
 8005cc4:	20000094 	.word	0x20000094
 8005cc8:	000003e7 	.word	0x000003e7
 8005ccc:	20000550 	.word	0x20000550
 8005cd0:	2000054c 	.word	0x2000054c

08005cd4 <GetHead>:
void GetHead(){
 8005cd4:	b570      	push	{r4, r5, r6, lr}
	memset(Head,0,100);
 8005cd6:	4cc5      	ldr	r4, [pc, #788]	; (8005fec <GetHead+0x318>)
 8005cd8:	2264      	movs	r2, #100	; 0x64
 8005cda:	2100      	movs	r1, #0
 8005cdc:	0020      	movs	r0, r4
 8005cde:	f008 f9b9 	bl	800e054 <memset>
	strcpy(Head,InitStr);
 8005ce2:	49c3      	ldr	r1, [pc, #780]	; (8005ff0 <GetHead+0x31c>)
 8005ce4:	0020      	movs	r0, r4
 8005ce6:	f008 fb6a 	bl	800e3be <strcpy>
	strcat(Head,",");
 8005cea:	0020      	movs	r0, r4
 8005cec:	f7fa fa0c 	bl	8000108 <strlen>
 8005cf0:	1820      	adds	r0, r4, r0
 8005cf2:	49c0      	ldr	r1, [pc, #768]	; (8005ff4 <GetHead+0x320>)
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f008 fb75 	bl	800e3e4 <memcpy>
	strcat(Head,VerStr);
 8005cfa:	49bf      	ldr	r1, [pc, #764]	; (8005ff8 <GetHead+0x324>)
 8005cfc:	0020      	movs	r0, r4
 8005cfe:	f008 f9b1 	bl	800e064 <strcat>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 8005d02:	4bbe      	ldr	r3, [pc, #760]	; (8005ffc <GetHead+0x328>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4bbe      	ldr	r3, [pc, #760]	; (8006000 <GetHead+0x32c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	d000      	beq.n	8005d10 <GetHead+0x3c>
 8005d0e:	e0ba      	b.n	8005e86 <GetHead+0x1b2>
 8005d10:	2a01      	cmp	r2, #1
 8005d12:	d000      	beq.n	8005d16 <GetHead+0x42>
 8005d14:	e0b7      	b.n	8005e86 <GetHead+0x1b2>
 8005d16:	4bba      	ldr	r3, [pc, #744]	; (8006000 <GetHead+0x32c>)
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	4bba      	ldr	r3, [pc, #744]	; (8006004 <GetHead+0x330>)
 8005d1c:	3a02      	subs	r2, #2
 8005d1e:	601a      	str	r2, [r3, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 8005d20:	4bb9      	ldr	r3, [pc, #740]	; (8006008 <GetHead+0x334>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4bb9      	ldr	r3, [pc, #740]	; (800600c <GetHead+0x338>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	d000      	beq.n	8005d2e <GetHead+0x5a>
 8005d2c:	e0ba      	b.n	8005ea4 <GetHead+0x1d0>
 8005d2e:	2a01      	cmp	r2, #1
 8005d30:	d000      	beq.n	8005d34 <GetHead+0x60>
 8005d32:	e0b7      	b.n	8005ea4 <GetHead+0x1d0>
 8005d34:	4bb5      	ldr	r3, [pc, #724]	; (800600c <GetHead+0x338>)
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	4bb5      	ldr	r3, [pc, #724]	; (8006010 <GetHead+0x33c>)
 8005d3a:	3a02      	subs	r2, #2
 8005d3c:	601a      	str	r2, [r3, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8005d3e:	4bb5      	ldr	r3, [pc, #724]	; (8006014 <GetHead+0x340>)
 8005d40:	681d      	ldr	r5, [r3, #0]
 8005d42:	49b5      	ldr	r1, [pc, #724]	; (8006018 <GetHead+0x344>)
 8005d44:	1c28      	adds	r0, r5, #0
 8005d46:	f7fa fbc1 	bl	80004cc <__aeabi_fcmplt>
 8005d4a:	1e43      	subs	r3, r0, #1
 8005d4c:	4198      	sbcs	r0, r3
 8005d4e:	0004      	movs	r4, r0
 8005d50:	4bb2      	ldr	r3, [pc, #712]	; (800601c <GetHead+0x348>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	d107      	bne.n	8005d68 <GetHead+0x94>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d005      	beq.n	8005d68 <GetHead+0x94>
 8005d5c:	4baf      	ldr	r3, [pc, #700]	; (800601c <GetHead+0x348>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	4baf      	ldr	r3, [pc, #700]	; (8006020 <GetHead+0x34c>)
 8005d64:	3a02      	subs	r2, #2
 8005d66:	601a      	str	r2, [r3, #0]
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 8005d68:	49ab      	ldr	r1, [pc, #684]	; (8006018 <GetHead+0x344>)
 8005d6a:	1c28      	adds	r0, r5, #0
 8005d6c:	f7fa fbcc 	bl	8000508 <__aeabi_fcmpge>
 8005d70:	1e42      	subs	r2, r0, #1
 8005d72:	4190      	sbcs	r0, r2
 8005d74:	4aaa      	ldr	r2, [pc, #680]	; (8006020 <GetHead+0x34c>)
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	3201      	adds	r2, #1
 8005d7a:	d107      	bne.n	8005d8c <GetHead+0xb8>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d005      	beq.n	8005d8c <GetHead+0xb8>
 8005d80:	4aa7      	ldr	r2, [pc, #668]	; (8006020 <GetHead+0x34c>)
 8005d82:	2101      	movs	r1, #1
 8005d84:	6011      	str	r1, [r2, #0]
 8005d86:	4aa5      	ldr	r2, [pc, #660]	; (800601c <GetHead+0x348>)
 8005d88:	3902      	subs	r1, #2
 8005d8a:	6011      	str	r1, [r2, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 8005d8c:	4aa5      	ldr	r2, [pc, #660]	; (8006024 <GetHead+0x350>)
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	3201      	adds	r2, #1
 8005d92:	d107      	bne.n	8005da4 <GetHead+0xd0>
 8005d94:	2c00      	cmp	r4, #0
 8005d96:	d005      	beq.n	8005da4 <GetHead+0xd0>
 8005d98:	4aa2      	ldr	r2, [pc, #648]	; (8006024 <GetHead+0x350>)
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	6011      	str	r1, [r2, #0]
 8005d9e:	4aa2      	ldr	r2, [pc, #648]	; (8006028 <GetHead+0x354>)
 8005da0:	3902      	subs	r1, #2
 8005da2:	6011      	str	r1, [r2, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 8005da4:	4aa0      	ldr	r2, [pc, #640]	; (8006028 <GetHead+0x354>)
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	3201      	adds	r2, #1
 8005daa:	d107      	bne.n	8005dbc <GetHead+0xe8>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d005      	beq.n	8005dbc <GetHead+0xe8>
 8005db0:	4b9d      	ldr	r3, [pc, #628]	; (8006028 <GetHead+0x354>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	4b9b      	ldr	r3, [pc, #620]	; (8006024 <GetHead+0x350>)
 8005db8:	3a02      	subs	r2, #2
 8005dba:	601a      	str	r2, [r3, #0]
	if(GSMSignal<=10){
 8005dbc:	4b9b      	ldr	r3, [pc, #620]	; (800602c <GetHead+0x358>)
 8005dbe:	681c      	ldr	r4, [r3, #0]
 8005dc0:	499b      	ldr	r1, [pc, #620]	; (8006030 <GetHead+0x35c>)
 8005dc2:	1c20      	adds	r0, r4, #0
 8005dc4:	f7fa fb8c 	bl	80004e0 <__aeabi_fcmple>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d17a      	bne.n	8005ec2 <GetHead+0x1ee>
	else if(getSpeed()>SpeedThr){
 8005dcc:	4b99      	ldr	r3, [pc, #612]	; (8006034 <GetHead+0x360>)
	return GPSInfo.speed;
 8005dce:	4a9a      	ldr	r2, [pc, #616]	; (8006038 <GetHead+0x364>)
 8005dd0:	6991      	ldr	r1, [r2, #24]
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	f7fa fb7a 	bl	80004cc <__aeabi_fcmplt>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d000      	beq.n	8005dde <GetHead+0x10a>
 8005ddc:	e086      	b.n	8005eec <GetHead+0x218>
	else if(EmergencyWireBreak>0){
 8005dde:	4b97      	ldr	r3, [pc, #604]	; (800603c <GetHead+0x368>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	dd00      	ble.n	8005de8 <GetHead+0x114>
 8005de6:	e090      	b.n	8005f0a <GetHead+0x236>
	else if(AccGyroStatus==1){
 8005de8:	4b95      	ldr	r3, [pc, #596]	; (8006040 <GetHead+0x36c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d100      	bne.n	8005df2 <GetHead+0x11e>
 8005df0:	e093      	b.n	8005f1a <GetHead+0x246>
	else if(AccGyroStatus==2){
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d100      	bne.n	8005df8 <GetHead+0x124>
 8005df6:	e095      	b.n	8005f24 <GetHead+0x250>
	else if(AccGyroStatus==3){
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d100      	bne.n	8005dfe <GetHead+0x12a>
 8005dfc:	e097      	b.n	8005f2e <GetHead+0x25a>
	else if(EmergencyStateON>0){
 8005dfe:	4b80      	ldr	r3, [pc, #512]	; (8006000 <GetHead+0x32c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	dd00      	ble.n	8005e08 <GetHead+0x134>
 8005e06:	e097      	b.n	8005f38 <GetHead+0x264>
	else if(EmergencyStateOFF>0){
 8005e08:	4b7e      	ldr	r3, [pc, #504]	; (8006004 <GetHead+0x330>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dd00      	ble.n	8005e12 <GetHead+0x13e>
 8005e10:	e09a      	b.n	8005f48 <GetHead+0x274>
	else if(IgnitionTurnedON>0){
 8005e12:	4b7e      	ldr	r3, [pc, #504]	; (800600c <GetHead+0x338>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	dd00      	ble.n	8005e1c <GetHead+0x148>
 8005e1a:	e09d      	b.n	8005f58 <GetHead+0x284>
	else if(IgnitionTurnedOFF>0){
 8005e1c:	4b7c      	ldr	r3, [pc, #496]	; (8006010 <GetHead+0x33c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dd00      	ble.n	8005e26 <GetHead+0x152>
 8005e24:	e0a0      	b.n	8005f68 <GetHead+0x294>
	else if(BOX_STATE=='C'){
 8005e26:	4b87      	ldr	r3, [pc, #540]	; (8006044 <GetHead+0x370>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b43      	cmp	r3, #67	; 0x43
 8005e2c:	d100      	bne.n	8005e30 <GetHead+0x15c>
 8005e2e:	e0a3      	b.n	8005f78 <GetHead+0x2a4>
	else if(InternalBatterLow>0){
 8005e30:	4b7a      	ldr	r3, [pc, #488]	; (800601c <GetHead+0x348>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dd00      	ble.n	8005e3a <GetHead+0x166>
 8005e38:	e0a3      	b.n	8005f82 <GetHead+0x2ae>
	else if(InternalBatteryChargedAgain>0){
 8005e3a:	4b79      	ldr	r3, [pc, #484]	; (8006020 <GetHead+0x34c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	dd00      	ble.n	8005e44 <GetHead+0x170>
 8005e42:	e0a6      	b.n	8005f92 <GetHead+0x2be>
	else if(MainBatteryDisconnect>0){
 8005e44:	4b77      	ldr	r3, [pc, #476]	; (8006024 <GetHead+0x350>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	dd00      	ble.n	8005e4e <GetHead+0x17a>
 8005e4c:	e0a9      	b.n	8005fa2 <GetHead+0x2ce>
	else if(MainBatteryReconnect>0){
 8005e4e:	4b76      	ldr	r3, [pc, #472]	; (8006028 <GetHead+0x354>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	dd00      	ble.n	8005e58 <GetHead+0x184>
 8005e56:	e0ac      	b.n	8005fb2 <GetHead+0x2de>
	else if(HistoryPVTData>0){
 8005e58:	4b7b      	ldr	r3, [pc, #492]	; (8006048 <GetHead+0x374>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dd00      	ble.n	8005e62 <GetHead+0x18e>
 8005e60:	e0af      	b.n	8005fc2 <GetHead+0x2ee>
	else if(HealthPacket>0){
 8005e62:	4b7a      	ldr	r3, [pc, #488]	; (800604c <GetHead+0x378>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dd00      	ble.n	8005e6c <GetHead+0x198>
 8005e6a:	e0b2      	b.n	8005fd2 <GetHead+0x2fe>
	else if(OTAParameterChange>0){
 8005e6c:	4b78      	ldr	r3, [pc, #480]	; (8006050 <GetHead+0x37c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	dc00      	bgt.n	8005e76 <GetHead+0x1a2>
 8005e74:	e0b5      	b.n	8005fe2 <GetHead+0x30e>
		strcat(Head,AlartStr_OTAParameterChange);
 8005e76:	4977      	ldr	r1, [pc, #476]	; (8006054 <GetHead+0x380>)
 8005e78:	485c      	ldr	r0, [pc, #368]	; (8005fec <GetHead+0x318>)
 8005e7a:	f008 f8f3 	bl	800e064 <strcat>
		OTAParameterChange=0;
 8005e7e:	4b74      	ldr	r3, [pc, #464]	; (8006050 <GetHead+0x37c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e036      	b.n	8005ef4 <GetHead+0x220>
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 8005e86:	4b5f      	ldr	r3, [pc, #380]	; (8006004 <GetHead+0x330>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	d000      	beq.n	8005e90 <GetHead+0x1bc>
 8005e8e:	e747      	b.n	8005d20 <GetHead+0x4c>
 8005e90:	2a00      	cmp	r2, #0
 8005e92:	d000      	beq.n	8005e96 <GetHead+0x1c2>
 8005e94:	e744      	b.n	8005d20 <GetHead+0x4c>
 8005e96:	4b5b      	ldr	r3, [pc, #364]	; (8006004 <GetHead+0x330>)
 8005e98:	3201      	adds	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	4b58      	ldr	r3, [pc, #352]	; (8006000 <GetHead+0x32c>)
 8005e9e:	3a02      	subs	r2, #2
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e73d      	b.n	8005d20 <GetHead+0x4c>
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 8005ea4:	4b5a      	ldr	r3, [pc, #360]	; (8006010 <GetHead+0x33c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	d000      	beq.n	8005eae <GetHead+0x1da>
 8005eac:	e747      	b.n	8005d3e <GetHead+0x6a>
 8005eae:	2a00      	cmp	r2, #0
 8005eb0:	d000      	beq.n	8005eb4 <GetHead+0x1e0>
 8005eb2:	e744      	b.n	8005d3e <GetHead+0x6a>
 8005eb4:	4b56      	ldr	r3, [pc, #344]	; (8006010 <GetHead+0x33c>)
 8005eb6:	3201      	adds	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	4b54      	ldr	r3, [pc, #336]	; (800600c <GetHead+0x338>)
 8005ebc:	3a02      	subs	r2, #2
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e73d      	b.n	8005d3e <GetHead+0x6a>
		strcat(Head,AlartStr_HistoryPVTData);
 8005ec2:	4965      	ldr	r1, [pc, #404]	; (8006058 <GetHead+0x384>)
 8005ec4:	4849      	ldr	r0, [pc, #292]	; (8005fec <GetHead+0x318>)
 8005ec6:	f008 f8cd 	bl	800e064 <strcat>
			strcat(Head,PacketStatusStrHist);
 8005eca:	4c48      	ldr	r4, [pc, #288]	; (8005fec <GetHead+0x318>)
 8005ecc:	0020      	movs	r0, r4
 8005ece:	f7fa f91b 	bl	8000108 <strlen>
 8005ed2:	1820      	adds	r0, r4, r0
 8005ed4:	4961      	ldr	r1, [pc, #388]	; (800605c <GetHead+0x388>)
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	f008 fa84 	bl	800e3e4 <memcpy>
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 8005edc:	4b60      	ldr	r3, [pc, #384]	; (8006060 <GetHead+0x38c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	dd02      	ble.n	8005eea <GetHead+0x216>
 8005ee4:	4b5e      	ldr	r3, [pc, #376]	; (8006060 <GetHead+0x38c>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
}
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
		strcat(Head,AlartStr_OverSpeed);
 8005eec:	495d      	ldr	r1, [pc, #372]	; (8006064 <GetHead+0x390>)
 8005eee:	483f      	ldr	r0, [pc, #252]	; (8005fec <GetHead+0x318>)
 8005ef0:	f008 f8b8 	bl	800e064 <strcat>
	if(GSMSignal<=10){
 8005ef4:	494e      	ldr	r1, [pc, #312]	; (8006030 <GetHead+0x35c>)
 8005ef6:	1c20      	adds	r0, r4, #0
 8005ef8:	f7fa faf2 	bl	80004e0 <__aeabi_fcmple>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d1e4      	bne.n	8005eca <GetHead+0x1f6>
		strcat(Head,PacketStatusStrLive);
 8005f00:	4959      	ldr	r1, [pc, #356]	; (8006068 <GetHead+0x394>)
 8005f02:	483a      	ldr	r0, [pc, #232]	; (8005fec <GetHead+0x318>)
 8005f04:	f008 f8ae 	bl	800e064 <strcat>
 8005f08:	e7e8      	b.n	8005edc <GetHead+0x208>
		strcat(Head,AlartStr_EmergencyWireBreak);
 8005f0a:	4958      	ldr	r1, [pc, #352]	; (800606c <GetHead+0x398>)
 8005f0c:	4837      	ldr	r0, [pc, #220]	; (8005fec <GetHead+0x318>)
 8005f0e:	f008 f8a9 	bl	800e064 <strcat>
		EmergencyWireBreak=0;
 8005f12:	4b4a      	ldr	r3, [pc, #296]	; (800603c <GetHead+0x368>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e7ec      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_HarshAcceleration);
 8005f1a:	4955      	ldr	r1, [pc, #340]	; (8006070 <GetHead+0x39c>)
 8005f1c:	4833      	ldr	r0, [pc, #204]	; (8005fec <GetHead+0x318>)
 8005f1e:	f008 f8a1 	bl	800e064 <strcat>
 8005f22:	e7e7      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_HarshBreaking);
 8005f24:	4953      	ldr	r1, [pc, #332]	; (8006074 <GetHead+0x3a0>)
 8005f26:	4831      	ldr	r0, [pc, #196]	; (8005fec <GetHead+0x318>)
 8005f28:	f008 f89c 	bl	800e064 <strcat>
 8005f2c:	e7e2      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_RashTurning);
 8005f2e:	4952      	ldr	r1, [pc, #328]	; (8006078 <GetHead+0x3a4>)
 8005f30:	482e      	ldr	r0, [pc, #184]	; (8005fec <GetHead+0x318>)
 8005f32:	f008 f897 	bl	800e064 <strcat>
 8005f36:	e7dd      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_EmergencyStateON);
 8005f38:	4950      	ldr	r1, [pc, #320]	; (800607c <GetHead+0x3a8>)
 8005f3a:	482c      	ldr	r0, [pc, #176]	; (8005fec <GetHead+0x318>)
 8005f3c:	f008 f892 	bl	800e064 <strcat>
		EmergencyStateON=0;
 8005f40:	4b2f      	ldr	r3, [pc, #188]	; (8006000 <GetHead+0x32c>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e7d5      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_EmergencyStateOFF);
 8005f48:	494d      	ldr	r1, [pc, #308]	; (8006080 <GetHead+0x3ac>)
 8005f4a:	4828      	ldr	r0, [pc, #160]	; (8005fec <GetHead+0x318>)
 8005f4c:	f008 f88a 	bl	800e064 <strcat>
		EmergencyStateOFF=0;
 8005f50:	4b2c      	ldr	r3, [pc, #176]	; (8006004 <GetHead+0x330>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e7cd      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_IgnitionTurnedON);
 8005f58:	494a      	ldr	r1, [pc, #296]	; (8006084 <GetHead+0x3b0>)
 8005f5a:	4824      	ldr	r0, [pc, #144]	; (8005fec <GetHead+0x318>)
 8005f5c:	f008 f882 	bl	800e064 <strcat>
		IgnitionTurnedON=0;
 8005f60:	4b2a      	ldr	r3, [pc, #168]	; (800600c <GetHead+0x338>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e7c5      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 8005f68:	4947      	ldr	r1, [pc, #284]	; (8006088 <GetHead+0x3b4>)
 8005f6a:	4820      	ldr	r0, [pc, #128]	; (8005fec <GetHead+0x318>)
 8005f6c:	f008 f87a 	bl	800e064 <strcat>
		IgnitionTurnedOFF=0;
 8005f70:	4b27      	ldr	r3, [pc, #156]	; (8006010 <GetHead+0x33c>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e7bd      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_BoxTemper);
 8005f78:	4944      	ldr	r1, [pc, #272]	; (800608c <GetHead+0x3b8>)
 8005f7a:	481c      	ldr	r0, [pc, #112]	; (8005fec <GetHead+0x318>)
 8005f7c:	f008 f872 	bl	800e064 <strcat>
 8005f80:	e7b8      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_InternalBatterLow);
 8005f82:	4943      	ldr	r1, [pc, #268]	; (8006090 <GetHead+0x3bc>)
 8005f84:	4819      	ldr	r0, [pc, #100]	; (8005fec <GetHead+0x318>)
 8005f86:	f008 f86d 	bl	800e064 <strcat>
		InternalBatterLow=0;
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <GetHead+0x348>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e7b0      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 8005f92:	4940      	ldr	r1, [pc, #256]	; (8006094 <GetHead+0x3c0>)
 8005f94:	4815      	ldr	r0, [pc, #84]	; (8005fec <GetHead+0x318>)
 8005f96:	f008 f865 	bl	800e064 <strcat>
		InternalBatteryChargedAgain=0;
 8005f9a:	4b21      	ldr	r3, [pc, #132]	; (8006020 <GetHead+0x34c>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e7a8      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 8005fa2:	493d      	ldr	r1, [pc, #244]	; (8006098 <GetHead+0x3c4>)
 8005fa4:	4811      	ldr	r0, [pc, #68]	; (8005fec <GetHead+0x318>)
 8005fa6:	f008 f85d 	bl	800e064 <strcat>
		MainBatteryDisconnect=0;
 8005faa:	4b1e      	ldr	r3, [pc, #120]	; (8006024 <GetHead+0x350>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e7a0      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_MainBatteryReconnect);
 8005fb2:	493a      	ldr	r1, [pc, #232]	; (800609c <GetHead+0x3c8>)
 8005fb4:	480d      	ldr	r0, [pc, #52]	; (8005fec <GetHead+0x318>)
 8005fb6:	f008 f855 	bl	800e064 <strcat>
		MainBatteryReconnect=0;
 8005fba:	4b1b      	ldr	r3, [pc, #108]	; (8006028 <GetHead+0x354>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e798      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_HistoryPVTData);
 8005fc2:	4925      	ldr	r1, [pc, #148]	; (8006058 <GetHead+0x384>)
 8005fc4:	4809      	ldr	r0, [pc, #36]	; (8005fec <GetHead+0x318>)
 8005fc6:	f008 f84d 	bl	800e064 <strcat>
		HistoryPVTData=0;
 8005fca:	4b1f      	ldr	r3, [pc, #124]	; (8006048 <GetHead+0x374>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e790      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_HealthPacket);
 8005fd2:	4933      	ldr	r1, [pc, #204]	; (80060a0 <GetHead+0x3cc>)
 8005fd4:	4805      	ldr	r0, [pc, #20]	; (8005fec <GetHead+0x318>)
 8005fd6:	f008 f845 	bl	800e064 <strcat>
		HealthPacket=0;
 8005fda:	4b1c      	ldr	r3, [pc, #112]	; (800604c <GetHead+0x378>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
 8005fe0:	e788      	b.n	8005ef4 <GetHead+0x220>
		strcat(Head,AlartStr_NormalPkt);
 8005fe2:	4930      	ldr	r1, [pc, #192]	; (80060a4 <GetHead+0x3d0>)
 8005fe4:	4801      	ldr	r0, [pc, #4]	; (8005fec <GetHead+0x318>)
 8005fe6:	f008 f83d 	bl	800e064 <strcat>
 8005fea:	e783      	b.n	8005ef4 <GetHead+0x220>
 8005fec:	2000124c 	.word	0x2000124c
 8005ff0:	200000a0 	.word	0x200000a0
 8005ff4:	08011dd8 	.word	0x08011dd8
 8005ff8:	200000b8 	.word	0x200000b8
 8005ffc:	200033b4 	.word	0x200033b4
 8006000:	20000098 	.word	0x20000098
 8006004:	200004c0 	.word	0x200004c0
 8006008:	20001328 	.word	0x20001328
 800600c:	200012f4 	.word	0x200012f4
 8006010:	200012f0 	.word	0x200012f0
 8006014:	200012ec 	.word	0x200012ec
 8006018:	40400000 	.word	0x40400000
 800601c:	200012f8 	.word	0x200012f8
 8006020:	200012fc 	.word	0x200012fc
 8006024:	2000133c 	.word	0x2000133c
 8006028:	20001340 	.word	0x20001340
 800602c:	200011d0 	.word	0x200011d0
 8006030:	41200000 	.word	0x41200000
 8006034:	200000b0 	.word	0x200000b0
 8006038:	200004fc 	.word	0x200004fc
 800603c:	200004c4 	.word	0x200004c4
 8006040:	20000318 	.word	0x20000318
 8006044:	20000090 	.word	0x20000090
 8006048:	200012b4 	.word	0x200012b4
 800604c:	200012b0 	.word	0x200012b0
 8006050:	20001344 	.word	0x20001344
 8006054:	20000078 	.word	0x20000078
 8006058:	20000038 	.word	0x20000038
 800605c:	08012de0 	.word	0x08012de0
 8006060:	2000031c 	.word	0x2000031c
 8006064:	20000080 	.word	0x20000080
 8006068:	200000ac 	.word	0x200000ac
 800606c:	20000018 	.word	0x20000018
 8006070:	20000020 	.word	0x20000020
 8006074:	20000028 	.word	0x20000028
 8006078:	20000088 	.word	0x20000088
 800607c:	20000010 	.word	0x20000010
 8006080:	20000008 	.word	0x20000008
 8006084:	20000048 	.word	0x20000048
 8006088:	20000040 	.word	0x20000040
 800608c:	20000000 	.word	0x20000000
 8006090:	20000050 	.word	0x20000050
 8006094:	20000058 	.word	0x20000058
 8006098:	20000060 	.word	0x20000060
 800609c:	20000068 	.word	0x20000068
 80060a0:	20000030 	.word	0x20000030
 80060a4:	20000070 	.word	0x20000070

080060a8 <TestRun>:
void TestRun(){
 80060a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060aa:	46d6      	mov	lr, sl
 80060ac:	464f      	mov	r7, r9
 80060ae:	4646      	mov	r6, r8
 80060b0:	b5c0      	push	{r6, r7, lr}
	if(errorlen>10){
 80060b2:	4bd3      	ldr	r3, [pc, #844]	; (8006400 <TestRun+0x358>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b0a      	cmp	r3, #10
 80060b8:	dd00      	ble.n	80060bc <TestRun+0x14>
 80060ba:	e18e      	b.n	80063da <TestRun+0x332>
	printInt(seqNo);
 80060bc:	4bd1      	ldr	r3, [pc, #836]	; (8006404 <TestRun+0x35c>)
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	f7fe f9ae 	bl	8004420 <printInt>
	MAINS_STATE=Read_DI_MAINS_STATE();
 80060c4:	f7fd fa40 	bl	8003548 <Read_DI_MAINS_STATE>
 80060c8:	4bcf      	ldr	r3, [pc, #828]	; (8006408 <TestRun+0x360>)
 80060ca:	6018      	str	r0, [r3, #0]
	ACC_STATE=Read_DI_ACC_STATE();
 80060cc:	f7fd fa46 	bl	800355c <Read_DI_ACC_STATE>
 80060d0:	4bce      	ldr	r3, [pc, #824]	; (800640c <TestRun+0x364>)
 80060d2:	6018      	str	r0, [r3, #0]
	BOX_STATE=Read_DI_BOX_STATE();
 80060d4:	f7fd fa4c 	bl	8003570 <Read_DI_BOX_STATE>
 80060d8:	4bcd      	ldr	r3, [pc, #820]	; (8006410 <TestRun+0x368>)
 80060da:	7018      	strb	r0, [r3, #0]
	SOS_STATE=Read_DI_SOS_STATE();
 80060dc:	f7fd fa58 	bl	8003590 <Read_DI_SOS_STATE>
 80060e0:	4bcc      	ldr	r3, [pc, #816]	; (8006414 <TestRun+0x36c>)
 80060e2:	6018      	str	r0, [r3, #0]
	EXT_B=Read_EXT_B_SENSE();
 80060e4:	f7fd f8f8 	bl	80032d8 <Read_EXT_B_SENSE>
 80060e8:	1c04      	adds	r4, r0, #0
 80060ea:	4bcb      	ldr	r3, [pc, #812]	; (8006418 <TestRun+0x370>)
 80060ec:	6018      	str	r0, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 80060ee:	f7fd f905 	bl	80032fc <Read_INT_B_SENSE>
 80060f2:	4bca      	ldr	r3, [pc, #808]	; (800641c <TestRun+0x374>)
 80060f4:	6018      	str	r0, [r3, #0]
	adc[0]=Read_ADC1();
 80060f6:	f7fd f8c7 	bl	8003288 <Read_ADC1>
 80060fa:	4dc9      	ldr	r5, [pc, #804]	; (8006420 <TestRun+0x378>)
 80060fc:	6028      	str	r0, [r5, #0]
	adc[1]=Read_ADC2();
 80060fe:	f7fd f8d7 	bl	80032b0 <Read_ADC2>
 8006102:	6068      	str	r0, [r5, #4]
	if(EXT_B>7){
 8006104:	49c7      	ldr	r1, [pc, #796]	; (8006424 <TestRun+0x37c>)
 8006106:	1c20      	adds	r0, r4, #0
 8006108:	f7fa f9f4 	bl	80004f4 <__aeabi_fcmpgt>
 800610c:	2800      	cmp	r0, #0
 800610e:	d100      	bne.n	8006112 <TestRun+0x6a>
 8006110:	e16f      	b.n	80063f2 <TestRun+0x34a>
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 8006112:	2201      	movs	r2, #1
 8006114:	2101      	movs	r1, #1
 8006116:	48c4      	ldr	r0, [pc, #784]	; (8006428 <TestRun+0x380>)
 8006118:	f001 fdd2 	bl	8007cc0 <HAL_GPIO_WritePin>
memset(INSMSno,0,30);
 800611c:	4bc3      	ldr	r3, [pc, #780]	; (800642c <TestRun+0x384>)
 800611e:	221e      	movs	r2, #30
 8006120:	2100      	movs	r1, #0
 8006122:	4699      	mov	r9, r3
 8006124:	0018      	movs	r0, r3
 8006126:	f007 ff95 	bl	800e054 <memset>
memset(OUTSMSno,0,30);
 800612a:	4bc1      	ldr	r3, [pc, #772]	; (8006430 <TestRun+0x388>)
 800612c:	221e      	movs	r2, #30
 800612e:	2100      	movs	r1, #0
 8006130:	4698      	mov	r8, r3
 8006132:	0018      	movs	r0, r3
 8006134:	f007 ff8e 	bl	800e054 <memset>
memset(EmgIP,0,50);
 8006138:	4fbe      	ldr	r7, [pc, #760]	; (8006434 <TestRun+0x38c>)
 800613a:	2232      	movs	r2, #50	; 0x32
 800613c:	2100      	movs	r1, #0
 800613e:	0038      	movs	r0, r7
 8006140:	f007 ff88 	bl	800e054 <memset>
memset(RegIP,0,50);
 8006144:	4ebc      	ldr	r6, [pc, #752]	; (8006438 <TestRun+0x390>)
 8006146:	2232      	movs	r2, #50	; 0x32
 8006148:	2100      	movs	r1, #0
 800614a:	0030      	movs	r0, r6
 800614c:	f007 ff82 	bl	800e054 <memset>
memset(TracIP,0,50);
 8006150:	4dba      	ldr	r5, [pc, #744]	; (800643c <TestRun+0x394>)
 8006152:	2232      	movs	r2, #50	; 0x32
 8006154:	2100      	movs	r1, #0
 8006156:	0028      	movs	r0, r5
 8006158:	f007 ff7c 	bl	800e054 <memset>
memset(simop,0,25);
 800615c:	4cb8      	ldr	r4, [pc, #736]	; (8006440 <TestRun+0x398>)
 800615e:	2219      	movs	r2, #25
 8006160:	2100      	movs	r1, #0
 8006162:	0020      	movs	r0, r4
 8006164:	f007 ff76 	bl	800e054 <memset>
strcpy(INSMSno,readINSMSno());
 8006168:	f7fe f81a 	bl	80041a0 <readINSMSno>
 800616c:	0001      	movs	r1, r0
 800616e:	4648      	mov	r0, r9
 8006170:	f008 f925 	bl	800e3be <strcpy>
strcpy(OUTSMSno,readOUTSMSno());
 8006174:	f7fe f82a 	bl	80041cc <readOUTSMSno>
 8006178:	0001      	movs	r1, r0
 800617a:	4640      	mov	r0, r8
 800617c:	f008 f91f 	bl	800e3be <strcpy>
strcpy(EmgIP,readEmgIP());
 8006180:	f7fe f83a 	bl	80041f8 <readEmgIP>
 8006184:	0001      	movs	r1, r0
 8006186:	0038      	movs	r0, r7
 8006188:	f008 f919 	bl	800e3be <strcpy>
strcpy(RegIP,readRegIP());
 800618c:	f7fe f84a 	bl	8004224 <readRegIP>
 8006190:	0001      	movs	r1, r0
 8006192:	0030      	movs	r0, r6
 8006194:	f008 f913 	bl	800e3be <strcpy>
strcpy(TracIP,readTracIP());
 8006198:	f7fe f85a 	bl	8004250 <readTracIP>
 800619c:	0001      	movs	r1, r0
 800619e:	0028      	movs	r0, r5
 80061a0:	f008 f90d 	bl	800e3be <strcpy>
strcpy(simop, GSMSimOperator());
 80061a4:	f7fe ff5c 	bl	8005060 <GSMSimOperator>
 80061a8:	0001      	movs	r1, r0
 80061aa:	0020      	movs	r0, r4
 80061ac:	f008 f907 	bl	800e3be <strcpy>
	int GSMinfoT=tic();
 80061b0:	f7fe f976 	bl	80044a0 <tic>
	GSMCellInfo();
 80061b4:	f7fd fb56 	bl	8003864 <GSMCellInfo>
	GetHead();
 80061b8:	f7ff fd8c 	bl	8005cd4 <GetHead>
	if (debug==122){
 80061bc:	4ba1      	ldr	r3, [pc, #644]	; (8006444 <TestRun+0x39c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b7a      	cmp	r3, #122	; 0x7a
 80061c2:	d100      	bne.n	80061c6 <TestRun+0x11e>
 80061c4:	e16a      	b.n	800649c <TestRun+0x3f4>
	memset(data_LOGIN,0,100);
 80061c6:	4ca0      	ldr	r4, [pc, #640]	; (8006448 <TestRun+0x3a0>)
 80061c8:	2264      	movs	r2, #100	; 0x64
 80061ca:	2100      	movs	r1, #0
 80061cc:	0020      	movs	r0, r4
 80061ce:	f007 ff41 	bl	800e054 <memset>
	strcat(data_LOGIN,"$");
 80061d2:	0020      	movs	r0, r4
 80061d4:	f7f9 ff98 	bl	8000108 <strlen>
 80061d8:	1820      	adds	r0, r4, r0
 80061da:	4e9c      	ldr	r6, [pc, #624]	; (800644c <TestRun+0x3a4>)
 80061dc:	2202      	movs	r2, #2
 80061de:	0031      	movs	r1, r6
 80061e0:	f008 f900 	bl	800e3e4 <memcpy>
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 80061e4:	4b9a      	ldr	r3, [pc, #616]	; (8006450 <TestRun+0x3a8>)
 80061e6:	4699      	mov	r9, r3
 80061e8:	0019      	movs	r1, r3
 80061ea:	0020      	movs	r0, r4
 80061ec:	f007 ff3a 	bl	800e064 <strcat>
 80061f0:	0020      	movs	r0, r4
 80061f2:	f7f9 ff89 	bl	8000108 <strlen>
 80061f6:	1820      	adds	r0, r4, r0
 80061f8:	4d96      	ldr	r5, [pc, #600]	; (8006454 <TestRun+0x3ac>)
 80061fa:	2202      	movs	r2, #2
 80061fc:	0029      	movs	r1, r5
 80061fe:	f008 f8f1 	bl	800e3e4 <memcpy>
	strcat(data_LOGIN,"$");
 8006202:	0020      	movs	r0, r4
 8006204:	f7f9 ff80 	bl	8000108 <strlen>
 8006208:	1820      	adds	r0, r4, r0
 800620a:	2202      	movs	r2, #2
 800620c:	0031      	movs	r1, r6
 800620e:	f008 f8e9 	bl	800e3e4 <memcpy>
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8006212:	4b91      	ldr	r3, [pc, #580]	; (8006458 <TestRun+0x3b0>)
 8006214:	469a      	mov	sl, r3
 8006216:	0019      	movs	r1, r3
 8006218:	0020      	movs	r0, r4
 800621a:	f007 ff23 	bl	800e064 <strcat>
 800621e:	0020      	movs	r0, r4
 8006220:	f7f9 ff72 	bl	8000108 <strlen>
 8006224:	1820      	adds	r0, r4, r0
 8006226:	2202      	movs	r2, #2
 8006228:	0029      	movs	r1, r5
 800622a:	f008 f8db 	bl	800e3e4 <memcpy>
	strcat(data_LOGIN,"$");
 800622e:	0020      	movs	r0, r4
 8006230:	f7f9 ff6a 	bl	8000108 <strlen>
 8006234:	1820      	adds	r0, r4, r0
 8006236:	2202      	movs	r2, #2
 8006238:	0031      	movs	r1, r6
 800623a:	f008 f8d3 	bl	800e3e4 <memcpy>
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 800623e:	4f87      	ldr	r7, [pc, #540]	; (800645c <TestRun+0x3b4>)
 8006240:	0039      	movs	r1, r7
 8006242:	0020      	movs	r0, r4
 8006244:	f007 ff0e 	bl	800e064 <strcat>
 8006248:	0020      	movs	r0, r4
 800624a:	f7f9 ff5d 	bl	8000108 <strlen>
 800624e:	1820      	adds	r0, r4, r0
 8006250:	2202      	movs	r2, #2
 8006252:	0029      	movs	r1, r5
 8006254:	f008 f8c6 	bl	800e3e4 <memcpy>
	strcat(data_LOGIN,"$");
 8006258:	0020      	movs	r0, r4
 800625a:	f7f9 ff55 	bl	8000108 <strlen>
 800625e:	1820      	adds	r0, r4, r0
 8006260:	2202      	movs	r2, #2
 8006262:	0031      	movs	r1, r6
 8006264:	f008 f8be 	bl	800e3e4 <memcpy>
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",0.0E0.0N,");
 8006268:	0039      	movs	r1, r7
 800626a:	0020      	movs	r0, r4
 800626c:	f007 fefa 	bl	800e064 <strcat>
 8006270:	0020      	movs	r0, r4
 8006272:	f7f9 ff49 	bl	8000108 <strlen>
 8006276:	1820      	adds	r0, r4, r0
 8006278:	4979      	ldr	r1, [pc, #484]	; (8006460 <TestRun+0x3b8>)
 800627a:	220b      	movs	r2, #11
 800627c:	f008 f8b2 	bl	800e3e4 <memcpy>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 8006280:	0020      	movs	r0, r4
 8006282:	f7fe f8e3 	bl	800444c <nmea0183_checksum>
 8006286:	0002      	movs	r2, r0
 8006288:	4b76      	ldr	r3, [pc, #472]	; (8006464 <TestRun+0x3bc>)
 800628a:	4e77      	ldr	r6, [pc, #476]	; (8006468 <TestRun+0x3c0>)
 800628c:	4698      	mov	r8, r3
 800628e:	0019      	movs	r1, r3
 8006290:	0030      	movs	r0, r6
 8006292:	f007 fe73 	bl	800df7c <siprintf>
	strcat(data_LOGIN,checksum);
 8006296:	0031      	movs	r1, r6
 8006298:	0020      	movs	r0, r4
 800629a:	f007 fee3 	bl	800e064 <strcat>
	strcat(data_LOGIN,",*\0");
 800629e:	0020      	movs	r0, r4
 80062a0:	f7f9 ff32 	bl	8000108 <strlen>
 80062a4:	1820      	adds	r0, r4, r0
 80062a6:	4f71      	ldr	r7, [pc, #452]	; (800646c <TestRun+0x3c4>)
 80062a8:	3738      	adds	r7, #56	; 0x38
 80062aa:	2203      	movs	r2, #3
 80062ac:	0039      	movs	r1, r7
 80062ae:	f008 f899 	bl	800e3e4 <memcpy>
    memset(checksum,0,3);
 80062b2:	2203      	movs	r2, #3
 80062b4:	2100      	movs	r1, #0
 80062b6:	0030      	movs	r0, r6
 80062b8:	f007 fecc 	bl	800e054 <memset>
    memset(DataString,0,300);
 80062bc:	4c6c      	ldr	r4, [pc, #432]	; (8006470 <TestRun+0x3c8>)
 80062be:	2296      	movs	r2, #150	; 0x96
 80062c0:	0052      	lsls	r2, r2, #1
 80062c2:	2100      	movs	r1, #0
 80062c4:	0020      	movs	r0, r4
 80062c6:	f007 fec5 	bl	800e054 <memset>
	strcat(DataString,Head);strcat(DataString,",");
 80062ca:	496a      	ldr	r1, [pc, #424]	; (8006474 <TestRun+0x3cc>)
 80062cc:	0020      	movs	r0, r4
 80062ce:	f007 fec9 	bl	800e064 <strcat>
 80062d2:	0020      	movs	r0, r4
 80062d4:	f7f9 ff18 	bl	8000108 <strlen>
 80062d8:	1820      	adds	r0, r4, r0
 80062da:	2202      	movs	r2, #2
 80062dc:	0029      	movs	r1, r5
 80062de:	f008 f881 	bl	800e3e4 <memcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 80062e2:	4651      	mov	r1, sl
 80062e4:	0020      	movs	r0, r4
 80062e6:	f007 febd 	bl	800e064 <strcat>
 80062ea:	0020      	movs	r0, r4
 80062ec:	f7f9 ff0c 	bl	8000108 <strlen>
 80062f0:	1820      	adds	r0, r4, r0
 80062f2:	2202      	movs	r2, #2
 80062f4:	0029      	movs	r1, r5
 80062f6:	f008 f875 	bl	800e3e4 <memcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 80062fa:	4649      	mov	r1, r9
 80062fc:	0020      	movs	r0, r4
 80062fe:	f007 feb1 	bl	800e064 <strcat>
 8006302:	0020      	movs	r0, r4
 8006304:	f7f9 ff00 	bl	8000108 <strlen>
 8006308:	1820      	adds	r0, r4, r0
 800630a:	2202      	movs	r2, #2
 800630c:	0029      	movs	r1, r5
 800630e:	f008 f869 	bl	800e3e4 <memcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8006312:	4959      	ldr	r1, [pc, #356]	; (8006478 <TestRun+0x3d0>)
 8006314:	0020      	movs	r0, r4
 8006316:	f007 fea5 	bl	800e064 <strcat>
 800631a:	0020      	movs	r0, r4
 800631c:	f7f9 fef4 	bl	8000108 <strlen>
 8006320:	1820      	adds	r0, r4, r0
 8006322:	2202      	movs	r2, #2
 8006324:	0029      	movs	r1, r5
 8006326:	f008 f85d 	bl	800e3e4 <memcpy>
	strcat(DataString,simop);strcat(DataString,",");
 800632a:	4945      	ldr	r1, [pc, #276]	; (8006440 <TestRun+0x398>)
 800632c:	0020      	movs	r0, r4
 800632e:	f007 fe99 	bl	800e064 <strcat>
 8006332:	0020      	movs	r0, r4
 8006334:	f7f9 fee8 	bl	8000108 <strlen>
 8006338:	1820      	adds	r0, r4, r0
 800633a:	2202      	movs	r2, #2
 800633c:	0029      	movs	r1, r5
 800633e:	f008 f851 	bl	800e3e4 <memcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8006342:	494e      	ldr	r1, [pc, #312]	; (800647c <TestRun+0x3d4>)
 8006344:	0020      	movs	r0, r4
 8006346:	f007 fe8d 	bl	800e064 <strcat>
 800634a:	0020      	movs	r0, r4
 800634c:	f7f9 fedc 	bl	8000108 <strlen>
 8006350:	1820      	adds	r0, r4, r0
 8006352:	2202      	movs	r2, #2
 8006354:	0029      	movs	r1, r5
 8006356:	f008 f845 	bl	800e3e4 <memcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 800635a:	4949      	ldr	r1, [pc, #292]	; (8006480 <TestRun+0x3d8>)
 800635c:	0020      	movs	r0, r4
 800635e:	f007 fe81 	bl	800e064 <strcat>
 8006362:	0020      	movs	r0, r4
 8006364:	f7f9 fed0 	bl	8000108 <strlen>
 8006368:	1820      	adds	r0, r4, r0
 800636a:	2202      	movs	r2, #2
 800636c:	0029      	movs	r1, r5
 800636e:	f008 f839 	bl	800e3e4 <memcpy>
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8006372:	4944      	ldr	r1, [pc, #272]	; (8006484 <TestRun+0x3dc>)
 8006374:	0020      	movs	r0, r4
 8006376:	f007 fe75 	bl	800e064 <strcat>
    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 800637a:	0020      	movs	r0, r4
 800637c:	f7fe f866 	bl	800444c <nmea0183_checksum>
 8006380:	0002      	movs	r2, r0
 8006382:	4641      	mov	r1, r8
 8006384:	0030      	movs	r0, r6
 8006386:	f007 fdf9 	bl	800df7c <siprintf>
    strcat(DataString,checksum);
 800638a:	0031      	movs	r1, r6
 800638c:	0020      	movs	r0, r4
 800638e:	f007 fe69 	bl	800e064 <strcat>
    strcat(DataString,",*\0");
 8006392:	0020      	movs	r0, r4
 8006394:	f7f9 feb8 	bl	8000108 <strlen>
 8006398:	1820      	adds	r0, r4, r0
 800639a:	2203      	movs	r2, #3
 800639c:	0039      	movs	r1, r7
 800639e:	f008 f821 	bl	800e3e4 <memcpy>
    if (debug==1){
 80063a2:	4b28      	ldr	r3, [pc, #160]	; (8006444 <TestRun+0x39c>)
 80063a4:	681a      	ldr	r2, [r3, #0]
    if(ServerConnected==1){
 80063a6:	4b38      	ldr	r3, [pc, #224]	; (8006488 <TestRun+0x3e0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d100      	bne.n	80063b0 <TestRun+0x308>
 80063ae:	e0e9      	b.n	8006584 <TestRun+0x4dc>
    	if (debug==1){
 80063b0:	2a01      	cmp	r2, #1
 80063b2:	d100      	bne.n	80063b6 <TestRun+0x30e>
 80063b4:	e104      	b.n	80065c0 <TestRun+0x518>
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 80063b6:	4c2e      	ldr	r4, [pc, #184]	; (8006470 <TestRun+0x3c8>)
 80063b8:	0020      	movs	r0, r4
 80063ba:	f7f9 fea5 	bl	8000108 <strlen>
 80063be:	3001      	adds	r0, #1
 80063c0:	b281      	uxth	r1, r0
 80063c2:	0020      	movs	r0, r4
 80063c4:	f7fd fd36 	bl	8003e34 <WriteQdata>
    	RunCnt++;
 80063c8:	4b30      	ldr	r3, [pc, #192]	; (800648c <TestRun+0x3e4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3301      	adds	r3, #1
    	if(RunCnt>10){
 80063ce:	2b0a      	cmp	r3, #10
 80063d0:	dd00      	ble.n	80063d4 <TestRun+0x32c>
 80063d2:	e0f9      	b.n	80065c8 <TestRun+0x520>
    	RunCnt++;
 80063d4:	4a2d      	ldr	r2, [pc, #180]	; (800648c <TestRun+0x3e4>)
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e0e5      	b.n	80065a6 <TestRun+0x4fe>
		Debug_Tx("GSMUART error rebooting device");
 80063da:	482d      	ldr	r0, [pc, #180]	; (8006490 <TestRun+0x3e8>)
 80063dc:	f7fc ffa0 	bl	8003320 <Debug_Tx>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80063e0:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <TestRun+0x3ec>)
 80063e6:	4a2c      	ldr	r2, [pc, #176]	; (8006498 <TestRun+0x3f0>)
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80063ee:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80063f0:	e7fd      	b.n	80063ee <TestRun+0x346>
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
 80063f2:	2200      	movs	r2, #0
 80063f4:	2101      	movs	r1, #1
 80063f6:	480c      	ldr	r0, [pc, #48]	; (8006428 <TestRun+0x380>)
 80063f8:	f001 fc62 	bl	8007cc0 <HAL_GPIO_WritePin>
}
 80063fc:	e68e      	b.n	800611c <TestRun+0x74>
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	200035a4 	.word	0x200035a4
 8006404:	20003f00 	.word	0x20003f00
 8006408:	20001328 	.word	0x20001328
 800640c:	20000304 	.word	0x20000304
 8006410:	20000090 	.word	0x20000090
 8006414:	200033b4 	.word	0x200033b4
 8006418:	200004bc 	.word	0x200004bc
 800641c:	200012ec 	.word	0x200012ec
 8006420:	20003420 	.word	0x20003420
 8006424:	40e00000 	.word	0x40e00000
 8006428:	50000c00 	.word	0x50000c00
 800642c:	200012cc 	.word	0x200012cc
 8006430:	20001348 	.word	0x20001348
 8006434:	200004c8 	.word	0x200004c8
 8006438:	20003368 	.word	0x20003368
 800643c:	200033ec 	.word	0x200033ec
 8006440:	20003f04 	.word	0x20003f04
 8006444:	200000c4 	.word	0x200000c4
 8006448:	2000352c 	.word	0x2000352c
 800644c:	08012d2c 	.word	0x08012d2c
 8006450:	2000339c 	.word	0x2000339c
 8006454:	08011dd8 	.word	0x08011dd8
 8006458:	200012b8 	.word	0x200012b8
 800645c:	200000b8 	.word	0x200000b8
 8006460:	08012d30 	.word	0x08012d30
 8006464:	08012d3c 	.word	0x08012d3c
 8006468:	20003428 	.word	0x20003428
 800646c:	08011c00 	.word	0x08011c00
 8006470:	2000035c 	.word	0x2000035c
 8006474:	2000124c 	.word	0x2000124c
 8006478:	20003994 	.word	0x20003994
 800647c:	200033d4 	.word	0x200033d4
 8006480:	200039e0 	.word	0x200039e0
 8006484:	20000494 	.word	0x20000494
 8006488:	200033cc 	.word	0x200033cc
 800648c:	200033b0 	.word	0x200033b0
 8006490:	08012cbc 	.word	0x08012cbc
 8006494:	e000ed00 	.word	0xe000ed00
 8006498:	05fa0004 	.word	0x05fa0004
		memset(DataString,0,300);
 800649c:	4c4c      	ldr	r4, [pc, #304]	; (80065d0 <TestRun+0x528>)
 800649e:	2296      	movs	r2, #150	; 0x96
 80064a0:	0052      	lsls	r2, r2, #1
 80064a2:	2100      	movs	r1, #0
 80064a4:	0020      	movs	r0, r4
 80064a6:	f007 fdd5 	bl	800e054 <memset>
		strcat(DataString,"Head:");
 80064aa:	0020      	movs	r0, r4
 80064ac:	f7f9 fe2c 	bl	8000108 <strlen>
 80064b0:	1820      	adds	r0, r4, r0
 80064b2:	4948      	ldr	r1, [pc, #288]	; (80065d4 <TestRun+0x52c>)
 80064b4:	2206      	movs	r2, #6
 80064b6:	f007 ff95 	bl	800e3e4 <memcpy>
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 80064ba:	4947      	ldr	r1, [pc, #284]	; (80065d8 <TestRun+0x530>)
 80064bc:	0020      	movs	r0, r4
 80064be:	f007 fdd1 	bl	800e064 <strcat>
 80064c2:	0020      	movs	r0, r4
 80064c4:	f7f9 fe20 	bl	8000108 <strlen>
 80064c8:	1820      	adds	r0, r4, r0
 80064ca:	4944      	ldr	r1, [pc, #272]	; (80065dc <TestRun+0x534>)
 80064cc:	2208      	movs	r2, #8
 80064ce:	f007 ff89 	bl	800e3e4 <memcpy>
		strcat(DataString,Regno);strcat(DataString,"\nGPSDS:");
 80064d2:	4943      	ldr	r1, [pc, #268]	; (80065e0 <TestRun+0x538>)
 80064d4:	0020      	movs	r0, r4
 80064d6:	f007 fdc5 	bl	800e064 <strcat>
 80064da:	0020      	movs	r0, r4
 80064dc:	f7f9 fe14 	bl	8000108 <strlen>
 80064e0:	1820      	adds	r0, r4, r0
 80064e2:	4940      	ldr	r1, [pc, #256]	; (80065e4 <TestRun+0x53c>)
 80064e4:	2208      	movs	r2, #8
 80064e6:	f007 ff7d 	bl	800e3e4 <memcpy>
		strcat(DataString,gpsDataRet);strcat(DataString,"\nIMEI:");
 80064ea:	493f      	ldr	r1, [pc, #252]	; (80065e8 <TestRun+0x540>)
 80064ec:	0020      	movs	r0, r4
 80064ee:	f007 fdb9 	bl	800e064 <strcat>
 80064f2:	0020      	movs	r0, r4
 80064f4:	f7f9 fe08 	bl	8000108 <strlen>
 80064f8:	1820      	adds	r0, r4, r0
 80064fa:	493c      	ldr	r1, [pc, #240]	; (80065ec <TestRun+0x544>)
 80064fc:	2207      	movs	r2, #7
 80064fe:	f007 ff71 	bl	800e3e4 <memcpy>
		strcat(DataString,IMEI);strcat(DataString,"\nSIMOP:");
 8006502:	493b      	ldr	r1, [pc, #236]	; (80065f0 <TestRun+0x548>)
 8006504:	0020      	movs	r0, r4
 8006506:	f007 fdad 	bl	800e064 <strcat>
 800650a:	0020      	movs	r0, r4
 800650c:	f7f9 fdfc 	bl	8000108 <strlen>
 8006510:	1820      	adds	r0, r4, r0
 8006512:	4938      	ldr	r1, [pc, #224]	; (80065f4 <TestRun+0x54c>)
 8006514:	2208      	movs	r2, #8
 8006516:	f007 ff65 	bl	800e3e4 <memcpy>
		strcat(DataString,simop);strcat(DataString,"\nStratusString:");
 800651a:	4937      	ldr	r1, [pc, #220]	; (80065f8 <TestRun+0x550>)
 800651c:	0020      	movs	r0, r4
 800651e:	f007 fda1 	bl	800e064 <strcat>
 8006522:	0020      	movs	r0, r4
 8006524:	f7f9 fdf0 	bl	8000108 <strlen>
 8006528:	1820      	adds	r0, r4, r0
 800652a:	4934      	ldr	r1, [pc, #208]	; (80065fc <TestRun+0x554>)
 800652c:	2210      	movs	r2, #16
 800652e:	f007 ff59 	bl	800e3e4 <memcpy>
		strcat(DataString,StatusStrng);strcat(DataString,"\nGsminfo:");
 8006532:	4933      	ldr	r1, [pc, #204]	; (8006600 <TestRun+0x558>)
 8006534:	0020      	movs	r0, r4
 8006536:	f007 fd95 	bl	800e064 <strcat>
 800653a:	0020      	movs	r0, r4
 800653c:	f7f9 fde4 	bl	8000108 <strlen>
 8006540:	1820      	adds	r0, r4, r0
 8006542:	4930      	ldr	r1, [pc, #192]	; (8006604 <TestRun+0x55c>)
 8006544:	220a      	movs	r2, #10
 8006546:	f007 ff4d 	bl	800e3e4 <memcpy>
		strcat(DataString,gsminfo);strcat(DataString,"\nDig_io:");
 800654a:	492f      	ldr	r1, [pc, #188]	; (8006608 <TestRun+0x560>)
 800654c:	0020      	movs	r0, r4
 800654e:	f007 fd89 	bl	800e064 <strcat>
 8006552:	0020      	movs	r0, r4
 8006554:	f7f9 fdd8 	bl	8000108 <strlen>
 8006558:	1820      	adds	r0, r4, r0
 800655a:	492c      	ldr	r1, [pc, #176]	; (800660c <TestRun+0x564>)
 800655c:	2209      	movs	r2, #9
 800655e:	f007 ff41 	bl	800e3e4 <memcpy>
		strcat(DataString,Dig_io);strcat(DataString,",\n\0");
 8006562:	492b      	ldr	r1, [pc, #172]	; (8006610 <TestRun+0x568>)
 8006564:	0020      	movs	r0, r4
 8006566:	f007 fd7d 	bl	800e064 <strcat>
 800656a:	0020      	movs	r0, r4
 800656c:	f7f9 fdcc 	bl	8000108 <strlen>
 8006570:	1820      	adds	r0, r4, r0
 8006572:	4928      	ldr	r1, [pc, #160]	; (8006614 <TestRun+0x56c>)
 8006574:	3134      	adds	r1, #52	; 0x34
 8006576:	2203      	movs	r2, #3
 8006578:	f007 ff34 	bl	800e3e4 <memcpy>
		Debug_Tx(DataString);
 800657c:	0020      	movs	r0, r4
 800657e:	f7fc fecf 	bl	8003320 <Debug_Tx>
 8006582:	e620      	b.n	80061c6 <TestRun+0x11e>
    		ProcessTCPAll( ReadMDataS);
 8006584:	4c24      	ldr	r4, [pc, #144]	; (8006618 <TestRun+0x570>)
 8006586:	e002      	b.n	800658e <TestRun+0x4e6>
 8006588:	0020      	movs	r0, r4
 800658a:	f7fe fea3 	bl	80052d4 <ProcessTCPAll>
    	while(ReadQdata()>0){
 800658e:	f7fd fc73 	bl	8003e78 <ReadQdata>
 8006592:	2800      	cmp	r0, #0
 8006594:	dcf8      	bgt.n	8006588 <TestRun+0x4e0>
    	int tcpsendT=tic();
 8006596:	f7fd ff83 	bl	80044a0 <tic>
     	ProcessTCPAll(DataString);
 800659a:	480d      	ldr	r0, [pc, #52]	; (80065d0 <TestRun+0x528>)
 800659c:	f7fe fe9a 	bl	80052d4 <ProcessTCPAll>
     	RunCnt=0;
 80065a0:	4b1e      	ldr	r3, [pc, #120]	; (800661c <TestRun+0x574>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	601a      	str	r2, [r3, #0]
	TimeCount=tic();
 80065a6:	f7fd ff7b 	bl	80044a0 <tic>
 80065aa:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <TestRun+0x578>)
 80065ac:	6018      	str	r0, [r3, #0]
 	seqNo=seqNo+1;
 80065ae:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <TestRun+0x57c>)
 80065b0:	6813      	ldr	r3, [r2, #0]
 80065b2:	3301      	adds	r3, #1
 80065b4:	6013      	str	r3, [r2, #0]
}
 80065b6:	bce0      	pop	{r5, r6, r7}
 80065b8:	46ba      	mov	sl, r7
 80065ba:	46b1      	mov	r9, r6
 80065bc:	46a8      	mov	r8, r5
 80065be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    		Debug_Tx("No GSM Signal Saving Data to Memory----");
 80065c0:	4819      	ldr	r0, [pc, #100]	; (8006628 <TestRun+0x580>)
 80065c2:	f7fc fead 	bl	8003320 <Debug_Tx>
 80065c6:	e6f6      	b.n	80063b6 <TestRun+0x30e>
    		RunCnt=0;
 80065c8:	4b14      	ldr	r3, [pc, #80]	; (800661c <TestRun+0x574>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e7ea      	b.n	80065a6 <TestRun+0x4fe>
 80065d0:	2000035c 	.word	0x2000035c
 80065d4:	08012cdc 	.word	0x08012cdc
 80065d8:	2000124c 	.word	0x2000124c
 80065dc:	08012ce4 	.word	0x08012ce4
 80065e0:	2000339c 	.word	0x2000339c
 80065e4:	08012cec 	.word	0x08012cec
 80065e8:	20003994 	.word	0x20003994
 80065ec:	08012cf4 	.word	0x08012cf4
 80065f0:	200012b8 	.word	0x200012b8
 80065f4:	08012cfc 	.word	0x08012cfc
 80065f8:	20003f04 	.word	0x20003f04
 80065fc:	08012d04 	.word	0x08012d04
 8006600:	200033d4 	.word	0x200033d4
 8006604:	08012d14 	.word	0x08012d14
 8006608:	200039e0 	.word	0x200039e0
 800660c:	08012d20 	.word	0x08012d20
 8006610:	20000494 	.word	0x20000494
 8006614:	08011c00 	.word	0x08011c00
 8006618:	20002368 	.word	0x20002368
 800661c:	200033b0 	.word	0x200033b0
 8006620:	200033e8 	.word	0x200033e8
 8006624:	20003f00 	.word	0x20003f00
 8006628:	08012d44 	.word	0x08012d44

0800662c <StartDefaultTask>:
{
 800662c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800662e:	46c6      	mov	lr, r8
 8006630:	b500      	push	{lr}
 8006632:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8006634:	487c      	ldr	r0, [pc, #496]	; (8006828 <StartDefaultTask+0x1fc>)
 8006636:	23fa      	movs	r3, #250	; 0xfa
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	9302      	str	r3, [sp, #8]
 800663c:	2301      	movs	r3, #1
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	2416      	movs	r4, #22
 8006642:	446c      	add	r4, sp
 8006644:	9400      	str	r4, [sp, #0]
 8006646:	2275      	movs	r2, #117	; 0x75
 8006648:	21d0      	movs	r1, #208	; 0xd0
 800664a:	f001 fde7 	bl	800821c <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800664e:	7823      	ldrb	r3, [r4, #0]
 8006650:	2b68      	cmp	r3, #104	; 0x68
 8006652:	d100      	bne.n	8006656 <StartDefaultTask+0x2a>
 8006654:	e0b0      	b.n	80067b8 <StartDefaultTask+0x18c>
		Data = 0;
 8006656:	2517      	movs	r5, #23
 8006658:	446d      	add	r5, sp
 800665a:	2300      	movs	r3, #0
 800665c:	4698      	mov	r8, r3
 800665e:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8006660:	4e71      	ldr	r6, [pc, #452]	; (8006828 <StartDefaultTask+0x1fc>)
 8006662:	27fa      	movs	r7, #250	; 0xfa
 8006664:	00bf      	lsls	r7, r7, #2
 8006666:	9702      	str	r7, [sp, #8]
 8006668:	2401      	movs	r4, #1
 800666a:	9401      	str	r4, [sp, #4]
 800666c:	9500      	str	r5, [sp, #0]
 800666e:	0023      	movs	r3, r4
 8006670:	226b      	movs	r2, #107	; 0x6b
 8006672:	21d0      	movs	r1, #208	; 0xd0
 8006674:	0030      	movs	r0, r6
 8006676:	f001 fcd3 	bl	8008020 <HAL_I2C_Mem_Write>
				Data = 0x07;
 800667a:	2307      	movs	r3, #7
 800667c:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800667e:	9702      	str	r7, [sp, #8]
 8006680:	9401      	str	r4, [sp, #4]
 8006682:	9500      	str	r5, [sp, #0]
 8006684:	0023      	movs	r3, r4
 8006686:	2219      	movs	r2, #25
 8006688:	21d0      	movs	r1, #208	; 0xd0
 800668a:	0030      	movs	r0, r6
 800668c:	f001 fcc8 	bl	8008020 <HAL_I2C_Mem_Write>
				Data = 0x00;
 8006690:	4643      	mov	r3, r8
 8006692:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8006694:	9702      	str	r7, [sp, #8]
 8006696:	9401      	str	r4, [sp, #4]
 8006698:	9500      	str	r5, [sp, #0]
 800669a:	0023      	movs	r3, r4
 800669c:	221c      	movs	r2, #28
 800669e:	21d0      	movs	r1, #208	; 0xd0
 80066a0:	0030      	movs	r0, r6
 80066a2:	f001 fcbd 	bl	8008020 <HAL_I2C_Mem_Write>
				Data = 0x00;
 80066a6:	4643      	mov	r3, r8
 80066a8:	702b      	strb	r3, [r5, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80066aa:	9702      	str	r7, [sp, #8]
 80066ac:	9401      	str	r4, [sp, #4]
 80066ae:	9500      	str	r5, [sp, #0]
 80066b0:	0023      	movs	r3, r4
 80066b2:	221b      	movs	r2, #27
 80066b4:	21d0      	movs	r1, #208	; 0xd0
 80066b6:	0030      	movs	r0, r6
 80066b8:	f001 fcb2 	bl	8008020 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 80066bc:	485b      	ldr	r0, [pc, #364]	; (800682c <StartDefaultTask+0x200>)
 80066be:	f7fc fe2f 	bl	8003320 <Debug_Tx>
	ACC_GYRO_data[0]=0;
 80066c2:	4b5b      	ldr	r3, [pc, #364]	; (8006830 <StartDefaultTask+0x204>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 80066c8:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 80066ca:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 80066cc:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 80066ce:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 80066d0:	615a      	str	r2, [r3, #20]
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80066d2:	2680      	movs	r6, #128	; 0x80
 80066d4:	0236      	lsls	r6, r6, #8
 80066d6:	25a0      	movs	r5, #160	; 0xa0
 80066d8:	05ed      	lsls	r5, r5, #23
 80066da:	2201      	movs	r2, #1
 80066dc:	0031      	movs	r1, r6
 80066de:	0028      	movs	r0, r5
 80066e0:	f001 faee 	bl	8007cc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80066e4:	4c53      	ldr	r4, [pc, #332]	; (8006834 <StartDefaultTask+0x208>)
 80066e6:	2201      	movs	r2, #1
 80066e8:	2140      	movs	r1, #64	; 0x40
 80066ea:	0020      	movs	r0, r4
 80066ec:	f001 fae8 	bl	8007cc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80066f0:	2201      	movs	r2, #1
 80066f2:	2180      	movs	r1, #128	; 0x80
 80066f4:	0020      	movs	r0, r4
 80066f6:	f001 fae3 	bl	8007cc0 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 80066fa:	494f      	ldr	r1, [pc, #316]	; (8006838 <StartDefaultTask+0x20c>)
 80066fc:	484f      	ldr	r0, [pc, #316]	; (800683c <StartDefaultTask+0x210>)
 80066fe:	2204      	movs	r2, #4
 8006700:	f000 ff46 	bl	8007590 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 8006704:	2201      	movs	r2, #1
 8006706:	2120      	movs	r1, #32
 8006708:	484d      	ldr	r0, [pc, #308]	; (8006840 <StartDefaultTask+0x214>)
 800670a:	f001 fad9 	bl	8007cc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 800670e:	2201      	movs	r2, #1
 8006710:	0031      	movs	r1, r6
 8006712:	0028      	movs	r0, r5
 8006714:	f001 fad4 	bl	8007cc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 8006718:	2201      	movs	r2, #1
 800671a:	2140      	movs	r1, #64	; 0x40
 800671c:	0020      	movs	r0, r4
 800671e:	f001 facf 	bl	8007cc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 8006722:	2201      	movs	r2, #1
 8006724:	2180      	movs	r1, #128	; 0x80
 8006726:	0020      	movs	r0, r4
 8006728:	f001 faca 	bl	8007cc0 <HAL_GPIO_WritePin>
GSMBuff[0]=0;
 800672c:	4c45      	ldr	r4, [pc, #276]	; (8006844 <StartDefaultTask+0x218>)
 800672e:	2300      	movs	r3, #0
 8006730:	7023      	strb	r3, [r4, #0]
 memset((char*)gpsData,0,1000);
 8006732:	4d45      	ldr	r5, [pc, #276]	; (8006848 <StartDefaultTask+0x21c>)
 8006734:	22fa      	movs	r2, #250	; 0xfa
 8006736:	0092      	lsls	r2, r2, #2
 8006738:	2100      	movs	r1, #0
 800673a:	0028      	movs	r0, r5
 800673c:	f007 fc8a 	bl	800e054 <memset>
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006740:	4842      	ldr	r0, [pc, #264]	; (800684c <StartDefaultTask+0x220>)
 8006742:	6803      	ldr	r3, [r0, #0]
 8006744:	260c      	movs	r6, #12
 8006746:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8006748:	22e1      	movs	r2, #225	; 0xe1
 800674a:	0092      	lsls	r2, r2, #2
 800674c:	0029      	movs	r1, r5
 800674e:	f003 ffc7 	bl	800a6e0 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8006752:	483f      	ldr	r0, [pc, #252]	; (8006850 <StartDefaultTask+0x224>)
 8006754:	6803      	ldr	r3, [r0, #0]
 8006756:	621e      	str	r6, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8006758:	2201      	movs	r2, #1
 800675a:	0021      	movs	r1, r4
 800675c:	f003 ffc0 	bl	800a6e0 <HAL_UART_Receive_DMA>
initGPS();
 8006760:	f7fd fdbe 	bl	80042e0 <initGPS>
initFirstRun();
 8006764:	f7ff f98a 	bl	8005a7c <initFirstRun>
InitMEMQ();
 8006768:	f7fd fbf6 	bl	8003f58 <InitMEMQ>
HAL_Delay(10000);
 800676c:	4839      	ldr	r0, [pc, #228]	; (8006854 <StartDefaultTask+0x228>)
 800676e:	f000 fbd7 	bl	8006f20 <HAL_Delay>
InitGSM();
 8006772:	f7fe ff8b 	bl	800568c <InitGSM>
TestMEM();
 8006776:	f7fd fe97 	bl	80044a8 <TestMEM>
 memset(IMEI,0,20);
 800677a:	4d37      	ldr	r5, [pc, #220]	; (8006858 <StartDefaultTask+0x22c>)
 800677c:	2214      	movs	r2, #20
 800677e:	2100      	movs	r1, #0
 8006780:	0028      	movs	r0, r5
 8006782:	f007 fc67 	bl	800e054 <memset>
 memset(Regno,0,20);
 8006786:	4c35      	ldr	r4, [pc, #212]	; (800685c <StartDefaultTask+0x230>)
 8006788:	2214      	movs	r2, #20
 800678a:	2100      	movs	r1, #0
 800678c:	0020      	movs	r0, r4
 800678e:	f007 fc61 	bl	800e054 <memset>
strcpy(IMEI,GSMIMEI());
 8006792:	f7fe fc85 	bl	80050a0 <GSMIMEI>
 8006796:	0001      	movs	r1, r0
 8006798:	0028      	movs	r0, r5
 800679a:	f007 fe10 	bl	800e3be <strcpy>
 strcpy(Regno,readRegNo());
 800679e:	f7fd fcdb 	bl	8004158 <readRegNo>
 80067a2:	0001      	movs	r1, r0
 80067a4:	0020      	movs	r0, r4
 80067a6:	f007 fe0a 	bl	800e3be <strcpy>
StartTCPConnection();
 80067aa:	f7fe fccd 	bl	8005148 <StartTCPConnection>
    GSMSigQuality();
 80067ae:	f7ff f8fd 	bl	80059ac <GSMSigQuality>
	TestRun();
 80067b2:	f7ff fc79 	bl	80060a8 <TestRun>
while (1){
 80067b6:	e7fa      	b.n	80067ae <StartDefaultTask+0x182>
		Data = 0;
 80067b8:	2517      	movs	r5, #23
 80067ba:	446d      	add	r5, sp
 80067bc:	2300      	movs	r3, #0
 80067be:	4698      	mov	r8, r3
 80067c0:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80067c2:	4e19      	ldr	r6, [pc, #100]	; (8006828 <StartDefaultTask+0x1fc>)
 80067c4:	27fa      	movs	r7, #250	; 0xfa
 80067c6:	00bf      	lsls	r7, r7, #2
 80067c8:	9702      	str	r7, [sp, #8]
 80067ca:	2401      	movs	r4, #1
 80067cc:	9401      	str	r4, [sp, #4]
 80067ce:	9500      	str	r5, [sp, #0]
 80067d0:	0023      	movs	r3, r4
 80067d2:	226b      	movs	r2, #107	; 0x6b
 80067d4:	21d0      	movs	r1, #208	; 0xd0
 80067d6:	0030      	movs	r0, r6
 80067d8:	f001 fc22 	bl	8008020 <HAL_I2C_Mem_Write>
		Data = 0x07;
 80067dc:	2307      	movs	r3, #7
 80067de:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80067e0:	9702      	str	r7, [sp, #8]
 80067e2:	9401      	str	r4, [sp, #4]
 80067e4:	9500      	str	r5, [sp, #0]
 80067e6:	0023      	movs	r3, r4
 80067e8:	2219      	movs	r2, #25
 80067ea:	21d0      	movs	r1, #208	; 0xd0
 80067ec:	0030      	movs	r0, r6
 80067ee:	f001 fc17 	bl	8008020 <HAL_I2C_Mem_Write>
		Data = 0x00;
 80067f2:	4643      	mov	r3, r8
 80067f4:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80067f6:	9702      	str	r7, [sp, #8]
 80067f8:	9401      	str	r4, [sp, #4]
 80067fa:	9500      	str	r5, [sp, #0]
 80067fc:	0023      	movs	r3, r4
 80067fe:	221c      	movs	r2, #28
 8006800:	21d0      	movs	r1, #208	; 0xd0
 8006802:	0030      	movs	r0, r6
 8006804:	f001 fc0c 	bl	8008020 <HAL_I2C_Mem_Write>
		Data = 0x00;
 8006808:	4643      	mov	r3, r8
 800680a:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 800680c:	9702      	str	r7, [sp, #8]
 800680e:	9401      	str	r4, [sp, #4]
 8006810:	9500      	str	r5, [sp, #0]
 8006812:	0023      	movs	r3, r4
 8006814:	221b      	movs	r2, #27
 8006816:	21d0      	movs	r1, #208	; 0xd0
 8006818:	0030      	movs	r0, r6
 800681a:	f001 fc01 	bl	8008020 <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 800681e:	4810      	ldr	r0, [pc, #64]	; (8006860 <StartDefaultTask+0x234>)
 8006820:	f7fc fd7e 	bl	8003320 <Debug_Tx>
 8006824:	e74d      	b.n	80066c2 <StartDefaultTask+0x96>
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	20003c04 	.word	0x20003c04
 800682c:	08012d80 	.word	0x08012d80
 8006830:	200002ec 	.word	0x200002ec
 8006834:	50000800 	.word	0x50000800
 8006838:	20000308 	.word	0x20000308
 800683c:	20003a30 	.word	0x20003a30
 8006840:	50000400 	.word	0x50000400
 8006844:	2000054c 	.word	0x2000054c
 8006848:	200035ac 	.word	0x200035ac
 800684c:	20003d9c 	.word	0x20003d9c
 8006850:	20003d08 	.word	0x20003d08
 8006854:	00002710 	.word	0x00002710
 8006858:	200012b8 	.word	0x200012b8
 800685c:	2000339c 	.word	0x2000339c
 8006860:	08012d6c 	.word	0x08012d6c

08006864 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8006864:	b672      	cpsid	i
  while (1)
 8006866:	e7fe      	b.n	8006866 <Error_Handler+0x2>

08006868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006868:	b500      	push	{lr}
 800686a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800686c:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <HAL_MspInit+0x40>)
 800686e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006870:	2201      	movs	r2, #1
 8006872:	4311      	orrs	r1, r2
 8006874:	6419      	str	r1, [r3, #64]	; 0x40
 8006876:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006878:	400a      	ands	r2, r1
 800687a:	9200      	str	r2, [sp, #0]
 800687c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800687e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006880:	2180      	movs	r1, #128	; 0x80
 8006882:	0549      	lsls	r1, r1, #21
 8006884:	430a      	orrs	r2, r1
 8006886:	63da      	str	r2, [r3, #60]	; 0x3c
 8006888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688a:	400b      	ands	r3, r1
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8006890:	2002      	movs	r0, #2
 8006892:	2200      	movs	r2, #0
 8006894:	2103      	movs	r1, #3
 8006896:	4240      	negs	r0, r0
 8006898:	f000 fed8 	bl	800764c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800689c:	20c0      	movs	r0, #192	; 0xc0
 800689e:	00c0      	lsls	r0, r0, #3
 80068a0:	f000 fb50 	bl	8006f44 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80068a4:	b003      	add	sp, #12
 80068a6:	bd00      	pop	{pc}
 80068a8:	40021000 	.word	0x40021000

080068ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80068ac:	b530      	push	{r4, r5, lr}
 80068ae:	b089      	sub	sp, #36	; 0x24
 80068b0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b2:	2214      	movs	r2, #20
 80068b4:	2100      	movs	r1, #0
 80068b6:	a803      	add	r0, sp, #12
 80068b8:	f007 fbcc 	bl	800e054 <memset>
  if(hadc->Instance==ADC1)
 80068bc:	4b26      	ldr	r3, [pc, #152]	; (8006958 <HAL_ADC_MspInit+0xac>)
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d001      	beq.n	80068c8 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80068c4:	b009      	add	sp, #36	; 0x24
 80068c6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80068c8:	4b24      	ldr	r3, [pc, #144]	; (800695c <HAL_ADC_MspInit+0xb0>)
 80068ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068cc:	2180      	movs	r1, #128	; 0x80
 80068ce:	0349      	lsls	r1, r1, #13
 80068d0:	430a      	orrs	r2, r1
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40
 80068d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d6:	400a      	ands	r2, r1
 80068d8:	9200      	str	r2, [sp, #0]
 80068da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068de:	2201      	movs	r2, #1
 80068e0:	4311      	orrs	r1, r2
 80068e2:	6359      	str	r1, [r3, #52]	; 0x34
 80068e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068e6:	400a      	ands	r2, r1
 80068e8:	9201      	str	r2, [sp, #4]
 80068ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068ee:	2202      	movs	r2, #2
 80068f0:	4311      	orrs	r1, r2
 80068f2:	6359      	str	r1, [r3, #52]	; 0x34
 80068f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f6:	401a      	ands	r2, r3
 80068f8:	9202      	str	r2, [sp, #8]
 80068fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 80068fc:	2503      	movs	r5, #3
 80068fe:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006900:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006902:	20a0      	movs	r0, #160	; 0xa0
 8006904:	a903      	add	r1, sp, #12
 8006906:	05c0      	lsls	r0, r0, #23
 8006908:	f001 f8e8 	bl	8007adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 800690c:	4b14      	ldr	r3, [pc, #80]	; (8006960 <HAL_ADC_MspInit+0xb4>)
 800690e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006910:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006912:	2500      	movs	r5, #0
 8006914:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006916:	a903      	add	r1, sp, #12
 8006918:	4812      	ldr	r0, [pc, #72]	; (8006964 <HAL_ADC_MspInit+0xb8>)
 800691a:	f001 f8df 	bl	8007adc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800691e:	4812      	ldr	r0, [pc, #72]	; (8006968 <HAL_ADC_MspInit+0xbc>)
 8006920:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_ADC_MspInit+0xc0>)
 8006922:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006924:	2305      	movs	r3, #5
 8006926:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006928:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800692a:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800692c:	337b      	adds	r3, #123	; 0x7b
 800692e:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006930:	3381      	adds	r3, #129	; 0x81
 8006932:	33ff      	adds	r3, #255	; 0xff
 8006934:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006936:	2380      	movs	r3, #128	; 0x80
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800693c:	2320      	movs	r3, #32
 800693e:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006940:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006942:	f000 feff 	bl	8007744 <HAL_DMA_Init>
 8006946:	2800      	cmp	r0, #0
 8006948:	d103      	bne.n	8006952 <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <HAL_ADC_MspInit+0xbc>)
 800694c:	6523      	str	r3, [r4, #80]	; 0x50
 800694e:	629c      	str	r4, [r3, #40]	; 0x28
}
 8006950:	e7b8      	b.n	80068c4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8006952:	f7ff ff87 	bl	8006864 <Error_Handler>
 8006956:	e7f8      	b.n	800694a <HAL_ADC_MspInit+0x9e>
 8006958:	40012400 	.word	0x40012400
 800695c:	40021000 	.word	0x40021000
 8006960:	00000402 	.word	0x00000402
 8006964:	50000400 	.word	0x50000400
 8006968:	20003a94 	.word	0x20003a94
 800696c:	40020008 	.word	0x40020008

08006970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006970:	b510      	push	{r4, lr}
 8006972:	b08e      	sub	sp, #56	; 0x38
 8006974:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006976:	2214      	movs	r2, #20
 8006978:	2100      	movs	r1, #0
 800697a:	a809      	add	r0, sp, #36	; 0x24
 800697c:	f007 fb6a 	bl	800e054 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006980:	221c      	movs	r2, #28
 8006982:	2100      	movs	r1, #0
 8006984:	a802      	add	r0, sp, #8
 8006986:	f007 fb65 	bl	800e054 <memset>
  if(hi2c->Instance==I2C1)
 800698a:	4b18      	ldr	r3, [pc, #96]	; (80069ec <HAL_I2C_MspInit+0x7c>)
 800698c:	6822      	ldr	r2, [r4, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d001      	beq.n	8006996 <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006992:	b00e      	add	sp, #56	; 0x38
 8006994:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006996:	2320      	movs	r3, #32
 8006998:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800699a:	a802      	add	r0, sp, #8
 800699c:	f002 f9a8 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	d120      	bne.n	80069e6 <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069a4:	4c12      	ldr	r4, [pc, #72]	; (80069f0 <HAL_I2C_MspInit+0x80>)
 80069a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80069a8:	2302      	movs	r3, #2
 80069aa:	431a      	orrs	r2, r3
 80069ac:	6362      	str	r2, [r4, #52]	; 0x34
 80069ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80069b0:	4013      	ands	r3, r2
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80069b6:	23c0      	movs	r3, #192	; 0xc0
 80069b8:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069ba:	3bae      	subs	r3, #174	; 0xae
 80069bc:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069be:	3b11      	subs	r3, #17
 80069c0:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c2:	2300      	movs	r3, #0
 80069c4:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80069c6:	3306      	adds	r3, #6
 80069c8:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069ca:	a909      	add	r1, sp, #36	; 0x24
 80069cc:	4809      	ldr	r0, [pc, #36]	; (80069f4 <HAL_I2C_MspInit+0x84>)
 80069ce:	f001 f885 	bl	8007adc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069d4:	2280      	movs	r2, #128	; 0x80
 80069d6:	0392      	lsls	r2, r2, #14
 80069d8:	4313      	orrs	r3, r2
 80069da:	63e3      	str	r3, [r4, #60]	; 0x3c
 80069dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80069de:	4013      	ands	r3, r2
 80069e0:	9301      	str	r3, [sp, #4]
 80069e2:	9b01      	ldr	r3, [sp, #4]
}
 80069e4:	e7d5      	b.n	8006992 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80069e6:	f7ff ff3d 	bl	8006864 <Error_Handler>
 80069ea:	e7db      	b.n	80069a4 <HAL_I2C_MspInit+0x34>
 80069ec:	40005400 	.word	0x40005400
 80069f0:	40021000 	.word	0x40021000
 80069f4:	50000400 	.word	0x50000400

080069f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80069f8:	b510      	push	{r4, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069fe:	2214      	movs	r2, #20
 8006a00:	2100      	movs	r1, #0
 8006a02:	a803      	add	r0, sp, #12
 8006a04:	f007 fb26 	bl	800e054 <memset>
  if(hspi->Instance==SPI1)
 8006a08:	4b10      	ldr	r3, [pc, #64]	; (8006a4c <HAL_SPI_MspInit+0x54>)
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d001      	beq.n	8006a14 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006a10:	b008      	add	sp, #32
 8006a12:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <HAL_SPI_MspInit+0x58>)
 8006a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a18:	2180      	movs	r1, #128	; 0x80
 8006a1a:	0149      	lsls	r1, r1, #5
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8006a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a22:	400a      	ands	r2, r1
 8006a24:	9201      	str	r2, [sp, #4]
 8006a26:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4311      	orrs	r1, r2
 8006a2e:	6359      	str	r1, [r3, #52]	; 0x34
 8006a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a32:	401a      	ands	r2, r3
 8006a34:	9202      	str	r2, [sp, #8]
 8006a36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8006a38:	23e0      	movs	r3, #224	; 0xe0
 8006a3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3c:	3bde      	subs	r3, #222	; 0xde
 8006a3e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a40:	20a0      	movs	r0, #160	; 0xa0
 8006a42:	a903      	add	r1, sp, #12
 8006a44:	05c0      	lsls	r0, r0, #23
 8006a46:	f001 f849 	bl	8007adc <HAL_GPIO_Init>
}
 8006a4a:	e7e1      	b.n	8006a10 <HAL_SPI_MspInit+0x18>
 8006a4c:	40013000 	.word	0x40013000
 8006a50:	40021000 	.word	0x40021000

08006a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a54:	b500      	push	{lr}
 8006a56:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 8006a58:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <HAL_TIM_Base_MspInit+0x34>)
 8006a5a:	6802      	ldr	r2, [r0, #0]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d001      	beq.n	8006a64 <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8006a60:	b003      	add	sp, #12
 8006a62:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006a64:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <HAL_TIM_Base_MspInit+0x38>)
 8006a66:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006a68:	2310      	movs	r3, #16
 8006a6a:	4319      	orrs	r1, r3
 8006a6c:	63d1      	str	r1, [r2, #60]	; 0x3c
 8006a6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006a70:	4013      	ands	r3, r2
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 3, 0);
 8006a76:	2200      	movs	r2, #0
 8006a78:	2103      	movs	r1, #3
 8006a7a:	2011      	movs	r0, #17
 8006a7c:	f000 fde6 	bl	800764c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8006a80:	2011      	movs	r0, #17
 8006a82:	f000 fe15 	bl	80076b0 <HAL_NVIC_EnableIRQ>
}
 8006a86:	e7eb      	b.n	8006a60 <HAL_TIM_Base_MspInit+0xc>
 8006a88:	40001000 	.word	0x40001000
 8006a8c:	40021000 	.word	0x40021000

08006a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a90:	b530      	push	{r4, r5, lr}
 8006a92:	b093      	sub	sp, #76	; 0x4c
 8006a94:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a96:	2214      	movs	r2, #20
 8006a98:	2100      	movs	r1, #0
 8006a9a:	a80d      	add	r0, sp, #52	; 0x34
 8006a9c:	f007 fada 	bl	800e054 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006aa0:	221c      	movs	r2, #28
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	a806      	add	r0, sp, #24
 8006aa6:	f007 fad5 	bl	800e054 <memset>
  if(huart->Instance==USART1)
 8006aaa:	6823      	ldr	r3, [r4, #0]
 8006aac:	4a6e      	ldr	r2, [pc, #440]	; (8006c68 <HAL_UART_MspInit+0x1d8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d008      	beq.n	8006ac4 <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8006ab2:	4a6e      	ldr	r2, [pc, #440]	; (8006c6c <HAL_UART_MspInit+0x1dc>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d050      	beq.n	8006b5a <HAL_UART_MspInit+0xca>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8006ab8:	4a6d      	ldr	r2, [pc, #436]	; (8006c70 <HAL_UART_MspInit+0x1e0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d100      	bne.n	8006ac0 <HAL_UART_MspInit+0x30>
 8006abe:	e096      	b.n	8006bee <HAL_UART_MspInit+0x15e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006ac0:	b013      	add	sp, #76	; 0x4c
 8006ac2:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ac8:	a806      	add	r0, sp, #24
 8006aca:	f002 f911 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d13d      	bne.n	8006b4e <HAL_UART_MspInit+0xbe>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ad2:	4b68      	ldr	r3, [pc, #416]	; (8006c74 <HAL_UART_MspInit+0x1e4>)
 8006ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	01c9      	lsls	r1, r1, #7
 8006ada:	430a      	orrs	r2, r1
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
 8006ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ae0:	400a      	ands	r2, r1
 8006ae2:	9200      	str	r2, [sp, #0]
 8006ae4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ae6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4311      	orrs	r1, r2
 8006aec:	6359      	str	r1, [r3, #52]	; 0x34
 8006aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af0:	4013      	ands	r3, r2
 8006af2:	9301      	str	r3, [sp, #4]
 8006af4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 8006af6:	23c0      	movs	r3, #192	; 0xc0
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006afc:	2302      	movs	r3, #2
 8006afe:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b00:	2500      	movs	r5, #0
 8006b02:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b04:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8006b06:	9211      	str	r2, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b08:	20a0      	movs	r0, #160	; 0xa0
 8006b0a:	a90d      	add	r1, sp, #52	; 0x34
 8006b0c:	05c0      	lsls	r0, r0, #23
 8006b0e:	f000 ffe5 	bl	8007adc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8006b12:	4859      	ldr	r0, [pc, #356]	; (8006c78 <HAL_UART_MspInit+0x1e8>)
 8006b14:	4b59      	ldr	r3, [pc, #356]	; (8006c7c <HAL_UART_MspInit+0x1ec>)
 8006b16:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8006b18:	2332      	movs	r3, #50	; 0x32
 8006b1a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b1c:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b1e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b20:	334e      	adds	r3, #78	; 0x4e
 8006b22:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b24:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b26:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006b28:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006b2a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006b2c:	f000 fe0a 	bl	8007744 <HAL_DMA_Init>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d10f      	bne.n	8006b54 <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006b34:	4b50      	ldr	r3, [pc, #320]	; (8006c78 <HAL_UART_MspInit+0x1e8>)
 8006b36:	2280      	movs	r2, #128	; 0x80
 8006b38:	50a3      	str	r3, [r4, r2]
 8006b3a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2103      	movs	r1, #3
 8006b40:	201b      	movs	r0, #27
 8006b42:	f000 fd83 	bl	800764c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006b46:	201b      	movs	r0, #27
 8006b48:	f000 fdb2 	bl	80076b0 <HAL_NVIC_EnableIRQ>
 8006b4c:	e7b8      	b.n	8006ac0 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8006b4e:	f7ff fe89 	bl	8006864 <Error_Handler>
 8006b52:	e7be      	b.n	8006ad2 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8006b54:	f7ff fe86 	bl	8006864 <Error_Handler>
 8006b58:	e7ec      	b.n	8006b34 <HAL_UART_MspInit+0xa4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b5e:	a806      	add	r0, sp, #24
 8006b60:	f002 f8c6 	bl	8008cf0 <HAL_RCCEx_PeriphCLKConfig>
 8006b64:	2800      	cmp	r0, #0
 8006b66:	d13c      	bne.n	8006be2 <HAL_UART_MspInit+0x152>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b68:	4b42      	ldr	r3, [pc, #264]	; (8006c74 <HAL_UART_MspInit+0x1e4>)
 8006b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b6c:	2180      	movs	r1, #128	; 0x80
 8006b6e:	0289      	lsls	r1, r1, #10
 8006b70:	430a      	orrs	r2, r1
 8006b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b76:	400a      	ands	r2, r1
 8006b78:	9202      	str	r2, [sp, #8]
 8006b7a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b7e:	2201      	movs	r2, #1
 8006b80:	4311      	orrs	r1, r2
 8006b82:	6359      	str	r1, [r3, #52]	; 0x34
 8006b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b86:	4013      	ands	r3, r2
 8006b88:	9303      	str	r3, [sp, #12]
 8006b8a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8006b8c:	230c      	movs	r3, #12
 8006b8e:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b90:	3b0a      	subs	r3, #10
 8006b92:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b94:	2500      	movs	r5, #0
 8006b96:	950f      	str	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b98:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006b9a:	9211      	str	r2, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b9c:	20a0      	movs	r0, #160	; 0xa0
 8006b9e:	a90d      	add	r1, sp, #52	; 0x34
 8006ba0:	05c0      	lsls	r0, r0, #23
 8006ba2:	f000 ff9b 	bl	8007adc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8006ba6:	4836      	ldr	r0, [pc, #216]	; (8006c80 <HAL_UART_MspInit+0x1f0>)
 8006ba8:	4b36      	ldr	r3, [pc, #216]	; (8006c84 <HAL_UART_MspInit+0x1f4>)
 8006baa:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006bac:	2334      	movs	r3, #52	; 0x34
 8006bae:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006bb0:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bb2:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006bb4:	334c      	adds	r3, #76	; 0x4c
 8006bb6:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006bb8:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006bba:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006bbc:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006bbe:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006bc0:	f000 fdc0 	bl	8007744 <HAL_DMA_Init>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d10f      	bne.n	8006be8 <HAL_UART_MspInit+0x158>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006bc8:	4b2d      	ldr	r3, [pc, #180]	; (8006c80 <HAL_UART_MspInit+0x1f0>)
 8006bca:	2280      	movs	r2, #128	; 0x80
 8006bcc:	50a3      	str	r3, [r4, r2]
 8006bce:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2103      	movs	r1, #3
 8006bd4:	201c      	movs	r0, #28
 8006bd6:	f000 fd39 	bl	800764c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006bda:	201c      	movs	r0, #28
 8006bdc:	f000 fd68 	bl	80076b0 <HAL_NVIC_EnableIRQ>
 8006be0:	e76e      	b.n	8006ac0 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8006be2:	f7ff fe3f 	bl	8006864 <Error_Handler>
 8006be6:	e7bf      	b.n	8006b68 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8006be8:	f7ff fe3c 	bl	8006864 <Error_Handler>
 8006bec:	e7ec      	b.n	8006bc8 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006bee:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <HAL_UART_MspInit+0x1e4>)
 8006bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bf2:	2180      	movs	r1, #128	; 0x80
 8006bf4:	02c9      	lsls	r1, r1, #11
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bfc:	400a      	ands	r2, r1
 8006bfe:	9204      	str	r2, [sp, #16]
 8006c00:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c04:	2202      	movs	r2, #2
 8006c06:	4311      	orrs	r1, r2
 8006c08:	6359      	str	r1, [r3, #52]	; 0x34
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8006c12:	2305      	movs	r3, #5
 8006c14:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c16:	920e      	str	r2, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	9311      	str	r3, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c1c:	a90d      	add	r1, sp, #52	; 0x34
 8006c1e:	481a      	ldr	r0, [pc, #104]	; (8006c88 <HAL_UART_MspInit+0x1f8>)
 8006c20:	f000 ff5c 	bl	8007adc <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8006c24:	4819      	ldr	r0, [pc, #100]	; (8006c8c <HAL_UART_MspInit+0x1fc>)
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <HAL_UART_MspInit+0x200>)
 8006c28:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006c2a:	2337      	movs	r3, #55	; 0x37
 8006c2c:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c2e:	3b27      	subs	r3, #39	; 0x27
 8006c30:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c3a:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c3c:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006c3e:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c40:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006c42:	f000 fd7f 	bl	8007744 <HAL_DMA_Init>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d10b      	bne.n	8006c62 <HAL_UART_MspInit+0x1d2>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006c4a:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <HAL_UART_MspInit+0x1fc>)
 8006c4c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006c4e:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8006c50:	2200      	movs	r2, #0
 8006c52:	2103      	movs	r1, #3
 8006c54:	201d      	movs	r0, #29
 8006c56:	f000 fcf9 	bl	800764c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8006c5a:	201d      	movs	r0, #29
 8006c5c:	f000 fd28 	bl	80076b0 <HAL_NVIC_EnableIRQ>
}
 8006c60:	e72e      	b.n	8006ac0 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8006c62:	f7ff fdff 	bl	8006864 <Error_Handler>
 8006c66:	e7f0      	b.n	8006c4a <HAL_UART_MspInit+0x1ba>
 8006c68:	40013800 	.word	0x40013800
 8006c6c:	40004400 	.word	0x40004400
 8006c70:	40004800 	.word	0x40004800
 8006c74:	40021000 	.word	0x40021000
 8006c78:	20003af0 	.word	0x20003af0
 8006c7c:	4002001c 	.word	0x4002001c
 8006c80:	20003b4c 	.word	0x20003b4c
 8006c84:	40020030 	.word	0x40020030
 8006c88:	50000400 	.word	0x50000400
 8006c8c:	20003ba8 	.word	0x20003ba8
 8006c90:	40020044 	.word	0x40020044

08006c94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c94:	b530      	push	{r4, r5, lr}
 8006c96:	b087      	sub	sp, #28
 8006c98:	0005      	movs	r5, r0
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006c9a:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <HAL_InitTick+0x88>)
 8006c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	0109      	lsls	r1, r1, #4
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	400b      	ands	r3, r1
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006cae:	a901      	add	r1, sp, #4
 8006cb0:	a802      	add	r0, sp, #8
 8006cb2:	f002 f803 	bl	8008cbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006cb6:	9b05      	ldr	r3, [sp, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d117      	bne.n	8006cec <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006cbc:	f001 ffea 	bl	8008c94 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006cc0:	4c17      	ldr	r4, [pc, #92]	; (8006d20 <HAL_InitTick+0x8c>)
 8006cc2:	4b18      	ldr	r3, [pc, #96]	; (8006d24 <HAL_InitTick+0x90>)
 8006cc4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006cc6:	4b18      	ldr	r3, [pc, #96]	; (8006d28 <HAL_InitTick+0x94>)
 8006cc8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006cca:	4918      	ldr	r1, [pc, #96]	; (8006d2c <HAL_InitTick+0x98>)
 8006ccc:	f7f9 fa38 	bl	8000140 <__udivsi3>
 8006cd0:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8006cd2:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cd8:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006cda:	61a3      	str	r3, [r4, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006cdc:	0020      	movs	r0, r4
 8006cde:	f002 fe1b 	bl	8009918 <HAL_TIM_Base_Init>
 8006ce2:	1e04      	subs	r4, r0, #0
  if (status == HAL_OK)
 8006ce4:	d006      	beq.n	8006cf4 <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 8006ce6:	0020      	movs	r0, r4
 8006ce8:	b007      	add	sp, #28
 8006cea:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006cec:	f001 ffd2 	bl	8008c94 <HAL_RCC_GetPCLK1Freq>
 8006cf0:	0040      	lsls	r0, r0, #1
 8006cf2:	e7e5      	b.n	8006cc0 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006cf4:	480a      	ldr	r0, [pc, #40]	; (8006d20 <HAL_InitTick+0x8c>)
 8006cf6:	f002 fc99 	bl	800962c <HAL_TIM_Base_Start_IT>
 8006cfa:	1e04      	subs	r4, r0, #0
    if (status == HAL_OK)
 8006cfc:	d1f3      	bne.n	8006ce6 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8006cfe:	200d      	movs	r0, #13
 8006d00:	f000 fcd6 	bl	80076b0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d04:	2d03      	cmp	r5, #3
 8006d06:	d901      	bls.n	8006d0c <HAL_InitTick+0x78>
        status = HAL_ERROR;
 8006d08:	2401      	movs	r4, #1
 8006d0a:	e7ec      	b.n	8006ce6 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	0029      	movs	r1, r5
 8006d10:	200d      	movs	r0, #13
 8006d12:	f000 fc9b 	bl	800764c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006d16:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <HAL_InitTick+0x9c>)
 8006d18:	601d      	str	r5, [r3, #0]
 8006d1a:	e7e4      	b.n	8006ce6 <HAL_InitTick+0x52>
 8006d1c:	40021000 	.word	0x40021000
 8006d20:	20003f24 	.word	0x20003f24
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	000003e7 	.word	0x000003e7
 8006d2c:	000f4240 	.word	0x000f4240
 8006d30:	200000ec 	.word	0x200000ec

08006d34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d34:	e7fe      	b.n	8006d34 <NMI_Handler>

08006d36 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d36:	e7fe      	b.n	8006d36 <HardFault_Handler>

08006d38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006d38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006d3a:	4802      	ldr	r0, [pc, #8]	; (8006d44 <DMA1_Channel1_IRQHandler+0xc>)
 8006d3c:	f000 fe34 	bl	80079a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006d40:	bd10      	pop	{r4, pc}
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	20003a94 	.word	0x20003a94

08006d48 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8006d48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006d4a:	4803      	ldr	r0, [pc, #12]	; (8006d58 <DMA1_Channel2_3_IRQHandler+0x10>)
 8006d4c:	f000 fe2c 	bl	80079a8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006d50:	4802      	ldr	r0, [pc, #8]	; (8006d5c <DMA1_Channel2_3_IRQHandler+0x14>)
 8006d52:	f000 fe29 	bl	80079a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8006d56:	bd10      	pop	{r4, pc}
 8006d58:	20003af0 	.word	0x20003af0
 8006d5c:	20003b4c 	.word	0x20003b4c

08006d60 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8006d60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006d62:	4803      	ldr	r0, [pc, #12]	; (8006d70 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8006d64:	f000 fe20 	bl	80079a8 <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8006d68:	4802      	ldr	r0, [pc, #8]	; (8006d74 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8006d6a:	f000 fe83 	bl	8007a74 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8006d6e:	bd10      	pop	{r4, pc}
 8006d70:	20003ba8 	.word	0x20003ba8
 8006d74:	20003a94 	.word	0x20003a94

08006d78 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8006d78:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006d7a:	4802      	ldr	r0, [pc, #8]	; (8006d84 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8006d7c:	f002 fc92 	bl	80096a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	20003f24 	.word	0x20003f24

08006d88 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006d88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006d8a:	4802      	ldr	r0, [pc, #8]	; (8006d94 <TIM6_IRQHandler+0xc>)
 8006d8c:	f002 fc8a 	bl	80096a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8006d90:	bd10      	pop	{r4, pc}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	20003cbc 	.word	0x20003cbc

08006d98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8006d98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006d9a:	4802      	ldr	r0, [pc, #8]	; (8006da4 <USART1_IRQHandler+0xc>)
 8006d9c:	f002 feb2 	bl	8009b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006da0:	bd10      	pop	{r4, pc}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	20003d08 	.word	0x20003d08

08006da8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006da8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006daa:	4802      	ldr	r0, [pc, #8]	; (8006db4 <USART2_IRQHandler+0xc>)
 8006dac:	f002 feaa 	bl	8009b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	20003d9c 	.word	0x20003d9c

08006db8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8006db8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006dba:	4802      	ldr	r0, [pc, #8]	; (8006dc4 <USART3_4_IRQHandler+0xc>)
 8006dbc:	f002 fea2 	bl	8009b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	46c0      	nop			; (mov r8, r8)
 8006dc4:	20003e30 	.word	0x20003e30

08006dc8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8006dc8:	2001      	movs	r0, #1
 8006dca:	4770      	bx	lr

08006dcc <_kill>:

int _kill(int pid, int sig)
{
 8006dcc:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006dce:	f007 fac9 	bl	800e364 <__errno>
 8006dd2:	2316      	movs	r3, #22
 8006dd4:	6003      	str	r3, [r0, #0]
  return -1;
 8006dd6:	2001      	movs	r0, #1
}
 8006dd8:	4240      	negs	r0, r0
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <_exit>:

void _exit (int status)
{
 8006ddc:	b510      	push	{r4, lr}
  errno = EINVAL;
 8006dde:	f007 fac1 	bl	800e364 <__errno>
 8006de2:	2316      	movs	r3, #22
 8006de4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8006de6:	e7fe      	b.n	8006de6 <_exit+0xa>

08006de8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006dec:	dd07      	ble.n	8006dfe <_read+0x16>
 8006dee:	000c      	movs	r4, r1
 8006df0:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8006df2:	e000      	b.n	8006df6 <_read+0xe>
 8006df4:	bf00      	nop
 8006df6:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006df8:	3401      	adds	r4, #1
 8006dfa:	42ac      	cmp	r4, r5
 8006dfc:	d1f9      	bne.n	8006df2 <_read+0xa>
  }

  return len;
}
 8006dfe:	0030      	movs	r0, r6
 8006e00:	bd70      	pop	{r4, r5, r6, pc}

08006e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e02:	b570      	push	{r4, r5, r6, lr}
 8006e04:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e06:	dd07      	ble.n	8006e18 <_write+0x16>
 8006e08:	000c      	movs	r4, r1
 8006e0a:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8006e0c:	7820      	ldrb	r0, [r4, #0]
 8006e0e:	e000      	b.n	8006e12 <_write+0x10>
 8006e10:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e12:	3401      	adds	r4, #1
 8006e14:	42ac      	cmp	r4, r5
 8006e16:	d1f9      	bne.n	8006e0c <_write+0xa>
  }
  return len;
}
 8006e18:	0030      	movs	r0, r6
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}

08006e1c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8006e1c:	2001      	movs	r0, #1
}
 8006e1e:	4240      	negs	r0, r0
 8006e20:	4770      	bx	lr

08006e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8006e22:	2380      	movs	r3, #128	; 0x80
 8006e24:	019b      	lsls	r3, r3, #6
 8006e26:	604b      	str	r3, [r1, #4]
  return 0;
}
 8006e28:	2000      	movs	r0, #0
 8006e2a:	4770      	bx	lr

08006e2c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	4770      	bx	lr

08006e30 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8006e30:	2000      	movs	r0, #0
 8006e32:	4770      	bx	lr

08006e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e34:	b510      	push	{r4, lr}
 8006e36:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e38:	4a0c      	ldr	r2, [pc, #48]	; (8006e6c <_sbrk+0x38>)
 8006e3a:	490d      	ldr	r1, [pc, #52]	; (8006e70 <_sbrk+0x3c>)
 8006e3c:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e3e:	490d      	ldr	r1, [pc, #52]	; (8006e74 <_sbrk+0x40>)
 8006e40:	6809      	ldr	r1, [r1, #0]
 8006e42:	2900      	cmp	r1, #0
 8006e44:	d007      	beq.n	8006e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e46:	490b      	ldr	r1, [pc, #44]	; (8006e74 <_sbrk+0x40>)
 8006e48:	6808      	ldr	r0, [r1, #0]
 8006e4a:	18c3      	adds	r3, r0, r3
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d806      	bhi.n	8006e5e <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006e50:	4a08      	ldr	r2, [pc, #32]	; (8006e74 <_sbrk+0x40>)
 8006e52:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8006e54:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006e56:	4907      	ldr	r1, [pc, #28]	; (8006e74 <_sbrk+0x40>)
 8006e58:	4807      	ldr	r0, [pc, #28]	; (8006e78 <_sbrk+0x44>)
 8006e5a:	6008      	str	r0, [r1, #0]
 8006e5c:	e7f3      	b.n	8006e46 <_sbrk+0x12>
    errno = ENOMEM;
 8006e5e:	f007 fa81 	bl	800e364 <__errno>
 8006e62:	230c      	movs	r3, #12
 8006e64:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8006e66:	2001      	movs	r0, #1
 8006e68:	4240      	negs	r0, r0
 8006e6a:	e7f3      	b.n	8006e54 <_sbrk+0x20>
 8006e6c:	20009000 	.word	0x20009000
 8006e70:	00000400 	.word	0x00000400
 8006e74:	20003f70 	.word	0x20003f70
 8006e78:	20005aa0 	.word	0x20005aa0

08006e7c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e7c:	4770      	bx	lr
	...

08006e80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006e80:	480d      	ldr	r0, [pc, #52]	; (8006eb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006e82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006e84:	f7ff fffa 	bl	8006e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e88:	480c      	ldr	r0, [pc, #48]	; (8006ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8006e8a:	490d      	ldr	r1, [pc, #52]	; (8006ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006e8c:	4a0d      	ldr	r2, [pc, #52]	; (8006ec4 <LoopForever+0xe>)
  movs r3, #0
 8006e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e90:	e002      	b.n	8006e98 <LoopCopyDataInit>

08006e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e96:	3304      	adds	r3, #4

08006e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e9c:	d3f9      	bcc.n	8006e92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e9e:	4a0a      	ldr	r2, [pc, #40]	; (8006ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006ea0:	4c0a      	ldr	r4, [pc, #40]	; (8006ecc <LoopForever+0x16>)
  movs r3, #0
 8006ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ea4:	e001      	b.n	8006eaa <LoopFillZerobss>

08006ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ea8:	3204      	adds	r2, #4

08006eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006eac:	d3fb      	bcc.n	8006ea6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006eae:	f007 fa5f 	bl	800e370 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006eb2:	f7fd fb55 	bl	8004560 <main>

08006eb6 <LoopForever>:

LoopForever:
  b LoopForever
 8006eb6:	e7fe      	b.n	8006eb6 <LoopForever>
  ldr   r0, =_estack
 8006eb8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8006ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ec0:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8006ec4:	080133c8 	.word	0x080133c8
  ldr r2, =_sbss
 8006ec8:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8006ecc:	20005aa0 	.word	0x20005aa0

08006ed0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ed0:	e7fe      	b.n	8006ed0 <ADC1_IRQHandler>
	...

08006ed4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ed4:	b510      	push	{r4, lr}
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ed6:	4a08      	ldr	r2, [pc, #32]	; (8006ef8 <HAL_Init+0x24>)
 8006ed8:	6811      	ldr	r1, [r2, #0]
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	430b      	orrs	r3, r1
 8006ee0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006ee2:	2003      	movs	r0, #3
 8006ee4:	f7ff fed6 	bl	8006c94 <HAL_InitTick>
 8006ee8:	1e04      	subs	r4, r0, #0
 8006eea:	d002      	beq.n	8006ef2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8006eec:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8006eee:	0020      	movs	r0, r4
 8006ef0:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8006ef2:	f7ff fcb9 	bl	8006868 <HAL_MspInit>
 8006ef6:	e7fa      	b.n	8006eee <HAL_Init+0x1a>
 8006ef8:	40022000 	.word	0x40022000

08006efc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006efc:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <HAL_IncTick+0x10>)
 8006efe:	6811      	ldr	r1, [r2, #0]
 8006f00:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <HAL_IncTick+0x14>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	185b      	adds	r3, r3, r1
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	4770      	bx	lr
 8006f0a:	46c0      	nop			; (mov r8, r8)
 8006f0c:	20003f74 	.word	0x20003f74
 8006f10:	200000e8 	.word	0x200000e8

08006f14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006f14:	4b01      	ldr	r3, [pc, #4]	; (8006f1c <HAL_GetTick+0x8>)
 8006f16:	6818      	ldr	r0, [r3, #0]
}
 8006f18:	4770      	bx	lr
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	20003f74 	.word	0x20003f74

08006f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006f24:	f7ff fff6 	bl	8006f14 <HAL_GetTick>
 8006f28:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f2a:	1c63      	adds	r3, r4, #1
 8006f2c:	d002      	beq.n	8006f34 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <HAL_Delay+0x20>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f34:	f7ff ffee 	bl	8006f14 <HAL_GetTick>
 8006f38:	1b40      	subs	r0, r0, r5
 8006f3a:	42a0      	cmp	r0, r4
 8006f3c:	d3fa      	bcc.n	8006f34 <HAL_Delay+0x14>
  {
  }
}
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	200000e8 	.word	0x200000e8

08006f44 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006f44:	4a03      	ldr	r2, [pc, #12]	; (8006f54 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8006f46:	6813      	ldr	r3, [r2, #0]
 8006f48:	4903      	ldr	r1, [pc, #12]	; (8006f58 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8006f4a:	400b      	ands	r3, r1
 8006f4c:	4303      	orrs	r3, r0
 8006f4e:	6013      	str	r3, [r2, #0]
}
 8006f50:	4770      	bx	lr
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	40010000 	.word	0x40010000
 8006f58:	fffff9ff 	.word	0xfffff9ff

08006f5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d100      	bne.n	8006f6c <HAL_ADC_Init+0x10>
 8006f6a:	e0ff      	b.n	800716c <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006f6c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d100      	bne.n	8006f74 <HAL_ADC_Init+0x18>
 8006f72:	e0b6      	b.n	80070e2 <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f74:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	00d2      	lsls	r2, r2, #3
 8006f7a:	d417      	bmi.n	8006fac <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 8006f7c:	6899      	ldr	r1, [r3, #8]
 8006f7e:	4a7c      	ldr	r2, [pc, #496]	; (8007170 <HAL_ADC_Init+0x214>)
 8006f80:	4011      	ands	r1, r2
 8006f82:	2280      	movs	r2, #128	; 0x80
 8006f84:	0552      	lsls	r2, r2, #21
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f8a:	4b7a      	ldr	r3, [pc, #488]	; (8007174 <HAL_ADC_Init+0x218>)
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	497a      	ldr	r1, [pc, #488]	; (8007178 <HAL_ADC_Init+0x21c>)
 8006f90:	f7f9 f8d6 	bl	8000140 <__udivsi3>
 8006f94:	3001      	adds	r0, #1
 8006f96:	0040      	lsls	r0, r0, #1
 8006f98:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8006f9a:	9b01      	ldr	r3, [sp, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f9      	bne.n	8006fa0 <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006fac:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006fae:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	d408      	bmi.n	8006fc8 <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fb8:	2210      	movs	r2, #16
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fbe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006fc0:	3a0f      	subs	r2, #15
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006fc6:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006fc8:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006fca:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006fcc:	2310      	movs	r3, #16
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	402a      	ands	r2, r5
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	d000      	beq.n	8006fda <HAL_ADC_Init+0x7e>
 8006fd8:	e0c1      	b.n	800715e <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fdc:	4a67      	ldr	r2, [pc, #412]	; (800717c <HAL_ADC_Init+0x220>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	3206      	adds	r2, #6
 8006fe2:	32ff      	adds	r2, #255	; 0xff
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006fe8:	688b      	ldr	r3, [r1, #8]
 8006fea:	07db      	lsls	r3, r3, #31
 8006fec:	d44f      	bmi.n	800708e <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006fee:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006ff0:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006ff2:	1e73      	subs	r3, r6, #1
 8006ff4:	419e      	sbcs	r6, r3
 8006ff6:	0336      	lsls	r6, r6, #12
 8006ff8:	68a2      	ldr	r2, [r4, #8]
 8006ffa:	68e3      	ldr	r3, [r4, #12]
 8006ffc:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006ffe:	7e23      	ldrb	r3, [r4, #24]
 8007000:	039b      	lsls	r3, r3, #14
 8007002:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007004:	7e63      	ldrb	r3, [r4, #25]
 8007006:	03db      	lsls	r3, r3, #15
 8007008:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800700a:	036b      	lsls	r3, r5, #13
 800700c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800700e:	6923      	ldr	r3, [r4, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	db6d      	blt.n	80070f0 <HAL_ADC_Init+0x194>
 8007014:	2780      	movs	r7, #128	; 0x80
 8007016:	03bf      	lsls	r7, r7, #14
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007018:	232c      	movs	r3, #44	; 0x2c
 800701a:	5ce3      	ldrb	r3, [r4, r3]
 800701c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800701e:	4313      	orrs	r3, r2
 8007020:	4333      	orrs	r3, r6
 8007022:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007024:	2220      	movs	r2, #32
 8007026:	5ca2      	ldrb	r2, [r4, r2]
 8007028:	2a01      	cmp	r2, #1
 800702a:	d064      	beq.n	80070f6 <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800702c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800702e:	2a00      	cmp	r2, #0
 8007030:	d005      	beq.n	800703e <HAL_ADC_Init+0xe2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007032:	25e0      	movs	r5, #224	; 0xe0
 8007034:	006d      	lsls	r5, r5, #1
 8007036:	402a      	ands	r2, r5
 8007038:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800703a:	432a      	orrs	r2, r5
 800703c:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800703e:	68ca      	ldr	r2, [r1, #12]
 8007040:	4d4f      	ldr	r5, [pc, #316]	; (8007180 <HAL_ADC_Init+0x224>)
 8007042:	402a      	ands	r2, r5
 8007044:	4313      	orrs	r3, r2
 8007046:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007048:	6863      	ldr	r3, [r4, #4]
 800704a:	0f9b      	lsrs	r3, r3, #30
 800704c:	079b      	lsls	r3, r3, #30
 800704e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007050:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8007052:	213c      	movs	r1, #60	; 0x3c
 8007054:	5c61      	ldrb	r1, [r4, r1]
 8007056:	2901      	cmp	r1, #1
 8007058:	d05c      	beq.n	8007114 <HAL_ADC_Init+0x1b8>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800705a:	6821      	ldr	r1, [r4, #0]
 800705c:	690b      	ldr	r3, [r1, #16]
 800705e:	4d49      	ldr	r5, [pc, #292]	; (8007184 <HAL_ADC_Init+0x228>)
 8007060:	402b      	ands	r3, r5
 8007062:	4313      	orrs	r3, r2
 8007064:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007066:	6862      	ldr	r2, [r4, #4]
 8007068:	0053      	lsls	r3, r2, #1
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	2180      	movs	r1, #128	; 0x80
 800706e:	05c9      	lsls	r1, r1, #23
 8007070:	428b      	cmp	r3, r1
 8007072:	d00c      	beq.n	800708e <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007074:	2380      	movs	r3, #128	; 0x80
 8007076:	061b      	lsls	r3, r3, #24
 8007078:	429a      	cmp	r2, r3
 800707a:	d008      	beq.n	800708e <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800707c:	4942      	ldr	r1, [pc, #264]	; (8007188 <HAL_ADC_Init+0x22c>)
 800707e:	680b      	ldr	r3, [r1, #0]
 8007080:	4d42      	ldr	r5, [pc, #264]	; (800718c <HAL_ADC_Init+0x230>)
 8007082:	402b      	ands	r3, r5
 8007084:	25f0      	movs	r5, #240	; 0xf0
 8007086:	03ad      	lsls	r5, r5, #14
 8007088:	402a      	ands	r2, r5
 800708a:	4313      	orrs	r3, r2
 800708c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800708e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8007090:	6953      	ldr	r3, [r2, #20]
 8007092:	2107      	movs	r1, #7
 8007094:	438b      	bics	r3, r1
 8007096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007098:	430b      	orrs	r3, r1
 800709a:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800709c:	6821      	ldr	r1, [r4, #0]
 800709e:	694a      	ldr	r2, [r1, #20]
 80070a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	2570      	movs	r5, #112	; 0x70
 80070a6:	43aa      	bics	r2, r5
 80070a8:	4313      	orrs	r3, r2
 80070aa:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d13a      	bne.n	8007128 <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80070b6:	3b10      	subs	r3, #16
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80070bc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	2307      	movs	r3, #7
 80070c2:	4013      	ands	r3, r2
 80070c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d040      	beq.n	800714c <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80070ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070cc:	2212      	movs	r2, #18
 80070ce:	4393      	bics	r3, r2
 80070d0:	3a02      	subs	r2, #2
 80070d2:	4313      	orrs	r3, r2
 80070d4:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80070d8:	3a0f      	subs	r2, #15
 80070da:	4313      	orrs	r3, r2
 80070dc:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80070de:	2001      	movs	r0, #1
 80070e0:	e042      	b.n	8007168 <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 80070e2:	f7ff fbe3 	bl	80068ac <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80070e6:	2300      	movs	r3, #0
 80070e8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80070ea:	2254      	movs	r2, #84	; 0x54
 80070ec:	54a3      	strb	r3, [r4, r2]
 80070ee:	e741      	b.n	8006f74 <HAL_ADC_Init+0x18>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	085f      	lsrs	r7, r3, #1
 80070f4:	e790      	b.n	8007018 <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	d103      	bne.n	8007102 <HAL_ADC_Init+0x1a6>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80070fa:	2280      	movs	r2, #128	; 0x80
 80070fc:	0252      	lsls	r2, r2, #9
 80070fe:	4313      	orrs	r3, r2
 8007100:	e794      	b.n	800702c <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007102:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007104:	2520      	movs	r5, #32
 8007106:	432a      	orrs	r2, r5
 8007108:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800710a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800710c:	3d1f      	subs	r5, #31
 800710e:	432a      	orrs	r2, r5
 8007110:	65e2      	str	r2, [r4, #92]	; 0x5c
 8007112:	e78b      	b.n	800702c <HAL_ADC_Init+0xd0>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8007114:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007116:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8007118:	4329      	orrs	r1, r5
 800711a:	430a      	orrs	r2, r1
 800711c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800711e:	430a      	orrs	r2, r1
 8007120:	4313      	orrs	r3, r2
 8007122:	2201      	movs	r2, #1
 8007124:	431a      	orrs	r2, r3
 8007126:	e798      	b.n	800705a <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007128:	2280      	movs	r2, #128	; 0x80
 800712a:	0392      	lsls	r2, r2, #14
 800712c:	4293      	cmp	r3, r2
 800712e:	d1c5      	bne.n	80070bc <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 8007130:	6821      	ldr	r1, [r4, #0]
 8007132:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007134:	69e3      	ldr	r3, [r4, #28]
 8007136:	3b01      	subs	r3, #1
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	221c      	movs	r2, #28
 800713c:	401a      	ands	r2, r3
 800713e:	2310      	movs	r3, #16
 8007140:	425b      	negs	r3, r3
 8007142:	4093      	lsls	r3, r2
 8007144:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007146:	4313      	orrs	r3, r2
 8007148:	628b      	str	r3, [r1, #40]	; 0x28
 800714a:	e7b7      	b.n	80070bc <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 800714c:	2300      	movs	r3, #0
 800714e:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8007150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007152:	2203      	movs	r2, #3
 8007154:	4393      	bics	r3, r2
 8007156:	3a02      	subs	r2, #2
 8007158:	4313      	orrs	r3, r2
 800715a:	65a3      	str	r3, [r4, #88]	; 0x58
 800715c:	e004      	b.n	8007168 <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800715e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007160:	2210      	movs	r2, #16
 8007162:	4313      	orrs	r3, r2
 8007164:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007166:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8007168:	b003      	add	sp, #12
 800716a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800716c:	2001      	movs	r0, #1
 800716e:	e7fb      	b.n	8007168 <HAL_ADC_Init+0x20c>
 8007170:	6fffffe8 	.word	0x6fffffe8
 8007174:	200000e4 	.word	0x200000e4
 8007178:	00030d40 	.word	0x00030d40
 800717c:	fffffefd 	.word	0xfffffefd
 8007180:	fffe0201 	.word	0xfffe0201
 8007184:	1ffffc02 	.word	0x1ffffc02
 8007188:	40012708 	.word	0x40012708
 800718c:	ffc3ffff 	.word	0xffc3ffff

08007190 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007190:	4770      	bx	lr

08007192 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007192:	4770      	bx	lr

08007194 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007194:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007196:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007198:	f7ff fffb 	bl	8007192 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800719c:	bd10      	pop	{r4, pc}

0800719e <HAL_ADC_ErrorCallback>:
}
 800719e:	4770      	bx	lr

080071a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80071a0:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071a2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80071a4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80071a6:	2240      	movs	r2, #64	; 0x40
 80071a8:	4313      	orrs	r3, r2
 80071aa:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80071ac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80071ae:	3a3c      	subs	r2, #60	; 0x3c
 80071b0:	4313      	orrs	r3, r2
 80071b2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80071b4:	f7ff fff3 	bl	800719e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071b8:	bd10      	pop	{r4, pc}
	...

080071bc <ADC_DMAConvCplt>:
{
 80071bc:	b510      	push	{r4, lr}
 80071be:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80071c2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80071c4:	2150      	movs	r1, #80	; 0x50
 80071c6:	4211      	tst	r1, r2
 80071c8:	d12a      	bne.n	8007220 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80071ca:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80071cc:	2380      	movs	r3, #128	; 0x80
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4313      	orrs	r3, r2
 80071d2:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80071d4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80071d6:	68d9      	ldr	r1, [r3, #12]
 80071d8:	22c0      	movs	r2, #192	; 0xc0
 80071da:	0112      	lsls	r2, r2, #4
 80071dc:	4211      	tst	r1, r2
 80071de:	d113      	bne.n	8007208 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80071e0:	7e82      	ldrb	r2, [r0, #26]
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	d110      	bne.n	8007208 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	0712      	lsls	r2, r2, #28
 80071ea:	d50d      	bpl.n	8007208 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	0752      	lsls	r2, r2, #29
 80071f0:	d40d      	bmi.n	800720e <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	210c      	movs	r1, #12
 80071f6:	438a      	bics	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80071fa:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80071fc:	4a0e      	ldr	r2, [pc, #56]	; (8007238 <ADC_DMAConvCplt+0x7c>)
 80071fe:	4013      	ands	r3, r2
 8007200:	3204      	adds	r2, #4
 8007202:	32ff      	adds	r2, #255	; 0xff
 8007204:	4313      	orrs	r3, r2
 8007206:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8007208:	f7ff ffc2 	bl	8007190 <HAL_ADC_ConvCpltCallback>
}
 800720c:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800720e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007210:	2220      	movs	r2, #32
 8007212:	4313      	orrs	r3, r2
 8007214:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007216:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8007218:	3a1f      	subs	r2, #31
 800721a:	4313      	orrs	r3, r2
 800721c:	65c3      	str	r3, [r0, #92]	; 0x5c
 800721e:	e7f3      	b.n	8007208 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007220:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007222:	06d2      	lsls	r2, r2, #27
 8007224:	d404      	bmi.n	8007230 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007226:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8007228:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800722a:	0018      	movs	r0, r3
 800722c:	4790      	blx	r2
}
 800722e:	e7ed      	b.n	800720c <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8007230:	f7ff ffb5 	bl	800719e <HAL_ADC_ErrorCallback>
 8007234:	e7ea      	b.n	800720c <ADC_DMAConvCplt+0x50>
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	fffffefe 	.word	0xfffffefe

0800723c <HAL_ADC_ConfigChannel>:
{
 800723c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723e:	b083      	sub	sp, #12
 8007240:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8007242:	2300      	movs	r3, #0
 8007244:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007246:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8007248:	3354      	adds	r3, #84	; 0x54
 800724a:	5cc3      	ldrb	r3, [r0, r3]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d100      	bne.n	8007252 <HAL_ADC_ConfigChannel+0x16>
 8007250:	e11e      	b.n	8007490 <HAL_ADC_ConfigChannel+0x254>
 8007252:	2354      	movs	r3, #84	; 0x54
 8007254:	2201      	movs	r2, #1
 8007256:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007258:	6800      	ldr	r0, [r0, #0]
 800725a:	6883      	ldr	r3, [r0, #8]
 800725c:	3203      	adds	r2, #3
 800725e:	0017      	movs	r7, r2
 8007260:	401f      	ands	r7, r3
 8007262:	421a      	tst	r2, r3
 8007264:	d009      	beq.n	800727a <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007266:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007268:	321c      	adds	r2, #28
 800726a:	4313      	orrs	r3, r2
 800726c:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800726e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8007270:	2354      	movs	r3, #84	; 0x54
 8007272:	2200      	movs	r2, #0
 8007274:	54e2      	strb	r2, [r4, r3]
}
 8007276:	b003      	add	sp, #12
 8007278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 800727a:	684a      	ldr	r2, [r1, #4]
 800727c:	2a02      	cmp	r2, #2
 800727e:	d100      	bne.n	8007282 <HAL_ADC_ConfigChannel+0x46>
 8007280:	e0c4      	b.n	800740c <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007282:	2304      	movs	r3, #4
 8007284:	439d      	bics	r5, r3
 8007286:	2680      	movs	r6, #128	; 0x80
 8007288:	0636      	lsls	r6, r6, #24
 800728a:	42b5      	cmp	r5, r6
 800728c:	d021      	beq.n	80072d2 <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800728e:	231f      	movs	r3, #31
 8007290:	401a      	ands	r2, r3
 8007292:	3b10      	subs	r3, #16
 8007294:	4093      	lsls	r3, r2
 8007296:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8007298:	439e      	bics	r6, r3
 800729a:	680b      	ldr	r3, [r1, #0]
 800729c:	035d      	lsls	r5, r3, #13
 800729e:	d148      	bne.n	8007332 <HAL_ADC_ConfigChannel+0xf6>
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	0edf      	lsrs	r7, r3, #27
 80072a4:	003b      	movs	r3, r7
 80072a6:	4093      	lsls	r3, r2
 80072a8:	4333      	orrs	r3, r6
 80072aa:	6623      	str	r3, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80072ac:	684a      	ldr	r2, [r1, #4]
 80072ae:	0893      	lsrs	r3, r2, #2
 80072b0:	3301      	adds	r3, #1
 80072b2:	69e5      	ldr	r5, [r4, #28]
 80072b4:	42ab      	cmp	r3, r5
 80072b6:	d812      	bhi.n	80072de <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 80072b8:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80072ba:	251f      	movs	r5, #31
 80072bc:	4015      	ands	r5, r2
 80072be:	680b      	ldr	r3, [r1, #0]
 80072c0:	0e9b      	lsrs	r3, r3, #26
 80072c2:	220f      	movs	r2, #15
 80072c4:	4013      	ands	r3, r2
 80072c6:	40ab      	lsls	r3, r5
 80072c8:	40aa      	lsls	r2, r5
 80072ca:	4396      	bics	r6, r2
 80072cc:	4333      	orrs	r3, r6
 80072ce:	6283      	str	r3, [r0, #40]	; 0x28
}
 80072d0:	e005      	b.n	80072de <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80072d2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80072d4:	680b      	ldr	r3, [r1, #0]
 80072d6:	035b      	lsls	r3, r3, #13
 80072d8:	0b5b      	lsrs	r3, r3, #13
 80072da:	4313      	orrs	r3, r2
 80072dc:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80072de:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 80072e0:	6968      	ldr	r0, [r5, #20]
 80072e2:	680a      	ldr	r2, [r1, #0]
 80072e4:	0212      	lsls	r2, r2, #8
 80072e6:	688b      	ldr	r3, [r1, #8]
 80072e8:	4013      	ands	r3, r2
 80072ea:	4e6a      	ldr	r6, [pc, #424]	; (8007494 <HAL_ADC_ConfigChannel+0x258>)
 80072ec:	4033      	ands	r3, r6
 80072ee:	4390      	bics	r0, r2
 80072f0:	4303      	orrs	r3, r0
 80072f2:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80072f4:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072f6:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	dab9      	bge.n	8007270 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80072fc:	4a66      	ldr	r2, [pc, #408]	; (8007498 <HAL_ADC_ConfigChannel+0x25c>)
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	25e0      	movs	r5, #224	; 0xe0
 8007302:	046d      	lsls	r5, r5, #17
 8007304:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007306:	4965      	ldr	r1, [pc, #404]	; (800749c <HAL_ADC_ConfigChannel+0x260>)
 8007308:	428b      	cmp	r3, r1
 800730a:	d050      	beq.n	80073ae <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800730c:	4864      	ldr	r0, [pc, #400]	; (80074a0 <HAL_ADC_ConfigChannel+0x264>)
 800730e:	4283      	cmp	r3, r0
 8007310:	d06e      	beq.n	80073f0 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007312:	4964      	ldr	r1, [pc, #400]	; (80074a4 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007314:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007316:	428b      	cmp	r3, r1
 8007318:	d1aa      	bne.n	8007270 <HAL_ADC_ConfigChannel+0x34>
 800731a:	0252      	lsls	r2, r2, #9
 800731c:	d4a8      	bmi.n	8007270 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800731e:	495e      	ldr	r1, [pc, #376]	; (8007498 <HAL_ADC_ConfigChannel+0x25c>)
 8007320:	680b      	ldr	r3, [r1, #0]
 8007322:	4a61      	ldr	r2, [pc, #388]	; (80074a8 <HAL_ADC_ConfigChannel+0x26c>)
 8007324:	4013      	ands	r3, r2
 8007326:	432b      	orrs	r3, r5
 8007328:	2280      	movs	r2, #128	; 0x80
 800732a:	03d2      	lsls	r2, r2, #15
 800732c:	4313      	orrs	r3, r2
 800732e:	600b      	str	r3, [r1, #0]
}
 8007330:	e79e      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8007332:	07dd      	lsls	r5, r3, #31
 8007334:	d4b6      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007336:	2701      	movs	r7, #1
 8007338:	079d      	lsls	r5, r3, #30
 800733a:	d4b3      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 800733c:	3701      	adds	r7, #1
 800733e:	075d      	lsls	r5, r3, #29
 8007340:	d4b0      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007342:	3701      	adds	r7, #1
 8007344:	071d      	lsls	r5, r3, #28
 8007346:	d4ad      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007348:	3701      	adds	r7, #1
 800734a:	06dd      	lsls	r5, r3, #27
 800734c:	d4aa      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 800734e:	3701      	adds	r7, #1
 8007350:	069d      	lsls	r5, r3, #26
 8007352:	d4a7      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007354:	3701      	adds	r7, #1
 8007356:	065d      	lsls	r5, r3, #25
 8007358:	d4a4      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 800735a:	3701      	adds	r7, #1
 800735c:	061d      	lsls	r5, r3, #24
 800735e:	d4a1      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007360:	3701      	adds	r7, #1
 8007362:	05dd      	lsls	r5, r3, #23
 8007364:	d49e      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007366:	3701      	adds	r7, #1
 8007368:	059d      	lsls	r5, r3, #22
 800736a:	d49b      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 800736c:	3701      	adds	r7, #1
 800736e:	055d      	lsls	r5, r3, #21
 8007370:	d498      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007372:	3701      	adds	r7, #1
 8007374:	051d      	lsls	r5, r3, #20
 8007376:	d495      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007378:	3701      	adds	r7, #1
 800737a:	04dd      	lsls	r5, r3, #19
 800737c:	d492      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 800737e:	3701      	adds	r7, #1
 8007380:	049d      	lsls	r5, r3, #18
 8007382:	d48f      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007384:	3701      	adds	r7, #1
 8007386:	045d      	lsls	r5, r3, #17
 8007388:	d48c      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 800738a:	3701      	adds	r7, #1
 800738c:	041d      	lsls	r5, r3, #16
 800738e:	d489      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007390:	3701      	adds	r7, #1
 8007392:	03dd      	lsls	r5, r3, #15
 8007394:	d486      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 8007396:	3701      	adds	r7, #1
 8007398:	039d      	lsls	r5, r3, #14
 800739a:	d483      	bmi.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 800739c:	2580      	movs	r5, #128	; 0x80
 800739e:	02ed      	lsls	r5, r5, #11
 80073a0:	001f      	movs	r7, r3
 80073a2:	402f      	ands	r7, r5
 80073a4:	422b      	tst	r3, r5
 80073a6:	d100      	bne.n	80073aa <HAL_ADC_ConfigChannel+0x16e>
 80073a8:	e77c      	b.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
 80073aa:	2712      	movs	r7, #18
 80073ac:	e77a      	b.n	80072a4 <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80073ae:	0212      	lsls	r2, r2, #8
 80073b0:	d500      	bpl.n	80073b4 <HAL_ADC_ConfigChannel+0x178>
 80073b2:	e75d      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80073b4:	4938      	ldr	r1, [pc, #224]	; (8007498 <HAL_ADC_ConfigChannel+0x25c>)
 80073b6:	680b      	ldr	r3, [r1, #0]
 80073b8:	4a3b      	ldr	r2, [pc, #236]	; (80074a8 <HAL_ADC_ConfigChannel+0x26c>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	432b      	orrs	r3, r5
 80073be:	2280      	movs	r2, #128	; 0x80
 80073c0:	0412      	lsls	r2, r2, #16
 80073c2:	4313      	orrs	r3, r2
 80073c4:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80073c6:	4b39      	ldr	r3, [pc, #228]	; (80074ac <HAL_ADC_ConfigChannel+0x270>)
 80073c8:	6818      	ldr	r0, [r3, #0]
 80073ca:	4939      	ldr	r1, [pc, #228]	; (80074b0 <HAL_ADC_ConfigChannel+0x274>)
 80073cc:	f7f8 feb8 	bl	8000140 <__udivsi3>
 80073d0:	3001      	adds	r0, #1
 80073d2:	0043      	lsls	r3, r0, #1
 80073d4:	181b      	adds	r3, r3, r0
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80073da:	9b01      	ldr	r3, [sp, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d055      	beq.n	800748c <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f9      	bne.n	80073e0 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073ec:	2000      	movs	r0, #0
 80073ee:	e73f      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
 80073f0:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80073f2:	01d2      	lsls	r2, r2, #7
 80073f4:	d500      	bpl.n	80073f8 <HAL_ADC_ConfigChannel+0x1bc>
 80073f6:	e73b      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
 80073f8:	4927      	ldr	r1, [pc, #156]	; (8007498 <HAL_ADC_ConfigChannel+0x25c>)
 80073fa:	680b      	ldr	r3, [r1, #0]
 80073fc:	4a2a      	ldr	r2, [pc, #168]	; (80074a8 <HAL_ADC_ConfigChannel+0x26c>)
 80073fe:	4013      	ands	r3, r2
 8007400:	432b      	orrs	r3, r5
 8007402:	2280      	movs	r2, #128	; 0x80
 8007404:	0452      	lsls	r2, r2, #17
 8007406:	4313      	orrs	r3, r2
 8007408:	600b      	str	r3, [r1, #0]
}
 800740a:	e731      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800740c:	2304      	movs	r3, #4
 800740e:	439d      	bics	r5, r3
 8007410:	2380      	movs	r3, #128	; 0x80
 8007412:	061b      	lsls	r3, r3, #24
 8007414:	429d      	cmp	r5, r3
 8007416:	d01c      	beq.n	8007452 <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007418:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800741a:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800741c:	2b00      	cmp	r3, #0
 800741e:	db00      	blt.n	8007422 <HAL_ADC_ConfigChannel+0x1e6>
 8007420:	e726      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007422:	4a1d      	ldr	r2, [pc, #116]	; (8007498 <HAL_ADC_ConfigChannel+0x25c>)
 8007424:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007426:	491d      	ldr	r1, [pc, #116]	; (800749c <HAL_ADC_ConfigChannel+0x260>)
 8007428:	428b      	cmp	r3, r1
 800742a:	d019      	beq.n	8007460 <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800742c:	491c      	ldr	r1, [pc, #112]	; (80074a0 <HAL_ADC_ConfigChannel+0x264>)
 800742e:	428b      	cmp	r3, r1
 8007430:	d021      	beq.n	8007476 <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007432:	491c      	ldr	r1, [pc, #112]	; (80074a4 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007434:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8007436:	428b      	cmp	r3, r1
 8007438:	d000      	beq.n	800743c <HAL_ADC_ConfigChannel+0x200>
 800743a:	e719      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800743c:	4816      	ldr	r0, [pc, #88]	; (8007498 <HAL_ADC_ConfigChannel+0x25c>)
 800743e:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007440:	23c0      	movs	r3, #192	; 0xc0
 8007442:	045b      	lsls	r3, r3, #17
 8007444:	4013      	ands	r3, r2
 8007446:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <HAL_ADC_ConfigChannel+0x26c>)
 8007448:	400a      	ands	r2, r1
 800744a:	4313      	orrs	r3, r2
 800744c:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800744e:	2000      	movs	r0, #0
}
 8007450:	e70e      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8007452:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007454:	680b      	ldr	r3, [r1, #0]
 8007456:	035b      	lsls	r3, r3, #13
 8007458:	0b5b      	lsrs	r3, r3, #13
 800745a:	439a      	bics	r2, r3
 800745c:	6282      	str	r2, [r0, #40]	; 0x28
}
 800745e:	e7db      	b.n	8007418 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007460:	480d      	ldr	r0, [pc, #52]	; (8007498 <HAL_ADC_ConfigChannel+0x25c>)
 8007462:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007464:	23a0      	movs	r3, #160	; 0xa0
 8007466:	045b      	lsls	r3, r3, #17
 8007468:	4013      	ands	r3, r2
 800746a:	4a0f      	ldr	r2, [pc, #60]	; (80074a8 <HAL_ADC_ConfigChannel+0x26c>)
 800746c:	400a      	ands	r2, r1
 800746e:	4313      	orrs	r3, r2
 8007470:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007472:	2000      	movs	r0, #0
}
 8007474:	e6fc      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007476:	4808      	ldr	r0, [pc, #32]	; (8007498 <HAL_ADC_ConfigChannel+0x25c>)
 8007478:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800747a:	23c0      	movs	r3, #192	; 0xc0
 800747c:	041b      	lsls	r3, r3, #16
 800747e:	4013      	ands	r3, r2
 8007480:	4a09      	ldr	r2, [pc, #36]	; (80074a8 <HAL_ADC_ConfigChannel+0x26c>)
 8007482:	400a      	ands	r2, r1
 8007484:	4313      	orrs	r3, r2
 8007486:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007488:	2000      	movs	r0, #0
}
 800748a:	e6f1      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
 800748c:	2000      	movs	r0, #0
 800748e:	e6ef      	b.n	8007270 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8007490:	2002      	movs	r0, #2
 8007492:	e6f0      	b.n	8007276 <HAL_ADC_ConfigChannel+0x3a>
 8007494:	07ffff00 	.word	0x07ffff00
 8007498:	40012708 	.word	0x40012708
 800749c:	b0001000 	.word	0xb0001000
 80074a0:	b8004000 	.word	0xb8004000
 80074a4:	b4002000 	.word	0xb4002000
 80074a8:	fe3fffff 	.word	0xfe3fffff
 80074ac:	200000e4 	.word	0x200000e4
 80074b0:	00030d40 	.word	0x00030d40

080074b4 <ADC_Enable>:
{
 80074b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074b6:	b083      	sub	sp, #12
 80074b8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80074ba:	2300      	movs	r3, #0
 80074bc:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80074be:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074c0:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 80074c2:	2000      	movs	r0, #0
 80074c4:	07d2      	lsls	r2, r2, #31
 80074c6:	d434      	bmi.n	8007532 <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80074c8:	6899      	ldr	r1, [r3, #8]
 80074ca:	4a2c      	ldr	r2, [pc, #176]	; (800757c <ADC_Enable+0xc8>)
 80074cc:	4211      	tst	r1, r2
 80074ce:	d127      	bne.n	8007520 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	492b      	ldr	r1, [pc, #172]	; (8007580 <ADC_Enable+0xcc>)
 80074d4:	400a      	ands	r2, r1
 80074d6:	2101      	movs	r1, #1
 80074d8:	430a      	orrs	r2, r1
 80074da:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80074dc:	4b29      	ldr	r3, [pc, #164]	; (8007584 <ADC_Enable+0xd0>)
 80074de:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	d50f      	bpl.n	8007504 <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074e4:	4b28      	ldr	r3, [pc, #160]	; (8007588 <ADC_Enable+0xd4>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	4928      	ldr	r1, [pc, #160]	; (800758c <ADC_Enable+0xd8>)
 80074ea:	f7f8 fe29 	bl	8000140 <__udivsi3>
 80074ee:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80074f0:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80074f2:	9b01      	ldr	r3, [sp, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <ADC_Enable+0x50>
        wait_loop_index--;
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80074fe:	9b01      	ldr	r3, [sp, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f9      	bne.n	80074f8 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007504:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 8007506:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007508:	2b01      	cmp	r3, #1
 800750a:	d012      	beq.n	8007532 <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 800750c:	f7ff fd02 	bl	8006f14 <HAL_GetTick>
 8007510:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007512:	6823      	ldr	r3, [r4, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	07d2      	lsls	r2, r2, #31
 8007518:	d42d      	bmi.n	8007576 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800751a:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 800751c:	4f18      	ldr	r7, [pc, #96]	; (8007580 <ADC_Enable+0xcc>)
 800751e:	e00e      	b.n	800753e <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007522:	2210      	movs	r2, #16
 8007524:	4313      	orrs	r3, r2
 8007526:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007528:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800752a:	3a0f      	subs	r2, #15
 800752c:	4313      	orrs	r3, r2
 800752e:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8007530:	3001      	adds	r0, #1
}
 8007532:	b003      	add	sp, #12
 8007534:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	4215      	tst	r5, r2
 800753c:	d119      	bne.n	8007572 <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	4215      	tst	r5, r2
 8007542:	d103      	bne.n	800754c <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	403a      	ands	r2, r7
 8007548:	432a      	orrs	r2, r5
 800754a:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800754c:	f7ff fce2 	bl	8006f14 <HAL_GetTick>
 8007550:	1b80      	subs	r0, r0, r6
 8007552:	2802      	cmp	r0, #2
 8007554:	d9ef      	bls.n	8007536 <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	421d      	tst	r5, r3
 800755c:	d1eb      	bne.n	8007536 <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800755e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007560:	2210      	movs	r2, #16
 8007562:	4313      	orrs	r3, r2
 8007564:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007566:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007568:	3a0f      	subs	r2, #15
 800756a:	4313      	orrs	r3, r2
 800756c:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800756e:	2001      	movs	r0, #1
 8007570:	e7df      	b.n	8007532 <ADC_Enable+0x7e>
  return HAL_OK;
 8007572:	2000      	movs	r0, #0
 8007574:	e7dd      	b.n	8007532 <ADC_Enable+0x7e>
 8007576:	2000      	movs	r0, #0
 8007578:	e7db      	b.n	8007532 <ADC_Enable+0x7e>
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	80000017 	.word	0x80000017
 8007580:	7fffffe8 	.word	0x7fffffe8
 8007584:	40012708 	.word	0x40012708
 8007588:	200000e4 	.word	0x200000e4
 800758c:	00030d40 	.word	0x00030d40

08007590 <HAL_ADC_Start_DMA>:
{
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	0004      	movs	r4, r0
 8007594:	000d      	movs	r5, r1
 8007596:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007598:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800759a:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 800759c:	2002      	movs	r0, #2
 800759e:	075b      	lsls	r3, r3, #29
 80075a0:	d41c      	bmi.n	80075dc <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 80075a2:	2354      	movs	r3, #84	; 0x54
 80075a4:	5ce3      	ldrb	r3, [r4, r3]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d044      	beq.n	8007634 <HAL_ADC_Start_DMA+0xa4>
 80075aa:	2301      	movs	r3, #1
 80075ac:	2154      	movs	r1, #84	; 0x54
 80075ae:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80075b0:	68d1      	ldr	r1, [r2, #12]
 80075b2:	420b      	tst	r3, r1
 80075b4:	d10d      	bne.n	80075d2 <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80075b6:	6893      	ldr	r3, [r2, #8]
 80075b8:	07db      	lsls	r3, r3, #31
 80075ba:	d505      	bpl.n	80075c8 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 80075bc:	6893      	ldr	r3, [r2, #8]
 80075be:	491e      	ldr	r1, [pc, #120]	; (8007638 <HAL_ADC_Start_DMA+0xa8>)
 80075c0:	400b      	ands	r3, r1
 80075c2:	2102      	movs	r1, #2
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	68d3      	ldr	r3, [r2, #12]
 80075cc:	2101      	movs	r1, #1
 80075ce:	430b      	orrs	r3, r1
 80075d0:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80075d2:	0020      	movs	r0, r4
 80075d4:	f7ff ff6e 	bl	80074b4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80075d8:	2800      	cmp	r0, #0
 80075da:	d000      	beq.n	80075de <HAL_ADC_Start_DMA+0x4e>
}
 80075dc:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80075de:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80075e0:	4b16      	ldr	r3, [pc, #88]	; (800763c <HAL_ADC_Start_DMA+0xac>)
 80075e2:	401a      	ands	r2, r3
 80075e4:	2380      	movs	r3, #128	; 0x80
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	4313      	orrs	r3, r2
 80075ea:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80075ec:	2300      	movs	r3, #0
 80075ee:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80075f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80075f2:	4913      	ldr	r1, [pc, #76]	; (8007640 <HAL_ADC_Start_DMA+0xb0>)
 80075f4:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80075f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80075f8:	4912      	ldr	r1, [pc, #72]	; (8007644 <HAL_ADC_Start_DMA+0xb4>)
 80075fa:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80075fc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80075fe:	4912      	ldr	r1, [pc, #72]	; (8007648 <HAL_ADC_Start_DMA+0xb8>)
 8007600:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	211c      	movs	r1, #28
 8007606:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8007608:	2254      	movs	r2, #84	; 0x54
 800760a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800760c:	6822      	ldr	r2, [r4, #0]
 800760e:	6853      	ldr	r3, [r2, #4]
 8007610:	390c      	subs	r1, #12
 8007612:	430b      	orrs	r3, r1
 8007614:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007616:	6821      	ldr	r1, [r4, #0]
 8007618:	3140      	adds	r1, #64	; 0x40
 800761a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800761c:	0033      	movs	r3, r6
 800761e:	002a      	movs	r2, r5
 8007620:	f000 f8f4 	bl	800780c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007624:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8007626:	6893      	ldr	r3, [r2, #8]
 8007628:	4903      	ldr	r1, [pc, #12]	; (8007638 <HAL_ADC_Start_DMA+0xa8>)
 800762a:	400b      	ands	r3, r1
 800762c:	2104      	movs	r1, #4
 800762e:	430b      	orrs	r3, r1
 8007630:	6093      	str	r3, [r2, #8]
}
 8007632:	e7d3      	b.n	80075dc <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8007634:	2002      	movs	r0, #2
 8007636:	e7d1      	b.n	80075dc <HAL_ADC_Start_DMA+0x4c>
 8007638:	7fffffe8 	.word	0x7fffffe8
 800763c:	fffff0fe 	.word	0xfffff0fe
 8007640:	080071bd 	.word	0x080071bd
 8007644:	08007195 	.word	0x08007195
 8007648:	080071a1 	.word	0x080071a1

0800764c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800764c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800764e:	2800      	cmp	r0, #0
 8007650:	db14      	blt.n	800767c <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007652:	0884      	lsrs	r4, r0, #2
 8007654:	00a4      	lsls	r4, r4, #2
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <HAL_NVIC_SetPriority+0x5c>)
 8007658:	469c      	mov	ip, r3
 800765a:	4464      	add	r4, ip
 800765c:	26c0      	movs	r6, #192	; 0xc0
 800765e:	00b6      	lsls	r6, r6, #2
 8007660:	59a5      	ldr	r5, [r4, r6]
 8007662:	2203      	movs	r2, #3
 8007664:	4002      	ands	r2, r0
 8007666:	00d2      	lsls	r2, r2, #3
 8007668:	23ff      	movs	r3, #255	; 0xff
 800766a:	0018      	movs	r0, r3
 800766c:	4090      	lsls	r0, r2
 800766e:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007670:	0189      	lsls	r1, r1, #6
 8007672:	400b      	ands	r3, r1
 8007674:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007676:	432b      	orrs	r3, r5
 8007678:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800767a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800767c:	230f      	movs	r3, #15
 800767e:	4003      	ands	r3, r0
 8007680:	3b08      	subs	r3, #8
 8007682:	089b      	lsrs	r3, r3, #2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <HAL_NVIC_SetPriority+0x60>)
 8007688:	4694      	mov	ip, r2
 800768a:	4463      	add	r3, ip
 800768c:	69dc      	ldr	r4, [r3, #28]
 800768e:	2203      	movs	r2, #3
 8007690:	4010      	ands	r0, r2
 8007692:	00c0      	lsls	r0, r0, #3
 8007694:	32fc      	adds	r2, #252	; 0xfc
 8007696:	0015      	movs	r5, r2
 8007698:	4085      	lsls	r5, r0
 800769a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800769c:	0189      	lsls	r1, r1, #6
 800769e:	400a      	ands	r2, r1
 80076a0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80076a2:	4322      	orrs	r2, r4
 80076a4:	61da      	str	r2, [r3, #28]
 80076a6:	e7e8      	b.n	800767a <HAL_NVIC_SetPriority+0x2e>
 80076a8:	e000e100 	.word	0xe000e100
 80076ac:	e000ed00 	.word	0xe000ed00

080076b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80076b0:	2800      	cmp	r0, #0
 80076b2:	db05      	blt.n	80076c0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076b4:	221f      	movs	r2, #31
 80076b6:	4002      	ands	r2, r0
 80076b8:	2301      	movs	r3, #1
 80076ba:	4093      	lsls	r3, r2
 80076bc:	4a01      	ldr	r2, [pc, #4]	; (80076c4 <HAL_NVIC_EnableIRQ+0x14>)
 80076be:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80076c0:	4770      	bx	lr
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	e000e100 	.word	0xe000e100

080076c8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076ca:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80076cc:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80076ce:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80076d0:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	d002      	beq.n	80076dc <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076d6:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80076d8:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80076da:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80076dc:	4e0b      	ldr	r6, [pc, #44]	; (800770c <DMA_SetConfig+0x44>)
 80076de:	6877      	ldr	r7, [r6, #4]
 80076e0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80076e2:	241c      	movs	r4, #28
 80076e4:	4025      	ands	r5, r4
 80076e6:	3c1b      	subs	r4, #27
 80076e8:	40ac      	lsls	r4, r5
 80076ea:	433c      	orrs	r4, r7
 80076ec:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80076ee:	6804      	ldr	r4, [r0, #0]
 80076f0:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076f2:	6883      	ldr	r3, [r0, #8]
 80076f4:	2b10      	cmp	r3, #16
 80076f6:	d004      	beq.n	8007702 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80076f8:	6803      	ldr	r3, [r0, #0]
 80076fa:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80076fc:	6803      	ldr	r3, [r0, #0]
 80076fe:	60da      	str	r2, [r3, #12]
  }
}
 8007700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8007702:	6803      	ldr	r3, [r0, #0]
 8007704:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8007706:	6803      	ldr	r3, [r0, #0]
 8007708:	60d9      	str	r1, [r3, #12]
 800770a:	e7f9      	b.n	8007700 <DMA_SetConfig+0x38>
 800770c:	40020000 	.word	0x40020000

08007710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007710:	b510      	push	{r4, lr}
 8007712:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007714:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007716:	089b      	lsrs	r3, r3, #2
 8007718:	4a08      	ldr	r2, [pc, #32]	; (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 800771a:	4694      	mov	ip, r2
 800771c:	4463      	add	r3, ip
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007722:	7800      	ldrb	r0, [r0, #0]
 8007724:	3808      	subs	r0, #8
 8007726:	2114      	movs	r1, #20
 8007728:	f7f8 fd0a 	bl	8000140 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 800772e:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007730:	231f      	movs	r3, #31
 8007732:	4018      	ands	r0, r3
 8007734:	3b1e      	subs	r3, #30
 8007736:	4083      	lsls	r3, r0
 8007738:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800773a:	bd10      	pop	{r4, pc}
 800773c:	10008200 	.word	0x10008200
 8007740:	40020880 	.word	0x40020880

08007744 <HAL_DMA_Init>:
{
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8007748:	d055      	beq.n	80077f6 <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800774a:	6805      	ldr	r5, [r0, #0]
 800774c:	4b2b      	ldr	r3, [pc, #172]	; (80077fc <HAL_DMA_Init+0xb8>)
 800774e:	18e8      	adds	r0, r5, r3
 8007750:	2114      	movs	r1, #20
 8007752:	f7f8 fcf5 	bl	8000140 <__udivsi3>
 8007756:	0080      	lsls	r0, r0, #2
 8007758:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800775a:	2325      	movs	r3, #37	; 0x25
 800775c:	2202      	movs	r2, #2
 800775e:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	4a27      	ldr	r2, [pc, #156]	; (8007800 <HAL_DMA_Init+0xbc>)
 8007764:	4013      	ands	r3, r2
 8007766:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007768:	6822      	ldr	r2, [r4, #0]
 800776a:	6811      	ldr	r1, [r2, #0]
 800776c:	68a3      	ldr	r3, [r4, #8]
 800776e:	68e0      	ldr	r0, [r4, #12]
 8007770:	4303      	orrs	r3, r0
 8007772:	6920      	ldr	r0, [r4, #16]
 8007774:	4303      	orrs	r3, r0
 8007776:	6960      	ldr	r0, [r4, #20]
 8007778:	4303      	orrs	r3, r0
 800777a:	69a0      	ldr	r0, [r4, #24]
 800777c:	4303      	orrs	r3, r0
 800777e:	69e0      	ldr	r0, [r4, #28]
 8007780:	4303      	orrs	r3, r0
 8007782:	6a20      	ldr	r0, [r4, #32]
 8007784:	4303      	orrs	r3, r0
 8007786:	430b      	orrs	r3, r1
 8007788:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800778a:	0020      	movs	r0, r4
 800778c:	f7ff ffc0 	bl	8007710 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007790:	2380      	movs	r3, #128	; 0x80
 8007792:	01db      	lsls	r3, r3, #7
 8007794:	68a2      	ldr	r2, [r4, #8]
 8007796:	429a      	cmp	r2, r3
 8007798:	d018      	beq.n	80077cc <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800779a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	213f      	movs	r1, #63	; 0x3f
 80077a0:	400b      	ands	r3, r1
 80077a2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80077a6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80077a8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80077aa:	6863      	ldr	r3, [r4, #4]
 80077ac:	1e5a      	subs	r2, r3, #1
 80077ae:	2a03      	cmp	r2, #3
 80077b0:	d90f      	bls.n	80077d2 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 80077b2:	2300      	movs	r3, #0
 80077b4:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80077b6:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80077b8:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80077be:	2225      	movs	r2, #37	; 0x25
 80077c0:	2101      	movs	r1, #1
 80077c2:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80077c4:	3a01      	subs	r2, #1
 80077c6:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80077c8:	2000      	movs	r0, #0
}
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80077cc:	2300      	movs	r3, #0
 80077ce:	6063      	str	r3, [r4, #4]
 80077d0:	e7e3      	b.n	800779a <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80077d2:	223f      	movs	r2, #63	; 0x3f
 80077d4:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077d6:	4a0b      	ldr	r2, [pc, #44]	; (8007804 <HAL_DMA_Init+0xc0>)
 80077d8:	189a      	adds	r2, r3, r2
 80077da:	0092      	lsls	r2, r2, #2
 80077dc:	6522      	str	r2, [r4, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077de:	490a      	ldr	r1, [pc, #40]	; (8007808 <HAL_DMA_Init+0xc4>)
 80077e0:	6561      	str	r1, [r4, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80077e2:	3b01      	subs	r3, #1
 80077e4:	2101      	movs	r1, #1
 80077e6:	4099      	lsls	r1, r3
 80077e8:	65a1      	str	r1, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80077f2:	605a      	str	r2, [r3, #4]
 80077f4:	e7e1      	b.n	80077ba <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80077f6:	2001      	movs	r0, #1
 80077f8:	e7e7      	b.n	80077ca <HAL_DMA_Init+0x86>
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	bffdfff8 	.word	0xbffdfff8
 8007800:	ffff800f 	.word	0xffff800f
 8007804:	1000823f 	.word	0x1000823f
 8007808:	40020940 	.word	0x40020940

0800780c <HAL_DMA_Start_IT>:
{
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8007810:	2024      	movs	r0, #36	; 0x24
 8007812:	5c20      	ldrb	r0, [r4, r0]
 8007814:	2801      	cmp	r0, #1
 8007816:	d045      	beq.n	80078a4 <HAL_DMA_Start_IT+0x98>
 8007818:	2024      	movs	r0, #36	; 0x24
 800781a:	2501      	movs	r5, #1
 800781c:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 800781e:	3001      	adds	r0, #1
 8007820:	5c20      	ldrb	r0, [r4, r0]
 8007822:	2801      	cmp	r0, #1
 8007824:	d006      	beq.n	8007834 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007826:	2380      	movs	r3, #128	; 0x80
 8007828:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800782a:	3b5c      	subs	r3, #92	; 0x5c
 800782c:	2200      	movs	r2, #0
 800782e:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8007830:	2001      	movs	r0, #1
}
 8007832:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8007834:	3024      	adds	r0, #36	; 0x24
 8007836:	3501      	adds	r5, #1
 8007838:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800783a:	2000      	movs	r0, #0
 800783c:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800783e:	6825      	ldr	r5, [r4, #0]
 8007840:	6828      	ldr	r0, [r5, #0]
 8007842:	2601      	movs	r6, #1
 8007844:	43b0      	bics	r0, r6
 8007846:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007848:	0020      	movs	r0, r4
 800784a:	f7ff ff3d 	bl	80076c8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800784e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01c      	beq.n	800788e <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	6813      	ldr	r3, [r2, #0]
 8007858:	210e      	movs	r1, #14
 800785a:	430b      	orrs	r3, r1
 800785c:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800785e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007860:	6813      	ldr	r3, [r2, #0]
 8007862:	03db      	lsls	r3, r3, #15
 8007864:	d504      	bpl.n	8007870 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007866:	6811      	ldr	r1, [r2, #0]
 8007868:	2380      	movs	r3, #128	; 0x80
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	430b      	orrs	r3, r1
 800786e:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8007870:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007872:	2b00      	cmp	r3, #0
 8007874:	d004      	beq.n	8007880 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007876:	6819      	ldr	r1, [r3, #0]
 8007878:	2280      	movs	r2, #128	; 0x80
 800787a:	0052      	lsls	r2, r2, #1
 800787c:	430a      	orrs	r2, r1
 800787e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8007880:	6822      	ldr	r2, [r4, #0]
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	2101      	movs	r1, #1
 8007886:	430b      	orrs	r3, r1
 8007888:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800788a:	2000      	movs	r0, #0
 800788c:	e7d1      	b.n	8007832 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	6813      	ldr	r3, [r2, #0]
 8007892:	2104      	movs	r1, #4
 8007894:	438b      	bics	r3, r1
 8007896:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007898:	6822      	ldr	r2, [r4, #0]
 800789a:	6813      	ldr	r3, [r2, #0]
 800789c:	3106      	adds	r1, #6
 800789e:	430b      	orrs	r3, r1
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e7dc      	b.n	800785e <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80078a4:	2002      	movs	r0, #2
 80078a6:	e7c4      	b.n	8007832 <HAL_DMA_Start_IT+0x26>

080078a8 <HAL_DMA_Abort>:
{
 80078a8:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d036      	beq.n	800791c <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80078ae:	2325      	movs	r3, #37	; 0x25
 80078b0:	5cc3      	ldrb	r3, [r0, r3]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d006      	beq.n	80078c4 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078b6:	2304      	movs	r3, #4
 80078b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80078ba:	3320      	adds	r3, #32
 80078bc:	2200      	movs	r2, #0
 80078be:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80078c0:	2001      	movs	r0, #1
}
 80078c2:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078c4:	6802      	ldr	r2, [r0, #0]
 80078c6:	6813      	ldr	r3, [r2, #0]
 80078c8:	210e      	movs	r1, #14
 80078ca:	438b      	bics	r3, r1
 80078cc:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80078ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80078d0:	6813      	ldr	r3, [r2, #0]
 80078d2:	4913      	ldr	r1, [pc, #76]	; (8007920 <HAL_DMA_Abort+0x78>)
 80078d4:	400b      	ands	r3, r1
 80078d6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80078d8:	6801      	ldr	r1, [r0, #0]
 80078da:	680a      	ldr	r2, [r1, #0]
 80078dc:	2301      	movs	r3, #1
 80078de:	439a      	bics	r2, r3
 80078e0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80078e2:	4910      	ldr	r1, [pc, #64]	; (8007924 <HAL_DMA_Abort+0x7c>)
 80078e4:	684c      	ldr	r4, [r1, #4]
 80078e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80078e8:	251c      	movs	r5, #28
 80078ea:	402a      	ands	r2, r5
 80078ec:	4093      	lsls	r3, r2
 80078ee:	4323      	orrs	r3, r4
 80078f0:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078f2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80078f4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80078f6:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80078f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d006      	beq.n	800790c <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	4907      	ldr	r1, [pc, #28]	; (8007920 <HAL_DMA_Abort+0x78>)
 8007902:	400a      	ands	r2, r1
 8007904:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007906:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8007908:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800790a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800790c:	2325      	movs	r3, #37	; 0x25
 800790e:	2201      	movs	r2, #1
 8007910:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8007912:	3b01      	subs	r3, #1
 8007914:	2200      	movs	r2, #0
 8007916:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8007918:	2000      	movs	r0, #0
 800791a:	e7d2      	b.n	80078c2 <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 800791c:	2001      	movs	r0, #1
 800791e:	e7d0      	b.n	80078c2 <HAL_DMA_Abort+0x1a>
 8007920:	fffffeff 	.word	0xfffffeff
 8007924:	40020000 	.word	0x40020000

08007928 <HAL_DMA_Abort_IT>:
{
 8007928:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800792a:	2325      	movs	r3, #37	; 0x25
 800792c:	5cc3      	ldrb	r3, [r0, r3]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d003      	beq.n	800793a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007932:	2304      	movs	r3, #4
 8007934:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8007936:	2001      	movs	r0, #1
}
 8007938:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800793a:	6802      	ldr	r2, [r0, #0]
 800793c:	6813      	ldr	r3, [r2, #0]
 800793e:	210e      	movs	r1, #14
 8007940:	438b      	bics	r3, r1
 8007942:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007944:	6801      	ldr	r1, [r0, #0]
 8007946:	680a      	ldr	r2, [r1, #0]
 8007948:	2301      	movs	r3, #1
 800794a:	439a      	bics	r2, r3
 800794c:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800794e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007950:	680a      	ldr	r2, [r1, #0]
 8007952:	4c13      	ldr	r4, [pc, #76]	; (80079a0 <HAL_DMA_Abort_IT+0x78>)
 8007954:	4022      	ands	r2, r4
 8007956:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007958:	4912      	ldr	r1, [pc, #72]	; (80079a4 <HAL_DMA_Abort_IT+0x7c>)
 800795a:	684c      	ldr	r4, [r1, #4]
 800795c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800795e:	251c      	movs	r5, #28
 8007960:	402a      	ands	r2, r5
 8007962:	4093      	lsls	r3, r2
 8007964:	4323      	orrs	r3, r4
 8007966:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007968:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800796a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800796c:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800796e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007970:	2b00      	cmp	r3, #0
 8007972:	d006      	beq.n	8007982 <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	490a      	ldr	r1, [pc, #40]	; (80079a0 <HAL_DMA_Abort_IT+0x78>)
 8007978:	400a      	ands	r2, r1
 800797a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800797c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800797e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007980:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8007982:	2325      	movs	r3, #37	; 0x25
 8007984:	2201      	movs	r2, #1
 8007986:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8007988:	3b01      	subs	r3, #1
 800798a:	2200      	movs	r2, #0
 800798c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800798e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8007994:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8007996:	2000      	movs	r0, #0
 8007998:	e7ce      	b.n	8007938 <HAL_DMA_Abort_IT+0x10>
 800799a:	2000      	movs	r0, #0
 800799c:	e7cc      	b.n	8007938 <HAL_DMA_Abort_IT+0x10>
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	fffffeff 	.word	0xfffffeff
 80079a4:	40020000 	.word	0x40020000

080079a8 <HAL_DMA_IRQHandler>:
{
 80079a8:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 80079aa:	4b31      	ldr	r3, [pc, #196]	; (8007a70 <HAL_DMA_IRQHandler+0xc8>)
 80079ac:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80079ae:	6804      	ldr	r4, [r0, #0]
 80079b0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80079b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80079b4:	221c      	movs	r2, #28
 80079b6:	4013      	ands	r3, r2
 80079b8:	3a18      	subs	r2, #24
 80079ba:	409a      	lsls	r2, r3
 80079bc:	4211      	tst	r1, r2
 80079be:	d016      	beq.n	80079ee <HAL_DMA_IRQHandler+0x46>
 80079c0:	076a      	lsls	r2, r5, #29
 80079c2:	d514      	bpl.n	80079ee <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	069b      	lsls	r3, r3, #26
 80079c8:	d403      	bmi.n	80079d2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	2204      	movs	r2, #4
 80079ce:	4393      	bics	r3, r2
 80079d0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80079d2:	4927      	ldr	r1, [pc, #156]	; (8007a70 <HAL_DMA_IRQHandler+0xc8>)
 80079d4:	684c      	ldr	r4, [r1, #4]
 80079d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80079d8:	231c      	movs	r3, #28
 80079da:	401a      	ands	r2, r3
 80079dc:	3b18      	subs	r3, #24
 80079de:	4093      	lsls	r3, r2
 80079e0:	4323      	orrs	r3, r4
 80079e2:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80079e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d000      	beq.n	80079ec <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 80079ea:	4798      	blx	r3
}
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80079ee:	2202      	movs	r2, #2
 80079f0:	409a      	lsls	r2, r3
 80079f2:	4211      	tst	r1, r2
 80079f4:	d01c      	beq.n	8007a30 <HAL_DMA_IRQHandler+0x88>
 80079f6:	07aa      	lsls	r2, r5, #30
 80079f8:	d51a      	bpl.n	8007a30 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80079fa:	6823      	ldr	r3, [r4, #0]
 80079fc:	069b      	lsls	r3, r3, #26
 80079fe:	d406      	bmi.n	8007a0e <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	220a      	movs	r2, #10
 8007a04:	4393      	bics	r3, r2
 8007a06:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8007a08:	2325      	movs	r3, #37	; 0x25
 8007a0a:	3a09      	subs	r2, #9
 8007a0c:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007a0e:	4918      	ldr	r1, [pc, #96]	; (8007a70 <HAL_DMA_IRQHandler+0xc8>)
 8007a10:	684c      	ldr	r4, [r1, #4]
 8007a12:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007a14:	231c      	movs	r3, #28
 8007a16:	401a      	ands	r2, r3
 8007a18:	3b1a      	subs	r3, #26
 8007a1a:	4093      	lsls	r3, r2
 8007a1c:	4323      	orrs	r3, r4
 8007a1e:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8007a20:	2324      	movs	r3, #36	; 0x24
 8007a22:	2200      	movs	r2, #0
 8007a24:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8007a26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0df      	beq.n	80079ec <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8007a2c:	4798      	blx	r3
 8007a2e:	e7dd      	b.n	80079ec <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007a30:	2208      	movs	r2, #8
 8007a32:	409a      	lsls	r2, r3
 8007a34:	4211      	tst	r1, r2
 8007a36:	d0d9      	beq.n	80079ec <HAL_DMA_IRQHandler+0x44>
 8007a38:	072d      	lsls	r5, r5, #28
 8007a3a:	d5d7      	bpl.n	80079ec <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	220e      	movs	r2, #14
 8007a40:	4393      	bics	r3, r2
 8007a42:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007a44:	490a      	ldr	r1, [pc, #40]	; (8007a70 <HAL_DMA_IRQHandler+0xc8>)
 8007a46:	684c      	ldr	r4, [r1, #4]
 8007a48:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007a4a:	231c      	movs	r3, #28
 8007a4c:	401a      	ands	r2, r3
 8007a4e:	3b1b      	subs	r3, #27
 8007a50:	001d      	movs	r5, r3
 8007a52:	4095      	lsls	r5, r2
 8007a54:	002a      	movs	r2, r5
 8007a56:	4322      	orrs	r2, r4
 8007a58:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007a5a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8007a5c:	2225      	movs	r2, #37	; 0x25
 8007a5e:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8007a60:	3323      	adds	r3, #35	; 0x23
 8007a62:	2200      	movs	r2, #0
 8007a64:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8007a66:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0bf      	beq.n	80079ec <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8007a6c:	4798      	blx	r3
  return;
 8007a6e:	e7bd      	b.n	80079ec <HAL_DMA_IRQHandler+0x44>
 8007a70:	40020000 	.word	0x40020000

08007a74 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a74:	b510      	push	{r4, lr}
 8007a76:	0004      	movs	r4, r0
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8007a78:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007a7e:	421a      	tst	r2, r3
 8007a80:	d010      	beq.n	8007aa4 <HAL_DMAEx_MUX_IRQHandler+0x30>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a82:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a84:	6813      	ldr	r3, [r2, #0]
 8007a86:	4914      	ldr	r1, [pc, #80]	; (8007ad8 <HAL_DMAEx_MUX_IRQHandler+0x64>)
 8007a88:	400b      	ands	r3, r1
 8007a8a:	6013      	str	r3, [r2, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a8c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007a8e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8007a90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8007a92:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007a94:	2380      	movs	r3, #128	; 0x80
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	63c3      	str	r3, [r0, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8007a9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d000      	beq.n	8007aa4 <HAL_DMAEx_MUX_IRQHandler+0x30>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007aa2:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8007aa4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d015      	beq.n	8007ad6 <HAL_DMAEx_MUX_IRQHandler+0x62>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8007aaa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ab0:	4211      	tst	r1, r2
 8007ab2:	d010      	beq.n	8007ad6 <HAL_DMAEx_MUX_IRQHandler+0x62>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4908      	ldr	r1, [pc, #32]	; (8007ad8 <HAL_DMAEx_MUX_IRQHandler+0x64>)
 8007ab8:	400a      	ands	r2, r1
 8007aba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007abc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007abe:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007ac0:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8007ac2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007ac4:	2380      	movs	r3, #128	; 0x80
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8007acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_DMAEx_MUX_IRQHandler+0x62>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ad2:	0020      	movs	r0, r4
 8007ad4:	4798      	blx	r3
      }
    }
  }
}
 8007ad6:	bd10      	pop	{r4, pc}
 8007ad8:	fffffeff 	.word	0xfffffeff

08007adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ade:	46de      	mov	lr, fp
 8007ae0:	4657      	mov	r7, sl
 8007ae2:	464e      	mov	r6, r9
 8007ae4:	4645      	mov	r5, r8
 8007ae6:	b5e0      	push	{r5, r6, r7, lr}
 8007ae8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007aea:	680e      	ldr	r6, [r1, #0]
 8007aec:	2e00      	cmp	r6, #0
 8007aee:	d100      	bne.n	8007af2 <HAL_GPIO_Init+0x16>
 8007af0:	e0d1      	b.n	8007c96 <HAL_GPIO_Init+0x1ba>
 8007af2:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8007af4:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007af6:	2401      	movs	r4, #1
 8007af8:	46a4      	mov	ip, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007afa:	3402      	adds	r4, #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007afc:	25c0      	movs	r5, #192	; 0xc0
 8007afe:	02ad      	lsls	r5, r5, #10
 8007b00:	46a9      	mov	r9, r5
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007b02:	250f      	movs	r5, #15
 8007b04:	46aa      	mov	sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007b06:	4d67      	ldr	r5, [pc, #412]	; (8007ca4 <HAL_GPIO_Init+0x1c8>)
 8007b08:	1945      	adds	r5, r0, r5
 8007b0a:	426f      	negs	r7, r5
 8007b0c:	417d      	adcs	r5, r7
 8007b0e:	426d      	negs	r5, r5
 8007b10:	9503      	str	r5, [sp, #12]
 8007b12:	e04e      	b.n	8007bb2 <HAL_GPIO_Init+0xd6>
        temp = GPIOx->OSPEEDR;
 8007b14:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007b16:	0027      	movs	r7, r4
 8007b18:	4097      	lsls	r7, r2
 8007b1a:	43be      	bics	r6, r7
 8007b1c:	46b0      	mov	r8, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007b1e:	68ce      	ldr	r6, [r1, #12]
 8007b20:	4096      	lsls	r6, r2
 8007b22:	4647      	mov	r7, r8
 8007b24:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8007b26:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8007b28:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b2a:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b2c:	684d      	ldr	r5, [r1, #4]
 8007b2e:	092d      	lsrs	r5, r5, #4
 8007b30:	4667      	mov	r7, ip
 8007b32:	403d      	ands	r5, r7
 8007b34:	409d      	lsls	r5, r3
 8007b36:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8007b38:	6045      	str	r5, [r0, #4]
 8007b3a:	e046      	b.n	8007bca <HAL_GPIO_Init+0xee>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	465f      	mov	r7, fp
 8007b40:	40be      	lsls	r6, r7
 8007b42:	4647      	mov	r7, r8
 8007b44:	433e      	orrs	r6, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8007b46:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007b48:	4d57      	ldr	r5, [pc, #348]	; (8007ca8 <HAL_GPIO_Init+0x1cc>)
 8007b4a:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8007b4c:	9e01      	ldr	r6, [sp, #4]
 8007b4e:	43f6      	mvns	r6, r6
 8007b50:	9602      	str	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b52:	684f      	ldr	r7, [r1, #4]
 8007b54:	02fe      	lsls	r6, r7, #11
 8007b56:	d500      	bpl.n	8007b5a <HAL_GPIO_Init+0x7e>
 8007b58:	e091      	b.n	8007c7e <HAL_GPIO_Init+0x1a2>
        temp &= ~(iocurrent);
 8007b5a:	9e02      	ldr	r6, [sp, #8]
 8007b5c:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8007b5e:	4f52      	ldr	r7, [pc, #328]	; (8007ca8 <HAL_GPIO_Init+0x1cc>)
 8007b60:	603d      	str	r5, [r7, #0]

        temp = EXTI->FTSR1;
 8007b62:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b64:	684f      	ldr	r7, [r1, #4]
 8007b66:	02be      	lsls	r6, r7, #10
 8007b68:	d500      	bpl.n	8007b6c <HAL_GPIO_Init+0x90>
 8007b6a:	e08b      	b.n	8007c84 <HAL_GPIO_Init+0x1a8>
        temp &= ~(iocurrent);
 8007b6c:	9e02      	ldr	r6, [sp, #8]
 8007b6e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8007b70:	4f4d      	ldr	r7, [pc, #308]	; (8007ca8 <HAL_GPIO_Init+0x1cc>)
 8007b72:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007b74:	2584      	movs	r5, #132	; 0x84
 8007b76:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b78:	684f      	ldr	r7, [r1, #4]
 8007b7a:	03be      	lsls	r6, r7, #14
 8007b7c:	d500      	bpl.n	8007b80 <HAL_GPIO_Init+0xa4>
 8007b7e:	e084      	b.n	8007c8a <HAL_GPIO_Init+0x1ae>
        temp &= ~(iocurrent);
 8007b80:	9e02      	ldr	r6, [sp, #8]
 8007b82:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8007b84:	4f48      	ldr	r7, [pc, #288]	; (8007ca8 <HAL_GPIO_Init+0x1cc>)
 8007b86:	46b8      	mov	r8, r7
 8007b88:	2784      	movs	r7, #132	; 0x84
 8007b8a:	46bb      	mov	fp, r7
 8007b8c:	4647      	mov	r7, r8
 8007b8e:	465e      	mov	r6, fp
 8007b90:	51bd      	str	r5, [r7, r6]

        temp = EXTI->IMR1;
 8007b92:	2580      	movs	r5, #128	; 0x80
 8007b94:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007b96:	684e      	ldr	r6, [r1, #4]
 8007b98:	03f6      	lsls	r6, r6, #15
 8007b9a:	d479      	bmi.n	8007c90 <HAL_GPIO_Init+0x1b4>
        temp &= ~(iocurrent);
 8007b9c:	9e02      	ldr	r6, [sp, #8]
 8007b9e:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8007ba0:	4f41      	ldr	r7, [pc, #260]	; (8007ca8 <HAL_GPIO_Init+0x1cc>)
 8007ba2:	2680      	movs	r6, #128	; 0x80
 8007ba4:	51bd      	str	r5, [r7, r6]
      }
    }

    position++;
 8007ba6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ba8:	680e      	ldr	r6, [r1, #0]
 8007baa:	3202      	adds	r2, #2
 8007bac:	0035      	movs	r5, r6
 8007bae:	40dd      	lsrs	r5, r3
 8007bb0:	d071      	beq.n	8007c96 <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007bb2:	4665      	mov	r5, ip
 8007bb4:	409d      	lsls	r5, r3
 8007bb6:	0037      	movs	r7, r6
 8007bb8:	402f      	ands	r7, r5
 8007bba:	9701      	str	r7, [sp, #4]
    if (iocurrent != 0x00u)
 8007bbc:	422e      	tst	r6, r5
 8007bbe:	d0f2      	beq.n	8007ba6 <HAL_GPIO_Init+0xca>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bc0:	684e      	ldr	r6, [r1, #4]
 8007bc2:	4026      	ands	r6, r4
 8007bc4:	3e01      	subs	r6, #1
 8007bc6:	2e01      	cmp	r6, #1
 8007bc8:	d9a4      	bls.n	8007b14 <HAL_GPIO_Init+0x38>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007bca:	684d      	ldr	r5, [r1, #4]
 8007bcc:	4025      	ands	r5, r4
 8007bce:	2d03      	cmp	r5, #3
 8007bd0:	d023      	beq.n	8007c1a <HAL_GPIO_Init+0x13e>
        temp = GPIOx->PUPDR;
 8007bd2:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007bd4:	0025      	movs	r5, r4
 8007bd6:	4095      	lsls	r5, r2
 8007bd8:	43ae      	bics	r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007bda:	688d      	ldr	r5, [r1, #8]
 8007bdc:	4095      	lsls	r5, r2
 8007bde:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8007be0:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007be2:	684d      	ldr	r5, [r1, #4]
 8007be4:	4025      	ands	r5, r4
 8007be6:	2d02      	cmp	r5, #2
 8007be8:	d117      	bne.n	8007c1a <HAL_GPIO_Init+0x13e>
        temp = GPIOx->AFR[position >> 3u];
 8007bea:	08dd      	lsrs	r5, r3, #3
 8007bec:	00ad      	lsls	r5, r5, #2
 8007bee:	1945      	adds	r5, r0, r5
 8007bf0:	9502      	str	r5, [sp, #8]
 8007bf2:	6a2e      	ldr	r6, [r5, #32]
 8007bf4:	46b0      	mov	r8, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007bf6:	2607      	movs	r6, #7
 8007bf8:	401e      	ands	r6, r3
 8007bfa:	00b6      	lsls	r6, r6, #2
 8007bfc:	4657      	mov	r7, sl
 8007bfe:	40b7      	lsls	r7, r6
 8007c00:	46bb      	mov	fp, r7
 8007c02:	4647      	mov	r7, r8
 8007c04:	465d      	mov	r5, fp
 8007c06:	43af      	bics	r7, r5
 8007c08:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007c0a:	690d      	ldr	r5, [r1, #16]
 8007c0c:	002f      	movs	r7, r5
 8007c0e:	40b7      	lsls	r7, r6
 8007c10:	003e      	movs	r6, r7
 8007c12:	4645      	mov	r5, r8
 8007c14:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 8007c16:	9d02      	ldr	r5, [sp, #8]
 8007c18:	622e      	str	r6, [r5, #32]
      temp = GPIOx->MODER;
 8007c1a:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007c1c:	0025      	movs	r5, r4
 8007c1e:	4095      	lsls	r5, r2
 8007c20:	43ae      	bics	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007c22:	684d      	ldr	r5, [r1, #4]
 8007c24:	4025      	ands	r5, r4
 8007c26:	4095      	lsls	r5, r2
 8007c28:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8007c2a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c2c:	684d      	ldr	r5, [r1, #4]
 8007c2e:	464e      	mov	r6, r9
 8007c30:	4235      	tst	r5, r6
 8007c32:	d0b8      	beq.n	8007ba6 <HAL_GPIO_Init+0xca>
        temp = EXTI->EXTICR[position >> 2u];
 8007c34:	089d      	lsrs	r5, r3, #2
 8007c36:	00ad      	lsls	r5, r5, #2
 8007c38:	4e1b      	ldr	r6, [pc, #108]	; (8007ca8 <HAL_GPIO_Init+0x1cc>)
 8007c3a:	46b0      	mov	r8, r6
 8007c3c:	4445      	add	r5, r8
 8007c3e:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8007c40:	9602      	str	r6, [sp, #8]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007c42:	0027      	movs	r7, r4
 8007c44:	401f      	ands	r7, r3
 8007c46:	00ff      	lsls	r7, r7, #3
 8007c48:	46bb      	mov	fp, r7
 8007c4a:	4657      	mov	r7, sl
 8007c4c:	465e      	mov	r6, fp
 8007c4e:	40b7      	lsls	r7, r6
 8007c50:	9e02      	ldr	r6, [sp, #8]
 8007c52:	43be      	bics	r6, r7
 8007c54:	46b0      	mov	r8, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007c56:	26a0      	movs	r6, #160	; 0xa0
 8007c58:	05f6      	lsls	r6, r6, #23
 8007c5a:	42b0      	cmp	r0, r6
 8007c5c:	d100      	bne.n	8007c60 <HAL_GPIO_Init+0x184>
 8007c5e:	e76d      	b.n	8007b3c <HAL_GPIO_Init+0x60>
 8007c60:	4e12      	ldr	r6, [pc, #72]	; (8007cac <HAL_GPIO_Init+0x1d0>)
 8007c62:	42b0      	cmp	r0, r6
 8007c64:	d007      	beq.n	8007c76 <HAL_GPIO_Init+0x19a>
 8007c66:	4e12      	ldr	r6, [pc, #72]	; (8007cb0 <HAL_GPIO_Init+0x1d4>)
 8007c68:	42b0      	cmp	r0, r6
 8007c6a:	d006      	beq.n	8007c7a <HAL_GPIO_Init+0x19e>
 8007c6c:	9e03      	ldr	r6, [sp, #12]
 8007c6e:	4667      	mov	r7, ip
 8007c70:	43be      	bics	r6, r7
 8007c72:	3605      	adds	r6, #5
 8007c74:	e763      	b.n	8007b3e <HAL_GPIO_Init+0x62>
 8007c76:	2601      	movs	r6, #1
 8007c78:	e761      	b.n	8007b3e <HAL_GPIO_Init+0x62>
 8007c7a:	2602      	movs	r6, #2
 8007c7c:	e75f      	b.n	8007b3e <HAL_GPIO_Init+0x62>
          temp |= iocurrent;
 8007c7e:	9e01      	ldr	r6, [sp, #4]
 8007c80:	4335      	orrs	r5, r6
 8007c82:	e76c      	b.n	8007b5e <HAL_GPIO_Init+0x82>
          temp |= iocurrent;
 8007c84:	9e01      	ldr	r6, [sp, #4]
 8007c86:	4335      	orrs	r5, r6
 8007c88:	e772      	b.n	8007b70 <HAL_GPIO_Init+0x94>
          temp |= iocurrent;
 8007c8a:	9e01      	ldr	r6, [sp, #4]
 8007c8c:	4335      	orrs	r5, r6
 8007c8e:	e779      	b.n	8007b84 <HAL_GPIO_Init+0xa8>
          temp |= iocurrent;
 8007c90:	9e01      	ldr	r6, [sp, #4]
 8007c92:	4335      	orrs	r5, r6
 8007c94:	e784      	b.n	8007ba0 <HAL_GPIO_Init+0xc4>
  }
}
 8007c96:	b005      	add	sp, #20
 8007c98:	bcf0      	pop	{r4, r5, r6, r7}
 8007c9a:	46bb      	mov	fp, r7
 8007c9c:	46b2      	mov	sl, r6
 8007c9e:	46a9      	mov	r9, r5
 8007ca0:	46a0      	mov	r8, r4
 8007ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca4:	affff400 	.word	0xaffff400
 8007ca8:	40021800 	.word	0x40021800
 8007cac:	50000400 	.word	0x50000400
 8007cb0:	50000800 	.word	0x50000800

08007cb4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007cb4:	6900      	ldr	r0, [r0, #16]
 8007cb6:	4008      	ands	r0, r1
 8007cb8:	1e43      	subs	r3, r0, #1
 8007cba:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8007cbc:	b2c0      	uxtb	r0, r0
}
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	d001      	beq.n	8007cc8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007cc4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007cc6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007cc8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8007cca:	e7fc      	b.n	8007cc6 <HAL_GPIO_WritePin+0x6>

08007ccc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ccc:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007cce:	0013      	movs	r3, r2
 8007cd0:	400b      	ands	r3, r1
 8007cd2:	041b      	lsls	r3, r3, #16
 8007cd4:	4391      	bics	r1, r2
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	6183      	str	r3, [r0, #24]
}
 8007cda:	4770      	bx	lr

08007cdc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cdc:	6802      	ldr	r2, [r0, #0]
 8007cde:	6993      	ldr	r3, [r2, #24]
 8007ce0:	079b      	lsls	r3, r3, #30
 8007ce2:	d501      	bpl.n	8007ce8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	6293      	str	r3, [r2, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ce8:	6803      	ldr	r3, [r0, #0]
 8007cea:	699a      	ldr	r2, [r3, #24]
 8007cec:	07d2      	lsls	r2, r2, #31
 8007cee:	d403      	bmi.n	8007cf8 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	619a      	str	r2, [r3, #24]
  }
}
 8007cf8:	4770      	bx	lr
	...

08007cfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007cfc:	b530      	push	{r4, r5, lr}
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cfe:	6800      	ldr	r0, [r0, #0]
 8007d00:	6844      	ldr	r4, [r0, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007d02:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007d04:	9d03      	ldr	r5, [sp, #12]
 8007d06:	432b      	orrs	r3, r5
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	0589      	lsls	r1, r1, #22
 8007d0c:	0d89      	lsrs	r1, r1, #22
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	0052      	lsls	r2, r2, #1
 8007d12:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007d14:	0d6b      	lsrs	r3, r5, #21
 8007d16:	2180      	movs	r1, #128	; 0x80
 8007d18:	00c9      	lsls	r1, r1, #3
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	4902      	ldr	r1, [pc, #8]	; (8007d28 <I2C_TransferConfig+0x2c>)
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	439c      	bics	r4, r3
 8007d22:	4322      	orrs	r2, r4
 8007d24:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007d26:	bd30      	pop	{r4, r5, pc}
 8007d28:	03ff63ff 	.word	0x03ff63ff

08007d2c <I2C_IsErrorOccurred>:
{
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	46de      	mov	lr, fp
 8007d30:	4657      	mov	r7, sl
 8007d32:	464e      	mov	r6, r9
 8007d34:	4645      	mov	r5, r8
 8007d36:	b5e0      	push	{r5, r6, r7, lr}
 8007d38:	0004      	movs	r4, r0
 8007d3a:	000d      	movs	r5, r1
 8007d3c:	4690      	mov	r8, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d3e:	6801      	ldr	r1, [r0, #0]
 8007d40:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d42:	2210      	movs	r2, #16
 8007d44:	0016      	movs	r6, r2
 8007d46:	401e      	ands	r6, r3
  HAL_StatusTypeDef status = HAL_OK;
 8007d48:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d4a:	421a      	tst	r2, r3
 8007d4c:	d048      	beq.n	8007de0 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d4e:	2310      	movs	r3, #16
 8007d50:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	4699      	mov	r9, r3
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2700      	movs	r7, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d58:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 8007d5a:	3342      	adds	r3, #66	; 0x42
 8007d5c:	469b      	mov	fp, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d5e:	2380      	movs	r3, #128	; 0x80
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	469a      	mov	sl, r3
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d64:	6822      	ldr	r2, [r4, #0]
 8007d66:	6993      	ldr	r3, [r2, #24]
 8007d68:	421e      	tst	r6, r3
 8007d6a:	d130      	bne.n	8007dce <I2C_IsErrorOccurred+0xa2>
 8007d6c:	2f00      	cmp	r7, #0
 8007d6e:	d132      	bne.n	8007dd6 <I2C_IsErrorOccurred+0xaa>
      if (Timeout != HAL_MAX_DELAY)
 8007d70:	1c6b      	adds	r3, r5, #1
 8007d72:	d0f8      	beq.n	8007d66 <I2C_IsErrorOccurred+0x3a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d74:	f7ff f8ce 	bl	8006f14 <HAL_GetTick>
 8007d78:	4643      	mov	r3, r8
 8007d7a:	1ac0      	subs	r0, r0, r3
 8007d7c:	42a8      	cmp	r0, r5
 8007d7e:	d801      	bhi.n	8007d84 <I2C_IsErrorOccurred+0x58>
 8007d80:	2d00      	cmp	r5, #0
 8007d82:	d1ef      	bne.n	8007d64 <I2C_IsErrorOccurred+0x38>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d84:	6822      	ldr	r2, [r4, #0]
 8007d86:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8007d88:	465b      	mov	r3, fp
 8007d8a:	5ce3      	ldrb	r3, [r4, r3]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	469c      	mov	ip, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d90:	6991      	ldr	r1, [r2, #24]
 8007d92:	4653      	mov	r3, sl
 8007d94:	4219      	tst	r1, r3
 8007d96:	d004      	beq.n	8007da2 <I2C_IsErrorOccurred+0x76>
 8007d98:	0440      	lsls	r0, r0, #17
 8007d9a:	d402      	bmi.n	8007da2 <I2C_IsErrorOccurred+0x76>
              (tmp1 != I2C_CR2_STOP) && \
 8007d9c:	4663      	mov	r3, ip
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d10c      	bne.n	8007dbc <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	421e      	tst	r6, r3
 8007da8:	d1dc      	bne.n	8007d64 <I2C_IsErrorOccurred+0x38>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007daa:	f7ff f8b3 	bl	8006f14 <HAL_GetTick>
 8007dae:	4643      	mov	r3, r8
 8007db0:	1ac0      	subs	r0, r0, r3
 8007db2:	2819      	cmp	r0, #25
 8007db4:	d9f5      	bls.n	8007da2 <I2C_IsErrorOccurred+0x76>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007db6:	46b1      	mov	r9, r6
              status = HAL_ERROR;
 8007db8:	2701      	movs	r7, #1
 8007dba:	e7d3      	b.n	8007d64 <I2C_IsErrorOccurred+0x38>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007dbc:	6851      	ldr	r1, [r2, #4]
 8007dbe:	2380      	movs	r3, #128	; 0x80
 8007dc0:	01db      	lsls	r3, r3, #7
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8007dc6:	f7ff f8a5 	bl	8006f14 <HAL_GetTick>
 8007dca:	4680      	mov	r8, r0
 8007dcc:	e7e9      	b.n	8007da2 <I2C_IsErrorOccurred+0x76>
    if (status == HAL_OK)
 8007dce:	2f00      	cmp	r7, #0
 8007dd0:	d101      	bne.n	8007dd6 <I2C_IsErrorOccurred+0xaa>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dd2:	2320      	movs	r3, #32
 8007dd4:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8007dd6:	2604      	movs	r6, #4
 8007dd8:	464b      	mov	r3, r9
 8007dda:	4333      	orrs	r3, r6
 8007ddc:	001e      	movs	r6, r3
    status = HAL_ERROR;
 8007dde:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007de4:	05d9      	lsls	r1, r3, #23
 8007de6:	d504      	bpl.n	8007df2 <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8007de8:	2101      	movs	r1, #1
 8007dea:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007dec:	31ff      	adds	r1, #255	; 0xff
 8007dee:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8007df0:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007df2:	055a      	lsls	r2, r3, #21
 8007df4:	d527      	bpl.n	8007e46 <I2C_IsErrorOccurred+0x11a>
    error_code |= HAL_I2C_ERROR_OVR;
 8007df6:	2208      	movs	r2, #8
 8007df8:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007dfa:	6822      	ldr	r2, [r4, #0]
 8007dfc:	2180      	movs	r1, #128	; 0x80
 8007dfe:	00c9      	lsls	r1, r1, #3
 8007e00:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e02:	059b      	lsls	r3, r3, #22
 8007e04:	d505      	bpl.n	8007e12 <I2C_IsErrorOccurred+0xe6>
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e06:	2302      	movs	r3, #2
 8007e08:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	2280      	movs	r2, #128	; 0x80
 8007e0e:	0092      	lsls	r2, r2, #2
 8007e10:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8007e12:	0020      	movs	r0, r4
 8007e14:	f7ff ff62 	bl	8007cdc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	6853      	ldr	r3, [r2, #4]
 8007e1c:	490c      	ldr	r1, [pc, #48]	; (8007e50 <I2C_IsErrorOccurred+0x124>)
 8007e1e:	400b      	ands	r3, r1
 8007e20:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8007e22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e24:	4333      	orrs	r3, r6
 8007e26:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e28:	2341      	movs	r3, #65	; 0x41
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	3222      	adds	r2, #34	; 0x22
 8007e32:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8007e34:	3a02      	subs	r2, #2
 8007e36:	54a3      	strb	r3, [r4, r2]
 8007e38:	2001      	movs	r0, #1
}
 8007e3a:	bcf0      	pop	{r4, r5, r6, r7}
 8007e3c:	46bb      	mov	fp, r7
 8007e3e:	46b2      	mov	sl, r6
 8007e40:	46a9      	mov	r9, r5
 8007e42:	46a0      	mov	r8, r4
 8007e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e46:	059b      	lsls	r3, r3, #22
 8007e48:	d4dd      	bmi.n	8007e06 <I2C_IsErrorOccurred+0xda>
  if (status != HAL_OK)
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d0f5      	beq.n	8007e3a <I2C_IsErrorOccurred+0x10e>
 8007e4e:	e7e0      	b.n	8007e12 <I2C_IsErrorOccurred+0xe6>
 8007e50:	fe00e800 	.word	0xfe00e800

08007e54 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	0004      	movs	r4, r0
 8007e58:	000d      	movs	r5, r1
 8007e5a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e5c:	2702      	movs	r7, #2
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	421f      	tst	r7, r3
 8007e64:	d11c      	bne.n	8007ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e66:	0032      	movs	r2, r6
 8007e68:	0029      	movs	r1, r5
 8007e6a:	0020      	movs	r0, r4
 8007e6c:	f7ff ff5e 	bl	8007d2c <I2C_IsErrorOccurred>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d117      	bne.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007e74:	1c6b      	adds	r3, r5, #1
 8007e76:	d0f2      	beq.n	8007e5e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e78:	f7ff f84c 	bl	8006f14 <HAL_GetTick>
 8007e7c:	1b80      	subs	r0, r0, r6
 8007e7e:	42a8      	cmp	r0, r5
 8007e80:	d801      	bhi.n	8007e86 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007e82:	2d00      	cmp	r5, #0
 8007e84:	d1eb      	bne.n	8007e5e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e88:	2220      	movs	r2, #32
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e8e:	2341      	movs	r3, #65	; 0x41
 8007e90:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e92:	2300      	movs	r3, #0
 8007e94:	3222      	adds	r2, #34	; 0x22
 8007e96:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8007e98:	3a02      	subs	r2, #2
 8007e9a:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	e000      	b.n	8007ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 8007ea0:	2000      	movs	r0, #0
}
 8007ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	e7fc      	b.n	8007ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08007ea8 <I2C_WaitOnFlagUntilTimeout>:
{
 8007ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eaa:	46c6      	mov	lr, r8
 8007eac:	b500      	push	{lr}
 8007eae:	4680      	mov	r8, r0
 8007eb0:	000d      	movs	r5, r1
 8007eb2:	0017      	movs	r7, r2
 8007eb4:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007eb6:	4643      	mov	r3, r8
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699c      	ldr	r4, [r3, #24]
 8007ebc:	402c      	ands	r4, r5
 8007ebe:	1b64      	subs	r4, r4, r5
 8007ec0:	4262      	negs	r2, r4
 8007ec2:	4154      	adcs	r4, r2
 8007ec4:	42bc      	cmp	r4, r7
 8007ec6:	d118      	bne.n	8007efa <I2C_WaitOnFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007ec8:	1c72      	adds	r2, r6, #1
 8007eca:	d0f6      	beq.n	8007eba <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ecc:	f7ff f822 	bl	8006f14 <HAL_GetTick>
 8007ed0:	9b06      	ldr	r3, [sp, #24]
 8007ed2:	1ac0      	subs	r0, r0, r3
 8007ed4:	42b0      	cmp	r0, r6
 8007ed6:	d801      	bhi.n	8007edc <I2C_WaitOnFlagUntilTimeout+0x34>
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	d1ec      	bne.n	8007eb6 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007edc:	4643      	mov	r3, r8
 8007ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	4641      	mov	r1, r8
 8007ee6:	644b      	str	r3, [r1, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007ee8:	2341      	movs	r3, #65	; 0x41
 8007eea:	54ca      	strb	r2, [r1, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	3222      	adds	r2, #34	; 0x22
 8007ef0:	548b      	strb	r3, [r1, r2]
        __HAL_UNLOCK(hi2c);
 8007ef2:	3a02      	subs	r2, #2
 8007ef4:	548b      	strb	r3, [r1, r2]
        return HAL_ERROR;
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	e000      	b.n	8007efc <I2C_WaitOnFlagUntilTimeout+0x54>
  return HAL_OK;
 8007efa:	2000      	movs	r0, #0
}
 8007efc:	bc80      	pop	{r7}
 8007efe:	46b8      	mov	r8, r7
 8007f00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f02 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f04:	0005      	movs	r5, r0
 8007f06:	000c      	movs	r4, r1
 8007f08:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f0a:	2720      	movs	r7, #32
 8007f0c:	682b      	ldr	r3, [r5, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	421f      	tst	r7, r3
 8007f12:	d11a      	bne.n	8007f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f14:	0032      	movs	r2, r6
 8007f16:	0021      	movs	r1, r4
 8007f18:	0028      	movs	r0, r5
 8007f1a:	f7ff ff07 	bl	8007d2c <I2C_IsErrorOccurred>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d115      	bne.n	8007f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f22:	f7fe fff7 	bl	8006f14 <HAL_GetTick>
 8007f26:	1b80      	subs	r0, r0, r6
 8007f28:	42a0      	cmp	r0, r4
 8007f2a:	d801      	bhi.n	8007f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007f2c:	2c00      	cmp	r4, #0
 8007f2e:	d1ed      	bne.n	8007f0c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f30:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007f32:	2220      	movs	r2, #32
 8007f34:	4313      	orrs	r3, r2
 8007f36:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007f38:	2341      	movs	r3, #65	; 0x41
 8007f3a:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	3222      	adds	r2, #34	; 0x22
 8007f40:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 8007f42:	3a02      	subs	r2, #2
 8007f44:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 8007f46:	2001      	movs	r0, #1
}
 8007f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e7fc      	b.n	8007f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8007f4e:	2001      	movs	r0, #1
 8007f50:	e7fa      	b.n	8007f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08007f54 <HAL_I2C_Init>:
{
 8007f54:	b510      	push	{r4, lr}
 8007f56:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8007f58:	d059      	beq.n	800800e <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f5a:	2341      	movs	r3, #65	; 0x41
 8007f5c:	5cc3      	ldrb	r3, [r0, r3]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d043      	beq.n	8007fea <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f62:	2341      	movs	r3, #65	; 0x41
 8007f64:	2224      	movs	r2, #36	; 0x24
 8007f66:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8007f68:	6822      	ldr	r2, [r4, #0]
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	438b      	bics	r3, r1
 8007f70:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f72:	6822      	ldr	r2, [r4, #0]
 8007f74:	6863      	ldr	r3, [r4, #4]
 8007f76:	4927      	ldr	r1, [pc, #156]	; (8008014 <HAL_I2C_Init+0xc0>)
 8007f78:	400b      	ands	r3, r1
 8007f7a:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f7c:	6822      	ldr	r2, [r4, #0]
 8007f7e:	6893      	ldr	r3, [r2, #8]
 8007f80:	4925      	ldr	r1, [pc, #148]	; (8008018 <HAL_I2C_Init+0xc4>)
 8007f82:	400b      	ands	r3, r1
 8007f84:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f86:	68e3      	ldr	r3, [r4, #12]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d034      	beq.n	8007ff6 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	68a1      	ldr	r1, [r4, #8]
 8007f90:	2384      	movs	r3, #132	; 0x84
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	430b      	orrs	r3, r1
 8007f96:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f98:	68e3      	ldr	r3, [r4, #12]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d032      	beq.n	8008004 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	6851      	ldr	r1, [r2, #4]
 8007fa2:	4b1e      	ldr	r3, [pc, #120]	; (800801c <HAL_I2C_Init+0xc8>)
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	68d3      	ldr	r3, [r2, #12]
 8007fac:	491a      	ldr	r1, [pc, #104]	; (8008018 <HAL_I2C_Init+0xc4>)
 8007fae:	400b      	ands	r3, r1
 8007fb0:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fb2:	6821      	ldr	r1, [r4, #0]
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	6962      	ldr	r2, [r4, #20]
 8007fb8:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007fba:	69a2      	ldr	r2, [r4, #24]
 8007fbc:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	69e3      	ldr	r3, [r4, #28]
 8007fc6:	6a21      	ldr	r1, [r4, #32]
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007fcc:	6822      	ldr	r2, [r4, #0]
 8007fce:	6813      	ldr	r3, [r2, #0]
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fda:	2241      	movs	r2, #65	; 0x41
 8007fdc:	311f      	adds	r1, #31
 8007fde:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fe0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fe2:	3201      	adds	r2, #1
 8007fe4:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8007fe6:	2000      	movs	r0, #0
}
 8007fe8:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8007fea:	3340      	adds	r3, #64	; 0x40
 8007fec:	2200      	movs	r2, #0
 8007fee:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8007ff0:	f7fe fcbe 	bl	8006970 <HAL_I2C_MspInit>
 8007ff4:	e7b5      	b.n	8007f62 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ff6:	6822      	ldr	r2, [r4, #0]
 8007ff8:	68a1      	ldr	r1, [r4, #8]
 8007ffa:	2380      	movs	r3, #128	; 0x80
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	430b      	orrs	r3, r1
 8008000:	6093      	str	r3, [r2, #8]
 8008002:	e7c9      	b.n	8007f98 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	2280      	movs	r2, #128	; 0x80
 8008008:	0112      	lsls	r2, r2, #4
 800800a:	605a      	str	r2, [r3, #4]
 800800c:	e7c7      	b.n	8007f9e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800800e:	2001      	movs	r0, #1
 8008010:	e7ea      	b.n	8007fe8 <HAL_I2C_Init+0x94>
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	f0ffffff 	.word	0xf0ffffff
 8008018:	ffff7fff 	.word	0xffff7fff
 800801c:	02008000 	.word	0x02008000

08008020 <HAL_I2C_Mem_Write>:
{
 8008020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008022:	46ce      	mov	lr, r9
 8008024:	b500      	push	{lr}
 8008026:	b086      	sub	sp, #24
 8008028:	0004      	movs	r4, r0
 800802a:	9103      	str	r1, [sp, #12]
 800802c:	9205      	str	r2, [sp, #20]
 800802e:	9304      	str	r3, [sp, #16]
 8008030:	ab0c      	add	r3, sp, #48	; 0x30
 8008032:	cb20      	ldmia	r3!, {r5}
 8008034:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008036:	2341      	movs	r3, #65	; 0x41
 8008038:	5cc3      	ldrb	r3, [r0, r3]
 800803a:	2b20      	cmp	r3, #32
 800803c:	d000      	beq.n	8008040 <HAL_I2C_Mem_Write+0x20>
 800803e:	e0db      	b.n	80081f8 <HAL_I2C_Mem_Write+0x1d8>
    if ((pData == NULL) || (Size == 0U))
 8008040:	2d00      	cmp	r5, #0
 8008042:	d05a      	beq.n	80080fa <HAL_I2C_Mem_Write+0xda>
 8008044:	2e00      	cmp	r6, #0
 8008046:	d058      	beq.n	80080fa <HAL_I2C_Mem_Write+0xda>
    __HAL_LOCK(hi2c);
 8008048:	2340      	movs	r3, #64	; 0x40
 800804a:	5cc3      	ldrb	r3, [r0, r3]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d100      	bne.n	8008052 <HAL_I2C_Mem_Write+0x32>
 8008050:	e0d7      	b.n	8008202 <HAL_I2C_Mem_Write+0x1e2>
 8008052:	2340      	movs	r3, #64	; 0x40
 8008054:	2201      	movs	r2, #1
 8008056:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008058:	f7fe ff5c 	bl	8006f14 <HAL_GetTick>
 800805c:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800805e:	2180      	movs	r1, #128	; 0x80
 8008060:	9000      	str	r0, [sp, #0]
 8008062:	2319      	movs	r3, #25
 8008064:	2201      	movs	r2, #1
 8008066:	0209      	lsls	r1, r1, #8
 8008068:	0020      	movs	r0, r4
 800806a:	f7ff ff1d 	bl	8007ea8 <I2C_WaitOnFlagUntilTimeout>
 800806e:	0003      	movs	r3, r0
      return HAL_ERROR;
 8008070:	2001      	movs	r0, #1
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008072:	2b00      	cmp	r3, #0
 8008074:	d000      	beq.n	8008078 <HAL_I2C_Mem_Write+0x58>
 8008076:	e0c0      	b.n	80081fa <HAL_I2C_Mem_Write+0x1da>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008078:	3341      	adds	r3, #65	; 0x41
 800807a:	2221      	movs	r2, #33	; 0x21
 800807c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800807e:	3301      	adds	r3, #1
 8008080:	321f      	adds	r2, #31
 8008082:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008084:	2300      	movs	r3, #0
 8008086:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8008088:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800808a:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800808c:	6363      	str	r3, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800808e:	3380      	adds	r3, #128	; 0x80
 8008090:	9d04      	ldr	r5, [sp, #16]
 8008092:	b2ea      	uxtb	r2, r5
 8008094:	495f      	ldr	r1, [pc, #380]	; (8008214 <HAL_I2C_Mem_Write+0x1f4>)
 8008096:	9100      	str	r1, [sp, #0]
 8008098:	045b      	lsls	r3, r3, #17
 800809a:	9903      	ldr	r1, [sp, #12]
 800809c:	0020      	movs	r0, r4
 800809e:	f7ff fe2d 	bl	8007cfc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a2:	003a      	movs	r2, r7
 80080a4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80080a6:	0020      	movs	r0, r4
 80080a8:	f7ff fed4 	bl	8007e54 <I2C_WaitOnTXISFlagUntilTimeout>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d138      	bne.n	8008122 <HAL_I2C_Mem_Write+0x102>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080b0:	2d01      	cmp	r5, #1
 80080b2:	d127      	bne.n	8008104 <HAL_I2C_Mem_Write+0xe4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080b4:	6823      	ldr	r3, [r4, #0]
 80080b6:	466a      	mov	r2, sp
 80080b8:	7d16      	ldrb	r6, [r2, #20]
 80080ba:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80080bc:	9700      	str	r7, [sp, #0]
 80080be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080c0:	2200      	movs	r2, #0
 80080c2:	2180      	movs	r1, #128	; 0x80
 80080c4:	0020      	movs	r0, r4
 80080c6:	f7ff feef 	bl	8007ea8 <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d129      	bne.n	8008122 <HAL_I2C_Mem_Write+0x102>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2bff      	cmp	r3, #255	; 0xff
 80080d4:	d92a      	bls.n	800812c <HAL_I2C_Mem_Write+0x10c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080d6:	23ff      	movs	r3, #255	; 0xff
 80080d8:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80080da:	3b7f      	subs	r3, #127	; 0x7f
 80080dc:	2200      	movs	r2, #0
 80080de:	9200      	str	r2, [sp, #0]
 80080e0:	045b      	lsls	r3, r3, #17
 80080e2:	32ff      	adds	r2, #255	; 0xff
 80080e4:	9903      	ldr	r1, [sp, #12]
 80080e6:	0020      	movs	r0, r4
 80080e8:	f7ff fe08 	bl	8007cfc <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	049b      	lsls	r3, r3, #18
 80080f0:	4699      	mov	r9, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80080f2:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080f4:	2580      	movs	r5, #128	; 0x80
 80080f6:	046d      	lsls	r5, r5, #17
 80080f8:	e034      	b.n	8008164 <HAL_I2C_Mem_Write+0x144>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080fa:	2380      	movs	r3, #128	; 0x80
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8008100:	2001      	movs	r0, #1
 8008102:	e07a      	b.n	80081fa <HAL_I2C_Mem_Write+0x1da>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	9d05      	ldr	r5, [sp, #20]
 8008108:	0a2a      	lsrs	r2, r5, #8
 800810a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800810c:	003a      	movs	r2, r7
 800810e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008110:	0020      	movs	r0, r4
 8008112:	f7ff fe9f 	bl	8007e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8008116:	2800      	cmp	r0, #0
 8008118:	d103      	bne.n	8008122 <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	b2ee      	uxtb	r6, r5
 800811e:	629e      	str	r6, [r3, #40]	; 0x28
 8008120:	e7cc      	b.n	80080bc <HAL_I2C_Mem_Write+0x9c>
      __HAL_UNLOCK(hi2c);
 8008122:	2340      	movs	r3, #64	; 0x40
 8008124:	2200      	movs	r2, #0
 8008126:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8008128:	2001      	movs	r0, #1
 800812a:	e066      	b.n	80081fa <HAL_I2C_Mem_Write+0x1da>
      hi2c->XferSize = hi2c->XferCount;
 800812c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800812e:	b292      	uxth	r2, r2
 8008130:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008132:	2380      	movs	r3, #128	; 0x80
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	2100      	movs	r1, #0
 8008138:	9100      	str	r1, [sp, #0]
 800813a:	049b      	lsls	r3, r3, #18
 800813c:	9903      	ldr	r1, [sp, #12]
 800813e:	0020      	movs	r0, r4
 8008140:	f7ff fddc 	bl	8007cfc <I2C_TransferConfig>
 8008144:	e7d2      	b.n	80080ec <HAL_I2C_Mem_Write+0xcc>
          hi2c->XferSize = hi2c->XferCount;
 8008146:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008148:	b292      	uxth	r2, r2
 800814a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	2300      	movs	r3, #0
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	464b      	mov	r3, r9
 8008154:	9903      	ldr	r1, [sp, #12]
 8008156:	0020      	movs	r0, r4
 8008158:	f7ff fdd0 	bl	8007cfc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800815c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800815e:	b29b      	uxth	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d032      	beq.n	80081ca <HAL_I2C_Mem_Write+0x1aa>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008164:	003a      	movs	r2, r7
 8008166:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008168:	0020      	movs	r0, r4
 800816a:	f7ff fe73 	bl	8007e54 <I2C_WaitOnTXISFlagUntilTimeout>
 800816e:	2800      	cmp	r0, #0
 8008170:	d149      	bne.n	8008206 <HAL_I2C_Mem_Write+0x1e6>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008176:	7812      	ldrb	r2, [r2, #0]
 8008178:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800817a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800817c:	3301      	adds	r3, #1
 800817e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008182:	3b01      	subs	r3, #1
 8008184:	b29b      	uxth	r3, r3
 8008186:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008188:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800818a:	3b01      	subs	r3, #1
 800818c:	b29b      	uxth	r3, r3
 800818e:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008190:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008192:	b292      	uxth	r2, r2
 8008194:	2a00      	cmp	r2, #0
 8008196:	d0e1      	beq.n	800815c <HAL_I2C_Mem_Write+0x13c>
 8008198:	2b00      	cmp	r3, #0
 800819a:	d1df      	bne.n	800815c <HAL_I2C_Mem_Write+0x13c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800819c:	9700      	str	r7, [sp, #0]
 800819e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a0:	2200      	movs	r2, #0
 80081a2:	2180      	movs	r1, #128	; 0x80
 80081a4:	0020      	movs	r0, r4
 80081a6:	f7ff fe7f 	bl	8007ea8 <I2C_WaitOnFlagUntilTimeout>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d12d      	bne.n	800820a <HAL_I2C_Mem_Write+0x1ea>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2bff      	cmp	r3, #255	; 0xff
 80081b4:	d9c7      	bls.n	8008146 <HAL_I2C_Mem_Write+0x126>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081b6:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80081b8:	2300      	movs	r3, #0
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	002b      	movs	r3, r5
 80081be:	0032      	movs	r2, r6
 80081c0:	9903      	ldr	r1, [sp, #12]
 80081c2:	0020      	movs	r0, r4
 80081c4:	f7ff fd9a 	bl	8007cfc <I2C_TransferConfig>
 80081c8:	e7c8      	b.n	800815c <HAL_I2C_Mem_Write+0x13c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081ca:	003a      	movs	r2, r7
 80081cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 80081ce:	0020      	movs	r0, r4
 80081d0:	f7ff fe97 	bl	8007f02 <I2C_WaitOnSTOPFlagUntilTimeout>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d11a      	bne.n	800820e <HAL_I2C_Mem_Write+0x1ee>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	2220      	movs	r2, #32
 80081dc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80081de:	6821      	ldr	r1, [r4, #0]
 80081e0:	684b      	ldr	r3, [r1, #4]
 80081e2:	4d0d      	ldr	r5, [pc, #52]	; (8008218 <HAL_I2C_Mem_Write+0x1f8>)
 80081e4:	402b      	ands	r3, r5
 80081e6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80081e8:	2341      	movs	r3, #65	; 0x41
 80081ea:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081ec:	2300      	movs	r3, #0
 80081ee:	3222      	adds	r2, #34	; 0x22
 80081f0:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80081f2:	3a02      	subs	r2, #2
 80081f4:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80081f6:	e000      	b.n	80081fa <HAL_I2C_Mem_Write+0x1da>
    return HAL_BUSY;
 80081f8:	2002      	movs	r0, #2
}
 80081fa:	b006      	add	sp, #24
 80081fc:	bc80      	pop	{r7}
 80081fe:	46b9      	mov	r9, r7
 8008200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8008202:	2002      	movs	r0, #2
 8008204:	e7f9      	b.n	80081fa <HAL_I2C_Mem_Write+0x1da>
        return HAL_ERROR;
 8008206:	2001      	movs	r0, #1
 8008208:	e7f7      	b.n	80081fa <HAL_I2C_Mem_Write+0x1da>
          return HAL_ERROR;
 800820a:	2001      	movs	r0, #1
 800820c:	e7f5      	b.n	80081fa <HAL_I2C_Mem_Write+0x1da>
      return HAL_ERROR;
 800820e:	2001      	movs	r0, #1
 8008210:	e7f3      	b.n	80081fa <HAL_I2C_Mem_Write+0x1da>
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	80002000 	.word	0x80002000
 8008218:	fe00e800 	.word	0xfe00e800

0800821c <HAL_I2C_Mem_Read>:
{
 800821c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800821e:	46ce      	mov	lr, r9
 8008220:	b500      	push	{lr}
 8008222:	b086      	sub	sp, #24
 8008224:	0004      	movs	r4, r0
 8008226:	9103      	str	r1, [sp, #12]
 8008228:	9205      	str	r2, [sp, #20]
 800822a:	9304      	str	r3, [sp, #16]
 800822c:	ab0c      	add	r3, sp, #48	; 0x30
 800822e:	cb20      	ldmia	r3!, {r5}
 8008230:	881e      	ldrh	r6, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008232:	2341      	movs	r3, #65	; 0x41
 8008234:	5cc3      	ldrb	r3, [r0, r3]
 8008236:	2b20      	cmp	r3, #32
 8008238:	d000      	beq.n	800823c <HAL_I2C_Mem_Read+0x20>
 800823a:	e0dc      	b.n	80083f6 <HAL_I2C_Mem_Read+0x1da>
    if ((pData == NULL) || (Size == 0U))
 800823c:	2d00      	cmp	r5, #0
 800823e:	d059      	beq.n	80082f4 <HAL_I2C_Mem_Read+0xd8>
 8008240:	2e00      	cmp	r6, #0
 8008242:	d057      	beq.n	80082f4 <HAL_I2C_Mem_Read+0xd8>
    __HAL_LOCK(hi2c);
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	5cc3      	ldrb	r3, [r0, r3]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d100      	bne.n	800824e <HAL_I2C_Mem_Read+0x32>
 800824c:	e0d8      	b.n	8008400 <HAL_I2C_Mem_Read+0x1e4>
 800824e:	2340      	movs	r3, #64	; 0x40
 8008250:	2201      	movs	r2, #1
 8008252:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8008254:	f7fe fe5e 	bl	8006f14 <HAL_GetTick>
 8008258:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800825a:	2180      	movs	r1, #128	; 0x80
 800825c:	9000      	str	r0, [sp, #0]
 800825e:	2319      	movs	r3, #25
 8008260:	2201      	movs	r2, #1
 8008262:	0209      	lsls	r1, r1, #8
 8008264:	0020      	movs	r0, r4
 8008266:	f7ff fe1f 	bl	8007ea8 <I2C_WaitOnFlagUntilTimeout>
 800826a:	0003      	movs	r3, r0
      return HAL_ERROR;
 800826c:	2001      	movs	r0, #1
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800826e:	2b00      	cmp	r3, #0
 8008270:	d000      	beq.n	8008274 <HAL_I2C_Mem_Read+0x58>
 8008272:	e0c1      	b.n	80083f8 <HAL_I2C_Mem_Read+0x1dc>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008274:	3341      	adds	r3, #65	; 0x41
 8008276:	2222      	movs	r2, #34	; 0x22
 8008278:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800827a:	3301      	adds	r3, #1
 800827c:	321e      	adds	r2, #30
 800827e:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008280:	2300      	movs	r3, #0
 8008282:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8008284:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8008286:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008288:	6363      	str	r3, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800828a:	9d04      	ldr	r5, [sp, #16]
 800828c:	b2ea      	uxtb	r2, r5
 800828e:	4b60      	ldr	r3, [pc, #384]	; (8008410 <HAL_I2C_Mem_Read+0x1f4>)
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	2300      	movs	r3, #0
 8008294:	9903      	ldr	r1, [sp, #12]
 8008296:	0020      	movs	r0, r4
 8008298:	f7ff fd30 	bl	8007cfc <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800829c:	003a      	movs	r2, r7
 800829e:	990e      	ldr	r1, [sp, #56]	; 0x38
 80082a0:	0020      	movs	r0, r4
 80082a2:	f7ff fdd7 	bl	8007e54 <I2C_WaitOnTXISFlagUntilTimeout>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d138      	bne.n	800831c <HAL_I2C_Mem_Read+0x100>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082aa:	2d01      	cmp	r5, #1
 80082ac:	d127      	bne.n	80082fe <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	466a      	mov	r2, sp
 80082b2:	7d16      	ldrb	r6, [r2, #20]
 80082b4:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80082b6:	9700      	str	r7, [sp, #0]
 80082b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082ba:	2200      	movs	r2, #0
 80082bc:	2140      	movs	r1, #64	; 0x40
 80082be:	0020      	movs	r0, r4
 80082c0:	f7ff fdf2 	bl	8007ea8 <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d129      	bne.n	800831c <HAL_I2C_Mem_Read+0x100>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	2bff      	cmp	r3, #255	; 0xff
 80082ce:	d92a      	bls.n	8008326 <HAL_I2C_Mem_Read+0x10a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082d0:	23ff      	movs	r3, #255	; 0xff
 80082d2:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80082d4:	3b7f      	subs	r3, #127	; 0x7f
 80082d6:	4a4f      	ldr	r2, [pc, #316]	; (8008414 <HAL_I2C_Mem_Read+0x1f8>)
 80082d8:	9200      	str	r2, [sp, #0]
 80082da:	045b      	lsls	r3, r3, #17
 80082dc:	22ff      	movs	r2, #255	; 0xff
 80082de:	9903      	ldr	r1, [sp, #12]
 80082e0:	0020      	movs	r0, r4
 80082e2:	f7ff fd0b 	bl	8007cfc <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082e6:	2380      	movs	r3, #128	; 0x80
 80082e8:	049b      	lsls	r3, r3, #18
 80082ea:	4699      	mov	r9, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082ec:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80082ee:	2580      	movs	r5, #128	; 0x80
 80082f0:	046d      	lsls	r5, r5, #17
 80082f2:	e034      	b.n	800835e <HAL_I2C_Mem_Read+0x142>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082f4:	2380      	movs	r3, #128	; 0x80
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 80082fa:	2001      	movs	r0, #1
 80082fc:	e07c      	b.n	80083f8 <HAL_I2C_Mem_Read+0x1dc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	9d05      	ldr	r5, [sp, #20]
 8008302:	0a2a      	lsrs	r2, r5, #8
 8008304:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008306:	003a      	movs	r2, r7
 8008308:	990e      	ldr	r1, [sp, #56]	; 0x38
 800830a:	0020      	movs	r0, r4
 800830c:	f7ff fda2 	bl	8007e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8008310:	2800      	cmp	r0, #0
 8008312:	d103      	bne.n	800831c <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	b2ee      	uxtb	r6, r5
 8008318:	629e      	str	r6, [r3, #40]	; 0x28
 800831a:	e7cc      	b.n	80082b6 <HAL_I2C_Mem_Read+0x9a>
      __HAL_UNLOCK(hi2c);
 800831c:	2340      	movs	r3, #64	; 0x40
 800831e:	2200      	movs	r2, #0
 8008320:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8008322:	2001      	movs	r0, #1
 8008324:	e068      	b.n	80083f8 <HAL_I2C_Mem_Read+0x1dc>
      hi2c->XferSize = hi2c->XferCount;
 8008326:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008328:	b292      	uxth	r2, r2
 800832a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800832c:	2380      	movs	r3, #128	; 0x80
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	4938      	ldr	r1, [pc, #224]	; (8008414 <HAL_I2C_Mem_Read+0x1f8>)
 8008332:	9100      	str	r1, [sp, #0]
 8008334:	049b      	lsls	r3, r3, #18
 8008336:	9903      	ldr	r1, [sp, #12]
 8008338:	0020      	movs	r0, r4
 800833a:	f7ff fcdf 	bl	8007cfc <I2C_TransferConfig>
 800833e:	e7d2      	b.n	80082e6 <HAL_I2C_Mem_Read+0xca>
          hi2c->XferSize = hi2c->XferCount;
 8008340:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008342:	b292      	uxth	r2, r2
 8008344:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	2300      	movs	r3, #0
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	464b      	mov	r3, r9
 800834e:	9903      	ldr	r1, [sp, #12]
 8008350:	0020      	movs	r0, r4
 8008352:	f7ff fcd3 	bl	8007cfc <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008356:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008358:	b29b      	uxth	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d034      	beq.n	80083c8 <HAL_I2C_Mem_Read+0x1ac>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800835e:	9700      	str	r7, [sp, #0]
 8008360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008362:	2200      	movs	r2, #0
 8008364:	2104      	movs	r1, #4
 8008366:	0020      	movs	r0, r4
 8008368:	f7ff fd9e 	bl	8007ea8 <I2C_WaitOnFlagUntilTimeout>
 800836c:	2800      	cmp	r0, #0
 800836e:	d149      	bne.n	8008404 <HAL_I2C_Mem_Read+0x1e8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008376:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800837a:	3301      	adds	r3, #1
 800837c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800837e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008380:	3b01      	subs	r3, #1
 8008382:	b29b      	uxth	r3, r3
 8008384:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8008386:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008388:	3a01      	subs	r2, #1
 800838a:	b292      	uxth	r2, r2
 800838c:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800838e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008390:	b292      	uxth	r2, r2
 8008392:	2a00      	cmp	r2, #0
 8008394:	d0df      	beq.n	8008356 <HAL_I2C_Mem_Read+0x13a>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1dd      	bne.n	8008356 <HAL_I2C_Mem_Read+0x13a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800839a:	9700      	str	r7, [sp, #0]
 800839c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800839e:	2200      	movs	r2, #0
 80083a0:	2180      	movs	r1, #128	; 0x80
 80083a2:	0020      	movs	r0, r4
 80083a4:	f7ff fd80 	bl	8007ea8 <I2C_WaitOnFlagUntilTimeout>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d12d      	bne.n	8008408 <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	2bff      	cmp	r3, #255	; 0xff
 80083b2:	d9c5      	bls.n	8008340 <HAL_I2C_Mem_Read+0x124>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80083b4:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80083b6:	2300      	movs	r3, #0
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	002b      	movs	r3, r5
 80083bc:	0032      	movs	r2, r6
 80083be:	9903      	ldr	r1, [sp, #12]
 80083c0:	0020      	movs	r0, r4
 80083c2:	f7ff fc9b 	bl	8007cfc <I2C_TransferConfig>
 80083c6:	e7c6      	b.n	8008356 <HAL_I2C_Mem_Read+0x13a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083c8:	003a      	movs	r2, r7
 80083ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 80083cc:	0020      	movs	r0, r4
 80083ce:	f7ff fd98 	bl	8007f02 <I2C_WaitOnSTOPFlagUntilTimeout>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	d11a      	bne.n	800840c <HAL_I2C_Mem_Read+0x1f0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	2220      	movs	r2, #32
 80083da:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80083dc:	6821      	ldr	r1, [r4, #0]
 80083de:	684b      	ldr	r3, [r1, #4]
 80083e0:	4d0d      	ldr	r5, [pc, #52]	; (8008418 <HAL_I2C_Mem_Read+0x1fc>)
 80083e2:	402b      	ands	r3, r5
 80083e4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80083e6:	2341      	movs	r3, #65	; 0x41
 80083e8:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	3222      	adds	r2, #34	; 0x22
 80083ee:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80083f0:	3a02      	subs	r2, #2
 80083f2:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80083f4:	e000      	b.n	80083f8 <HAL_I2C_Mem_Read+0x1dc>
    return HAL_BUSY;
 80083f6:	2002      	movs	r0, #2
}
 80083f8:	b006      	add	sp, #24
 80083fa:	bc80      	pop	{r7}
 80083fc:	46b9      	mov	r9, r7
 80083fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8008400:	2002      	movs	r0, #2
 8008402:	e7f9      	b.n	80083f8 <HAL_I2C_Mem_Read+0x1dc>
        return HAL_ERROR;
 8008404:	2001      	movs	r0, #1
 8008406:	e7f7      	b.n	80083f8 <HAL_I2C_Mem_Read+0x1dc>
          return HAL_ERROR;
 8008408:	2001      	movs	r0, #1
 800840a:	e7f5      	b.n	80083f8 <HAL_I2C_Mem_Read+0x1dc>
      return HAL_ERROR;
 800840c:	2001      	movs	r0, #1
 800840e:	e7f3      	b.n	80083f8 <HAL_I2C_Mem_Read+0x1dc>
 8008410:	80002000 	.word	0x80002000
 8008414:	80002400 	.word	0x80002400
 8008418:	fe00e800 	.word	0xfe00e800

0800841c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800841c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800841e:	2341      	movs	r3, #65	; 0x41
 8008420:	5cc3      	ldrb	r3, [r0, r3]
 8008422:	2b20      	cmp	r3, #32
 8008424:	d120      	bne.n	8008468 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008426:	3320      	adds	r3, #32
 8008428:	5cc3      	ldrb	r3, [r0, r3]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d01e      	beq.n	800846c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800842e:	2440      	movs	r4, #64	; 0x40
 8008430:	2201      	movs	r2, #1
 8008432:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008434:	2541      	movs	r5, #65	; 0x41
 8008436:	2324      	movs	r3, #36	; 0x24
 8008438:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800843a:	6806      	ldr	r6, [r0, #0]
 800843c:	6833      	ldr	r3, [r6, #0]
 800843e:	4393      	bics	r3, r2
 8008440:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008442:	6806      	ldr	r6, [r0, #0]
 8008444:	6833      	ldr	r3, [r6, #0]
 8008446:	4f0a      	ldr	r7, [pc, #40]	; (8008470 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8008448:	403b      	ands	r3, r7
 800844a:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800844c:	6806      	ldr	r6, [r0, #0]
 800844e:	6833      	ldr	r3, [r6, #0]
 8008450:	430b      	orrs	r3, r1
 8008452:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008454:	6801      	ldr	r1, [r0, #0]
 8008456:	680b      	ldr	r3, [r1, #0]
 8008458:	4313      	orrs	r3, r2
 800845a:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800845c:	2320      	movs	r3, #32
 800845e:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008460:	2300      	movs	r3, #0
 8008462:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8008464:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8008468:	2002      	movs	r0, #2
 800846a:	e7fc      	b.n	8008466 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 800846c:	2002      	movs	r0, #2
 800846e:	e7fa      	b.n	8008466 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8008470:	ffffefff 	.word	0xffffefff

08008474 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008476:	2341      	movs	r3, #65	; 0x41
 8008478:	5cc3      	ldrb	r3, [r0, r3]
 800847a:	2b20      	cmp	r3, #32
 800847c:	d11e      	bne.n	80084bc <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800847e:	3320      	adds	r3, #32
 8008480:	5cc3      	ldrb	r3, [r0, r3]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d01c      	beq.n	80084c0 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8008486:	2440      	movs	r4, #64	; 0x40
 8008488:	2201      	movs	r2, #1
 800848a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800848c:	2541      	movs	r5, #65	; 0x41
 800848e:	2324      	movs	r3, #36	; 0x24
 8008490:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008492:	6806      	ldr	r6, [r0, #0]
 8008494:	6833      	ldr	r3, [r6, #0]
 8008496:	4393      	bics	r3, r2
 8008498:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800849a:	6806      	ldr	r6, [r0, #0]
 800849c:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800849e:	4f09      	ldr	r7, [pc, #36]	; (80084c4 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 80084a0:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084a2:	0209      	lsls	r1, r1, #8
 80084a4:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80084a6:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084a8:	6801      	ldr	r1, [r0, #0]
 80084aa:	680b      	ldr	r3, [r1, #0]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084b0:	2320      	movs	r3, #32
 80084b2:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084b4:	2300      	movs	r3, #0
 80084b6:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80084b8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80084ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80084bc:	2002      	movs	r0, #2
 80084be:	e7fc      	b.n	80084ba <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 80084c0:	2002      	movs	r0, #2
 80084c2:	e7fa      	b.n	80084ba <HAL_I2CEx_ConfigDigitalFilter+0x46>
 80084c4:	fffff0ff 	.word	0xfffff0ff

080084c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084c8:	b510      	push	{r4, lr}
 80084ca:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80084cc:	4913      	ldr	r1, [pc, #76]	; (800851c <HAL_PWREx_ControlVoltageScaling+0x54>)
 80084ce:	680b      	ldr	r3, [r1, #0]
 80084d0:	4813      	ldr	r0, [pc, #76]	; (8008520 <HAL_PWREx_ControlVoltageScaling+0x58>)
 80084d2:	4003      	ands	r3, r0
 80084d4:	4313      	orrs	r3, r2
 80084d6:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084d8:	2380      	movs	r3, #128	; 0x80
 80084da:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80084dc:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084de:	429a      	cmp	r2, r3
 80084e0:	d000      	beq.n	80084e4 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 80084e2:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80084e4:	4b0f      	ldr	r3, [pc, #60]	; (8008524 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	0058      	lsls	r0, r3, #1
 80084ea:	18c0      	adds	r0, r0, r3
 80084ec:	0040      	lsls	r0, r0, #1
 80084ee:	490e      	ldr	r1, [pc, #56]	; (8008528 <HAL_PWREx_ControlVoltageScaling+0x60>)
 80084f0:	f7f7 fe26 	bl	8000140 <__udivsi3>
 80084f4:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084f6:	4b09      	ldr	r3, [pc, #36]	; (800851c <HAL_PWREx_ControlVoltageScaling+0x54>)
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	055b      	lsls	r3, r3, #21
 80084fc:	d50a      	bpl.n	8008514 <HAL_PWREx_ControlVoltageScaling+0x4c>
 80084fe:	4907      	ldr	r1, [pc, #28]	; (800851c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8008500:	2280      	movs	r2, #128	; 0x80
 8008502:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8008504:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008506:	694b      	ldr	r3, [r1, #20]
 8008508:	4213      	tst	r3, r2
 800850a:	d005      	beq.n	8008518 <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 800850c:	2800      	cmp	r0, #0
 800850e:	d1f9      	bne.n	8008504 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8008510:	2003      	movs	r0, #3
 8008512:	e7e6      	b.n	80084e2 <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8008514:	2000      	movs	r0, #0
 8008516:	e7e4      	b.n	80084e2 <HAL_PWREx_ControlVoltageScaling+0x1a>
 8008518:	2000      	movs	r0, #0
 800851a:	e7e2      	b.n	80084e2 <HAL_PWREx_ControlVoltageScaling+0x1a>
 800851c:	40007000 	.word	0x40007000
 8008520:	fffff9ff 	.word	0xfffff9ff
 8008524:	200000e4 	.word	0x200000e4
 8008528:	000f4240 	.word	0x000f4240

0800852c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800852c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800852e:	46ce      	mov	lr, r9
 8008530:	4647      	mov	r7, r8
 8008532:	b580      	push	{r7, lr}
 8008534:	b083      	sub	sp, #12
 8008536:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008538:	d100      	bne.n	800853c <HAL_RCC_OscConfig+0x10>
 800853a:	e23e      	b.n	80089ba <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800853c:	6803      	ldr	r3, [r0, #0]
 800853e:	07db      	lsls	r3, r3, #31
 8008540:	d538      	bpl.n	80085b4 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008542:	4ac7      	ldr	r2, [pc, #796]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008544:	6891      	ldr	r1, [r2, #8]
 8008546:	2338      	movs	r3, #56	; 0x38
 8008548:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800854a:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800854c:	2b10      	cmp	r3, #16
 800854e:	d026      	beq.n	800859e <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008550:	2b08      	cmp	r3, #8
 8008552:	d027      	beq.n	80085a4 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008554:	6863      	ldr	r3, [r4, #4]
 8008556:	2280      	movs	r2, #128	; 0x80
 8008558:	0252      	lsls	r2, r2, #9
 800855a:	4293      	cmp	r3, r2
 800855c:	d07a      	beq.n	8008654 <HAL_RCC_OscConfig+0x128>
 800855e:	22a0      	movs	r2, #160	; 0xa0
 8008560:	02d2      	lsls	r2, r2, #11
 8008562:	4293      	cmp	r3, r2
 8008564:	d07d      	beq.n	8008662 <HAL_RCC_OscConfig+0x136>
 8008566:	4bbe      	ldr	r3, [pc, #760]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	49be      	ldr	r1, [pc, #760]	; (8008864 <HAL_RCC_OscConfig+0x338>)
 800856c:	400a      	ands	r2, r1
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	49bd      	ldr	r1, [pc, #756]	; (8008868 <HAL_RCC_OscConfig+0x33c>)
 8008574:	400a      	ands	r2, r1
 8008576:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008578:	6863      	ldr	r3, [r4, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d07d      	beq.n	800867a <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857e:	f7fe fcc9 	bl	8006f14 <HAL_GetTick>
 8008582:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008584:	4fb6      	ldr	r7, [pc, #728]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008586:	2680      	movs	r6, #128	; 0x80
 8008588:	02b6      	lsls	r6, r6, #10
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	4233      	tst	r3, r6
 800858e:	d111      	bne.n	80085b4 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008590:	f7fe fcc0 	bl	8006f14 <HAL_GetTick>
 8008594:	1b40      	subs	r0, r0, r5
 8008596:	2864      	cmp	r0, #100	; 0x64
 8008598:	d9f7      	bls.n	800858a <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800859a:	2003      	movs	r0, #3
 800859c:	e20e      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800859e:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80085a0:	0792      	lsls	r2, r2, #30
 80085a2:	d1d7      	bne.n	8008554 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a4:	4bae      	ldr	r3, [pc, #696]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	039b      	lsls	r3, r3, #14
 80085aa:	d503      	bpl.n	80085b4 <HAL_RCC_OscConfig+0x88>
 80085ac:	6863      	ldr	r3, [r4, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d100      	bne.n	80085b4 <HAL_RCC_OscConfig+0x88>
 80085b2:	e208      	b.n	80089c6 <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	079b      	lsls	r3, r3, #30
 80085b8:	d52a      	bpl.n	8008610 <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085ba:	4aa9      	ldr	r2, [pc, #676]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80085bc:	6891      	ldr	r1, [r2, #8]
 80085be:	2338      	movs	r3, #56	; 0x38
 80085c0:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085c2:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80085c4:	2b10      	cmp	r3, #16
 80085c6:	d068      	beq.n	800869a <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d16b      	bne.n	80086a4 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085cc:	4ba4      	ldr	r3, [pc, #656]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	055b      	lsls	r3, r3, #21
 80085d2:	d500      	bpl.n	80085d6 <HAL_RCC_OscConfig+0xaa>
 80085d4:	e21a      	b.n	8008a0c <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085d6:	49a2      	ldr	r1, [pc, #648]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80085d8:	684a      	ldr	r2, [r1, #4]
 80085da:	6963      	ldr	r3, [r4, #20]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	48a3      	ldr	r0, [pc, #652]	; (800886c <HAL_RCC_OscConfig+0x340>)
 80085e0:	4002      	ands	r2, r0
 80085e2:	4313      	orrs	r3, r2
 80085e4:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80085e6:	4a9e      	ldr	r2, [pc, #632]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80085e8:	6813      	ldr	r3, [r2, #0]
 80085ea:	49a1      	ldr	r1, [pc, #644]	; (8008870 <HAL_RCC_OscConfig+0x344>)
 80085ec:	400b      	ands	r3, r1
 80085ee:	6921      	ldr	r1, [r4, #16]
 80085f0:	430b      	orrs	r3, r1
 80085f2:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80085f4:	6813      	ldr	r3, [r2, #0]
 80085f6:	499f      	ldr	r1, [pc, #636]	; (8008874 <HAL_RCC_OscConfig+0x348>)
 80085f8:	049b      	lsls	r3, r3, #18
 80085fa:	0f5b      	lsrs	r3, r3, #29
 80085fc:	4a9e      	ldr	r2, [pc, #632]	; (8008878 <HAL_RCC_OscConfig+0x34c>)
 80085fe:	40da      	lsrs	r2, r3
 8008600:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008602:	4b9e      	ldr	r3, [pc, #632]	; (800887c <HAL_RCC_OscConfig+0x350>)
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f7fe fb45 	bl	8006c94 <HAL_InitTick>
 800860a:	2800      	cmp	r0, #0
 800860c:	d000      	beq.n	8008610 <HAL_RCC_OscConfig+0xe4>
 800860e:	e1dc      	b.n	80089ca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008610:	6823      	ldr	r3, [r4, #0]
 8008612:	071b      	lsls	r3, r3, #28
 8008614:	d400      	bmi.n	8008618 <HAL_RCC_OscConfig+0xec>
 8008616:	e08b      	b.n	8008730 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008618:	4b91      	ldr	r3, [pc, #580]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	2338      	movs	r3, #56	; 0x38
 800861e:	4013      	ands	r3, r2
 8008620:	2b18      	cmp	r3, #24
 8008622:	d07d      	beq.n	8008720 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008624:	69a3      	ldr	r3, [r4, #24]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d100      	bne.n	800862c <HAL_RCC_OscConfig+0x100>
 800862a:	e0c4      	b.n	80087b6 <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800862c:	4a8c      	ldr	r2, [pc, #560]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 800862e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8008630:	2101      	movs	r1, #1
 8008632:	430b      	orrs	r3, r1
 8008634:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008636:	f7fe fc6d 	bl	8006f14 <HAL_GetTick>
 800863a:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800863c:	4f88      	ldr	r7, [pc, #544]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 800863e:	2602      	movs	r6, #2
 8008640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008642:	421e      	tst	r6, r3
 8008644:	d174      	bne.n	8008730 <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008646:	f7fe fc65 	bl	8006f14 <HAL_GetTick>
 800864a:	1b40      	subs	r0, r0, r5
 800864c:	2802      	cmp	r0, #2
 800864e:	d9f7      	bls.n	8008640 <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 8008650:	2003      	movs	r0, #3
 8008652:	e1b3      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008654:	4a82      	ldr	r2, [pc, #520]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008656:	6811      	ldr	r1, [r2, #0]
 8008658:	2380      	movs	r3, #128	; 0x80
 800865a:	025b      	lsls	r3, r3, #9
 800865c:	430b      	orrs	r3, r1
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	e78a      	b.n	8008578 <HAL_RCC_OscConfig+0x4c>
 8008662:	4b7f      	ldr	r3, [pc, #508]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008664:	6819      	ldr	r1, [r3, #0]
 8008666:	2280      	movs	r2, #128	; 0x80
 8008668:	02d2      	lsls	r2, r2, #11
 800866a:	430a      	orrs	r2, r1
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	6819      	ldr	r1, [r3, #0]
 8008670:	2280      	movs	r2, #128	; 0x80
 8008672:	0252      	lsls	r2, r2, #9
 8008674:	430a      	orrs	r2, r1
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e77e      	b.n	8008578 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800867a:	f7fe fc4b 	bl	8006f14 <HAL_GetTick>
 800867e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008680:	4f77      	ldr	r7, [pc, #476]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008682:	2680      	movs	r6, #128	; 0x80
 8008684:	02b6      	lsls	r6, r6, #10
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	4233      	tst	r3, r6
 800868a:	d093      	beq.n	80085b4 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800868c:	f7fe fc42 	bl	8006f14 <HAL_GetTick>
 8008690:	1b40      	subs	r0, r0, r5
 8008692:	2864      	cmp	r0, #100	; 0x64
 8008694:	d9f7      	bls.n	8008686 <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8008696:	2003      	movs	r0, #3
 8008698:	e190      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800869a:	3b0d      	subs	r3, #13
 800869c:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d100      	bne.n	80086a4 <HAL_RCC_OscConfig+0x178>
 80086a2:	e1a3      	b.n	80089ec <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086a4:	68e3      	ldr	r3, [r4, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d024      	beq.n	80086f4 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80086aa:	4a6d      	ldr	r2, [pc, #436]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80086ac:	6813      	ldr	r3, [r2, #0]
 80086ae:	4970      	ldr	r1, [pc, #448]	; (8008870 <HAL_RCC_OscConfig+0x344>)
 80086b0:	400b      	ands	r3, r1
 80086b2:	6921      	ldr	r1, [r4, #16]
 80086b4:	430b      	orrs	r3, r1
 80086b6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 80086b8:	6811      	ldr	r1, [r2, #0]
 80086ba:	2380      	movs	r3, #128	; 0x80
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	430b      	orrs	r3, r1
 80086c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80086c2:	f7fe fc27 	bl	8006f14 <HAL_GetTick>
 80086c6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086c8:	4f65      	ldr	r7, [pc, #404]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80086ca:	2680      	movs	r6, #128	; 0x80
 80086cc:	00f6      	lsls	r6, r6, #3
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	4233      	tst	r3, r6
 80086d2:	d106      	bne.n	80086e2 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086d4:	f7fe fc1e 	bl	8006f14 <HAL_GetTick>
 80086d8:	1b40      	subs	r0, r0, r5
 80086da:	2802      	cmp	r0, #2
 80086dc:	d9f7      	bls.n	80086ce <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 80086de:	2003      	movs	r0, #3
 80086e0:	e16c      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086e2:	495f      	ldr	r1, [pc, #380]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80086e4:	684a      	ldr	r2, [r1, #4]
 80086e6:	6963      	ldr	r3, [r4, #20]
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	4860      	ldr	r0, [pc, #384]	; (800886c <HAL_RCC_OscConfig+0x340>)
 80086ec:	4002      	ands	r2, r0
 80086ee:	4313      	orrs	r3, r2
 80086f0:	604b      	str	r3, [r1, #4]
 80086f2:	e78d      	b.n	8008610 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 80086f4:	4a5a      	ldr	r2, [pc, #360]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80086f6:	6813      	ldr	r3, [r2, #0]
 80086f8:	4961      	ldr	r1, [pc, #388]	; (8008880 <HAL_RCC_OscConfig+0x354>)
 80086fa:	400b      	ands	r3, r1
 80086fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80086fe:	f7fe fc09 	bl	8006f14 <HAL_GetTick>
 8008702:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008704:	4f56      	ldr	r7, [pc, #344]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008706:	2680      	movs	r6, #128	; 0x80
 8008708:	00f6      	lsls	r6, r6, #3
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	4233      	tst	r3, r6
 800870e:	d100      	bne.n	8008712 <HAL_RCC_OscConfig+0x1e6>
 8008710:	e77e      	b.n	8008610 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008712:	f7fe fbff 	bl	8006f14 <HAL_GetTick>
 8008716:	1b40      	subs	r0, r0, r5
 8008718:	2802      	cmp	r0, #2
 800871a:	d9f6      	bls.n	800870a <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 800871c:	2003      	movs	r0, #3
 800871e:	e14d      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008720:	4b4f      	ldr	r3, [pc, #316]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008724:	079b      	lsls	r3, r3, #30
 8008726:	d503      	bpl.n	8008730 <HAL_RCC_OscConfig+0x204>
 8008728:	69a3      	ldr	r3, [r4, #24]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d100      	bne.n	8008730 <HAL_RCC_OscConfig+0x204>
 800872e:	e14e      	b.n	80089ce <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	075b      	lsls	r3, r3, #29
 8008734:	d400      	bmi.n	8008738 <HAL_RCC_OscConfig+0x20c>
 8008736:	e0ac      	b.n	8008892 <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008738:	4b49      	ldr	r3, [pc, #292]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 800873a:	689a      	ldr	r2, [r3, #8]
 800873c:	2338      	movs	r3, #56	; 0x38
 800873e:	4013      	ands	r3, r2
 8008740:	2b20      	cmp	r3, #32
 8008742:	d04c      	beq.n	80087de <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008744:	4b46      	ldr	r3, [pc, #280]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8008748:	2200      	movs	r2, #0
 800874a:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	d40b      	bmi.n	8008768 <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008750:	4b43      	ldr	r3, [pc, #268]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008754:	2180      	movs	r1, #128	; 0x80
 8008756:	0549      	lsls	r1, r1, #21
 8008758:	430a      	orrs	r2, r1
 800875a:	63da      	str	r2, [r3, #60]	; 0x3c
 800875c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875e:	400b      	ands	r3, r1
 8008760:	9301      	str	r3, [sp, #4]
 8008762:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8008764:	2301      	movs	r3, #1
 8008766:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008768:	4b46      	ldr	r3, [pc, #280]	; (8008884 <HAL_RCC_OscConfig+0x358>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	05db      	lsls	r3, r3, #23
 800876e:	d53f      	bpl.n	80087f0 <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008770:	68a3      	ldr	r3, [r4, #8]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d052      	beq.n	800881c <HAL_RCC_OscConfig+0x2f0>
 8008776:	2b05      	cmp	r3, #5
 8008778:	d056      	beq.n	8008828 <HAL_RCC_OscConfig+0x2fc>
 800877a:	4b39      	ldr	r3, [pc, #228]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 800877c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800877e:	2101      	movs	r1, #1
 8008780:	438a      	bics	r2, r1
 8008782:	65da      	str	r2, [r3, #92]	; 0x5c
 8008784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008786:	3103      	adds	r1, #3
 8008788:	438a      	bics	r2, r1
 800878a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800878c:	68a3      	ldr	r3, [r4, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d054      	beq.n	800883c <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008792:	f7fe fbbf 	bl	8006f14 <HAL_GetTick>
 8008796:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008798:	4b31      	ldr	r3, [pc, #196]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 800879a:	4698      	mov	r8, r3
 800879c:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879e:	4d3a      	ldr	r5, [pc, #232]	; (8008888 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087a0:	4643      	mov	r3, r8
 80087a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a4:	421f      	tst	r7, r3
 80087a6:	d171      	bne.n	800888c <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a8:	f7fe fbb4 	bl	8006f14 <HAL_GetTick>
 80087ac:	1b80      	subs	r0, r0, r6
 80087ae:	42a8      	cmp	r0, r5
 80087b0:	d9f6      	bls.n	80087a0 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80087b2:	2003      	movs	r0, #3
 80087b4:	e102      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 80087b6:	4a2a      	ldr	r2, [pc, #168]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80087b8:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80087ba:	2101      	movs	r1, #1
 80087bc:	438b      	bics	r3, r1
 80087be:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 80087c0:	f7fe fba8 	bl	8006f14 <HAL_GetTick>
 80087c4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087c6:	4f26      	ldr	r7, [pc, #152]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80087c8:	2602      	movs	r6, #2
 80087ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087cc:	421e      	tst	r6, r3
 80087ce:	d0af      	beq.n	8008730 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087d0:	f7fe fba0 	bl	8006f14 <HAL_GetTick>
 80087d4:	1b40      	subs	r0, r0, r5
 80087d6:	2802      	cmp	r0, #2
 80087d8:	d9f7      	bls.n	80087ca <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 80087da:	2003      	movs	r0, #3
 80087dc:	e0ee      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80087de:	4b20      	ldr	r3, [pc, #128]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 80087e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e2:	079b      	lsls	r3, r3, #30
 80087e4:	d555      	bpl.n	8008892 <HAL_RCC_OscConfig+0x366>
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d152      	bne.n	8008892 <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 80087ec:	2001      	movs	r0, #1
 80087ee:	e0e5      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087f0:	4a24      	ldr	r2, [pc, #144]	; (8008884 <HAL_RCC_OscConfig+0x358>)
 80087f2:	6811      	ldr	r1, [r2, #0]
 80087f4:	2380      	movs	r3, #128	; 0x80
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80087fc:	f7fe fb8a 	bl	8006f14 <HAL_GetTick>
 8008800:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008802:	4d20      	ldr	r5, [pc, #128]	; (8008884 <HAL_RCC_OscConfig+0x358>)
 8008804:	2780      	movs	r7, #128	; 0x80
 8008806:	007f      	lsls	r7, r7, #1
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	423b      	tst	r3, r7
 800880c:	d1b0      	bne.n	8008770 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800880e:	f7fe fb81 	bl	8006f14 <HAL_GetTick>
 8008812:	1b80      	subs	r0, r0, r6
 8008814:	2802      	cmp	r0, #2
 8008816:	d9f7      	bls.n	8008808 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8008818:	2003      	movs	r0, #3
 800881a:	e0cf      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800881c:	4a10      	ldr	r2, [pc, #64]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 800881e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8008820:	2101      	movs	r1, #1
 8008822:	430b      	orrs	r3, r1
 8008824:	65d3      	str	r3, [r2, #92]	; 0x5c
 8008826:	e7b1      	b.n	800878c <HAL_RCC_OscConfig+0x260>
 8008828:	4b0d      	ldr	r3, [pc, #52]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 800882a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800882c:	2104      	movs	r1, #4
 800882e:	430a      	orrs	r2, r1
 8008830:	65da      	str	r2, [r3, #92]	; 0x5c
 8008832:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008834:	3903      	subs	r1, #3
 8008836:	430a      	orrs	r2, r1
 8008838:	65da      	str	r2, [r3, #92]	; 0x5c
 800883a:	e7a7      	b.n	800878c <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883c:	f7fe fb6a 	bl	8006f14 <HAL_GetTick>
 8008840:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008842:	4b07      	ldr	r3, [pc, #28]	; (8008860 <HAL_RCC_OscConfig+0x334>)
 8008844:	4698      	mov	r8, r3
 8008846:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008848:	4d0f      	ldr	r5, [pc, #60]	; (8008888 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800884a:	4643      	mov	r3, r8
 800884c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884e:	421f      	tst	r7, r3
 8008850:	d01c      	beq.n	800888c <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008852:	f7fe fb5f 	bl	8006f14 <HAL_GetTick>
 8008856:	1b80      	subs	r0, r0, r6
 8008858:	42a8      	cmp	r0, r5
 800885a:	d9f6      	bls.n	800884a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800885c:	2003      	movs	r0, #3
 800885e:	e0ad      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
 8008860:	40021000 	.word	0x40021000
 8008864:	fffeffff 	.word	0xfffeffff
 8008868:	fffbffff 	.word	0xfffbffff
 800886c:	ffff80ff 	.word	0xffff80ff
 8008870:	ffffc7ff 	.word	0xffffc7ff
 8008874:	200000e4 	.word	0x200000e4
 8008878:	00f42400 	.word	0x00f42400
 800887c:	200000ec 	.word	0x200000ec
 8008880:	fffffeff 	.word	0xfffffeff
 8008884:	40007000 	.word	0x40007000
 8008888:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800888c:	464b      	mov	r3, r9
 800888e:	2b01      	cmp	r3, #1
 8008890:	d021      	beq.n	80088d6 <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008892:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8008894:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008896:	2b00      	cmp	r3, #0
 8008898:	d100      	bne.n	800889c <HAL_RCC_OscConfig+0x370>
 800889a:	e08f      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800889c:	4a62      	ldr	r2, [pc, #392]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 800889e:	6891      	ldr	r1, [r2, #8]
 80088a0:	2238      	movs	r2, #56	; 0x38
 80088a2:	400a      	ands	r2, r1
 80088a4:	2a10      	cmp	r2, #16
 80088a6:	d064      	beq.n	8008972 <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d01a      	beq.n	80088e2 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 80088ac:	4a5e      	ldr	r2, [pc, #376]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	495e      	ldr	r1, [pc, #376]	; (8008a2c <HAL_RCC_OscConfig+0x500>)
 80088b2:	400b      	ands	r3, r1
 80088b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80088b6:	f7fe fb2d 	bl	8006f14 <HAL_GetTick>
 80088ba:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088bc:	4e5a      	ldr	r6, [pc, #360]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80088be:	2580      	movs	r5, #128	; 0x80
 80088c0:	04ad      	lsls	r5, r5, #18
 80088c2:	6833      	ldr	r3, [r6, #0]
 80088c4:	422b      	tst	r3, r5
 80088c6:	d04d      	beq.n	8008964 <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088c8:	f7fe fb24 	bl	8006f14 <HAL_GetTick>
 80088cc:	1b00      	subs	r0, r0, r4
 80088ce:	2802      	cmp	r0, #2
 80088d0:	d9f7      	bls.n	80088c2 <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 80088d2:	2003      	movs	r0, #3
 80088d4:	e072      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 80088d6:	4a54      	ldr	r2, [pc, #336]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80088d8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80088da:	4955      	ldr	r1, [pc, #340]	; (8008a30 <HAL_RCC_OscConfig+0x504>)
 80088dc:	400b      	ands	r3, r1
 80088de:	63d3      	str	r3, [r2, #60]	; 0x3c
 80088e0:	e7d7      	b.n	8008892 <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 80088e2:	4a51      	ldr	r2, [pc, #324]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80088e4:	6813      	ldr	r3, [r2, #0]
 80088e6:	4951      	ldr	r1, [pc, #324]	; (8008a2c <HAL_RCC_OscConfig+0x500>)
 80088e8:	400b      	ands	r3, r1
 80088ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80088ec:	f7fe fb12 	bl	8006f14 <HAL_GetTick>
 80088f0:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088f2:	4f4d      	ldr	r7, [pc, #308]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80088f4:	2680      	movs	r6, #128	; 0x80
 80088f6:	04b6      	lsls	r6, r6, #18
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	4233      	tst	r3, r6
 80088fc:	d006      	beq.n	800890c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088fe:	f7fe fb09 	bl	8006f14 <HAL_GetTick>
 8008902:	1b40      	subs	r0, r0, r5
 8008904:	2802      	cmp	r0, #2
 8008906:	d9f7      	bls.n	80088f8 <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8008908:	2003      	movs	r0, #3
 800890a:	e057      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800890c:	4a46      	ldr	r2, [pc, #280]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 800890e:	68d1      	ldr	r1, [r2, #12]
 8008910:	6a23      	ldr	r3, [r4, #32]
 8008912:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008914:	4303      	orrs	r3, r0
 8008916:	4847      	ldr	r0, [pc, #284]	; (8008a34 <HAL_RCC_OscConfig+0x508>)
 8008918:	4001      	ands	r1, r0
 800891a:	430b      	orrs	r3, r1
 800891c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800891e:	430b      	orrs	r3, r1
 8008920:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008922:	430b      	orrs	r3, r1
 8008924:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008926:	0209      	lsls	r1, r1, #8
 8008928:	430b      	orrs	r3, r1
 800892a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 800892c:	6811      	ldr	r1, [r2, #0]
 800892e:	2380      	movs	r3, #128	; 0x80
 8008930:	045b      	lsls	r3, r3, #17
 8008932:	430b      	orrs	r3, r1
 8008934:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008936:	68d1      	ldr	r1, [r2, #12]
 8008938:	2380      	movs	r3, #128	; 0x80
 800893a:	055b      	lsls	r3, r3, #21
 800893c:	430b      	orrs	r3, r1
 800893e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8008940:	f7fe fae8 	bl	8006f14 <HAL_GetTick>
 8008944:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008946:	4e38      	ldr	r6, [pc, #224]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 8008948:	2580      	movs	r5, #128	; 0x80
 800894a:	04ad      	lsls	r5, r5, #18
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	422b      	tst	r3, r5
 8008950:	d106      	bne.n	8008960 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008952:	f7fe fadf 	bl	8006f14 <HAL_GetTick>
 8008956:	1b00      	subs	r0, r0, r4
 8008958:	2802      	cmp	r0, #2
 800895a:	d9f7      	bls.n	800894c <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 800895c:	2003      	movs	r0, #3
 800895e:	e02d      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8008960:	2000      	movs	r0, #0
 8008962:	e02b      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8008964:	4a30      	ldr	r2, [pc, #192]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 8008966:	68d3      	ldr	r3, [r2, #12]
 8008968:	4933      	ldr	r1, [pc, #204]	; (8008a38 <HAL_RCC_OscConfig+0x50c>)
 800896a:	400b      	ands	r3, r1
 800896c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800896e:	2000      	movs	r0, #0
 8008970:	e024      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008972:	2b01      	cmp	r3, #1
 8008974:	d02d      	beq.n	80089d2 <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 8008976:	4b2c      	ldr	r3, [pc, #176]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 8008978:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800897a:	2303      	movs	r3, #3
 800897c:	4013      	ands	r3, r2
 800897e:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8008980:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008982:	428b      	cmp	r3, r1
 8008984:	d11a      	bne.n	80089bc <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008986:	2370      	movs	r3, #112	; 0x70
 8008988:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800898a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800898c:	428b      	cmp	r3, r1
 800898e:	d115      	bne.n	80089bc <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008990:	21fe      	movs	r1, #254	; 0xfe
 8008992:	01c9      	lsls	r1, r1, #7
 8008994:	4011      	ands	r1, r2
 8008996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008998:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800899a:	4299      	cmp	r1, r3
 800899c:	d10e      	bne.n	80089bc <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800899e:	23f8      	movs	r3, #248	; 0xf8
 80089a0:	039b      	lsls	r3, r3, #14
 80089a2:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80089a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80089a6:	428b      	cmp	r3, r1
 80089a8:	d108      	bne.n	80089bc <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80089aa:	0f53      	lsrs	r3, r2, #29
 80089ac:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80089ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	1e5a      	subs	r2, r3, #1
 80089b4:	4193      	sbcs	r3, r2
    return HAL_ERROR;
 80089b6:	b2d8      	uxtb	r0, r3
 80089b8:	e000      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
 80089ba:	2001      	movs	r0, #1
}
 80089bc:	b003      	add	sp, #12
 80089be:	bcc0      	pop	{r6, r7}
 80089c0:	46b9      	mov	r9, r7
 80089c2:	46b0      	mov	r8, r6
 80089c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 80089c6:	2001      	movs	r0, #1
 80089c8:	e7f8      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 80089ca:	2001      	movs	r0, #1
 80089cc:	e7f6      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 80089ce:	2001      	movs	r0, #1
 80089d0:	e7f4      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 80089d2:	2001      	movs	r0, #1
 80089d4:	e7f2      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 80089d6:	2001      	movs	r0, #1
 80089d8:	e7f0      	b.n	80089bc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089da:	4913      	ldr	r1, [pc, #76]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80089dc:	684a      	ldr	r2, [r1, #4]
 80089de:	6963      	ldr	r3, [r4, #20]
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	4816      	ldr	r0, [pc, #88]	; (8008a3c <HAL_RCC_OscConfig+0x510>)
 80089e4:	4002      	ands	r2, r0
 80089e6:	4313      	orrs	r3, r2
 80089e8:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089ea:	e60a      	b.n	8008602 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089ec:	4b0e      	ldr	r3, [pc, #56]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	055b      	lsls	r3, r3, #21
 80089f2:	d5f2      	bpl.n	80089da <HAL_RCC_OscConfig+0x4ae>
 80089f4:	68e3      	ldr	r3, [r4, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ed      	beq.n	80089d6 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089fa:	490b      	ldr	r1, [pc, #44]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 80089fc:	684a      	ldr	r2, [r1, #4]
 80089fe:	6963      	ldr	r3, [r4, #20]
 8008a00:	021b      	lsls	r3, r3, #8
 8008a02:	480e      	ldr	r0, [pc, #56]	; (8008a3c <HAL_RCC_OscConfig+0x510>)
 8008a04:	4002      	ands	r2, r0
 8008a06:	4313      	orrs	r3, r2
 8008a08:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a0a:	e5fa      	b.n	8008602 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a0c:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8008a0e:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d0d3      	beq.n	80089bc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a14:	4904      	ldr	r1, [pc, #16]	; (8008a28 <HAL_RCC_OscConfig+0x4fc>)
 8008a16:	684a      	ldr	r2, [r1, #4]
 8008a18:	6963      	ldr	r3, [r4, #20]
 8008a1a:	021b      	lsls	r3, r3, #8
 8008a1c:	4807      	ldr	r0, [pc, #28]	; (8008a3c <HAL_RCC_OscConfig+0x510>)
 8008a1e:	4002      	ands	r2, r0
 8008a20:	4313      	orrs	r3, r2
 8008a22:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a24:	e5df      	b.n	80085e6 <HAL_RCC_OscConfig+0xba>
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	40021000 	.word	0x40021000
 8008a2c:	feffffff 	.word	0xfeffffff
 8008a30:	efffffff 	.word	0xefffffff
 8008a34:	1fc1808c 	.word	0x1fc1808c
 8008a38:	effefffc 	.word	0xeffefffc
 8008a3c:	ffff80ff 	.word	0xffff80ff

08008a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a40:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a42:	4b27      	ldr	r3, [pc, #156]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	2238      	movs	r2, #56	; 0x38
 8008a48:	421a      	tst	r2, r3
 8008a4a:	d106      	bne.n	8008a5a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008a4c:	4b24      	ldr	r3, [pc, #144]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	049b      	lsls	r3, r3, #18
 8008a52:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008a54:	4823      	ldr	r0, [pc, #140]	; (8008ae4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008a56:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8008a58:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a5a:	4b21      	ldr	r3, [pc, #132]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	2338      	movs	r3, #56	; 0x38
 8008a60:	4013      	ands	r3, r2
 8008a62:	2b08      	cmp	r3, #8
 8008a64:	d037      	beq.n	8008ad6 <HAL_RCC_GetSysClockFreq+0x96>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a66:	4b1e      	ldr	r3, [pc, #120]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	2338      	movs	r3, #56	; 0x38
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	2b10      	cmp	r3, #16
 8008a70:	d011      	beq.n	8008a96 <HAL_RCC_GetSysClockFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008a72:	4b1b      	ldr	r3, [pc, #108]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	2338      	movs	r3, #56	; 0x38
 8008a78:	4013      	ands	r3, r2
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d02d      	beq.n	8008ada <HAL_RCC_GetSysClockFreq+0x9a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008a7e:	4b18      	ldr	r3, [pc, #96]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	2038      	movs	r0, #56	; 0x38
 8008a84:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 8008a86:	3818      	subs	r0, #24
 8008a88:	4243      	negs	r3, r0
 8008a8a:	4158      	adcs	r0, r3
 8008a8c:	4240      	negs	r0, r0
 8008a8e:	23fa      	movs	r3, #250	; 0xfa
 8008a90:	01db      	lsls	r3, r3, #7
 8008a92:	4018      	ands	r0, r3
 8008a94:	e7e0      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008a96:	4a12      	ldr	r2, [pc, #72]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008a98:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008a9a:	68d1      	ldr	r1, [r2, #12]
 8008a9c:	0649      	lsls	r1, r1, #25
 8008a9e:	0f49      	lsrs	r1, r1, #29
 8008aa0:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008aa2:	43db      	mvns	r3, r3
    switch (pllsource)
 8008aa4:	079b      	lsls	r3, r3, #30
 8008aa6:	d00e      	beq.n	8008ac6 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008aaa:	68dc      	ldr	r4, [r3, #12]
 8008aac:	0464      	lsls	r4, r4, #17
 8008aae:	0e64      	lsrs	r4, r4, #25
 8008ab0:	480c      	ldr	r0, [pc, #48]	; (8008ae4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008ab2:	f7f7 fb45 	bl	8000140 <__udivsi3>
 8008ab6:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008ab8:	4b09      	ldr	r3, [pc, #36]	; (8008ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008aba:	68d9      	ldr	r1, [r3, #12]
 8008abc:	0f49      	lsrs	r1, r1, #29
 8008abe:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8008ac0:	f7f7 fb3e 	bl	8000140 <__udivsi3>
 8008ac4:	e7c8      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ac6:	68d4      	ldr	r4, [r2, #12]
 8008ac8:	0464      	lsls	r4, r4, #17
 8008aca:	0e64      	lsrs	r4, r4, #25
 8008acc:	4806      	ldr	r0, [pc, #24]	; (8008ae8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008ace:	f7f7 fb37 	bl	8000140 <__udivsi3>
 8008ad2:	4360      	muls	r0, r4
        break;
 8008ad4:	e7f0      	b.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSE_VALUE;
 8008ad6:	4804      	ldr	r0, [pc, #16]	; (8008ae8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008ad8:	e7be      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8008ada:	2080      	movs	r0, #128	; 0x80
 8008adc:	0200      	lsls	r0, r0, #8
 8008ade:	e7bb      	b.n	8008a58 <HAL_RCC_GetSysClockFreq+0x18>
 8008ae0:	40021000 	.word	0x40021000
 8008ae4:	00f42400 	.word	0x00f42400
 8008ae8:	007a1200 	.word	0x007a1200

08008aec <HAL_RCC_ClockConfig>:
{
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	46ce      	mov	lr, r9
 8008af0:	4647      	mov	r7, r8
 8008af2:	b580      	push	{r7, lr}
 8008af4:	0004      	movs	r4, r0
 8008af6:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d100      	bne.n	8008afe <HAL_RCC_ClockConfig+0x12>
 8008afc:	e0b6      	b.n	8008c6c <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008afe:	4b5d      	ldr	r3, [pc, #372]	; (8008c74 <HAL_RCC_ClockConfig+0x188>)
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	2307      	movs	r3, #7
 8008b04:	4013      	ands	r3, r2
 8008b06:	428b      	cmp	r3, r1
 8008b08:	d321      	bcc.n	8008b4e <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	079a      	lsls	r2, r3, #30
 8008b0e:	d50e      	bpl.n	8008b2e <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b10:	075b      	lsls	r3, r3, #29
 8008b12:	d505      	bpl.n	8008b20 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008b14:	4a58      	ldr	r2, [pc, #352]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008b16:	6891      	ldr	r1, [r2, #8]
 8008b18:	23e0      	movs	r3, #224	; 0xe0
 8008b1a:	01db      	lsls	r3, r3, #7
 8008b1c:	430b      	orrs	r3, r1
 8008b1e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b20:	4a55      	ldr	r2, [pc, #340]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008b22:	6893      	ldr	r3, [r2, #8]
 8008b24:	4955      	ldr	r1, [pc, #340]	; (8008c7c <HAL_RCC_ClockConfig+0x190>)
 8008b26:	400b      	ands	r3, r1
 8008b28:	68a1      	ldr	r1, [r4, #8]
 8008b2a:	430b      	orrs	r3, r1
 8008b2c:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	d55b      	bpl.n	8008bec <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b34:	6863      	ldr	r3, [r4, #4]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d023      	beq.n	8008b82 <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d042      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d146      	bne.n	8008bd0 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b42:	4a4d      	ldr	r2, [pc, #308]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	0552      	lsls	r2, r2, #21
 8008b48:	d420      	bmi.n	8008b8c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8008b4a:	2001      	movs	r0, #1
 8008b4c:	e070      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b4e:	4a49      	ldr	r2, [pc, #292]	; (8008c74 <HAL_RCC_ClockConfig+0x188>)
 8008b50:	6813      	ldr	r3, [r2, #0]
 8008b52:	2107      	movs	r1, #7
 8008b54:	438b      	bics	r3, r1
 8008b56:	432b      	orrs	r3, r5
 8008b58:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008b5a:	f7fe f9db 	bl	8006f14 <HAL_GetTick>
 8008b5e:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008b60:	4b44      	ldr	r3, [pc, #272]	; (8008c74 <HAL_RCC_ClockConfig+0x188>)
 8008b62:	4698      	mov	r8, r3
 8008b64:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b66:	4b46      	ldr	r3, [pc, #280]	; (8008c80 <HAL_RCC_ClockConfig+0x194>)
 8008b68:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008b6a:	4643      	mov	r3, r8
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	403b      	ands	r3, r7
 8008b70:	42ab      	cmp	r3, r5
 8008b72:	d0ca      	beq.n	8008b0a <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b74:	f7fe f9ce 	bl	8006f14 <HAL_GetTick>
 8008b78:	1b80      	subs	r0, r0, r6
 8008b7a:	4548      	cmp	r0, r9
 8008b7c:	d9f5      	bls.n	8008b6a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8008b7e:	2003      	movs	r0, #3
 8008b80:	e056      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b82:	4a3d      	ldr	r2, [pc, #244]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008b84:	6812      	ldr	r2, [r2, #0]
 8008b86:	0392      	lsls	r2, r2, #14
 8008b88:	d400      	bmi.n	8008b8c <HAL_RCC_ClockConfig+0xa0>
 8008b8a:	e071      	b.n	8008c70 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b8c:	493a      	ldr	r1, [pc, #232]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008b8e:	688a      	ldr	r2, [r1, #8]
 8008b90:	2007      	movs	r0, #7
 8008b92:	4382      	bics	r2, r0
 8008b94:	4313      	orrs	r3, r2
 8008b96:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8008b98:	f7fe f9bc 	bl	8006f14 <HAL_GetTick>
 8008b9c:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b9e:	4b36      	ldr	r3, [pc, #216]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008ba0:	4698      	mov	r8, r3
 8008ba2:	2738      	movs	r7, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ba4:	4b36      	ldr	r3, [pc, #216]	; (8008c80 <HAL_RCC_ClockConfig+0x194>)
 8008ba6:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ba8:	4643      	mov	r3, r8
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	403a      	ands	r2, r7
 8008bae:	6863      	ldr	r3, [r4, #4]
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d01a      	beq.n	8008bec <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bb6:	f7fe f9ad 	bl	8006f14 <HAL_GetTick>
 8008bba:	1b80      	subs	r0, r0, r6
 8008bbc:	4548      	cmp	r0, r9
 8008bbe:	d9f3      	bls.n	8008ba8 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8008bc0:	2003      	movs	r0, #3
 8008bc2:	e035      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bc4:	4a2c      	ldr	r2, [pc, #176]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	0192      	lsls	r2, r2, #6
 8008bca:	d4df      	bmi.n	8008b8c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8008bcc:	2001      	movs	r0, #1
 8008bce:	e02f      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	d005      	beq.n	8008be0 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bd4:	4a28      	ldr	r2, [pc, #160]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008bd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008bd8:	0792      	lsls	r2, r2, #30
 8008bda:	d4d7      	bmi.n	8008b8c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8008bdc:	2001      	movs	r0, #1
 8008bde:	e027      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008be0:	4a25      	ldr	r2, [pc, #148]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008be2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8008be4:	0792      	lsls	r2, r2, #30
 8008be6:	d4d1      	bmi.n	8008b8c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8008be8:	2001      	movs	r0, #1
 8008bea:	e021      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bec:	4b21      	ldr	r3, [pc, #132]	; (8008c74 <HAL_RCC_ClockConfig+0x188>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	2307      	movs	r3, #7
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	42ab      	cmp	r3, r5
 8008bf6:	d81f      	bhi.n	8008c38 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	075b      	lsls	r3, r3, #29
 8008bfc:	d506      	bpl.n	8008c0c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008bfe:	4a1e      	ldr	r2, [pc, #120]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008c00:	6893      	ldr	r3, [r2, #8]
 8008c02:	4920      	ldr	r1, [pc, #128]	; (8008c84 <HAL_RCC_ClockConfig+0x198>)
 8008c04:	400b      	ands	r3, r1
 8008c06:	68e1      	ldr	r1, [r4, #12]
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008c0c:	f7ff ff18 	bl	8008a40 <HAL_RCC_GetSysClockFreq>
 8008c10:	4b19      	ldr	r3, [pc, #100]	; (8008c78 <HAL_RCC_ClockConfig+0x18c>)
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	491c      	ldr	r1, [pc, #112]	; (8008c88 <HAL_RCC_ClockConfig+0x19c>)
 8008c16:	4a1d      	ldr	r2, [pc, #116]	; (8008c8c <HAL_RCC_ClockConfig+0x1a0>)
 8008c18:	051b      	lsls	r3, r3, #20
 8008c1a:	0f1b      	lsrs	r3, r3, #28
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	589b      	ldr	r3, [r3, r2]
 8008c20:	221f      	movs	r2, #31
 8008c22:	4013      	ands	r3, r2
 8008c24:	40d8      	lsrs	r0, r3
 8008c26:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8008c28:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <HAL_RCC_ClockConfig+0x1a4>)
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	f7fe f832 	bl	8006c94 <HAL_InitTick>
}
 8008c30:	bcc0      	pop	{r6, r7}
 8008c32:	46b9      	mov	r9, r7
 8008c34:	46b0      	mov	r8, r6
 8008c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c38:	4a0e      	ldr	r2, [pc, #56]	; (8008c74 <HAL_RCC_ClockConfig+0x188>)
 8008c3a:	6813      	ldr	r3, [r2, #0]
 8008c3c:	2107      	movs	r1, #7
 8008c3e:	438b      	bics	r3, r1
 8008c40:	432b      	orrs	r3, r5
 8008c42:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8008c44:	f7fe f966 	bl	8006f14 <HAL_GetTick>
 8008c48:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <HAL_RCC_ClockConfig+0x188>)
 8008c4c:	4698      	mov	r8, r3
 8008c4e:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <HAL_RCC_ClockConfig+0x194>)
 8008c52:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008c54:	4643      	mov	r3, r8
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	403b      	ands	r3, r7
 8008c5a:	42ab      	cmp	r3, r5
 8008c5c:	d0cc      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c5e:	f7fe f959 	bl	8006f14 <HAL_GetTick>
 8008c62:	1b80      	subs	r0, r0, r6
 8008c64:	4548      	cmp	r0, r9
 8008c66:	d9f5      	bls.n	8008c54 <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 8008c68:	2003      	movs	r0, #3
 8008c6a:	e7e1      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8008c6c:	2001      	movs	r0, #1
 8008c6e:	e7df      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8008c70:	2001      	movs	r0, #1
 8008c72:	e7dd      	b.n	8008c30 <HAL_RCC_ClockConfig+0x144>
 8008c74:	40022000 	.word	0x40022000
 8008c78:	40021000 	.word	0x40021000
 8008c7c:	fffff0ff 	.word	0xfffff0ff
 8008c80:	00001388 	.word	0x00001388
 8008c84:	ffff8fff 	.word	0xffff8fff
 8008c88:	200000e4 	.word	0x200000e4
 8008c8c:	08012e44 	.word	0x08012e44
 8008c90:	200000ec 	.word	0x200000ec

08008c94 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008c94:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008c96:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8008c98:	4a06      	ldr	r2, [pc, #24]	; (8008cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008c9a:	4907      	ldr	r1, [pc, #28]	; (8008cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c9c:	045b      	lsls	r3, r3, #17
 8008c9e:	0f5b      	lsrs	r3, r3, #29
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	585b      	ldr	r3, [r3, r1]
 8008ca4:	211f      	movs	r1, #31
 8008ca6:	400b      	ands	r3, r1
 8008ca8:	6810      	ldr	r0, [r2, #0]
 8008caa:	40d8      	lsrs	r0, r3
}
 8008cac:	4770      	bx	lr
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	40021000 	.word	0x40021000
 8008cb4:	200000e4 	.word	0x200000e4
 8008cb8:	08012e84 	.word	0x08012e84

08008cbc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008cbc:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8008cbe:	2307      	movs	r3, #7
 8008cc0:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008cc2:	4a09      	ldr	r2, [pc, #36]	; (8008ce8 <HAL_RCC_GetClockConfig+0x2c>)
 8008cc4:	6894      	ldr	r4, [r2, #8]
 8008cc6:	401c      	ands	r4, r3
 8008cc8:	6044      	str	r4, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008cca:	6894      	ldr	r4, [r2, #8]
 8008ccc:	25f0      	movs	r5, #240	; 0xf0
 8008cce:	012d      	lsls	r5, r5, #4
 8008cd0:	402c      	ands	r4, r5
 8008cd2:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8008cd4:	6892      	ldr	r2, [r2, #8]
 8008cd6:	24e0      	movs	r4, #224	; 0xe0
 8008cd8:	01e4      	lsls	r4, r4, #7
 8008cda:	4022      	ands	r2, r4
 8008cdc:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008cde:	4a03      	ldr	r2, [pc, #12]	; (8008cec <HAL_RCC_GetClockConfig+0x30>)
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	600b      	str	r3, [r1, #0]
}
 8008ce6:	bd30      	pop	{r4, r5, pc}
 8008ce8:	40021000 	.word	0x40021000
 8008cec:	40022000 	.word	0x40022000

08008cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf2:	46d6      	mov	lr, sl
 8008cf4:	464f      	mov	r7, r9
 8008cf6:	4646      	mov	r6, r8
 8008cf8:	b5c0      	push	{r6, r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cfe:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d00:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d02:	039b      	lsls	r3, r3, #14
 8008d04:	d52a      	bpl.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d06:	4b5c      	ldr	r3, [pc, #368]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	d40b      	bmi.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d12:	4b59      	ldr	r3, [pc, #356]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d16:	2180      	movs	r1, #128	; 0x80
 8008d18:	0549      	lsls	r1, r1, #21
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d20:	400b      	ands	r3, r1
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008d26:	2301      	movs	r3, #1
 8008d28:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d2a:	4a54      	ldr	r2, [pc, #336]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8008d2c:	6811      	ldr	r1, [r2, #0]
 8008d2e:	2380      	movs	r3, #128	; 0x80
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	430b      	orrs	r3, r1
 8008d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d36:	f7fe f8ed 	bl	8006f14 <HAL_GetTick>
 8008d3a:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d3c:	4f4f      	ldr	r7, [pc, #316]	; (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8008d3e:	2680      	movs	r6, #128	; 0x80
 8008d40:	0076      	lsls	r6, r6, #1
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	4233      	tst	r3, r6
 8008d46:	d000      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8008d48:	e084      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d4a:	f7fe f8e3 	bl	8006f14 <HAL_GetTick>
 8008d4e:	1b40      	subs	r0, r0, r5
 8008d50:	2802      	cmp	r0, #2
 8008d52:	d9f6      	bls.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 8008d54:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d56:	4653      	mov	r3, sl
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d067      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d5c:	6823      	ldr	r3, [r4, #0]
 8008d5e:	07db      	lsls	r3, r3, #31
 8008d60:	d506      	bpl.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d62:	4a45      	ldr	r2, [pc, #276]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008d64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008d66:	2103      	movs	r1, #3
 8008d68:	438b      	bics	r3, r1
 8008d6a:	6861      	ldr	r1, [r4, #4]
 8008d6c:	430b      	orrs	r3, r1
 8008d6e:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	079b      	lsls	r3, r3, #30
 8008d74:	d506      	bpl.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d76:	4a40      	ldr	r2, [pc, #256]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008d78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008d7a:	210c      	movs	r1, #12
 8008d7c:	438b      	bics	r3, r1
 8008d7e:	68a1      	ldr	r1, [r4, #8]
 8008d80:	430b      	orrs	r3, r1
 8008d82:	6553      	str	r3, [r2, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	069b      	lsls	r3, r3, #26
 8008d88:	d506      	bpl.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d8a:	4a3b      	ldr	r2, [pc, #236]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008d8c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008d8e:	493c      	ldr	r1, [pc, #240]	; (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8008d90:	400b      	ands	r3, r1
 8008d92:	68e1      	ldr	r1, [r4, #12]
 8008d94:	430b      	orrs	r3, r1
 8008d96:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	045b      	lsls	r3, r3, #17
 8008d9c:	d50b      	bpl.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d9e:	4a36      	ldr	r2, [pc, #216]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008da0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	089b      	lsrs	r3, r3, #2
 8008da6:	6961      	ldr	r1, [r4, #20]
 8008da8:	430b      	orrs	r3, r1
 8008daa:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008dac:	2380      	movs	r3, #128	; 0x80
 8008dae:	05db      	lsls	r3, r3, #23
 8008db0:	6962      	ldr	r2, [r4, #20]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d040      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	051b      	lsls	r3, r3, #20
 8008dba:	d50b      	bpl.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008dbc:	4a2e      	ldr	r2, [pc, #184]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008dbe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008dc0:	4930      	ldr	r1, [pc, #192]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8008dc2:	400b      	ands	r3, r1
 8008dc4:	6921      	ldr	r1, [r4, #16]
 8008dc6:	430b      	orrs	r3, r1
 8008dc8:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008dca:	2380      	movs	r3, #128	; 0x80
 8008dcc:	01db      	lsls	r3, r3, #7
 8008dce:	6922      	ldr	r2, [r4, #16]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d038      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8008dd4:	b002      	add	sp, #8
 8008dd6:	bce0      	pop	{r5, r6, r7}
 8008dd8:	46ba      	mov	sl, r7
 8008dda:	46b1      	mov	r9, r6
 8008ddc:	46a8      	mov	r8, r5
 8008dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008de0:	69a2      	ldr	r2, [r4, #24]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d00d      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x112>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008de6:	4a24      	ldr	r2, [pc, #144]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008de8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8008dea:	4927      	ldr	r1, [pc, #156]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8008dec:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_FORCE();
 8008dee:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8008df0:	2180      	movs	r1, #128	; 0x80
 8008df2:	0249      	lsls	r1, r1, #9
 8008df4:	4301      	orrs	r1, r0
 8008df6:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008df8:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8008dfa:	4824      	ldr	r0, [pc, #144]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8008dfc:	4001      	ands	r1, r0
 8008dfe:	65d1      	str	r1, [r2, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8008e00:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e02:	07db      	lsls	r3, r3, #31
 8008e04:	d52e      	bpl.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x174>
        tickstart = HAL_GetTick();
 8008e06:	f7fe f885 	bl	8006f14 <HAL_GetTick>
 8008e0a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e0c:	4b1a      	ldr	r3, [pc, #104]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008e0e:	4698      	mov	r8, r3
 8008e10:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e12:	4b1f      	ldr	r3, [pc, #124]	; (8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8008e14:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e16:	4643      	mov	r3, r8
 8008e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e1a:	421e      	tst	r6, r3
 8008e1c:	d122      	bne.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x174>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e1e:	f7fe f879 	bl	8006f14 <HAL_GetTick>
 8008e22:	1b40      	subs	r0, r0, r5
 8008e24:	4548      	cmp	r0, r9
 8008e26:	d9f6      	bls.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x126>
            ret = HAL_TIMEOUT;
 8008e28:	2003      	movs	r0, #3
 8008e2a:	e794      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e2c:	4a12      	ldr	r2, [pc, #72]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008e2e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8008e30:	4918      	ldr	r1, [pc, #96]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8008e32:	400b      	ands	r3, r1
 8008e34:	63d3      	str	r3, [r2, #60]	; 0x3c
 8008e36:	e791      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008e38:	4a0f      	ldr	r2, [pc, #60]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008e3a:	68d1      	ldr	r1, [r2, #12]
 8008e3c:	2380      	movs	r3, #128	; 0x80
 8008e3e:	025b      	lsls	r3, r3, #9
 8008e40:	430b      	orrs	r3, r1
 8008e42:	60d3      	str	r3, [r2, #12]
 8008e44:	e7b7      	b.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008e46:	4a0c      	ldr	r2, [pc, #48]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008e48:	68d1      	ldr	r1, [r2, #12]
 8008e4a:	2380      	movs	r3, #128	; 0x80
 8008e4c:	025b      	lsls	r3, r3, #9
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	60d3      	str	r3, [r2, #12]
  return status;
 8008e52:	e7bf      	b.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e54:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008e56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008e58:	22c0      	movs	r2, #192	; 0xc0
 8008e5a:	0092      	lsls	r2, r2, #2
 8008e5c:	000b      	movs	r3, r1
 8008e5e:	4013      	ands	r3, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e60:	4211      	tst	r1, r2
 8008e62:	d1bd      	bne.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e64:	4a04      	ldr	r2, [pc, #16]	; (8008e78 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8008e66:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8008e68:	4907      	ldr	r1, [pc, #28]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8008e6a:	400b      	ands	r3, r1
 8008e6c:	69a1      	ldr	r1, [r4, #24]
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e72:	2000      	movs	r0, #0
 8008e74:	e76f      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	40021000 	.word	0x40021000
 8008e7c:	40007000 	.word	0x40007000
 8008e80:	ffffcfff 	.word	0xffffcfff
 8008e84:	ffff3fff 	.word	0xffff3fff
 8008e88:	fffffcff 	.word	0xfffffcff
 8008e8c:	fffeffff 	.word	0xfffeffff
 8008e90:	00001388 	.word	0x00001388
 8008e94:	efffffff 	.word	0xefffffff

08008e98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e9a:	46d6      	mov	lr, sl
 8008e9c:	464f      	mov	r7, r9
 8008e9e:	4646      	mov	r6, r8
 8008ea0:	b5c0      	push	{r6, r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	4681      	mov	r9, r0
 8008ea6:	000d      	movs	r5, r1
 8008ea8:	0017      	movs	r7, r2
 8008eaa:	001e      	movs	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008eac:	f7fe f832 	bl	8006f14 <HAL_GetTick>
 8008eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eb2:	199b      	adds	r3, r3, r6
 8008eb4:	1a1b      	subs	r3, r3, r0
 8008eb6:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8008eb8:	f7fe f82c 	bl	8006f14 <HAL_GetTick>
 8008ebc:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008ebe:	4b30      	ldr	r3, [pc, #192]	; (8008f80 <SPI_WaitFlagStateUntilTimeout+0xe8>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	015b      	lsls	r3, r3, #5
 8008ec4:	0d1b      	lsrs	r3, r3, #20
 8008ec6:	4642      	mov	r2, r8
 8008ec8:	4353      	muls	r3, r2
 8008eca:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ecc:	464b      	mov	r3, r9
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	689c      	ldr	r4, [r3, #8]
 8008ed2:	402c      	ands	r4, r5
 8008ed4:	1b64      	subs	r4, r4, r5
 8008ed6:	4262      	negs	r2, r4
 8008ed8:	4154      	adcs	r4, r2
 8008eda:	42bc      	cmp	r4, r7
 8008edc:	d049      	beq.n	8008f72 <SPI_WaitFlagStateUntilTimeout+0xda>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ede:	1c72      	adds	r2, r6, #1
 8008ee0:	d0f6      	beq.n	8008ed0 <SPI_WaitFlagStateUntilTimeout+0x38>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ee2:	f7fe f817 	bl	8006f14 <HAL_GetTick>
 8008ee6:	4653      	mov	r3, sl
 8008ee8:	1ac0      	subs	r0, r0, r3
 8008eea:	4540      	cmp	r0, r8
 8008eec:	d207      	bcs.n	8008efe <SPI_WaitFlagStateUntilTimeout+0x66>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d100      	bne.n	8008ef6 <SPI_WaitFlagStateUntilTimeout+0x5e>
      {
        tmp_timeout = 0U;
 8008ef4:	4698      	mov	r8, r3
      }
      count--;
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	e7e6      	b.n	8008ecc <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008efe:	464b      	mov	r3, r9
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	6853      	ldr	r3, [r2, #4]
 8008f04:	21e0      	movs	r1, #224	; 0xe0
 8008f06:	438b      	bics	r3, r1
 8008f08:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f0a:	2382      	movs	r3, #130	; 0x82
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	464a      	mov	r2, r9
 8008f10:	6852      	ldr	r2, [r2, #4]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d00e      	beq.n	8008f34 <SPI_WaitFlagStateUntilTimeout+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f16:	2380      	movs	r3, #128	; 0x80
 8008f18:	019b      	lsls	r3, r3, #6
 8008f1a:	464a      	mov	r2, r9
 8008f1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d019      	beq.n	8008f56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        hspi->State = HAL_SPI_STATE_READY;
 8008f22:	235d      	movs	r3, #93	; 0x5d
 8008f24:	2201      	movs	r2, #1
 8008f26:	4649      	mov	r1, r9
 8008f28:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8008f30:	2003      	movs	r0, #3
 8008f32:	e01f      	b.n	8008f74 <SPI_WaitFlagStateUntilTimeout+0xdc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f34:	464b      	mov	r3, r9
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	2280      	movs	r2, #128	; 0x80
 8008f3a:	0212      	lsls	r2, r2, #8
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d003      	beq.n	8008f48 <SPI_WaitFlagStateUntilTimeout+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f40:	2280      	movs	r2, #128	; 0x80
 8008f42:	00d2      	lsls	r2, r2, #3
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d1e6      	bne.n	8008f16 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8008f48:	464b      	mov	r3, r9
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	6813      	ldr	r3, [r2, #0]
 8008f4e:	2140      	movs	r1, #64	; 0x40
 8008f50:	438b      	bics	r3, r1
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	e7df      	b.n	8008f16 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8008f56:	464b      	mov	r3, r9
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	6813      	ldr	r3, [r2, #0]
 8008f5c:	4909      	ldr	r1, [pc, #36]	; (8008f84 <SPI_WaitFlagStateUntilTimeout+0xec>)
 8008f5e:	400b      	ands	r3, r1
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	464b      	mov	r3, r9
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	6811      	ldr	r1, [r2, #0]
 8008f68:	2380      	movs	r3, #128	; 0x80
 8008f6a:	019b      	lsls	r3, r3, #6
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	e7d7      	b.n	8008f22 <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 8008f72:	2000      	movs	r0, #0
}
 8008f74:	b002      	add	sp, #8
 8008f76:	bce0      	pop	{r5, r6, r7}
 8008f78:	46ba      	mov	sl, r7
 8008f7a:	46b1      	mov	r9, r6
 8008f7c:	46a8      	mov	r8, r5
 8008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f80:	200000e4 	.word	0x200000e4
 8008f84:	ffffdfff 	.word	0xffffdfff

08008f88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f8a:	46de      	mov	lr, fp
 8008f8c:	4657      	mov	r7, sl
 8008f8e:	464e      	mov	r6, r9
 8008f90:	4645      	mov	r5, r8
 8008f92:	b5e0      	push	{r5, r6, r7, lr}
 8008f94:	b083      	sub	sp, #12
 8008f96:	4682      	mov	sl, r0
 8008f98:	000c      	movs	r4, r1
 8008f9a:	0015      	movs	r5, r2
 8008f9c:	001e      	movs	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f9e:	466b      	mov	r3, sp
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008fa4:	f7fd ffb6 	bl	8006f14 <HAL_GetTick>
 8008fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008faa:	199b      	adds	r3, r3, r6
 8008fac:	1a1b      	subs	r3, r3, r0
 8008fae:	4699      	mov	r9, r3
  tmp_tickstart = HAL_GetTick();
 8008fb0:	f7fd ffb0 	bl	8006f14 <HAL_GetTick>
 8008fb4:	4680      	mov	r8, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008fb6:	4653      	mov	r3, sl
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008fbc:	4b38      	ldr	r3, [pc, #224]	; (80090a0 <SPI_WaitFifoStateUntilTimeout+0x118>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	009a      	lsls	r2, r3, #2
 8008fc2:	18d2      	adds	r2, r2, r3
 8008fc4:	00d3      	lsls	r3, r2, #3
 8008fc6:	1a9b      	subs	r3, r3, r2
 8008fc8:	0d1b      	lsrs	r3, r3, #20
 8008fca:	464a      	mov	r2, r9
 8008fcc:	4353      	muls	r3, r2
 8008fce:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008fd0:	27c0      	movs	r7, #192	; 0xc0
 8008fd2:	00ff      	lsls	r7, r7, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8008fd4:	4653      	mov	r3, sl
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	e001      	b.n	8008fde <SPI_WaitFifoStateUntilTimeout+0x56>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8008fda:	1c73      	adds	r3, r6, #1
 8008fdc:	d10f      	bne.n	8008ffe <SPI_WaitFifoStateUntilTimeout+0x76>
  while ((hspi->Instance->SR & Fifo) != State)
 8008fde:	6893      	ldr	r3, [r2, #8]
 8008fe0:	4023      	ands	r3, r4
 8008fe2:	42ab      	cmp	r3, r5
 8008fe4:	d053      	beq.n	800908e <SPI_WaitFifoStateUntilTimeout+0x106>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008fe6:	42bc      	cmp	r4, r7
 8008fe8:	d1f7      	bne.n	8008fda <SPI_WaitFifoStateUntilTimeout+0x52>
 8008fea:	2d00      	cmp	r5, #0
 8008fec:	d1f5      	bne.n	8008fda <SPI_WaitFifoStateUntilTimeout+0x52>
      tmpreg8 = *ptmpreg8;
 8008fee:	465b      	mov	r3, fp
 8008ff0:	7b1b      	ldrb	r3, [r3, #12]
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	4669      	mov	r1, sp
 8008ff6:	70cb      	strb	r3, [r1, #3]
      UNUSED(tmpreg8);
 8008ff8:	466b      	mov	r3, sp
 8008ffa:	78db      	ldrb	r3, [r3, #3]
 8008ffc:	e7ed      	b.n	8008fda <SPI_WaitFifoStateUntilTimeout+0x52>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ffe:	f7fd ff89 	bl	8006f14 <HAL_GetTick>
 8009002:	4643      	mov	r3, r8
 8009004:	1ac0      	subs	r0, r0, r3
 8009006:	4548      	cmp	r0, r9
 8009008:	d207      	bcs.n	800901a <SPI_WaitFifoStateUntilTimeout+0x92>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800900a:	9b01      	ldr	r3, [sp, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d100      	bne.n	8009012 <SPI_WaitFifoStateUntilTimeout+0x8a>
      {
        tmp_timeout = 0U;
 8009010:	4699      	mov	r9, r3
      }
      count--;
 8009012:	9b01      	ldr	r3, [sp, #4]
 8009014:	3b01      	subs	r3, #1
 8009016:	9301      	str	r3, [sp, #4]
 8009018:	e7dc      	b.n	8008fd4 <SPI_WaitFifoStateUntilTimeout+0x4c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800901a:	4653      	mov	r3, sl
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	6853      	ldr	r3, [r2, #4]
 8009020:	21e0      	movs	r1, #224	; 0xe0
 8009022:	438b      	bics	r3, r1
 8009024:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009026:	2382      	movs	r3, #130	; 0x82
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	4652      	mov	r2, sl
 800902c:	6852      	ldr	r2, [r2, #4]
 800902e:	429a      	cmp	r2, r3
 8009030:	d00e      	beq.n	8009050 <SPI_WaitFifoStateUntilTimeout+0xc8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009032:	2380      	movs	r3, #128	; 0x80
 8009034:	019b      	lsls	r3, r3, #6
 8009036:	4652      	mov	r2, sl
 8009038:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800903a:	429a      	cmp	r2, r3
 800903c:	d019      	beq.n	8009072 <SPI_WaitFifoStateUntilTimeout+0xea>
        hspi->State = HAL_SPI_STATE_READY;
 800903e:	235d      	movs	r3, #93	; 0x5d
 8009040:	2201      	movs	r2, #1
 8009042:	4651      	mov	r1, sl
 8009044:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8009046:	3b01      	subs	r3, #1
 8009048:	2200      	movs	r2, #0
 800904a:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 800904c:	2003      	movs	r0, #3
 800904e:	e01f      	b.n	8009090 <SPI_WaitFifoStateUntilTimeout+0x108>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009050:	4653      	mov	r3, sl
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	2280      	movs	r2, #128	; 0x80
 8009056:	0212      	lsls	r2, r2, #8
 8009058:	4293      	cmp	r3, r2
 800905a:	d003      	beq.n	8009064 <SPI_WaitFifoStateUntilTimeout+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800905c:	2280      	movs	r2, #128	; 0x80
 800905e:	00d2      	lsls	r2, r2, #3
 8009060:	4293      	cmp	r3, r2
 8009062:	d1e6      	bne.n	8009032 <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 8009064:	4653      	mov	r3, sl
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	6813      	ldr	r3, [r2, #0]
 800906a:	2140      	movs	r1, #64	; 0x40
 800906c:	438b      	bics	r3, r1
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	e7df      	b.n	8009032 <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 8009072:	4653      	mov	r3, sl
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	490a      	ldr	r1, [pc, #40]	; (80090a4 <SPI_WaitFifoStateUntilTimeout+0x11c>)
 800907a:	400b      	ands	r3, r1
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	4653      	mov	r3, sl
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	6811      	ldr	r1, [r2, #0]
 8009084:	2380      	movs	r3, #128	; 0x80
 8009086:	019b      	lsls	r3, r3, #6
 8009088:	430b      	orrs	r3, r1
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	e7d7      	b.n	800903e <SPI_WaitFifoStateUntilTimeout+0xb6>
    }
  }

  return HAL_OK;
 800908e:	2000      	movs	r0, #0
}
 8009090:	b003      	add	sp, #12
 8009092:	bcf0      	pop	{r4, r5, r6, r7}
 8009094:	46bb      	mov	fp, r7
 8009096:	46b2      	mov	sl, r6
 8009098:	46a9      	mov	r9, r5
 800909a:	46a0      	mov	r8, r4
 800909c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	200000e4 	.word	0x200000e4
 80090a4:	ffffdfff 	.word	0xffffdfff

080090a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	0004      	movs	r4, r0
 80090ae:	000d      	movs	r5, r1
 80090b0:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090b2:	21c0      	movs	r1, #192	; 0xc0
 80090b4:	9200      	str	r2, [sp, #0]
 80090b6:	002b      	movs	r3, r5
 80090b8:	2200      	movs	r2, #0
 80090ba:	0149      	lsls	r1, r1, #5
 80090bc:	f7ff ff64 	bl	8008f88 <SPI_WaitFifoStateUntilTimeout>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d118      	bne.n	80090f6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090c4:	9600      	str	r6, [sp, #0]
 80090c6:	002b      	movs	r3, r5
 80090c8:	2200      	movs	r2, #0
 80090ca:	2180      	movs	r1, #128	; 0x80
 80090cc:	0020      	movs	r0, r4
 80090ce:	f7ff fee3 	bl	8008e98 <SPI_WaitFlagStateUntilTimeout>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d116      	bne.n	8009104 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090d6:	21c0      	movs	r1, #192	; 0xc0
 80090d8:	9600      	str	r6, [sp, #0]
 80090da:	002b      	movs	r3, r5
 80090dc:	2200      	movs	r2, #0
 80090de:	00c9      	lsls	r1, r1, #3
 80090e0:	0020      	movs	r0, r4
 80090e2:	f7ff ff51 	bl	8008f88 <SPI_WaitFifoStateUntilTimeout>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d00a      	beq.n	8009100 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80090ec:	2220      	movs	r2, #32
 80090ee:	4313      	orrs	r3, r2
 80090f0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80090f2:	2003      	movs	r0, #3
 80090f4:	e004      	b.n	8009100 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80090f8:	2220      	movs	r2, #32
 80090fa:	4313      	orrs	r3, r2
 80090fc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80090fe:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8009100:	b002      	add	sp, #8
 8009102:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009104:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009106:	2220      	movs	r2, #32
 8009108:	4313      	orrs	r3, r2
 800910a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800910c:	2003      	movs	r0, #3
 800910e:	e7f7      	b.n	8009100 <SPI_EndRxTxTransaction+0x58>

08009110 <HAL_SPI_Init>:
{
 8009110:	b570      	push	{r4, r5, r6, lr}
 8009112:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8009114:	d100      	bne.n	8009118 <HAL_SPI_Init+0x8>
 8009116:	e073      	b.n	8009200 <HAL_SPI_Init+0xf0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009118:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800911a:	2b00      	cmp	r3, #0
 800911c:	d107      	bne.n	800912e <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800911e:	3305      	adds	r3, #5
 8009120:	33ff      	adds	r3, #255	; 0xff
 8009122:	6842      	ldr	r2, [r0, #4]
 8009124:	429a      	cmp	r2, r3
 8009126:	d005      	beq.n	8009134 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009128:	2300      	movs	r3, #0
 800912a:	61c3      	str	r3, [r0, #28]
 800912c:	e002      	b.n	8009134 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800912e:	2300      	movs	r3, #0
 8009130:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009132:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009134:	2300      	movs	r3, #0
 8009136:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009138:	335d      	adds	r3, #93	; 0x5d
 800913a:	5ce3      	ldrb	r3, [r4, r3]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d058      	beq.n	80091f2 <HAL_SPI_Init+0xe2>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009140:	235d      	movs	r3, #93	; 0x5d
 8009142:	2202      	movs	r2, #2
 8009144:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8009146:	6822      	ldr	r2, [r4, #0]
 8009148:	6813      	ldr	r3, [r2, #0]
 800914a:	2140      	movs	r1, #64	; 0x40
 800914c:	438b      	bics	r3, r1
 800914e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009150:	68e3      	ldr	r3, [r4, #12]
 8009152:	21e0      	movs	r1, #224	; 0xe0
 8009154:	00c9      	lsls	r1, r1, #3
 8009156:	2200      	movs	r2, #0
 8009158:	4299      	cmp	r1, r3
 800915a:	4152      	adcs	r2, r2
 800915c:	0312      	lsls	r2, r2, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800915e:	4829      	ldr	r0, [pc, #164]	; (8009204 <HAL_SPI_Init+0xf4>)
 8009160:	4003      	ands	r3, r0
 8009162:	428b      	cmp	r3, r1
 8009164:	d001      	beq.n	800916a <HAL_SPI_Init+0x5a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009166:	2300      	movs	r3, #0
 8009168:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800916a:	6820      	ldr	r0, [r4, #0]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	2182      	movs	r1, #130	; 0x82
 8009170:	0049      	lsls	r1, r1, #1
 8009172:	400b      	ands	r3, r1
 8009174:	68a1      	ldr	r1, [r4, #8]
 8009176:	2584      	movs	r5, #132	; 0x84
 8009178:	022d      	lsls	r5, r5, #8
 800917a:	4029      	ands	r1, r5
 800917c:	430b      	orrs	r3, r1
 800917e:	6921      	ldr	r1, [r4, #16]
 8009180:	2502      	movs	r5, #2
 8009182:	4029      	ands	r1, r5
 8009184:	430b      	orrs	r3, r1
 8009186:	2101      	movs	r1, #1
 8009188:	6965      	ldr	r5, [r4, #20]
 800918a:	400d      	ands	r5, r1
 800918c:	432b      	orrs	r3, r5
 800918e:	69a5      	ldr	r5, [r4, #24]
 8009190:	2680      	movs	r6, #128	; 0x80
 8009192:	00b6      	lsls	r6, r6, #2
 8009194:	4035      	ands	r5, r6
 8009196:	432b      	orrs	r3, r5
 8009198:	69e5      	ldr	r5, [r4, #28]
 800919a:	3ec9      	subs	r6, #201	; 0xc9
 800919c:	3eff      	subs	r6, #255	; 0xff
 800919e:	4035      	ands	r5, r6
 80091a0:	432b      	orrs	r3, r5
 80091a2:	6a25      	ldr	r5, [r4, #32]
 80091a4:	3648      	adds	r6, #72	; 0x48
 80091a6:	4035      	ands	r5, r6
 80091a8:	432b      	orrs	r3, r5
 80091aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80091ac:	2680      	movs	r6, #128	; 0x80
 80091ae:	01b6      	lsls	r6, r6, #6
 80091b0:	4035      	ands	r5, r6
 80091b2:	432b      	orrs	r3, r5
 80091b4:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80091b6:	6825      	ldr	r5, [r4, #0]
 80091b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ba:	2010      	movs	r0, #16
 80091bc:	4003      	ands	r3, r0
 80091be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80091c0:	2608      	movs	r6, #8
 80091c2:	4030      	ands	r0, r6
 80091c4:	4303      	orrs	r3, r0
 80091c6:	68e0      	ldr	r0, [r4, #12]
 80091c8:	26f0      	movs	r6, #240	; 0xf0
 80091ca:	0136      	lsls	r6, r6, #4
 80091cc:	4030      	ands	r0, r6
 80091ce:	4303      	orrs	r3, r0
 80091d0:	8b66      	ldrh	r6, [r4, #26]
 80091d2:	2004      	movs	r0, #4
 80091d4:	4030      	ands	r0, r6
 80091d6:	4303      	orrs	r3, r0
 80091d8:	4313      	orrs	r3, r2
 80091da:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091dc:	6822      	ldr	r2, [r4, #0]
 80091de:	69d3      	ldr	r3, [r2, #28]
 80091e0:	4808      	ldr	r0, [pc, #32]	; (8009204 <HAL_SPI_Init+0xf4>)
 80091e2:	4003      	ands	r3, r0
 80091e4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80091ea:	335d      	adds	r3, #93	; 0x5d
 80091ec:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 80091ee:	2000      	movs	r0, #0
}
 80091f0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80091f2:	335c      	adds	r3, #92	; 0x5c
 80091f4:	2200      	movs	r2, #0
 80091f6:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80091f8:	0020      	movs	r0, r4
 80091fa:	f7fd fbfd 	bl	80069f8 <HAL_SPI_MspInit>
 80091fe:	e79f      	b.n	8009140 <HAL_SPI_Init+0x30>
    return HAL_ERROR;
 8009200:	2001      	movs	r0, #1
 8009202:	e7f5      	b.n	80091f0 <HAL_SPI_Init+0xe0>
 8009204:	fffff7ff 	.word	0xfffff7ff

08009208 <HAL_SPI_Transmit>:
{
 8009208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800920a:	b085      	sub	sp, #20
 800920c:	0004      	movs	r4, r0
 800920e:	9101      	str	r1, [sp, #4]
 8009210:	0017      	movs	r7, r2
 8009212:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8009214:	235c      	movs	r3, #92	; 0x5c
 8009216:	5cc3      	ldrb	r3, [r0, r3]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d100      	bne.n	800921e <HAL_SPI_Transmit+0x16>
 800921c:	e0cb      	b.n	80093b6 <HAL_SPI_Transmit+0x1ae>
 800921e:	235c      	movs	r3, #92	; 0x5c
 8009220:	2201      	movs	r2, #1
 8009222:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8009224:	f7fd fe76 	bl	8006f14 <HAL_GetTick>
 8009228:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800922a:	235d      	movs	r3, #93	; 0x5d
 800922c:	5ce3      	ldrb	r3, [r4, r3]
 800922e:	b2d8      	uxtb	r0, r3
 8009230:	2b01      	cmp	r3, #1
 8009232:	d000      	beq.n	8009236 <HAL_SPI_Transmit+0x2e>
 8009234:	e0b2      	b.n	800939c <HAL_SPI_Transmit+0x194>
  if ((pData == NULL) || (Size == 0U))
 8009236:	9901      	ldr	r1, [sp, #4]
 8009238:	2900      	cmp	r1, #0
 800923a:	d100      	bne.n	800923e <HAL_SPI_Transmit+0x36>
 800923c:	e0af      	b.n	800939e <HAL_SPI_Transmit+0x196>
 800923e:	2f00      	cmp	r7, #0
 8009240:	d100      	bne.n	8009244 <HAL_SPI_Transmit+0x3c>
 8009242:	e0ac      	b.n	800939e <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009244:	335c      	adds	r3, #92	; 0x5c
 8009246:	2203      	movs	r2, #3
 8009248:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800924a:	2300      	movs	r3, #0
 800924c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800924e:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009250:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009252:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009254:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009256:	3241      	adds	r2, #65	; 0x41
 8009258:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 800925a:	3202      	adds	r2, #2
 800925c:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 800925e:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009260:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009262:	2380      	movs	r3, #128	; 0x80
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	68a2      	ldr	r2, [r4, #8]
 8009268:	429a      	cmp	r2, r3
 800926a:	d039      	beq.n	80092e0 <HAL_SPI_Transmit+0xd8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800926c:	6822      	ldr	r2, [r4, #0]
 800926e:	6813      	ldr	r3, [r2, #0]
 8009270:	065b      	lsls	r3, r3, #25
 8009272:	d403      	bmi.n	800927c <HAL_SPI_Transmit+0x74>
    __HAL_SPI_ENABLE(hspi);
 8009274:	6813      	ldr	r3, [r2, #0]
 8009276:	2140      	movs	r1, #64	; 0x40
 8009278:	430b      	orrs	r3, r1
 800927a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800927c:	23e0      	movs	r3, #224	; 0xe0
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	68e2      	ldr	r2, [r4, #12]
 8009282:	429a      	cmp	r2, r3
 8009284:	d956      	bls.n	8009334 <HAL_SPI_Transmit+0x12c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009286:	6863      	ldr	r3, [r4, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <HAL_SPI_Transmit+0x88>
 800928c:	2f01      	cmp	r7, #1
 800928e:	d10a      	bne.n	80092a6 <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009294:	8812      	ldrh	r2, [r2, #0]
 8009296:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009298:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800929a:	3302      	adds	r3, #2
 800929c:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800929e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80092a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80092a8:	b29b      	uxth	r3, r3
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092aa:	2702      	movs	r7, #2
    while (hspi->TxXferCount > 0U)
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d12e      	bne.n	800930e <HAL_SPI_Transmit+0x106>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092b0:	0032      	movs	r2, r6
 80092b2:	0029      	movs	r1, r5
 80092b4:	0020      	movs	r0, r4
 80092b6:	f7ff fef7 	bl	80090a8 <SPI_EndRxTxTransaction>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d001      	beq.n	80092c2 <HAL_SPI_Transmit+0xba>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092be:	2320      	movs	r3, #32
 80092c0:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092c2:	68a3      	ldr	r3, [r4, #8]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d106      	bne.n	80092d6 <HAL_SPI_Transmit+0xce>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092c8:	9303      	str	r3, [sp, #12]
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	9203      	str	r2, [sp, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092d6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80092d8:	1e43      	subs	r3, r0, #1
 80092da:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 80092dc:	b2c0      	uxtb	r0, r0
error:
 80092de:	e05e      	b.n	800939e <HAL_SPI_Transmit+0x196>
    __HAL_SPI_DISABLE(hspi);
 80092e0:	6822      	ldr	r2, [r4, #0]
 80092e2:	6813      	ldr	r3, [r2, #0]
 80092e4:	2140      	movs	r1, #64	; 0x40
 80092e6:	438b      	bics	r3, r1
 80092e8:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80092ea:	6822      	ldr	r2, [r4, #0]
 80092ec:	6811      	ldr	r1, [r2, #0]
 80092ee:	2380      	movs	r3, #128	; 0x80
 80092f0:	01db      	lsls	r3, r3, #7
 80092f2:	430b      	orrs	r3, r1
 80092f4:	6013      	str	r3, [r2, #0]
 80092f6:	e7b9      	b.n	800926c <HAL_SPI_Transmit+0x64>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092f8:	f7fd fe0c 	bl	8006f14 <HAL_GetTick>
 80092fc:	1b80      	subs	r0, r0, r6
 80092fe:	42a8      	cmp	r0, r5
 8009300:	d314      	bcc.n	800932c <HAL_SPI_Transmit+0x124>
 8009302:	1c6b      	adds	r3, r5, #1
 8009304:	d153      	bne.n	80093ae <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 8009306:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0d0      	beq.n	80092b0 <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	4217      	tst	r7, r2
 8009314:	d0f0      	beq.n	80092f8 <HAL_SPI_Transmit+0xf0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009316:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009318:	8812      	ldrh	r2, [r2, #0]
 800931a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800931c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800931e:	3302      	adds	r3, #2
 8009320:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8009322:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8009324:	3901      	subs	r1, #1
 8009326:	b289      	uxth	r1, r1
 8009328:	87e1      	strh	r1, [r4, #62]	; 0x3e
 800932a:	e7ec      	b.n	8009306 <HAL_SPI_Transmit+0xfe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800932c:	2d00      	cmp	r5, #0
 800932e:	d1ea      	bne.n	8009306 <HAL_SPI_Transmit+0xfe>
          errorcode = HAL_TIMEOUT;
 8009330:	2003      	movs	r0, #3
 8009332:	e034      	b.n	800939e <HAL_SPI_Transmit+0x196>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009334:	6863      	ldr	r3, [r4, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <HAL_SPI_Transmit+0x136>
 800933a:	2f01      	cmp	r7, #1
 800933c:	d10a      	bne.n	8009354 <HAL_SPI_Transmit+0x14c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009342:	7812      	ldrb	r2, [r2, #0]
 8009344:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009346:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009348:	3301      	adds	r3, #1
 800934a:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800934c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800934e:	3b01      	subs	r3, #1
 8009350:	b29b      	uxth	r3, r3
 8009352:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8009354:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009356:	b29b      	uxth	r3, r3
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009358:	2702      	movs	r7, #2
    while (hspi->TxXferCount > 0U)
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10b      	bne.n	8009376 <HAL_SPI_Transmit+0x16e>
 800935e:	e7a7      	b.n	80092b0 <HAL_SPI_Transmit+0xa8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009360:	f7fd fdd8 	bl	8006f14 <HAL_GetTick>
 8009364:	1b80      	subs	r0, r0, r6
 8009366:	42a8      	cmp	r0, r5
 8009368:	d314      	bcc.n	8009394 <HAL_SPI_Transmit+0x18c>
 800936a:	1c6b      	adds	r3, r5, #1
 800936c:	d121      	bne.n	80093b2 <HAL_SPI_Transmit+0x1aa>
    while (hspi->TxXferCount > 0U)
 800936e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009370:	b29b      	uxth	r3, r3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d09c      	beq.n	80092b0 <HAL_SPI_Transmit+0xa8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	4217      	tst	r7, r2
 800937c:	d0f0      	beq.n	8009360 <HAL_SPI_Transmit+0x158>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800937e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009380:	7812      	ldrb	r2, [r2, #0]
 8009382:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009386:	3301      	adds	r3, #1
 8009388:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800938a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800938c:	3901      	subs	r1, #1
 800938e:	b289      	uxth	r1, r1
 8009390:	87e1      	strh	r1, [r4, #62]	; 0x3e
 8009392:	e7ec      	b.n	800936e <HAL_SPI_Transmit+0x166>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009394:	2d00      	cmp	r5, #0
 8009396:	d1ea      	bne.n	800936e <HAL_SPI_Transmit+0x166>
          errorcode = HAL_TIMEOUT;
 8009398:	2003      	movs	r0, #3
 800939a:	e000      	b.n	800939e <HAL_SPI_Transmit+0x196>
    errorcode = HAL_BUSY;
 800939c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800939e:	235d      	movs	r3, #93	; 0x5d
 80093a0:	2201      	movs	r2, #1
 80093a2:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80093a4:	3b01      	subs	r3, #1
 80093a6:	2200      	movs	r2, #0
 80093a8:	54e2      	strb	r2, [r4, r3]
}
 80093aa:	b005      	add	sp, #20
 80093ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          errorcode = HAL_TIMEOUT;
 80093ae:	2003      	movs	r0, #3
 80093b0:	e7f5      	b.n	800939e <HAL_SPI_Transmit+0x196>
          errorcode = HAL_TIMEOUT;
 80093b2:	2003      	movs	r0, #3
 80093b4:	e7f3      	b.n	800939e <HAL_SPI_Transmit+0x196>
  __HAL_LOCK(hspi);
 80093b6:	2002      	movs	r0, #2
 80093b8:	e7f7      	b.n	80093aa <HAL_SPI_Transmit+0x1a2>
	...

080093bc <HAL_SPI_TransmitReceive>:
{
 80093bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093be:	46d6      	mov	lr, sl
 80093c0:	464f      	mov	r7, r9
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b083      	sub	sp, #12
 80093c6:	0004      	movs	r4, r0
 80093c8:	9100      	str	r1, [sp, #0]
 80093ca:	9201      	str	r2, [sp, #4]
 80093cc:	001f      	movs	r7, r3
 80093ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80093d0:	235c      	movs	r3, #92	; 0x5c
 80093d2:	5cc3      	ldrb	r3, [r0, r3]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d100      	bne.n	80093da <HAL_SPI_TransmitReceive+0x1e>
 80093d8:	e124      	b.n	8009624 <HAL_SPI_TransmitReceive+0x268>
 80093da:	235c      	movs	r3, #92	; 0x5c
 80093dc:	2201      	movs	r2, #1
 80093de:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80093e0:	f7fd fd98 	bl	8006f14 <HAL_GetTick>
 80093e4:	0006      	movs	r6, r0
  tmp_state           = hspi->State;
 80093e6:	235d      	movs	r3, #93	; 0x5d
 80093e8:	5ce3      	ldrb	r3, [r4, r3]
 80093ea:	b2d9      	uxtb	r1, r3
  tmp_mode            = hspi->Init.Mode;
 80093ec:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d00c      	beq.n	800940c <HAL_SPI_TransmitReceive+0x50>
 80093f2:	2382      	movs	r3, #130	; 0x82
 80093f4:	005b      	lsls	r3, r3, #1
    errorcode = HAL_BUSY;
 80093f6:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d000      	beq.n	80093fe <HAL_SPI_TransmitReceive+0x42>
 80093fc:	e0fd      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093fe:	68a3      	ldr	r3, [r4, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d000      	beq.n	8009406 <HAL_SPI_TransmitReceive+0x4a>
 8009404:	e0f8      	b.n	80095f8 <HAL_SPI_TransmitReceive+0x23c>
 8009406:	2904      	cmp	r1, #4
 8009408:	d000      	beq.n	800940c <HAL_SPI_TransmitReceive+0x50>
 800940a:	e0f6      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800940c:	9b00      	ldr	r3, [sp, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d100      	bne.n	8009414 <HAL_SPI_TransmitReceive+0x58>
 8009412:	e0fd      	b.n	8009610 <HAL_SPI_TransmitReceive+0x254>
 8009414:	9b01      	ldr	r3, [sp, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d100      	bne.n	800941c <HAL_SPI_TransmitReceive+0x60>
 800941a:	e0fb      	b.n	8009614 <HAL_SPI_TransmitReceive+0x258>
 800941c:	2f00      	cmp	r7, #0
 800941e:	d100      	bne.n	8009422 <HAL_SPI_TransmitReceive+0x66>
 8009420:	e0fa      	b.n	8009618 <HAL_SPI_TransmitReceive+0x25c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009422:	235d      	movs	r3, #93	; 0x5d
 8009424:	5ce3      	ldrb	r3, [r4, r3]
 8009426:	2b04      	cmp	r3, #4
 8009428:	d002      	beq.n	8009430 <HAL_SPI_TransmitReceive+0x74>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800942a:	235d      	movs	r3, #93	; 0x5d
 800942c:	2205      	movs	r2, #5
 800942e:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009430:	2300      	movs	r3, #0
 8009432:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009434:	9a01      	ldr	r2, [sp, #4]
 8009436:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009438:	2246      	movs	r2, #70	; 0x46
 800943a:	52a7      	strh	r7, [r4, r2]
  hspi->RxXferSize  = Size;
 800943c:	3a02      	subs	r2, #2
 800943e:	52a7      	strh	r7, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009440:	9a00      	ldr	r2, [sp, #0]
 8009442:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009444:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009446:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8009448:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800944a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800944c:	23e0      	movs	r3, #224	; 0xe0
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	68e2      	ldr	r2, [r4, #12]
 8009452:	429a      	cmp	r2, r3
 8009454:	d927      	bls.n	80094a6 <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009456:	6822      	ldr	r2, [r4, #0]
 8009458:	6853      	ldr	r3, [r2, #4]
 800945a:	4973      	ldr	r1, [pc, #460]	; (8009628 <HAL_SPI_TransmitReceive+0x26c>)
 800945c:	400b      	ands	r3, r1
 800945e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	0652      	lsls	r2, r2, #25
 8009466:	d403      	bmi.n	8009470 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	2140      	movs	r1, #64	; 0x40
 800946c:	430a      	orrs	r2, r1
 800946e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009470:	23e0      	movs	r3, #224	; 0xe0
 8009472:	00db      	lsls	r3, r3, #3
 8009474:	68e2      	ldr	r2, [r4, #12]
 8009476:	429a      	cmp	r2, r3
 8009478:	d95b      	bls.n	8009532 <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800947a:	6863      	ldr	r3, [r4, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <HAL_SPI_TransmitReceive+0xc8>
 8009480:	2f01      	cmp	r7, #1
 8009482:	d10a      	bne.n	800949a <HAL_SPI_TransmitReceive+0xde>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009488:	8812      	ldrh	r2, [r2, #0]
 800948a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800948c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800948e:	3302      	adds	r3, #2
 8009490:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8009492:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009494:	3b01      	subs	r3, #1
 8009496:	b29b      	uxth	r3, r3
 8009498:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800949a:	2301      	movs	r3, #1
 800949c:	469a      	mov	sl, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800949e:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094a0:	3301      	adds	r3, #1
 80094a2:	4699      	mov	r9, r3
 80094a4:	e030      	b.n	8009508 <HAL_SPI_TransmitReceive+0x14c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094a6:	6822      	ldr	r2, [r4, #0]
 80094a8:	6851      	ldr	r1, [r2, #4]
 80094aa:	2380      	movs	r3, #128	; 0x80
 80094ac:	015b      	lsls	r3, r3, #5
 80094ae:	430b      	orrs	r3, r1
 80094b0:	6053      	str	r3, [r2, #4]
 80094b2:	e7d5      	b.n	8009460 <HAL_SPI_TransmitReceive+0xa4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80094b6:	8812      	ldrh	r2, [r2, #0]
 80094b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094bc:	3302      	adds	r3, #2
 80094be:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80094c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80094c2:	3b01      	subs	r3, #1
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	469a      	mov	sl, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094cc:	6821      	ldr	r1, [r4, #0]
 80094ce:	688b      	ldr	r3, [r1, #8]
 80094d0:	2201      	movs	r2, #1
 80094d2:	0010      	movs	r0, r2
 80094d4:	4018      	ands	r0, r3
 80094d6:	421a      	tst	r2, r3
 80094d8:	d00e      	beq.n	80094f8 <HAL_SPI_TransmitReceive+0x13c>
 80094da:	5be3      	ldrh	r3, [r4, r7]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00a      	beq.n	80094f8 <HAL_SPI_TransmitReceive+0x13c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094e2:	68ca      	ldr	r2, [r1, #12]
 80094e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094ea:	3302      	adds	r3, #2
 80094ec:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80094ee:	5be3      	ldrh	r3, [r4, r7]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	53e3      	strh	r3, [r4, r7]
        txallowed = 1U;
 80094f6:	4682      	mov	sl, r0
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80094f8:	f7fd fd0c 	bl	8006f14 <HAL_GetTick>
 80094fc:	1b80      	subs	r0, r0, r6
 80094fe:	42a8      	cmp	r0, r5
 8009500:	d302      	bcc.n	8009508 <HAL_SPI_TransmitReceive+0x14c>
 8009502:	1c6b      	adds	r3, r5, #1
 8009504:	d000      	beq.n	8009508 <HAL_SPI_TransmitReceive+0x14c>
 8009506:	e089      	b.n	800961c <HAL_SPI_TransmitReceive+0x260>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009508:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800950a:	b29b      	uxth	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <HAL_SPI_TransmitReceive+0x15c>
 8009510:	5be3      	ldrh	r3, [r4, r7]
 8009512:	b29b      	uxth	r3, r3
 8009514:	2b00      	cmp	r3, #0
 8009516:	d064      	beq.n	80095e2 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	4649      	mov	r1, r9
 800951e:	4211      	tst	r1, r2
 8009520:	d0d4      	beq.n	80094cc <HAL_SPI_TransmitReceive+0x110>
 8009522:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009524:	b292      	uxth	r2, r2
 8009526:	2a00      	cmp	r2, #0
 8009528:	d0d0      	beq.n	80094cc <HAL_SPI_TransmitReceive+0x110>
 800952a:	4652      	mov	r2, sl
 800952c:	2a01      	cmp	r2, #1
 800952e:	d1cd      	bne.n	80094cc <HAL_SPI_TransmitReceive+0x110>
 8009530:	e7c0      	b.n	80094b4 <HAL_SPI_TransmitReceive+0xf8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <HAL_SPI_TransmitReceive+0x180>
 8009538:	2f01      	cmp	r7, #1
 800953a:	d10a      	bne.n	8009552 <HAL_SPI_TransmitReceive+0x196>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009540:	7812      	ldrb	r2, [r2, #0]
 8009542:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009544:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009546:	3301      	adds	r3, #1
 8009548:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800954a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800954c:	3b01      	subs	r3, #1
 800954e:	b29b      	uxth	r3, r3
 8009550:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009552:	2301      	movs	r3, #1
 8009554:	469a      	mov	sl, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009556:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009558:	3301      	adds	r3, #1
 800955a:	4699      	mov	r9, r3
 800955c:	e01c      	b.n	8009598 <HAL_SPI_TransmitReceive+0x1dc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800955e:	6821      	ldr	r1, [r4, #0]
 8009560:	688b      	ldr	r3, [r1, #8]
 8009562:	2201      	movs	r2, #1
 8009564:	0010      	movs	r0, r2
 8009566:	4018      	ands	r0, r3
 8009568:	421a      	tst	r2, r3
 800956a:	d00e      	beq.n	800958a <HAL_SPI_TransmitReceive+0x1ce>
 800956c:	5be3      	ldrh	r3, [r4, r7]
 800956e:	b29b      	uxth	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00a      	beq.n	800958a <HAL_SPI_TransmitReceive+0x1ce>
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009576:	7b0a      	ldrb	r2, [r1, #12]
 8009578:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800957a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800957c:	3301      	adds	r3, #1
 800957e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8009580:	5be3      	ldrh	r3, [r4, r7]
 8009582:	3b01      	subs	r3, #1
 8009584:	b29b      	uxth	r3, r3
 8009586:	53e3      	strh	r3, [r4, r7]
        txallowed = 1U;
 8009588:	4682      	mov	sl, r0
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800958a:	f7fd fcc3 	bl	8006f14 <HAL_GetTick>
 800958e:	1b80      	subs	r0, r0, r6
 8009590:	42a8      	cmp	r0, r5
 8009592:	d322      	bcc.n	80095da <HAL_SPI_TransmitReceive+0x21e>
 8009594:	1c6b      	adds	r3, r5, #1
 8009596:	d143      	bne.n	8009620 <HAL_SPI_TransmitReceive+0x264>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009598:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d103      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x1ec>
 80095a0:	5be3      	ldrh	r3, [r4, r7]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01c      	beq.n	80095e2 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	689a      	ldr	r2, [r3, #8]
 80095ac:	4649      	mov	r1, r9
 80095ae:	4211      	tst	r1, r2
 80095b0:	d0d5      	beq.n	800955e <HAL_SPI_TransmitReceive+0x1a2>
 80095b2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80095b4:	b292      	uxth	r2, r2
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	d0d1      	beq.n	800955e <HAL_SPI_TransmitReceive+0x1a2>
 80095ba:	4652      	mov	r2, sl
 80095bc:	2a01      	cmp	r2, #1
 80095be:	d1ce      	bne.n	800955e <HAL_SPI_TransmitReceive+0x1a2>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80095c2:	7812      	ldrb	r2, [r2, #0]
 80095c4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80095c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80095c8:	3301      	adds	r3, #1
 80095ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80095cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80095d4:	2300      	movs	r3, #0
 80095d6:	469a      	mov	sl, r3
 80095d8:	e7c1      	b.n	800955e <HAL_SPI_TransmitReceive+0x1a2>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095da:	2d00      	cmp	r5, #0
 80095dc:	d1dc      	bne.n	8009598 <HAL_SPI_TransmitReceive+0x1dc>
        errorcode = HAL_TIMEOUT;
 80095de:	2003      	movs	r0, #3
 80095e0:	e00b      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095e2:	0032      	movs	r2, r6
 80095e4:	0029      	movs	r1, r5
 80095e6:	0020      	movs	r0, r4
 80095e8:	f7ff fd5e 	bl	80090a8 <SPI_EndRxTxTransaction>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d004      	beq.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095f0:	2320      	movs	r3, #32
 80095f2:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 80095f4:	2001      	movs	r0, #1
 80095f6:	e000      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
    errorcode = HAL_BUSY;
 80095f8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80095fa:	235d      	movs	r3, #93	; 0x5d
 80095fc:	2201      	movs	r2, #1
 80095fe:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8009600:	3b01      	subs	r3, #1
 8009602:	2200      	movs	r2, #0
 8009604:	54e2      	strb	r2, [r4, r3]
}
 8009606:	b003      	add	sp, #12
 8009608:	bcc0      	pop	{r6, r7}
 800960a:	46ba      	mov	sl, r7
 800960c:	46b1      	mov	r9, r6
 800960e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorcode = HAL_ERROR;
 8009610:	2001      	movs	r0, #1
 8009612:	e7f2      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
 8009614:	2001      	movs	r0, #1
 8009616:	e7f0      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
 8009618:	2001      	movs	r0, #1
 800961a:	e7ee      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
        errorcode = HAL_TIMEOUT;
 800961c:	2003      	movs	r0, #3
 800961e:	e7ec      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
        errorcode = HAL_TIMEOUT;
 8009620:	2003      	movs	r0, #3
 8009622:	e7ea      	b.n	80095fa <HAL_SPI_TransmitReceive+0x23e>
  __HAL_LOCK(hspi);
 8009624:	2002      	movs	r0, #2
 8009626:	e7ee      	b.n	8009606 <HAL_SPI_TransmitReceive+0x24a>
 8009628:	ffffefff 	.word	0xffffefff

0800962c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800962c:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800962e:	223d      	movs	r2, #61	; 0x3d
 8009630:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 8009632:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8009634:	2a01      	cmp	r2, #1
 8009636:	d115      	bne.n	8009664 <HAL_TIM_Base_Start_IT+0x38>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009638:	323c      	adds	r2, #60	; 0x3c
 800963a:	2102      	movs	r1, #2
 800963c:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800963e:	6819      	ldr	r1, [r3, #0]
 8009640:	68ca      	ldr	r2, [r1, #12]
 8009642:	4302      	orrs	r2, r0
 8009644:	60ca      	str	r2, [r1, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a10      	ldr	r2, [pc, #64]	; (800968c <HAL_TIM_Base_Start_IT+0x60>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d00b      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x3a>
 800964e:	4a10      	ldr	r2, [pc, #64]	; (8009690 <HAL_TIM_Base_Start_IT+0x64>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d008      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x3a>
 8009654:	4a0f      	ldr	r2, [pc, #60]	; (8009694 <HAL_TIM_Base_Start_IT+0x68>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d005      	beq.n	8009666 <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	2101      	movs	r1, #1
 800965e:	430a      	orrs	r2, r1
 8009660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009662:	2000      	movs	r0, #0
}
 8009664:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009666:	689a      	ldr	r2, [r3, #8]
 8009668:	490b      	ldr	r1, [pc, #44]	; (8009698 <HAL_TIM_Base_Start_IT+0x6c>)
 800966a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800966c:	2a06      	cmp	r2, #6
 800966e:	d008      	beq.n	8009682 <HAL_TIM_Base_Start_IT+0x56>
 8009670:	3907      	subs	r1, #7
 8009672:	428a      	cmp	r2, r1
 8009674:	d007      	beq.n	8009686 <HAL_TIM_Base_Start_IT+0x5a>
      __HAL_TIM_ENABLE(htim);
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	2101      	movs	r1, #1
 800967a:	430a      	orrs	r2, r1
 800967c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800967e:	2000      	movs	r0, #0
 8009680:	e7f0      	b.n	8009664 <HAL_TIM_Base_Start_IT+0x38>
 8009682:	2000      	movs	r0, #0
 8009684:	e7ee      	b.n	8009664 <HAL_TIM_Base_Start_IT+0x38>
 8009686:	2000      	movs	r0, #0
 8009688:	e7ec      	b.n	8009664 <HAL_TIM_Base_Start_IT+0x38>
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	40012c00 	.word	0x40012c00
 8009690:	40000400 	.word	0x40000400
 8009694:	40014000 	.word	0x40014000
 8009698:	00010007 	.word	0x00010007

0800969c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800969c:	4770      	bx	lr

0800969e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800969e:	4770      	bx	lr

080096a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096a0:	4770      	bx	lr

080096a2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIM_IRQHandler>:
{
 80096a4:	b510      	push	{r4, lr}
 80096a6:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80096a8:	6802      	ldr	r2, [r0, #0]
 80096aa:	6913      	ldr	r3, [r2, #16]
 80096ac:	079b      	lsls	r3, r3, #30
 80096ae:	d50f      	bpl.n	80096d0 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80096b0:	68d3      	ldr	r3, [r2, #12]
 80096b2:	079b      	lsls	r3, r3, #30
 80096b4:	d50c      	bpl.n	80096d0 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096b6:	2303      	movs	r3, #3
 80096b8:	425b      	negs	r3, r3
 80096ba:	6113      	str	r3, [r2, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096bc:	3304      	adds	r3, #4
 80096be:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096c0:	6803      	ldr	r3, [r0, #0]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	079b      	lsls	r3, r3, #30
 80096c6:	d06a      	beq.n	800979e <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 80096c8:	f7ff ffe9 	bl	800969e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096cc:	2300      	movs	r3, #0
 80096ce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096d0:	6822      	ldr	r2, [r4, #0]
 80096d2:	6913      	ldr	r3, [r2, #16]
 80096d4:	075b      	lsls	r3, r3, #29
 80096d6:	d512      	bpl.n	80096fe <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096d8:	68d3      	ldr	r3, [r2, #12]
 80096da:	075b      	lsls	r3, r3, #29
 80096dc:	d50f      	bpl.n	80096fe <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096de:	2305      	movs	r3, #5
 80096e0:	425b      	negs	r3, r3
 80096e2:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096e4:	3307      	adds	r3, #7
 80096e6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	699a      	ldr	r2, [r3, #24]
 80096ec:	23c0      	movs	r3, #192	; 0xc0
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	421a      	tst	r2, r3
 80096f2:	d05a      	beq.n	80097aa <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 80096f4:	0020      	movs	r0, r4
 80096f6:	f7ff ffd2 	bl	800969e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fa:	2300      	movs	r3, #0
 80096fc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	6913      	ldr	r3, [r2, #16]
 8009702:	071b      	lsls	r3, r3, #28
 8009704:	d510      	bpl.n	8009728 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009706:	68d3      	ldr	r3, [r2, #12]
 8009708:	071b      	lsls	r3, r3, #28
 800970a:	d50d      	bpl.n	8009728 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800970c:	2309      	movs	r3, #9
 800970e:	425b      	negs	r3, r3
 8009710:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009712:	330d      	adds	r3, #13
 8009714:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	079b      	lsls	r3, r3, #30
 800971c:	d04c      	beq.n	80097b8 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 800971e:	0020      	movs	r0, r4
 8009720:	f7ff ffbd 	bl	800969e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009724:	2300      	movs	r3, #0
 8009726:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009728:	6822      	ldr	r2, [r4, #0]
 800972a:	6913      	ldr	r3, [r2, #16]
 800972c:	06db      	lsls	r3, r3, #27
 800972e:	d512      	bpl.n	8009756 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009730:	68d3      	ldr	r3, [r2, #12]
 8009732:	06db      	lsls	r3, r3, #27
 8009734:	d50f      	bpl.n	8009756 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009736:	2311      	movs	r3, #17
 8009738:	425b      	negs	r3, r3
 800973a:	6113      	str	r3, [r2, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800973c:	3319      	adds	r3, #25
 800973e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	69da      	ldr	r2, [r3, #28]
 8009744:	23c0      	movs	r3, #192	; 0xc0
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	421a      	tst	r2, r3
 800974a:	d03c      	beq.n	80097c6 <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 800974c:	0020      	movs	r0, r4
 800974e:	f7ff ffa6 	bl	800969e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009752:	2300      	movs	r3, #0
 8009754:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009756:	6822      	ldr	r2, [r4, #0]
 8009758:	6913      	ldr	r3, [r2, #16]
 800975a:	07db      	lsls	r3, r3, #31
 800975c:	d502      	bpl.n	8009764 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800975e:	68d3      	ldr	r3, [r2, #12]
 8009760:	07db      	lsls	r3, r3, #31
 8009762:	d437      	bmi.n	80097d4 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009764:	6822      	ldr	r2, [r4, #0]
 8009766:	6913      	ldr	r3, [r2, #16]
 8009768:	061b      	lsls	r3, r3, #24
 800976a:	d502      	bpl.n	8009772 <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800976c:	68d3      	ldr	r3, [r2, #12]
 800976e:	061b      	lsls	r3, r3, #24
 8009770:	d437      	bmi.n	80097e2 <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009772:	6822      	ldr	r2, [r4, #0]
 8009774:	6913      	ldr	r3, [r2, #16]
 8009776:	05db      	lsls	r3, r3, #23
 8009778:	d502      	bpl.n	8009780 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800977a:	68d3      	ldr	r3, [r2, #12]
 800977c:	061b      	lsls	r3, r3, #24
 800977e:	d437      	bmi.n	80097f0 <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009780:	6822      	ldr	r2, [r4, #0]
 8009782:	6913      	ldr	r3, [r2, #16]
 8009784:	065b      	lsls	r3, r3, #25
 8009786:	d502      	bpl.n	800978e <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009788:	68d3      	ldr	r3, [r2, #12]
 800978a:	065b      	lsls	r3, r3, #25
 800978c:	d436      	bmi.n	80097fc <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	6913      	ldr	r3, [r2, #16]
 8009792:	069b      	lsls	r3, r3, #26
 8009794:	d502      	bpl.n	800979c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009796:	68d3      	ldr	r3, [r2, #12]
 8009798:	069b      	lsls	r3, r3, #26
 800979a:	d436      	bmi.n	800980a <HAL_TIM_IRQHandler+0x166>
}
 800979c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800979e:	f7ff ff7d 	bl	800969c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a2:	0020      	movs	r0, r4
 80097a4:	f7ff ff7c 	bl	80096a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80097a8:	e790      	b.n	80096cc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097aa:	0020      	movs	r0, r4
 80097ac:	f7ff ff76 	bl	800969c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b0:	0020      	movs	r0, r4
 80097b2:	f7ff ff75 	bl	80096a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80097b6:	e7a0      	b.n	80096fa <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097b8:	0020      	movs	r0, r4
 80097ba:	f7ff ff6f 	bl	800969c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097be:	0020      	movs	r0, r4
 80097c0:	f7ff ff6e 	bl	80096a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80097c4:	e7ae      	b.n	8009724 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097c6:	0020      	movs	r0, r4
 80097c8:	f7ff ff68 	bl	800969c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097cc:	0020      	movs	r0, r4
 80097ce:	f7ff ff67 	bl	80096a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80097d2:	e7be      	b.n	8009752 <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097d4:	2302      	movs	r3, #2
 80097d6:	425b      	negs	r3, r3
 80097d8:	6113      	str	r3, [r2, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80097da:	0020      	movs	r0, r4
 80097dc:	f7fb fb66 	bl	8004eac <HAL_TIM_PeriodElapsedCallback>
 80097e0:	e7c0      	b.n	8009764 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097e2:	2381      	movs	r3, #129	; 0x81
 80097e4:	425b      	negs	r3, r3
 80097e6:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_BreakCallback(htim);
 80097e8:	0020      	movs	r0, r4
 80097ea:	f000 f902 	bl	80099f2 <HAL_TIMEx_BreakCallback>
 80097ee:	e7c0      	b.n	8009772 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80097f0:	4b09      	ldr	r3, [pc, #36]	; (8009818 <HAL_TIM_IRQHandler+0x174>)
 80097f2:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_Break2Callback(htim);
 80097f4:	0020      	movs	r0, r4
 80097f6:	f000 f8fd 	bl	80099f4 <HAL_TIMEx_Break2Callback>
 80097fa:	e7c1      	b.n	8009780 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097fc:	2341      	movs	r3, #65	; 0x41
 80097fe:	425b      	negs	r3, r3
 8009800:	6113      	str	r3, [r2, #16]
      HAL_TIM_TriggerCallback(htim);
 8009802:	0020      	movs	r0, r4
 8009804:	f7ff ff4d 	bl	80096a2 <HAL_TIM_TriggerCallback>
 8009808:	e7c1      	b.n	800978e <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800980a:	2321      	movs	r3, #33	; 0x21
 800980c:	425b      	negs	r3, r3
 800980e:	6113      	str	r3, [r2, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009810:	0020      	movs	r0, r4
 8009812:	f000 f8ed 	bl	80099f0 <HAL_TIMEx_CommutCallback>
}
 8009816:	e7c1      	b.n	800979c <HAL_TIM_IRQHandler+0xf8>
 8009818:	fffffeff 	.word	0xfffffeff

0800981c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800981c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800981e:	4a37      	ldr	r2, [pc, #220]	; (80098fc <TIM_Base_SetConfig+0xe0>)
 8009820:	4290      	cmp	r0, r2
 8009822:	d042      	beq.n	80098aa <TIM_Base_SetConfig+0x8e>
 8009824:	4a36      	ldr	r2, [pc, #216]	; (8009900 <TIM_Base_SetConfig+0xe4>)
 8009826:	4290      	cmp	r0, r2
 8009828:	d055      	beq.n	80098d6 <TIM_Base_SetConfig+0xba>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800982a:	4a36      	ldr	r2, [pc, #216]	; (8009904 <TIM_Base_SetConfig+0xe8>)
 800982c:	4290      	cmp	r0, r2
 800982e:	d056      	beq.n	80098de <TIM_Base_SetConfig+0xc2>
 8009830:	4a35      	ldr	r2, [pc, #212]	; (8009908 <TIM_Base_SetConfig+0xec>)
 8009832:	4290      	cmp	r0, r2
 8009834:	d01d      	beq.n	8009872 <TIM_Base_SetConfig+0x56>
 8009836:	4a35      	ldr	r2, [pc, #212]	; (800990c <TIM_Base_SetConfig+0xf0>)
 8009838:	4290      	cmp	r0, r2
 800983a:	d00c      	beq.n	8009856 <TIM_Base_SetConfig+0x3a>
 800983c:	4a34      	ldr	r2, [pc, #208]	; (8009910 <TIM_Base_SetConfig+0xf4>)
 800983e:	4290      	cmp	r0, r2
 8009840:	d025      	beq.n	800988e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009842:	2280      	movs	r2, #128	; 0x80
 8009844:	4393      	bics	r3, r2
 8009846:	694a      	ldr	r2, [r1, #20]
 8009848:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800984a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800984c:	688b      	ldr	r3, [r1, #8]
 800984e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009850:	680b      	ldr	r3, [r1, #0]
 8009852:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009854:	e03c      	b.n	80098d0 <TIM_Base_SetConfig+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009856:	4a2f      	ldr	r2, [pc, #188]	; (8009914 <TIM_Base_SetConfig+0xf8>)
 8009858:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800985a:	68ca      	ldr	r2, [r1, #12]
 800985c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800985e:	2280      	movs	r2, #128	; 0x80
 8009860:	4393      	bics	r3, r2
 8009862:	694a      	ldr	r2, [r1, #20]
 8009864:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009866:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009868:	688b      	ldr	r3, [r1, #8]
 800986a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800986c:	680b      	ldr	r3, [r1, #0]
 800986e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009870:	e02c      	b.n	80098cc <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8009872:	4a28      	ldr	r2, [pc, #160]	; (8009914 <TIM_Base_SetConfig+0xf8>)
 8009874:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009876:	68ca      	ldr	r2, [r1, #12]
 8009878:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800987a:	2280      	movs	r2, #128	; 0x80
 800987c:	4393      	bics	r3, r2
 800987e:	694a      	ldr	r2, [r1, #20]
 8009880:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009882:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009884:	688b      	ldr	r3, [r1, #8]
 8009886:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009888:	680b      	ldr	r3, [r1, #0]
 800988a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800988c:	e01e      	b.n	80098cc <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 800988e:	4a21      	ldr	r2, [pc, #132]	; (8009914 <TIM_Base_SetConfig+0xf8>)
 8009890:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009892:	68ca      	ldr	r2, [r1, #12]
 8009894:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009896:	2280      	movs	r2, #128	; 0x80
 8009898:	4393      	bics	r3, r2
 800989a:	694a      	ldr	r2, [r1, #20]
 800989c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800989e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098a0:	688b      	ldr	r3, [r1, #8]
 80098a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80098a4:	680b      	ldr	r3, [r1, #0]
 80098a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098a8:	e010      	b.n	80098cc <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098aa:	2270      	movs	r2, #112	; 0x70
 80098ac:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80098ae:	684a      	ldr	r2, [r1, #4]
 80098b0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80098b2:	4a18      	ldr	r2, [pc, #96]	; (8009914 <TIM_Base_SetConfig+0xf8>)
 80098b4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098b6:	68ca      	ldr	r2, [r1, #12]
 80098b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098ba:	2280      	movs	r2, #128	; 0x80
 80098bc:	4393      	bics	r3, r2
 80098be:	694a      	ldr	r2, [r1, #20]
 80098c0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80098c2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098c4:	688b      	ldr	r3, [r1, #8]
 80098c6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80098c8:	680b      	ldr	r3, [r1, #0]
 80098ca:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098cc:	690b      	ldr	r3, [r1, #16]
 80098ce:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098d0:	2301      	movs	r3, #1
 80098d2:	6143      	str	r3, [r0, #20]
}
 80098d4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098d6:	2270      	movs	r2, #112	; 0x70
 80098d8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80098da:	684a      	ldr	r2, [r1, #4]
 80098dc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80098de:	4a0d      	ldr	r2, [pc, #52]	; (8009914 <TIM_Base_SetConfig+0xf8>)
 80098e0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098e2:	68ca      	ldr	r2, [r1, #12]
 80098e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e6:	2280      	movs	r2, #128	; 0x80
 80098e8:	4393      	bics	r3, r2
 80098ea:	694a      	ldr	r2, [r1, #20]
 80098ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80098ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098f0:	688b      	ldr	r3, [r1, #8]
 80098f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80098f4:	680b      	ldr	r3, [r1, #0]
 80098f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098f8:	e7ea      	b.n	80098d0 <TIM_Base_SetConfig+0xb4>
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	40012c00 	.word	0x40012c00
 8009900:	40000400 	.word	0x40000400
 8009904:	40002000 	.word	0x40002000
 8009908:	40014000 	.word	0x40014000
 800990c:	40014400 	.word	0x40014400
 8009910:	40014800 	.word	0x40014800
 8009914:	fffffcff 	.word	0xfffffcff

08009918 <HAL_TIM_Base_Init>:
{
 8009918:	b570      	push	{r4, r5, r6, lr}
 800991a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800991c:	d02a      	beq.n	8009974 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800991e:	233d      	movs	r3, #61	; 0x3d
 8009920:	5cc3      	ldrb	r3, [r0, r3]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d020      	beq.n	8009968 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8009926:	253d      	movs	r5, #61	; 0x3d
 8009928:	2302      	movs	r3, #2
 800992a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800992c:	0021      	movs	r1, r4
 800992e:	c901      	ldmia	r1!, {r0}
 8009930:	f7ff ff74 	bl	800981c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009934:	2301      	movs	r3, #1
 8009936:	2248      	movs	r2, #72	; 0x48
 8009938:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800993a:	3a0a      	subs	r2, #10
 800993c:	54a3      	strb	r3, [r4, r2]
 800993e:	3201      	adds	r2, #1
 8009940:	54a3      	strb	r3, [r4, r2]
 8009942:	3201      	adds	r2, #1
 8009944:	54a3      	strb	r3, [r4, r2]
 8009946:	3201      	adds	r2, #1
 8009948:	54a3      	strb	r3, [r4, r2]
 800994a:	3201      	adds	r2, #1
 800994c:	54a3      	strb	r3, [r4, r2]
 800994e:	3201      	adds	r2, #1
 8009950:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009952:	3201      	adds	r2, #1
 8009954:	54a3      	strb	r3, [r4, r2]
 8009956:	3201      	adds	r2, #1
 8009958:	54a3      	strb	r3, [r4, r2]
 800995a:	3201      	adds	r2, #1
 800995c:	54a3      	strb	r3, [r4, r2]
 800995e:	3201      	adds	r2, #1
 8009960:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8009962:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8009964:	2000      	movs	r0, #0
}
 8009966:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8009968:	333c      	adds	r3, #60	; 0x3c
 800996a:	2200      	movs	r2, #0
 800996c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800996e:	f7fd f871 	bl	8006a54 <HAL_TIM_Base_MspInit>
 8009972:	e7d8      	b.n	8009926 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8009974:	2001      	movs	r0, #1
 8009976:	e7f6      	b.n	8009966 <HAL_TIM_Base_Init+0x4e>

08009978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009978:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800997a:	233c      	movs	r3, #60	; 0x3c
 800997c:	5cc3      	ldrb	r3, [r0, r3]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d02c      	beq.n	80099dc <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009982:	233c      	movs	r3, #60	; 0x3c
 8009984:	2201      	movs	r2, #1
 8009986:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009988:	3301      	adds	r3, #1
 800998a:	3201      	adds	r2, #1
 800998c:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800998e:	6802      	ldr	r2, [r0, #0]
 8009990:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009992:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009994:	4d12      	ldr	r5, [pc, #72]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8009996:	42aa      	cmp	r2, r5
 8009998:	d01b      	beq.n	80099d2 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800999a:	2570      	movs	r5, #112	; 0x70
 800999c:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800999e:	680d      	ldr	r5, [r1, #0]
 80099a0:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099a2:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099a4:	6803      	ldr	r3, [r0, #0]
 80099a6:	4a0e      	ldr	r2, [pc, #56]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d005      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80099ac:	4a0d      	ldr	r2, [pc, #52]	; (80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d002      	beq.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80099b2:	4a0d      	ldr	r2, [pc, #52]	; (80099e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d104      	bne.n	80099c2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099b8:	2280      	movs	r2, #128	; 0x80
 80099ba:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099bc:	688a      	ldr	r2, [r1, #8]
 80099be:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80099c0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099c2:	233d      	movs	r3, #61	; 0x3d
 80099c4:	2201      	movs	r2, #1
 80099c6:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80099c8:	3b01      	subs	r3, #1
 80099ca:	2200      	movs	r2, #0
 80099cc:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80099ce:	2000      	movs	r0, #0
}
 80099d0:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099d2:	4d06      	ldr	r5, [pc, #24]	; (80099ec <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80099d4:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099d6:	684d      	ldr	r5, [r1, #4]
 80099d8:	432b      	orrs	r3, r5
 80099da:	e7de      	b.n	800999a <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80099dc:	2002      	movs	r0, #2
 80099de:	e7f7      	b.n	80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80099e0:	40012c00 	.word	0x40012c00
 80099e4:	40000400 	.word	0x40000400
 80099e8:	40014000 	.word	0x40014000
 80099ec:	ff0fffff 	.word	0xff0fffff

080099f0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099f0:	4770      	bx	lr

080099f2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099f2:	4770      	bx	lr

080099f4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80099f4:	4770      	bx	lr
	...

080099f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099f8:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099fe:	2201      	movs	r2, #1
 8009a00:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a04:	6801      	ldr	r1, [r0, #0]
 8009a06:	680b      	ldr	r3, [r1, #0]
 8009a08:	25c0      	movs	r5, #192	; 0xc0
 8009a0a:	43ab      	bics	r3, r5
 8009a0c:	600b      	str	r3, [r1, #0]
 8009a0e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a12:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a16:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a1a:	6802      	ldr	r2, [r0, #0]
 8009a1c:	6893      	ldr	r3, [r2, #8]
 8009a1e:	4c04      	ldr	r4, [pc, #16]	; (8009a30 <UART_EndTxTransfer+0x38>)
 8009a20:	4023      	ands	r3, r4
 8009a22:	6093      	str	r3, [r2, #8]
 8009a24:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a28:	2388      	movs	r3, #136	; 0x88
 8009a2a:	2220      	movs	r2, #32
 8009a2c:	50c2      	str	r2, [r0, r3]
}
 8009a2e:	bd30      	pop	{r4, r5, pc}
 8009a30:	ff7fffff 	.word	0xff7fffff

08009a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a34:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a36:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a40:	6801      	ldr	r1, [r0, #0]
 8009a42:	680b      	ldr	r3, [r1, #0]
 8009a44:	4d12      	ldr	r5, [pc, #72]	; (8009a90 <UART_EndRxTransfer+0x5c>)
 8009a46:	402b      	ands	r3, r5
 8009a48:	600b      	str	r3, [r1, #0]
 8009a4a:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a4e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a52:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a56:	6802      	ldr	r2, [r0, #0]
 8009a58:	6893      	ldr	r3, [r2, #8]
 8009a5a:	4c0e      	ldr	r4, [pc, #56]	; (8009a94 <UART_EndRxTransfer+0x60>)
 8009a5c:	4023      	ands	r3, r4
 8009a5e:	6093      	str	r3, [r2, #8]
 8009a60:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a64:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d006      	beq.n	8009a78 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a6a:	238c      	movs	r3, #140	; 0x8c
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a70:	2300      	movs	r3, #0
 8009a72:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a74:	6743      	str	r3, [r0, #116]	; 0x74
}
 8009a76:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a78:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a7c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a80:	6802      	ldr	r2, [r0, #0]
 8009a82:	6813      	ldr	r3, [r2, #0]
 8009a84:	2410      	movs	r4, #16
 8009a86:	43a3      	bics	r3, r4
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	f381 8810 	msr	PRIMASK, r1
}
 8009a8e:	e7ec      	b.n	8009a6a <UART_EndRxTransfer+0x36>
 8009a90:	fffffedf 	.word	0xfffffedf
 8009a94:	effffffe 	.word	0xeffffffe

08009a98 <HAL_UART_RxHalfCpltCallback>:
}
 8009a98:	4770      	bx	lr

08009a9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a9a:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a9c:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a9e:	2388      	movs	r3, #136	; 0x88
 8009aa0:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	061b      	lsls	r3, r3, #24
 8009aac:	d501      	bpl.n	8009ab2 <UART_DMAError+0x18>
 8009aae:	2a21      	cmp	r2, #33	; 0x21
 8009ab0:	d00e      	beq.n	8009ad0 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	065b      	lsls	r3, r3, #25
 8009ab8:	d501      	bpl.n	8009abe <UART_DMAError+0x24>
 8009aba:	2d22      	cmp	r5, #34	; 0x22
 8009abc:	d00f      	beq.n	8009ade <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009abe:	2290      	movs	r2, #144	; 0x90
 8009ac0:	58a3      	ldr	r3, [r4, r2]
 8009ac2:	2110      	movs	r1, #16
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ac8:	0020      	movs	r0, r4
 8009aca:	f7fb f9ab 	bl	8004e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8009ad0:	2356      	movs	r3, #86	; 0x56
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8009ad6:	0020      	movs	r0, r4
 8009ad8:	f7ff ff8e 	bl	80099f8 <UART_EndTxTransfer>
 8009adc:	e7e9      	b.n	8009ab2 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8009ade:	235e      	movs	r3, #94	; 0x5e
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8009ae4:	0020      	movs	r0, r4
 8009ae6:	f7ff ffa5 	bl	8009a34 <UART_EndRxTransfer>
 8009aea:	e7e8      	b.n	8009abe <UART_DMAError+0x24>

08009aec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009aec:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009aee:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	225e      	movs	r2, #94	; 0x5e
 8009af4:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8009af6:	3a08      	subs	r2, #8
 8009af8:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009afa:	f7fb f993 	bl	8004e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009afe:	bd10      	pop	{r4, pc}

08009b00 <HAL_UARTEx_RxEventCallback>:
}
 8009b00:	4770      	bx	lr
	...

08009b04 <HAL_UART_IRQHandler>:
{
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b08:	6802      	ldr	r2, [r0, #0]
 8009b0a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b0c:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b0e:	6891      	ldr	r1, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b10:	4dbb      	ldr	r5, [pc, #748]	; (8009e00 <HAL_UART_IRQHandler+0x2fc>)
  if (errorflags == 0U)
 8009b12:	422b      	tst	r3, r5
 8009b14:	d10e      	bne.n	8009b34 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b16:	069d      	lsls	r5, r3, #26
 8009b18:	d512      	bpl.n	8009b40 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b1a:	2520      	movs	r5, #32
 8009b1c:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b1e:	2680      	movs	r6, #128	; 0x80
 8009b20:	0576      	lsls	r6, r6, #21
 8009b22:	400e      	ands	r6, r1
 8009b24:	4335      	orrs	r5, r6
 8009b26:	d00b      	beq.n	8009b40 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 8009b28:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d02a      	beq.n	8009b84 <HAL_UART_IRQHandler+0x80>
        huart->RxISR(huart);
 8009b2e:	0020      	movs	r0, r4
 8009b30:	4798      	blx	r3
 8009b32:	e027      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b34:	4eb3      	ldr	r6, [pc, #716]	; (8009e04 <HAL_UART_IRQHandler+0x300>)
 8009b36:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b38:	4db3      	ldr	r5, [pc, #716]	; (8009e08 <HAL_UART_IRQHandler+0x304>)
 8009b3a:	4005      	ands	r5, r0
 8009b3c:	4335      	orrs	r5, r6
 8009b3e:	d122      	bne.n	8009b86 <HAL_UART_IRQHandler+0x82>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b40:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8009b42:	2d01      	cmp	r5, #1
 8009b44:	d100      	bne.n	8009b48 <HAL_UART_IRQHandler+0x44>
 8009b46:	e0ad      	b.n	8009ca4 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b48:	02dd      	lsls	r5, r3, #11
 8009b4a:	d502      	bpl.n	8009b52 <HAL_UART_IRQHandler+0x4e>
 8009b4c:	024d      	lsls	r5, r1, #9
 8009b4e:	d500      	bpl.n	8009b52 <HAL_UART_IRQHandler+0x4e>
 8009b50:	e147      	b.n	8009de2 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009b52:	061a      	lsls	r2, r3, #24
 8009b54:	d507      	bpl.n	8009b66 <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009b56:	2280      	movs	r2, #128	; 0x80
 8009b58:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009b5a:	2580      	movs	r5, #128	; 0x80
 8009b5c:	042d      	lsls	r5, r5, #16
 8009b5e:	4029      	ands	r1, r5
 8009b60:	430a      	orrs	r2, r1
 8009b62:	d000      	beq.n	8009b66 <HAL_UART_IRQHandler+0x62>
 8009b64:	e144      	b.n	8009df0 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b66:	065a      	lsls	r2, r3, #25
 8009b68:	d502      	bpl.n	8009b70 <HAL_UART_IRQHandler+0x6c>
 8009b6a:	0642      	lsls	r2, r0, #25
 8009b6c:	d500      	bpl.n	8009b70 <HAL_UART_IRQHandler+0x6c>
 8009b6e:	e155      	b.n	8009e1c <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009b70:	021a      	lsls	r2, r3, #8
 8009b72:	d502      	bpl.n	8009b7a <HAL_UART_IRQHandler+0x76>
 8009b74:	0042      	lsls	r2, r0, #1
 8009b76:	d500      	bpl.n	8009b7a <HAL_UART_IRQHandler+0x76>
 8009b78:	e165      	b.n	8009e46 <HAL_UART_IRQHandler+0x342>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009b7a:	01db      	lsls	r3, r3, #7
 8009b7c:	d502      	bpl.n	8009b84 <HAL_UART_IRQHandler+0x80>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	da00      	bge.n	8009b84 <HAL_UART_IRQHandler+0x80>
 8009b82:	e164      	b.n	8009e4e <HAL_UART_IRQHandler+0x34a>
}
 8009b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b86:	07dd      	lsls	r5, r3, #31
 8009b88:	d507      	bpl.n	8009b9a <HAL_UART_IRQHandler+0x96>
 8009b8a:	05c5      	lsls	r5, r0, #23
 8009b8c:	d505      	bpl.n	8009b9a <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b8e:	2701      	movs	r7, #1
 8009b90:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b92:	2590      	movs	r5, #144	; 0x90
 8009b94:	5962      	ldr	r2, [r4, r5]
 8009b96:	433a      	orrs	r2, r7
 8009b98:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b9a:	079a      	lsls	r2, r3, #30
 8009b9c:	d50c      	bpl.n	8009bb8 <HAL_UART_IRQHandler+0xb4>
 8009b9e:	07ca      	lsls	r2, r1, #31
 8009ba0:	d516      	bpl.n	8009bd0 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ba2:	6822      	ldr	r2, [r4, #0]
 8009ba4:	2502      	movs	r5, #2
 8009ba6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ba8:	2790      	movs	r7, #144	; 0x90
 8009baa:	59e2      	ldr	r2, [r4, r7]
 8009bac:	3502      	adds	r5, #2
 8009bae:	432a      	orrs	r2, r5
 8009bb0:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bb2:	421d      	tst	r5, r3
 8009bb4:	d104      	bne.n	8009bc0 <HAL_UART_IRQHandler+0xbc>
 8009bb6:	e00b      	b.n	8009bd0 <HAL_UART_IRQHandler+0xcc>
 8009bb8:	075a      	lsls	r2, r3, #29
 8009bba:	d509      	bpl.n	8009bd0 <HAL_UART_IRQHandler+0xcc>
 8009bbc:	07ca      	lsls	r2, r1, #31
 8009bbe:	d507      	bpl.n	8009bd0 <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bc0:	6822      	ldr	r2, [r4, #0]
 8009bc2:	2504      	movs	r5, #4
 8009bc4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bc6:	358c      	adds	r5, #140	; 0x8c
 8009bc8:	5962      	ldr	r2, [r4, r5]
 8009bca:	2702      	movs	r7, #2
 8009bcc:	433a      	orrs	r2, r7
 8009bce:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009bd0:	071a      	lsls	r2, r3, #28
 8009bd2:	d50a      	bpl.n	8009bea <HAL_UART_IRQHandler+0xe6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bd4:	2220      	movs	r2, #32
 8009bd6:	4002      	ands	r2, r0
 8009bd8:	4332      	orrs	r2, r6
 8009bda:	d006      	beq.n	8009bea <HAL_UART_IRQHandler+0xe6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	2608      	movs	r6, #8
 8009be0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009be2:	2590      	movs	r5, #144	; 0x90
 8009be4:	5962      	ldr	r2, [r4, r5]
 8009be6:	4332      	orrs	r2, r6
 8009be8:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009bea:	051a      	lsls	r2, r3, #20
 8009bec:	d50a      	bpl.n	8009c04 <HAL_UART_IRQHandler+0x100>
 8009bee:	0142      	lsls	r2, r0, #5
 8009bf0:	d508      	bpl.n	8009c04 <HAL_UART_IRQHandler+0x100>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bf2:	6822      	ldr	r2, [r4, #0]
 8009bf4:	2580      	movs	r5, #128	; 0x80
 8009bf6:	012d      	lsls	r5, r5, #4
 8009bf8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009bfa:	2590      	movs	r5, #144	; 0x90
 8009bfc:	5962      	ldr	r2, [r4, r5]
 8009bfe:	2620      	movs	r6, #32
 8009c00:	4332      	orrs	r2, r6
 8009c02:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c04:	2290      	movs	r2, #144	; 0x90
 8009c06:	58a2      	ldr	r2, [r4, r2]
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	d0bb      	beq.n	8009b84 <HAL_UART_IRQHandler+0x80>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c0c:	069b      	lsls	r3, r3, #26
 8009c0e:	d50b      	bpl.n	8009c28 <HAL_UART_IRQHandler+0x124>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c10:	2320      	movs	r3, #32
 8009c12:	4003      	ands	r3, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c14:	2280      	movs	r2, #128	; 0x80
 8009c16:	0552      	lsls	r2, r2, #21
 8009c18:	400a      	ands	r2, r1
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	d004      	beq.n	8009c28 <HAL_UART_IRQHandler+0x124>
        if (huart->RxISR != NULL)
 8009c1e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <HAL_UART_IRQHandler+0x124>
          huart->RxISR(huart);
 8009c24:	0020      	movs	r0, r4
 8009c26:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8009c28:	2390      	movs	r3, #144	; 0x90
 8009c2a:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	689a      	ldr	r2, [r3, #8]
 8009c30:	2340      	movs	r3, #64	; 0x40
 8009c32:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c34:	2228      	movs	r2, #40	; 0x28
 8009c36:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	d02c      	beq.n	8009c96 <HAL_UART_IRQHandler+0x192>
        UART_EndRxTransfer(huart);
 8009c3c:	0020      	movs	r0, r4
 8009c3e:	f7ff fef9 	bl	8009a34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	065b      	lsls	r3, r3, #25
 8009c48:	d521      	bpl.n	8009c8e <HAL_UART_IRQHandler+0x18a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c4a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c54:	6822      	ldr	r2, [r4, #0]
 8009c56:	6893      	ldr	r3, [r2, #8]
 8009c58:	2040      	movs	r0, #64	; 0x40
 8009c5a:	4383      	bics	r3, r0
 8009c5c:	6093      	str	r3, [r2, #8]
 8009c5e:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8009c62:	2380      	movs	r3, #128	; 0x80
 8009c64:	58e3      	ldr	r3, [r4, r3]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00d      	beq.n	8009c86 <HAL_UART_IRQHandler+0x182>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c6a:	4a68      	ldr	r2, [pc, #416]	; (8009e0c <HAL_UART_IRQHandler+0x308>)
 8009c6c:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c6e:	2380      	movs	r3, #128	; 0x80
 8009c70:	58e0      	ldr	r0, [r4, r3]
 8009c72:	f7fd fe59 	bl	8007928 <HAL_DMA_Abort_IT>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d100      	bne.n	8009c7c <HAL_UART_IRQHandler+0x178>
 8009c7a:	e783      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c7c:	2380      	movs	r3, #128	; 0x80
 8009c7e:	58e0      	ldr	r0, [r4, r3]
 8009c80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c82:	4798      	blx	r3
 8009c84:	e77e      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
            HAL_UART_ErrorCallback(huart);
 8009c86:	0020      	movs	r0, r4
 8009c88:	f7fb f8cc 	bl	8004e24 <HAL_UART_ErrorCallback>
 8009c8c:	e77a      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
          HAL_UART_ErrorCallback(huart);
 8009c8e:	0020      	movs	r0, r4
 8009c90:	f7fb f8c8 	bl	8004e24 <HAL_UART_ErrorCallback>
 8009c94:	e776      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
        HAL_UART_ErrorCallback(huart);
 8009c96:	0020      	movs	r0, r4
 8009c98:	f7fb f8c4 	bl	8004e24 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c9c:	2390      	movs	r3, #144	; 0x90
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	50e2      	str	r2, [r4, r3]
 8009ca2:	e76f      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009ca4:	06dd      	lsls	r5, r3, #27
 8009ca6:	d400      	bmi.n	8009caa <HAL_UART_IRQHandler+0x1a6>
 8009ca8:	e74e      	b.n	8009b48 <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009caa:	06c5      	lsls	r5, r0, #27
 8009cac:	d400      	bmi.n	8009cb0 <HAL_UART_IRQHandler+0x1ac>
 8009cae:	e74b      	b.n	8009b48 <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	065b      	lsls	r3, r3, #25
 8009cba:	d555      	bpl.n	8009d68 <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cbc:	2380      	movs	r3, #128	; 0x80
 8009cbe:	58e2      	ldr	r2, [r4, r3]
 8009cc0:	6813      	ldr	r3, [r2, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d100      	bne.n	8009ccc <HAL_UART_IRQHandler+0x1c8>
 8009cca:	e75b      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ccc:	215c      	movs	r1, #92	; 0x5c
 8009cce:	5a61      	ldrh	r1, [r4, r1]
 8009cd0:	4299      	cmp	r1, r3
 8009cd2:	d800      	bhi.n	8009cd6 <HAL_UART_IRQHandler+0x1d2>
 8009cd4:	e756      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
        huart->RxXferCount = nb_remaining_rx_data;
 8009cd6:	215e      	movs	r1, #94	; 0x5e
 8009cd8:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009cda:	6813      	ldr	r3, [r2, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	069b      	lsls	r3, r3, #26
 8009ce0:	d50b      	bpl.n	8009cfa <HAL_UART_IRQHandler+0x1f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ce6:	335c      	adds	r3, #92	; 0x5c
 8009ce8:	5ae3      	ldrh	r3, [r4, r3]
 8009cea:	225c      	movs	r2, #92	; 0x5c
 8009cec:	5aa1      	ldrh	r1, [r4, r2]
 8009cee:	1ac9      	subs	r1, r1, r3
 8009cf0:	b289      	uxth	r1, r1
 8009cf2:	0020      	movs	r0, r4
 8009cf4:	f7ff ff04 	bl	8009b00 <HAL_UARTEx_RxEventCallback>
 8009cf8:	e744      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cfa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d04:	6821      	ldr	r1, [r4, #0]
 8009d06:	680a      	ldr	r2, [r1, #0]
 8009d08:	4d41      	ldr	r5, [pc, #260]	; (8009e10 <HAL_UART_IRQHandler+0x30c>)
 8009d0a:	402a      	ands	r2, r5
 8009d0c:	600a      	str	r2, [r1, #0]
 8009d0e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d12:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d16:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d1a:	6821      	ldr	r1, [r4, #0]
 8009d1c:	688a      	ldr	r2, [r1, #8]
 8009d1e:	439a      	bics	r2, r3
 8009d20:	608a      	str	r2, [r1, #8]
 8009d22:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d26:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d2a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d2e:	6821      	ldr	r1, [r4, #0]
 8009d30:	688a      	ldr	r2, [r1, #8]
 8009d32:	3542      	adds	r5, #66	; 0x42
 8009d34:	35ff      	adds	r5, #255	; 0xff
 8009d36:	43aa      	bics	r2, r5
 8009d38:	608a      	str	r2, [r1, #8]
 8009d3a:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8009d3e:	228c      	movs	r2, #140	; 0x8c
 8009d40:	2120      	movs	r1, #32
 8009d42:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d44:	2200      	movs	r2, #0
 8009d46:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d48:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d4c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d50:	6822      	ldr	r2, [r4, #0]
 8009d52:	6813      	ldr	r3, [r2, #0]
 8009d54:	2010      	movs	r0, #16
 8009d56:	4383      	bics	r3, r0
 8009d58:	6013      	str	r3, [r2, #0]
 8009d5a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d5e:	2380      	movs	r3, #128	; 0x80
 8009d60:	58e0      	ldr	r0, [r4, r3]
 8009d62:	f7fd fda1 	bl	80078a8 <HAL_DMA_Abort>
 8009d66:	e7bc      	b.n	8009ce2 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d68:	215e      	movs	r1, #94	; 0x5e
 8009d6a:	5a62      	ldrh	r2, [r4, r1]
 8009d6c:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8009d6e:	5a63      	ldrh	r3, [r4, r1]
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d100      	bne.n	8009d78 <HAL_UART_IRQHandler+0x274>
 8009d76:	e705      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d78:	235c      	movs	r3, #92	; 0x5c
 8009d7a:	5ae1      	ldrh	r1, [r4, r3]
 8009d7c:	1a89      	subs	r1, r1, r2
 8009d7e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8009d80:	2900      	cmp	r1, #0
 8009d82:	d100      	bne.n	8009d86 <HAL_UART_IRQHandler+0x282>
 8009d84:	e6fe      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d86:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d8a:	3b5b      	subs	r3, #91	; 0x5b
 8009d8c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d90:	6820      	ldr	r0, [r4, #0]
 8009d92:	6802      	ldr	r2, [r0, #0]
 8009d94:	4e1f      	ldr	r6, [pc, #124]	; (8009e14 <HAL_UART_IRQHandler+0x310>)
 8009d96:	4032      	ands	r2, r6
 8009d98:	6002      	str	r2, [r0, #0]
 8009d9a:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d9e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009da2:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009da6:	6820      	ldr	r0, [r4, #0]
 8009da8:	6882      	ldr	r2, [r0, #8]
 8009daa:	4e1b      	ldr	r6, [pc, #108]	; (8009e18 <HAL_UART_IRQHandler+0x314>)
 8009dac:	4032      	ands	r2, r6
 8009dae:	6082      	str	r2, [r0, #8]
 8009db0:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8009db4:	228c      	movs	r2, #140	; 0x8c
 8009db6:	2020      	movs	r0, #32
 8009db8:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dba:	2200      	movs	r2, #0
 8009dbc:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8009dbe:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dc0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dc4:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dc8:	6822      	ldr	r2, [r4, #0]
 8009dca:	6813      	ldr	r3, [r2, #0]
 8009dcc:	2510      	movs	r5, #16
 8009dce:	43ab      	bics	r3, r5
 8009dd0:	6013      	str	r3, [r2, #0]
 8009dd2:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009dda:	0020      	movs	r0, r4
 8009ddc:	f7ff fe90 	bl	8009b00 <HAL_UARTEx_RxEventCallback>
 8009de0:	e6d0      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009de2:	2380      	movs	r3, #128	; 0x80
 8009de4:	035b      	lsls	r3, r3, #13
 8009de6:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8009de8:	0020      	movs	r0, r4
 8009dea:	f000 fcd1 	bl	800a790 <HAL_UARTEx_WakeupCallback>
    return;
 8009dee:	e6c9      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
    if (huart->TxISR != NULL)
 8009df0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d100      	bne.n	8009df8 <HAL_UART_IRQHandler+0x2f4>
 8009df6:	e6c5      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
      huart->TxISR(huart);
 8009df8:	0020      	movs	r0, r4
 8009dfa:	4798      	blx	r3
 8009dfc:	e6c2      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	0000080f 	.word	0x0000080f
 8009e04:	10000001 	.word	0x10000001
 8009e08:	04000120 	.word	0x04000120
 8009e0c:	08009aed 	.word	0x08009aed
 8009e10:	fffffeff 	.word	0xfffffeff
 8009e14:	fffffedf 	.word	0xfffffedf
 8009e18:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e1c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e20:	2301      	movs	r3, #1
 8009e22:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	6813      	ldr	r3, [r2, #0]
 8009e2a:	2040      	movs	r0, #64	; 0x40
 8009e2c:	4383      	bics	r3, r0
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e34:	2388      	movs	r3, #136	; 0x88
 8009e36:	2220      	movs	r2, #32
 8009e38:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	67a3      	str	r3, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e3e:	0020      	movs	r0, r4
 8009e40:	f7fa ffee 	bl	8004e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e44:	e69e      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e46:	0020      	movs	r0, r4
 8009e48:	f000 fca4 	bl	800a794 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8009e4c:	e69a      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e4e:	0020      	movs	r0, r4
 8009e50:	f000 fc9f 	bl	800a792 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8009e54:	e696      	b.n	8009b84 <HAL_UART_IRQHandler+0x80>
 8009e56:	46c0      	nop			; (mov r8, r8)

08009e58 <UART_DMARxHalfCplt>:
{
 8009e58:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e60:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d002      	beq.n	8009e6c <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e66:	f7ff fe17 	bl	8009a98 <HAL_UART_RxHalfCpltCallback>
}
 8009e6a:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e6c:	335b      	adds	r3, #91	; 0x5b
 8009e6e:	5ac1      	ldrh	r1, [r0, r3]
 8009e70:	0849      	lsrs	r1, r1, #1
 8009e72:	f7ff fe45 	bl	8009b00 <HAL_UARTEx_RxEventCallback>
 8009e76:	e7f8      	b.n	8009e6a <UART_DMARxHalfCplt+0x12>

08009e78 <UART_DMAReceiveCplt>:
{
 8009e78:	b570      	push	{r4, r5, r6, lr}
 8009e7a:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	069b      	lsls	r3, r3, #26
 8009e84:	d429      	bmi.n	8009eda <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8009e86:	235e      	movs	r3, #94	; 0x5e
 8009e88:	2200      	movs	r2, #0
 8009e8a:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e8c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e90:	3b5d      	subs	r3, #93	; 0x5d
 8009e92:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e96:	6801      	ldr	r1, [r0, #0]
 8009e98:	680a      	ldr	r2, [r1, #0]
 8009e9a:	4d1c      	ldr	r5, [pc, #112]	; (8009f0c <UART_DMAReceiveCplt+0x94>)
 8009e9c:	402a      	ands	r2, r5
 8009e9e:	600a      	str	r2, [r1, #0]
 8009ea0:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ea4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ea8:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eac:	6801      	ldr	r1, [r0, #0]
 8009eae:	688a      	ldr	r2, [r1, #8]
 8009eb0:	439a      	bics	r2, r3
 8009eb2:	608a      	str	r2, [r1, #8]
 8009eb4:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eb8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ebc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ec0:	6802      	ldr	r2, [r0, #0]
 8009ec2:	6893      	ldr	r3, [r2, #8]
 8009ec4:	2440      	movs	r4, #64	; 0x40
 8009ec6:	43a3      	bics	r3, r4
 8009ec8:	6093      	str	r3, [r2, #8]
 8009eca:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8009ece:	238c      	movs	r3, #140	; 0x8c
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d007      	beq.n	8009eea <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eda:	2300      	movs	r3, #0
 8009edc:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ede:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d00e      	beq.n	8009f02 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8009ee4:	f7fb fe92 	bl	8005c0c <HAL_UART_RxCpltCallback>
}
 8009ee8:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eee:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ef2:	6802      	ldr	r2, [r0, #0]
 8009ef4:	6813      	ldr	r3, [r2, #0]
 8009ef6:	3c30      	subs	r4, #48	; 0x30
 8009ef8:	43a3      	bics	r3, r4
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	f381 8810 	msr	PRIMASK, r1
}
 8009f00:	e7eb      	b.n	8009eda <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f02:	335b      	adds	r3, #91	; 0x5b
 8009f04:	5ac1      	ldrh	r1, [r0, r3]
 8009f06:	f7ff fdfb 	bl	8009b00 <HAL_UARTEx_RxEventCallback>
 8009f0a:	e7ed      	b.n	8009ee8 <UART_DMAReceiveCplt+0x70>
 8009f0c:	fffffeff 	.word	0xfffffeff

08009f10 <UART_SetConfig>:
{
 8009f10:	b570      	push	{r4, r5, r6, lr}
 8009f12:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f14:	6801      	ldr	r1, [r0, #0]
 8009f16:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f18:	6883      	ldr	r3, [r0, #8]
 8009f1a:	6900      	ldr	r0, [r0, #16]
 8009f1c:	4303      	orrs	r3, r0
 8009f1e:	6960      	ldr	r0, [r4, #20]
 8009f20:	4303      	orrs	r3, r0
 8009f22:	69e0      	ldr	r0, [r4, #28]
 8009f24:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f26:	4873      	ldr	r0, [pc, #460]	; (800a0f4 <UART_SetConfig+0x1e4>)
 8009f28:	4002      	ands	r2, r0
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f2e:	6822      	ldr	r2, [r4, #0]
 8009f30:	6853      	ldr	r3, [r2, #4]
 8009f32:	4971      	ldr	r1, [pc, #452]	; (800a0f8 <UART_SetConfig+0x1e8>)
 8009f34:	400b      	ands	r3, r1
 8009f36:	68e1      	ldr	r1, [r4, #12]
 8009f38:	430b      	orrs	r3, r1
 8009f3a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f3c:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f3e:	6821      	ldr	r1, [r4, #0]
 8009f40:	688a      	ldr	r2, [r1, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8009f42:	6a20      	ldr	r0, [r4, #32]
 8009f44:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f46:	486d      	ldr	r0, [pc, #436]	; (800a0fc <UART_SetConfig+0x1ec>)
 8009f48:	4002      	ands	r2, r0
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009f52:	210f      	movs	r1, #15
 8009f54:	438b      	bics	r3, r1
 8009f56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	4a68      	ldr	r2, [pc, #416]	; (800a100 <UART_SetConfig+0x1f0>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d01e      	beq.n	8009fa2 <UART_SetConfig+0x92>
 8009f64:	4a67      	ldr	r2, [pc, #412]	; (800a104 <UART_SetConfig+0x1f4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d030      	beq.n	8009fcc <UART_SetConfig+0xbc>
 8009f6a:	4a67      	ldr	r2, [pc, #412]	; (800a108 <UART_SetConfig+0x1f8>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d100      	bne.n	8009f72 <UART_SetConfig+0x62>
 8009f70:	e08c      	b.n	800a08c <UART_SetConfig+0x17c>
 8009f72:	4a66      	ldr	r2, [pc, #408]	; (800a10c <UART_SetConfig+0x1fc>)
 8009f74:	4694      	mov	ip, r2
 8009f76:	4463      	add	r3, ip
 8009f78:	1e5a      	subs	r2, r3, #1
 8009f7a:	4193      	sbcs	r3, r2
 8009f7c:	011b      	lsls	r3, r3, #4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f7e:	2280      	movs	r2, #128	; 0x80
 8009f80:	0212      	lsls	r2, r2, #8
 8009f82:	69e1      	ldr	r1, [r4, #28]
 8009f84:	4291      	cmp	r1, r2
 8009f86:	d100      	bne.n	8009f8a <UART_SetConfig+0x7a>
 8009f88:	e0ab      	b.n	800a0e2 <UART_SetConfig+0x1d2>
    switch (clocksource)
 8009f8a:	2001      	movs	r0, #1
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d944      	bls.n	800a01a <UART_SetConfig+0x10a>
  huart->NbTxDataToProcess = 1;
 8009f90:	2301      	movs	r3, #1
 8009f92:	226a      	movs	r2, #106	; 0x6a
 8009f94:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8009f96:	3a02      	subs	r2, #2
 8009f98:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8009f9e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fa2:	4b5b      	ldr	r3, [pc, #364]	; (800a110 <UART_SetConfig+0x200>)
 8009fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	4013      	ands	r3, r2
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d067      	beq.n	800a07e <UART_SetConfig+0x16e>
 8009fae:	d85f      	bhi.n	800a070 <UART_SetConfig+0x160>
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02a      	beq.n	800a00a <UART_SetConfig+0xfa>
        ret = HAL_ERROR;
 8009fb4:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d1ea      	bne.n	8009f90 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fba:	2380      	movs	r3, #128	; 0x80
 8009fbc:	021b      	lsls	r3, r3, #8
 8009fbe:	69e2      	ldr	r2, [r4, #28]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d014      	beq.n	8009fee <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetSysClockFreq();
 8009fc4:	f7fe fd3c 	bl	8008a40 <HAL_RCC_GetSysClockFreq>
 8009fc8:	0003      	movs	r3, r0
        break;
 8009fca:	e02b      	b.n	800a024 <UART_SetConfig+0x114>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fcc:	4b50      	ldr	r3, [pc, #320]	; (800a110 <UART_SetConfig+0x200>)
 8009fce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fd0:	230c      	movs	r3, #12
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d044      	beq.n	800a062 <UART_SetConfig+0x152>
 8009fd8:	d80d      	bhi.n	8009ff6 <UART_SetConfig+0xe6>
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d017      	beq.n	800a00e <UART_SetConfig+0xfe>
        ret = HAL_ERROR;
 8009fde:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	d1d5      	bne.n	8009f90 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fe4:	2380      	movs	r3, #128	; 0x80
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	69e2      	ldr	r2, [r4, #28]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d1ea      	bne.n	8009fc4 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8009fee:	f7fe fd27 	bl	8008a40 <HAL_RCC_GetSysClockFreq>
 8009ff2:	0003      	movs	r3, r0
        break;
 8009ff4:	e052      	b.n	800a09c <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 8009ff6:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ff8:	2b0c      	cmp	r3, #12
 8009ffa:	d1c9      	bne.n	8009f90 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ffc:	69e3      	ldr	r3, [r4, #28]
 8009ffe:	2280      	movs	r2, #128	; 0x80
 800a000:	0212      	lsls	r2, r2, #8
 800a002:	4293      	cmp	r3, r2
 800a004:	d04e      	beq.n	800a0a4 <UART_SetConfig+0x194>
        pclk = (uint32_t) LSE_VALUE;
 800a006:	0013      	movs	r3, r2
 800a008:	e00f      	b.n	800a02a <UART_SetConfig+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a00a:	2300      	movs	r3, #0
 800a00c:	e7b7      	b.n	8009f7e <UART_SetConfig+0x6e>
 800a00e:	2300      	movs	r3, #0
 800a010:	e7b5      	b.n	8009f7e <UART_SetConfig+0x6e>
        pclk = (uint32_t) HSI_VALUE;
 800a012:	4b40      	ldr	r3, [pc, #256]	; (800a114 <UART_SetConfig+0x204>)
 800a014:	e046      	b.n	800a0a4 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a016:	4b3f      	ldr	r3, [pc, #252]	; (800a114 <UART_SetConfig+0x204>)
 800a018:	e044      	b.n	800a0a4 <UART_SetConfig+0x194>
    switch (clocksource)
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d11f      	bne.n	800a05e <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a01e:	f7fe fe39 	bl	8008c94 <HAL_RCC_GetPCLK1Freq>
 800a022:	0003      	movs	r3, r0
    if (pclk != 0U)
 800a024:	2000      	movs	r0, #0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0b2      	beq.n	8009f90 <UART_SetConfig+0x80>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a02a:	6865      	ldr	r5, [r4, #4]
 800a02c:	4a3a      	ldr	r2, [pc, #232]	; (800a118 <UART_SetConfig+0x208>)
 800a02e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a030:	0049      	lsls	r1, r1, #1
 800a032:	5a89      	ldrh	r1, [r1, r2]
 800a034:	0018      	movs	r0, r3
 800a036:	f7f6 f883 	bl	8000140 <__udivsi3>
 800a03a:	086b      	lsrs	r3, r5, #1
 800a03c:	18c0      	adds	r0, r0, r3
 800a03e:	0029      	movs	r1, r5
 800a040:	f7f6 f87e 	bl	8000140 <__udivsi3>
 800a044:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a046:	0001      	movs	r1, r0
 800a048:	3910      	subs	r1, #16
 800a04a:	4a34      	ldr	r2, [pc, #208]	; (800a11c <UART_SetConfig+0x20c>)
        ret = HAL_ERROR;
 800a04c:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a04e:	4291      	cmp	r1, r2
 800a050:	d89e      	bhi.n	8009f90 <UART_SetConfig+0x80>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a052:	6822      	ldr	r2, [r4, #0]
 800a054:	041b      	lsls	r3, r3, #16
 800a056:	0c1b      	lsrs	r3, r3, #16
 800a058:	60d3      	str	r3, [r2, #12]
 800a05a:	2000      	movs	r0, #0
 800a05c:	e798      	b.n	8009f90 <UART_SetConfig+0x80>
    switch (clocksource)
 800a05e:	2001      	movs	r0, #1
 800a060:	e796      	b.n	8009f90 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a062:	2380      	movs	r3, #128	; 0x80
 800a064:	021b      	lsls	r3, r3, #8
 800a066:	69e2      	ldr	r2, [r4, #28]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d0d2      	beq.n	800a012 <UART_SetConfig+0x102>
 800a06c:	4b29      	ldr	r3, [pc, #164]	; (800a114 <UART_SetConfig+0x204>)
 800a06e:	e7dc      	b.n	800a02a <UART_SetConfig+0x11a>
 800a070:	69e3      	ldr	r3, [r4, #28]
 800a072:	2280      	movs	r2, #128	; 0x80
 800a074:	0212      	lsls	r2, r2, #8
 800a076:	4293      	cmp	r3, r2
 800a078:	d014      	beq.n	800a0a4 <UART_SetConfig+0x194>
        pclk = (uint32_t) LSE_VALUE;
 800a07a:	0013      	movs	r3, r2
 800a07c:	e7d5      	b.n	800a02a <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a07e:	2380      	movs	r3, #128	; 0x80
 800a080:	021b      	lsls	r3, r3, #8
 800a082:	69e2      	ldr	r2, [r4, #28]
 800a084:	429a      	cmp	r2, r3
 800a086:	d0c6      	beq.n	800a016 <UART_SetConfig+0x106>
        pclk = (uint32_t) HSI_VALUE;
 800a088:	4b22      	ldr	r3, [pc, #136]	; (800a114 <UART_SetConfig+0x204>)
 800a08a:	e7ce      	b.n	800a02a <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a08c:	2380      	movs	r3, #128	; 0x80
 800a08e:	021b      	lsls	r3, r3, #8
 800a090:	69e2      	ldr	r2, [r4, #28]
 800a092:	429a      	cmp	r2, r3
 800a094:	d1c3      	bne.n	800a01e <UART_SetConfig+0x10e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800a096:	f7fe fdfd 	bl	8008c94 <HAL_RCC_GetPCLK1Freq>
 800a09a:	0003      	movs	r3, r0
    if (pclk != 0U)
 800a09c:	2000      	movs	r0, #0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d100      	bne.n	800a0a4 <UART_SetConfig+0x194>
 800a0a2:	e775      	b.n	8009f90 <UART_SetConfig+0x80>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0a4:	6865      	ldr	r5, [r4, #4]
 800a0a6:	4a1c      	ldr	r2, [pc, #112]	; (800a118 <UART_SetConfig+0x208>)
 800a0a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a0aa:	0049      	lsls	r1, r1, #1
 800a0ac:	5a89      	ldrh	r1, [r1, r2]
 800a0ae:	0018      	movs	r0, r3
 800a0b0:	f7f6 f846 	bl	8000140 <__udivsi3>
 800a0b4:	0040      	lsls	r0, r0, #1
 800a0b6:	086b      	lsrs	r3, r5, #1
 800a0b8:	18c0      	adds	r0, r0, r3
 800a0ba:	0029      	movs	r1, r5
 800a0bc:	f7f6 f840 	bl	8000140 <__udivsi3>
 800a0c0:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0c2:	0001      	movs	r1, r0
 800a0c4:	3910      	subs	r1, #16
 800a0c6:	4a15      	ldr	r2, [pc, #84]	; (800a11c <UART_SetConfig+0x20c>)
        ret = HAL_ERROR;
 800a0c8:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0ca:	4291      	cmp	r1, r2
 800a0cc:	d900      	bls.n	800a0d0 <UART_SetConfig+0x1c0>
 800a0ce:	e75f      	b.n	8009f90 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0d0:	4a13      	ldr	r2, [pc, #76]	; (800a120 <UART_SetConfig+0x210>)
 800a0d2:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 800a0d4:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0d6:	071b      	lsls	r3, r3, #28
 800a0d8:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	60cb      	str	r3, [r1, #12]
 800a0de:	2000      	movs	r0, #0
 800a0e0:	e756      	b.n	8009f90 <UART_SetConfig+0x80>
    switch (clocksource)
 800a0e2:	2001      	movs	r0, #1
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d900      	bls.n	800a0ea <UART_SetConfig+0x1da>
 800a0e8:	e752      	b.n	8009f90 <UART_SetConfig+0x80>
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d000      	beq.n	800a0f2 <UART_SetConfig+0x1e2>
 800a0f0:	e74e      	b.n	8009f90 <UART_SetConfig+0x80>
 800a0f2:	e7d0      	b.n	800a096 <UART_SetConfig+0x186>
 800a0f4:	cfff69f3 	.word	0xcfff69f3
 800a0f8:	ffffcfff 	.word	0xffffcfff
 800a0fc:	11fff4ff 	.word	0x11fff4ff
 800a100:	40013800 	.word	0x40013800
 800a104:	40004400 	.word	0x40004400
 800a108:	40004800 	.word	0x40004800
 800a10c:	bfffb400 	.word	0xbfffb400
 800a110:	40021000 	.word	0x40021000
 800a114:	00f42400 	.word	0x00f42400
 800a118:	08012ea4 	.word	0x08012ea4
 800a11c:	0000ffef 	.word	0x0000ffef
 800a120:	0000fff0 	.word	0x0000fff0

0800a124 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a124:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a126:	07db      	lsls	r3, r3, #31
 800a128:	d506      	bpl.n	800a138 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a12a:	6802      	ldr	r2, [r0, #0]
 800a12c:	6853      	ldr	r3, [r2, #4]
 800a12e:	492c      	ldr	r1, [pc, #176]	; (800a1e0 <UART_AdvFeatureConfig+0xbc>)
 800a130:	400b      	ands	r3, r1
 800a132:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a134:	430b      	orrs	r3, r1
 800a136:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a138:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a13a:	079b      	lsls	r3, r3, #30
 800a13c:	d506      	bpl.n	800a14c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a13e:	6802      	ldr	r2, [r0, #0]
 800a140:	6853      	ldr	r3, [r2, #4]
 800a142:	4928      	ldr	r1, [pc, #160]	; (800a1e4 <UART_AdvFeatureConfig+0xc0>)
 800a144:	400b      	ands	r3, r1
 800a146:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a148:	430b      	orrs	r3, r1
 800a14a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a14c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a14e:	075b      	lsls	r3, r3, #29
 800a150:	d506      	bpl.n	800a160 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a152:	6802      	ldr	r2, [r0, #0]
 800a154:	6853      	ldr	r3, [r2, #4]
 800a156:	4924      	ldr	r1, [pc, #144]	; (800a1e8 <UART_AdvFeatureConfig+0xc4>)
 800a158:	400b      	ands	r3, r1
 800a15a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800a15c:	430b      	orrs	r3, r1
 800a15e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a160:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a162:	071b      	lsls	r3, r3, #28
 800a164:	d506      	bpl.n	800a174 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a166:	6802      	ldr	r2, [r0, #0]
 800a168:	6853      	ldr	r3, [r2, #4]
 800a16a:	4920      	ldr	r1, [pc, #128]	; (800a1ec <UART_AdvFeatureConfig+0xc8>)
 800a16c:	400b      	ands	r3, r1
 800a16e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800a170:	430b      	orrs	r3, r1
 800a172:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a174:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a176:	06db      	lsls	r3, r3, #27
 800a178:	d506      	bpl.n	800a188 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a17a:	6802      	ldr	r2, [r0, #0]
 800a17c:	6893      	ldr	r3, [r2, #8]
 800a17e:	491c      	ldr	r1, [pc, #112]	; (800a1f0 <UART_AdvFeatureConfig+0xcc>)
 800a180:	400b      	ands	r3, r1
 800a182:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800a184:	430b      	orrs	r3, r1
 800a186:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a188:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a18a:	069b      	lsls	r3, r3, #26
 800a18c:	d506      	bpl.n	800a19c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a18e:	6802      	ldr	r2, [r0, #0]
 800a190:	6893      	ldr	r3, [r2, #8]
 800a192:	4918      	ldr	r1, [pc, #96]	; (800a1f4 <UART_AdvFeatureConfig+0xd0>)
 800a194:	400b      	ands	r3, r1
 800a196:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a198:	430b      	orrs	r3, r1
 800a19a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a19c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a19e:	065b      	lsls	r3, r3, #25
 800a1a0:	d50b      	bpl.n	800a1ba <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1a2:	6802      	ldr	r2, [r0, #0]
 800a1a4:	6853      	ldr	r3, [r2, #4]
 800a1a6:	4914      	ldr	r1, [pc, #80]	; (800a1f8 <UART_AdvFeatureConfig+0xd4>)
 800a1a8:	400b      	ands	r3, r1
 800a1aa:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1b0:	2380      	movs	r3, #128	; 0x80
 800a1b2:	035b      	lsls	r3, r3, #13
 800a1b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d00a      	beq.n	800a1d0 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a1bc:	061b      	lsls	r3, r3, #24
 800a1be:	d506      	bpl.n	800a1ce <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1c0:	6802      	ldr	r2, [r0, #0]
 800a1c2:	6853      	ldr	r3, [r2, #4]
 800a1c4:	490d      	ldr	r1, [pc, #52]	; (800a1fc <UART_AdvFeatureConfig+0xd8>)
 800a1c6:	400b      	ands	r3, r1
 800a1c8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a1ca:	430b      	orrs	r3, r1
 800a1cc:	6053      	str	r3, [r2, #4]
}
 800a1ce:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1d0:	6802      	ldr	r2, [r0, #0]
 800a1d2:	6853      	ldr	r3, [r2, #4]
 800a1d4:	490a      	ldr	r1, [pc, #40]	; (800a200 <UART_AdvFeatureConfig+0xdc>)
 800a1d6:	400b      	ands	r3, r1
 800a1d8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800a1da:	430b      	orrs	r3, r1
 800a1dc:	6053      	str	r3, [r2, #4]
 800a1de:	e7ec      	b.n	800a1ba <UART_AdvFeatureConfig+0x96>
 800a1e0:	fffdffff 	.word	0xfffdffff
 800a1e4:	fffeffff 	.word	0xfffeffff
 800a1e8:	fffbffff 	.word	0xfffbffff
 800a1ec:	ffff7fff 	.word	0xffff7fff
 800a1f0:	ffffefff 	.word	0xffffefff
 800a1f4:	ffffdfff 	.word	0xffffdfff
 800a1f8:	ffefffff 	.word	0xffefffff
 800a1fc:	fff7ffff 	.word	0xfff7ffff
 800a200:	ff9fffff 	.word	0xff9fffff

0800a204 <UART_WaitOnFlagUntilTimeout>:
{
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	46de      	mov	lr, fp
 800a208:	4657      	mov	r7, sl
 800a20a:	464e      	mov	r6, r9
 800a20c:	4645      	mov	r5, r8
 800a20e:	b5e0      	push	{r5, r6, r7, lr}
 800a210:	4680      	mov	r8, r0
 800a212:	000d      	movs	r5, r1
 800a214:	0016      	movs	r6, r2
 800a216:	4699      	mov	r9, r3
 800a218:	9f0a      	ldr	r7, [sp, #40]	; 0x28
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a21a:	2304      	movs	r3, #4
 800a21c:	469a      	mov	sl, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a21e:	2380      	movs	r3, #128	; 0x80
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	469b      	mov	fp, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a224:	4643      	mov	r3, r8
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	69dc      	ldr	r4, [r3, #28]
 800a22a:	402c      	ands	r4, r5
 800a22c:	1b64      	subs	r4, r4, r5
 800a22e:	4262      	negs	r2, r4
 800a230:	4154      	adcs	r4, r2
 800a232:	42b4      	cmp	r4, r6
 800a234:	d15e      	bne.n	800a2f4 <UART_WaitOnFlagUntilTimeout+0xf0>
    if (Timeout != HAL_MAX_DELAY)
 800a236:	1c7a      	adds	r2, r7, #1
 800a238:	d0f6      	beq.n	800a228 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a23a:	f7fc fe6b 	bl	8006f14 <HAL_GetTick>
 800a23e:	464b      	mov	r3, r9
 800a240:	1ac0      	subs	r0, r0, r3
 800a242:	42b8      	cmp	r0, r7
 800a244:	d833      	bhi.n	800a2ae <UART_WaitOnFlagUntilTimeout+0xaa>
 800a246:	2f00      	cmp	r7, #0
 800a248:	d031      	beq.n	800a2ae <UART_WaitOnFlagUntilTimeout+0xaa>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a24a:	4643      	mov	r3, r8
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	4651      	mov	r1, sl
 800a252:	4211      	tst	r1, r2
 800a254:	d0e6      	beq.n	800a224 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a256:	69da      	ldr	r2, [r3, #28]
 800a258:	4659      	mov	r1, fp
 800a25a:	420a      	tst	r2, r1
 800a25c:	d0e2      	beq.n	800a224 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a25e:	2280      	movs	r2, #128	; 0x80
 800a260:	0112      	lsls	r2, r2, #4
 800a262:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a264:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a268:	2201      	movs	r2, #1
 800a26a:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a26e:	4643      	mov	r3, r8
 800a270:	6819      	ldr	r1, [r3, #0]
 800a272:	680b      	ldr	r3, [r1, #0]
 800a274:	4c23      	ldr	r4, [pc, #140]	; (800a304 <UART_WaitOnFlagUntilTimeout+0x100>)
 800a276:	4023      	ands	r3, r4
 800a278:	600b      	str	r3, [r1, #0]
 800a27a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a27e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a282:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a286:	4643      	mov	r3, r8
 800a288:	6819      	ldr	r1, [r3, #0]
 800a28a:	688b      	ldr	r3, [r1, #8]
 800a28c:	4393      	bics	r3, r2
 800a28e:	608b      	str	r3, [r1, #8]
 800a290:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800a294:	2320      	movs	r3, #32
 800a296:	3287      	adds	r2, #135	; 0x87
 800a298:	4641      	mov	r1, r8
 800a29a:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800a29c:	3204      	adds	r2, #4
 800a29e:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2a0:	3204      	adds	r2, #4
 800a2a2:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 800a2a4:	3364      	adds	r3, #100	; 0x64
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 800a2aa:	2003      	movs	r0, #3
 800a2ac:	e023      	b.n	800a2f6 <UART_WaitOnFlagUntilTimeout+0xf2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a2b8:	4643      	mov	r3, r8
 800a2ba:	6819      	ldr	r1, [r3, #0]
 800a2bc:	680b      	ldr	r3, [r1, #0]
 800a2be:	4c11      	ldr	r4, [pc, #68]	; (800a304 <UART_WaitOnFlagUntilTimeout+0x100>)
 800a2c0:	4023      	ands	r3, r4
 800a2c2:	600b      	str	r3, [r1, #0]
 800a2c4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2c8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2cc:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d0:	4643      	mov	r3, r8
 800a2d2:	6819      	ldr	r1, [r3, #0]
 800a2d4:	688b      	ldr	r3, [r1, #8]
 800a2d6:	4393      	bics	r3, r2
 800a2d8:	608b      	str	r3, [r1, #8]
 800a2da:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 800a2de:	2320      	movs	r3, #32
 800a2e0:	3287      	adds	r2, #135	; 0x87
 800a2e2:	4641      	mov	r1, r8
 800a2e4:	508b      	str	r3, [r1, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800a2e6:	3204      	adds	r2, #4
 800a2e8:	508b      	str	r3, [r1, r2]
        __HAL_UNLOCK(huart);
 800a2ea:	3364      	adds	r3, #100	; 0x64
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 800a2f0:	2003      	movs	r0, #3
 800a2f2:	e000      	b.n	800a2f6 <UART_WaitOnFlagUntilTimeout+0xf2>
  return HAL_OK;
 800a2f4:	2000      	movs	r0, #0
}
 800a2f6:	bcf0      	pop	{r4, r5, r6, r7}
 800a2f8:	46bb      	mov	fp, r7
 800a2fa:	46b2      	mov	sl, r6
 800a2fc:	46a9      	mov	r9, r5
 800a2fe:	46a0      	mov	r8, r4
 800a300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a302:	46c0      	nop			; (mov r8, r8)
 800a304:	fffffe5f 	.word	0xfffffe5f

0800a308 <HAL_UART_Transmit>:
{
 800a308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30a:	46ce      	mov	lr, r9
 800a30c:	4647      	mov	r7, r8
 800a30e:	b580      	push	{r7, lr}
 800a310:	b083      	sub	sp, #12
 800a312:	0004      	movs	r4, r0
 800a314:	000d      	movs	r5, r1
 800a316:	0016      	movs	r6, r2
 800a318:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800a31a:	2388      	movs	r3, #136	; 0x88
 800a31c:	58c3      	ldr	r3, [r0, r3]
 800a31e:	2b20      	cmp	r3, #32
 800a320:	d15c      	bne.n	800a3dc <HAL_UART_Transmit+0xd4>
    if ((pData == NULL) || (Size == 0U))
 800a322:	2900      	cmp	r1, #0
 800a324:	d060      	beq.n	800a3e8 <HAL_UART_Transmit+0xe0>
 800a326:	2a00      	cmp	r2, #0
 800a328:	d060      	beq.n	800a3ec <HAL_UART_Transmit+0xe4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a32a:	2380      	movs	r3, #128	; 0x80
 800a32c:	015b      	lsls	r3, r3, #5
 800a32e:	6882      	ldr	r2, [r0, #8]
 800a330:	429a      	cmp	r2, r3
 800a332:	d104      	bne.n	800a33e <HAL_UART_Transmit+0x36>
 800a334:	6903      	ldr	r3, [r0, #16]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a33a:	07cb      	lsls	r3, r1, #31
 800a33c:	d458      	bmi.n	800a3f0 <HAL_UART_Transmit+0xe8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a33e:	2390      	movs	r3, #144	; 0x90
 800a340:	2200      	movs	r2, #0
 800a342:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a344:	3b08      	subs	r3, #8
 800a346:	3221      	adds	r2, #33	; 0x21
 800a348:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800a34a:	f7fc fde3 	bl	8006f14 <HAL_GetTick>
 800a34e:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 800a350:	2354      	movs	r3, #84	; 0x54
 800a352:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 800a354:	3302      	adds	r3, #2
 800a356:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a358:	2380      	movs	r3, #128	; 0x80
 800a35a:	015b      	lsls	r3, r3, #5
 800a35c:	68a2      	ldr	r2, [r4, #8]
      pdata16bits = NULL;
 800a35e:	2100      	movs	r1, #0
 800a360:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a362:	429a      	cmp	r2, r3
 800a364:	d006      	beq.n	800a374 <HAL_UART_Transmit+0x6c>
    while (huart->TxXferCount > 0U)
 800a366:	2356      	movs	r3, #86	; 0x56
 800a368:	5ae3      	ldrh	r3, [r4, r3]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d028      	beq.n	800a3c2 <HAL_UART_Transmit+0xba>
      huart->TxXferCount--;
 800a370:	2656      	movs	r6, #86	; 0x56
 800a372:	e016      	b.n	800a3a2 <HAL_UART_Transmit+0x9a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1f5      	bne.n	800a366 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 800a37a:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800a37c:	2500      	movs	r5, #0
 800a37e:	e7f2      	b.n	800a366 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a380:	6822      	ldr	r2, [r4, #0]
 800a382:	464b      	mov	r3, r9
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	05db      	lsls	r3, r3, #23
 800a388:	0ddb      	lsrs	r3, r3, #23
 800a38a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800a38c:	2302      	movs	r3, #2
 800a38e:	469c      	mov	ip, r3
 800a390:	44e1      	add	r9, ip
      huart->TxXferCount--;
 800a392:	5ba2      	ldrh	r2, [r4, r6]
 800a394:	3a01      	subs	r2, #1
 800a396:	b292      	uxth	r2, r2
 800a398:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 800a39a:	5ba3      	ldrh	r3, [r4, r6]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00f      	beq.n	800a3c2 <HAL_UART_Transmit+0xba>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3a2:	9700      	str	r7, [sp, #0]
 800a3a4:	4643      	mov	r3, r8
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	2180      	movs	r1, #128	; 0x80
 800a3aa:	0020      	movs	r0, r4
 800a3ac:	f7ff ff2a 	bl	800a204 <UART_WaitOnFlagUntilTimeout>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d11f      	bne.n	800a3f4 <HAL_UART_Transmit+0xec>
      if (pdata8bits == NULL)
 800a3b4:	2d00      	cmp	r5, #0
 800a3b6:	d0e3      	beq.n	800a380 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a3b8:	6823      	ldr	r3, [r4, #0]
 800a3ba:	782a      	ldrb	r2, [r5, #0]
 800a3bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a3be:	3501      	adds	r5, #1
 800a3c0:	e7e7      	b.n	800a392 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3c2:	9700      	str	r7, [sp, #0]
 800a3c4:	4643      	mov	r3, r8
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2140      	movs	r1, #64	; 0x40
 800a3ca:	0020      	movs	r0, r4
 800a3cc:	f7ff ff1a 	bl	800a204 <UART_WaitOnFlagUntilTimeout>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	d111      	bne.n	800a3f8 <HAL_UART_Transmit+0xf0>
    huart->gState = HAL_UART_STATE_READY;
 800a3d4:	2388      	movs	r3, #136	; 0x88
 800a3d6:	2220      	movs	r2, #32
 800a3d8:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800a3da:	e000      	b.n	800a3de <HAL_UART_Transmit+0xd6>
    return HAL_BUSY;
 800a3dc:	2002      	movs	r0, #2
}
 800a3de:	b003      	add	sp, #12
 800a3e0:	bcc0      	pop	{r6, r7}
 800a3e2:	46b9      	mov	r9, r7
 800a3e4:	46b0      	mov	r8, r6
 800a3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800a3e8:	2001      	movs	r0, #1
 800a3ea:	e7f8      	b.n	800a3de <HAL_UART_Transmit+0xd6>
 800a3ec:	2001      	movs	r0, #1
 800a3ee:	e7f6      	b.n	800a3de <HAL_UART_Transmit+0xd6>
        return  HAL_ERROR;
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	e7f4      	b.n	800a3de <HAL_UART_Transmit+0xd6>
        return HAL_TIMEOUT;
 800a3f4:	2003      	movs	r0, #3
 800a3f6:	e7f2      	b.n	800a3de <HAL_UART_Transmit+0xd6>
      return HAL_TIMEOUT;
 800a3f8:	2003      	movs	r0, #3
 800a3fa:	e7f0      	b.n	800a3de <HAL_UART_Transmit+0xd6>

0800a3fc <HAL_UART_Receive>:
{
 800a3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3fe:	46d6      	mov	lr, sl
 800a400:	464f      	mov	r7, r9
 800a402:	4646      	mov	r6, r8
 800a404:	b5c0      	push	{r6, r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	0004      	movs	r4, r0
 800a40a:	000d      	movs	r5, r1
 800a40c:	0016      	movs	r6, r2
 800a40e:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800a410:	238c      	movs	r3, #140	; 0x8c
 800a412:	58c3      	ldr	r3, [r0, r3]
 800a414:	2b20      	cmp	r3, #32
 800a416:	d000      	beq.n	800a41a <HAL_UART_Receive+0x1e>
 800a418:	e07d      	b.n	800a516 <HAL_UART_Receive+0x11a>
    if ((pData == NULL) || (Size == 0U))
 800a41a:	2900      	cmp	r1, #0
 800a41c:	d100      	bne.n	800a420 <HAL_UART_Receive+0x24>
 800a41e:	e081      	b.n	800a524 <HAL_UART_Receive+0x128>
 800a420:	2a00      	cmp	r2, #0
 800a422:	d100      	bne.n	800a426 <HAL_UART_Receive+0x2a>
 800a424:	e080      	b.n	800a528 <HAL_UART_Receive+0x12c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a426:	2380      	movs	r3, #128	; 0x80
 800a428:	015b      	lsls	r3, r3, #5
 800a42a:	6882      	ldr	r2, [r0, #8]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d105      	bne.n	800a43c <HAL_UART_Receive+0x40>
 800a430:	6903      	ldr	r3, [r0, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <HAL_UART_Receive+0x40>
      if ((((uint32_t)pData) & 1U) != 0U)
 800a436:	07cb      	lsls	r3, r1, #31
 800a438:	d500      	bpl.n	800a43c <HAL_UART_Receive+0x40>
 800a43a:	e077      	b.n	800a52c <HAL_UART_Receive+0x130>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a43c:	2300      	movs	r3, #0
 800a43e:	2290      	movs	r2, #144	; 0x90
 800a440:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a442:	3a04      	subs	r2, #4
 800a444:	2122      	movs	r1, #34	; 0x22
 800a446:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a448:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 800a44a:	f7fc fd63 	bl	8006f14 <HAL_GetTick>
 800a44e:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 800a450:	235c      	movs	r3, #92	; 0x5c
 800a452:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 800a454:	3302      	adds	r3, #2
 800a456:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 800a458:	68a3      	ldr	r3, [r4, #8]
 800a45a:	2280      	movs	r2, #128	; 0x80
 800a45c:	0152      	lsls	r2, r2, #5
 800a45e:	4293      	cmp	r3, r2
 800a460:	d015      	beq.n	800a48e <HAL_UART_Receive+0x92>
 800a462:	2b00      	cmp	r3, #0
 800a464:	d11e      	bne.n	800a4a4 <HAL_UART_Receive+0xa8>
 800a466:	6923      	ldr	r3, [r4, #16]
 800a468:	425a      	negs	r2, r3
 800a46a:	4153      	adcs	r3, r2
 800a46c:	01db      	lsls	r3, r3, #7
 800a46e:	4698      	mov	r8, r3
 800a470:	237f      	movs	r3, #127	; 0x7f
 800a472:	469c      	mov	ip, r3
 800a474:	44e0      	add	r8, ip
 800a476:	2360      	movs	r3, #96	; 0x60
 800a478:	4642      	mov	r2, r8
 800a47a:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 800a47c:	2300      	movs	r3, #0
 800a47e:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 800a480:	235e      	movs	r3, #94	; 0x5e
 800a482:	5ae3      	ldrh	r3, [r4, r3]
 800a484:	b29b      	uxth	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d040      	beq.n	800a50c <HAL_UART_Receive+0x110>
      huart->RxXferCount--;
 800a48a:	265e      	movs	r6, #94	; 0x5e
 800a48c:	e02c      	b.n	800a4e8 <HAL_UART_Receive+0xec>
    UART_MASK_COMPUTATION(huart);
 800a48e:	6923      	ldr	r3, [r4, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d04f      	beq.n	800a534 <HAL_UART_Receive+0x138>
 800a494:	2360      	movs	r3, #96	; 0x60
 800a496:	22ff      	movs	r2, #255	; 0xff
 800a498:	52e2      	strh	r2, [r4, r3]
 800a49a:	339f      	adds	r3, #159	; 0x9f
 800a49c:	4698      	mov	r8, r3
      pdata16bits = NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	469a      	mov	sl, r3
 800a4a2:	e7ed      	b.n	800a480 <HAL_UART_Receive+0x84>
    UART_MASK_COMPUTATION(huart);
 800a4a4:	2280      	movs	r2, #128	; 0x80
 800a4a6:	0552      	lsls	r2, r2, #21
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	4688      	mov	r8, r1
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d1e2      	bne.n	800a476 <HAL_UART_Receive+0x7a>
 800a4b0:	6923      	ldr	r3, [r4, #16]
 800a4b2:	1e5a      	subs	r2, r3, #1
 800a4b4:	4193      	sbcs	r3, r2
 800a4b6:	425b      	negs	r3, r3
 800a4b8:	223f      	movs	r2, #63	; 0x3f
 800a4ba:	4393      	bics	r3, r2
 800a4bc:	4698      	mov	r8, r3
 800a4be:	237f      	movs	r3, #127	; 0x7f
 800a4c0:	469c      	mov	ip, r3
 800a4c2:	44e0      	add	r8, ip
 800a4c4:	e7d7      	b.n	800a476 <HAL_UART_Receive+0x7a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ca:	4642      	mov	r2, r8
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	4652      	mov	r2, sl
 800a4d0:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	469c      	mov	ip, r3
 800a4d6:	44e2      	add	sl, ip
      huart->RxXferCount--;
 800a4d8:	5ba2      	ldrh	r2, [r4, r6]
 800a4da:	3a01      	subs	r2, #1
 800a4dc:	b292      	uxth	r2, r2
 800a4de:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 800a4e0:	5ba3      	ldrh	r3, [r4, r6]
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d011      	beq.n	800a50c <HAL_UART_Receive+0x110>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a4e8:	9700      	str	r7, [sp, #0]
 800a4ea:	464b      	mov	r3, r9
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	2120      	movs	r1, #32
 800a4f0:	0020      	movs	r0, r4
 800a4f2:	f7ff fe87 	bl	800a204 <UART_WaitOnFlagUntilTimeout>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d11a      	bne.n	800a530 <HAL_UART_Receive+0x134>
      if (pdata8bits == NULL)
 800a4fa:	2d00      	cmp	r5, #0
 800a4fc:	d0e3      	beq.n	800a4c6 <HAL_UART_Receive+0xca>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a502:	4642      	mov	r2, r8
 800a504:	4013      	ands	r3, r2
 800a506:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 800a508:	3501      	adds	r5, #1
 800a50a:	e7e5      	b.n	800a4d8 <HAL_UART_Receive+0xdc>
    huart->RxState = HAL_UART_STATE_READY;
 800a50c:	238c      	movs	r3, #140	; 0x8c
 800a50e:	2220      	movs	r2, #32
 800a510:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 800a512:	2000      	movs	r0, #0
 800a514:	e000      	b.n	800a518 <HAL_UART_Receive+0x11c>
    return HAL_BUSY;
 800a516:	2002      	movs	r0, #2
}
 800a518:	b002      	add	sp, #8
 800a51a:	bce0      	pop	{r5, r6, r7}
 800a51c:	46ba      	mov	sl, r7
 800a51e:	46b1      	mov	r9, r6
 800a520:	46a8      	mov	r8, r5
 800a522:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800a524:	2001      	movs	r0, #1
 800a526:	e7f7      	b.n	800a518 <HAL_UART_Receive+0x11c>
 800a528:	2001      	movs	r0, #1
 800a52a:	e7f5      	b.n	800a518 <HAL_UART_Receive+0x11c>
        return  HAL_ERROR;
 800a52c:	2001      	movs	r0, #1
 800a52e:	e7f3      	b.n	800a518 <HAL_UART_Receive+0x11c>
        return HAL_TIMEOUT;
 800a530:	2003      	movs	r0, #3
 800a532:	e7f1      	b.n	800a518 <HAL_UART_Receive+0x11c>
    UART_MASK_COMPUTATION(huart);
 800a534:	4b03      	ldr	r3, [pc, #12]	; (800a544 <HAL_UART_Receive+0x148>)
 800a536:	2260      	movs	r2, #96	; 0x60
 800a538:	52a3      	strh	r3, [r4, r2]
      pdata16bits = (uint16_t *) pData;
 800a53a:	46aa      	mov	sl, r5
    UART_MASK_COMPUTATION(huart);
 800a53c:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 800a53e:	2500      	movs	r5, #0
 800a540:	e79e      	b.n	800a480 <HAL_UART_Receive+0x84>
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	000001ff 	.word	0x000001ff

0800a548 <UART_CheckIdleState>:
{
 800a548:	b530      	push	{r4, r5, lr}
 800a54a:	b083      	sub	sp, #12
 800a54c:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54e:	2390      	movs	r3, #144	; 0x90
 800a550:	2200      	movs	r2, #0
 800a552:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800a554:	f7fc fcde 	bl	8006f14 <HAL_GetTick>
 800a558:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	071b      	lsls	r3, r3, #28
 800a560:	d410      	bmi.n	800a584 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	075b      	lsls	r3, r3, #29
 800a568:	d419      	bmi.n	800a59e <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800a56a:	2320      	movs	r3, #32
 800a56c:	2288      	movs	r2, #136	; 0x88
 800a56e:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a570:	3204      	adds	r2, #4
 800a572:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a574:	2300      	movs	r3, #0
 800a576:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a578:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800a57a:	3a08      	subs	r2, #8
 800a57c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800a57e:	2000      	movs	r0, #0
}
 800a580:	b003      	add	sp, #12
 800a582:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a584:	2180      	movs	r1, #128	; 0x80
 800a586:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <UART_CheckIdleState+0x70>)
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	0003      	movs	r3, r0
 800a58c:	2200      	movs	r2, #0
 800a58e:	0389      	lsls	r1, r1, #14
 800a590:	0020      	movs	r0, r4
 800a592:	f7ff fe37 	bl	800a204 <UART_WaitOnFlagUntilTimeout>
 800a596:	2800      	cmp	r0, #0
 800a598:	d0e3      	beq.n	800a562 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800a59a:	2003      	movs	r0, #3
 800a59c:	e7f0      	b.n	800a580 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a59e:	2180      	movs	r1, #128	; 0x80
 800a5a0:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <UART_CheckIdleState+0x70>)
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	002b      	movs	r3, r5
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	03c9      	lsls	r1, r1, #15
 800a5aa:	0020      	movs	r0, r4
 800a5ac:	f7ff fe2a 	bl	800a204 <UART_WaitOnFlagUntilTimeout>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d0da      	beq.n	800a56a <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 800a5b4:	2003      	movs	r0, #3
 800a5b6:	e7e3      	b.n	800a580 <UART_CheckIdleState+0x38>
 800a5b8:	01ffffff 	.word	0x01ffffff

0800a5bc <HAL_UART_Init>:
{
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800a5c0:	d030      	beq.n	800a624 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 800a5c2:	2388      	movs	r3, #136	; 0x88
 800a5c4:	58c3      	ldr	r3, [r0, r3]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d022      	beq.n	800a610 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800a5ca:	2388      	movs	r3, #136	; 0x88
 800a5cc:	2224      	movs	r2, #36	; 0x24
 800a5ce:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800a5d0:	6822      	ldr	r2, [r4, #0]
 800a5d2:	6813      	ldr	r3, [r2, #0]
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	438b      	bics	r3, r1
 800a5d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5da:	0020      	movs	r0, r4
 800a5dc:	f7ff fc98 	bl	8009f10 <UART_SetConfig>
 800a5e0:	2801      	cmp	r0, #1
 800a5e2:	d014      	beq.n	800a60e <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d118      	bne.n	800a61c <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5ea:	6822      	ldr	r2, [r4, #0]
 800a5ec:	6853      	ldr	r3, [r2, #4]
 800a5ee:	490e      	ldr	r1, [pc, #56]	; (800a628 <HAL_UART_Init+0x6c>)
 800a5f0:	400b      	ands	r3, r1
 800a5f2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5f4:	6822      	ldr	r2, [r4, #0]
 800a5f6:	6893      	ldr	r3, [r2, #8]
 800a5f8:	212a      	movs	r1, #42	; 0x2a
 800a5fa:	438b      	bics	r3, r1
 800a5fc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800a5fe:	6822      	ldr	r2, [r4, #0]
 800a600:	6813      	ldr	r3, [r2, #0]
 800a602:	3929      	subs	r1, #41	; 0x29
 800a604:	430b      	orrs	r3, r1
 800a606:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800a608:	0020      	movs	r0, r4
 800a60a:	f7ff ff9d 	bl	800a548 <UART_CheckIdleState>
}
 800a60e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800a610:	3384      	adds	r3, #132	; 0x84
 800a612:	2200      	movs	r2, #0
 800a614:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800a616:	f7fc fa3b 	bl	8006a90 <HAL_UART_MspInit>
 800a61a:	e7d6      	b.n	800a5ca <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 800a61c:	0020      	movs	r0, r4
 800a61e:	f7ff fd81 	bl	800a124 <UART_AdvFeatureConfig>
 800a622:	e7e2      	b.n	800a5ea <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800a624:	2001      	movs	r0, #1
 800a626:	e7f2      	b.n	800a60e <HAL_UART_Init+0x52>
 800a628:	ffffb7ff 	.word	0xffffb7ff

0800a62c <UART_Start_Receive_DMA>:
{
 800a62c:	b510      	push	{r4, lr}
 800a62e:	0004      	movs	r4, r0
 800a630:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 800a632:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 800a634:	225c      	movs	r2, #92	; 0x5c
 800a636:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a638:	3234      	adds	r2, #52	; 0x34
 800a63a:	2100      	movs	r1, #0
 800a63c:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a63e:	3a04      	subs	r2, #4
 800a640:	3122      	adds	r1, #34	; 0x22
 800a642:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 800a644:	3a0c      	subs	r2, #12
 800a646:	5882      	ldr	r2, [r0, r2]
 800a648:	2a00      	cmp	r2, #0
 800a64a:	d013      	beq.n	800a674 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a64c:	4921      	ldr	r1, [pc, #132]	; (800a6d4 <UART_Start_Receive_DMA+0xa8>)
 800a64e:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a650:	2080      	movs	r0, #128	; 0x80
 800a652:	5822      	ldr	r2, [r4, r0]
 800a654:	4920      	ldr	r1, [pc, #128]	; (800a6d8 <UART_Start_Receive_DMA+0xac>)
 800a656:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a658:	5822      	ldr	r2, [r4, r0]
 800a65a:	4920      	ldr	r1, [pc, #128]	; (800a6dc <UART_Start_Receive_DMA+0xb0>)
 800a65c:	6351      	str	r1, [r2, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 800a65e:	5822      	ldr	r2, [r4, r0]
 800a660:	2100      	movs	r1, #0
 800a662:	6391      	str	r1, [r2, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a664:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800a666:	6821      	ldr	r1, [r4, #0]
 800a668:	3124      	adds	r1, #36	; 0x24
 800a66a:	5820      	ldr	r0, [r4, r0]
 800a66c:	f7fd f8ce 	bl	800780c <HAL_DMA_Start_IT>
 800a670:	2800      	cmp	r0, #0
 800a672:	d126      	bne.n	800a6c2 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00b      	beq.n	800a692 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a67a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a67e:	2301      	movs	r3, #1
 800a680:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a684:	6822      	ldr	r2, [r4, #0]
 800a686:	6810      	ldr	r0, [r2, #0]
 800a688:	33ff      	adds	r3, #255	; 0xff
 800a68a:	4303      	orrs	r3, r0
 800a68c:	6013      	str	r3, [r2, #0]
 800a68e:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a692:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a696:	2301      	movs	r3, #1
 800a698:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69c:	6821      	ldr	r1, [r4, #0]
 800a69e:	688a      	ldr	r2, [r1, #8]
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	608a      	str	r2, [r1, #8]
 800a6a4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6ac:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	6893      	ldr	r3, [r2, #8]
 800a6b4:	2040      	movs	r0, #64	; 0x40
 800a6b6:	4303      	orrs	r3, r0
 800a6b8:	6093      	str	r3, [r2, #8]
 800a6ba:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 800a6be:	2000      	movs	r0, #0
}
 800a6c0:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a6c2:	2390      	movs	r3, #144	; 0x90
 800a6c4:	2210      	movs	r2, #16
 800a6c6:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 800a6c8:	3b04      	subs	r3, #4
 800a6ca:	3210      	adds	r2, #16
 800a6cc:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	e7f6      	b.n	800a6c0 <UART_Start_Receive_DMA+0x94>
 800a6d2:	46c0      	nop			; (mov r8, r8)
 800a6d4:	08009e79 	.word	0x08009e79
 800a6d8:	08009e59 	.word	0x08009e59
 800a6dc:	08009a9b 	.word	0x08009a9b

0800a6e0 <HAL_UART_Receive_DMA>:
{
 800a6e0:	b570      	push	{r4, r5, r6, lr}
 800a6e2:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6e4:	208c      	movs	r0, #140	; 0x8c
 800a6e6:	5818      	ldr	r0, [r3, r0]
 800a6e8:	2820      	cmp	r0, #32
 800a6ea:	d125      	bne.n	800a738 <HAL_UART_Receive_DMA+0x58>
    if ((pData == NULL) || (Size == 0U))
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	d025      	beq.n	800a73c <HAL_UART_Receive_DMA+0x5c>
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	d025      	beq.n	800a740 <HAL_UART_Receive_DMA+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6f4:	2080      	movs	r0, #128	; 0x80
 800a6f6:	0140      	lsls	r0, r0, #5
 800a6f8:	689c      	ldr	r4, [r3, #8]
 800a6fa:	4284      	cmp	r4, r0
 800a6fc:	d105      	bne.n	800a70a <HAL_UART_Receive_DMA+0x2a>
 800a6fe:	6918      	ldr	r0, [r3, #16]
 800a700:	2800      	cmp	r0, #0
 800a702:	d102      	bne.n	800a70a <HAL_UART_Receive_DMA+0x2a>
        return  HAL_ERROR;
 800a704:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800a706:	07cc      	lsls	r4, r1, #31
 800a708:	d417      	bmi.n	800a73a <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70a:	2000      	movs	r0, #0
 800a70c:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	6840      	ldr	r0, [r0, #4]
 800a712:	0200      	lsls	r0, r0, #8
 800a714:	d50c      	bpl.n	800a730 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a716:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a71a:	2001      	movs	r0, #1
 800a71c:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a720:	681c      	ldr	r4, [r3, #0]
 800a722:	6825      	ldr	r5, [r4, #0]
 800a724:	2080      	movs	r0, #128	; 0x80
 800a726:	04c0      	lsls	r0, r0, #19
 800a728:	4328      	orrs	r0, r5
 800a72a:	6020      	str	r0, [r4, #0]
 800a72c:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a730:	0018      	movs	r0, r3
 800a732:	f7ff ff7b 	bl	800a62c <UART_Start_Receive_DMA>
 800a736:	e000      	b.n	800a73a <HAL_UART_Receive_DMA+0x5a>
    return HAL_BUSY;
 800a738:	2002      	movs	r0, #2
}
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a73c:	2001      	movs	r0, #1
 800a73e:	e7fc      	b.n	800a73a <HAL_UART_Receive_DMA+0x5a>
 800a740:	2001      	movs	r0, #1
 800a742:	e7fa      	b.n	800a73a <HAL_UART_Receive_DMA+0x5a>

0800a744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a748:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 800a74e:	336a      	adds	r3, #106	; 0x6a
 800a750:	2201      	movs	r2, #1
 800a752:	52c2      	strh	r2, [r0, r3]
    huart->NbRxDataToProcess = 1U;
 800a754:	2001      	movs	r0, #1
 800a756:	2368      	movs	r3, #104	; 0x68
 800a758:	52e0      	strh	r0, [r4, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a75c:	6803      	ldr	r3, [r0, #0]
 800a75e:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a764:	4f08      	ldr	r7, [pc, #32]	; (800a788 <UARTEx_SetNbDataToProcess+0x44>)
 800a766:	5cf8      	ldrb	r0, [r7, r3]
 800a768:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a76a:	4e08      	ldr	r6, [pc, #32]	; (800a78c <UARTEx_SetNbDataToProcess+0x48>)
 800a76c:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a76e:	f7f5 fd71 	bl	8000254 <__divsi3>
 800a772:	236a      	movs	r3, #106	; 0x6a
 800a774:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a776:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a778:	0f5b      	lsrs	r3, r3, #29
 800a77a:	5cf8      	ldrb	r0, [r7, r3]
 800a77c:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a77e:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a780:	f7f5 fd68 	bl	8000254 <__divsi3>
 800a784:	b280      	uxth	r0, r0
 800a786:	e7e6      	b.n	800a756 <UARTEx_SetNbDataToProcess+0x12>
 800a788:	08012ec4 	.word	0x08012ec4
 800a78c:	08012ebc 	.word	0x08012ebc

0800a790 <HAL_UARTEx_WakeupCallback>:
}
 800a790:	4770      	bx	lr

0800a792 <HAL_UARTEx_RxFifoFullCallback>:
}
 800a792:	4770      	bx	lr

0800a794 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800a794:	4770      	bx	lr
	...

0800a798 <HAL_UARTEx_DisableFifoMode>:
{
 800a798:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800a79a:	2384      	movs	r3, #132	; 0x84
 800a79c:	5cc3      	ldrb	r3, [r0, r3]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d015      	beq.n	800a7ce <HAL_UARTEx_DisableFifoMode+0x36>
 800a7a2:	2484      	movs	r4, #132	; 0x84
 800a7a4:	2601      	movs	r6, #1
 800a7a6:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 800a7a8:	2588      	movs	r5, #136	; 0x88
 800a7aa:	2324      	movs	r3, #36	; 0x24
 800a7ac:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7ae:	6802      	ldr	r2, [r0, #0]
 800a7b0:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a7b2:	6811      	ldr	r1, [r2, #0]
 800a7b4:	43b1      	bics	r1, r6
 800a7b6:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7b8:	4a06      	ldr	r2, [pc, #24]	; (800a7d4 <HAL_UARTEx_DisableFifoMode+0x3c>)
 800a7ba:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7bc:	2200      	movs	r2, #0
 800a7be:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7c0:	6801      	ldr	r1, [r0, #0]
 800a7c2:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a7c4:	2320      	movs	r3, #32
 800a7c6:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800a7c8:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 800a7ca:	2000      	movs	r0, #0
}
 800a7cc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800a7ce:	2002      	movs	r0, #2
 800a7d0:	e7fc      	b.n	800a7cc <HAL_UARTEx_DisableFifoMode+0x34>
 800a7d2:	46c0      	nop			; (mov r8, r8)
 800a7d4:	dfffffff 	.word	0xdfffffff

0800a7d8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7da:	0004      	movs	r4, r0
 800a7dc:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800a7de:	2384      	movs	r3, #132	; 0x84
 800a7e0:	5cc3      	ldrb	r3, [r0, r3]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d01b      	beq.n	800a81e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800a7e6:	2584      	movs	r5, #132	; 0x84
 800a7e8:	2001      	movs	r0, #1
 800a7ea:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800a7ec:	2688      	movs	r6, #136	; 0x88
 800a7ee:	2324      	movs	r3, #36	; 0x24
 800a7f0:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800a7f6:	6819      	ldr	r1, [r3, #0]
 800a7f8:	4381      	bics	r1, r0
 800a7fa:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7fc:	6820      	ldr	r0, [r4, #0]
 800a7fe:	6883      	ldr	r3, [r0, #8]
 800a800:	00db      	lsls	r3, r3, #3
 800a802:	08d9      	lsrs	r1, r3, #3
 800a804:	4311      	orrs	r1, r2
 800a806:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a808:	0020      	movs	r0, r4
 800a80a:	f7ff ff9b 	bl	800a744 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a812:	2320      	movs	r3, #32
 800a814:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800a816:	2300      	movs	r3, #0
 800a818:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800a81a:	2000      	movs	r0, #0
}
 800a81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800a81e:	2002      	movs	r0, #2
 800a820:	e7fc      	b.n	800a81c <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800a824 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	0004      	movs	r4, r0
 800a828:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 800a82a:	2284      	movs	r2, #132	; 0x84
 800a82c:	5c82      	ldrb	r2, [r0, r2]
 800a82e:	2a01      	cmp	r2, #1
 800a830:	d01b      	beq.n	800a86a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800a832:	2584      	movs	r5, #132	; 0x84
 800a834:	2001      	movs	r0, #1
 800a836:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800a838:	2688      	movs	r6, #136	; 0x88
 800a83a:	2224      	movs	r2, #36	; 0x24
 800a83c:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a83e:	6822      	ldr	r2, [r4, #0]
 800a840:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a842:	6811      	ldr	r1, [r2, #0]
 800a844:	4381      	bics	r1, r0
 800a846:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a848:	6822      	ldr	r2, [r4, #0]
 800a84a:	6891      	ldr	r1, [r2, #8]
 800a84c:	4808      	ldr	r0, [pc, #32]	; (800a870 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 800a84e:	4001      	ands	r1, r0
 800a850:	4319      	orrs	r1, r3
 800a852:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800a854:	0020      	movs	r0, r4
 800a856:	f7ff ff75 	bl	800a744 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a85e:	2320      	movs	r3, #32
 800a860:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800a862:	2300      	movs	r3, #0
 800a864:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800a866:	2000      	movs	r0, #0
}
 800a868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800a86a:	2002      	movs	r0, #2
 800a86c:	e7fc      	b.n	800a868 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800a86e:	46c0      	nop			; (mov r8, r8)
 800a870:	f1ffffff 	.word	0xf1ffffff

0800a874 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a874:	b510      	push	{r4, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <SysTick_Handler+0x18>)
 800a878:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a87a:	f001 f87b 	bl	800b974 <xTaskGetSchedulerState>
 800a87e:	2801      	cmp	r0, #1
 800a880:	d100      	bne.n	800a884 <SysTick_Handler+0x10>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800a882:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800a884:	f001 fb36 	bl	800bef4 <xPortSysTickHandler>
}
 800a888:	e7fb      	b.n	800a882 <SysTick_Handler+0xe>
 800a88a:	46c0      	nop			; (mov r8, r8)
 800a88c:	e000e010 	.word	0xe000e010

0800a890 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a890:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800a894:	2b00      	cmp	r3, #0
 800a896:	d106      	bne.n	800a8a6 <osKernelInitialize+0x16>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <osKernelInitialize+0x24>)
 800a89a:	6818      	ldr	r0, [r3, #0]
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d105      	bne.n	800a8ac <osKernelInitialize+0x1c>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]
      stat = osError;
    }
  }

  return (stat);
}
 800a8a4:	4770      	bx	lr
    stat = osErrorISR;
 800a8a6:	2006      	movs	r0, #6
 800a8a8:	4240      	negs	r0, r0
 800a8aa:	e7fb      	b.n	800a8a4 <osKernelInitialize+0x14>
      stat = osError;
 800a8ac:	2001      	movs	r0, #1
 800a8ae:	4240      	negs	r0, r0
  return (stat);
 800a8b0:	e7f8      	b.n	800a8a4 <osKernelInitialize+0x14>
 800a8b2:	46c0      	nop			; (mov r8, r8)
 800a8b4:	20004220 	.word	0x20004220

0800a8b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10f      	bne.n	800a8e2 <osKernelStart+0x2a>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800a8c2:	4b0b      	ldr	r3, [pc, #44]	; (800a8f0 <osKernelStart+0x38>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d10e      	bne.n	800a8e8 <osKernelStart+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a8ca:	4a0a      	ldr	r2, [pc, #40]	; (800a8f4 <osKernelStart+0x3c>)
 800a8cc:	69d3      	ldr	r3, [r2, #28]
 800a8ce:	021b      	lsls	r3, r3, #8
 800a8d0:	0a1b      	lsrs	r3, r3, #8
 800a8d2:	61d3      	str	r3, [r2, #28]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a8d4:	4b06      	ldr	r3, [pc, #24]	; (800a8f0 <osKernelStart+0x38>)
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a8da:	f000 fdcd 	bl	800b478 <vTaskStartScheduler>
      stat = osOK;
 800a8de:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 800a8e0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800a8e2:	2006      	movs	r0, #6
 800a8e4:	4240      	negs	r0, r0
 800a8e6:	e7fb      	b.n	800a8e0 <osKernelStart+0x28>
      stat = osError;
 800a8e8:	2001      	movs	r0, #1
 800a8ea:	4240      	negs	r0, r0
  return (stat);
 800a8ec:	e7f8      	b.n	800a8e0 <osKernelStart+0x28>
 800a8ee:	46c0      	nop			; (mov r8, r8)
 800a8f0:	20004220 	.word	0x20004220
 800a8f4:	e000ed00 	.word	0xe000ed00

0800a8f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fa:	b087      	sub	sp, #28
 800a8fc:	0014      	movs	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a8fe:	2200      	movs	r2, #0
 800a900:	9205      	str	r2, [sp, #20]
 800a902:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800a906:	2a00      	cmp	r2, #0
 800a908:	d12a      	bne.n	800a960 <osThreadNew+0x68>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d028      	beq.n	800a960 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800a90e:	2c00      	cmp	r4, #0
 800a910:	d031      	beq.n	800a976 <osThreadNew+0x7e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800a912:	69a3      	ldr	r3, [r4, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d005      	beq.n	800a924 <osThreadNew+0x2c>
        prio = (UBaseType_t)attr->priority;
 800a918:	001d      	movs	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a91a:	3b01      	subs	r3, #1
 800a91c:	2b37      	cmp	r3, #55	; 0x37
 800a91e:	d902      	bls.n	800a926 <osThreadNew+0x2e>
        return (NULL);
 800a920:	2000      	movs	r0, #0
 800a922:	e01e      	b.n	800a962 <osThreadNew+0x6a>
 800a924:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a926:	6863      	ldr	r3, [r4, #4]
 800a928:	07db      	lsls	r3, r3, #31
 800a92a:	d433      	bmi.n	800a994 <osThreadNew+0x9c>
      }

      if (attr->stack_size > 0U) {
 800a92c:	6963      	ldr	r3, [r4, #20]
    stack = configMINIMAL_STACK_SIZE;
 800a92e:	2280      	movs	r2, #128	; 0x80
      if (attr->stack_size > 0U) {
 800a930:	2b00      	cmp	r3, #0
 800a932:	d000      	beq.n	800a936 <osThreadNew+0x3e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a934:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 800a936:	6826      	ldr	r6, [r4, #0]
 800a938:	46b4      	mov	ip, r6
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a93a:	68a6      	ldr	r6, [r4, #8]
 800a93c:	2e00      	cmp	r6, #0
 800a93e:	d012      	beq.n	800a966 <osThreadNew+0x6e>
 800a940:	68e7      	ldr	r7, [r4, #12]
 800a942:	2fa7      	cmp	r7, #167	; 0xa7
 800a944:	d90c      	bls.n	800a960 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a946:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a948:	2c00      	cmp	r4, #0
 800a94a:	d009      	beq.n	800a960 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <osThreadNew+0x68>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a950:	9602      	str	r6, [sp, #8]
 800a952:	9401      	str	r4, [sp, #4]
 800a954:	9500      	str	r5, [sp, #0]
 800a956:	000b      	movs	r3, r1
 800a958:	4661      	mov	r1, ip
 800a95a:	f000 fd33 	bl	800b3c4 <xTaskCreateStatic>
 800a95e:	9005      	str	r0, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a960:	9805      	ldr	r0, [sp, #20]
}
 800a962:	b007      	add	sp, #28
 800a964:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a966:	68e3      	ldr	r3, [r4, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f9      	bne.n	800a960 <osThreadNew+0x68>
      if (mem == 0) {
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	4664      	mov	r4, ip
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1f5      	bne.n	800a960 <osThreadNew+0x68>
 800a974:	e001      	b.n	800a97a <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;
 800a976:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800a978:	2280      	movs	r2, #128	; 0x80
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a97a:	b292      	uxth	r2, r2
 800a97c:	ab05      	add	r3, sp, #20
 800a97e:	9301      	str	r3, [sp, #4]
 800a980:	9500      	str	r5, [sp, #0]
 800a982:	000b      	movs	r3, r1
 800a984:	0021      	movs	r1, r4
 800a986:	f000 fd47 	bl	800b418 <xTaskCreate>
 800a98a:	2801      	cmp	r0, #1
 800a98c:	d0e8      	beq.n	800a960 <osThreadNew+0x68>
            hTask = NULL;
 800a98e:	2300      	movs	r3, #0
 800a990:	9305      	str	r3, [sp, #20]
 800a992:	e7e5      	b.n	800a960 <osThreadNew+0x68>
        return (NULL);
 800a994:	2000      	movs	r0, #0
 800a996:	e7e4      	b.n	800a962 <osThreadNew+0x6a>

0800a998 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a998:	b510      	push	{r4, lr}
 800a99a:	0003      	movs	r3, r0
 800a99c:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9a0:	2a00      	cmp	r2, #0
 800a9a2:	d108      	bne.n	800a9b6 <osDelay+0x1e>
    stat = osErrorISR;
  }
  else {
    stat = osOK;
 800a9a4:	2000      	movs	r0, #0

    if (ticks != 0U) {
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d100      	bne.n	800a9ac <osDelay+0x14>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800a9aa:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f000 fec5 	bl	800b73c <vTaskDelay>
    stat = osOK;
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	e7f9      	b.n	800a9aa <osDelay+0x12>
    stat = osErrorISR;
 800a9b6:	2006      	movs	r0, #6
 800a9b8:	4240      	negs	r0, r0
 800a9ba:	e7f6      	b.n	800a9aa <osDelay+0x12>

0800a9bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	0014      	movs	r4, r2
 800a9c2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d132      	bne.n	800aa30 <osMessageQueueNew+0x74>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d034      	beq.n	800aa38 <osMessageQueueNew+0x7c>
 800a9ce:	2900      	cmp	r1, #0
 800a9d0:	d034      	beq.n	800aa3c <osMessageQueueNew+0x80>
    mem = -1;

    if (attr != NULL) {
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	d038      	beq.n	800aa48 <osMessageQueueNew+0x8c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a9d6:	6895      	ldr	r5, [r2, #8]
 800a9d8:	2d00      	cmp	r5, #0
 800a9da:	d00c      	beq.n	800a9f6 <osMessageQueueNew+0x3a>
 800a9dc:	68d3      	ldr	r3, [r2, #12]
 800a9de:	2b4f      	cmp	r3, #79	; 0x4f
 800a9e0:	d92e      	bls.n	800aa40 <osMessageQueueNew+0x84>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a9e2:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	d02d      	beq.n	800aa44 <osMessageQueueNew+0x88>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a9e8:	6966      	ldr	r6, [r4, #20]
 800a9ea:	000b      	movs	r3, r1
 800a9ec:	4343      	muls	r3, r0
 800a9ee:	429e      	cmp	r6, r3
 800a9f0:	d216      	bcs.n	800aa20 <osMessageQueueNew+0x64>
  hQueue = NULL;
 800a9f2:	2500      	movs	r5, #0
 800a9f4:	e01d      	b.n	800aa32 <osMessageQueueNew+0x76>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a9f6:	68d3      	ldr	r3, [r2, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d11a      	bne.n	800aa32 <osMessageQueueNew+0x76>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a9fc:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a9fe:	2a00      	cmp	r2, #0
 800aa00:	d117      	bne.n	800aa32 <osMessageQueueNew+0x76>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800aa02:	6963      	ldr	r3, [r4, #20]
  hQueue = NULL;
 800aa04:	0015      	movs	r5, r2
      if (mem == 0) {
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d113      	bne.n	800aa32 <osMessageQueueNew+0x76>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f000 f97c 	bl	800ad08 <xQueueGenericCreate>
 800aa10:	1e05      	subs	r5, r0, #0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aa12:	d00e      	beq.n	800aa32 <osMessageQueueNew+0x76>
      if (attr != NULL) {
        name = attr->name;
 800aa14:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800aa16:	0021      	movs	r1, r4
 800aa18:	0028      	movs	r0, r5
 800aa1a:	f000 fb1f 	bl	800b05c <vQueueAddToRegistry>
 800aa1e:	e008      	b.n	800aa32 <osMessageQueueNew+0x76>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aa20:	2300      	movs	r3, #0
 800aa22:	9300      	str	r3, [sp, #0]
 800aa24:	002b      	movs	r3, r5
 800aa26:	f000 f939 	bl	800ac9c <xQueueGenericCreateStatic>
 800aa2a:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800aa2c:	d1f2      	bne.n	800aa14 <osMessageQueueNew+0x58>
 800aa2e:	e000      	b.n	800aa32 <osMessageQueueNew+0x76>
  hQueue = NULL;
 800aa30:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800aa32:	0028      	movs	r0, r5
 800aa34:	b002      	add	sp, #8
 800aa36:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800aa38:	2500      	movs	r5, #0
 800aa3a:	e7fa      	b.n	800aa32 <osMessageQueueNew+0x76>
 800aa3c:	2500      	movs	r5, #0
 800aa3e:	e7f8      	b.n	800aa32 <osMessageQueueNew+0x76>
 800aa40:	2500      	movs	r5, #0
 800aa42:	e7f6      	b.n	800aa32 <osMessageQueueNew+0x76>
 800aa44:	0015      	movs	r5, r2
  return ((osMessageQueueId_t)hQueue);
 800aa46:	e7f4      	b.n	800aa32 <osMessageQueueNew+0x76>
          hQueue = xQueueCreate (msg_count, msg_size);
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f000 f95d 	bl	800ad08 <xQueueGenericCreate>
 800aa4e:	1e05      	subs	r5, r0, #0
    if (hQueue != NULL) {
 800aa50:	d0ef      	beq.n	800aa32 <osMessageQueueNew+0x76>
 800aa52:	e7e0      	b.n	800aa16 <osMessageQueueNew+0x5a>

0800aa54 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aa54:	4b03      	ldr	r3, [pc, #12]	; (800aa64 <vApplicationGetIdleTaskMemory+0x10>)
 800aa56:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aa58:	4b03      	ldr	r3, [pc, #12]	; (800aa68 <vApplicationGetIdleTaskMemory+0x14>)
 800aa5a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aa5c:	2380      	movs	r3, #128	; 0x80
 800aa5e:	6013      	str	r3, [r2, #0]
}
 800aa60:	4770      	bx	lr
 800aa62:	46c0      	nop			; (mov r8, r8)
 800aa64:	20004178 	.word	0x20004178
 800aa68:	20003f78 	.word	0x20003f78

0800aa6c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa6c:	4b03      	ldr	r3, [pc, #12]	; (800aa7c <vApplicationGetTimerTaskMemory+0x10>)
 800aa6e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa70:	4b03      	ldr	r3, [pc, #12]	; (800aa80 <vApplicationGetTimerTaskMemory+0x14>)
 800aa72:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa74:	2380      	movs	r3, #128	; 0x80
 800aa76:	005b      	lsls	r3, r3, #1
 800aa78:	6013      	str	r3, [r2, #0]
}
 800aa7a:	4770      	bx	lr
 800aa7c:	20004624 	.word	0x20004624
 800aa80:	20004224 	.word	0x20004224

0800aa84 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa84:	0003      	movs	r3, r0
 800aa86:	3308      	adds	r3, #8
 800aa88:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	4252      	negs	r2, r2
 800aa8e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa90:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa92:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa98:	4770      	bx	lr

0800aa9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa9e:	4770      	bx	lr

0800aaa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800aaa0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aaa2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aaa4:	689a      	ldr	r2, [r3, #8]
 800aaa6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aaa8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aaaa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aaac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800aaae:	6803      	ldr	r3, [r0, #0]
 800aab0:	3301      	adds	r3, #1
 800aab2:	6003      	str	r3, [r0, #0]
}
 800aab4:	4770      	bx	lr

0800aab6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aab6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aab8:	680d      	ldr	r5, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aaba:	0003      	movs	r3, r0
 800aabc:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800aabe:	1c6a      	adds	r2, r5, #1
 800aac0:	d00e      	beq.n	800aae0 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aac2:	001c      	movs	r4, r3
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	42aa      	cmp	r2, r5
 800aaca:	d9fa      	bls.n	800aac2 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aacc:	6863      	ldr	r3, [r4, #4]
 800aace:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aad0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aad2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800aad4:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aad6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800aad8:	6803      	ldr	r3, [r0, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	6003      	str	r3, [r0, #0]
}
 800aade:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800aae0:	6904      	ldr	r4, [r0, #16]
 800aae2:	e7f3      	b.n	800aacc <vListInsert+0x16>

0800aae4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aae4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aae6:	6841      	ldr	r1, [r0, #4]
 800aae8:	6882      	ldr	r2, [r0, #8]
 800aaea:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aaec:	6841      	ldr	r1, [r0, #4]
 800aaee:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aaf0:	685a      	ldr	r2, [r3, #4]
 800aaf2:	4282      	cmp	r2, r0
 800aaf4:	d006      	beq.n	800ab04 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	3a01      	subs	r2, #1
 800aafe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab00:	6818      	ldr	r0, [r3, #0]
}
 800ab02:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab04:	6882      	ldr	r2, [r0, #8]
 800ab06:	605a      	str	r2, [r3, #4]
 800ab08:	e7f5      	b.n	800aaf6 <uxListRemove+0x12>

0800ab0a <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab0e:	f001 f9a7 	bl	800be60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab12:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ab14:	f001 f9b0 	bl	800be78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab18:	4260      	negs	r0, r4
 800ab1a:	4160      	adcs	r0, r4

	return xReturn;
}
 800ab1c:	bd10      	pop	{r4, pc}

0800ab1e <prvCopyDataToQueue>:
{
 800ab1e:	b570      	push	{r4, r5, r6, lr}
 800ab20:	0004      	movs	r4, r0
 800ab22:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab24:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab26:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ab28:	2a00      	cmp	r2, #0
 800ab2a:	d10c      	bne.n	800ab46 <prvCopyDataToQueue+0x28>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab2c:	6803      	ldr	r3, [r0, #0]
BaseType_t xReturn = pdFALSE;
 800ab2e:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <prvCopyDataToQueue+0x1c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab34:	3501      	adds	r5, #1
 800ab36:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800ab38:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab3a:	68a0      	ldr	r0, [r4, #8]
 800ab3c:	f000 ff2a 	bl	800b994 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	60a3      	str	r3, [r4, #8]
 800ab44:	e7f6      	b.n	800ab34 <prvCopyDataToQueue+0x16>
	else if( xPosition == queueSEND_TO_BACK )
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	d10d      	bne.n	800ab66 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab4a:	6840      	ldr	r0, [r0, #4]
 800ab4c:	f003 fc4a 	bl	800e3e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab50:	6863      	ldr	r3, [r4, #4]
 800ab52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ab54:	189b      	adds	r3, r3, r2
 800ab56:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab58:	68a2      	ldr	r2, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ab5a:	0030      	movs	r0, r6
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d3e9      	bcc.n	800ab34 <prvCopyDataToQueue+0x16>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	6063      	str	r3, [r4, #4]
 800ab64:	e7e6      	b.n	800ab34 <prvCopyDataToQueue+0x16>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab66:	68c0      	ldr	r0, [r0, #12]
 800ab68:	f003 fc3c 	bl	800e3e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ab6e:	4251      	negs	r1, r2
 800ab70:	68e3      	ldr	r3, [r4, #12]
 800ab72:	1a9b      	subs	r3, r3, r2
 800ab74:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d202      	bcs.n	800ab82 <prvCopyDataToQueue+0x64>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab7c:	68a3      	ldr	r3, [r4, #8]
 800ab7e:	185b      	adds	r3, r3, r1
 800ab80:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800ab82:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800ab84:	2e02      	cmp	r6, #2
 800ab86:	d1d5      	bne.n	800ab34 <prvCopyDataToQueue+0x16>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab88:	2d00      	cmp	r5, #0
 800ab8a:	d0d3      	beq.n	800ab34 <prvCopyDataToQueue+0x16>
				--uxMessagesWaiting;
 800ab8c:	3d01      	subs	r5, #1
 800ab8e:	e7d1      	b.n	800ab34 <prvCopyDataToQueue+0x16>

0800ab90 <prvCopyDataFromQueue>:
{
 800ab90:	b510      	push	{r4, lr}
 800ab92:	0003      	movs	r3, r0
 800ab94:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	d00a      	beq.n	800abb2 <prvCopyDataFromQueue+0x22>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab9c:	68dc      	ldr	r4, [r3, #12]
 800ab9e:	18a4      	adds	r4, r4, r2
 800aba0:	60dc      	str	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aba2:	6899      	ldr	r1, [r3, #8]
 800aba4:	428c      	cmp	r4, r1
 800aba6:	d301      	bcc.n	800abac <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aba8:	6819      	ldr	r1, [r3, #0]
 800abaa:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abac:	68d9      	ldr	r1, [r3, #12]
 800abae:	f003 fc19 	bl	800e3e4 <memcpy>
}
 800abb2:	bd10      	pop	{r4, pc}

0800abb4 <prvUnlockQueue>:
{
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 800abb8:	f001 f952 	bl	800be60 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800abbc:	2345      	movs	r3, #69	; 0x45
 800abbe:	5cec      	ldrb	r4, [r5, r3]
 800abc0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abc2:	2c00      	cmp	r4, #0
 800abc4:	dd11      	ble.n	800abea <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc6:	002e      	movs	r6, r5
 800abc8:	3624      	adds	r6, #36	; 0x24
 800abca:	e003      	b.n	800abd4 <prvUnlockQueue+0x20>
			--cTxLock;
 800abcc:	3c01      	subs	r4, #1
 800abce:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abd0:	2c00      	cmp	r4, #0
 800abd2:	d00a      	beq.n	800abea <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abd4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d007      	beq.n	800abea <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abda:	0030      	movs	r0, r6
 800abdc:	f000 fe44 	bl	800b868 <xTaskRemoveFromEventList>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d0f3      	beq.n	800abcc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800abe4:	f000 fec0 	bl	800b968 <vTaskMissedYield>
 800abe8:	e7f0      	b.n	800abcc <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 800abea:	2345      	movs	r3, #69	; 0x45
 800abec:	22ff      	movs	r2, #255	; 0xff
 800abee:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 800abf0:	f001 f942 	bl	800be78 <vPortExitCritical>
	taskENTER_CRITICAL();
 800abf4:	f001 f934 	bl	800be60 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800abf8:	2344      	movs	r3, #68	; 0x44
 800abfa:	5cec      	ldrb	r4, [r5, r3]
 800abfc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abfe:	2c00      	cmp	r4, #0
 800ac00:	dd11      	ble.n	800ac26 <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac02:	002e      	movs	r6, r5
 800ac04:	3610      	adds	r6, #16
 800ac06:	e003      	b.n	800ac10 <prvUnlockQueue+0x5c>
				--cRxLock;
 800ac08:	3c01      	subs	r4, #1
 800ac0a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac0c:	2c00      	cmp	r4, #0
 800ac0e:	d00a      	beq.n	800ac26 <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac10:	692b      	ldr	r3, [r5, #16]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d007      	beq.n	800ac26 <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac16:	0030      	movs	r0, r6
 800ac18:	f000 fe26 	bl	800b868 <xTaskRemoveFromEventList>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d0f3      	beq.n	800ac08 <prvUnlockQueue+0x54>
					vTaskMissedYield();
 800ac20:	f000 fea2 	bl	800b968 <vTaskMissedYield>
 800ac24:	e7f0      	b.n	800ac08 <prvUnlockQueue+0x54>
		pxQueue->cRxLock = queueUNLOCKED;
 800ac26:	2344      	movs	r3, #68	; 0x44
 800ac28:	22ff      	movs	r2, #255	; 0xff
 800ac2a:	54ea      	strb	r2, [r5, r3]
	taskEXIT_CRITICAL();
 800ac2c:	f001 f924 	bl	800be78 <vPortExitCritical>
}
 800ac30:	bd70      	pop	{r4, r5, r6, pc}

0800ac32 <xQueueGenericReset>:
{
 800ac32:	b570      	push	{r4, r5, r6, lr}
 800ac34:	0004      	movs	r4, r0
 800ac36:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	d01b      	beq.n	800ac74 <xQueueGenericReset+0x42>
	taskENTER_CRITICAL();
 800ac3c:	f001 f910 	bl	800be60 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac40:	6822      	ldr	r2, [r4, #0]
 800ac42:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ac44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ac46:	434b      	muls	r3, r1
 800ac48:	18d0      	adds	r0, r2, r3
 800ac4a:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac4c:	2000      	movs	r0, #0
 800ac4e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac50:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac52:	1a5b      	subs	r3, r3, r1
 800ac54:	18d2      	adds	r2, r2, r3
 800ac56:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac58:	23ff      	movs	r3, #255	; 0xff
 800ac5a:	2244      	movs	r2, #68	; 0x44
 800ac5c:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800ac5e:	3201      	adds	r2, #1
 800ac60:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
 800ac62:	2d00      	cmp	r5, #0
 800ac64:	d111      	bne.n	800ac8a <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac66:	6923      	ldr	r3, [r4, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d105      	bne.n	800ac78 <xQueueGenericReset+0x46>
	taskEXIT_CRITICAL();
 800ac6c:	f001 f904 	bl	800be78 <vPortExitCritical>
}
 800ac70:	2001      	movs	r0, #1
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800ac74:	b672      	cpsid	i
 800ac76:	e7fe      	b.n	800ac76 <xQueueGenericReset+0x44>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac78:	0020      	movs	r0, r4
 800ac7a:	3010      	adds	r0, #16
 800ac7c:	f000 fdf4 	bl	800b868 <xTaskRemoveFromEventList>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d0f3      	beq.n	800ac6c <xQueueGenericReset+0x3a>
					queueYIELD_IF_USING_PREEMPTION();
 800ac84:	f001 f8e0 	bl	800be48 <vPortYield>
 800ac88:	e7f0      	b.n	800ac6c <xQueueGenericReset+0x3a>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac8a:	0020      	movs	r0, r4
 800ac8c:	3010      	adds	r0, #16
 800ac8e:	f7ff fef9 	bl	800aa84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac92:	0020      	movs	r0, r4
 800ac94:	3024      	adds	r0, #36	; 0x24
 800ac96:	f7ff fef5 	bl	800aa84 <vListInitialise>
 800ac9a:	e7e7      	b.n	800ac6c <xQueueGenericReset+0x3a>

0800ac9c <xQueueGenericCreateStatic>:
	{
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	001d      	movs	r5, r3
 800aca2:	ac06      	add	r4, sp, #24
 800aca4:	7824      	ldrb	r4, [r4, #0]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d101      	bne.n	800acae <xQueueGenericCreateStatic+0x12>
 800acaa:	b672      	cpsid	i
 800acac:	e7fe      	b.n	800acac <xQueueGenericCreateStatic+0x10>
		configASSERT( pxStaticQueue != NULL );
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d005      	beq.n	800acbe <xQueueGenericCreateStatic+0x22>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acb2:	2a00      	cmp	r2, #0
 800acb4:	d005      	beq.n	800acc2 <xQueueGenericCreateStatic+0x26>
 800acb6:	2900      	cmp	r1, #0
 800acb8:	d107      	bne.n	800acca <xQueueGenericCreateStatic+0x2e>
 800acba:	b672      	cpsid	i
 800acbc:	e7fe      	b.n	800acbc <xQueueGenericCreateStatic+0x20>
		configASSERT( pxStaticQueue != NULL );
 800acbe:	b672      	cpsid	i
 800acc0:	e7fe      	b.n	800acc0 <xQueueGenericCreateStatic+0x24>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acc2:	2900      	cmp	r1, #0
 800acc4:	d018      	beq.n	800acf8 <xQueueGenericCreateStatic+0x5c>
 800acc6:	b672      	cpsid	i
 800acc8:	e7fe      	b.n	800acc8 <xQueueGenericCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acca:	2350      	movs	r3, #80	; 0x50
 800accc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acce:	9b01      	ldr	r3, [sp, #4]
 800acd0:	2b50      	cmp	r3, #80	; 0x50
 800acd2:	d001      	beq.n	800acd8 <xQueueGenericCreateStatic+0x3c>
 800acd4:	b672      	cpsid	i
 800acd6:	e7fe      	b.n	800acd6 <xQueueGenericCreateStatic+0x3a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800acd8:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800acda:	2346      	movs	r3, #70	; 0x46
 800acdc:	2601      	movs	r6, #1
 800acde:	54ee      	strb	r6, [r5, r3]
 800ace0:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800ace2:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ace4:	6429      	str	r1, [r5, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ace6:	2101      	movs	r1, #1
 800ace8:	0028      	movs	r0, r5
 800acea:	f7ff ffa2 	bl	800ac32 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800acee:	234c      	movs	r3, #76	; 0x4c
 800acf0:	54ec      	strb	r4, [r5, r3]
	}
 800acf2:	0028      	movs	r0, r5
 800acf4:	b002      	add	sp, #8
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acf8:	2350      	movs	r3, #80	; 0x50
 800acfa:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acfc:	9b01      	ldr	r3, [sp, #4]
 800acfe:	2b50      	cmp	r3, #80	; 0x50
 800ad00:	d1e8      	bne.n	800acd4 <xQueueGenericCreateStatic+0x38>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad02:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad04:	002a      	movs	r2, r5
 800ad06:	e7e8      	b.n	800acda <xQueueGenericCreateStatic+0x3e>

0800ad08 <xQueueGenericCreate>:
	{
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	0004      	movs	r4, r0
 800ad0c:	000d      	movs	r5, r1
 800ad0e:	0016      	movs	r6, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d101      	bne.n	800ad18 <xQueueGenericCreate+0x10>
 800ad14:	b672      	cpsid	i
 800ad16:	e7fe      	b.n	800ad16 <xQueueGenericCreate+0xe>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad18:	0008      	movs	r0, r1
 800ad1a:	4360      	muls	r0, r4
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad1c:	3050      	adds	r0, #80	; 0x50
 800ad1e:	f001 f961 	bl	800bfe4 <pvPortMalloc>
 800ad22:	1e07      	subs	r7, r0, #0
		if( pxNewQueue != NULL )
 800ad24:	d00f      	beq.n	800ad46 <xQueueGenericCreate+0x3e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad26:	2346      	movs	r3, #70	; 0x46
 800ad28:	2200      	movs	r2, #0
 800ad2a:	54c2      	strb	r2, [r0, r3]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad2c:	0003      	movs	r3, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	d000      	beq.n	800ad34 <xQueueGenericCreate+0x2c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad32:	3350      	adds	r3, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad34:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800ad36:	63fc      	str	r4, [r7, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad38:	643d      	str	r5, [r7, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	0038      	movs	r0, r7
 800ad3e:	f7ff ff78 	bl	800ac32 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800ad42:	234c      	movs	r3, #76	; 0x4c
 800ad44:	54fe      	strb	r6, [r7, r3]
	}
 800ad46:	0038      	movs	r0, r7
 800ad48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad4a <xQueueGenericSend>:
{
 800ad4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad4c:	46d6      	mov	lr, sl
 800ad4e:	464f      	mov	r7, r9
 800ad50:	4646      	mov	r6, r8
 800ad52:	b5c0      	push	{r6, r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	0004      	movs	r4, r0
 800ad58:	4688      	mov	r8, r1
 800ad5a:	9201      	str	r2, [sp, #4]
 800ad5c:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d008      	beq.n	800ad74 <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad62:	2900      	cmp	r1, #0
 800ad64:	d008      	beq.n	800ad78 <xQueueGenericSend+0x2e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad66:	2d02      	cmp	r5, #2
 800ad68:	d10b      	bne.n	800ad82 <xQueueGenericSend+0x38>
 800ad6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d008      	beq.n	800ad82 <xQueueGenericSend+0x38>
 800ad70:	b672      	cpsid	i
 800ad72:	e7fe      	b.n	800ad72 <xQueueGenericSend+0x28>
	configASSERT( pxQueue );
 800ad74:	b672      	cpsid	i
 800ad76:	e7fe      	b.n	800ad76 <xQueueGenericSend+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0f3      	beq.n	800ad66 <xQueueGenericSend+0x1c>
 800ad7e:	b672      	cpsid	i
 800ad80:	e7fe      	b.n	800ad80 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad82:	f000 fdf7 	bl	800b974 <xTaskGetSchedulerState>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d104      	bne.n	800ad94 <xQueueGenericSend+0x4a>
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d006      	beq.n	800ad9e <xQueueGenericSend+0x54>
 800ad90:	b672      	cpsid	i
 800ad92:	e7fe      	b.n	800ad92 <xQueueGenericSend+0x48>
 800ad94:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800ad96:	2744      	movs	r7, #68	; 0x44
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4699      	mov	r9, r3
 800ad9c:	e034      	b.n	800ae08 <xQueueGenericSend+0xbe>
 800ad9e:	2600      	movs	r6, #0
 800ada0:	e7f9      	b.n	800ad96 <xQueueGenericSend+0x4c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ada2:	002a      	movs	r2, r5
 800ada4:	4641      	mov	r1, r8
 800ada6:	0020      	movs	r0, r4
 800ada8:	f7ff feb9 	bl	800ab1e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <xQueueGenericSend+0x7e>
					else if( xYieldRequired != pdFALSE )
 800adb2:	2800      	cmp	r0, #0
 800adb4:	d111      	bne.n	800adda <xQueueGenericSend+0x90>
				taskEXIT_CRITICAL();
 800adb6:	f001 f85f 	bl	800be78 <vPortExitCritical>
				return pdPASS;
 800adba:	2001      	movs	r0, #1
}
 800adbc:	b004      	add	sp, #16
 800adbe:	bce0      	pop	{r5, r6, r7}
 800adc0:	46ba      	mov	sl, r7
 800adc2:	46b1      	mov	r9, r6
 800adc4:	46a8      	mov	r8, r5
 800adc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adc8:	0020      	movs	r0, r4
 800adca:	3024      	adds	r0, #36	; 0x24
 800adcc:	f000 fd4c 	bl	800b868 <xTaskRemoveFromEventList>
 800add0:	2800      	cmp	r0, #0
 800add2:	d0f0      	beq.n	800adb6 <xQueueGenericSend+0x6c>
							queueYIELD_IF_USING_PREEMPTION();
 800add4:	f001 f838 	bl	800be48 <vPortYield>
 800add8:	e7ed      	b.n	800adb6 <xQueueGenericSend+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800adda:	f001 f835 	bl	800be48 <vPortYield>
 800adde:	e7ea      	b.n	800adb6 <xQueueGenericSend+0x6c>
					taskEXIT_CRITICAL();
 800ade0:	f001 f84a 	bl	800be78 <vPortExitCritical>
					return errQUEUE_FULL;
 800ade4:	2000      	movs	r0, #0
 800ade6:	e7e9      	b.n	800adbc <xQueueGenericSend+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ade8:	a802      	add	r0, sp, #8
 800adea:	f000 fd7d 	bl	800b8e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adee:	e018      	b.n	800ae22 <xQueueGenericSend+0xd8>
		prvLockQueue( pxQueue );
 800adf0:	464b      	mov	r3, r9
 800adf2:	55e3      	strb	r3, [r4, r7]
 800adf4:	e01f      	b.n	800ae36 <xQueueGenericSend+0xec>
 800adf6:	464a      	mov	r2, r9
 800adf8:	54e2      	strb	r2, [r4, r3]
 800adfa:	e021      	b.n	800ae40 <xQueueGenericSend+0xf6>
				prvUnlockQueue( pxQueue );
 800adfc:	0020      	movs	r0, r4
 800adfe:	f7ff fed9 	bl	800abb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae02:	f000 fc23 	bl	800b64c <xTaskResumeAll>
 800ae06:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800ae08:	f001 f82a 	bl	800be60 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ae0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d3c6      	bcc.n	800ada2 <xQueueGenericSend+0x58>
 800ae14:	2d02      	cmp	r5, #2
 800ae16:	d0c4      	beq.n	800ada2 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d0e0      	beq.n	800ade0 <xQueueGenericSend+0x96>
				else if( xEntryTimeSet == pdFALSE )
 800ae1e:	2e00      	cmp	r6, #0
 800ae20:	d0e2      	beq.n	800ade8 <xQueueGenericSend+0x9e>
		taskEXIT_CRITICAL();
 800ae22:	f001 f829 	bl	800be78 <vPortExitCritical>
		vTaskSuspendAll();
 800ae26:	f000 fb69 	bl	800b4fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae2a:	f001 f819 	bl	800be60 <vPortEnterCritical>
 800ae2e:	5de3      	ldrb	r3, [r4, r7]
 800ae30:	b25b      	sxtb	r3, r3
 800ae32:	3301      	adds	r3, #1
 800ae34:	d0dc      	beq.n	800adf0 <xQueueGenericSend+0xa6>
 800ae36:	2345      	movs	r3, #69	; 0x45
 800ae38:	5ce2      	ldrb	r2, [r4, r3]
 800ae3a:	b252      	sxtb	r2, r2
 800ae3c:	3201      	adds	r2, #1
 800ae3e:	d0da      	beq.n	800adf6 <xQueueGenericSend+0xac>
 800ae40:	f001 f81a 	bl	800be78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae44:	a901      	add	r1, sp, #4
 800ae46:	a802      	add	r0, sp, #8
 800ae48:	f000 fd5a 	bl	800b900 <xTaskCheckForTimeOut>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d117      	bne.n	800ae80 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ae50:	f001 f806 	bl	800be60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ae54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ae56:	469a      	mov	sl, r3
 800ae58:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ae5a:	f001 f80d 	bl	800be78 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae5e:	45b2      	cmp	sl, r6
 800ae60:	d1cc      	bne.n	800adfc <xQueueGenericSend+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae62:	9901      	ldr	r1, [sp, #4]
 800ae64:	0020      	movs	r0, r4
 800ae66:	3010      	adds	r0, #16
 800ae68:	f000 fcd4 	bl	800b814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae6c:	0020      	movs	r0, r4
 800ae6e:	f7ff fea1 	bl	800abb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae72:	f000 fbeb 	bl	800b64c <xTaskResumeAll>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d1c5      	bne.n	800ae06 <xQueueGenericSend+0xbc>
					portYIELD_WITHIN_API();
 800ae7a:	f000 ffe5 	bl	800be48 <vPortYield>
 800ae7e:	e7c2      	b.n	800ae06 <xQueueGenericSend+0xbc>
			prvUnlockQueue( pxQueue );
 800ae80:	0020      	movs	r0, r4
 800ae82:	f7ff fe97 	bl	800abb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae86:	f000 fbe1 	bl	800b64c <xTaskResumeAll>
			return errQUEUE_FULL;
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	e796      	b.n	800adbc <xQueueGenericSend+0x72>

0800ae8e <xQueueGenericSendFromISR>:
{
 800ae8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae90:	46c6      	mov	lr, r8
 800ae92:	b500      	push	{lr}
 800ae94:	b082      	sub	sp, #8
 800ae96:	0004      	movs	r4, r0
 800ae98:	000f      	movs	r7, r1
 800ae9a:	9201      	str	r2, [sp, #4]
 800ae9c:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d008      	beq.n	800aeb4 <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aea2:	2900      	cmp	r1, #0
 800aea4:	d008      	beq.n	800aeb8 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aea6:	2d02      	cmp	r5, #2
 800aea8:	d135      	bne.n	800af16 <xQueueGenericSendFromISR+0x88>
 800aeaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d01a      	beq.n	800aee6 <xQueueGenericSendFromISR+0x58>
 800aeb0:	b672      	cpsid	i
 800aeb2:	e7fe      	b.n	800aeb2 <xQueueGenericSendFromISR+0x24>
	configASSERT( pxQueue );
 800aeb4:	b672      	cpsid	i
 800aeb6:	e7fe      	b.n	800aeb6 <xQueueGenericSendFromISR+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aeb8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0f3      	beq.n	800aea6 <xQueueGenericSendFromISR+0x18>
 800aebe:	b672      	cpsid	i
 800aec0:	e7fe      	b.n	800aec0 <xQueueGenericSendFromISR+0x32>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
 800aec4:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d02d      	beq.n	800af26 <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeca:	0020      	movs	r0, r4
 800aecc:	3024      	adds	r0, #36	; 0x24
 800aece:	f000 fccb 	bl	800b868 <xTaskRemoveFromEventList>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d027      	beq.n	800af26 <xQueueGenericSendFromISR+0x98>
							if( pxHigherPriorityTaskWoken != NULL )
 800aed6:	9a01      	ldr	r2, [sp, #4]
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d002      	beq.n	800aee2 <xQueueGenericSendFromISR+0x54>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aedc:	2301      	movs	r3, #1
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	e021      	b.n	800af26 <xQueueGenericSendFromISR+0x98>
			xReturn = pdPASS;
 800aee2:	2501      	movs	r5, #1
 800aee4:	e01f      	b.n	800af26 <xQueueGenericSendFromISR+0x98>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aee6:	f000 ffd7 	bl	800be98 <ulSetInterruptMaskFromISR>
 800aeea:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aeec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 800aeee:	2345      	movs	r3, #69	; 0x45
 800aef0:	5ce3      	ldrb	r3, [r4, r3]
 800aef2:	b25b      	sxtb	r3, r3
 800aef4:	4698      	mov	r8, r3
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aef8:	002a      	movs	r2, r5
 800aefa:	0039      	movs	r1, r7
 800aefc:	0020      	movs	r0, r4
 800aefe:	f7ff fe0e 	bl	800ab1e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800af02:	4643      	mov	r3, r8
 800af04:	3301      	adds	r3, #1
 800af06:	d0dc      	beq.n	800aec2 <xQueueGenericSendFromISR+0x34>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af08:	4643      	mov	r3, r8
 800af0a:	3301      	adds	r3, #1
 800af0c:	b25b      	sxtb	r3, r3
 800af0e:	2245      	movs	r2, #69	; 0x45
 800af10:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
 800af12:	2501      	movs	r5, #1
 800af14:	e007      	b.n	800af26 <xQueueGenericSendFromISR+0x98>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af16:	f000 ffbf 	bl	800be98 <ulSetInterruptMaskFromISR>
 800af1a:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800af1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800af20:	429a      	cmp	r2, r3
 800af22:	d3e4      	bcc.n	800aeee <xQueueGenericSendFromISR+0x60>
			xReturn = errQUEUE_FULL;
 800af24:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800af26:	0030      	movs	r0, r6
 800af28:	f000 ffba 	bl	800bea0 <vClearInterruptMaskFromISR>
}
 800af2c:	0028      	movs	r0, r5
 800af2e:	b002      	add	sp, #8
 800af30:	bc80      	pop	{r7}
 800af32:	46b8      	mov	r8, r7
 800af34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af36 <xQueueReceive>:
{
 800af36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af38:	46ce      	mov	lr, r9
 800af3a:	4647      	mov	r7, r8
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b085      	sub	sp, #20
 800af40:	1e04      	subs	r4, r0, #0
 800af42:	4688      	mov	r8, r1
 800af44:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800af46:	d00a      	beq.n	800af5e <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af48:	2900      	cmp	r1, #0
 800af4a:	d00a      	beq.n	800af62 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af4c:	f000 fd12 	bl	800b974 <xTaskGetSchedulerState>
 800af50:	2800      	cmp	r0, #0
 800af52:	d10b      	bne.n	800af6c <xQueueReceive+0x36>
 800af54:	9b01      	ldr	r3, [sp, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00d      	beq.n	800af76 <xQueueReceive+0x40>
 800af5a:	b672      	cpsid	i
 800af5c:	e7fe      	b.n	800af5c <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
 800af5e:	b672      	cpsid	i
 800af60:	e7fe      	b.n	800af60 <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0f1      	beq.n	800af4c <xQueueReceive+0x16>
 800af68:	b672      	cpsid	i
 800af6a:	e7fe      	b.n	800af6a <xQueueReceive+0x34>
 800af6c:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800af6e:	2544      	movs	r5, #68	; 0x44
 800af70:	2300      	movs	r3, #0
 800af72:	4699      	mov	r9, r3
 800af74:	e03b      	b.n	800afee <xQueueReceive+0xb8>
 800af76:	2700      	movs	r7, #0
 800af78:	e7f9      	b.n	800af6e <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af7a:	4641      	mov	r1, r8
 800af7c:	0020      	movs	r0, r4
 800af7e:	f7ff fe07 	bl	800ab90 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af82:	1e73      	subs	r3, r6, #1
 800af84:	63a3      	str	r3, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af86:	6923      	ldr	r3, [r4, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d107      	bne.n	800af9c <xQueueReceive+0x66>
				taskEXIT_CRITICAL();
 800af8c:	f000 ff74 	bl	800be78 <vPortExitCritical>
				return pdPASS;
 800af90:	2001      	movs	r0, #1
}
 800af92:	b005      	add	sp, #20
 800af94:	bcc0      	pop	{r6, r7}
 800af96:	46b9      	mov	r9, r7
 800af98:	46b0      	mov	r8, r6
 800af9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af9c:	0020      	movs	r0, r4
 800af9e:	3010      	adds	r0, #16
 800afa0:	f000 fc62 	bl	800b868 <xTaskRemoveFromEventList>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d0f1      	beq.n	800af8c <xQueueReceive+0x56>
						queueYIELD_IF_USING_PREEMPTION();
 800afa8:	f000 ff4e 	bl	800be48 <vPortYield>
 800afac:	e7ee      	b.n	800af8c <xQueueReceive+0x56>
					taskEXIT_CRITICAL();
 800afae:	f000 ff63 	bl	800be78 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800afb2:	2000      	movs	r0, #0
 800afb4:	e7ed      	b.n	800af92 <xQueueReceive+0x5c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afb6:	a802      	add	r0, sp, #8
 800afb8:	f000 fc96 	bl	800b8e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afbc:	e021      	b.n	800b002 <xQueueReceive+0xcc>
		prvLockQueue( pxQueue );
 800afbe:	464b      	mov	r3, r9
 800afc0:	5563      	strb	r3, [r4, r5]
 800afc2:	e028      	b.n	800b016 <xQueueReceive+0xe0>
 800afc4:	2345      	movs	r3, #69	; 0x45
 800afc6:	464a      	mov	r2, r9
 800afc8:	54e2      	strb	r2, [r4, r3]
 800afca:	e029      	b.n	800b020 <xQueueReceive+0xea>
				prvUnlockQueue( pxQueue );
 800afcc:	0020      	movs	r0, r4
 800afce:	f7ff fdf1 	bl	800abb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afd2:	f000 fb3b 	bl	800b64c <xTaskResumeAll>
 800afd6:	e009      	b.n	800afec <xQueueReceive+0xb6>
			prvUnlockQueue( pxQueue );
 800afd8:	0020      	movs	r0, r4
 800afda:	f7ff fdeb 	bl	800abb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afde:	f000 fb35 	bl	800b64c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afe2:	0020      	movs	r0, r4
 800afe4:	f7ff fd91 	bl	800ab0a <prvIsQueueEmpty>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d135      	bne.n	800b058 <xQueueReceive+0x122>
 800afec:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800afee:	f000 ff37 	bl	800be60 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aff2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aff4:	2e00      	cmp	r6, #0
 800aff6:	d1c0      	bne.n	800af7a <xQueueReceive+0x44>
				if( xTicksToWait == ( TickType_t ) 0 )
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0d7      	beq.n	800afae <xQueueReceive+0x78>
				else if( xEntryTimeSet == pdFALSE )
 800affe:	2f00      	cmp	r7, #0
 800b000:	d0d9      	beq.n	800afb6 <xQueueReceive+0x80>
		taskEXIT_CRITICAL();
 800b002:	f000 ff39 	bl	800be78 <vPortExitCritical>
		vTaskSuspendAll();
 800b006:	f000 fa79 	bl	800b4fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b00a:	f000 ff29 	bl	800be60 <vPortEnterCritical>
 800b00e:	5d63      	ldrb	r3, [r4, r5]
 800b010:	b25b      	sxtb	r3, r3
 800b012:	3301      	adds	r3, #1
 800b014:	d0d3      	beq.n	800afbe <xQueueReceive+0x88>
 800b016:	2345      	movs	r3, #69	; 0x45
 800b018:	5ce3      	ldrb	r3, [r4, r3]
 800b01a:	b25b      	sxtb	r3, r3
 800b01c:	3301      	adds	r3, #1
 800b01e:	d0d1      	beq.n	800afc4 <xQueueReceive+0x8e>
 800b020:	f000 ff2a 	bl	800be78 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b024:	a901      	add	r1, sp, #4
 800b026:	a802      	add	r0, sp, #8
 800b028:	f000 fc6a 	bl	800b900 <xTaskCheckForTimeOut>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	d1d3      	bne.n	800afd8 <xQueueReceive+0xa2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b030:	0020      	movs	r0, r4
 800b032:	f7ff fd6a 	bl	800ab0a <prvIsQueueEmpty>
 800b036:	2800      	cmp	r0, #0
 800b038:	d0c8      	beq.n	800afcc <xQueueReceive+0x96>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b03a:	9901      	ldr	r1, [sp, #4]
 800b03c:	0020      	movs	r0, r4
 800b03e:	3024      	adds	r0, #36	; 0x24
 800b040:	f000 fbe8 	bl	800b814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b044:	0020      	movs	r0, r4
 800b046:	f7ff fdb5 	bl	800abb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b04a:	f000 faff 	bl	800b64c <xTaskResumeAll>
 800b04e:	2800      	cmp	r0, #0
 800b050:	d1cc      	bne.n	800afec <xQueueReceive+0xb6>
					portYIELD_WITHIN_API();
 800b052:	f000 fef9 	bl	800be48 <vPortYield>
 800b056:	e7c9      	b.n	800afec <xQueueReceive+0xb6>
				return errQUEUE_EMPTY;
 800b058:	2000      	movs	r0, #0
 800b05a:	e79a      	b.n	800af92 <xQueueReceive+0x5c>

0800b05c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b05c:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b05e:	4a08      	ldr	r2, [pc, #32]	; (800b080 <vQueueAddToRegistry+0x24>)
 800b060:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b062:	6814      	ldr	r4, [r2, #0]
 800b064:	2c00      	cmp	r4, #0
 800b066:	d004      	beq.n	800b072 <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b068:	3301      	adds	r3, #1
 800b06a:	3208      	adds	r2, #8
 800b06c:	2b08      	cmp	r3, #8
 800b06e:	d1f8      	bne.n	800b062 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b070:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b072:	4a03      	ldr	r2, [pc, #12]	; (800b080 <vQueueAddToRegistry+0x24>)
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b078:	18d2      	adds	r2, r2, r3
 800b07a:	6050      	str	r0, [r2, #4]
				break;
 800b07c:	e7f8      	b.n	800b070 <vQueueAddToRegistry+0x14>
 800b07e:	46c0      	nop			; (mov r8, r8)
 800b080:	200046cc 	.word	0x200046cc

0800b084 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	0004      	movs	r4, r0
 800b088:	000d      	movs	r5, r1
 800b08a:	0016      	movs	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b08c:	f000 fee8 	bl	800be60 <vPortEnterCritical>
 800b090:	2344      	movs	r3, #68	; 0x44
 800b092:	5ce3      	ldrb	r3, [r4, r3]
 800b094:	b25b      	sxtb	r3, r3
 800b096:	3301      	adds	r3, #1
 800b098:	d00d      	beq.n	800b0b6 <vQueueWaitForMessageRestricted+0x32>
 800b09a:	2345      	movs	r3, #69	; 0x45
 800b09c:	5ce3      	ldrb	r3, [r4, r3]
 800b09e:	b25b      	sxtb	r3, r3
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	d00c      	beq.n	800b0be <vQueueWaitForMessageRestricted+0x3a>
 800b0a4:	f000 fee8 	bl	800be78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00b      	beq.n	800b0c6 <vQueueWaitForMessageRestricted+0x42>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0ae:	0020      	movs	r0, r4
 800b0b0:	f7ff fd80 	bl	800abb4 <prvUnlockQueue>
	}
 800b0b4:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800b0b6:	2344      	movs	r3, #68	; 0x44
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	54e2      	strb	r2, [r4, r3]
 800b0bc:	e7ed      	b.n	800b09a <vQueueWaitForMessageRestricted+0x16>
 800b0be:	2345      	movs	r3, #69	; 0x45
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	54e2      	strb	r2, [r4, r3]
 800b0c4:	e7ee      	b.n	800b0a4 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0c6:	0020      	movs	r0, r4
 800b0c8:	3024      	adds	r0, #36	; 0x24
 800b0ca:	0032      	movs	r2, r6
 800b0cc:	0029      	movs	r1, r5
 800b0ce:	f000 fbb3 	bl	800b838 <vTaskPlaceOnEventListRestricted>
 800b0d2:	e7ec      	b.n	800b0ae <vQueueWaitForMessageRestricted+0x2a>

0800b0d4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0d4:	4b08      	ldr	r3, [pc, #32]	; (800b0f8 <prvResetNextTaskUnblockTime+0x24>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d104      	bne.n	800b0e8 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0de:	4b07      	ldr	r3, [pc, #28]	; (800b0fc <prvResetNextTaskUnblockTime+0x28>)
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	4252      	negs	r2, r2
 800b0e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0e6:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e8:	4b03      	ldr	r3, [pc, #12]	; (800b0f8 <prvResetNextTaskUnblockTime+0x24>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	4b02      	ldr	r3, [pc, #8]	; (800b0fc <prvResetNextTaskUnblockTime+0x28>)
 800b0f4:	601a      	str	r2, [r3, #0]
}
 800b0f6:	e7f6      	b.n	800b0e6 <prvResetNextTaskUnblockTime+0x12>
 800b0f8:	20004710 	.word	0x20004710
 800b0fc:	20004bb4 	.word	0x20004bb4

0800b100 <prvInitialiseNewTask>:
{
 800b100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b102:	46d6      	mov	lr, sl
 800b104:	464f      	mov	r7, r9
 800b106:	4646      	mov	r6, r8
 800b108:	b5c0      	push	{r6, r7, lr}
 800b10a:	4681      	mov	r9, r0
 800b10c:	000f      	movs	r7, r1
 800b10e:	469a      	mov	sl, r3
 800b110:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b112:	0094      	lsls	r4, r2, #2
 800b114:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800b116:	0022      	movs	r2, r4
 800b118:	21a5      	movs	r1, #165	; 0xa5
 800b11a:	f002 ff9b 	bl	800e054 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b11e:	3c04      	subs	r4, #4
 800b120:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b122:	191b      	adds	r3, r3, r4
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b124:	2207      	movs	r2, #7
 800b126:	4393      	bics	r3, r2
 800b128:	4698      	mov	r8, r3
	if( pcName != NULL )
 800b12a:	2f00      	cmp	r7, #0
 800b12c:	d040      	beq.n	800b1b0 <prvInitialiseNewTask+0xb0>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b12e:	2400      	movs	r4, #0
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b130:	002b      	movs	r3, r5
 800b132:	3334      	adds	r3, #52	; 0x34
 800b134:	5d3e      	ldrb	r6, [r7, r4]
 800b136:	551e      	strb	r6, [r3, r4]
			if( pcName[ x ] == ( char ) 0x00 )
 800b138:	2e00      	cmp	r6, #0
 800b13a:	d002      	beq.n	800b142 <prvInitialiseNewTask+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b13c:	3401      	adds	r4, #1
 800b13e:	2c10      	cmp	r4, #16
 800b140:	d1f8      	bne.n	800b134 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b142:	2343      	movs	r3, #67	; 0x43
 800b144:	2200      	movs	r2, #0
 800b146:	54ea      	strb	r2, [r5, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b148:	9c08      	ldr	r4, [sp, #32]
 800b14a:	2c37      	cmp	r4, #55	; 0x37
 800b14c:	d900      	bls.n	800b150 <prvInitialiseNewTask+0x50>
 800b14e:	2437      	movs	r4, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800b150:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800b152:	64ec      	str	r4, [r5, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b154:	2600      	movs	r6, #0
 800b156:	652e      	str	r6, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b158:	1d28      	adds	r0, r5, #4
 800b15a:	f7ff fc9e 	bl	800aa9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b15e:	0028      	movs	r0, r5
 800b160:	3018      	adds	r0, #24
 800b162:	f7ff fc9a 	bl	800aa9a <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b166:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b168:	2338      	movs	r3, #56	; 0x38
 800b16a:	1b1b      	subs	r3, r3, r4
 800b16c:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b16e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800b170:	23a0      	movs	r3, #160	; 0xa0
 800b172:	50ee      	str	r6, [r5, r3]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b174:	3304      	adds	r3, #4
 800b176:	54ee      	strb	r6, [r5, r3]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b178:	0028      	movs	r0, r5
 800b17a:	3054      	adds	r0, #84	; 0x54
 800b17c:	224c      	movs	r2, #76	; 0x4c
 800b17e:	2100      	movs	r1, #0
 800b180:	f002 ff68 	bl	800e054 <memset>
 800b184:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <prvInitialiseNewTask+0xb8>)
 800b186:	65ab      	str	r3, [r5, #88]	; 0x58
 800b188:	001a      	movs	r2, r3
 800b18a:	3268      	adds	r2, #104	; 0x68
 800b18c:	65ea      	str	r2, [r5, #92]	; 0x5c
 800b18e:	33d0      	adds	r3, #208	; 0xd0
 800b190:	662b      	str	r3, [r5, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b192:	4652      	mov	r2, sl
 800b194:	4649      	mov	r1, r9
 800b196:	4640      	mov	r0, r8
 800b198:	f000 fe44 	bl	800be24 <pxPortInitialiseStack>
 800b19c:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 800b19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d000      	beq.n	800b1a6 <prvInitialiseNewTask+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b1a4:	601d      	str	r5, [r3, #0]
}
 800b1a6:	bce0      	pop	{r5, r6, r7}
 800b1a8:	46ba      	mov	sl, r7
 800b1aa:	46b1      	mov	r9, r6
 800b1ac:	46a8      	mov	r8, r5
 800b1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1b0:	2334      	movs	r3, #52	; 0x34
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	54ea      	strb	r2, [r5, r3]
 800b1b6:	e7c7      	b.n	800b148 <prvInitialiseNewTask+0x48>
 800b1b8:	2000595c 	.word	0x2000595c

0800b1bc <prvAddNewTaskToReadyList>:
{
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	0005      	movs	r5, r0
	taskENTER_CRITICAL();
 800b1c0:	f000 fe4e 	bl	800be60 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800b1c4:	4a2e      	ldr	r2, [pc, #184]	; (800b280 <prvAddNewTaskToReadyList+0xc4>)
 800b1c6:	6813      	ldr	r3, [r2, #0]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1cc:	4b2d      	ldr	r3, [pc, #180]	; (800b284 <prvAddNewTaskToReadyList+0xc8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00c      	beq.n	800b1ee <prvAddNewTaskToReadyList+0x32>
			if( xSchedulerRunning == pdFALSE )
 800b1d4:	4b2c      	ldr	r3, [pc, #176]	; (800b288 <prvAddNewTaskToReadyList+0xcc>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10d      	bne.n	800b1f8 <prvAddNewTaskToReadyList+0x3c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1dc:	4b29      	ldr	r3, [pc, #164]	; (800b284 <prvAddNewTaskToReadyList+0xc8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d807      	bhi.n	800b1f8 <prvAddNewTaskToReadyList+0x3c>
					pxCurrentTCB = pxNewTCB;
 800b1e8:	4b26      	ldr	r3, [pc, #152]	; (800b284 <prvAddNewTaskToReadyList+0xc8>)
 800b1ea:	601d      	str	r5, [r3, #0]
 800b1ec:	e004      	b.n	800b1f8 <prvAddNewTaskToReadyList+0x3c>
			pxCurrentTCB = pxNewTCB;
 800b1ee:	4b25      	ldr	r3, [pc, #148]	; (800b284 <prvAddNewTaskToReadyList+0xc8>)
 800b1f0:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1f2:	6813      	ldr	r3, [r2, #0]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d020      	beq.n	800b23a <prvAddNewTaskToReadyList+0x7e>
		uxTaskNumber++;
 800b1f8:	4a24      	ldr	r2, [pc, #144]	; (800b28c <prvAddNewTaskToReadyList+0xd0>)
 800b1fa:	6813      	ldr	r3, [r2, #0]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b200:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800b202:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b204:	4a22      	ldr	r2, [pc, #136]	; (800b290 <prvAddNewTaskToReadyList+0xd4>)
 800b206:	6812      	ldr	r2, [r2, #0]
 800b208:	4293      	cmp	r3, r2
 800b20a:	d901      	bls.n	800b210 <prvAddNewTaskToReadyList+0x54>
 800b20c:	4a20      	ldr	r2, [pc, #128]	; (800b290 <prvAddNewTaskToReadyList+0xd4>)
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	1d29      	adds	r1, r5, #4
 800b212:	0098      	lsls	r0, r3, #2
 800b214:	18c0      	adds	r0, r0, r3
 800b216:	0080      	lsls	r0, r0, #2
 800b218:	4b1e      	ldr	r3, [pc, #120]	; (800b294 <prvAddNewTaskToReadyList+0xd8>)
 800b21a:	18c0      	adds	r0, r0, r3
 800b21c:	f7ff fc40 	bl	800aaa0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800b220:	f000 fe2a 	bl	800be78 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800b224:	4b18      	ldr	r3, [pc, #96]	; (800b288 <prvAddNewTaskToReadyList+0xcc>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d005      	beq.n	800b238 <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b22c:	4b15      	ldr	r3, [pc, #84]	; (800b284 <prvAddNewTaskToReadyList+0xc8>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b232:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b234:	429a      	cmp	r2, r3
 800b236:	d320      	bcc.n	800b27a <prvAddNewTaskToReadyList+0xbe>
}
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	4c16      	ldr	r4, [pc, #88]	; (800b294 <prvAddNewTaskToReadyList+0xd8>)
 800b23c:	238c      	movs	r3, #140	; 0x8c
 800b23e:	00db      	lsls	r3, r3, #3
 800b240:	18e6      	adds	r6, r4, r3
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b242:	0020      	movs	r0, r4
 800b244:	f7ff fc1e 	bl	800aa84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b248:	3414      	adds	r4, #20
 800b24a:	42b4      	cmp	r4, r6
 800b24c:	d1f9      	bne.n	800b242 <prvAddNewTaskToReadyList+0x86>
	vListInitialise( &xDelayedTaskList1 );
 800b24e:	4e12      	ldr	r6, [pc, #72]	; (800b298 <prvAddNewTaskToReadyList+0xdc>)
 800b250:	0030      	movs	r0, r6
 800b252:	f7ff fc17 	bl	800aa84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b256:	4c11      	ldr	r4, [pc, #68]	; (800b29c <prvAddNewTaskToReadyList+0xe0>)
 800b258:	0020      	movs	r0, r4
 800b25a:	f7ff fc13 	bl	800aa84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b25e:	4810      	ldr	r0, [pc, #64]	; (800b2a0 <prvAddNewTaskToReadyList+0xe4>)
 800b260:	f7ff fc10 	bl	800aa84 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800b264:	480f      	ldr	r0, [pc, #60]	; (800b2a4 <prvAddNewTaskToReadyList+0xe8>)
 800b266:	f7ff fc0d 	bl	800aa84 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800b26a:	480f      	ldr	r0, [pc, #60]	; (800b2a8 <prvAddNewTaskToReadyList+0xec>)
 800b26c:	f7ff fc0a 	bl	800aa84 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800b270:	4b0e      	ldr	r3, [pc, #56]	; (800b2ac <prvAddNewTaskToReadyList+0xf0>)
 800b272:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b274:	4b0e      	ldr	r3, [pc, #56]	; (800b2b0 <prvAddNewTaskToReadyList+0xf4>)
 800b276:	601c      	str	r4, [r3, #0]
}
 800b278:	e7be      	b.n	800b1f8 <prvAddNewTaskToReadyList+0x3c>
			taskYIELD_IF_USING_PREEMPTION();
 800b27a:	f000 fde5 	bl	800be48 <vPortYield>
}
 800b27e:	e7db      	b.n	800b238 <prvAddNewTaskToReadyList+0x7c>
 800b280:	20004b78 	.word	0x20004b78
 800b284:	2000470c 	.word	0x2000470c
 800b288:	20004bd4 	.word	0x20004bd4
 800b28c:	20004b84 	.word	0x20004b84
 800b290:	20004b88 	.word	0x20004b88
 800b294:	20004718 	.word	0x20004718
 800b298:	20004b8c 	.word	0x20004b8c
 800b29c:	20004ba0 	.word	0x20004ba0
 800b2a0:	20004bc0 	.word	0x20004bc0
 800b2a4:	20004bec 	.word	0x20004bec
 800b2a8:	20004bd8 	.word	0x20004bd8
 800b2ac:	20004710 	.word	0x20004710
 800b2b0:	20004714 	.word	0x20004714

0800b2b4 <prvDeleteTCB>:
	{
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	0004      	movs	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b2b8:	3054      	adds	r0, #84	; 0x54
 800b2ba:	f002 ffa7 	bl	800e20c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2be:	23a5      	movs	r3, #165	; 0xa5
 800b2c0:	5ce3      	ldrb	r3, [r4, r3]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d005      	beq.n	800b2d2 <prvDeleteTCB+0x1e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d00a      	beq.n	800b2e0 <prvDeleteTCB+0x2c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2ca:	2b02      	cmp	r3, #2
 800b2cc:	d007      	beq.n	800b2de <prvDeleteTCB+0x2a>
 800b2ce:	b672      	cpsid	i
 800b2d0:	e7fe      	b.n	800b2d0 <prvDeleteTCB+0x1c>
				vPortFree( pxTCB->pxStack );
 800b2d2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b2d4:	f000 ff14 	bl	800c100 <vPortFree>
				vPortFree( pxTCB );
 800b2d8:	0020      	movs	r0, r4
 800b2da:	f000 ff11 	bl	800c100 <vPortFree>
	}
 800b2de:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800b2e0:	0020      	movs	r0, r4
 800b2e2:	f000 ff0d 	bl	800c100 <vPortFree>
 800b2e6:	e7fa      	b.n	800b2de <prvDeleteTCB+0x2a>

0800b2e8 <prvIdleTask>:
{
 800b2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ea:	46c6      	mov	lr, r8
 800b2ec:	b500      	push	{lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <prvIdleTask+0x50>)
 800b2f0:	4698      	mov	r8, r3
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2f2:	4f12      	ldr	r7, [pc, #72]	; (800b33c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800b2f4:	4e12      	ldr	r6, [pc, #72]	; (800b340 <prvIdleTask+0x58>)
				--uxDeletedTasksWaitingCleanUp;
 800b2f6:	001c      	movs	r4, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2f8:	4643      	mov	r3, r8
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d014      	beq.n	800b32a <prvIdleTask+0x42>
			taskENTER_CRITICAL();
 800b300:	f000 fdae 	bl	800be60 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b308:	1d28      	adds	r0, r5, #4
 800b30a:	f7ff fbeb 	bl	800aae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b30e:	6833      	ldr	r3, [r6, #0]
 800b310:	3b01      	subs	r3, #1
 800b312:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b314:	6823      	ldr	r3, [r4, #0]
 800b316:	3b01      	subs	r3, #1
 800b318:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800b31a:	f000 fdad 	bl	800be78 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800b31e:	0028      	movs	r0, r5
 800b320:	f7ff ffc8 	bl	800b2b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1ea      	bne.n	800b300 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b32a:	4b06      	ldr	r3, [pc, #24]	; (800b344 <prvIdleTask+0x5c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d9e2      	bls.n	800b2f8 <prvIdleTask+0x10>
				taskYIELD();
 800b332:	f000 fd89 	bl	800be48 <vPortYield>
 800b336:	e7df      	b.n	800b2f8 <prvIdleTask+0x10>
 800b338:	20004b7c 	.word	0x20004b7c
 800b33c:	20004bec 	.word	0x20004bec
 800b340:	20004b78 	.word	0x20004b78
 800b344:	20004718 	.word	0x20004718

0800b348 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	0004      	movs	r4, r0
 800b34c:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b34e:	4b17      	ldr	r3, [pc, #92]	; (800b3ac <prvAddCurrentTaskToDelayedList+0x64>)
 800b350:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b352:	4b17      	ldr	r3, [pc, #92]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	3004      	adds	r0, #4
 800b358:	f7ff fbc4 	bl	800aae4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b35c:	1c63      	adds	r3, r4, #1
 800b35e:	d00d      	beq.n	800b37c <prvAddCurrentTaskToDelayedList+0x34>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b360:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b362:	4b13      	ldr	r3, [pc, #76]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800b368:	42a6      	cmp	r6, r4
 800b36a:	d910      	bls.n	800b38e <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b36c:	4b11      	ldr	r3, [pc, #68]	; (800b3b4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800b36e:	6818      	ldr	r0, [r3, #0]
 800b370:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b372:	6819      	ldr	r1, [r3, #0]
 800b374:	3104      	adds	r1, #4
 800b376:	f7ff fb9e 	bl	800aab6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b37c:	2d00      	cmp	r5, #0
 800b37e:	d0ef      	beq.n	800b360 <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b380:	4b0b      	ldr	r3, [pc, #44]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b382:	6819      	ldr	r1, [r3, #0]
 800b384:	3104      	adds	r1, #4
 800b386:	480c      	ldr	r0, [pc, #48]	; (800b3b8 <prvAddCurrentTaskToDelayedList+0x70>)
 800b388:	f7ff fb8a 	bl	800aaa0 <vListInsertEnd>
 800b38c:	e7f5      	b.n	800b37a <prvAddCurrentTaskToDelayedList+0x32>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b38e:	4b0b      	ldr	r3, [pc, #44]	; (800b3bc <prvAddCurrentTaskToDelayedList+0x74>)
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <prvAddCurrentTaskToDelayedList+0x68>)
 800b394:	6819      	ldr	r1, [r3, #0]
 800b396:	3104      	adds	r1, #4
 800b398:	f7ff fb8d 	bl	800aab6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b39c:	4b08      	ldr	r3, [pc, #32]	; (800b3c0 <prvAddCurrentTaskToDelayedList+0x78>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	42a3      	cmp	r3, r4
 800b3a2:	d9ea      	bls.n	800b37a <prvAddCurrentTaskToDelayedList+0x32>
					xNextTaskUnblockTime = xTimeToWake;
 800b3a4:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <prvAddCurrentTaskToDelayedList+0x78>)
 800b3a6:	601c      	str	r4, [r3, #0]
}
 800b3a8:	e7e7      	b.n	800b37a <prvAddCurrentTaskToDelayedList+0x32>
 800b3aa:	46c0      	nop			; (mov r8, r8)
 800b3ac:	20004c00 	.word	0x20004c00
 800b3b0:	2000470c 	.word	0x2000470c
 800b3b4:	20004714 	.word	0x20004714
 800b3b8:	20004bd8 	.word	0x20004bd8
 800b3bc:	20004710 	.word	0x20004710
 800b3c0:	20004bb4 	.word	0x20004bb4

0800b3c4 <xTaskCreateStatic>:
	{
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	b086      	sub	sp, #24
		configASSERT( puxStackBuffer != NULL );
 800b3c8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b3ca:	2c00      	cmp	r4, #0
 800b3cc:	d009      	beq.n	800b3e2 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 800b3ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b3d0:	2c00      	cmp	r4, #0
 800b3d2:	d008      	beq.n	800b3e6 <xTaskCreateStatic+0x22>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b3d4:	24a8      	movs	r4, #168	; 0xa8
 800b3d6:	9404      	str	r4, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b3d8:	9c04      	ldr	r4, [sp, #16]
 800b3da:	2ca8      	cmp	r4, #168	; 0xa8
 800b3dc:	d005      	beq.n	800b3ea <xTaskCreateStatic+0x26>
 800b3de:	b672      	cpsid	i
 800b3e0:	e7fe      	b.n	800b3e0 <xTaskCreateStatic+0x1c>
		configASSERT( puxStackBuffer != NULL );
 800b3e2:	b672      	cpsid	i
 800b3e4:	e7fe      	b.n	800b3e4 <xTaskCreateStatic+0x20>
		configASSERT( pxTaskBuffer != NULL );
 800b3e6:	b672      	cpsid	i
 800b3e8:	e7fe      	b.n	800b3e8 <xTaskCreateStatic+0x24>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3ea:	9c04      	ldr	r4, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b3ee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b3f0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3f2:	24a5      	movs	r4, #165	; 0xa5
 800b3f4:	2502      	movs	r5, #2
 800b3f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b3f8:	5535      	strb	r5, [r6, r4]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3fa:	2400      	movs	r4, #0
 800b3fc:	9403      	str	r4, [sp, #12]
 800b3fe:	9602      	str	r6, [sp, #8]
 800b400:	ac05      	add	r4, sp, #20
 800b402:	9401      	str	r4, [sp, #4]
 800b404:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b406:	9400      	str	r4, [sp, #0]
 800b408:	f7ff fe7a 	bl	800b100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b40c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b40e:	f7ff fed5 	bl	800b1bc <prvAddNewTaskToReadyList>
		return xReturn;
 800b412:	9805      	ldr	r0, [sp, #20]
	}
 800b414:	b006      	add	sp, #24
 800b416:	bd70      	pop	{r4, r5, r6, pc}

0800b418 <xTaskCreate>:
	{
 800b418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b41a:	b087      	sub	sp, #28
 800b41c:	9004      	str	r0, [sp, #16]
 800b41e:	9105      	str	r1, [sp, #20]
 800b420:	0016      	movs	r6, r2
 800b422:	001f      	movs	r7, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b424:	0090      	lsls	r0, r2, #2
 800b426:	f000 fddd 	bl	800bfe4 <pvPortMalloc>
 800b42a:	1e04      	subs	r4, r0, #0
			if( pxStack != NULL )
 800b42c:	d01f      	beq.n	800b46e <xTaskCreate+0x56>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b42e:	20a8      	movs	r0, #168	; 0xa8
 800b430:	f000 fdd8 	bl	800bfe4 <pvPortMalloc>
 800b434:	1e05      	subs	r5, r0, #0
				if( pxNewTCB != NULL )
 800b436:	d014      	beq.n	800b462 <xTaskCreate+0x4a>
					pxNewTCB->pxStack = pxStack;
 800b438:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b43a:	2300      	movs	r3, #0
 800b43c:	22a5      	movs	r2, #165	; 0xa5
 800b43e:	5483      	strb	r3, [r0, r2]
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b440:	9303      	str	r3, [sp, #12]
 800b442:	9002      	str	r0, [sp, #8]
 800b444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	003b      	movs	r3, r7
 800b44e:	0032      	movs	r2, r6
 800b450:	9905      	ldr	r1, [sp, #20]
 800b452:	9804      	ldr	r0, [sp, #16]
 800b454:	f7ff fe54 	bl	800b100 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b458:	0028      	movs	r0, r5
 800b45a:	f7ff feaf 	bl	800b1bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b45e:	2001      	movs	r0, #1
 800b460:	e007      	b.n	800b472 <xTaskCreate+0x5a>
					vPortFree( pxStack );
 800b462:	0020      	movs	r0, r4
 800b464:	f000 fe4c 	bl	800c100 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b468:	2001      	movs	r0, #1
 800b46a:	4240      	negs	r0, r0
 800b46c:	e001      	b.n	800b472 <xTaskCreate+0x5a>
 800b46e:	2001      	movs	r0, #1
 800b470:	4240      	negs	r0, r0
	}
 800b472:	b007      	add	sp, #28
 800b474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b478 <vTaskStartScheduler>:
{
 800b478:	b510      	push	{r4, lr}
 800b47a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b47c:	2400      	movs	r4, #0
 800b47e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b480:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b482:	aa07      	add	r2, sp, #28
 800b484:	a906      	add	r1, sp, #24
 800b486:	a805      	add	r0, sp, #20
 800b488:	f7ff fae4 	bl	800aa54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b48c:	9a07      	ldr	r2, [sp, #28]
 800b48e:	4914      	ldr	r1, [pc, #80]	; (800b4e0 <vTaskStartScheduler+0x68>)
 800b490:	4814      	ldr	r0, [pc, #80]	; (800b4e4 <vTaskStartScheduler+0x6c>)
 800b492:	9b05      	ldr	r3, [sp, #20]
 800b494:	9302      	str	r3, [sp, #8]
 800b496:	9b06      	ldr	r3, [sp, #24]
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	9400      	str	r4, [sp, #0]
 800b49c:	2300      	movs	r3, #0
 800b49e:	f7ff ff91 	bl	800b3c4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800b4a2:	2800      	cmp	r0, #0
 800b4a4:	d019      	beq.n	800b4da <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800b4a6:	f000 fb0b 	bl	800bac0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800b4aa:	2801      	cmp	r0, #1
 800b4ac:	d003      	beq.n	800b4b6 <vTaskStartScheduler+0x3e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d113      	bne.n	800b4da <vTaskStartScheduler+0x62>
 800b4b2:	b672      	cpsid	i
 800b4b4:	e7fe      	b.n	800b4b4 <vTaskStartScheduler+0x3c>
		portDISABLE_INTERRUPTS();
 800b4b6:	b672      	cpsid	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4b8:	4b0b      	ldr	r3, [pc, #44]	; (800b4e8 <vTaskStartScheduler+0x70>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a0b      	ldr	r2, [pc, #44]	; (800b4ec <vTaskStartScheduler+0x74>)
 800b4be:	3354      	adds	r3, #84	; 0x54
 800b4c0:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4c2:	4b0b      	ldr	r3, [pc, #44]	; (800b4f0 <vTaskStartScheduler+0x78>)
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	4252      	negs	r2, r2
 800b4c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4ca:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <vTaskStartScheduler+0x7c>)
 800b4cc:	3202      	adds	r2, #2
 800b4ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4d0:	4b09      	ldr	r3, [pc, #36]	; (800b4f8 <vTaskStartScheduler+0x80>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800b4d6:	f000 fd39 	bl	800bf4c <xPortStartScheduler>
}
 800b4da:	b008      	add	sp, #32
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	46c0      	nop			; (mov r8, r8)
 800b4e0:	08012ecc 	.word	0x08012ecc
 800b4e4:	0800b2e9 	.word	0x0800b2e9
 800b4e8:	2000470c 	.word	0x2000470c
 800b4ec:	200002b8 	.word	0x200002b8
 800b4f0:	20004bb4 	.word	0x20004bb4
 800b4f4:	20004bd4 	.word	0x20004bd4
 800b4f8:	20004c00 	.word	0x20004c00

0800b4fc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b4fc:	4a02      	ldr	r2, [pc, #8]	; (800b508 <vTaskSuspendAll+0xc>)
 800b4fe:	6813      	ldr	r3, [r2, #0]
 800b500:	3301      	adds	r3, #1
 800b502:	6013      	str	r3, [r2, #0]
}
 800b504:	4770      	bx	lr
 800b506:	46c0      	nop			; (mov r8, r8)
 800b508:	20004b80 	.word	0x20004b80

0800b50c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b50c:	4b01      	ldr	r3, [pc, #4]	; (800b514 <xTaskGetTickCount+0x8>)
 800b50e:	6818      	ldr	r0, [r3, #0]
}
 800b510:	4770      	bx	lr
 800b512:	46c0      	nop			; (mov r8, r8)
 800b514:	20004c00 	.word	0x20004c00

0800b518 <xTaskIncrementTick>:
{
 800b518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51a:	46d6      	mov	lr, sl
 800b51c:	464f      	mov	r7, r9
 800b51e:	4646      	mov	r6, r8
 800b520:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b522:	4b3f      	ldr	r3, [pc, #252]	; (800b620 <xTaskIncrementTick+0x108>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d16f      	bne.n	800b60a <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b52a:	4b3e      	ldr	r3, [pc, #248]	; (800b624 <xTaskIncrementTick+0x10c>)
 800b52c:	681d      	ldr	r5, [r3, #0]
 800b52e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800b530:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b532:	2d00      	cmp	r5, #0
 800b534:	d112      	bne.n	800b55c <xTaskIncrementTick+0x44>
			taskSWITCH_DELAYED_LISTS();
 800b536:	4b3c      	ldr	r3, [pc, #240]	; (800b628 <xTaskIncrementTick+0x110>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <xTaskIncrementTick+0x2c>
 800b540:	b672      	cpsid	i
 800b542:	e7fe      	b.n	800b542 <xTaskIncrementTick+0x2a>
 800b544:	4a38      	ldr	r2, [pc, #224]	; (800b628 <xTaskIncrementTick+0x110>)
 800b546:	6811      	ldr	r1, [r2, #0]
 800b548:	4b38      	ldr	r3, [pc, #224]	; (800b62c <xTaskIncrementTick+0x114>)
 800b54a:	6818      	ldr	r0, [r3, #0]
 800b54c:	6010      	str	r0, [r2, #0]
 800b54e:	6019      	str	r1, [r3, #0]
 800b550:	4a37      	ldr	r2, [pc, #220]	; (800b630 <xTaskIncrementTick+0x118>)
 800b552:	6813      	ldr	r3, [r2, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	6013      	str	r3, [r2, #0]
 800b558:	f7ff fdbc 	bl	800b0d4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b55c:	4b35      	ldr	r3, [pc, #212]	; (800b634 <xTaskIncrementTick+0x11c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800b560:	2700      	movs	r7, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b562:	42ab      	cmp	r3, r5
 800b564:	d83d      	bhi.n	800b5e2 <xTaskIncrementTick+0xca>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b566:	4b30      	ldr	r3, [pc, #192]	; (800b628 <xTaskIncrementTick+0x110>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d033      	beq.n	800b5d8 <xTaskIncrementTick+0xc0>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b570:	4b2d      	ldr	r3, [pc, #180]	; (800b628 <xTaskIncrementTick+0x110>)
 800b572:	4698      	mov	r8, r3
					prvAddTaskToReadyList( pxTCB );
 800b574:	4b30      	ldr	r3, [pc, #192]	; (800b638 <xTaskIncrementTick+0x120>)
 800b576:	4699      	mov	r9, r3
 800b578:	469a      	mov	sl, r3
 800b57a:	e004      	b.n	800b586 <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b57c:	4b2a      	ldr	r3, [pc, #168]	; (800b628 <xTaskIncrementTick+0x110>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d029      	beq.n	800b5da <xTaskIncrementTick+0xc2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b586:	4643      	mov	r3, r8
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b58e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800b590:	429d      	cmp	r5, r3
 800b592:	d337      	bcc.n	800b604 <xTaskIncrementTick+0xec>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b594:	1d26      	adds	r6, r4, #4
 800b596:	0030      	movs	r0, r6
 800b598:	f7ff faa4 	bl	800aae4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b59c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d003      	beq.n	800b5aa <xTaskIncrementTick+0x92>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5a2:	0020      	movs	r0, r4
 800b5a4:	3018      	adds	r0, #24
 800b5a6:	f7ff fa9d 	bl	800aae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b5aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b5ac:	464a      	mov	r2, r9
 800b5ae:	6812      	ldr	r2, [r2, #0]
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d901      	bls.n	800b5b8 <xTaskIncrementTick+0xa0>
 800b5b4:	4652      	mov	r2, sl
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	0098      	lsls	r0, r3, #2
 800b5ba:	18c0      	adds	r0, r0, r3
 800b5bc:	0080      	lsls	r0, r0, #2
 800b5be:	4b1f      	ldr	r3, [pc, #124]	; (800b63c <xTaskIncrementTick+0x124>)
 800b5c0:	18c0      	adds	r0, r0, r3
 800b5c2:	0031      	movs	r1, r6
 800b5c4:	f7ff fa6c 	bl	800aaa0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5c8:	4b1d      	ldr	r3, [pc, #116]	; (800b640 <xTaskIncrementTick+0x128>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d3d3      	bcc.n	800b57c <xTaskIncrementTick+0x64>
							xSwitchRequired = pdTRUE;
 800b5d4:	2701      	movs	r7, #1
 800b5d6:	e7d1      	b.n	800b57c <xTaskIncrementTick+0x64>
BaseType_t xSwitchRequired = pdFALSE;
 800b5d8:	2700      	movs	r7, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5da:	4b16      	ldr	r3, [pc, #88]	; (800b634 <xTaskIncrementTick+0x11c>)
 800b5dc:	2201      	movs	r2, #1
 800b5de:	4252      	negs	r2, r2
 800b5e0:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5e2:	4b17      	ldr	r3, [pc, #92]	; (800b640 <xTaskIncrementTick+0x128>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b5e8:	4a14      	ldr	r2, [pc, #80]	; (800b63c <xTaskIncrementTick+0x124>)
 800b5ea:	008b      	lsls	r3, r1, #2
 800b5ec:	185b      	adds	r3, r3, r1
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	589b      	ldr	r3, [r3, r2]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d900      	bls.n	800b5f8 <xTaskIncrementTick+0xe0>
				xSwitchRequired = pdTRUE;
 800b5f6:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800b5f8:	4b12      	ldr	r3, [pc, #72]	; (800b644 <xTaskIncrementTick+0x12c>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d009      	beq.n	800b614 <xTaskIncrementTick+0xfc>
				xSwitchRequired = pdTRUE;
 800b600:	2701      	movs	r7, #1
 800b602:	e007      	b.n	800b614 <xTaskIncrementTick+0xfc>
						xNextTaskUnblockTime = xItemValue;
 800b604:	4a0b      	ldr	r2, [pc, #44]	; (800b634 <xTaskIncrementTick+0x11c>)
 800b606:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b608:	e7eb      	b.n	800b5e2 <xTaskIncrementTick+0xca>
		++xPendedTicks;
 800b60a:	4a0f      	ldr	r2, [pc, #60]	; (800b648 <xTaskIncrementTick+0x130>)
 800b60c:	6813      	ldr	r3, [r2, #0]
 800b60e:	3301      	adds	r3, #1
 800b610:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800b612:	2700      	movs	r7, #0
}
 800b614:	0038      	movs	r0, r7
 800b616:	bce0      	pop	{r5, r6, r7}
 800b618:	46ba      	mov	sl, r7
 800b61a:	46b1      	mov	r9, r6
 800b61c:	46a8      	mov	r8, r5
 800b61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b620:	20004b80 	.word	0x20004b80
 800b624:	20004c00 	.word	0x20004c00
 800b628:	20004710 	.word	0x20004710
 800b62c:	20004714 	.word	0x20004714
 800b630:	20004bb8 	.word	0x20004bb8
 800b634:	20004bb4 	.word	0x20004bb4
 800b638:	20004b88 	.word	0x20004b88
 800b63c:	20004718 	.word	0x20004718
 800b640:	2000470c 	.word	0x2000470c
 800b644:	20004c04 	.word	0x20004c04
 800b648:	20004bbc 	.word	0x20004bbc

0800b64c <xTaskResumeAll>:
{
 800b64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b64e:	46c6      	mov	lr, r8
 800b650:	b500      	push	{lr}
	configASSERT( uxSchedulerSuspended );
 800b652:	4b32      	ldr	r3, [pc, #200]	; (800b71c <xTaskResumeAll+0xd0>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d101      	bne.n	800b65e <xTaskResumeAll+0x12>
 800b65a:	b672      	cpsid	i
 800b65c:	e7fe      	b.n	800b65c <xTaskResumeAll+0x10>
	taskENTER_CRITICAL();
 800b65e:	f000 fbff 	bl	800be60 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800b662:	4b2e      	ldr	r3, [pc, #184]	; (800b71c <xTaskResumeAll+0xd0>)
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	3a01      	subs	r2, #1
 800b668:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b66a:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800b66c:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d141      	bne.n	800b6f6 <xTaskResumeAll+0xaa>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b672:	4b2b      	ldr	r3, [pc, #172]	; (800b720 <xTaskResumeAll+0xd4>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d03d      	beq.n	800b6f6 <xTaskResumeAll+0xaa>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b67a:	4b2a      	ldr	r3, [pc, #168]	; (800b724 <xTaskResumeAll+0xd8>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d045      	beq.n	800b70e <xTaskResumeAll+0xc2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b682:	4f28      	ldr	r7, [pc, #160]	; (800b724 <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 800b684:	4e28      	ldr	r6, [pc, #160]	; (800b728 <xTaskResumeAll+0xdc>)
 800b686:	46b0      	mov	r8, r6
 800b688:	e003      	b.n	800b692 <xTaskResumeAll+0x46>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b68a:	4b26      	ldr	r3, [pc, #152]	; (800b724 <xTaskResumeAll+0xd8>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d03b      	beq.n	800b70a <xTaskResumeAll+0xbe>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b696:	0020      	movs	r0, r4
 800b698:	3018      	adds	r0, #24
 800b69a:	f7ff fa23 	bl	800aae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b69e:	1d25      	adds	r5, r4, #4
 800b6a0:	0028      	movs	r0, r5
 800b6a2:	f7ff fa1f 	bl	800aae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b6a8:	6832      	ldr	r2, [r6, #0]
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d901      	bls.n	800b6b2 <xTaskResumeAll+0x66>
 800b6ae:	4642      	mov	r2, r8
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	0098      	lsls	r0, r3, #2
 800b6b4:	18c0      	adds	r0, r0, r3
 800b6b6:	0080      	lsls	r0, r0, #2
 800b6b8:	4b1c      	ldr	r3, [pc, #112]	; (800b72c <xTaskResumeAll+0xe0>)
 800b6ba:	18c0      	adds	r0, r0, r3
 800b6bc:	0029      	movs	r1, r5
 800b6be:	f7ff f9ef 	bl	800aaa0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6c2:	4b1b      	ldr	r3, [pc, #108]	; (800b730 <xTaskResumeAll+0xe4>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d3dd      	bcc.n	800b68a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800b6ce:	4b19      	ldr	r3, [pc, #100]	; (800b734 <xTaskResumeAll+0xe8>)
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e7d9      	b.n	800b68a <xTaskResumeAll+0x3e>
							--xPendedCounts;
 800b6d6:	3c01      	subs	r4, #1
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6d8:	2c00      	cmp	r4, #0
 800b6da:	d005      	beq.n	800b6e8 <xTaskResumeAll+0x9c>
							if( xTaskIncrementTick() != pdFALSE )
 800b6dc:	f7ff ff1c 	bl	800b518 <xTaskIncrementTick>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d0f8      	beq.n	800b6d6 <xTaskResumeAll+0x8a>
								xYieldPending = pdTRUE;
 800b6e4:	6035      	str	r5, [r6, #0]
 800b6e6:	e7f6      	b.n	800b6d6 <xTaskResumeAll+0x8a>
						xPendedTicks = 0;
 800b6e8:	4b13      	ldr	r3, [pc, #76]	; (800b738 <xTaskResumeAll+0xec>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800b6ee:	4b11      	ldr	r3, [pc, #68]	; (800b734 <xTaskResumeAll+0xe8>)
 800b6f0:	681c      	ldr	r4, [r3, #0]
 800b6f2:	2c00      	cmp	r4, #0
 800b6f4:	d105      	bne.n	800b702 <xTaskResumeAll+0xb6>
	taskEXIT_CRITICAL();
 800b6f6:	f000 fbbf 	bl	800be78 <vPortExitCritical>
}
 800b6fa:	0020      	movs	r0, r4
 800b6fc:	bc80      	pop	{r7}
 800b6fe:	46b8      	mov	r8, r7
 800b700:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800b702:	f000 fba1 	bl	800be48 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800b706:	2401      	movs	r4, #1
 800b708:	e7f5      	b.n	800b6f6 <xTaskResumeAll+0xaa>
					prvResetNextTaskUnblockTime();
 800b70a:	f7ff fce3 	bl	800b0d4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b70e:	4b0a      	ldr	r3, [pc, #40]	; (800b738 <xTaskResumeAll+0xec>)
 800b710:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800b712:	2c00      	cmp	r4, #0
 800b714:	d0eb      	beq.n	800b6ee <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800b716:	4e07      	ldr	r6, [pc, #28]	; (800b734 <xTaskResumeAll+0xe8>)
 800b718:	2501      	movs	r5, #1
 800b71a:	e7df      	b.n	800b6dc <xTaskResumeAll+0x90>
 800b71c:	20004b80 	.word	0x20004b80
 800b720:	20004b78 	.word	0x20004b78
 800b724:	20004bc0 	.word	0x20004bc0
 800b728:	20004b88 	.word	0x20004b88
 800b72c:	20004718 	.word	0x20004718
 800b730:	2000470c 	.word	0x2000470c
 800b734:	20004c04 	.word	0x20004c04
 800b738:	20004bbc 	.word	0x20004bbc

0800b73c <vTaskDelay>:
	{
 800b73c:	b510      	push	{r4, lr}
 800b73e:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b740:	d00f      	beq.n	800b762 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
 800b742:	4b09      	ldr	r3, [pc, #36]	; (800b768 <vTaskDelay+0x2c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <vTaskDelay+0x12>
 800b74a:	b672      	cpsid	i
 800b74c:	e7fe      	b.n	800b74c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800b74e:	f7ff fed5 	bl	800b4fc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b752:	2100      	movs	r1, #0
 800b754:	0020      	movs	r0, r4
 800b756:	f7ff fdf7 	bl	800b348 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800b75a:	f7ff ff77 	bl	800b64c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800b75e:	2800      	cmp	r0, #0
 800b760:	d101      	bne.n	800b766 <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
 800b762:	f000 fb71 	bl	800be48 <vPortYield>
	}
 800b766:	bd10      	pop	{r4, pc}
 800b768:	20004b80 	.word	0x20004b80

0800b76c <vTaskSwitchContext>:
{
 800b76c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b76e:	4b23      	ldr	r3, [pc, #140]	; (800b7fc <vTaskSwitchContext+0x90>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d003      	beq.n	800b77e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800b776:	4b22      	ldr	r3, [pc, #136]	; (800b800 <vTaskSwitchContext+0x94>)
 800b778:	2201      	movs	r2, #1
 800b77a:	601a      	str	r2, [r3, #0]
}
 800b77c:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800b77e:	4b20      	ldr	r3, [pc, #128]	; (800b800 <vTaskSwitchContext+0x94>)
 800b780:	2200      	movs	r2, #0
 800b782:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b784:	4b1f      	ldr	r3, [pc, #124]	; (800b804 <vTaskSwitchContext+0x98>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	491f      	ldr	r1, [pc, #124]	; (800b808 <vTaskSwitchContext+0x9c>)
 800b78a:	0093      	lsls	r3, r2, #2
 800b78c:	189b      	adds	r3, r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	585b      	ldr	r3, [r3, r1]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10c      	bne.n	800b7b0 <vTaskSwitchContext+0x44>
 800b796:	2a00      	cmp	r2, #0
 800b798:	d008      	beq.n	800b7ac <vTaskSwitchContext+0x40>
 800b79a:	3a01      	subs	r2, #1
 800b79c:	0093      	lsls	r3, r2, #2
 800b79e:	189b      	adds	r3, r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	585b      	ldr	r3, [r3, r1]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d103      	bne.n	800b7b0 <vTaskSwitchContext+0x44>
 800b7a8:	2a00      	cmp	r2, #0
 800b7aa:	d1f6      	bne.n	800b79a <vTaskSwitchContext+0x2e>
 800b7ac:	b672      	cpsid	i
 800b7ae:	e7fe      	b.n	800b7ae <vTaskSwitchContext+0x42>
 800b7b0:	4815      	ldr	r0, [pc, #84]	; (800b808 <vTaskSwitchContext+0x9c>)
 800b7b2:	0093      	lsls	r3, r2, #2
 800b7b4:	1899      	adds	r1, r3, r2
 800b7b6:	0089      	lsls	r1, r1, #2
 800b7b8:	1841      	adds	r1, r0, r1
 800b7ba:	684c      	ldr	r4, [r1, #4]
 800b7bc:	6864      	ldr	r4, [r4, #4]
 800b7be:	604c      	str	r4, [r1, #4]
 800b7c0:	189b      	adds	r3, r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	3308      	adds	r3, #8
 800b7c6:	181b      	adds	r3, r3, r0
 800b7c8:	429c      	cmp	r4, r3
 800b7ca:	d00f      	beq.n	800b7ec <vTaskSwitchContext+0x80>
 800b7cc:	4b0e      	ldr	r3, [pc, #56]	; (800b808 <vTaskSwitchContext+0x9c>)
 800b7ce:	0091      	lsls	r1, r2, #2
 800b7d0:	1889      	adds	r1, r1, r2
 800b7d2:	0089      	lsls	r1, r1, #2
 800b7d4:	185b      	adds	r3, r3, r1
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	68d9      	ldr	r1, [r3, #12]
 800b7da:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <vTaskSwitchContext+0xa0>)
 800b7dc:	6019      	str	r1, [r3, #0]
 800b7de:	4909      	ldr	r1, [pc, #36]	; (800b804 <vTaskSwitchContext+0x98>)
 800b7e0:	600a      	str	r2, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a0a      	ldr	r2, [pc, #40]	; (800b810 <vTaskSwitchContext+0xa4>)
 800b7e6:	3354      	adds	r3, #84	; 0x54
 800b7e8:	6013      	str	r3, [r2, #0]
}
 800b7ea:	e7c7      	b.n	800b77c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ec:	6860      	ldr	r0, [r4, #4]
 800b7ee:	4b06      	ldr	r3, [pc, #24]	; (800b808 <vTaskSwitchContext+0x9c>)
 800b7f0:	0091      	lsls	r1, r2, #2
 800b7f2:	1889      	adds	r1, r1, r2
 800b7f4:	0089      	lsls	r1, r1, #2
 800b7f6:	185b      	adds	r3, r3, r1
 800b7f8:	6058      	str	r0, [r3, #4]
 800b7fa:	e7e7      	b.n	800b7cc <vTaskSwitchContext+0x60>
 800b7fc:	20004b80 	.word	0x20004b80
 800b800:	20004c04 	.word	0x20004c04
 800b804:	20004b88 	.word	0x20004b88
 800b808:	20004718 	.word	0x20004718
 800b80c:	2000470c 	.word	0x2000470c
 800b810:	200002b8 	.word	0x200002b8

0800b814 <vTaskPlaceOnEventList>:
{
 800b814:	b510      	push	{r4, lr}
 800b816:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800b818:	2800      	cmp	r0, #0
 800b81a:	d009      	beq.n	800b830 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b81c:	4b05      	ldr	r3, [pc, #20]	; (800b834 <vTaskPlaceOnEventList+0x20>)
 800b81e:	6819      	ldr	r1, [r3, #0]
 800b820:	3118      	adds	r1, #24
 800b822:	f7ff f948 	bl	800aab6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b826:	2101      	movs	r1, #1
 800b828:	0020      	movs	r0, r4
 800b82a:	f7ff fd8d 	bl	800b348 <prvAddCurrentTaskToDelayedList>
}
 800b82e:	bd10      	pop	{r4, pc}
	configASSERT( pxEventList );
 800b830:	b672      	cpsid	i
 800b832:	e7fe      	b.n	800b832 <vTaskPlaceOnEventList+0x1e>
 800b834:	2000470c 	.word	0x2000470c

0800b838 <vTaskPlaceOnEventListRestricted>:
	{
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	000d      	movs	r5, r1
 800b83c:	0014      	movs	r4, r2
		configASSERT( pxEventList );
 800b83e:	2800      	cmp	r0, #0
 800b840:	d00d      	beq.n	800b85e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b842:	4b08      	ldr	r3, [pc, #32]	; (800b864 <vTaskPlaceOnEventListRestricted+0x2c>)
 800b844:	6819      	ldr	r1, [r3, #0]
 800b846:	3118      	adds	r1, #24
 800b848:	f7ff f92a 	bl	800aaa0 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800b84c:	2c00      	cmp	r4, #0
 800b84e:	d001      	beq.n	800b854 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
 800b850:	2501      	movs	r5, #1
 800b852:	426d      	negs	r5, r5
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b854:	0021      	movs	r1, r4
 800b856:	0028      	movs	r0, r5
 800b858:	f7ff fd76 	bl	800b348 <prvAddCurrentTaskToDelayedList>
	}
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800b85e:	b672      	cpsid	i
 800b860:	e7fe      	b.n	800b860 <vTaskPlaceOnEventListRestricted+0x28>
 800b862:	46c0      	nop			; (mov r8, r8)
 800b864:	2000470c 	.word	0x2000470c

0800b868 <xTaskRemoveFromEventList>:
{
 800b868:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86a:	68c3      	ldr	r3, [r0, #12]
 800b86c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b86e:	2c00      	cmp	r4, #0
 800b870:	d027      	beq.n	800b8c2 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b872:	0025      	movs	r5, r4
 800b874:	3518      	adds	r5, #24
 800b876:	0028      	movs	r0, r5
 800b878:	f7ff f934 	bl	800aae4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b87c:	4b14      	ldr	r3, [pc, #80]	; (800b8d0 <xTaskRemoveFromEventList+0x68>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d120      	bne.n	800b8c6 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b884:	1d25      	adds	r5, r4, #4
 800b886:	0028      	movs	r0, r5
 800b888:	f7ff f92c 	bl	800aae4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b88c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b88e:	4a11      	ldr	r2, [pc, #68]	; (800b8d4 <xTaskRemoveFromEventList+0x6c>)
 800b890:	6812      	ldr	r2, [r2, #0]
 800b892:	4293      	cmp	r3, r2
 800b894:	d901      	bls.n	800b89a <xTaskRemoveFromEventList+0x32>
 800b896:	4a0f      	ldr	r2, [pc, #60]	; (800b8d4 <xTaskRemoveFromEventList+0x6c>)
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	0098      	lsls	r0, r3, #2
 800b89c:	18c0      	adds	r0, r0, r3
 800b89e:	0080      	lsls	r0, r0, #2
 800b8a0:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <xTaskRemoveFromEventList+0x70>)
 800b8a2:	18c0      	adds	r0, r0, r3
 800b8a4:	0029      	movs	r1, r5
 800b8a6:	f7ff f8fb 	bl	800aaa0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8aa:	4b0c      	ldr	r3, [pc, #48]	; (800b8dc <xTaskRemoveFromEventList+0x74>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800b8b2:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d903      	bls.n	800b8c0 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800b8b8:	4b09      	ldr	r3, [pc, #36]	; (800b8e0 <xTaskRemoveFromEventList+0x78>)
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800b8be:	3001      	adds	r0, #1
}
 800b8c0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800b8c2:	b672      	cpsid	i
 800b8c4:	e7fe      	b.n	800b8c4 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8c6:	4807      	ldr	r0, [pc, #28]	; (800b8e4 <xTaskRemoveFromEventList+0x7c>)
 800b8c8:	0029      	movs	r1, r5
 800b8ca:	f7ff f8e9 	bl	800aaa0 <vListInsertEnd>
 800b8ce:	e7ec      	b.n	800b8aa <xTaskRemoveFromEventList+0x42>
 800b8d0:	20004b80 	.word	0x20004b80
 800b8d4:	20004b88 	.word	0x20004b88
 800b8d8:	20004718 	.word	0x20004718
 800b8dc:	2000470c 	.word	0x2000470c
 800b8e0:	20004c04 	.word	0x20004c04
 800b8e4:	20004bc0 	.word	0x20004bc0

0800b8e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8e8:	4b03      	ldr	r3, [pc, #12]	; (800b8f8 <vTaskInternalSetTimeOutState+0x10>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8ee:	4b03      	ldr	r3, [pc, #12]	; (800b8fc <vTaskInternalSetTimeOutState+0x14>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6043      	str	r3, [r0, #4]
}
 800b8f4:	4770      	bx	lr
 800b8f6:	46c0      	nop			; (mov r8, r8)
 800b8f8:	20004bb8 	.word	0x20004bb8
 800b8fc:	20004c00 	.word	0x20004c00

0800b900 <xTaskCheckForTimeOut>:
{
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	0004      	movs	r4, r0
 800b904:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 800b906:	2800      	cmp	r0, #0
 800b908:	d018      	beq.n	800b93c <xTaskCheckForTimeOut+0x3c>
	configASSERT( pxTicksToWait );
 800b90a:	2900      	cmp	r1, #0
 800b90c:	d018      	beq.n	800b940 <xTaskCheckForTimeOut+0x40>
	taskENTER_CRITICAL();
 800b90e:	f000 faa7 	bl	800be60 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b912:	4b13      	ldr	r3, [pc, #76]	; (800b960 <xTaskCheckForTimeOut+0x60>)
 800b914:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800b916:	682b      	ldr	r3, [r5, #0]
 800b918:	1c59      	adds	r1, r3, #1
 800b91a:	d01b      	beq.n	800b954 <xTaskCheckForTimeOut+0x54>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b91c:	6861      	ldr	r1, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b91e:	4811      	ldr	r0, [pc, #68]	; (800b964 <xTaskCheckForTimeOut+0x64>)
 800b920:	6800      	ldr	r0, [r0, #0]
 800b922:	6826      	ldr	r6, [r4, #0]
 800b924:	4286      	cmp	r6, r0
 800b926:	d002      	beq.n	800b92e <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 800b928:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b92a:	4291      	cmp	r1, r2
 800b92c:	d913      	bls.n	800b956 <xTaskCheckForTimeOut+0x56>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b92e:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b930:	4283      	cmp	r3, r0
 800b932:	d807      	bhi.n	800b944 <xTaskCheckForTimeOut+0x44>
			*pxTicksToWait = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800b938:	2601      	movs	r6, #1
 800b93a:	e00c      	b.n	800b956 <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTimeOut );
 800b93c:	b672      	cpsid	i
 800b93e:	e7fe      	b.n	800b93e <xTaskCheckForTimeOut+0x3e>
	configASSERT( pxTicksToWait );
 800b940:	b672      	cpsid	i
 800b942:	e7fe      	b.n	800b942 <xTaskCheckForTimeOut+0x42>
			*pxTicksToWait -= xElapsedTime;
 800b944:	1a9b      	subs	r3, r3, r2
 800b946:	185b      	adds	r3, r3, r1
 800b948:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b94a:	0020      	movs	r0, r4
 800b94c:	f7ff ffcc 	bl	800b8e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b950:	2600      	movs	r6, #0
 800b952:	e000      	b.n	800b956 <xTaskCheckForTimeOut+0x56>
				xReturn = pdFALSE;
 800b954:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800b956:	f000 fa8f 	bl	800be78 <vPortExitCritical>
}
 800b95a:	0030      	movs	r0, r6
 800b95c:	bd70      	pop	{r4, r5, r6, pc}
 800b95e:	46c0      	nop			; (mov r8, r8)
 800b960:	20004c00 	.word	0x20004c00
 800b964:	20004bb8 	.word	0x20004bb8

0800b968 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b968:	4b01      	ldr	r3, [pc, #4]	; (800b970 <vTaskMissedYield+0x8>)
 800b96a:	2201      	movs	r2, #1
 800b96c:	601a      	str	r2, [r3, #0]
}
 800b96e:	4770      	bx	lr
 800b970:	20004c04 	.word	0x20004c04

0800b974 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b974:	4b05      	ldr	r3, [pc, #20]	; (800b98c <xTaskGetSchedulerState+0x18>)
 800b976:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b978:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d004      	beq.n	800b988 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b97e:	4b04      	ldr	r3, [pc, #16]	; (800b990 <xTaskGetSchedulerState+0x1c>)
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	4243      	negs	r3, r0
 800b984:	4158      	adcs	r0, r3
 800b986:	0040      	lsls	r0, r0, #1
	}
 800b988:	4770      	bx	lr
 800b98a:	46c0      	nop			; (mov r8, r8)
 800b98c:	20004bd4 	.word	0x20004bd4
 800b990:	20004b80 	.word	0x20004b80

0800b994 <xTaskPriorityDisinherit>:
	{
 800b994:	b570      	push	{r4, r5, r6, lr}
 800b996:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800b998:	d02c      	beq.n	800b9f4 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 800b99a:	4b18      	ldr	r3, [pc, #96]	; (800b9fc <xTaskPriorityDisinherit+0x68>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4283      	cmp	r3, r0
 800b9a0:	d001      	beq.n	800b9a6 <xTaskPriorityDisinherit+0x12>
 800b9a2:	b672      	cpsid	i
 800b9a4:	e7fe      	b.n	800b9a4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9a6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d101      	bne.n	800b9b0 <xTaskPriorityDisinherit+0x1c>
 800b9ac:	b672      	cpsid	i
 800b9ae:	e7fe      	b.n	800b9ae <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800b9b6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b9b8:	4291      	cmp	r1, r2
 800b9ba:	d01d      	beq.n	800b9f8 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 800b9bc:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d119      	bne.n	800b9f6 <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9c2:	1d25      	adds	r5, r4, #4
 800b9c4:	0028      	movs	r0, r5
 800b9c6:	f7ff f88d 	bl	800aae4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b9cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ce:	2238      	movs	r2, #56	; 0x38
 800b9d0:	1ad2      	subs	r2, r2, r3
 800b9d2:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b9d4:	4a0a      	ldr	r2, [pc, #40]	; (800ba00 <xTaskPriorityDisinherit+0x6c>)
 800b9d6:	6812      	ldr	r2, [r2, #0]
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d901      	bls.n	800b9e0 <xTaskPriorityDisinherit+0x4c>
 800b9dc:	4a08      	ldr	r2, [pc, #32]	; (800ba00 <xTaskPriorityDisinherit+0x6c>)
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	0098      	lsls	r0, r3, #2
 800b9e2:	18c0      	adds	r0, r0, r3
 800b9e4:	0080      	lsls	r0, r0, #2
 800b9e6:	4b07      	ldr	r3, [pc, #28]	; (800ba04 <xTaskPriorityDisinherit+0x70>)
 800b9e8:	18c0      	adds	r0, r0, r3
 800b9ea:	0029      	movs	r1, r5
 800b9ec:	f7ff f858 	bl	800aaa0 <vListInsertEnd>
					xReturn = pdTRUE;
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	e000      	b.n	800b9f6 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 800b9f4:	2000      	movs	r0, #0
	}
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e7fc      	b.n	800b9f6 <xTaskPriorityDisinherit+0x62>
 800b9fc:	2000470c 	.word	0x2000470c
 800ba00:	20004b88 	.word	0x20004b88
 800ba04:	20004718 	.word	0x20004718

0800ba08 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba0c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba0e:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba10:	4291      	cmp	r1, r2
 800ba12:	d80c      	bhi.n	800ba2e <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba14:	1ad2      	subs	r2, r2, r3
 800ba16:	6983      	ldr	r3, [r0, #24]
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba18:	2001      	movs	r0, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d300      	bcc.n	800ba20 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800ba1e:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba20:	1d21      	adds	r1, r4, #4
 800ba22:	4b09      	ldr	r3, [pc, #36]	; (800ba48 <prvInsertTimerInActiveList+0x40>)
 800ba24:	6818      	ldr	r0, [r3, #0]
 800ba26:	f7ff f846 	bl	800aab6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ba2a:	2000      	movs	r0, #0
 800ba2c:	e7f7      	b.n	800ba1e <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d202      	bcs.n	800ba38 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 800ba32:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba34:	4299      	cmp	r1, r3
 800ba36:	d2f2      	bcs.n	800ba1e <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba38:	1d21      	adds	r1, r4, #4
 800ba3a:	4b04      	ldr	r3, [pc, #16]	; (800ba4c <prvInsertTimerInActiveList+0x44>)
 800ba3c:	6818      	ldr	r0, [r3, #0]
 800ba3e:	f7ff f83a 	bl	800aab6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ba42:	2000      	movs	r0, #0
 800ba44:	e7eb      	b.n	800ba1e <prvInsertTimerInActiveList+0x16>
 800ba46:	46c0      	nop			; (mov r8, r8)
 800ba48:	20004c0c 	.word	0x20004c0c
 800ba4c:	20004c08 	.word	0x20004c08

0800ba50 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba50:	b530      	push	{r4, r5, lr}
 800ba52:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba54:	f000 fa04 	bl	800be60 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba58:	4b11      	ldr	r3, [pc, #68]	; (800baa0 <prvCheckForValidListAndQueue+0x50>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d003      	beq.n	800ba68 <prvCheckForValidListAndQueue+0x18>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba60:	f000 fa0a 	bl	800be78 <vPortExitCritical>
}
 800ba64:	b003      	add	sp, #12
 800ba66:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800ba68:	4d0e      	ldr	r5, [pc, #56]	; (800baa4 <prvCheckForValidListAndQueue+0x54>)
 800ba6a:	0028      	movs	r0, r5
 800ba6c:	f7ff f80a 	bl	800aa84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba70:	4c0d      	ldr	r4, [pc, #52]	; (800baa8 <prvCheckForValidListAndQueue+0x58>)
 800ba72:	0020      	movs	r0, r4
 800ba74:	f7ff f806 	bl	800aa84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba78:	4b0c      	ldr	r3, [pc, #48]	; (800baac <prvCheckForValidListAndQueue+0x5c>)
 800ba7a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <prvCheckForValidListAndQueue+0x60>)
 800ba7e:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba80:	4b0c      	ldr	r3, [pc, #48]	; (800bab4 <prvCheckForValidListAndQueue+0x64>)
 800ba82:	4a0d      	ldr	r2, [pc, #52]	; (800bab8 <prvCheckForValidListAndQueue+0x68>)
 800ba84:	2100      	movs	r1, #0
 800ba86:	9100      	str	r1, [sp, #0]
 800ba88:	3110      	adds	r1, #16
 800ba8a:	200a      	movs	r0, #10
 800ba8c:	f7ff f906 	bl	800ac9c <xQueueGenericCreateStatic>
 800ba90:	4b03      	ldr	r3, [pc, #12]	; (800baa0 <prvCheckForValidListAndQueue+0x50>)
 800ba92:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d0e3      	beq.n	800ba60 <prvCheckForValidListAndQueue+0x10>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba98:	4908      	ldr	r1, [pc, #32]	; (800babc <prvCheckForValidListAndQueue+0x6c>)
 800ba9a:	f7ff fadf 	bl	800b05c <vQueueAddToRegistry>
 800ba9e:	e7df      	b.n	800ba60 <prvCheckForValidListAndQueue+0x10>
 800baa0:	20004d2c 	.word	0x20004d2c
 800baa4:	20004cb0 	.word	0x20004cb0
 800baa8:	20004cc4 	.word	0x20004cc4
 800baac:	20004c08 	.word	0x20004c08
 800bab0:	20004c0c 	.word	0x20004c0c
 800bab4:	20004cdc 	.word	0x20004cdc
 800bab8:	20004c10 	.word	0x20004c10
 800babc:	08012ed4 	.word	0x08012ed4

0800bac0 <xTimerCreateTimerTask>:
{
 800bac0:	b500      	push	{lr}
 800bac2:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 800bac4:	f7ff ffc4 	bl	800ba50 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800bac8:	4b10      	ldr	r3, [pc, #64]	; (800bb0c <xTimerCreateTimerTask+0x4c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01a      	beq.n	800bb06 <xTimerCreateTimerTask+0x46>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	9305      	str	r3, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bad4:	9306      	str	r3, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bad6:	aa07      	add	r2, sp, #28
 800bad8:	a906      	add	r1, sp, #24
 800bada:	a805      	add	r0, sp, #20
 800badc:	f7fe ffc6 	bl	800aa6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bae0:	9a07      	ldr	r2, [sp, #28]
 800bae2:	490b      	ldr	r1, [pc, #44]	; (800bb10 <xTimerCreateTimerTask+0x50>)
 800bae4:	480b      	ldr	r0, [pc, #44]	; (800bb14 <xTimerCreateTimerTask+0x54>)
 800bae6:	9b05      	ldr	r3, [sp, #20]
 800bae8:	9302      	str	r3, [sp, #8]
 800baea:	9b06      	ldr	r3, [sp, #24]
 800baec:	9301      	str	r3, [sp, #4]
 800baee:	2302      	movs	r3, #2
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	2300      	movs	r3, #0
 800baf4:	f7ff fc66 	bl	800b3c4 <xTaskCreateStatic>
 800baf8:	4b07      	ldr	r3, [pc, #28]	; (800bb18 <xTimerCreateTimerTask+0x58>)
 800bafa:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d002      	beq.n	800bb06 <xTimerCreateTimerTask+0x46>
}
 800bb00:	2001      	movs	r0, #1
 800bb02:	b009      	add	sp, #36	; 0x24
 800bb04:	bd00      	pop	{pc}
	configASSERT( xReturn );
 800bb06:	b672      	cpsid	i
 800bb08:	e7fe      	b.n	800bb08 <xTimerCreateTimerTask+0x48>
 800bb0a:	46c0      	nop			; (mov r8, r8)
 800bb0c:	20004d2c 	.word	0x20004d2c
 800bb10:	08012edc 	.word	0x08012edc
 800bb14:	0800bc2d 	.word	0x0800bc2d
 800bb18:	20004d30 	.word	0x20004d30

0800bb1c <xTimerGenericCommand>:
{
 800bb1c:	b530      	push	{r4, r5, lr}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	001c      	movs	r4, r3
	configASSERT( xTimer );
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d014      	beq.n	800bb50 <xTimerGenericCommand+0x34>
	if( xTimerQueue != NULL )
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <xTimerGenericCommand+0x5c>)
 800bb28:	681d      	ldr	r5, [r3, #0]
 800bb2a:	2d00      	cmp	r5, #0
 800bb2c:	d022      	beq.n	800bb74 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
 800bb2e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bb30:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bb32:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb34:	2905      	cmp	r1, #5
 800bb36:	dc15      	bgt.n	800bb64 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb38:	f7ff ff1c 	bl	800b974 <xTaskGetSchedulerState>
 800bb3c:	2802      	cmp	r0, #2
 800bb3e:	d009      	beq.n	800bb54 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb40:	4b0d      	ldr	r3, [pc, #52]	; (800bb78 <xTimerGenericCommand+0x5c>)
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	2300      	movs	r3, #0
 800bb46:	2200      	movs	r2, #0
 800bb48:	4669      	mov	r1, sp
 800bb4a:	f7ff f8fe 	bl	800ad4a <xQueueGenericSend>
 800bb4e:	e00f      	b.n	800bb70 <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
 800bb50:	b672      	cpsid	i
 800bb52:	e7fe      	b.n	800bb52 <xTimerGenericCommand+0x36>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb54:	4b08      	ldr	r3, [pc, #32]	; (800bb78 <xTimerGenericCommand+0x5c>)
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	9a08      	ldr	r2, [sp, #32]
 800bb5c:	4669      	mov	r1, sp
 800bb5e:	f7ff f8f4 	bl	800ad4a <xQueueGenericSend>
 800bb62:	e005      	b.n	800bb70 <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb64:	2300      	movs	r3, #0
 800bb66:	0022      	movs	r2, r4
 800bb68:	4669      	mov	r1, sp
 800bb6a:	0028      	movs	r0, r5
 800bb6c:	f7ff f98f 	bl	800ae8e <xQueueGenericSendFromISR>
}
 800bb70:	b005      	add	sp, #20
 800bb72:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800bb74:	2000      	movs	r0, #0
	return xReturn;
 800bb76:	e7fb      	b.n	800bb70 <xTimerGenericCommand+0x54>
 800bb78:	20004d2c 	.word	0x20004d2c

0800bb7c <prvSampleTimeNow>:
{
 800bb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb7e:	46de      	mov	lr, fp
 800bb80:	4657      	mov	r7, sl
 800bb82:	464e      	mov	r6, r9
 800bb84:	4645      	mov	r5, r8
 800bb86:	b5e0      	push	{r5, r6, r7, lr}
 800bb88:	b083      	sub	sp, #12
 800bb8a:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
 800bb8c:	f7ff fcbe 	bl	800b50c <xTaskGetTickCount>
 800bb90:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 800bb92:	4b23      	ldr	r3, [pc, #140]	; (800bc20 <prvSampleTimeNow+0xa4>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4283      	cmp	r3, r0
 800bb98:	d80d      	bhi.n	800bbb6 <prvSampleTimeNow+0x3a>
 800bb9a:	2300      	movs	r3, #0
		*pxTimerListsWereSwitched = pdTRUE;
 800bb9c:	464a      	mov	r2, r9
 800bb9e:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800bba0:	4b1f      	ldr	r3, [pc, #124]	; (800bc20 <prvSampleTimeNow+0xa4>)
 800bba2:	4642      	mov	r2, r8
 800bba4:	601a      	str	r2, [r3, #0]
}
 800bba6:	4640      	mov	r0, r8
 800bba8:	b003      	add	sp, #12
 800bbaa:	bcf0      	pop	{r4, r5, r6, r7}
 800bbac:	46bb      	mov	fp, r7
 800bbae:	46b2      	mov	sl, r6
 800bbb0:	46a9      	mov	r9, r5
 800bbb2:	46a0      	mov	r8, r4
 800bbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbb6:	4d1b      	ldr	r5, [pc, #108]	; (800bc24 <prvSampleTimeNow+0xa8>)
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbb8:	2728      	movs	r7, #40	; 0x28
 800bbba:	2604      	movs	r6, #4
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbbc:	682b      	ldr	r3, [r5, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	d025      	beq.n	800bc10 <prvSampleTimeNow+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbca:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbcc:	1d23      	adds	r3, r4, #4
 800bbce:	469b      	mov	fp, r3
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	f7fe ff87 	bl	800aae4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbd6:	6a23      	ldr	r3, [r4, #32]
 800bbd8:	0020      	movs	r0, r4
 800bbda:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbdc:	5de3      	ldrb	r3, [r4, r7]
 800bbde:	421e      	tst	r6, r3
 800bbe0:	d0ec      	beq.n	800bbbc <prvSampleTimeNow+0x40>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bbe2:	69a3      	ldr	r3, [r4, #24]
 800bbe4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800bbe6:	459a      	cmp	sl, r3
 800bbe8:	d207      	bcs.n	800bbfa <prvSampleTimeNow+0x7e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbee:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <prvSampleTimeNow+0xa8>)
 800bbf0:	6818      	ldr	r0, [r3, #0]
 800bbf2:	4659      	mov	r1, fp
 800bbf4:	f7fe ff5f 	bl	800aab6 <vListInsert>
 800bbf8:	e7df      	b.n	800bbba <prvSampleTimeNow+0x3e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9300      	str	r3, [sp, #0]
 800bbfe:	4652      	mov	r2, sl
 800bc00:	2100      	movs	r1, #0
 800bc02:	0020      	movs	r0, r4
 800bc04:	f7ff ff8a 	bl	800bb1c <xTimerGenericCommand>
				configASSERT( xResult );
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d1d6      	bne.n	800bbba <prvSampleTimeNow+0x3e>
 800bc0c:	b672      	cpsid	i
 800bc0e:	e7fe      	b.n	800bc0e <prvSampleTimeNow+0x92>
	pxCurrentTimerList = pxOverflowTimerList;
 800bc10:	4a04      	ldr	r2, [pc, #16]	; (800bc24 <prvSampleTimeNow+0xa8>)
 800bc12:	4905      	ldr	r1, [pc, #20]	; (800bc28 <prvSampleTimeNow+0xac>)
 800bc14:	6808      	ldr	r0, [r1, #0]
 800bc16:	6010      	str	r0, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc18:	600b      	str	r3, [r1, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e7be      	b.n	800bb9c <prvSampleTimeNow+0x20>
 800bc1e:	46c0      	nop			; (mov r8, r8)
 800bc20:	20004cd8 	.word	0x20004cd8
 800bc24:	20004c08 	.word	0x20004c08
 800bc28:	20004c0c 	.word	0x20004c0c

0800bc2c <prvTimerTask>:
{
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc30:	4b61      	ldr	r3, [pc, #388]	; (800bdb8 <prvTimerTask+0x18c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681c      	ldr	r4, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc36:	2c00      	cmp	r4, #0
 800bc38:	d021      	beq.n	800bc7e <prvTimerTask+0x52>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 800bc3e:	f7ff fc5d 	bl	800b4fc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc42:	a804      	add	r0, sp, #16
 800bc44:	f7ff ff9a 	bl	800bb7c <prvSampleTimeNow>
 800bc48:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800bc4a:	9a04      	ldr	r2, [sp, #16]
 800bc4c:	2a00      	cmp	r2, #0
 800bc4e:	d146      	bne.n	800bcde <prvTimerTask+0xb2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc50:	4284      	cmp	r4, r0
 800bc52:	d822      	bhi.n	800bc9a <prvTimerTask+0x6e>
				( void ) xTaskResumeAll();
 800bc54:	f7ff fcfa 	bl	800b64c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc58:	4b57      	ldr	r3, [pc, #348]	; (800bdb8 <prvTimerTask+0x18c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc60:	1d30      	adds	r0, r6, #4
 800bc62:	f7fe ff3f 	bl	800aae4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc66:	2328      	movs	r3, #40	; 0x28
 800bc68:	5cf3      	ldrb	r3, [r6, r3]
 800bc6a:	075a      	lsls	r2, r3, #29
 800bc6c:	d420      	bmi.n	800bcb0 <prvTimerTask+0x84>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc6e:	2201      	movs	r2, #1
 800bc70:	4393      	bics	r3, r2
 800bc72:	3227      	adds	r2, #39	; 0x27
 800bc74:	54b3      	strb	r3, [r6, r2]
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc76:	6a33      	ldr	r3, [r6, #32]
 800bc78:	0030      	movs	r0, r6
 800bc7a:	4798      	blx	r3
}
 800bc7c:	e016      	b.n	800bcac <prvTimerTask+0x80>
	vTaskSuspendAll();
 800bc7e:	f7ff fc3d 	bl	800b4fc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc82:	a804      	add	r0, sp, #16
 800bc84:	f7ff ff7a 	bl	800bb7c <prvSampleTimeNow>
 800bc88:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800bc8a:	9b04      	ldr	r3, [sp, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d126      	bne.n	800bcde <prvTimerTask+0xb2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc90:	4b4a      	ldr	r3, [pc, #296]	; (800bdbc <prvTimerTask+0x190>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	4253      	negs	r3, r2
 800bc98:	415a      	adcs	r2, r3
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc9a:	1b61      	subs	r1, r4, r5
 800bc9c:	4b48      	ldr	r3, [pc, #288]	; (800bdc0 <prvTimerTask+0x194>)
 800bc9e:	6818      	ldr	r0, [r3, #0]
 800bca0:	f7ff f9f0 	bl	800b084 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bca4:	f7ff fcd2 	bl	800b64c <xTaskResumeAll>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d015      	beq.n	800bcd8 <prvTimerTask+0xac>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcac:	4c44      	ldr	r4, [pc, #272]	; (800bdc0 <prvTimerTask+0x194>)
}
 800bcae:	e020      	b.n	800bcf2 <prvTimerTask+0xc6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bcb0:	69b1      	ldr	r1, [r6, #24]
 800bcb2:	1861      	adds	r1, r4, r1
 800bcb4:	0023      	movs	r3, r4
 800bcb6:	002a      	movs	r2, r5
 800bcb8:	0030      	movs	r0, r6
 800bcba:	f7ff fea5 	bl	800ba08 <prvInsertTimerInActiveList>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d0d9      	beq.n	800bc76 <prvTimerTask+0x4a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	0022      	movs	r2, r4
 800bcc8:	2100      	movs	r1, #0
 800bcca:	0030      	movs	r0, r6
 800bccc:	f7ff ff26 	bl	800bb1c <xTimerGenericCommand>
			configASSERT( xResult );
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d1d0      	bne.n	800bc76 <prvTimerTask+0x4a>
 800bcd4:	b672      	cpsid	i
 800bcd6:	e7fe      	b.n	800bcd6 <prvTimerTask+0xaa>
					portYIELD_WITHIN_API();
 800bcd8:	f000 f8b6 	bl	800be48 <vPortYield>
 800bcdc:	e7e6      	b.n	800bcac <prvTimerTask+0x80>
			( void ) xTaskResumeAll();
 800bcde:	f7ff fcb5 	bl	800b64c <xTaskResumeAll>
 800bce2:	e7e3      	b.n	800bcac <prvTimerTask+0x80>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bce4:	9907      	ldr	r1, [sp, #28]
 800bce6:	9806      	ldr	r0, [sp, #24]
 800bce8:	9b05      	ldr	r3, [sp, #20]
 800bcea:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bcec:	9b04      	ldr	r3, [sp, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	da09      	bge.n	800bd06 <prvTimerTask+0xda>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcf2:	6820      	ldr	r0, [r4, #0]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	a904      	add	r1, sp, #16
 800bcf8:	f7ff f91d 	bl	800af36 <xQueueReceive>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d097      	beq.n	800bc30 <prvTimerTask+0x4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd00:	9b04      	ldr	r3, [sp, #16]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	dbee      	blt.n	800bce4 <prvTimerTask+0xb8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd06:	9d06      	ldr	r5, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd08:	696b      	ldr	r3, [r5, #20]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d002      	beq.n	800bd14 <prvTimerTask+0xe8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd0e:	1d28      	adds	r0, r5, #4
 800bd10:	f7fe fee8 	bl	800aae4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd14:	a803      	add	r0, sp, #12
 800bd16:	f7ff ff31 	bl	800bb7c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800bd1a:	9904      	ldr	r1, [sp, #16]
 800bd1c:	2909      	cmp	r1, #9
 800bd1e:	d8e8      	bhi.n	800bcf2 <prvTimerTask+0xc6>
 800bd20:	0089      	lsls	r1, r1, #2
 800bd22:	4b28      	ldr	r3, [pc, #160]	; (800bdc4 <prvTimerTask+0x198>)
 800bd24:	5859      	ldr	r1, [r3, r1]
 800bd26:	468f      	mov	pc, r1
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd28:	2228      	movs	r2, #40	; 0x28
 800bd2a:	5cab      	ldrb	r3, [r5, r2]
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	430b      	orrs	r3, r1
 800bd30:	54ab      	strb	r3, [r5, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd32:	9b05      	ldr	r3, [sp, #20]
 800bd34:	69a9      	ldr	r1, [r5, #24]
 800bd36:	1859      	adds	r1, r3, r1
 800bd38:	0002      	movs	r2, r0
 800bd3a:	0028      	movs	r0, r5
 800bd3c:	f7ff fe64 	bl	800ba08 <prvInsertTimerInActiveList>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d0d6      	beq.n	800bcf2 <prvTimerTask+0xc6>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd44:	6a2b      	ldr	r3, [r5, #32]
 800bd46:	0028      	movs	r0, r5
 800bd48:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd4a:	2328      	movs	r3, #40	; 0x28
 800bd4c:	5ceb      	ldrb	r3, [r5, r3]
 800bd4e:	075b      	lsls	r3, r3, #29
 800bd50:	d5cf      	bpl.n	800bcf2 <prvTimerTask+0xc6>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd52:	9a05      	ldr	r2, [sp, #20]
 800bd54:	69ab      	ldr	r3, [r5, #24]
 800bd56:	18d2      	adds	r2, r2, r3
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	0028      	movs	r0, r5
 800bd60:	f7ff fedc 	bl	800bb1c <xTimerGenericCommand>
							configASSERT( xResult );
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d1c4      	bne.n	800bcf2 <prvTimerTask+0xc6>
 800bd68:	b672      	cpsid	i
 800bd6a:	e7fe      	b.n	800bd6a <prvTimerTask+0x13e>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd6c:	2228      	movs	r2, #40	; 0x28
 800bd6e:	5cab      	ldrb	r3, [r5, r2]
 800bd70:	2101      	movs	r1, #1
 800bd72:	438b      	bics	r3, r1
 800bd74:	54ab      	strb	r3, [r5, r2]
					break;
 800bd76:	e7bc      	b.n	800bcf2 <prvTimerTask+0xc6>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd78:	2228      	movs	r2, #40	; 0x28
 800bd7a:	5cab      	ldrb	r3, [r5, r2]
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	430b      	orrs	r3, r1
 800bd80:	54ab      	strb	r3, [r5, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bd82:	9905      	ldr	r1, [sp, #20]
 800bd84:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd86:	2900      	cmp	r1, #0
 800bd88:	d006      	beq.n	800bd98 <prvTimerTask+0x16c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bd8a:	1841      	adds	r1, r0, r1
 800bd8c:	0003      	movs	r3, r0
 800bd8e:	0002      	movs	r2, r0
 800bd90:	0028      	movs	r0, r5
 800bd92:	f7ff fe39 	bl	800ba08 <prvInsertTimerInActiveList>
					break;
 800bd96:	e7ac      	b.n	800bcf2 <prvTimerTask+0xc6>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bd98:	b672      	cpsid	i
 800bd9a:	e7fe      	b.n	800bd9a <prvTimerTask+0x16e>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bd9c:	2328      	movs	r3, #40	; 0x28
 800bd9e:	5ceb      	ldrb	r3, [r5, r3]
 800bda0:	079a      	lsls	r2, r3, #30
 800bda2:	d504      	bpl.n	800bdae <prvTimerTask+0x182>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bda4:	2201      	movs	r2, #1
 800bda6:	4393      	bics	r3, r2
 800bda8:	3227      	adds	r2, #39	; 0x27
 800bdaa:	54ab      	strb	r3, [r5, r2]
 800bdac:	e7a1      	b.n	800bcf2 <prvTimerTask+0xc6>
							vPortFree( pxTimer );
 800bdae:	0028      	movs	r0, r5
 800bdb0:	f000 f9a6 	bl	800c100 <vPortFree>
 800bdb4:	e79d      	b.n	800bcf2 <prvTimerTask+0xc6>
 800bdb6:	46c0      	nop			; (mov r8, r8)
 800bdb8:	20004c08 	.word	0x20004c08
 800bdbc:	20004c0c 	.word	0x20004c0c
 800bdc0:	20004d2c 	.word	0x20004d2c
 800bdc4:	08012ee4 	.word	0x08012ee4

0800bdc8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdc8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdce:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <prvTaskExitError+0x20>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	d001      	beq.n	800bdda <prvTaskExitError+0x12>
 800bdd6:	b672      	cpsid	i
 800bdd8:	e7fe      	b.n	800bdd8 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 800bdda:	b672      	cpsid	i
	while( ulDummy == 0 )
 800bddc:	9b01      	ldr	r3, [sp, #4]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d0fc      	beq.n	800bddc <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bde2:	b002      	add	sp, #8
 800bde4:	4770      	bx	lr
 800bde6:	46c0      	nop			; (mov r8, r8)
 800bde8:	200000f0 	.word	0x200000f0
 800bdec:	00000000 	.word	0x00000000

0800bdf0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800bdf0:	4a0b      	ldr	r2, [pc, #44]	; (800be20 <pxCurrentTCBConst2>)
 800bdf2:	6813      	ldr	r3, [r2, #0]
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	3020      	adds	r0, #32
 800bdf8:	f380 8809 	msr	PSP, r0
 800bdfc:	2002      	movs	r0, #2
 800bdfe:	f380 8814 	msr	CONTROL, r0
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800be08:	46ae      	mov	lr, r5
 800be0a:	bc08      	pop	{r3}
 800be0c:	bc04      	pop	{r2}
 800be0e:	b662      	cpsie	i
 800be10:	4718      	bx	r3
 800be12:	46c0      	nop			; (mov r8, r8)
 800be14:	46c0      	nop			; (mov r8, r8)
 800be16:	46c0      	nop			; (mov r8, r8)
 800be18:	46c0      	nop			; (mov r8, r8)
 800be1a:	46c0      	nop			; (mov r8, r8)
 800be1c:	46c0      	nop			; (mov r8, r8)
 800be1e:	46c0      	nop			; (mov r8, r8)

0800be20 <pxCurrentTCBConst2>:
 800be20:	2000470c 	.word	0x2000470c

0800be24 <pxPortInitialiseStack>:
{
 800be24:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be26:	1f03      	subs	r3, r0, #4
 800be28:	2480      	movs	r4, #128	; 0x80
 800be2a:	0464      	lsls	r4, r4, #17
 800be2c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800be2e:	3b04      	subs	r3, #4
 800be30:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be32:	3b04      	subs	r3, #4
 800be34:	4902      	ldr	r1, [pc, #8]	; (800be40 <pxPortInitialiseStack+0x1c>)
 800be36:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be38:	3b14      	subs	r3, #20
 800be3a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800be3c:	3840      	subs	r0, #64	; 0x40
}
 800be3e:	bd10      	pop	{r4, pc}
 800be40:	0800bdc9 	.word	0x0800bdc9

0800be44 <SVC_Handler>:
}
 800be44:	4770      	bx	lr
	...

0800be48 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be48:	4b04      	ldr	r3, [pc, #16]	; (800be5c <vPortYield+0x14>)
 800be4a:	2280      	movs	r2, #128	; 0x80
 800be4c:	0552      	lsls	r2, r2, #21
 800be4e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800be50:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800be54:	f3bf 8f6f 	isb	sy
}
 800be58:	4770      	bx	lr
 800be5a:	46c0      	nop			; (mov r8, r8)
 800be5c:	e000ed04 	.word	0xe000ed04

0800be60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800be60:	b672      	cpsid	i
	uxCriticalNesting++;
 800be62:	4a04      	ldr	r2, [pc, #16]	; (800be74 <vPortEnterCritical+0x14>)
 800be64:	6813      	ldr	r3, [r2, #0]
 800be66:	3301      	adds	r3, #1
 800be68:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800be6a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800be6e:	f3bf 8f6f 	isb	sy
}
 800be72:	4770      	bx	lr
 800be74:	200000f0 	.word	0x200000f0

0800be78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800be78:	4b06      	ldr	r3, [pc, #24]	; (800be94 <vPortExitCritical+0x1c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <vPortExitCritical+0xc>
 800be80:	b672      	cpsid	i
 800be82:	e7fe      	b.n	800be82 <vPortExitCritical+0xa>
	uxCriticalNesting--;
 800be84:	3b01      	subs	r3, #1
 800be86:	4a03      	ldr	r2, [pc, #12]	; (800be94 <vPortExitCritical+0x1c>)
 800be88:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d100      	bne.n	800be90 <vPortExitCritical+0x18>
	{
		portENABLE_INTERRUPTS();
 800be8e:	b662      	cpsie	i
	}
}
 800be90:	4770      	bx	lr
 800be92:	46c0      	nop			; (mov r8, r8)
 800be94:	200000f0 	.word	0x200000f0

0800be98 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800be98:	f3ef 8010 	mrs	r0, PRIMASK
 800be9c:	b672      	cpsid	i
 800be9e:	4770      	bx	lr

0800bea0 <vClearInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800bea0:	f380 8810 	msr	PRIMASK, r0
 800bea4:	4770      	bx	lr
	...

0800beb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800beb0:	f3ef 8009 	mrs	r0, PSP
 800beb4:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <pxCurrentTCBConst>)
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	3820      	subs	r0, #32
 800beba:	6010      	str	r0, [r2, #0]
 800bebc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800bebe:	4644      	mov	r4, r8
 800bec0:	464d      	mov	r5, r9
 800bec2:	4656      	mov	r6, sl
 800bec4:	465f      	mov	r7, fp
 800bec6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800bec8:	b508      	push	{r3, lr}
 800beca:	b672      	cpsid	i
 800becc:	f7ff fc4e 	bl	800b76c <vTaskSwitchContext>
 800bed0:	b662      	cpsie	i
 800bed2:	bc0c      	pop	{r2, r3}
 800bed4:	6811      	ldr	r1, [r2, #0]
 800bed6:	6808      	ldr	r0, [r1, #0]
 800bed8:	3010      	adds	r0, #16
 800beda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800bedc:	46a0      	mov	r8, r4
 800bede:	46a9      	mov	r9, r5
 800bee0:	46b2      	mov	sl, r6
 800bee2:	46bb      	mov	fp, r7
 800bee4:	f380 8809 	msr	PSP, r0
 800bee8:	3820      	subs	r0, #32
 800beea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800beec:	4718      	bx	r3
 800beee:	46c0      	nop			; (mov r8, r8)

0800bef0 <pxCurrentTCBConst>:
 800bef0:	2000470c 	.word	0x2000470c

0800bef4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bef4:	b510      	push	{r4, lr}
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800bef6:	f7ff ffcf 	bl	800be98 <ulSetInterruptMaskFromISR>
 800befa:	0004      	movs	r4, r0
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800befc:	f7ff fb0c 	bl	800b518 <xTaskIncrementTick>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d003      	beq.n	800bf0c <xPortSysTickHandler+0x18>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf04:	4b03      	ldr	r3, [pc, #12]	; (800bf14 <xPortSysTickHandler+0x20>)
 800bf06:	2280      	movs	r2, #128	; 0x80
 800bf08:	0552      	lsls	r2, r2, #21
 800bf0a:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800bf0c:	0020      	movs	r0, r4
 800bf0e:	f7ff ffc7 	bl	800bea0 <vClearInterruptMaskFromISR>
}
 800bf12:	bd10      	pop	{r4, pc}
 800bf14:	e000ed04 	.word	0xe000ed04

0800bf18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf18:	b510      	push	{r4, lr}
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf1a:	4c08      	ldr	r4, [pc, #32]	; (800bf3c <vPortSetupTimerInterrupt+0x24>)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf20:	4a07      	ldr	r2, [pc, #28]	; (800bf40 <vPortSetupTimerInterrupt+0x28>)
 800bf22:	6013      	str	r3, [r2, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf24:	4b07      	ldr	r3, [pc, #28]	; (800bf44 <vPortSetupTimerInterrupt+0x2c>)
 800bf26:	6818      	ldr	r0, [r3, #0]
 800bf28:	21fa      	movs	r1, #250	; 0xfa
 800bf2a:	0089      	lsls	r1, r1, #2
 800bf2c:	f7f4 f908 	bl	8000140 <__udivsi3>
 800bf30:	3801      	subs	r0, #1
 800bf32:	4b05      	ldr	r3, [pc, #20]	; (800bf48 <vPortSetupTimerInterrupt+0x30>)
 800bf34:	6018      	str	r0, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800bf36:	2307      	movs	r3, #7
 800bf38:	6023      	str	r3, [r4, #0]
}
 800bf3a:	bd10      	pop	{r4, pc}
 800bf3c:	e000e010 	.word	0xe000e010
 800bf40:	e000e018 	.word	0xe000e018
 800bf44:	200000e4 	.word	0x200000e4
 800bf48:	e000e014 	.word	0xe000e014

0800bf4c <xPortStartScheduler>:
{
 800bf4c:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf4e:	4b0c      	ldr	r3, [pc, #48]	; (800bf80 <xPortStartScheduler+0x34>)
 800bf50:	6819      	ldr	r1, [r3, #0]
 800bf52:	22ff      	movs	r2, #255	; 0xff
 800bf54:	0412      	lsls	r2, r2, #16
 800bf56:	430a      	orrs	r2, r1
 800bf58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf5a:	6819      	ldr	r1, [r3, #0]
 800bf5c:	22ff      	movs	r2, #255	; 0xff
 800bf5e:	0612      	lsls	r2, r2, #24
 800bf60:	430a      	orrs	r2, r1
 800bf62:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800bf64:	f7ff ffd8 	bl	800bf18 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800bf68:	4b06      	ldr	r3, [pc, #24]	; (800bf84 <xPortStartScheduler+0x38>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800bf6e:	f7ff ff3f 	bl	800bdf0 <vPortStartFirstTask>
	vTaskSwitchContext();
 800bf72:	f7ff fbfb 	bl	800b76c <vTaskSwitchContext>
	prvTaskExitError();
 800bf76:	f7ff ff27 	bl	800bdc8 <prvTaskExitError>
}
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	46c0      	nop			; (mov r8, r8)
 800bf80:	e000ed20 	.word	0xe000ed20
 800bf84:	200000f0 	.word	0x200000f0

0800bf88 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bf88:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bf8a:	4b14      	ldr	r3, [pc, #80]	; (800bfdc <prvInsertBlockIntoFreeList+0x54>)
 800bf8c:	001a      	movs	r2, r3
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4283      	cmp	r3, r0
 800bf92:	d3fb      	bcc.n	800bf8c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bf94:	6854      	ldr	r4, [r2, #4]
 800bf96:	1911      	adds	r1, r2, r4
 800bf98:	4288      	cmp	r0, r1
 800bf9a:	d008      	beq.n	800bfae <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bf9c:	6844      	ldr	r4, [r0, #4]
 800bf9e:	1901      	adds	r1, r0, r4
 800bfa0:	428b      	cmp	r3, r1
 800bfa2:	d00e      	beq.n	800bfc2 <prvInsertBlockIntoFreeList+0x3a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfa4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bfa6:	4282      	cmp	r2, r0
 800bfa8:	d000      	beq.n	800bfac <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bfaa:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfac:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bfae:	6841      	ldr	r1, [r0, #4]
 800bfb0:	1909      	adds	r1, r1, r4
 800bfb2:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfb4:	000c      	movs	r4, r1
 800bfb6:	1851      	adds	r1, r2, r1
 800bfb8:	428b      	cmp	r3, r1
 800bfba:	d001      	beq.n	800bfc0 <prvInsertBlockIntoFreeList+0x38>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bfbc:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800bfbe:	e7f5      	b.n	800bfac <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bfc0:	0010      	movs	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bfc2:	4907      	ldr	r1, [pc, #28]	; (800bfe0 <prvInsertBlockIntoFreeList+0x58>)
 800bfc4:	6809      	ldr	r1, [r1, #0]
 800bfc6:	428b      	cmp	r3, r1
 800bfc8:	d005      	beq.n	800bfd6 <prvInsertBlockIntoFreeList+0x4e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	191b      	adds	r3, r3, r4
 800bfce:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bfd0:	6813      	ldr	r3, [r2, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	e7e6      	b.n	800bfa4 <prvInsertBlockIntoFreeList+0x1c>
 800bfd6:	000b      	movs	r3, r1
 800bfd8:	e7e4      	b.n	800bfa4 <prvInsertBlockIntoFreeList+0x1c>
 800bfda:	46c0      	nop			; (mov r8, r8)
 800bfdc:	2000594c 	.word	0x2000594c
 800bfe0:	20004d34 	.word	0x20004d34

0800bfe4 <pvPortMalloc>:
{
 800bfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe6:	0004      	movs	r4, r0
	vTaskSuspendAll();
 800bfe8:	f7ff fa88 	bl	800b4fc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800bfec:	4b3d      	ldr	r3, [pc, #244]	; (800c0e4 <pvPortMalloc+0x100>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d015      	beq.n	800c020 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bff4:	4b3c      	ldr	r3, [pc, #240]	; (800c0e8 <pvPortMalloc+0x104>)
 800bff6:	681d      	ldr	r5, [r3, #0]
 800bff8:	422c      	tst	r4, r5
 800bffa:	d16d      	bne.n	800c0d8 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 800bffc:	2c00      	cmp	r4, #0
 800bffe:	d06b      	beq.n	800c0d8 <pvPortMalloc+0xf4>
				xWantedSize += xHeapStructSize;
 800c000:	0022      	movs	r2, r4
 800c002:	3208      	adds	r2, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c004:	0764      	lsls	r4, r4, #29
 800c006:	d002      	beq.n	800c00e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c008:	2307      	movs	r3, #7
 800c00a:	439a      	bics	r2, r3
 800c00c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c00e:	2a00      	cmp	r2, #0
 800c010:	d062      	beq.n	800c0d8 <pvPortMalloc+0xf4>
 800c012:	4b36      	ldr	r3, [pc, #216]	; (800c0ec <pvPortMalloc+0x108>)
 800c014:	681f      	ldr	r7, [r3, #0]
 800c016:	4297      	cmp	r7, r2
 800c018:	d35e      	bcc.n	800c0d8 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 800c01a:	4935      	ldr	r1, [pc, #212]	; (800c0f0 <pvPortMalloc+0x10c>)
 800c01c:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c01e:	e028      	b.n	800c072 <pvPortMalloc+0x8e>
	uxAddress = ( size_t ) ucHeap;
 800c020:	4a34      	ldr	r2, [pc, #208]	; (800c0f4 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c022:	0753      	lsls	r3, r2, #29
 800c024:	d009      	beq.n	800c03a <pvPortMalloc+0x56>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c026:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c028:	2307      	movs	r3, #7
 800c02a:	4399      	bics	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c02c:	23c0      	movs	r3, #192	; 0xc0
 800c02e:	011b      	lsls	r3, r3, #4
 800c030:	469c      	mov	ip, r3
 800c032:	4462      	add	r2, ip
 800c034:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c036:	000a      	movs	r2, r1
 800c038:	e001      	b.n	800c03e <pvPortMalloc+0x5a>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c03a:	23c0      	movs	r3, #192	; 0xc0
 800c03c:	011b      	lsls	r3, r3, #4
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c03e:	482c      	ldr	r0, [pc, #176]	; (800c0f0 <pvPortMalloc+0x10c>)
 800c040:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c042:	2100      	movs	r1, #0
 800c044:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c046:	18d3      	adds	r3, r2, r3
	uxAddress -= xHeapStructSize;
 800c048:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c04a:	2007      	movs	r0, #7
 800c04c:	4383      	bics	r3, r0
	pxEnd = ( void * ) uxAddress;
 800c04e:	4825      	ldr	r0, [pc, #148]	; (800c0e4 <pvPortMalloc+0x100>)
 800c050:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800c052:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c054:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c056:	1a99      	subs	r1, r3, r2
 800c058:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c05a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c05c:	4b26      	ldr	r3, [pc, #152]	; (800c0f8 <pvPortMalloc+0x114>)
 800c05e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c060:	4b22      	ldr	r3, [pc, #136]	; (800c0ec <pvPortMalloc+0x108>)
 800c062:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c064:	4b20      	ldr	r3, [pc, #128]	; (800c0e8 <pvPortMalloc+0x104>)
 800c066:	2280      	movs	r2, #128	; 0x80
 800c068:	0612      	lsls	r2, r2, #24
 800c06a:	601a      	str	r2, [r3, #0]
}
 800c06c:	e7c2      	b.n	800bff4 <pvPortMalloc+0x10>
 800c06e:	0021      	movs	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800c070:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c072:	6863      	ldr	r3, [r4, #4]
 800c074:	4293      	cmp	r3, r2
 800c076:	d202      	bcs.n	800c07e <pvPortMalloc+0x9a>
 800c078:	6823      	ldr	r3, [r4, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1f7      	bne.n	800c06e <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 800c07e:	4b19      	ldr	r3, [pc, #100]	; (800c0e4 <pvPortMalloc+0x100>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	42a3      	cmp	r3, r4
 800c084:	d028      	beq.n	800c0d8 <pvPortMalloc+0xf4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c086:	680e      	ldr	r6, [r1, #0]
 800c088:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c08e:	6863      	ldr	r3, [r4, #4]
 800c090:	1a9b      	subs	r3, r3, r2
 800c092:	2b10      	cmp	r3, #16
 800c094:	d908      	bls.n	800c0a8 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c096:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c098:	0741      	lsls	r1, r0, #29
 800c09a:	d001      	beq.n	800c0a0 <pvPortMalloc+0xbc>
 800c09c:	b672      	cpsid	i
 800c09e:	e7fe      	b.n	800c09e <pvPortMalloc+0xba>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0a0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0a2:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0a4:	f7ff ff70 	bl	800bf88 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0a8:	6863      	ldr	r3, [r4, #4]
 800c0aa:	1aff      	subs	r7, r7, r3
 800c0ac:	4a0f      	ldr	r2, [pc, #60]	; (800c0ec <pvPortMalloc+0x108>)
 800c0ae:	6017      	str	r7, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0b0:	4a11      	ldr	r2, [pc, #68]	; (800c0f8 <pvPortMalloc+0x114>)
 800c0b2:	6812      	ldr	r2, [r2, #0]
 800c0b4:	4297      	cmp	r7, r2
 800c0b6:	d201      	bcs.n	800c0bc <pvPortMalloc+0xd8>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0b8:	4a0f      	ldr	r2, [pc, #60]	; (800c0f8 <pvPortMalloc+0x114>)
 800c0ba:	6017      	str	r7, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0bc:	431d      	orrs	r5, r3
 800c0be:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800c0c4:	4a0d      	ldr	r2, [pc, #52]	; (800c0fc <pvPortMalloc+0x118>)
 800c0c6:	6813      	ldr	r3, [r2, #0]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800c0cc:	f7ff fabe 	bl	800b64c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0d0:	0773      	lsls	r3, r6, #29
 800c0d2:	d004      	beq.n	800c0de <pvPortMalloc+0xfa>
 800c0d4:	b672      	cpsid	i
 800c0d6:	e7fe      	b.n	800c0d6 <pvPortMalloc+0xf2>
	( void ) xTaskResumeAll();
 800c0d8:	f7ff fab8 	bl	800b64c <xTaskResumeAll>
 800c0dc:	2600      	movs	r6, #0
}
 800c0de:	0030      	movs	r0, r6
 800c0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e2:	46c0      	nop			; (mov r8, r8)
 800c0e4:	20004d34 	.word	0x20004d34
 800c0e8:	20005938 	.word	0x20005938
 800c0ec:	2000593c 	.word	0x2000593c
 800c0f0:	2000594c 	.word	0x2000594c
 800c0f4:	20004d38 	.word	0x20004d38
 800c0f8:	20005940 	.word	0x20005940
 800c0fc:	20005944 	.word	0x20005944

0800c100 <vPortFree>:
{
 800c100:	b510      	push	{r4, lr}
	if( pv != NULL )
 800c102:	2800      	cmp	r0, #0
 800c104:	d023      	beq.n	800c14e <vPortFree+0x4e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c106:	0003      	movs	r3, r0
 800c108:	3b08      	subs	r3, #8
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	4a10      	ldr	r2, [pc, #64]	; (800c150 <vPortFree+0x50>)
 800c10e:	6812      	ldr	r2, [r2, #0]
 800c110:	421a      	tst	r2, r3
 800c112:	d101      	bne.n	800c118 <vPortFree+0x18>
 800c114:	b672      	cpsid	i
 800c116:	e7fe      	b.n	800c116 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c118:	0001      	movs	r1, r0
 800c11a:	3908      	subs	r1, #8
 800c11c:	6809      	ldr	r1, [r1, #0]
 800c11e:	2900      	cmp	r1, #0
 800c120:	d001      	beq.n	800c126 <vPortFree+0x26>
 800c122:	b672      	cpsid	i
 800c124:	e7fe      	b.n	800c124 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c126:	3808      	subs	r0, #8
 800c128:	0004      	movs	r4, r0
 800c12a:	4393      	bics	r3, r2
 800c12c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800c12e:	f7ff f9e5 	bl	800b4fc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c132:	4a08      	ldr	r2, [pc, #32]	; (800c154 <vPortFree+0x54>)
 800c134:	6863      	ldr	r3, [r4, #4]
 800c136:	6811      	ldr	r1, [r2, #0]
 800c138:	185b      	adds	r3, r3, r1
 800c13a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c13c:	0020      	movs	r0, r4
 800c13e:	f7ff ff23 	bl	800bf88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c142:	4a05      	ldr	r2, [pc, #20]	; (800c158 <vPortFree+0x58>)
 800c144:	6813      	ldr	r3, [r2, #0]
 800c146:	3301      	adds	r3, #1
 800c148:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800c14a:	f7ff fa7f 	bl	800b64c <xTaskResumeAll>
}
 800c14e:	bd10      	pop	{r4, pc}
 800c150:	20005938 	.word	0x20005938
 800c154:	2000593c 	.word	0x2000593c
 800c158:	20005948 	.word	0x20005948

0800c15c <atoi>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	220a      	movs	r2, #10
 800c160:	2100      	movs	r1, #0
 800c162:	f000 ff81 	bl	800d068 <strtol>
 800c166:	bd10      	pop	{r4, pc}

0800c168 <malloc>:
 800c168:	b510      	push	{r4, lr}
 800c16a:	4b03      	ldr	r3, [pc, #12]	; (800c178 <malloc+0x10>)
 800c16c:	0001      	movs	r1, r0
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	f000 f826 	bl	800c1c0 <_malloc_r>
 800c174:	bd10      	pop	{r4, pc}
 800c176:	46c0      	nop			; (mov r8, r8)
 800c178:	200002b8 	.word	0x200002b8

0800c17c <sbrk_aligned>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	4e0f      	ldr	r6, [pc, #60]	; (800c1bc <sbrk_aligned+0x40>)
 800c180:	000d      	movs	r5, r1
 800c182:	6831      	ldr	r1, [r6, #0]
 800c184:	0004      	movs	r4, r0
 800c186:	2900      	cmp	r1, #0
 800c188:	d102      	bne.n	800c190 <sbrk_aligned+0x14>
 800c18a:	f002 f8c5 	bl	800e318 <_sbrk_r>
 800c18e:	6030      	str	r0, [r6, #0]
 800c190:	0029      	movs	r1, r5
 800c192:	0020      	movs	r0, r4
 800c194:	f002 f8c0 	bl	800e318 <_sbrk_r>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d00a      	beq.n	800c1b2 <sbrk_aligned+0x36>
 800c19c:	2303      	movs	r3, #3
 800c19e:	1cc5      	adds	r5, r0, #3
 800c1a0:	439d      	bics	r5, r3
 800c1a2:	42a8      	cmp	r0, r5
 800c1a4:	d007      	beq.n	800c1b6 <sbrk_aligned+0x3a>
 800c1a6:	1a29      	subs	r1, r5, r0
 800c1a8:	0020      	movs	r0, r4
 800c1aa:	f002 f8b5 	bl	800e318 <_sbrk_r>
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	d101      	bne.n	800c1b6 <sbrk_aligned+0x3a>
 800c1b2:	2501      	movs	r5, #1
 800c1b4:	426d      	negs	r5, r5
 800c1b6:	0028      	movs	r0, r5
 800c1b8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ba:	46c0      	nop			; (mov r8, r8)
 800c1bc:	20005958 	.word	0x20005958

0800c1c0 <_malloc_r>:
 800c1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1c2:	2203      	movs	r2, #3
 800c1c4:	1ccb      	adds	r3, r1, #3
 800c1c6:	4393      	bics	r3, r2
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	0006      	movs	r6, r0
 800c1cc:	001f      	movs	r7, r3
 800c1ce:	2b0c      	cmp	r3, #12
 800c1d0:	d238      	bcs.n	800c244 <_malloc_r+0x84>
 800c1d2:	270c      	movs	r7, #12
 800c1d4:	42b9      	cmp	r1, r7
 800c1d6:	d837      	bhi.n	800c248 <_malloc_r+0x88>
 800c1d8:	0030      	movs	r0, r6
 800c1da:	f000 f873 	bl	800c2c4 <__malloc_lock>
 800c1de:	4b38      	ldr	r3, [pc, #224]	; (800c2c0 <_malloc_r+0x100>)
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	001c      	movs	r4, r3
 800c1e6:	2c00      	cmp	r4, #0
 800c1e8:	d133      	bne.n	800c252 <_malloc_r+0x92>
 800c1ea:	0039      	movs	r1, r7
 800c1ec:	0030      	movs	r0, r6
 800c1ee:	f7ff ffc5 	bl	800c17c <sbrk_aligned>
 800c1f2:	0004      	movs	r4, r0
 800c1f4:	1c43      	adds	r3, r0, #1
 800c1f6:	d15e      	bne.n	800c2b6 <_malloc_r+0xf6>
 800c1f8:	9b00      	ldr	r3, [sp, #0]
 800c1fa:	681c      	ldr	r4, [r3, #0]
 800c1fc:	0025      	movs	r5, r4
 800c1fe:	2d00      	cmp	r5, #0
 800c200:	d14e      	bne.n	800c2a0 <_malloc_r+0xe0>
 800c202:	2c00      	cmp	r4, #0
 800c204:	d051      	beq.n	800c2aa <_malloc_r+0xea>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	0029      	movs	r1, r5
 800c20a:	18e3      	adds	r3, r4, r3
 800c20c:	0030      	movs	r0, r6
 800c20e:	9301      	str	r3, [sp, #4]
 800c210:	f002 f882 	bl	800e318 <_sbrk_r>
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	4283      	cmp	r3, r0
 800c218:	d147      	bne.n	800c2aa <_malloc_r+0xea>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	0030      	movs	r0, r6
 800c21e:	1aff      	subs	r7, r7, r3
 800c220:	0039      	movs	r1, r7
 800c222:	f7ff ffab 	bl	800c17c <sbrk_aligned>
 800c226:	3001      	adds	r0, #1
 800c228:	d03f      	beq.n	800c2aa <_malloc_r+0xea>
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	19db      	adds	r3, r3, r7
 800c22e:	6023      	str	r3, [r4, #0]
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d040      	beq.n	800c2ba <_malloc_r+0xfa>
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	42a2      	cmp	r2, r4
 800c23c:	d133      	bne.n	800c2a6 <_malloc_r+0xe6>
 800c23e:	2200      	movs	r2, #0
 800c240:	605a      	str	r2, [r3, #4]
 800c242:	e014      	b.n	800c26e <_malloc_r+0xae>
 800c244:	2b00      	cmp	r3, #0
 800c246:	dac5      	bge.n	800c1d4 <_malloc_r+0x14>
 800c248:	230c      	movs	r3, #12
 800c24a:	2500      	movs	r5, #0
 800c24c:	6033      	str	r3, [r6, #0]
 800c24e:	0028      	movs	r0, r5
 800c250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c252:	6821      	ldr	r1, [r4, #0]
 800c254:	1bc9      	subs	r1, r1, r7
 800c256:	d420      	bmi.n	800c29a <_malloc_r+0xda>
 800c258:	290b      	cmp	r1, #11
 800c25a:	d918      	bls.n	800c28e <_malloc_r+0xce>
 800c25c:	19e2      	adds	r2, r4, r7
 800c25e:	6027      	str	r7, [r4, #0]
 800c260:	42a3      	cmp	r3, r4
 800c262:	d112      	bne.n	800c28a <_malloc_r+0xca>
 800c264:	9b00      	ldr	r3, [sp, #0]
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	6863      	ldr	r3, [r4, #4]
 800c26a:	6011      	str	r1, [r2, #0]
 800c26c:	6053      	str	r3, [r2, #4]
 800c26e:	0030      	movs	r0, r6
 800c270:	0025      	movs	r5, r4
 800c272:	f000 f82f 	bl	800c2d4 <__malloc_unlock>
 800c276:	2207      	movs	r2, #7
 800c278:	350b      	adds	r5, #11
 800c27a:	1d23      	adds	r3, r4, #4
 800c27c:	4395      	bics	r5, r2
 800c27e:	1aea      	subs	r2, r5, r3
 800c280:	429d      	cmp	r5, r3
 800c282:	d0e4      	beq.n	800c24e <_malloc_r+0x8e>
 800c284:	1b5b      	subs	r3, r3, r5
 800c286:	50a3      	str	r3, [r4, r2]
 800c288:	e7e1      	b.n	800c24e <_malloc_r+0x8e>
 800c28a:	605a      	str	r2, [r3, #4]
 800c28c:	e7ec      	b.n	800c268 <_malloc_r+0xa8>
 800c28e:	6862      	ldr	r2, [r4, #4]
 800c290:	42a3      	cmp	r3, r4
 800c292:	d1d5      	bne.n	800c240 <_malloc_r+0x80>
 800c294:	9b00      	ldr	r3, [sp, #0]
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	e7e9      	b.n	800c26e <_malloc_r+0xae>
 800c29a:	0023      	movs	r3, r4
 800c29c:	6864      	ldr	r4, [r4, #4]
 800c29e:	e7a2      	b.n	800c1e6 <_malloc_r+0x26>
 800c2a0:	002c      	movs	r4, r5
 800c2a2:	686d      	ldr	r5, [r5, #4]
 800c2a4:	e7ab      	b.n	800c1fe <_malloc_r+0x3e>
 800c2a6:	0013      	movs	r3, r2
 800c2a8:	e7c4      	b.n	800c234 <_malloc_r+0x74>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	0030      	movs	r0, r6
 800c2ae:	6033      	str	r3, [r6, #0]
 800c2b0:	f000 f810 	bl	800c2d4 <__malloc_unlock>
 800c2b4:	e7cb      	b.n	800c24e <_malloc_r+0x8e>
 800c2b6:	6027      	str	r7, [r4, #0]
 800c2b8:	e7d9      	b.n	800c26e <_malloc_r+0xae>
 800c2ba:	605b      	str	r3, [r3, #4]
 800c2bc:	deff      	udf	#255	; 0xff
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	20005954 	.word	0x20005954

0800c2c4 <__malloc_lock>:
 800c2c4:	b510      	push	{r4, lr}
 800c2c6:	4802      	ldr	r0, [pc, #8]	; (800c2d0 <__malloc_lock+0xc>)
 800c2c8:	f002 f877 	bl	800e3ba <__retarget_lock_acquire_recursive>
 800c2cc:	bd10      	pop	{r4, pc}
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	20005a9c 	.word	0x20005a9c

0800c2d4 <__malloc_unlock>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4802      	ldr	r0, [pc, #8]	; (800c2e0 <__malloc_unlock+0xc>)
 800c2d8:	f002 f870 	bl	800e3bc <__retarget_lock_release_recursive>
 800c2dc:	bd10      	pop	{r4, pc}
 800c2de:	46c0      	nop			; (mov r8, r8)
 800c2e0:	20005a9c 	.word	0x20005a9c

0800c2e4 <sulp>:
 800c2e4:	b570      	push	{r4, r5, r6, lr}
 800c2e6:	0016      	movs	r6, r2
 800c2e8:	000d      	movs	r5, r1
 800c2ea:	f003 fe89 	bl	8010000 <__ulp>
 800c2ee:	2e00      	cmp	r6, #0
 800c2f0:	d00d      	beq.n	800c30e <sulp+0x2a>
 800c2f2:	236b      	movs	r3, #107	; 0x6b
 800c2f4:	006a      	lsls	r2, r5, #1
 800c2f6:	0d52      	lsrs	r2, r2, #21
 800c2f8:	1a9b      	subs	r3, r3, r2
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	dd07      	ble.n	800c30e <sulp+0x2a>
 800c2fe:	2400      	movs	r4, #0
 800c300:	4a03      	ldr	r2, [pc, #12]	; (800c310 <sulp+0x2c>)
 800c302:	051b      	lsls	r3, r3, #20
 800c304:	189d      	adds	r5, r3, r2
 800c306:	002b      	movs	r3, r5
 800c308:	0022      	movs	r2, r4
 800c30a:	f7f5 ffe3 	bl	80022d4 <__aeabi_dmul>
 800c30e:	bd70      	pop	{r4, r5, r6, pc}
 800c310:	3ff00000 	.word	0x3ff00000

0800c314 <_strtod_l>:
 800c314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c316:	b0a1      	sub	sp, #132	; 0x84
 800c318:	9219      	str	r2, [sp, #100]	; 0x64
 800c31a:	2200      	movs	r2, #0
 800c31c:	2600      	movs	r6, #0
 800c31e:	2700      	movs	r7, #0
 800c320:	9004      	str	r0, [sp, #16]
 800c322:	9107      	str	r1, [sp, #28]
 800c324:	921c      	str	r2, [sp, #112]	; 0x70
 800c326:	911b      	str	r1, [sp, #108]	; 0x6c
 800c328:	780a      	ldrb	r2, [r1, #0]
 800c32a:	2a2b      	cmp	r2, #43	; 0x2b
 800c32c:	d055      	beq.n	800c3da <_strtod_l+0xc6>
 800c32e:	d841      	bhi.n	800c3b4 <_strtod_l+0xa0>
 800c330:	2a0d      	cmp	r2, #13
 800c332:	d83b      	bhi.n	800c3ac <_strtod_l+0x98>
 800c334:	2a08      	cmp	r2, #8
 800c336:	d83b      	bhi.n	800c3b0 <_strtod_l+0x9c>
 800c338:	2a00      	cmp	r2, #0
 800c33a:	d044      	beq.n	800c3c6 <_strtod_l+0xb2>
 800c33c:	2200      	movs	r2, #0
 800c33e:	920f      	str	r2, [sp, #60]	; 0x3c
 800c340:	2100      	movs	r1, #0
 800c342:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c344:	9109      	str	r1, [sp, #36]	; 0x24
 800c346:	782a      	ldrb	r2, [r5, #0]
 800c348:	2a30      	cmp	r2, #48	; 0x30
 800c34a:	d000      	beq.n	800c34e <_strtod_l+0x3a>
 800c34c:	e085      	b.n	800c45a <_strtod_l+0x146>
 800c34e:	786a      	ldrb	r2, [r5, #1]
 800c350:	3120      	adds	r1, #32
 800c352:	438a      	bics	r2, r1
 800c354:	2a58      	cmp	r2, #88	; 0x58
 800c356:	d000      	beq.n	800c35a <_strtod_l+0x46>
 800c358:	e075      	b.n	800c446 <_strtod_l+0x132>
 800c35a:	9302      	str	r3, [sp, #8]
 800c35c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c35e:	4a97      	ldr	r2, [pc, #604]	; (800c5bc <_strtod_l+0x2a8>)
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	ab1c      	add	r3, sp, #112	; 0x70
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	9804      	ldr	r0, [sp, #16]
 800c368:	ab1d      	add	r3, sp, #116	; 0x74
 800c36a:	a91b      	add	r1, sp, #108	; 0x6c
 800c36c:	f002 ffbe 	bl	800f2ec <__gethex>
 800c370:	230f      	movs	r3, #15
 800c372:	0002      	movs	r2, r0
 800c374:	401a      	ands	r2, r3
 800c376:	0004      	movs	r4, r0
 800c378:	9205      	str	r2, [sp, #20]
 800c37a:	4218      	tst	r0, r3
 800c37c:	d005      	beq.n	800c38a <_strtod_l+0x76>
 800c37e:	2a06      	cmp	r2, #6
 800c380:	d12d      	bne.n	800c3de <_strtod_l+0xca>
 800c382:	1c6b      	adds	r3, r5, #1
 800c384:	931b      	str	r3, [sp, #108]	; 0x6c
 800c386:	2300      	movs	r3, #0
 800c388:	930f      	str	r3, [sp, #60]	; 0x3c
 800c38a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <_strtod_l+0x82>
 800c390:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c392:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c394:	6013      	str	r3, [r2, #0]
 800c396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d01b      	beq.n	800c3d4 <_strtod_l+0xc0>
 800c39c:	2380      	movs	r3, #128	; 0x80
 800c39e:	0032      	movs	r2, r6
 800c3a0:	061b      	lsls	r3, r3, #24
 800c3a2:	18fb      	adds	r3, r7, r3
 800c3a4:	0010      	movs	r0, r2
 800c3a6:	0019      	movs	r1, r3
 800c3a8:	b021      	add	sp, #132	; 0x84
 800c3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ac:	2a20      	cmp	r2, #32
 800c3ae:	d1c5      	bne.n	800c33c <_strtod_l+0x28>
 800c3b0:	3101      	adds	r1, #1
 800c3b2:	e7b8      	b.n	800c326 <_strtod_l+0x12>
 800c3b4:	2a2d      	cmp	r2, #45	; 0x2d
 800c3b6:	d1c1      	bne.n	800c33c <_strtod_l+0x28>
 800c3b8:	3a2c      	subs	r2, #44	; 0x2c
 800c3ba:	920f      	str	r2, [sp, #60]	; 0x3c
 800c3bc:	1c4a      	adds	r2, r1, #1
 800c3be:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3c0:	784a      	ldrb	r2, [r1, #1]
 800c3c2:	2a00      	cmp	r2, #0
 800c3c4:	d1bc      	bne.n	800c340 <_strtod_l+0x2c>
 800c3c6:	9b07      	ldr	r3, [sp, #28]
 800c3c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1dd      	bne.n	800c390 <_strtod_l+0x7c>
 800c3d4:	0032      	movs	r2, r6
 800c3d6:	003b      	movs	r3, r7
 800c3d8:	e7e4      	b.n	800c3a4 <_strtod_l+0x90>
 800c3da:	2200      	movs	r2, #0
 800c3dc:	e7ed      	b.n	800c3ba <_strtod_l+0xa6>
 800c3de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c3e0:	2a00      	cmp	r2, #0
 800c3e2:	d007      	beq.n	800c3f4 <_strtod_l+0xe0>
 800c3e4:	2135      	movs	r1, #53	; 0x35
 800c3e6:	a81e      	add	r0, sp, #120	; 0x78
 800c3e8:	f003 fefb 	bl	80101e2 <__copybits>
 800c3ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c3ee:	9804      	ldr	r0, [sp, #16]
 800c3f0:	f003 fac4 	bl	800f97c <_Bfree>
 800c3f4:	9805      	ldr	r0, [sp, #20]
 800c3f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c3f8:	3801      	subs	r0, #1
 800c3fa:	2804      	cmp	r0, #4
 800c3fc:	d806      	bhi.n	800c40c <_strtod_l+0xf8>
 800c3fe:	f7f3 fe8b 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c402:	0312      	.short	0x0312
 800c404:	1e1c      	.short	0x1e1c
 800c406:	12          	.byte	0x12
 800c407:	00          	.byte	0x00
 800c408:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c40a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c40c:	05e4      	lsls	r4, r4, #23
 800c40e:	d502      	bpl.n	800c416 <_strtod_l+0x102>
 800c410:	2380      	movs	r3, #128	; 0x80
 800c412:	061b      	lsls	r3, r3, #24
 800c414:	431f      	orrs	r7, r3
 800c416:	4b6a      	ldr	r3, [pc, #424]	; (800c5c0 <_strtod_l+0x2ac>)
 800c418:	423b      	tst	r3, r7
 800c41a:	d1b6      	bne.n	800c38a <_strtod_l+0x76>
 800c41c:	f001 ffa2 	bl	800e364 <__errno>
 800c420:	2322      	movs	r3, #34	; 0x22
 800c422:	6003      	str	r3, [r0, #0]
 800c424:	e7b1      	b.n	800c38a <_strtod_l+0x76>
 800c426:	4967      	ldr	r1, [pc, #412]	; (800c5c4 <_strtod_l+0x2b0>)
 800c428:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c42a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c42c:	400a      	ands	r2, r1
 800c42e:	4966      	ldr	r1, [pc, #408]	; (800c5c8 <_strtod_l+0x2b4>)
 800c430:	185b      	adds	r3, r3, r1
 800c432:	051b      	lsls	r3, r3, #20
 800c434:	431a      	orrs	r2, r3
 800c436:	0017      	movs	r7, r2
 800c438:	e7e8      	b.n	800c40c <_strtod_l+0xf8>
 800c43a:	4f61      	ldr	r7, [pc, #388]	; (800c5c0 <_strtod_l+0x2ac>)
 800c43c:	e7e6      	b.n	800c40c <_strtod_l+0xf8>
 800c43e:	2601      	movs	r6, #1
 800c440:	4f62      	ldr	r7, [pc, #392]	; (800c5cc <_strtod_l+0x2b8>)
 800c442:	4276      	negs	r6, r6
 800c444:	e7e2      	b.n	800c40c <_strtod_l+0xf8>
 800c446:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c448:	1c5a      	adds	r2, r3, #1
 800c44a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c44c:	785b      	ldrb	r3, [r3, #1]
 800c44e:	2b30      	cmp	r3, #48	; 0x30
 800c450:	d0f9      	beq.n	800c446 <_strtod_l+0x132>
 800c452:	2b00      	cmp	r3, #0
 800c454:	d099      	beq.n	800c38a <_strtod_l+0x76>
 800c456:	2301      	movs	r3, #1
 800c458:	9309      	str	r3, [sp, #36]	; 0x24
 800c45a:	2500      	movs	r5, #0
 800c45c:	220a      	movs	r2, #10
 800c45e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c460:	950d      	str	r5, [sp, #52]	; 0x34
 800c462:	9310      	str	r3, [sp, #64]	; 0x40
 800c464:	9508      	str	r5, [sp, #32]
 800c466:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c468:	7804      	ldrb	r4, [r0, #0]
 800c46a:	0023      	movs	r3, r4
 800c46c:	3b30      	subs	r3, #48	; 0x30
 800c46e:	b2d9      	uxtb	r1, r3
 800c470:	2909      	cmp	r1, #9
 800c472:	d927      	bls.n	800c4c4 <_strtod_l+0x1b0>
 800c474:	2201      	movs	r2, #1
 800c476:	4956      	ldr	r1, [pc, #344]	; (800c5d0 <_strtod_l+0x2bc>)
 800c478:	f001 fe0f 	bl	800e09a <strncmp>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d031      	beq.n	800c4e4 <_strtod_l+0x1d0>
 800c480:	2000      	movs	r0, #0
 800c482:	0023      	movs	r3, r4
 800c484:	4684      	mov	ip, r0
 800c486:	9a08      	ldr	r2, [sp, #32]
 800c488:	900c      	str	r0, [sp, #48]	; 0x30
 800c48a:	9205      	str	r2, [sp, #20]
 800c48c:	2220      	movs	r2, #32
 800c48e:	0019      	movs	r1, r3
 800c490:	4391      	bics	r1, r2
 800c492:	000a      	movs	r2, r1
 800c494:	2100      	movs	r1, #0
 800c496:	9106      	str	r1, [sp, #24]
 800c498:	2a45      	cmp	r2, #69	; 0x45
 800c49a:	d000      	beq.n	800c49e <_strtod_l+0x18a>
 800c49c:	e0c2      	b.n	800c624 <_strtod_l+0x310>
 800c49e:	9b05      	ldr	r3, [sp, #20]
 800c4a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4a2:	4303      	orrs	r3, r0
 800c4a4:	4313      	orrs	r3, r2
 800c4a6:	428b      	cmp	r3, r1
 800c4a8:	d08d      	beq.n	800c3c6 <_strtod_l+0xb2>
 800c4aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4ac:	9307      	str	r3, [sp, #28]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800c4b2:	9b07      	ldr	r3, [sp, #28]
 800c4b4:	785b      	ldrb	r3, [r3, #1]
 800c4b6:	2b2b      	cmp	r3, #43	; 0x2b
 800c4b8:	d071      	beq.n	800c59e <_strtod_l+0x28a>
 800c4ba:	000c      	movs	r4, r1
 800c4bc:	2b2d      	cmp	r3, #45	; 0x2d
 800c4be:	d174      	bne.n	800c5aa <_strtod_l+0x296>
 800c4c0:	2401      	movs	r4, #1
 800c4c2:	e06d      	b.n	800c5a0 <_strtod_l+0x28c>
 800c4c4:	9908      	ldr	r1, [sp, #32]
 800c4c6:	2908      	cmp	r1, #8
 800c4c8:	dc09      	bgt.n	800c4de <_strtod_l+0x1ca>
 800c4ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c4cc:	4351      	muls	r1, r2
 800c4ce:	185b      	adds	r3, r3, r1
 800c4d0:	930d      	str	r3, [sp, #52]	; 0x34
 800c4d2:	9b08      	ldr	r3, [sp, #32]
 800c4d4:	3001      	adds	r0, #1
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	9308      	str	r3, [sp, #32]
 800c4da:	901b      	str	r0, [sp, #108]	; 0x6c
 800c4dc:	e7c3      	b.n	800c466 <_strtod_l+0x152>
 800c4de:	4355      	muls	r5, r2
 800c4e0:	195d      	adds	r5, r3, r5
 800c4e2:	e7f6      	b.n	800c4d2 <_strtod_l+0x1be>
 800c4e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4e6:	1c5a      	adds	r2, r3, #1
 800c4e8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c4ea:	9a08      	ldr	r2, [sp, #32]
 800c4ec:	785b      	ldrb	r3, [r3, #1]
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	d03a      	beq.n	800c568 <_strtod_l+0x254>
 800c4f2:	900c      	str	r0, [sp, #48]	; 0x30
 800c4f4:	9205      	str	r2, [sp, #20]
 800c4f6:	001a      	movs	r2, r3
 800c4f8:	3a30      	subs	r2, #48	; 0x30
 800c4fa:	2a09      	cmp	r2, #9
 800c4fc:	d912      	bls.n	800c524 <_strtod_l+0x210>
 800c4fe:	2201      	movs	r2, #1
 800c500:	4694      	mov	ip, r2
 800c502:	e7c3      	b.n	800c48c <_strtod_l+0x178>
 800c504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c506:	3001      	adds	r0, #1
 800c508:	1c5a      	adds	r2, r3, #1
 800c50a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c50c:	785b      	ldrb	r3, [r3, #1]
 800c50e:	2b30      	cmp	r3, #48	; 0x30
 800c510:	d0f8      	beq.n	800c504 <_strtod_l+0x1f0>
 800c512:	001a      	movs	r2, r3
 800c514:	3a31      	subs	r2, #49	; 0x31
 800c516:	2a08      	cmp	r2, #8
 800c518:	d83c      	bhi.n	800c594 <_strtod_l+0x280>
 800c51a:	900c      	str	r0, [sp, #48]	; 0x30
 800c51c:	2000      	movs	r0, #0
 800c51e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c520:	9005      	str	r0, [sp, #20]
 800c522:	9210      	str	r2, [sp, #64]	; 0x40
 800c524:	001a      	movs	r2, r3
 800c526:	1c41      	adds	r1, r0, #1
 800c528:	3a30      	subs	r2, #48	; 0x30
 800c52a:	2b30      	cmp	r3, #48	; 0x30
 800c52c:	d016      	beq.n	800c55c <_strtod_l+0x248>
 800c52e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c530:	185b      	adds	r3, r3, r1
 800c532:	930c      	str	r3, [sp, #48]	; 0x30
 800c534:	9b05      	ldr	r3, [sp, #20]
 800c536:	210a      	movs	r1, #10
 800c538:	469c      	mov	ip, r3
 800c53a:	4484      	add	ip, r0
 800c53c:	4563      	cmp	r3, ip
 800c53e:	d115      	bne.n	800c56c <_strtod_l+0x258>
 800c540:	9905      	ldr	r1, [sp, #20]
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	3101      	adds	r1, #1
 800c546:	1809      	adds	r1, r1, r0
 800c548:	181b      	adds	r3, r3, r0
 800c54a:	9105      	str	r1, [sp, #20]
 800c54c:	2b08      	cmp	r3, #8
 800c54e:	dc19      	bgt.n	800c584 <_strtod_l+0x270>
 800c550:	230a      	movs	r3, #10
 800c552:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c554:	434b      	muls	r3, r1
 800c556:	2100      	movs	r1, #0
 800c558:	18d3      	adds	r3, r2, r3
 800c55a:	930d      	str	r3, [sp, #52]	; 0x34
 800c55c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c55e:	0008      	movs	r0, r1
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	921b      	str	r2, [sp, #108]	; 0x6c
 800c564:	785b      	ldrb	r3, [r3, #1]
 800c566:	e7c6      	b.n	800c4f6 <_strtod_l+0x1e2>
 800c568:	9808      	ldr	r0, [sp, #32]
 800c56a:	e7d0      	b.n	800c50e <_strtod_l+0x1fa>
 800c56c:	1c5c      	adds	r4, r3, #1
 800c56e:	2b08      	cmp	r3, #8
 800c570:	dc04      	bgt.n	800c57c <_strtod_l+0x268>
 800c572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c574:	434b      	muls	r3, r1
 800c576:	930d      	str	r3, [sp, #52]	; 0x34
 800c578:	0023      	movs	r3, r4
 800c57a:	e7df      	b.n	800c53c <_strtod_l+0x228>
 800c57c:	2c10      	cmp	r4, #16
 800c57e:	dcfb      	bgt.n	800c578 <_strtod_l+0x264>
 800c580:	434d      	muls	r5, r1
 800c582:	e7f9      	b.n	800c578 <_strtod_l+0x264>
 800c584:	9b05      	ldr	r3, [sp, #20]
 800c586:	2100      	movs	r1, #0
 800c588:	2b10      	cmp	r3, #16
 800c58a:	dce7      	bgt.n	800c55c <_strtod_l+0x248>
 800c58c:	230a      	movs	r3, #10
 800c58e:	435d      	muls	r5, r3
 800c590:	1955      	adds	r5, r2, r5
 800c592:	e7e3      	b.n	800c55c <_strtod_l+0x248>
 800c594:	2200      	movs	r2, #0
 800c596:	920c      	str	r2, [sp, #48]	; 0x30
 800c598:	9205      	str	r2, [sp, #20]
 800c59a:	3201      	adds	r2, #1
 800c59c:	e7b0      	b.n	800c500 <_strtod_l+0x1ec>
 800c59e:	2400      	movs	r4, #0
 800c5a0:	9b07      	ldr	r3, [sp, #28]
 800c5a2:	3302      	adds	r3, #2
 800c5a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5a6:	9b07      	ldr	r3, [sp, #28]
 800c5a8:	789b      	ldrb	r3, [r3, #2]
 800c5aa:	001a      	movs	r2, r3
 800c5ac:	3a30      	subs	r2, #48	; 0x30
 800c5ae:	2a09      	cmp	r2, #9
 800c5b0:	d914      	bls.n	800c5dc <_strtod_l+0x2c8>
 800c5b2:	9a07      	ldr	r2, [sp, #28]
 800c5b4:	921b      	str	r2, [sp, #108]	; 0x6c
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	e033      	b.n	800c622 <_strtod_l+0x30e>
 800c5ba:	46c0      	nop			; (mov r8, r8)
 800c5bc:	08012f10 	.word	0x08012f10
 800c5c0:	7ff00000 	.word	0x7ff00000
 800c5c4:	ffefffff 	.word	0xffefffff
 800c5c8:	00000433 	.word	0x00000433
 800c5cc:	7fffffff 	.word	0x7fffffff
 800c5d0:	08012f0c 	.word	0x08012f0c
 800c5d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5d6:	1c5a      	adds	r2, r3, #1
 800c5d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c5da:	785b      	ldrb	r3, [r3, #1]
 800c5dc:	2b30      	cmp	r3, #48	; 0x30
 800c5de:	d0f9      	beq.n	800c5d4 <_strtod_l+0x2c0>
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	9206      	str	r2, [sp, #24]
 800c5e4:	001a      	movs	r2, r3
 800c5e6:	3a31      	subs	r2, #49	; 0x31
 800c5e8:	2a08      	cmp	r2, #8
 800c5ea:	d81b      	bhi.n	800c624 <_strtod_l+0x310>
 800c5ec:	3b30      	subs	r3, #48	; 0x30
 800c5ee:	930e      	str	r3, [sp, #56]	; 0x38
 800c5f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5f2:	9306      	str	r3, [sp, #24]
 800c5f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5f6:	1c59      	adds	r1, r3, #1
 800c5f8:	911b      	str	r1, [sp, #108]	; 0x6c
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	001a      	movs	r2, r3
 800c5fe:	3a30      	subs	r2, #48	; 0x30
 800c600:	2a09      	cmp	r2, #9
 800c602:	d93a      	bls.n	800c67a <_strtod_l+0x366>
 800c604:	9a06      	ldr	r2, [sp, #24]
 800c606:	1a8a      	subs	r2, r1, r2
 800c608:	49b2      	ldr	r1, [pc, #712]	; (800c8d4 <_strtod_l+0x5c0>)
 800c60a:	9106      	str	r1, [sp, #24]
 800c60c:	2a08      	cmp	r2, #8
 800c60e:	dc04      	bgt.n	800c61a <_strtod_l+0x306>
 800c610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c612:	9206      	str	r2, [sp, #24]
 800c614:	428a      	cmp	r2, r1
 800c616:	dd00      	ble.n	800c61a <_strtod_l+0x306>
 800c618:	9106      	str	r1, [sp, #24]
 800c61a:	2c00      	cmp	r4, #0
 800c61c:	d002      	beq.n	800c624 <_strtod_l+0x310>
 800c61e:	9a06      	ldr	r2, [sp, #24]
 800c620:	4252      	negs	r2, r2
 800c622:	9206      	str	r2, [sp, #24]
 800c624:	9a05      	ldr	r2, [sp, #20]
 800c626:	2a00      	cmp	r2, #0
 800c628:	d14d      	bne.n	800c6c6 <_strtod_l+0x3b2>
 800c62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c62c:	4310      	orrs	r0, r2
 800c62e:	d000      	beq.n	800c632 <_strtod_l+0x31e>
 800c630:	e6ab      	b.n	800c38a <_strtod_l+0x76>
 800c632:	4662      	mov	r2, ip
 800c634:	2a00      	cmp	r2, #0
 800c636:	d000      	beq.n	800c63a <_strtod_l+0x326>
 800c638:	e6c5      	b.n	800c3c6 <_strtod_l+0xb2>
 800c63a:	2b69      	cmp	r3, #105	; 0x69
 800c63c:	d027      	beq.n	800c68e <_strtod_l+0x37a>
 800c63e:	dc23      	bgt.n	800c688 <_strtod_l+0x374>
 800c640:	2b49      	cmp	r3, #73	; 0x49
 800c642:	d024      	beq.n	800c68e <_strtod_l+0x37a>
 800c644:	2b4e      	cmp	r3, #78	; 0x4e
 800c646:	d000      	beq.n	800c64a <_strtod_l+0x336>
 800c648:	e6bd      	b.n	800c3c6 <_strtod_l+0xb2>
 800c64a:	49a3      	ldr	r1, [pc, #652]	; (800c8d8 <_strtod_l+0x5c4>)
 800c64c:	a81b      	add	r0, sp, #108	; 0x6c
 800c64e:	f003 f883 	bl	800f758 <__match>
 800c652:	2800      	cmp	r0, #0
 800c654:	d100      	bne.n	800c658 <_strtod_l+0x344>
 800c656:	e6b6      	b.n	800c3c6 <_strtod_l+0xb2>
 800c658:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b28      	cmp	r3, #40	; 0x28
 800c65e:	d12c      	bne.n	800c6ba <_strtod_l+0x3a6>
 800c660:	499e      	ldr	r1, [pc, #632]	; (800c8dc <_strtod_l+0x5c8>)
 800c662:	aa1e      	add	r2, sp, #120	; 0x78
 800c664:	a81b      	add	r0, sp, #108	; 0x6c
 800c666:	f003 f88b 	bl	800f780 <__hexnan>
 800c66a:	2805      	cmp	r0, #5
 800c66c:	d125      	bne.n	800c6ba <_strtod_l+0x3a6>
 800c66e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c670:	4a9b      	ldr	r2, [pc, #620]	; (800c8e0 <_strtod_l+0x5cc>)
 800c672:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c674:	431a      	orrs	r2, r3
 800c676:	0017      	movs	r7, r2
 800c678:	e687      	b.n	800c38a <_strtod_l+0x76>
 800c67a:	220a      	movs	r2, #10
 800c67c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c67e:	434a      	muls	r2, r1
 800c680:	18d2      	adds	r2, r2, r3
 800c682:	3a30      	subs	r2, #48	; 0x30
 800c684:	920e      	str	r2, [sp, #56]	; 0x38
 800c686:	e7b5      	b.n	800c5f4 <_strtod_l+0x2e0>
 800c688:	2b6e      	cmp	r3, #110	; 0x6e
 800c68a:	d0de      	beq.n	800c64a <_strtod_l+0x336>
 800c68c:	e69b      	b.n	800c3c6 <_strtod_l+0xb2>
 800c68e:	4995      	ldr	r1, [pc, #596]	; (800c8e4 <_strtod_l+0x5d0>)
 800c690:	a81b      	add	r0, sp, #108	; 0x6c
 800c692:	f003 f861 	bl	800f758 <__match>
 800c696:	2800      	cmp	r0, #0
 800c698:	d100      	bne.n	800c69c <_strtod_l+0x388>
 800c69a:	e694      	b.n	800c3c6 <_strtod_l+0xb2>
 800c69c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c69e:	4992      	ldr	r1, [pc, #584]	; (800c8e8 <_strtod_l+0x5d4>)
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	a81b      	add	r0, sp, #108	; 0x6c
 800c6a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c6a6:	f003 f857 	bl	800f758 <__match>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	d102      	bne.n	800c6b4 <_strtod_l+0x3a0>
 800c6ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	931b      	str	r3, [sp, #108]	; 0x6c
 800c6b4:	2600      	movs	r6, #0
 800c6b6:	4f8a      	ldr	r7, [pc, #552]	; (800c8e0 <_strtod_l+0x5cc>)
 800c6b8:	e667      	b.n	800c38a <_strtod_l+0x76>
 800c6ba:	488c      	ldr	r0, [pc, #560]	; (800c8ec <_strtod_l+0x5d8>)
 800c6bc:	f001 fe9c 	bl	800e3f8 <nan>
 800c6c0:	0006      	movs	r6, r0
 800c6c2:	000f      	movs	r7, r1
 800c6c4:	e661      	b.n	800c38a <_strtod_l+0x76>
 800c6c6:	9b06      	ldr	r3, [sp, #24]
 800c6c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6ca:	1a9b      	subs	r3, r3, r2
 800c6cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ce:	9b08      	ldr	r3, [sp, #32]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d101      	bne.n	800c6d8 <_strtod_l+0x3c4>
 800c6d4:	9b05      	ldr	r3, [sp, #20]
 800c6d6:	9308      	str	r3, [sp, #32]
 800c6d8:	9c05      	ldr	r4, [sp, #20]
 800c6da:	2c10      	cmp	r4, #16
 800c6dc:	dd00      	ble.n	800c6e0 <_strtod_l+0x3cc>
 800c6de:	2410      	movs	r4, #16
 800c6e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c6e2:	f7f6 fcbf 	bl	8003064 <__aeabi_ui2d>
 800c6e6:	9b05      	ldr	r3, [sp, #20]
 800c6e8:	0006      	movs	r6, r0
 800c6ea:	000f      	movs	r7, r1
 800c6ec:	2b09      	cmp	r3, #9
 800c6ee:	dd15      	ble.n	800c71c <_strtod_l+0x408>
 800c6f0:	0022      	movs	r2, r4
 800c6f2:	4b7f      	ldr	r3, [pc, #508]	; (800c8f0 <_strtod_l+0x5dc>)
 800c6f4:	3a09      	subs	r2, #9
 800c6f6:	00d2      	lsls	r2, r2, #3
 800c6f8:	189b      	adds	r3, r3, r2
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	f7f5 fde9 	bl	80022d4 <__aeabi_dmul>
 800c702:	0006      	movs	r6, r0
 800c704:	0028      	movs	r0, r5
 800c706:	000f      	movs	r7, r1
 800c708:	f7f6 fcac 	bl	8003064 <__aeabi_ui2d>
 800c70c:	0002      	movs	r2, r0
 800c70e:	000b      	movs	r3, r1
 800c710:	0030      	movs	r0, r6
 800c712:	0039      	movs	r1, r7
 800c714:	f7f4 fe84 	bl	8001420 <__aeabi_dadd>
 800c718:	0006      	movs	r6, r0
 800c71a:	000f      	movs	r7, r1
 800c71c:	9b05      	ldr	r3, [sp, #20]
 800c71e:	2b0f      	cmp	r3, #15
 800c720:	dc39      	bgt.n	800c796 <_strtod_l+0x482>
 800c722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d100      	bne.n	800c72a <_strtod_l+0x416>
 800c728:	e62f      	b.n	800c38a <_strtod_l+0x76>
 800c72a:	dd24      	ble.n	800c776 <_strtod_l+0x462>
 800c72c:	2b16      	cmp	r3, #22
 800c72e:	dc09      	bgt.n	800c744 <_strtod_l+0x430>
 800c730:	496f      	ldr	r1, [pc, #444]	; (800c8f0 <_strtod_l+0x5dc>)
 800c732:	00db      	lsls	r3, r3, #3
 800c734:	18c9      	adds	r1, r1, r3
 800c736:	0032      	movs	r2, r6
 800c738:	6808      	ldr	r0, [r1, #0]
 800c73a:	6849      	ldr	r1, [r1, #4]
 800c73c:	003b      	movs	r3, r7
 800c73e:	f7f5 fdc9 	bl	80022d4 <__aeabi_dmul>
 800c742:	e7bd      	b.n	800c6c0 <_strtod_l+0x3ac>
 800c744:	2325      	movs	r3, #37	; 0x25
 800c746:	9a05      	ldr	r2, [sp, #20]
 800c748:	1a9b      	subs	r3, r3, r2
 800c74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c74c:	4293      	cmp	r3, r2
 800c74e:	db22      	blt.n	800c796 <_strtod_l+0x482>
 800c750:	240f      	movs	r4, #15
 800c752:	9b05      	ldr	r3, [sp, #20]
 800c754:	4d66      	ldr	r5, [pc, #408]	; (800c8f0 <_strtod_l+0x5dc>)
 800c756:	1ae4      	subs	r4, r4, r3
 800c758:	00e1      	lsls	r1, r4, #3
 800c75a:	1869      	adds	r1, r5, r1
 800c75c:	0032      	movs	r2, r6
 800c75e:	6808      	ldr	r0, [r1, #0]
 800c760:	6849      	ldr	r1, [r1, #4]
 800c762:	003b      	movs	r3, r7
 800c764:	f7f5 fdb6 	bl	80022d4 <__aeabi_dmul>
 800c768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c76a:	1b1c      	subs	r4, r3, r4
 800c76c:	00e4      	lsls	r4, r4, #3
 800c76e:	192d      	adds	r5, r5, r4
 800c770:	682a      	ldr	r2, [r5, #0]
 800c772:	686b      	ldr	r3, [r5, #4]
 800c774:	e7e3      	b.n	800c73e <_strtod_l+0x42a>
 800c776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c778:	3316      	adds	r3, #22
 800c77a:	db0c      	blt.n	800c796 <_strtod_l+0x482>
 800c77c:	9906      	ldr	r1, [sp, #24]
 800c77e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c780:	4b5b      	ldr	r3, [pc, #364]	; (800c8f0 <_strtod_l+0x5dc>)
 800c782:	1a52      	subs	r2, r2, r1
 800c784:	00d2      	lsls	r2, r2, #3
 800c786:	189b      	adds	r3, r3, r2
 800c788:	0030      	movs	r0, r6
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	0039      	movs	r1, r7
 800c790:	f7f5 f9a6 	bl	8001ae0 <__aeabi_ddiv>
 800c794:	e794      	b.n	800c6c0 <_strtod_l+0x3ac>
 800c796:	9b05      	ldr	r3, [sp, #20]
 800c798:	1b1c      	subs	r4, r3, r4
 800c79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79c:	18e4      	adds	r4, r4, r3
 800c79e:	2c00      	cmp	r4, #0
 800c7a0:	dd72      	ble.n	800c888 <_strtod_l+0x574>
 800c7a2:	220f      	movs	r2, #15
 800c7a4:	0023      	movs	r3, r4
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	4214      	tst	r4, r2
 800c7aa:	d00a      	beq.n	800c7c2 <_strtod_l+0x4ae>
 800c7ac:	4950      	ldr	r1, [pc, #320]	; (800c8f0 <_strtod_l+0x5dc>)
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	18c9      	adds	r1, r1, r3
 800c7b2:	0032      	movs	r2, r6
 800c7b4:	6808      	ldr	r0, [r1, #0]
 800c7b6:	6849      	ldr	r1, [r1, #4]
 800c7b8:	003b      	movs	r3, r7
 800c7ba:	f7f5 fd8b 	bl	80022d4 <__aeabi_dmul>
 800c7be:	0006      	movs	r6, r0
 800c7c0:	000f      	movs	r7, r1
 800c7c2:	230f      	movs	r3, #15
 800c7c4:	439c      	bics	r4, r3
 800c7c6:	d04a      	beq.n	800c85e <_strtod_l+0x54a>
 800c7c8:	3326      	adds	r3, #38	; 0x26
 800c7ca:	33ff      	adds	r3, #255	; 0xff
 800c7cc:	429c      	cmp	r4, r3
 800c7ce:	dd22      	ble.n	800c816 <_strtod_l+0x502>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9305      	str	r3, [sp, #20]
 800c7d4:	9306      	str	r3, [sp, #24]
 800c7d6:	930d      	str	r3, [sp, #52]	; 0x34
 800c7d8:	9308      	str	r3, [sp, #32]
 800c7da:	2322      	movs	r3, #34	; 0x22
 800c7dc:	2600      	movs	r6, #0
 800c7de:	9a04      	ldr	r2, [sp, #16]
 800c7e0:	4f3f      	ldr	r7, [pc, #252]	; (800c8e0 <_strtod_l+0x5cc>)
 800c7e2:	6013      	str	r3, [r2, #0]
 800c7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7e6:	42b3      	cmp	r3, r6
 800c7e8:	d100      	bne.n	800c7ec <_strtod_l+0x4d8>
 800c7ea:	e5ce      	b.n	800c38a <_strtod_l+0x76>
 800c7ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7ee:	9804      	ldr	r0, [sp, #16]
 800c7f0:	f003 f8c4 	bl	800f97c <_Bfree>
 800c7f4:	9908      	ldr	r1, [sp, #32]
 800c7f6:	9804      	ldr	r0, [sp, #16]
 800c7f8:	f003 f8c0 	bl	800f97c <_Bfree>
 800c7fc:	9906      	ldr	r1, [sp, #24]
 800c7fe:	9804      	ldr	r0, [sp, #16]
 800c800:	f003 f8bc 	bl	800f97c <_Bfree>
 800c804:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c806:	9804      	ldr	r0, [sp, #16]
 800c808:	f003 f8b8 	bl	800f97c <_Bfree>
 800c80c:	9905      	ldr	r1, [sp, #20]
 800c80e:	9804      	ldr	r0, [sp, #16]
 800c810:	f003 f8b4 	bl	800f97c <_Bfree>
 800c814:	e5b9      	b.n	800c38a <_strtod_l+0x76>
 800c816:	2300      	movs	r3, #0
 800c818:	0030      	movs	r0, r6
 800c81a:	0039      	movs	r1, r7
 800c81c:	4d35      	ldr	r5, [pc, #212]	; (800c8f4 <_strtod_l+0x5e0>)
 800c81e:	1124      	asrs	r4, r4, #4
 800c820:	9307      	str	r3, [sp, #28]
 800c822:	2c01      	cmp	r4, #1
 800c824:	dc1e      	bgt.n	800c864 <_strtod_l+0x550>
 800c826:	2b00      	cmp	r3, #0
 800c828:	d001      	beq.n	800c82e <_strtod_l+0x51a>
 800c82a:	0006      	movs	r6, r0
 800c82c:	000f      	movs	r7, r1
 800c82e:	4b32      	ldr	r3, [pc, #200]	; (800c8f8 <_strtod_l+0x5e4>)
 800c830:	9a07      	ldr	r2, [sp, #28]
 800c832:	18ff      	adds	r7, r7, r3
 800c834:	4b2f      	ldr	r3, [pc, #188]	; (800c8f4 <_strtod_l+0x5e0>)
 800c836:	00d2      	lsls	r2, r2, #3
 800c838:	189d      	adds	r5, r3, r2
 800c83a:	6828      	ldr	r0, [r5, #0]
 800c83c:	6869      	ldr	r1, [r5, #4]
 800c83e:	0032      	movs	r2, r6
 800c840:	003b      	movs	r3, r7
 800c842:	f7f5 fd47 	bl	80022d4 <__aeabi_dmul>
 800c846:	4b26      	ldr	r3, [pc, #152]	; (800c8e0 <_strtod_l+0x5cc>)
 800c848:	4a2c      	ldr	r2, [pc, #176]	; (800c8fc <_strtod_l+0x5e8>)
 800c84a:	0006      	movs	r6, r0
 800c84c:	400b      	ands	r3, r1
 800c84e:	4293      	cmp	r3, r2
 800c850:	d8be      	bhi.n	800c7d0 <_strtod_l+0x4bc>
 800c852:	4a2b      	ldr	r2, [pc, #172]	; (800c900 <_strtod_l+0x5ec>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d913      	bls.n	800c880 <_strtod_l+0x56c>
 800c858:	2601      	movs	r6, #1
 800c85a:	4f2a      	ldr	r7, [pc, #168]	; (800c904 <_strtod_l+0x5f0>)
 800c85c:	4276      	negs	r6, r6
 800c85e:	2300      	movs	r3, #0
 800c860:	9307      	str	r3, [sp, #28]
 800c862:	e088      	b.n	800c976 <_strtod_l+0x662>
 800c864:	2201      	movs	r2, #1
 800c866:	4214      	tst	r4, r2
 800c868:	d004      	beq.n	800c874 <_strtod_l+0x560>
 800c86a:	682a      	ldr	r2, [r5, #0]
 800c86c:	686b      	ldr	r3, [r5, #4]
 800c86e:	f7f5 fd31 	bl	80022d4 <__aeabi_dmul>
 800c872:	2301      	movs	r3, #1
 800c874:	9a07      	ldr	r2, [sp, #28]
 800c876:	1064      	asrs	r4, r4, #1
 800c878:	3201      	adds	r2, #1
 800c87a:	9207      	str	r2, [sp, #28]
 800c87c:	3508      	adds	r5, #8
 800c87e:	e7d0      	b.n	800c822 <_strtod_l+0x50e>
 800c880:	23d4      	movs	r3, #212	; 0xd4
 800c882:	049b      	lsls	r3, r3, #18
 800c884:	18cf      	adds	r7, r1, r3
 800c886:	e7ea      	b.n	800c85e <_strtod_l+0x54a>
 800c888:	2c00      	cmp	r4, #0
 800c88a:	d0e8      	beq.n	800c85e <_strtod_l+0x54a>
 800c88c:	4264      	negs	r4, r4
 800c88e:	230f      	movs	r3, #15
 800c890:	0022      	movs	r2, r4
 800c892:	401a      	ands	r2, r3
 800c894:	421c      	tst	r4, r3
 800c896:	d00a      	beq.n	800c8ae <_strtod_l+0x59a>
 800c898:	4b15      	ldr	r3, [pc, #84]	; (800c8f0 <_strtod_l+0x5dc>)
 800c89a:	00d2      	lsls	r2, r2, #3
 800c89c:	189b      	adds	r3, r3, r2
 800c89e:	0030      	movs	r0, r6
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	0039      	movs	r1, r7
 800c8a6:	f7f5 f91b 	bl	8001ae0 <__aeabi_ddiv>
 800c8aa:	0006      	movs	r6, r0
 800c8ac:	000f      	movs	r7, r1
 800c8ae:	1124      	asrs	r4, r4, #4
 800c8b0:	d0d5      	beq.n	800c85e <_strtod_l+0x54a>
 800c8b2:	2c1f      	cmp	r4, #31
 800c8b4:	dd28      	ble.n	800c908 <_strtod_l+0x5f4>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9305      	str	r3, [sp, #20]
 800c8ba:	9306      	str	r3, [sp, #24]
 800c8bc:	930d      	str	r3, [sp, #52]	; 0x34
 800c8be:	9308      	str	r3, [sp, #32]
 800c8c0:	2322      	movs	r3, #34	; 0x22
 800c8c2:	9a04      	ldr	r2, [sp, #16]
 800c8c4:	2600      	movs	r6, #0
 800c8c6:	6013      	str	r3, [r2, #0]
 800c8c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8ca:	2700      	movs	r7, #0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d18d      	bne.n	800c7ec <_strtod_l+0x4d8>
 800c8d0:	e55b      	b.n	800c38a <_strtod_l+0x76>
 800c8d2:	46c0      	nop			; (mov r8, r8)
 800c8d4:	00004e1f 	.word	0x00004e1f
 800c8d8:	0801306e 	.word	0x0801306e
 800c8dc:	08012f24 	.word	0x08012f24
 800c8e0:	7ff00000 	.word	0x7ff00000
 800c8e4:	08013066 	.word	0x08013066
 800c8e8:	08013152 	.word	0x08013152
 800c8ec:	0801314e 	.word	0x0801314e
 800c8f0:	080132a8 	.word	0x080132a8
 800c8f4:	08013280 	.word	0x08013280
 800c8f8:	fcb00000 	.word	0xfcb00000
 800c8fc:	7ca00000 	.word	0x7ca00000
 800c900:	7c900000 	.word	0x7c900000
 800c904:	7fefffff 	.word	0x7fefffff
 800c908:	2310      	movs	r3, #16
 800c90a:	0022      	movs	r2, r4
 800c90c:	401a      	ands	r2, r3
 800c90e:	9207      	str	r2, [sp, #28]
 800c910:	421c      	tst	r4, r3
 800c912:	d001      	beq.n	800c918 <_strtod_l+0x604>
 800c914:	335a      	adds	r3, #90	; 0x5a
 800c916:	9307      	str	r3, [sp, #28]
 800c918:	0030      	movs	r0, r6
 800c91a:	0039      	movs	r1, r7
 800c91c:	2300      	movs	r3, #0
 800c91e:	4dc4      	ldr	r5, [pc, #784]	; (800cc30 <_strtod_l+0x91c>)
 800c920:	2201      	movs	r2, #1
 800c922:	4214      	tst	r4, r2
 800c924:	d004      	beq.n	800c930 <_strtod_l+0x61c>
 800c926:	682a      	ldr	r2, [r5, #0]
 800c928:	686b      	ldr	r3, [r5, #4]
 800c92a:	f7f5 fcd3 	bl	80022d4 <__aeabi_dmul>
 800c92e:	2301      	movs	r3, #1
 800c930:	1064      	asrs	r4, r4, #1
 800c932:	3508      	adds	r5, #8
 800c934:	2c00      	cmp	r4, #0
 800c936:	d1f3      	bne.n	800c920 <_strtod_l+0x60c>
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d001      	beq.n	800c940 <_strtod_l+0x62c>
 800c93c:	0006      	movs	r6, r0
 800c93e:	000f      	movs	r7, r1
 800c940:	9b07      	ldr	r3, [sp, #28]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00f      	beq.n	800c966 <_strtod_l+0x652>
 800c946:	236b      	movs	r3, #107	; 0x6b
 800c948:	007a      	lsls	r2, r7, #1
 800c94a:	0d52      	lsrs	r2, r2, #21
 800c94c:	0039      	movs	r1, r7
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	2b00      	cmp	r3, #0
 800c952:	dd08      	ble.n	800c966 <_strtod_l+0x652>
 800c954:	2b1f      	cmp	r3, #31
 800c956:	dc00      	bgt.n	800c95a <_strtod_l+0x646>
 800c958:	e121      	b.n	800cb9e <_strtod_l+0x88a>
 800c95a:	2600      	movs	r6, #0
 800c95c:	2b34      	cmp	r3, #52	; 0x34
 800c95e:	dc00      	bgt.n	800c962 <_strtod_l+0x64e>
 800c960:	e116      	b.n	800cb90 <_strtod_l+0x87c>
 800c962:	27dc      	movs	r7, #220	; 0xdc
 800c964:	04bf      	lsls	r7, r7, #18
 800c966:	2200      	movs	r2, #0
 800c968:	2300      	movs	r3, #0
 800c96a:	0030      	movs	r0, r6
 800c96c:	0039      	movs	r1, r7
 800c96e:	f7f3 fd6d 	bl	800044c <__aeabi_dcmpeq>
 800c972:	2800      	cmp	r0, #0
 800c974:	d19f      	bne.n	800c8b6 <_strtod_l+0x5a2>
 800c976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c978:	9a08      	ldr	r2, [sp, #32]
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c97e:	9b05      	ldr	r3, [sp, #20]
 800c980:	9804      	ldr	r0, [sp, #16]
 800c982:	f003 f863 	bl	800fa4c <__s2b>
 800c986:	900d      	str	r0, [sp, #52]	; 0x34
 800c988:	2800      	cmp	r0, #0
 800c98a:	d100      	bne.n	800c98e <_strtod_l+0x67a>
 800c98c:	e720      	b.n	800c7d0 <_strtod_l+0x4bc>
 800c98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c990:	9906      	ldr	r1, [sp, #24]
 800c992:	17da      	asrs	r2, r3, #31
 800c994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c996:	1a5b      	subs	r3, r3, r1
 800c998:	401a      	ands	r2, r3
 800c99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c99c:	9215      	str	r2, [sp, #84]	; 0x54
 800c99e:	43db      	mvns	r3, r3
 800c9a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9a2:	17db      	asrs	r3, r3, #31
 800c9a4:	401a      	ands	r2, r3
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	9218      	str	r2, [sp, #96]	; 0x60
 800c9aa:	9305      	str	r3, [sp, #20]
 800c9ac:	9306      	str	r3, [sp, #24]
 800c9ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9b0:	9804      	ldr	r0, [sp, #16]
 800c9b2:	6859      	ldr	r1, [r3, #4]
 800c9b4:	f002 ff9e 	bl	800f8f4 <_Balloc>
 800c9b8:	9008      	str	r0, [sp, #32]
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d100      	bne.n	800c9c0 <_strtod_l+0x6ac>
 800c9be:	e70c      	b.n	800c7da <_strtod_l+0x4c6>
 800c9c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9c2:	300c      	adds	r0, #12
 800c9c4:	0019      	movs	r1, r3
 800c9c6:	691a      	ldr	r2, [r3, #16]
 800c9c8:	310c      	adds	r1, #12
 800c9ca:	3202      	adds	r2, #2
 800c9cc:	0092      	lsls	r2, r2, #2
 800c9ce:	f001 fd09 	bl	800e3e4 <memcpy>
 800c9d2:	ab1e      	add	r3, sp, #120	; 0x78
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	ab1d      	add	r3, sp, #116	; 0x74
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	0032      	movs	r2, r6
 800c9dc:	003b      	movs	r3, r7
 800c9de:	9804      	ldr	r0, [sp, #16]
 800c9e0:	9610      	str	r6, [sp, #64]	; 0x40
 800c9e2:	9711      	str	r7, [sp, #68]	; 0x44
 800c9e4:	f003 fb74 	bl	80100d0 <__d2b>
 800c9e8:	901c      	str	r0, [sp, #112]	; 0x70
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d100      	bne.n	800c9f0 <_strtod_l+0x6dc>
 800c9ee:	e6f4      	b.n	800c7da <_strtod_l+0x4c6>
 800c9f0:	2101      	movs	r1, #1
 800c9f2:	9804      	ldr	r0, [sp, #16]
 800c9f4:	f003 f8be 	bl	800fb74 <__i2b>
 800c9f8:	9006      	str	r0, [sp, #24]
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	d100      	bne.n	800ca00 <_strtod_l+0x6ec>
 800c9fe:	e6ec      	b.n	800c7da <_strtod_l+0x4c6>
 800ca00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ca04:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ca06:	1ad4      	subs	r4, r2, r3
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	db01      	blt.n	800ca10 <_strtod_l+0x6fc>
 800ca0c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800ca0e:	195d      	adds	r5, r3, r5
 800ca10:	9907      	ldr	r1, [sp, #28]
 800ca12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ca14:	1a5b      	subs	r3, r3, r1
 800ca16:	2136      	movs	r1, #54	; 0x36
 800ca18:	189b      	adds	r3, r3, r2
 800ca1a:	1a8a      	subs	r2, r1, r2
 800ca1c:	4985      	ldr	r1, [pc, #532]	; (800cc34 <_strtod_l+0x920>)
 800ca1e:	2001      	movs	r0, #1
 800ca20:	468c      	mov	ip, r1
 800ca22:	2100      	movs	r1, #0
 800ca24:	3b01      	subs	r3, #1
 800ca26:	9114      	str	r1, [sp, #80]	; 0x50
 800ca28:	9012      	str	r0, [sp, #72]	; 0x48
 800ca2a:	4563      	cmp	r3, ip
 800ca2c:	da07      	bge.n	800ca3e <_strtod_l+0x72a>
 800ca2e:	4661      	mov	r1, ip
 800ca30:	1ac9      	subs	r1, r1, r3
 800ca32:	1a52      	subs	r2, r2, r1
 800ca34:	291f      	cmp	r1, #31
 800ca36:	dd00      	ble.n	800ca3a <_strtod_l+0x726>
 800ca38:	e0b6      	b.n	800cba8 <_strtod_l+0x894>
 800ca3a:	4088      	lsls	r0, r1
 800ca3c:	9012      	str	r0, [sp, #72]	; 0x48
 800ca3e:	18ab      	adds	r3, r5, r2
 800ca40:	930c      	str	r3, [sp, #48]	; 0x30
 800ca42:	18a4      	adds	r4, r4, r2
 800ca44:	9b07      	ldr	r3, [sp, #28]
 800ca46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca48:	191c      	adds	r4, r3, r4
 800ca4a:	002b      	movs	r3, r5
 800ca4c:	4295      	cmp	r5, r2
 800ca4e:	dd00      	ble.n	800ca52 <_strtod_l+0x73e>
 800ca50:	0013      	movs	r3, r2
 800ca52:	42a3      	cmp	r3, r4
 800ca54:	dd00      	ble.n	800ca58 <_strtod_l+0x744>
 800ca56:	0023      	movs	r3, r4
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	dd04      	ble.n	800ca66 <_strtod_l+0x752>
 800ca5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca5e:	1ae4      	subs	r4, r4, r3
 800ca60:	1ad2      	subs	r2, r2, r3
 800ca62:	920c      	str	r2, [sp, #48]	; 0x30
 800ca64:	1aed      	subs	r5, r5, r3
 800ca66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	dd17      	ble.n	800ca9c <_strtod_l+0x788>
 800ca6c:	001a      	movs	r2, r3
 800ca6e:	9906      	ldr	r1, [sp, #24]
 800ca70:	9804      	ldr	r0, [sp, #16]
 800ca72:	f003 f947 	bl	800fd04 <__pow5mult>
 800ca76:	9006      	str	r0, [sp, #24]
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d100      	bne.n	800ca7e <_strtod_l+0x76a>
 800ca7c:	e6ad      	b.n	800c7da <_strtod_l+0x4c6>
 800ca7e:	0001      	movs	r1, r0
 800ca80:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ca82:	9804      	ldr	r0, [sp, #16]
 800ca84:	f003 f88e 	bl	800fba4 <__multiply>
 800ca88:	900e      	str	r0, [sp, #56]	; 0x38
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d100      	bne.n	800ca90 <_strtod_l+0x77c>
 800ca8e:	e6a4      	b.n	800c7da <_strtod_l+0x4c6>
 800ca90:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca92:	9804      	ldr	r0, [sp, #16]
 800ca94:	f002 ff72 	bl	800f97c <_Bfree>
 800ca98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca9a:	931c      	str	r3, [sp, #112]	; 0x70
 800ca9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	dd00      	ble.n	800caa4 <_strtod_l+0x790>
 800caa2:	e087      	b.n	800cbb4 <_strtod_l+0x8a0>
 800caa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	dd08      	ble.n	800cabc <_strtod_l+0x7a8>
 800caaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800caac:	9908      	ldr	r1, [sp, #32]
 800caae:	9804      	ldr	r0, [sp, #16]
 800cab0:	f003 f928 	bl	800fd04 <__pow5mult>
 800cab4:	9008      	str	r0, [sp, #32]
 800cab6:	2800      	cmp	r0, #0
 800cab8:	d100      	bne.n	800cabc <_strtod_l+0x7a8>
 800caba:	e68e      	b.n	800c7da <_strtod_l+0x4c6>
 800cabc:	2c00      	cmp	r4, #0
 800cabe:	dd08      	ble.n	800cad2 <_strtod_l+0x7be>
 800cac0:	0022      	movs	r2, r4
 800cac2:	9908      	ldr	r1, [sp, #32]
 800cac4:	9804      	ldr	r0, [sp, #16]
 800cac6:	f003 f979 	bl	800fdbc <__lshift>
 800caca:	9008      	str	r0, [sp, #32]
 800cacc:	2800      	cmp	r0, #0
 800cace:	d100      	bne.n	800cad2 <_strtod_l+0x7be>
 800cad0:	e683      	b.n	800c7da <_strtod_l+0x4c6>
 800cad2:	2d00      	cmp	r5, #0
 800cad4:	dd08      	ble.n	800cae8 <_strtod_l+0x7d4>
 800cad6:	002a      	movs	r2, r5
 800cad8:	9906      	ldr	r1, [sp, #24]
 800cada:	9804      	ldr	r0, [sp, #16]
 800cadc:	f003 f96e 	bl	800fdbc <__lshift>
 800cae0:	9006      	str	r0, [sp, #24]
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d100      	bne.n	800cae8 <_strtod_l+0x7d4>
 800cae6:	e678      	b.n	800c7da <_strtod_l+0x4c6>
 800cae8:	9a08      	ldr	r2, [sp, #32]
 800caea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800caec:	9804      	ldr	r0, [sp, #16]
 800caee:	f003 f9ef 	bl	800fed0 <__mdiff>
 800caf2:	9005      	str	r0, [sp, #20]
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d100      	bne.n	800cafa <_strtod_l+0x7e6>
 800caf8:	e66f      	b.n	800c7da <_strtod_l+0x4c6>
 800cafa:	2200      	movs	r2, #0
 800cafc:	68c3      	ldr	r3, [r0, #12]
 800cafe:	9906      	ldr	r1, [sp, #24]
 800cb00:	60c2      	str	r2, [r0, #12]
 800cb02:	930c      	str	r3, [sp, #48]	; 0x30
 800cb04:	f003 f9c8 	bl	800fe98 <__mcmp>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	da5d      	bge.n	800cbc8 <_strtod_l+0x8b4>
 800cb0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb0e:	4333      	orrs	r3, r6
 800cb10:	d000      	beq.n	800cb14 <_strtod_l+0x800>
 800cb12:	e088      	b.n	800cc26 <_strtod_l+0x912>
 800cb14:	033b      	lsls	r3, r7, #12
 800cb16:	d000      	beq.n	800cb1a <_strtod_l+0x806>
 800cb18:	e085      	b.n	800cc26 <_strtod_l+0x912>
 800cb1a:	22d6      	movs	r2, #214	; 0xd6
 800cb1c:	4b46      	ldr	r3, [pc, #280]	; (800cc38 <_strtod_l+0x924>)
 800cb1e:	04d2      	lsls	r2, r2, #19
 800cb20:	403b      	ands	r3, r7
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d97f      	bls.n	800cc26 <_strtod_l+0x912>
 800cb26:	9b05      	ldr	r3, [sp, #20]
 800cb28:	695b      	ldr	r3, [r3, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d103      	bne.n	800cb36 <_strtod_l+0x822>
 800cb2e:	9b05      	ldr	r3, [sp, #20]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	dd77      	ble.n	800cc26 <_strtod_l+0x912>
 800cb36:	9905      	ldr	r1, [sp, #20]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	9804      	ldr	r0, [sp, #16]
 800cb3c:	f003 f93e 	bl	800fdbc <__lshift>
 800cb40:	9906      	ldr	r1, [sp, #24]
 800cb42:	9005      	str	r0, [sp, #20]
 800cb44:	f003 f9a8 	bl	800fe98 <__mcmp>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	dd6c      	ble.n	800cc26 <_strtod_l+0x912>
 800cb4c:	9907      	ldr	r1, [sp, #28]
 800cb4e:	003b      	movs	r3, r7
 800cb50:	4a39      	ldr	r2, [pc, #228]	; (800cc38 <_strtod_l+0x924>)
 800cb52:	2900      	cmp	r1, #0
 800cb54:	d100      	bne.n	800cb58 <_strtod_l+0x844>
 800cb56:	e094      	b.n	800cc82 <_strtod_l+0x96e>
 800cb58:	0011      	movs	r1, r2
 800cb5a:	20d6      	movs	r0, #214	; 0xd6
 800cb5c:	4039      	ands	r1, r7
 800cb5e:	04c0      	lsls	r0, r0, #19
 800cb60:	4281      	cmp	r1, r0
 800cb62:	dd00      	ble.n	800cb66 <_strtod_l+0x852>
 800cb64:	e08d      	b.n	800cc82 <_strtod_l+0x96e>
 800cb66:	23dc      	movs	r3, #220	; 0xdc
 800cb68:	049b      	lsls	r3, r3, #18
 800cb6a:	4299      	cmp	r1, r3
 800cb6c:	dc00      	bgt.n	800cb70 <_strtod_l+0x85c>
 800cb6e:	e6a7      	b.n	800c8c0 <_strtod_l+0x5ac>
 800cb70:	0030      	movs	r0, r6
 800cb72:	0039      	movs	r1, r7
 800cb74:	4b31      	ldr	r3, [pc, #196]	; (800cc3c <_strtod_l+0x928>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	f7f5 fbac 	bl	80022d4 <__aeabi_dmul>
 800cb7c:	4b2e      	ldr	r3, [pc, #184]	; (800cc38 <_strtod_l+0x924>)
 800cb7e:	0006      	movs	r6, r0
 800cb80:	000f      	movs	r7, r1
 800cb82:	420b      	tst	r3, r1
 800cb84:	d000      	beq.n	800cb88 <_strtod_l+0x874>
 800cb86:	e631      	b.n	800c7ec <_strtod_l+0x4d8>
 800cb88:	2322      	movs	r3, #34	; 0x22
 800cb8a:	9a04      	ldr	r2, [sp, #16]
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	e62d      	b.n	800c7ec <_strtod_l+0x4d8>
 800cb90:	234b      	movs	r3, #75	; 0x4b
 800cb92:	1a9a      	subs	r2, r3, r2
 800cb94:	3b4c      	subs	r3, #76	; 0x4c
 800cb96:	4093      	lsls	r3, r2
 800cb98:	4019      	ands	r1, r3
 800cb9a:	000f      	movs	r7, r1
 800cb9c:	e6e3      	b.n	800c966 <_strtod_l+0x652>
 800cb9e:	2201      	movs	r2, #1
 800cba0:	4252      	negs	r2, r2
 800cba2:	409a      	lsls	r2, r3
 800cba4:	4016      	ands	r6, r2
 800cba6:	e6de      	b.n	800c966 <_strtod_l+0x652>
 800cba8:	4925      	ldr	r1, [pc, #148]	; (800cc40 <_strtod_l+0x92c>)
 800cbaa:	1acb      	subs	r3, r1, r3
 800cbac:	0001      	movs	r1, r0
 800cbae:	4099      	lsls	r1, r3
 800cbb0:	9114      	str	r1, [sp, #80]	; 0x50
 800cbb2:	e743      	b.n	800ca3c <_strtod_l+0x728>
 800cbb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cbb8:	9804      	ldr	r0, [sp, #16]
 800cbba:	f003 f8ff 	bl	800fdbc <__lshift>
 800cbbe:	901c      	str	r0, [sp, #112]	; 0x70
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d000      	beq.n	800cbc6 <_strtod_l+0x8b2>
 800cbc4:	e76e      	b.n	800caa4 <_strtod_l+0x790>
 800cbc6:	e608      	b.n	800c7da <_strtod_l+0x4c6>
 800cbc8:	970e      	str	r7, [sp, #56]	; 0x38
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d177      	bne.n	800ccbe <_strtod_l+0x9aa>
 800cbce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbd0:	033b      	lsls	r3, r7, #12
 800cbd2:	0b1b      	lsrs	r3, r3, #12
 800cbd4:	2a00      	cmp	r2, #0
 800cbd6:	d039      	beq.n	800cc4c <_strtod_l+0x938>
 800cbd8:	4a1a      	ldr	r2, [pc, #104]	; (800cc44 <_strtod_l+0x930>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d139      	bne.n	800cc52 <_strtod_l+0x93e>
 800cbde:	2101      	movs	r1, #1
 800cbe0:	9b07      	ldr	r3, [sp, #28]
 800cbe2:	4249      	negs	r1, r1
 800cbe4:	0032      	movs	r2, r6
 800cbe6:	0008      	movs	r0, r1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00b      	beq.n	800cc04 <_strtod_l+0x8f0>
 800cbec:	24d4      	movs	r4, #212	; 0xd4
 800cbee:	4b12      	ldr	r3, [pc, #72]	; (800cc38 <_strtod_l+0x924>)
 800cbf0:	0008      	movs	r0, r1
 800cbf2:	403b      	ands	r3, r7
 800cbf4:	04e4      	lsls	r4, r4, #19
 800cbf6:	42a3      	cmp	r3, r4
 800cbf8:	d804      	bhi.n	800cc04 <_strtod_l+0x8f0>
 800cbfa:	306c      	adds	r0, #108	; 0x6c
 800cbfc:	0d1b      	lsrs	r3, r3, #20
 800cbfe:	1ac3      	subs	r3, r0, r3
 800cc00:	4099      	lsls	r1, r3
 800cc02:	0008      	movs	r0, r1
 800cc04:	4282      	cmp	r2, r0
 800cc06:	d124      	bne.n	800cc52 <_strtod_l+0x93e>
 800cc08:	4b0f      	ldr	r3, [pc, #60]	; (800cc48 <_strtod_l+0x934>)
 800cc0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cc0c:	4299      	cmp	r1, r3
 800cc0e:	d102      	bne.n	800cc16 <_strtod_l+0x902>
 800cc10:	3201      	adds	r2, #1
 800cc12:	d100      	bne.n	800cc16 <_strtod_l+0x902>
 800cc14:	e5e1      	b.n	800c7da <_strtod_l+0x4c6>
 800cc16:	4b08      	ldr	r3, [pc, #32]	; (800cc38 <_strtod_l+0x924>)
 800cc18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc1a:	2600      	movs	r6, #0
 800cc1c:	401a      	ands	r2, r3
 800cc1e:	0013      	movs	r3, r2
 800cc20:	2280      	movs	r2, #128	; 0x80
 800cc22:	0352      	lsls	r2, r2, #13
 800cc24:	189f      	adds	r7, r3, r2
 800cc26:	9b07      	ldr	r3, [sp, #28]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d1a1      	bne.n	800cb70 <_strtod_l+0x85c>
 800cc2c:	e5de      	b.n	800c7ec <_strtod_l+0x4d8>
 800cc2e:	46c0      	nop			; (mov r8, r8)
 800cc30:	08012f38 	.word	0x08012f38
 800cc34:	fffffc02 	.word	0xfffffc02
 800cc38:	7ff00000 	.word	0x7ff00000
 800cc3c:	39500000 	.word	0x39500000
 800cc40:	fffffbe2 	.word	0xfffffbe2
 800cc44:	000fffff 	.word	0x000fffff
 800cc48:	7fefffff 	.word	0x7fefffff
 800cc4c:	4333      	orrs	r3, r6
 800cc4e:	d100      	bne.n	800cc52 <_strtod_l+0x93e>
 800cc50:	e77c      	b.n	800cb4c <_strtod_l+0x838>
 800cc52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01d      	beq.n	800cc94 <_strtod_l+0x980>
 800cc58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc5c:	4213      	tst	r3, r2
 800cc5e:	d0e2      	beq.n	800cc26 <_strtod_l+0x912>
 800cc60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc62:	0030      	movs	r0, r6
 800cc64:	0039      	movs	r1, r7
 800cc66:	9a07      	ldr	r2, [sp, #28]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d017      	beq.n	800cc9c <_strtod_l+0x988>
 800cc6c:	f7ff fb3a 	bl	800c2e4 <sulp>
 800cc70:	0002      	movs	r2, r0
 800cc72:	000b      	movs	r3, r1
 800cc74:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cc76:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cc78:	f7f4 fbd2 	bl	8001420 <__aeabi_dadd>
 800cc7c:	0006      	movs	r6, r0
 800cc7e:	000f      	movs	r7, r1
 800cc80:	e7d1      	b.n	800cc26 <_strtod_l+0x912>
 800cc82:	2601      	movs	r6, #1
 800cc84:	4013      	ands	r3, r2
 800cc86:	4a98      	ldr	r2, [pc, #608]	; (800cee8 <_strtod_l+0xbd4>)
 800cc88:	4276      	negs	r6, r6
 800cc8a:	189b      	adds	r3, r3, r2
 800cc8c:	4a97      	ldr	r2, [pc, #604]	; (800ceec <_strtod_l+0xbd8>)
 800cc8e:	431a      	orrs	r2, r3
 800cc90:	0017      	movs	r7, r2
 800cc92:	e7c8      	b.n	800cc26 <_strtod_l+0x912>
 800cc94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cc96:	4233      	tst	r3, r6
 800cc98:	d0c5      	beq.n	800cc26 <_strtod_l+0x912>
 800cc9a:	e7e1      	b.n	800cc60 <_strtod_l+0x94c>
 800cc9c:	f7ff fb22 	bl	800c2e4 <sulp>
 800cca0:	0002      	movs	r2, r0
 800cca2:	000b      	movs	r3, r1
 800cca4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cca6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cca8:	f7f5 fdd6 	bl	8002858 <__aeabi_dsub>
 800ccac:	2200      	movs	r2, #0
 800ccae:	2300      	movs	r3, #0
 800ccb0:	0006      	movs	r6, r0
 800ccb2:	000f      	movs	r7, r1
 800ccb4:	f7f3 fbca 	bl	800044c <__aeabi_dcmpeq>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d0b4      	beq.n	800cc26 <_strtod_l+0x912>
 800ccbc:	e600      	b.n	800c8c0 <_strtod_l+0x5ac>
 800ccbe:	9906      	ldr	r1, [sp, #24]
 800ccc0:	9805      	ldr	r0, [sp, #20]
 800ccc2:	f003 fa65 	bl	8010190 <__ratio>
 800ccc6:	2380      	movs	r3, #128	; 0x80
 800ccc8:	2200      	movs	r2, #0
 800ccca:	05db      	lsls	r3, r3, #23
 800cccc:	0004      	movs	r4, r0
 800ccce:	000d      	movs	r5, r1
 800ccd0:	f7f3 fbcc 	bl	800046c <__aeabi_dcmple>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d06d      	beq.n	800cdb4 <_strtod_l+0xaa0>
 800ccd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d000      	beq.n	800cce0 <_strtod_l+0x9cc>
 800ccde:	e07e      	b.n	800cdde <_strtod_l+0xaca>
 800cce0:	2e00      	cmp	r6, #0
 800cce2:	d158      	bne.n	800cd96 <_strtod_l+0xa82>
 800cce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cce6:	031b      	lsls	r3, r3, #12
 800cce8:	d000      	beq.n	800ccec <_strtod_l+0x9d8>
 800ccea:	e07f      	b.n	800cdec <_strtod_l+0xad8>
 800ccec:	2200      	movs	r2, #0
 800ccee:	0020      	movs	r0, r4
 800ccf0:	0029      	movs	r1, r5
 800ccf2:	4b7f      	ldr	r3, [pc, #508]	; (800cef0 <_strtod_l+0xbdc>)
 800ccf4:	f7f3 fbb0 	bl	8000458 <__aeabi_dcmplt>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	d158      	bne.n	800cdae <_strtod_l+0xa9a>
 800ccfc:	0020      	movs	r0, r4
 800ccfe:	0029      	movs	r1, r5
 800cd00:	2200      	movs	r2, #0
 800cd02:	4b7c      	ldr	r3, [pc, #496]	; (800cef4 <_strtod_l+0xbe0>)
 800cd04:	f7f5 fae6 	bl	80022d4 <__aeabi_dmul>
 800cd08:	0004      	movs	r4, r0
 800cd0a:	000d      	movs	r5, r1
 800cd0c:	2380      	movs	r3, #128	; 0x80
 800cd0e:	061b      	lsls	r3, r3, #24
 800cd10:	940a      	str	r4, [sp, #40]	; 0x28
 800cd12:	18eb      	adds	r3, r5, r3
 800cd14:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd1a:	9212      	str	r2, [sp, #72]	; 0x48
 800cd1c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd1e:	4a76      	ldr	r2, [pc, #472]	; (800cef8 <_strtod_l+0xbe4>)
 800cd20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd22:	4013      	ands	r3, r2
 800cd24:	9314      	str	r3, [sp, #80]	; 0x50
 800cd26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd28:	4b74      	ldr	r3, [pc, #464]	; (800cefc <_strtod_l+0xbe8>)
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d000      	beq.n	800cd30 <_strtod_l+0xa1c>
 800cd2e:	e091      	b.n	800ce54 <_strtod_l+0xb40>
 800cd30:	4a73      	ldr	r2, [pc, #460]	; (800cf00 <_strtod_l+0xbec>)
 800cd32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd34:	4694      	mov	ip, r2
 800cd36:	4463      	add	r3, ip
 800cd38:	001f      	movs	r7, r3
 800cd3a:	0030      	movs	r0, r6
 800cd3c:	0019      	movs	r1, r3
 800cd3e:	f003 f95f 	bl	8010000 <__ulp>
 800cd42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd46:	f7f5 fac5 	bl	80022d4 <__aeabi_dmul>
 800cd4a:	0032      	movs	r2, r6
 800cd4c:	003b      	movs	r3, r7
 800cd4e:	f7f4 fb67 	bl	8001420 <__aeabi_dadd>
 800cd52:	4a69      	ldr	r2, [pc, #420]	; (800cef8 <_strtod_l+0xbe4>)
 800cd54:	4b6b      	ldr	r3, [pc, #428]	; (800cf04 <_strtod_l+0xbf0>)
 800cd56:	0006      	movs	r6, r0
 800cd58:	400a      	ands	r2, r1
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d949      	bls.n	800cdf2 <_strtod_l+0xade>
 800cd5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cd60:	4b69      	ldr	r3, [pc, #420]	; (800cf08 <_strtod_l+0xbf4>)
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d103      	bne.n	800cd6e <_strtod_l+0xa5a>
 800cd66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd68:	3301      	adds	r3, #1
 800cd6a:	d100      	bne.n	800cd6e <_strtod_l+0xa5a>
 800cd6c:	e535      	b.n	800c7da <_strtod_l+0x4c6>
 800cd6e:	2601      	movs	r6, #1
 800cd70:	4f65      	ldr	r7, [pc, #404]	; (800cf08 <_strtod_l+0xbf4>)
 800cd72:	4276      	negs	r6, r6
 800cd74:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd76:	9804      	ldr	r0, [sp, #16]
 800cd78:	f002 fe00 	bl	800f97c <_Bfree>
 800cd7c:	9908      	ldr	r1, [sp, #32]
 800cd7e:	9804      	ldr	r0, [sp, #16]
 800cd80:	f002 fdfc 	bl	800f97c <_Bfree>
 800cd84:	9906      	ldr	r1, [sp, #24]
 800cd86:	9804      	ldr	r0, [sp, #16]
 800cd88:	f002 fdf8 	bl	800f97c <_Bfree>
 800cd8c:	9905      	ldr	r1, [sp, #20]
 800cd8e:	9804      	ldr	r0, [sp, #16]
 800cd90:	f002 fdf4 	bl	800f97c <_Bfree>
 800cd94:	e60b      	b.n	800c9ae <_strtod_l+0x69a>
 800cd96:	2e01      	cmp	r6, #1
 800cd98:	d103      	bne.n	800cda2 <_strtod_l+0xa8e>
 800cd9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d100      	bne.n	800cda2 <_strtod_l+0xa8e>
 800cda0:	e58e      	b.n	800c8c0 <_strtod_l+0x5ac>
 800cda2:	2300      	movs	r3, #0
 800cda4:	4c59      	ldr	r4, [pc, #356]	; (800cf0c <_strtod_l+0xbf8>)
 800cda6:	930a      	str	r3, [sp, #40]	; 0x28
 800cda8:	940b      	str	r4, [sp, #44]	; 0x2c
 800cdaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cdac:	e01c      	b.n	800cde8 <_strtod_l+0xad4>
 800cdae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cdb0:	4d50      	ldr	r5, [pc, #320]	; (800cef4 <_strtod_l+0xbe0>)
 800cdb2:	e7ab      	b.n	800cd0c <_strtod_l+0x9f8>
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	0020      	movs	r0, r4
 800cdb8:	0029      	movs	r1, r5
 800cdba:	4b4e      	ldr	r3, [pc, #312]	; (800cef4 <_strtod_l+0xbe0>)
 800cdbc:	f7f5 fa8a 	bl	80022d4 <__aeabi_dmul>
 800cdc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdc2:	0004      	movs	r4, r0
 800cdc4:	000b      	movs	r3, r1
 800cdc6:	000d      	movs	r5, r1
 800cdc8:	2a00      	cmp	r2, #0
 800cdca:	d104      	bne.n	800cdd6 <_strtod_l+0xac2>
 800cdcc:	2280      	movs	r2, #128	; 0x80
 800cdce:	0612      	lsls	r2, r2, #24
 800cdd0:	900a      	str	r0, [sp, #40]	; 0x28
 800cdd2:	188b      	adds	r3, r1, r2
 800cdd4:	e79e      	b.n	800cd14 <_strtod_l+0xa00>
 800cdd6:	0002      	movs	r2, r0
 800cdd8:	920a      	str	r2, [sp, #40]	; 0x28
 800cdda:	930b      	str	r3, [sp, #44]	; 0x2c
 800cddc:	e79b      	b.n	800cd16 <_strtod_l+0xa02>
 800cdde:	2300      	movs	r3, #0
 800cde0:	4c43      	ldr	r4, [pc, #268]	; (800cef0 <_strtod_l+0xbdc>)
 800cde2:	930a      	str	r3, [sp, #40]	; 0x28
 800cde4:	940b      	str	r4, [sp, #44]	; 0x2c
 800cde6:	2400      	movs	r4, #0
 800cde8:	4d41      	ldr	r5, [pc, #260]	; (800cef0 <_strtod_l+0xbdc>)
 800cdea:	e794      	b.n	800cd16 <_strtod_l+0xa02>
 800cdec:	2300      	movs	r3, #0
 800cdee:	4c47      	ldr	r4, [pc, #284]	; (800cf0c <_strtod_l+0xbf8>)
 800cdf0:	e7f7      	b.n	800cde2 <_strtod_l+0xace>
 800cdf2:	23d4      	movs	r3, #212	; 0xd4
 800cdf4:	049b      	lsls	r3, r3, #18
 800cdf6:	18cf      	adds	r7, r1, r3
 800cdf8:	9b07      	ldr	r3, [sp, #28]
 800cdfa:	970e      	str	r7, [sp, #56]	; 0x38
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d1b9      	bne.n	800cd74 <_strtod_l+0xa60>
 800ce00:	4b3d      	ldr	r3, [pc, #244]	; (800cef8 <_strtod_l+0xbe4>)
 800ce02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce04:	403b      	ands	r3, r7
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d1b4      	bne.n	800cd74 <_strtod_l+0xa60>
 800ce0a:	0020      	movs	r0, r4
 800ce0c:	0029      	movs	r1, r5
 800ce0e:	f7f3 fba3 	bl	8000558 <__aeabi_d2lz>
 800ce12:	f7f3 fbdd 	bl	80005d0 <__aeabi_l2d>
 800ce16:	0002      	movs	r2, r0
 800ce18:	000b      	movs	r3, r1
 800ce1a:	0020      	movs	r0, r4
 800ce1c:	0029      	movs	r1, r5
 800ce1e:	f7f5 fd1b 	bl	8002858 <__aeabi_dsub>
 800ce22:	033b      	lsls	r3, r7, #12
 800ce24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce26:	0b1b      	lsrs	r3, r3, #12
 800ce28:	4333      	orrs	r3, r6
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	0004      	movs	r4, r0
 800ce2e:	000d      	movs	r5, r1
 800ce30:	4a37      	ldr	r2, [pc, #220]	; (800cf10 <_strtod_l+0xbfc>)
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d054      	beq.n	800cee0 <_strtod_l+0xbcc>
 800ce36:	4b37      	ldr	r3, [pc, #220]	; (800cf14 <_strtod_l+0xc00>)
 800ce38:	f7f3 fb0e 	bl	8000458 <__aeabi_dcmplt>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d000      	beq.n	800ce42 <_strtod_l+0xb2e>
 800ce40:	e4d4      	b.n	800c7ec <_strtod_l+0x4d8>
 800ce42:	0020      	movs	r0, r4
 800ce44:	0029      	movs	r1, r5
 800ce46:	4a34      	ldr	r2, [pc, #208]	; (800cf18 <_strtod_l+0xc04>)
 800ce48:	4b2a      	ldr	r3, [pc, #168]	; (800cef4 <_strtod_l+0xbe0>)
 800ce4a:	f7f3 fb19 	bl	8000480 <__aeabi_dcmpgt>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d090      	beq.n	800cd74 <_strtod_l+0xa60>
 800ce52:	e4cb      	b.n	800c7ec <_strtod_l+0x4d8>
 800ce54:	9b07      	ldr	r3, [sp, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d02b      	beq.n	800ceb2 <_strtod_l+0xb9e>
 800ce5a:	23d4      	movs	r3, #212	; 0xd4
 800ce5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce5e:	04db      	lsls	r3, r3, #19
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d826      	bhi.n	800ceb2 <_strtod_l+0xb9e>
 800ce64:	0020      	movs	r0, r4
 800ce66:	0029      	movs	r1, r5
 800ce68:	4a2c      	ldr	r2, [pc, #176]	; (800cf1c <_strtod_l+0xc08>)
 800ce6a:	4b2d      	ldr	r3, [pc, #180]	; (800cf20 <_strtod_l+0xc0c>)
 800ce6c:	f7f3 fafe 	bl	800046c <__aeabi_dcmple>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d017      	beq.n	800cea4 <_strtod_l+0xb90>
 800ce74:	0020      	movs	r0, r4
 800ce76:	0029      	movs	r1, r5
 800ce78:	f7f3 fb50 	bl	800051c <__aeabi_d2uiz>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d100      	bne.n	800ce82 <_strtod_l+0xb6e>
 800ce80:	3001      	adds	r0, #1
 800ce82:	f7f6 f8ef 	bl	8003064 <__aeabi_ui2d>
 800ce86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce88:	0004      	movs	r4, r0
 800ce8a:	000b      	movs	r3, r1
 800ce8c:	000d      	movs	r5, r1
 800ce8e:	2a00      	cmp	r2, #0
 800ce90:	d122      	bne.n	800ced8 <_strtod_l+0xbc4>
 800ce92:	2280      	movs	r2, #128	; 0x80
 800ce94:	0612      	lsls	r2, r2, #24
 800ce96:	188b      	adds	r3, r1, r2
 800ce98:	9016      	str	r0, [sp, #88]	; 0x58
 800ce9a:	9317      	str	r3, [sp, #92]	; 0x5c
 800ce9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ce9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cea0:	9212      	str	r2, [sp, #72]	; 0x48
 800cea2:	9313      	str	r3, [sp, #76]	; 0x4c
 800cea4:	22d6      	movs	r2, #214	; 0xd6
 800cea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cea8:	04d2      	lsls	r2, r2, #19
 800ceaa:	189b      	adds	r3, r3, r2
 800ceac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ceae:	1a9b      	subs	r3, r3, r2
 800ceb0:	9313      	str	r3, [sp, #76]	; 0x4c
 800ceb2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ceb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ceb6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ceb8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ceba:	f003 f8a1 	bl	8010000 <__ulp>
 800cebe:	0002      	movs	r2, r0
 800cec0:	000b      	movs	r3, r1
 800cec2:	0030      	movs	r0, r6
 800cec4:	0039      	movs	r1, r7
 800cec6:	f7f5 fa05 	bl	80022d4 <__aeabi_dmul>
 800ceca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cece:	f7f4 faa7 	bl	8001420 <__aeabi_dadd>
 800ced2:	0006      	movs	r6, r0
 800ced4:	000f      	movs	r7, r1
 800ced6:	e78f      	b.n	800cdf8 <_strtod_l+0xae4>
 800ced8:	0002      	movs	r2, r0
 800ceda:	9216      	str	r2, [sp, #88]	; 0x58
 800cedc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cede:	e7dd      	b.n	800ce9c <_strtod_l+0xb88>
 800cee0:	4b10      	ldr	r3, [pc, #64]	; (800cf24 <_strtod_l+0xc10>)
 800cee2:	f7f3 fab9 	bl	8000458 <__aeabi_dcmplt>
 800cee6:	e7b2      	b.n	800ce4e <_strtod_l+0xb3a>
 800cee8:	fff00000 	.word	0xfff00000
 800ceec:	000fffff 	.word	0x000fffff
 800cef0:	3ff00000 	.word	0x3ff00000
 800cef4:	3fe00000 	.word	0x3fe00000
 800cef8:	7ff00000 	.word	0x7ff00000
 800cefc:	7fe00000 	.word	0x7fe00000
 800cf00:	fcb00000 	.word	0xfcb00000
 800cf04:	7c9fffff 	.word	0x7c9fffff
 800cf08:	7fefffff 	.word	0x7fefffff
 800cf0c:	bff00000 	.word	0xbff00000
 800cf10:	94a03595 	.word	0x94a03595
 800cf14:	3fdfffff 	.word	0x3fdfffff
 800cf18:	35afe535 	.word	0x35afe535
 800cf1c:	ffc00000 	.word	0xffc00000
 800cf20:	41dfffff 	.word	0x41dfffff
 800cf24:	3fcfffff 	.word	0x3fcfffff

0800cf28 <_strtod_r>:
 800cf28:	b510      	push	{r4, lr}
 800cf2a:	4b02      	ldr	r3, [pc, #8]	; (800cf34 <_strtod_r+0xc>)
 800cf2c:	f7ff f9f2 	bl	800c314 <_strtod_l>
 800cf30:	bd10      	pop	{r4, pc}
 800cf32:	46c0      	nop			; (mov r8, r8)
 800cf34:	20000100 	.word	0x20000100

0800cf38 <strtod>:
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	4c04      	ldr	r4, [pc, #16]	; (800cf4c <strtod+0x14>)
 800cf3c:	000a      	movs	r2, r1
 800cf3e:	0001      	movs	r1, r0
 800cf40:	4b03      	ldr	r3, [pc, #12]	; (800cf50 <strtod+0x18>)
 800cf42:	6820      	ldr	r0, [r4, #0]
 800cf44:	f7ff f9e6 	bl	800c314 <_strtod_l>
 800cf48:	bd10      	pop	{r4, pc}
 800cf4a:	46c0      	nop			; (mov r8, r8)
 800cf4c:	200002b8 	.word	0x200002b8
 800cf50:	20000100 	.word	0x20000100

0800cf54 <_strtol_l.constprop.0>:
 800cf54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf56:	b087      	sub	sp, #28
 800cf58:	001e      	movs	r6, r3
 800cf5a:	9005      	str	r0, [sp, #20]
 800cf5c:	9101      	str	r1, [sp, #4]
 800cf5e:	9202      	str	r2, [sp, #8]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d048      	beq.n	800cff6 <_strtol_l.constprop.0+0xa2>
 800cf64:	000b      	movs	r3, r1
 800cf66:	2e24      	cmp	r6, #36	; 0x24
 800cf68:	d845      	bhi.n	800cff6 <_strtol_l.constprop.0+0xa2>
 800cf6a:	4a3b      	ldr	r2, [pc, #236]	; (800d058 <_strtol_l.constprop.0+0x104>)
 800cf6c:	2108      	movs	r1, #8
 800cf6e:	4694      	mov	ip, r2
 800cf70:	001a      	movs	r2, r3
 800cf72:	4660      	mov	r0, ip
 800cf74:	7814      	ldrb	r4, [r2, #0]
 800cf76:	3301      	adds	r3, #1
 800cf78:	5d00      	ldrb	r0, [r0, r4]
 800cf7a:	001d      	movs	r5, r3
 800cf7c:	0007      	movs	r7, r0
 800cf7e:	400f      	ands	r7, r1
 800cf80:	4208      	tst	r0, r1
 800cf82:	d1f5      	bne.n	800cf70 <_strtol_l.constprop.0+0x1c>
 800cf84:	2c2d      	cmp	r4, #45	; 0x2d
 800cf86:	d13d      	bne.n	800d004 <_strtol_l.constprop.0+0xb0>
 800cf88:	2701      	movs	r7, #1
 800cf8a:	781c      	ldrb	r4, [r3, #0]
 800cf8c:	1c95      	adds	r5, r2, #2
 800cf8e:	2e00      	cmp	r6, #0
 800cf90:	d05e      	beq.n	800d050 <_strtol_l.constprop.0+0xfc>
 800cf92:	2e10      	cmp	r6, #16
 800cf94:	d109      	bne.n	800cfaa <_strtol_l.constprop.0+0x56>
 800cf96:	2c30      	cmp	r4, #48	; 0x30
 800cf98:	d107      	bne.n	800cfaa <_strtol_l.constprop.0+0x56>
 800cf9a:	2220      	movs	r2, #32
 800cf9c:	782b      	ldrb	r3, [r5, #0]
 800cf9e:	4393      	bics	r3, r2
 800cfa0:	2b58      	cmp	r3, #88	; 0x58
 800cfa2:	d150      	bne.n	800d046 <_strtol_l.constprop.0+0xf2>
 800cfa4:	2610      	movs	r6, #16
 800cfa6:	786c      	ldrb	r4, [r5, #1]
 800cfa8:	3502      	adds	r5, #2
 800cfaa:	4b2c      	ldr	r3, [pc, #176]	; (800d05c <_strtol_l.constprop.0+0x108>)
 800cfac:	0031      	movs	r1, r6
 800cfae:	18fb      	adds	r3, r7, r3
 800cfb0:	0018      	movs	r0, r3
 800cfb2:	9303      	str	r3, [sp, #12]
 800cfb4:	f7f3 f94a 	bl	800024c <__aeabi_uidivmod>
 800cfb8:	2200      	movs	r2, #0
 800cfba:	9104      	str	r1, [sp, #16]
 800cfbc:	2101      	movs	r1, #1
 800cfbe:	4684      	mov	ip, r0
 800cfc0:	0010      	movs	r0, r2
 800cfc2:	4249      	negs	r1, r1
 800cfc4:	0023      	movs	r3, r4
 800cfc6:	3b30      	subs	r3, #48	; 0x30
 800cfc8:	2b09      	cmp	r3, #9
 800cfca:	d903      	bls.n	800cfd4 <_strtol_l.constprop.0+0x80>
 800cfcc:	3b11      	subs	r3, #17
 800cfce:	2b19      	cmp	r3, #25
 800cfd0:	d81d      	bhi.n	800d00e <_strtol_l.constprop.0+0xba>
 800cfd2:	330a      	adds	r3, #10
 800cfd4:	429e      	cmp	r6, r3
 800cfd6:	dd1e      	ble.n	800d016 <_strtol_l.constprop.0+0xc2>
 800cfd8:	1c54      	adds	r4, r2, #1
 800cfda:	d009      	beq.n	800cff0 <_strtol_l.constprop.0+0x9c>
 800cfdc:	000a      	movs	r2, r1
 800cfde:	4584      	cmp	ip, r0
 800cfe0:	d306      	bcc.n	800cff0 <_strtol_l.constprop.0+0x9c>
 800cfe2:	d102      	bne.n	800cfea <_strtol_l.constprop.0+0x96>
 800cfe4:	9c04      	ldr	r4, [sp, #16]
 800cfe6:	429c      	cmp	r4, r3
 800cfe8:	db02      	blt.n	800cff0 <_strtol_l.constprop.0+0x9c>
 800cfea:	2201      	movs	r2, #1
 800cfec:	4370      	muls	r0, r6
 800cfee:	1818      	adds	r0, r3, r0
 800cff0:	782c      	ldrb	r4, [r5, #0]
 800cff2:	3501      	adds	r5, #1
 800cff4:	e7e6      	b.n	800cfc4 <_strtol_l.constprop.0+0x70>
 800cff6:	f001 f9b5 	bl	800e364 <__errno>
 800cffa:	2316      	movs	r3, #22
 800cffc:	6003      	str	r3, [r0, #0]
 800cffe:	2000      	movs	r0, #0
 800d000:	b007      	add	sp, #28
 800d002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d004:	2c2b      	cmp	r4, #43	; 0x2b
 800d006:	d1c2      	bne.n	800cf8e <_strtol_l.constprop.0+0x3a>
 800d008:	781c      	ldrb	r4, [r3, #0]
 800d00a:	1c95      	adds	r5, r2, #2
 800d00c:	e7bf      	b.n	800cf8e <_strtol_l.constprop.0+0x3a>
 800d00e:	0023      	movs	r3, r4
 800d010:	3b61      	subs	r3, #97	; 0x61
 800d012:	2b19      	cmp	r3, #25
 800d014:	d9dd      	bls.n	800cfd2 <_strtol_l.constprop.0+0x7e>
 800d016:	1c53      	adds	r3, r2, #1
 800d018:	d109      	bne.n	800d02e <_strtol_l.constprop.0+0xda>
 800d01a:	2322      	movs	r3, #34	; 0x22
 800d01c:	9a05      	ldr	r2, [sp, #20]
 800d01e:	9803      	ldr	r0, [sp, #12]
 800d020:	6013      	str	r3, [r2, #0]
 800d022:	9b02      	ldr	r3, [sp, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d0eb      	beq.n	800d000 <_strtol_l.constprop.0+0xac>
 800d028:	1e6b      	subs	r3, r5, #1
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	e007      	b.n	800d03e <_strtol_l.constprop.0+0xea>
 800d02e:	2f00      	cmp	r7, #0
 800d030:	d000      	beq.n	800d034 <_strtol_l.constprop.0+0xe0>
 800d032:	4240      	negs	r0, r0
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0e2      	beq.n	800d000 <_strtol_l.constprop.0+0xac>
 800d03a:	2a00      	cmp	r2, #0
 800d03c:	d1f4      	bne.n	800d028 <_strtol_l.constprop.0+0xd4>
 800d03e:	9b02      	ldr	r3, [sp, #8]
 800d040:	9a01      	ldr	r2, [sp, #4]
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	e7dc      	b.n	800d000 <_strtol_l.constprop.0+0xac>
 800d046:	2430      	movs	r4, #48	; 0x30
 800d048:	2e00      	cmp	r6, #0
 800d04a:	d1ae      	bne.n	800cfaa <_strtol_l.constprop.0+0x56>
 800d04c:	3608      	adds	r6, #8
 800d04e:	e7ac      	b.n	800cfaa <_strtol_l.constprop.0+0x56>
 800d050:	2c30      	cmp	r4, #48	; 0x30
 800d052:	d0a2      	beq.n	800cf9a <_strtol_l.constprop.0+0x46>
 800d054:	260a      	movs	r6, #10
 800d056:	e7a8      	b.n	800cfaa <_strtol_l.constprop.0+0x56>
 800d058:	08012f61 	.word	0x08012f61
 800d05c:	7fffffff 	.word	0x7fffffff

0800d060 <_strtol_r>:
 800d060:	b510      	push	{r4, lr}
 800d062:	f7ff ff77 	bl	800cf54 <_strtol_l.constprop.0>
 800d066:	bd10      	pop	{r4, pc}

0800d068 <strtol>:
 800d068:	b510      	push	{r4, lr}
 800d06a:	4c04      	ldr	r4, [pc, #16]	; (800d07c <strtol+0x14>)
 800d06c:	0013      	movs	r3, r2
 800d06e:	000a      	movs	r2, r1
 800d070:	0001      	movs	r1, r0
 800d072:	6820      	ldr	r0, [r4, #0]
 800d074:	f7ff ff6e 	bl	800cf54 <_strtol_l.constprop.0>
 800d078:	bd10      	pop	{r4, pc}
 800d07a:	46c0      	nop			; (mov r8, r8)
 800d07c:	200002b8 	.word	0x200002b8

0800d080 <__cvt>:
 800d080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d082:	001e      	movs	r6, r3
 800d084:	2300      	movs	r3, #0
 800d086:	0014      	movs	r4, r2
 800d088:	b08b      	sub	sp, #44	; 0x2c
 800d08a:	429e      	cmp	r6, r3
 800d08c:	da04      	bge.n	800d098 <__cvt+0x18>
 800d08e:	2180      	movs	r1, #128	; 0x80
 800d090:	0609      	lsls	r1, r1, #24
 800d092:	1873      	adds	r3, r6, r1
 800d094:	001e      	movs	r6, r3
 800d096:	232d      	movs	r3, #45	; 0x2d
 800d098:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d09a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d09c:	7013      	strb	r3, [r2, #0]
 800d09e:	2320      	movs	r3, #32
 800d0a0:	2203      	movs	r2, #3
 800d0a2:	439f      	bics	r7, r3
 800d0a4:	2f46      	cmp	r7, #70	; 0x46
 800d0a6:	d007      	beq.n	800d0b8 <__cvt+0x38>
 800d0a8:	003b      	movs	r3, r7
 800d0aa:	3b45      	subs	r3, #69	; 0x45
 800d0ac:	4259      	negs	r1, r3
 800d0ae:	414b      	adcs	r3, r1
 800d0b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d0b2:	3a01      	subs	r2, #1
 800d0b4:	18cb      	adds	r3, r1, r3
 800d0b6:	9310      	str	r3, [sp, #64]	; 0x40
 800d0b8:	ab09      	add	r3, sp, #36	; 0x24
 800d0ba:	9304      	str	r3, [sp, #16]
 800d0bc:	ab08      	add	r3, sp, #32
 800d0be:	9303      	str	r3, [sp, #12]
 800d0c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0c2:	9200      	str	r2, [sp, #0]
 800d0c4:	9302      	str	r3, [sp, #8]
 800d0c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0c8:	0022      	movs	r2, r4
 800d0ca:	9301      	str	r3, [sp, #4]
 800d0cc:	0033      	movs	r3, r6
 800d0ce:	f001 fa4b 	bl	800e568 <_dtoa_r>
 800d0d2:	0005      	movs	r5, r0
 800d0d4:	2f47      	cmp	r7, #71	; 0x47
 800d0d6:	d102      	bne.n	800d0de <__cvt+0x5e>
 800d0d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0da:	07db      	lsls	r3, r3, #31
 800d0dc:	d528      	bpl.n	800d130 <__cvt+0xb0>
 800d0de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0e0:	18eb      	adds	r3, r5, r3
 800d0e2:	9307      	str	r3, [sp, #28]
 800d0e4:	2f46      	cmp	r7, #70	; 0x46
 800d0e6:	d114      	bne.n	800d112 <__cvt+0x92>
 800d0e8:	782b      	ldrb	r3, [r5, #0]
 800d0ea:	2b30      	cmp	r3, #48	; 0x30
 800d0ec:	d10c      	bne.n	800d108 <__cvt+0x88>
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	0020      	movs	r0, r4
 800d0f4:	0031      	movs	r1, r6
 800d0f6:	f7f3 f9a9 	bl	800044c <__aeabi_dcmpeq>
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d104      	bne.n	800d108 <__cvt+0x88>
 800d0fe:	2301      	movs	r3, #1
 800d100:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d102:	1a9b      	subs	r3, r3, r2
 800d104:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d106:	6013      	str	r3, [r2, #0]
 800d108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d10a:	9a07      	ldr	r2, [sp, #28]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	18d3      	adds	r3, r2, r3
 800d110:	9307      	str	r3, [sp, #28]
 800d112:	2200      	movs	r2, #0
 800d114:	2300      	movs	r3, #0
 800d116:	0020      	movs	r0, r4
 800d118:	0031      	movs	r1, r6
 800d11a:	f7f3 f997 	bl	800044c <__aeabi_dcmpeq>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d001      	beq.n	800d126 <__cvt+0xa6>
 800d122:	9b07      	ldr	r3, [sp, #28]
 800d124:	9309      	str	r3, [sp, #36]	; 0x24
 800d126:	2230      	movs	r2, #48	; 0x30
 800d128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d12a:	9907      	ldr	r1, [sp, #28]
 800d12c:	428b      	cmp	r3, r1
 800d12e:	d306      	bcc.n	800d13e <__cvt+0xbe>
 800d130:	0028      	movs	r0, r5
 800d132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d134:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d136:	1b5b      	subs	r3, r3, r5
 800d138:	6013      	str	r3, [r2, #0]
 800d13a:	b00b      	add	sp, #44	; 0x2c
 800d13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d13e:	1c59      	adds	r1, r3, #1
 800d140:	9109      	str	r1, [sp, #36]	; 0x24
 800d142:	701a      	strb	r2, [r3, #0]
 800d144:	e7f0      	b.n	800d128 <__cvt+0xa8>

0800d146 <__exponent>:
 800d146:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d148:	1c83      	adds	r3, r0, #2
 800d14a:	b087      	sub	sp, #28
 800d14c:	9303      	str	r3, [sp, #12]
 800d14e:	0005      	movs	r5, r0
 800d150:	000c      	movs	r4, r1
 800d152:	232b      	movs	r3, #43	; 0x2b
 800d154:	7002      	strb	r2, [r0, #0]
 800d156:	2900      	cmp	r1, #0
 800d158:	da01      	bge.n	800d15e <__exponent+0x18>
 800d15a:	424c      	negs	r4, r1
 800d15c:	3302      	adds	r3, #2
 800d15e:	706b      	strb	r3, [r5, #1]
 800d160:	2c09      	cmp	r4, #9
 800d162:	dd2f      	ble.n	800d1c4 <__exponent+0x7e>
 800d164:	270a      	movs	r7, #10
 800d166:	ab04      	add	r3, sp, #16
 800d168:	1dde      	adds	r6, r3, #7
 800d16a:	0020      	movs	r0, r4
 800d16c:	0039      	movs	r1, r7
 800d16e:	9601      	str	r6, [sp, #4]
 800d170:	f7f3 f956 	bl	8000420 <__aeabi_idivmod>
 800d174:	3e01      	subs	r6, #1
 800d176:	3130      	adds	r1, #48	; 0x30
 800d178:	0020      	movs	r0, r4
 800d17a:	7031      	strb	r1, [r6, #0]
 800d17c:	0039      	movs	r1, r7
 800d17e:	9402      	str	r4, [sp, #8]
 800d180:	f7f3 f868 	bl	8000254 <__divsi3>
 800d184:	9b02      	ldr	r3, [sp, #8]
 800d186:	0004      	movs	r4, r0
 800d188:	2b63      	cmp	r3, #99	; 0x63
 800d18a:	dcee      	bgt.n	800d16a <__exponent+0x24>
 800d18c:	9b01      	ldr	r3, [sp, #4]
 800d18e:	3430      	adds	r4, #48	; 0x30
 800d190:	1e9a      	subs	r2, r3, #2
 800d192:	0013      	movs	r3, r2
 800d194:	9903      	ldr	r1, [sp, #12]
 800d196:	7014      	strb	r4, [r2, #0]
 800d198:	a804      	add	r0, sp, #16
 800d19a:	3007      	adds	r0, #7
 800d19c:	4298      	cmp	r0, r3
 800d19e:	d80c      	bhi.n	800d1ba <__exponent+0x74>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4282      	cmp	r2, r0
 800d1a4:	d804      	bhi.n	800d1b0 <__exponent+0x6a>
 800d1a6:	aa04      	add	r2, sp, #16
 800d1a8:	3309      	adds	r3, #9
 800d1aa:	189b      	adds	r3, r3, r2
 800d1ac:	9a01      	ldr	r2, [sp, #4]
 800d1ae:	1a9b      	subs	r3, r3, r2
 800d1b0:	9a03      	ldr	r2, [sp, #12]
 800d1b2:	18d3      	adds	r3, r2, r3
 800d1b4:	1b58      	subs	r0, r3, r5
 800d1b6:	b007      	add	sp, #28
 800d1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ba:	7818      	ldrb	r0, [r3, #0]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	7008      	strb	r0, [r1, #0]
 800d1c0:	3101      	adds	r1, #1
 800d1c2:	e7e9      	b.n	800d198 <__exponent+0x52>
 800d1c4:	2330      	movs	r3, #48	; 0x30
 800d1c6:	3430      	adds	r4, #48	; 0x30
 800d1c8:	70ab      	strb	r3, [r5, #2]
 800d1ca:	70ec      	strb	r4, [r5, #3]
 800d1cc:	1d2b      	adds	r3, r5, #4
 800d1ce:	e7f1      	b.n	800d1b4 <__exponent+0x6e>

0800d1d0 <_printf_float>:
 800d1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1d2:	b095      	sub	sp, #84	; 0x54
 800d1d4:	000c      	movs	r4, r1
 800d1d6:	9208      	str	r2, [sp, #32]
 800d1d8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d1da:	9309      	str	r3, [sp, #36]	; 0x24
 800d1dc:	0007      	movs	r7, r0
 800d1de:	f000 ffff 	bl	800e1e0 <_localeconv_r>
 800d1e2:	6803      	ldr	r3, [r0, #0]
 800d1e4:	0018      	movs	r0, r3
 800d1e6:	930c      	str	r3, [sp, #48]	; 0x30
 800d1e8:	f7f2 ff8e 	bl	8000108 <strlen>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	9312      	str	r3, [sp, #72]	; 0x48
 800d1f0:	7e23      	ldrb	r3, [r4, #24]
 800d1f2:	2207      	movs	r2, #7
 800d1f4:	930a      	str	r3, [sp, #40]	; 0x28
 800d1f6:	6823      	ldr	r3, [r4, #0]
 800d1f8:	900d      	str	r0, [sp, #52]	; 0x34
 800d1fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d1fe:	682b      	ldr	r3, [r5, #0]
 800d200:	05c9      	lsls	r1, r1, #23
 800d202:	d547      	bpl.n	800d294 <_printf_float+0xc4>
 800d204:	189b      	adds	r3, r3, r2
 800d206:	4393      	bics	r3, r2
 800d208:	001a      	movs	r2, r3
 800d20a:	3208      	adds	r2, #8
 800d20c:	602a      	str	r2, [r5, #0]
 800d20e:	681e      	ldr	r6, [r3, #0]
 800d210:	685d      	ldr	r5, [r3, #4]
 800d212:	0032      	movs	r2, r6
 800d214:	002b      	movs	r3, r5
 800d216:	64a2      	str	r2, [r4, #72]	; 0x48
 800d218:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d21a:	2201      	movs	r2, #1
 800d21c:	006b      	lsls	r3, r5, #1
 800d21e:	085b      	lsrs	r3, r3, #1
 800d220:	930e      	str	r3, [sp, #56]	; 0x38
 800d222:	0030      	movs	r0, r6
 800d224:	4bab      	ldr	r3, [pc, #684]	; (800d4d4 <_printf_float+0x304>)
 800d226:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d228:	4252      	negs	r2, r2
 800d22a:	f7f5 fe97 	bl	8002f5c <__aeabi_dcmpun>
 800d22e:	2800      	cmp	r0, #0
 800d230:	d132      	bne.n	800d298 <_printf_float+0xc8>
 800d232:	2201      	movs	r2, #1
 800d234:	0030      	movs	r0, r6
 800d236:	4ba7      	ldr	r3, [pc, #668]	; (800d4d4 <_printf_float+0x304>)
 800d238:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d23a:	4252      	negs	r2, r2
 800d23c:	f7f3 f916 	bl	800046c <__aeabi_dcmple>
 800d240:	2800      	cmp	r0, #0
 800d242:	d129      	bne.n	800d298 <_printf_float+0xc8>
 800d244:	2200      	movs	r2, #0
 800d246:	2300      	movs	r3, #0
 800d248:	0030      	movs	r0, r6
 800d24a:	0029      	movs	r1, r5
 800d24c:	f7f3 f904 	bl	8000458 <__aeabi_dcmplt>
 800d250:	2800      	cmp	r0, #0
 800d252:	d003      	beq.n	800d25c <_printf_float+0x8c>
 800d254:	0023      	movs	r3, r4
 800d256:	222d      	movs	r2, #45	; 0x2d
 800d258:	3343      	adds	r3, #67	; 0x43
 800d25a:	701a      	strb	r2, [r3, #0]
 800d25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d25e:	4d9e      	ldr	r5, [pc, #632]	; (800d4d8 <_printf_float+0x308>)
 800d260:	2b47      	cmp	r3, #71	; 0x47
 800d262:	d900      	bls.n	800d266 <_printf_float+0x96>
 800d264:	4d9d      	ldr	r5, [pc, #628]	; (800d4dc <_printf_float+0x30c>)
 800d266:	2303      	movs	r3, #3
 800d268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d26a:	6123      	str	r3, [r4, #16]
 800d26c:	3301      	adds	r3, #1
 800d26e:	439a      	bics	r2, r3
 800d270:	2300      	movs	r3, #0
 800d272:	6022      	str	r2, [r4, #0]
 800d274:	930b      	str	r3, [sp, #44]	; 0x2c
 800d276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d278:	0021      	movs	r1, r4
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	0038      	movs	r0, r7
 800d27e:	9b08      	ldr	r3, [sp, #32]
 800d280:	aa13      	add	r2, sp, #76	; 0x4c
 800d282:	f000 f9fb 	bl	800d67c <_printf_common>
 800d286:	3001      	adds	r0, #1
 800d288:	d000      	beq.n	800d28c <_printf_float+0xbc>
 800d28a:	e0a3      	b.n	800d3d4 <_printf_float+0x204>
 800d28c:	2001      	movs	r0, #1
 800d28e:	4240      	negs	r0, r0
 800d290:	b015      	add	sp, #84	; 0x54
 800d292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d294:	3307      	adds	r3, #7
 800d296:	e7b6      	b.n	800d206 <_printf_float+0x36>
 800d298:	0032      	movs	r2, r6
 800d29a:	002b      	movs	r3, r5
 800d29c:	0030      	movs	r0, r6
 800d29e:	0029      	movs	r1, r5
 800d2a0:	f7f5 fe5c 	bl	8002f5c <__aeabi_dcmpun>
 800d2a4:	2800      	cmp	r0, #0
 800d2a6:	d00b      	beq.n	800d2c0 <_printf_float+0xf0>
 800d2a8:	2d00      	cmp	r5, #0
 800d2aa:	da03      	bge.n	800d2b4 <_printf_float+0xe4>
 800d2ac:	0023      	movs	r3, r4
 800d2ae:	222d      	movs	r2, #45	; 0x2d
 800d2b0:	3343      	adds	r3, #67	; 0x43
 800d2b2:	701a      	strb	r2, [r3, #0]
 800d2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2b6:	4d8a      	ldr	r5, [pc, #552]	; (800d4e0 <_printf_float+0x310>)
 800d2b8:	2b47      	cmp	r3, #71	; 0x47
 800d2ba:	d9d4      	bls.n	800d266 <_printf_float+0x96>
 800d2bc:	4d89      	ldr	r5, [pc, #548]	; (800d4e4 <_printf_float+0x314>)
 800d2be:	e7d2      	b.n	800d266 <_printf_float+0x96>
 800d2c0:	2220      	movs	r2, #32
 800d2c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d2c4:	6863      	ldr	r3, [r4, #4]
 800d2c6:	4391      	bics	r1, r2
 800d2c8:	910e      	str	r1, [sp, #56]	; 0x38
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	d14a      	bne.n	800d364 <_printf_float+0x194>
 800d2ce:	3307      	adds	r3, #7
 800d2d0:	6063      	str	r3, [r4, #4]
 800d2d2:	2380      	movs	r3, #128	; 0x80
 800d2d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2d6:	00db      	lsls	r3, r3, #3
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	2200      	movs	r2, #0
 800d2dc:	9206      	str	r2, [sp, #24]
 800d2de:	aa12      	add	r2, sp, #72	; 0x48
 800d2e0:	9205      	str	r2, [sp, #20]
 800d2e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2e4:	6023      	str	r3, [r4, #0]
 800d2e6:	9204      	str	r2, [sp, #16]
 800d2e8:	aa11      	add	r2, sp, #68	; 0x44
 800d2ea:	9203      	str	r2, [sp, #12]
 800d2ec:	2223      	movs	r2, #35	; 0x23
 800d2ee:	a908      	add	r1, sp, #32
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	6863      	ldr	r3, [r4, #4]
 800d2f4:	1852      	adds	r2, r2, r1
 800d2f6:	9202      	str	r2, [sp, #8]
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	0032      	movs	r2, r6
 800d2fc:	002b      	movs	r3, r5
 800d2fe:	0038      	movs	r0, r7
 800d300:	f7ff febe 	bl	800d080 <__cvt>
 800d304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d306:	0005      	movs	r5, r0
 800d308:	2b47      	cmp	r3, #71	; 0x47
 800d30a:	d109      	bne.n	800d320 <_printf_float+0x150>
 800d30c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d30e:	1cda      	adds	r2, r3, #3
 800d310:	db02      	blt.n	800d318 <_printf_float+0x148>
 800d312:	6862      	ldr	r2, [r4, #4]
 800d314:	4293      	cmp	r3, r2
 800d316:	dd49      	ble.n	800d3ac <_printf_float+0x1dc>
 800d318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d31a:	3b02      	subs	r3, #2
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	930a      	str	r3, [sp, #40]	; 0x28
 800d320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d322:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d324:	2b65      	cmp	r3, #101	; 0x65
 800d326:	d824      	bhi.n	800d372 <_printf_float+0x1a2>
 800d328:	0020      	movs	r0, r4
 800d32a:	001a      	movs	r2, r3
 800d32c:	3901      	subs	r1, #1
 800d32e:	3050      	adds	r0, #80	; 0x50
 800d330:	9111      	str	r1, [sp, #68]	; 0x44
 800d332:	f7ff ff08 	bl	800d146 <__exponent>
 800d336:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d338:	900b      	str	r0, [sp, #44]	; 0x2c
 800d33a:	1813      	adds	r3, r2, r0
 800d33c:	6123      	str	r3, [r4, #16]
 800d33e:	2a01      	cmp	r2, #1
 800d340:	dc02      	bgt.n	800d348 <_printf_float+0x178>
 800d342:	6822      	ldr	r2, [r4, #0]
 800d344:	07d2      	lsls	r2, r2, #31
 800d346:	d501      	bpl.n	800d34c <_printf_float+0x17c>
 800d348:	3301      	adds	r3, #1
 800d34a:	6123      	str	r3, [r4, #16]
 800d34c:	2323      	movs	r3, #35	; 0x23
 800d34e:	aa08      	add	r2, sp, #32
 800d350:	189b      	adds	r3, r3, r2
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d100      	bne.n	800d35a <_printf_float+0x18a>
 800d358:	e78d      	b.n	800d276 <_printf_float+0xa6>
 800d35a:	0023      	movs	r3, r4
 800d35c:	222d      	movs	r2, #45	; 0x2d
 800d35e:	3343      	adds	r3, #67	; 0x43
 800d360:	701a      	strb	r2, [r3, #0]
 800d362:	e788      	b.n	800d276 <_printf_float+0xa6>
 800d364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d366:	2a47      	cmp	r2, #71	; 0x47
 800d368:	d1b3      	bne.n	800d2d2 <_printf_float+0x102>
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d1b1      	bne.n	800d2d2 <_printf_float+0x102>
 800d36e:	3301      	adds	r3, #1
 800d370:	e7ae      	b.n	800d2d0 <_printf_float+0x100>
 800d372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d374:	2b66      	cmp	r3, #102	; 0x66
 800d376:	d11b      	bne.n	800d3b0 <_printf_float+0x1e0>
 800d378:	6863      	ldr	r3, [r4, #4]
 800d37a:	2900      	cmp	r1, #0
 800d37c:	dd09      	ble.n	800d392 <_printf_float+0x1c2>
 800d37e:	6121      	str	r1, [r4, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d102      	bne.n	800d38a <_printf_float+0x1ba>
 800d384:	6822      	ldr	r2, [r4, #0]
 800d386:	07d2      	lsls	r2, r2, #31
 800d388:	d50b      	bpl.n	800d3a2 <_printf_float+0x1d2>
 800d38a:	3301      	adds	r3, #1
 800d38c:	185b      	adds	r3, r3, r1
 800d38e:	6123      	str	r3, [r4, #16]
 800d390:	e007      	b.n	800d3a2 <_printf_float+0x1d2>
 800d392:	2b00      	cmp	r3, #0
 800d394:	d103      	bne.n	800d39e <_printf_float+0x1ce>
 800d396:	2201      	movs	r2, #1
 800d398:	6821      	ldr	r1, [r4, #0]
 800d39a:	4211      	tst	r1, r2
 800d39c:	d000      	beq.n	800d3a0 <_printf_float+0x1d0>
 800d39e:	1c9a      	adds	r2, r3, #2
 800d3a0:	6122      	str	r2, [r4, #16]
 800d3a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3a4:	65a3      	str	r3, [r4, #88]	; 0x58
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3aa:	e7cf      	b.n	800d34c <_printf_float+0x17c>
 800d3ac:	2367      	movs	r3, #103	; 0x67
 800d3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d3b0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d3b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3b4:	4299      	cmp	r1, r3
 800d3b6:	db06      	blt.n	800d3c6 <_printf_float+0x1f6>
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	6121      	str	r1, [r4, #16]
 800d3bc:	07db      	lsls	r3, r3, #31
 800d3be:	d5f0      	bpl.n	800d3a2 <_printf_float+0x1d2>
 800d3c0:	3101      	adds	r1, #1
 800d3c2:	6121      	str	r1, [r4, #16]
 800d3c4:	e7ed      	b.n	800d3a2 <_printf_float+0x1d2>
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	2900      	cmp	r1, #0
 800d3ca:	dc01      	bgt.n	800d3d0 <_printf_float+0x200>
 800d3cc:	1892      	adds	r2, r2, r2
 800d3ce:	1a52      	subs	r2, r2, r1
 800d3d0:	189b      	adds	r3, r3, r2
 800d3d2:	e7dc      	b.n	800d38e <_printf_float+0x1be>
 800d3d4:	6822      	ldr	r2, [r4, #0]
 800d3d6:	0553      	lsls	r3, r2, #21
 800d3d8:	d408      	bmi.n	800d3ec <_printf_float+0x21c>
 800d3da:	6923      	ldr	r3, [r4, #16]
 800d3dc:	002a      	movs	r2, r5
 800d3de:	0038      	movs	r0, r7
 800d3e0:	9908      	ldr	r1, [sp, #32]
 800d3e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d3e4:	47a8      	blx	r5
 800d3e6:	3001      	adds	r0, #1
 800d3e8:	d12a      	bne.n	800d440 <_printf_float+0x270>
 800d3ea:	e74f      	b.n	800d28c <_printf_float+0xbc>
 800d3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ee:	2b65      	cmp	r3, #101	; 0x65
 800d3f0:	d800      	bhi.n	800d3f4 <_printf_float+0x224>
 800d3f2:	e0ec      	b.n	800d5ce <_printf_float+0x3fe>
 800d3f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d3f6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f7f3 f826 	bl	800044c <__aeabi_dcmpeq>
 800d400:	2800      	cmp	r0, #0
 800d402:	d034      	beq.n	800d46e <_printf_float+0x29e>
 800d404:	2301      	movs	r3, #1
 800d406:	0038      	movs	r0, r7
 800d408:	4a37      	ldr	r2, [pc, #220]	; (800d4e8 <_printf_float+0x318>)
 800d40a:	9908      	ldr	r1, [sp, #32]
 800d40c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d40e:	47a8      	blx	r5
 800d410:	3001      	adds	r0, #1
 800d412:	d100      	bne.n	800d416 <_printf_float+0x246>
 800d414:	e73a      	b.n	800d28c <_printf_float+0xbc>
 800d416:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d418:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d41a:	429a      	cmp	r2, r3
 800d41c:	db02      	blt.n	800d424 <_printf_float+0x254>
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	07db      	lsls	r3, r3, #31
 800d422:	d50d      	bpl.n	800d440 <_printf_float+0x270>
 800d424:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d426:	0038      	movs	r0, r7
 800d428:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d42a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d42c:	9908      	ldr	r1, [sp, #32]
 800d42e:	47a8      	blx	r5
 800d430:	2500      	movs	r5, #0
 800d432:	3001      	adds	r0, #1
 800d434:	d100      	bne.n	800d438 <_printf_float+0x268>
 800d436:	e729      	b.n	800d28c <_printf_float+0xbc>
 800d438:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d43a:	3b01      	subs	r3, #1
 800d43c:	42ab      	cmp	r3, r5
 800d43e:	dc0a      	bgt.n	800d456 <_printf_float+0x286>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	079b      	lsls	r3, r3, #30
 800d444:	d500      	bpl.n	800d448 <_printf_float+0x278>
 800d446:	e116      	b.n	800d676 <_printf_float+0x4a6>
 800d448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d44a:	68e0      	ldr	r0, [r4, #12]
 800d44c:	4298      	cmp	r0, r3
 800d44e:	db00      	blt.n	800d452 <_printf_float+0x282>
 800d450:	e71e      	b.n	800d290 <_printf_float+0xc0>
 800d452:	0018      	movs	r0, r3
 800d454:	e71c      	b.n	800d290 <_printf_float+0xc0>
 800d456:	0022      	movs	r2, r4
 800d458:	2301      	movs	r3, #1
 800d45a:	0038      	movs	r0, r7
 800d45c:	9908      	ldr	r1, [sp, #32]
 800d45e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d460:	321a      	adds	r2, #26
 800d462:	47b0      	blx	r6
 800d464:	3001      	adds	r0, #1
 800d466:	d100      	bne.n	800d46a <_printf_float+0x29a>
 800d468:	e710      	b.n	800d28c <_printf_float+0xbc>
 800d46a:	3501      	adds	r5, #1
 800d46c:	e7e4      	b.n	800d438 <_printf_float+0x268>
 800d46e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d470:	2b00      	cmp	r3, #0
 800d472:	dc3b      	bgt.n	800d4ec <_printf_float+0x31c>
 800d474:	2301      	movs	r3, #1
 800d476:	0038      	movs	r0, r7
 800d478:	4a1b      	ldr	r2, [pc, #108]	; (800d4e8 <_printf_float+0x318>)
 800d47a:	9908      	ldr	r1, [sp, #32]
 800d47c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d47e:	47b0      	blx	r6
 800d480:	3001      	adds	r0, #1
 800d482:	d100      	bne.n	800d486 <_printf_float+0x2b6>
 800d484:	e702      	b.n	800d28c <_printf_float+0xbc>
 800d486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d488:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d48a:	4313      	orrs	r3, r2
 800d48c:	d102      	bne.n	800d494 <_printf_float+0x2c4>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	07db      	lsls	r3, r3, #31
 800d492:	d5d5      	bpl.n	800d440 <_printf_float+0x270>
 800d494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d496:	0038      	movs	r0, r7
 800d498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d49a:	9908      	ldr	r1, [sp, #32]
 800d49c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d49e:	47b0      	blx	r6
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	d100      	bne.n	800d4a8 <_printf_float+0x2d8>
 800d4a6:	e6f1      	b.n	800d28c <_printf_float+0xbc>
 800d4a8:	930a      	str	r3, [sp, #40]	; 0x28
 800d4aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4ae:	425b      	negs	r3, r3
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	dc01      	bgt.n	800d4b8 <_printf_float+0x2e8>
 800d4b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4b6:	e791      	b.n	800d3dc <_printf_float+0x20c>
 800d4b8:	0022      	movs	r2, r4
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	0038      	movs	r0, r7
 800d4be:	9908      	ldr	r1, [sp, #32]
 800d4c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d4c2:	321a      	adds	r2, #26
 800d4c4:	47b0      	blx	r6
 800d4c6:	3001      	adds	r0, #1
 800d4c8:	d100      	bne.n	800d4cc <_printf_float+0x2fc>
 800d4ca:	e6df      	b.n	800d28c <_printf_float+0xbc>
 800d4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	e7ea      	b.n	800d4a8 <_printf_float+0x2d8>
 800d4d2:	46c0      	nop			; (mov r8, r8)
 800d4d4:	7fefffff 	.word	0x7fefffff
 800d4d8:	08013061 	.word	0x08013061
 800d4dc:	08013065 	.word	0x08013065
 800d4e0:	08013069 	.word	0x08013069
 800d4e4:	0801306d 	.word	0x0801306d
 800d4e8:	08013071 	.word	0x08013071
 800d4ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d4f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	dd00      	ble.n	800d4f8 <_printf_float+0x328>
 800d4f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	dc3d      	bgt.n	800d57a <_printf_float+0x3aa>
 800d4fe:	2300      	movs	r3, #0
 800d500:	930e      	str	r3, [sp, #56]	; 0x38
 800d502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d504:	43db      	mvns	r3, r3
 800d506:	17db      	asrs	r3, r3, #31
 800d508:	930f      	str	r3, [sp, #60]	; 0x3c
 800d50a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d50c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d50e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d512:	4013      	ands	r3, r2
 800d514:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d51a:	4293      	cmp	r3, r2
 800d51c:	dc36      	bgt.n	800d58c <_printf_float+0x3bc>
 800d51e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d522:	429a      	cmp	r2, r3
 800d524:	db40      	blt.n	800d5a8 <_printf_float+0x3d8>
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	07db      	lsls	r3, r3, #31
 800d52a:	d43d      	bmi.n	800d5a8 <_printf_float+0x3d8>
 800d52c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d52e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d532:	1af3      	subs	r3, r6, r3
 800d534:	1ab6      	subs	r6, r6, r2
 800d536:	429e      	cmp	r6, r3
 800d538:	dd00      	ble.n	800d53c <_printf_float+0x36c>
 800d53a:	001e      	movs	r6, r3
 800d53c:	2e00      	cmp	r6, #0
 800d53e:	dc3c      	bgt.n	800d5ba <_printf_float+0x3ea>
 800d540:	2300      	movs	r3, #0
 800d542:	930a      	str	r3, [sp, #40]	; 0x28
 800d544:	43f3      	mvns	r3, r6
 800d546:	17db      	asrs	r3, r3, #31
 800d548:	930b      	str	r3, [sp, #44]	; 0x2c
 800d54a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d54c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d54e:	1a9b      	subs	r3, r3, r2
 800d550:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d552:	4032      	ands	r2, r6
 800d554:	1a9b      	subs	r3, r3, r2
 800d556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d558:	4293      	cmp	r3, r2
 800d55a:	dc00      	bgt.n	800d55e <_printf_float+0x38e>
 800d55c:	e770      	b.n	800d440 <_printf_float+0x270>
 800d55e:	0022      	movs	r2, r4
 800d560:	2301      	movs	r3, #1
 800d562:	0038      	movs	r0, r7
 800d564:	9908      	ldr	r1, [sp, #32]
 800d566:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d568:	321a      	adds	r2, #26
 800d56a:	47a8      	blx	r5
 800d56c:	3001      	adds	r0, #1
 800d56e:	d100      	bne.n	800d572 <_printf_float+0x3a2>
 800d570:	e68c      	b.n	800d28c <_printf_float+0xbc>
 800d572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d574:	3301      	adds	r3, #1
 800d576:	930a      	str	r3, [sp, #40]	; 0x28
 800d578:	e7e7      	b.n	800d54a <_printf_float+0x37a>
 800d57a:	002a      	movs	r2, r5
 800d57c:	0038      	movs	r0, r7
 800d57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d580:	9908      	ldr	r1, [sp, #32]
 800d582:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d584:	47b0      	blx	r6
 800d586:	3001      	adds	r0, #1
 800d588:	d1b9      	bne.n	800d4fe <_printf_float+0x32e>
 800d58a:	e67f      	b.n	800d28c <_printf_float+0xbc>
 800d58c:	0022      	movs	r2, r4
 800d58e:	2301      	movs	r3, #1
 800d590:	0038      	movs	r0, r7
 800d592:	9908      	ldr	r1, [sp, #32]
 800d594:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d596:	321a      	adds	r2, #26
 800d598:	47b0      	blx	r6
 800d59a:	3001      	adds	r0, #1
 800d59c:	d100      	bne.n	800d5a0 <_printf_float+0x3d0>
 800d59e:	e675      	b.n	800d28c <_printf_float+0xbc>
 800d5a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	930e      	str	r3, [sp, #56]	; 0x38
 800d5a6:	e7b0      	b.n	800d50a <_printf_float+0x33a>
 800d5a8:	0038      	movs	r0, r7
 800d5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5ae:	9908      	ldr	r1, [sp, #32]
 800d5b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d5b2:	47b0      	blx	r6
 800d5b4:	3001      	adds	r0, #1
 800d5b6:	d1b9      	bne.n	800d52c <_printf_float+0x35c>
 800d5b8:	e668      	b.n	800d28c <_printf_float+0xbc>
 800d5ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5bc:	0038      	movs	r0, r7
 800d5be:	18ea      	adds	r2, r5, r3
 800d5c0:	9908      	ldr	r1, [sp, #32]
 800d5c2:	0033      	movs	r3, r6
 800d5c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d5c6:	47a8      	blx	r5
 800d5c8:	3001      	adds	r0, #1
 800d5ca:	d1b9      	bne.n	800d540 <_printf_float+0x370>
 800d5cc:	e65e      	b.n	800d28c <_printf_float+0xbc>
 800d5ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	dc02      	bgt.n	800d5da <_printf_float+0x40a>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	421a      	tst	r2, r3
 800d5d8:	d03a      	beq.n	800d650 <_printf_float+0x480>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	002a      	movs	r2, r5
 800d5de:	0038      	movs	r0, r7
 800d5e0:	9908      	ldr	r1, [sp, #32]
 800d5e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d5e4:	47b0      	blx	r6
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d100      	bne.n	800d5ec <_printf_float+0x41c>
 800d5ea:	e64f      	b.n	800d28c <_printf_float+0xbc>
 800d5ec:	0038      	movs	r0, r7
 800d5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5f2:	9908      	ldr	r1, [sp, #32]
 800d5f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d5f6:	47b0      	blx	r6
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	d100      	bne.n	800d5fe <_printf_float+0x42e>
 800d5fc:	e646      	b.n	800d28c <_printf_float+0xbc>
 800d5fe:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d600:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d602:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d604:	2200      	movs	r2, #0
 800d606:	001e      	movs	r6, r3
 800d608:	2300      	movs	r3, #0
 800d60a:	f7f2 ff1f 	bl	800044c <__aeabi_dcmpeq>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d11c      	bne.n	800d64c <_printf_float+0x47c>
 800d612:	0033      	movs	r3, r6
 800d614:	1c6a      	adds	r2, r5, #1
 800d616:	3b01      	subs	r3, #1
 800d618:	0038      	movs	r0, r7
 800d61a:	9908      	ldr	r1, [sp, #32]
 800d61c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d61e:	47a8      	blx	r5
 800d620:	3001      	adds	r0, #1
 800d622:	d10f      	bne.n	800d644 <_printf_float+0x474>
 800d624:	e632      	b.n	800d28c <_printf_float+0xbc>
 800d626:	0022      	movs	r2, r4
 800d628:	2301      	movs	r3, #1
 800d62a:	0038      	movs	r0, r7
 800d62c:	9908      	ldr	r1, [sp, #32]
 800d62e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d630:	321a      	adds	r2, #26
 800d632:	47b0      	blx	r6
 800d634:	3001      	adds	r0, #1
 800d636:	d100      	bne.n	800d63a <_printf_float+0x46a>
 800d638:	e628      	b.n	800d28c <_printf_float+0xbc>
 800d63a:	3501      	adds	r5, #1
 800d63c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d63e:	3b01      	subs	r3, #1
 800d640:	42ab      	cmp	r3, r5
 800d642:	dcf0      	bgt.n	800d626 <_printf_float+0x456>
 800d644:	0022      	movs	r2, r4
 800d646:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d648:	3250      	adds	r2, #80	; 0x50
 800d64a:	e6c8      	b.n	800d3de <_printf_float+0x20e>
 800d64c:	2500      	movs	r5, #0
 800d64e:	e7f5      	b.n	800d63c <_printf_float+0x46c>
 800d650:	002a      	movs	r2, r5
 800d652:	e7e1      	b.n	800d618 <_printf_float+0x448>
 800d654:	0022      	movs	r2, r4
 800d656:	2301      	movs	r3, #1
 800d658:	0038      	movs	r0, r7
 800d65a:	9908      	ldr	r1, [sp, #32]
 800d65c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d65e:	3219      	adds	r2, #25
 800d660:	47b0      	blx	r6
 800d662:	3001      	adds	r0, #1
 800d664:	d100      	bne.n	800d668 <_printf_float+0x498>
 800d666:	e611      	b.n	800d28c <_printf_float+0xbc>
 800d668:	3501      	adds	r5, #1
 800d66a:	68e3      	ldr	r3, [r4, #12]
 800d66c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d66e:	1a9b      	subs	r3, r3, r2
 800d670:	42ab      	cmp	r3, r5
 800d672:	dcef      	bgt.n	800d654 <_printf_float+0x484>
 800d674:	e6e8      	b.n	800d448 <_printf_float+0x278>
 800d676:	2500      	movs	r5, #0
 800d678:	e7f7      	b.n	800d66a <_printf_float+0x49a>
 800d67a:	46c0      	nop			; (mov r8, r8)

0800d67c <_printf_common>:
 800d67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d67e:	0016      	movs	r6, r2
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	688a      	ldr	r2, [r1, #8]
 800d684:	690b      	ldr	r3, [r1, #16]
 800d686:	000c      	movs	r4, r1
 800d688:	9000      	str	r0, [sp, #0]
 800d68a:	4293      	cmp	r3, r2
 800d68c:	da00      	bge.n	800d690 <_printf_common+0x14>
 800d68e:	0013      	movs	r3, r2
 800d690:	0022      	movs	r2, r4
 800d692:	6033      	str	r3, [r6, #0]
 800d694:	3243      	adds	r2, #67	; 0x43
 800d696:	7812      	ldrb	r2, [r2, #0]
 800d698:	2a00      	cmp	r2, #0
 800d69a:	d001      	beq.n	800d6a0 <_printf_common+0x24>
 800d69c:	3301      	adds	r3, #1
 800d69e:	6033      	str	r3, [r6, #0]
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	069b      	lsls	r3, r3, #26
 800d6a4:	d502      	bpl.n	800d6ac <_printf_common+0x30>
 800d6a6:	6833      	ldr	r3, [r6, #0]
 800d6a8:	3302      	adds	r3, #2
 800d6aa:	6033      	str	r3, [r6, #0]
 800d6ac:	6822      	ldr	r2, [r4, #0]
 800d6ae:	2306      	movs	r3, #6
 800d6b0:	0015      	movs	r5, r2
 800d6b2:	401d      	ands	r5, r3
 800d6b4:	421a      	tst	r2, r3
 800d6b6:	d027      	beq.n	800d708 <_printf_common+0x8c>
 800d6b8:	0023      	movs	r3, r4
 800d6ba:	3343      	adds	r3, #67	; 0x43
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	1e5a      	subs	r2, r3, #1
 800d6c0:	4193      	sbcs	r3, r2
 800d6c2:	6822      	ldr	r2, [r4, #0]
 800d6c4:	0692      	lsls	r2, r2, #26
 800d6c6:	d430      	bmi.n	800d72a <_printf_common+0xae>
 800d6c8:	0022      	movs	r2, r4
 800d6ca:	9901      	ldr	r1, [sp, #4]
 800d6cc:	9800      	ldr	r0, [sp, #0]
 800d6ce:	9d08      	ldr	r5, [sp, #32]
 800d6d0:	3243      	adds	r2, #67	; 0x43
 800d6d2:	47a8      	blx	r5
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	d025      	beq.n	800d724 <_printf_common+0xa8>
 800d6d8:	2206      	movs	r2, #6
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	2500      	movs	r5, #0
 800d6de:	4013      	ands	r3, r2
 800d6e0:	2b04      	cmp	r3, #4
 800d6e2:	d105      	bne.n	800d6f0 <_printf_common+0x74>
 800d6e4:	6833      	ldr	r3, [r6, #0]
 800d6e6:	68e5      	ldr	r5, [r4, #12]
 800d6e8:	1aed      	subs	r5, r5, r3
 800d6ea:	43eb      	mvns	r3, r5
 800d6ec:	17db      	asrs	r3, r3, #31
 800d6ee:	401d      	ands	r5, r3
 800d6f0:	68a3      	ldr	r3, [r4, #8]
 800d6f2:	6922      	ldr	r2, [r4, #16]
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	dd01      	ble.n	800d6fc <_printf_common+0x80>
 800d6f8:	1a9b      	subs	r3, r3, r2
 800d6fa:	18ed      	adds	r5, r5, r3
 800d6fc:	2600      	movs	r6, #0
 800d6fe:	42b5      	cmp	r5, r6
 800d700:	d120      	bne.n	800d744 <_printf_common+0xc8>
 800d702:	2000      	movs	r0, #0
 800d704:	e010      	b.n	800d728 <_printf_common+0xac>
 800d706:	3501      	adds	r5, #1
 800d708:	68e3      	ldr	r3, [r4, #12]
 800d70a:	6832      	ldr	r2, [r6, #0]
 800d70c:	1a9b      	subs	r3, r3, r2
 800d70e:	42ab      	cmp	r3, r5
 800d710:	ddd2      	ble.n	800d6b8 <_printf_common+0x3c>
 800d712:	0022      	movs	r2, r4
 800d714:	2301      	movs	r3, #1
 800d716:	9901      	ldr	r1, [sp, #4]
 800d718:	9800      	ldr	r0, [sp, #0]
 800d71a:	9f08      	ldr	r7, [sp, #32]
 800d71c:	3219      	adds	r2, #25
 800d71e:	47b8      	blx	r7
 800d720:	3001      	adds	r0, #1
 800d722:	d1f0      	bne.n	800d706 <_printf_common+0x8a>
 800d724:	2001      	movs	r0, #1
 800d726:	4240      	negs	r0, r0
 800d728:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d72a:	2030      	movs	r0, #48	; 0x30
 800d72c:	18e1      	adds	r1, r4, r3
 800d72e:	3143      	adds	r1, #67	; 0x43
 800d730:	7008      	strb	r0, [r1, #0]
 800d732:	0021      	movs	r1, r4
 800d734:	1c5a      	adds	r2, r3, #1
 800d736:	3145      	adds	r1, #69	; 0x45
 800d738:	7809      	ldrb	r1, [r1, #0]
 800d73a:	18a2      	adds	r2, r4, r2
 800d73c:	3243      	adds	r2, #67	; 0x43
 800d73e:	3302      	adds	r3, #2
 800d740:	7011      	strb	r1, [r2, #0]
 800d742:	e7c1      	b.n	800d6c8 <_printf_common+0x4c>
 800d744:	0022      	movs	r2, r4
 800d746:	2301      	movs	r3, #1
 800d748:	9901      	ldr	r1, [sp, #4]
 800d74a:	9800      	ldr	r0, [sp, #0]
 800d74c:	9f08      	ldr	r7, [sp, #32]
 800d74e:	321a      	adds	r2, #26
 800d750:	47b8      	blx	r7
 800d752:	3001      	adds	r0, #1
 800d754:	d0e6      	beq.n	800d724 <_printf_common+0xa8>
 800d756:	3601      	adds	r6, #1
 800d758:	e7d1      	b.n	800d6fe <_printf_common+0x82>
	...

0800d75c <_printf_i>:
 800d75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d75e:	b08b      	sub	sp, #44	; 0x2c
 800d760:	9206      	str	r2, [sp, #24]
 800d762:	000a      	movs	r2, r1
 800d764:	3243      	adds	r2, #67	; 0x43
 800d766:	9307      	str	r3, [sp, #28]
 800d768:	9005      	str	r0, [sp, #20]
 800d76a:	9204      	str	r2, [sp, #16]
 800d76c:	7e0a      	ldrb	r2, [r1, #24]
 800d76e:	000c      	movs	r4, r1
 800d770:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d772:	2a78      	cmp	r2, #120	; 0x78
 800d774:	d809      	bhi.n	800d78a <_printf_i+0x2e>
 800d776:	2a62      	cmp	r2, #98	; 0x62
 800d778:	d80b      	bhi.n	800d792 <_printf_i+0x36>
 800d77a:	2a00      	cmp	r2, #0
 800d77c:	d100      	bne.n	800d780 <_printf_i+0x24>
 800d77e:	e0be      	b.n	800d8fe <_printf_i+0x1a2>
 800d780:	497c      	ldr	r1, [pc, #496]	; (800d974 <_printf_i+0x218>)
 800d782:	9103      	str	r1, [sp, #12]
 800d784:	2a58      	cmp	r2, #88	; 0x58
 800d786:	d100      	bne.n	800d78a <_printf_i+0x2e>
 800d788:	e093      	b.n	800d8b2 <_printf_i+0x156>
 800d78a:	0026      	movs	r6, r4
 800d78c:	3642      	adds	r6, #66	; 0x42
 800d78e:	7032      	strb	r2, [r6, #0]
 800d790:	e022      	b.n	800d7d8 <_printf_i+0x7c>
 800d792:	0010      	movs	r0, r2
 800d794:	3863      	subs	r0, #99	; 0x63
 800d796:	2815      	cmp	r0, #21
 800d798:	d8f7      	bhi.n	800d78a <_printf_i+0x2e>
 800d79a:	f7f2 fcc7 	bl	800012c <__gnu_thumb1_case_shi>
 800d79e:	0016      	.short	0x0016
 800d7a0:	fff6001f 	.word	0xfff6001f
 800d7a4:	fff6fff6 	.word	0xfff6fff6
 800d7a8:	001ffff6 	.word	0x001ffff6
 800d7ac:	fff6fff6 	.word	0xfff6fff6
 800d7b0:	fff6fff6 	.word	0xfff6fff6
 800d7b4:	003600a3 	.word	0x003600a3
 800d7b8:	fff60083 	.word	0xfff60083
 800d7bc:	00b4fff6 	.word	0x00b4fff6
 800d7c0:	0036fff6 	.word	0x0036fff6
 800d7c4:	fff6fff6 	.word	0xfff6fff6
 800d7c8:	0087      	.short	0x0087
 800d7ca:	0026      	movs	r6, r4
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	3642      	adds	r6, #66	; 0x42
 800d7d0:	1d11      	adds	r1, r2, #4
 800d7d2:	6019      	str	r1, [r3, #0]
 800d7d4:	6813      	ldr	r3, [r2, #0]
 800d7d6:	7033      	strb	r3, [r6, #0]
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e0a2      	b.n	800d922 <_printf_i+0x1c6>
 800d7dc:	6818      	ldr	r0, [r3, #0]
 800d7de:	6809      	ldr	r1, [r1, #0]
 800d7e0:	1d02      	adds	r2, r0, #4
 800d7e2:	060d      	lsls	r5, r1, #24
 800d7e4:	d50b      	bpl.n	800d7fe <_printf_i+0xa2>
 800d7e6:	6805      	ldr	r5, [r0, #0]
 800d7e8:	601a      	str	r2, [r3, #0]
 800d7ea:	2d00      	cmp	r5, #0
 800d7ec:	da03      	bge.n	800d7f6 <_printf_i+0x9a>
 800d7ee:	232d      	movs	r3, #45	; 0x2d
 800d7f0:	9a04      	ldr	r2, [sp, #16]
 800d7f2:	426d      	negs	r5, r5
 800d7f4:	7013      	strb	r3, [r2, #0]
 800d7f6:	4b5f      	ldr	r3, [pc, #380]	; (800d974 <_printf_i+0x218>)
 800d7f8:	270a      	movs	r7, #10
 800d7fa:	9303      	str	r3, [sp, #12]
 800d7fc:	e01b      	b.n	800d836 <_printf_i+0xda>
 800d7fe:	6805      	ldr	r5, [r0, #0]
 800d800:	601a      	str	r2, [r3, #0]
 800d802:	0649      	lsls	r1, r1, #25
 800d804:	d5f1      	bpl.n	800d7ea <_printf_i+0x8e>
 800d806:	b22d      	sxth	r5, r5
 800d808:	e7ef      	b.n	800d7ea <_printf_i+0x8e>
 800d80a:	680d      	ldr	r5, [r1, #0]
 800d80c:	6819      	ldr	r1, [r3, #0]
 800d80e:	1d08      	adds	r0, r1, #4
 800d810:	6018      	str	r0, [r3, #0]
 800d812:	062e      	lsls	r6, r5, #24
 800d814:	d501      	bpl.n	800d81a <_printf_i+0xbe>
 800d816:	680d      	ldr	r5, [r1, #0]
 800d818:	e003      	b.n	800d822 <_printf_i+0xc6>
 800d81a:	066d      	lsls	r5, r5, #25
 800d81c:	d5fb      	bpl.n	800d816 <_printf_i+0xba>
 800d81e:	680d      	ldr	r5, [r1, #0]
 800d820:	b2ad      	uxth	r5, r5
 800d822:	4b54      	ldr	r3, [pc, #336]	; (800d974 <_printf_i+0x218>)
 800d824:	2708      	movs	r7, #8
 800d826:	9303      	str	r3, [sp, #12]
 800d828:	2a6f      	cmp	r2, #111	; 0x6f
 800d82a:	d000      	beq.n	800d82e <_printf_i+0xd2>
 800d82c:	3702      	adds	r7, #2
 800d82e:	0023      	movs	r3, r4
 800d830:	2200      	movs	r2, #0
 800d832:	3343      	adds	r3, #67	; 0x43
 800d834:	701a      	strb	r2, [r3, #0]
 800d836:	6863      	ldr	r3, [r4, #4]
 800d838:	60a3      	str	r3, [r4, #8]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	db03      	blt.n	800d846 <_printf_i+0xea>
 800d83e:	2104      	movs	r1, #4
 800d840:	6822      	ldr	r2, [r4, #0]
 800d842:	438a      	bics	r2, r1
 800d844:	6022      	str	r2, [r4, #0]
 800d846:	2d00      	cmp	r5, #0
 800d848:	d102      	bne.n	800d850 <_printf_i+0xf4>
 800d84a:	9e04      	ldr	r6, [sp, #16]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00c      	beq.n	800d86a <_printf_i+0x10e>
 800d850:	9e04      	ldr	r6, [sp, #16]
 800d852:	0028      	movs	r0, r5
 800d854:	0039      	movs	r1, r7
 800d856:	f7f2 fcf9 	bl	800024c <__aeabi_uidivmod>
 800d85a:	9b03      	ldr	r3, [sp, #12]
 800d85c:	3e01      	subs	r6, #1
 800d85e:	5c5b      	ldrb	r3, [r3, r1]
 800d860:	7033      	strb	r3, [r6, #0]
 800d862:	002b      	movs	r3, r5
 800d864:	0005      	movs	r5, r0
 800d866:	429f      	cmp	r7, r3
 800d868:	d9f3      	bls.n	800d852 <_printf_i+0xf6>
 800d86a:	2f08      	cmp	r7, #8
 800d86c:	d109      	bne.n	800d882 <_printf_i+0x126>
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	07db      	lsls	r3, r3, #31
 800d872:	d506      	bpl.n	800d882 <_printf_i+0x126>
 800d874:	6862      	ldr	r2, [r4, #4]
 800d876:	6923      	ldr	r3, [r4, #16]
 800d878:	429a      	cmp	r2, r3
 800d87a:	dc02      	bgt.n	800d882 <_printf_i+0x126>
 800d87c:	2330      	movs	r3, #48	; 0x30
 800d87e:	3e01      	subs	r6, #1
 800d880:	7033      	strb	r3, [r6, #0]
 800d882:	9b04      	ldr	r3, [sp, #16]
 800d884:	1b9b      	subs	r3, r3, r6
 800d886:	6123      	str	r3, [r4, #16]
 800d888:	9b07      	ldr	r3, [sp, #28]
 800d88a:	0021      	movs	r1, r4
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	9805      	ldr	r0, [sp, #20]
 800d890:	9b06      	ldr	r3, [sp, #24]
 800d892:	aa09      	add	r2, sp, #36	; 0x24
 800d894:	f7ff fef2 	bl	800d67c <_printf_common>
 800d898:	3001      	adds	r0, #1
 800d89a:	d147      	bne.n	800d92c <_printf_i+0x1d0>
 800d89c:	2001      	movs	r0, #1
 800d89e:	4240      	negs	r0, r0
 800d8a0:	b00b      	add	sp, #44	; 0x2c
 800d8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	6809      	ldr	r1, [r1, #0]
 800d8a8:	430a      	orrs	r2, r1
 800d8aa:	6022      	str	r2, [r4, #0]
 800d8ac:	2278      	movs	r2, #120	; 0x78
 800d8ae:	4932      	ldr	r1, [pc, #200]	; (800d978 <_printf_i+0x21c>)
 800d8b0:	9103      	str	r1, [sp, #12]
 800d8b2:	0021      	movs	r1, r4
 800d8b4:	3145      	adds	r1, #69	; 0x45
 800d8b6:	700a      	strb	r2, [r1, #0]
 800d8b8:	6819      	ldr	r1, [r3, #0]
 800d8ba:	6822      	ldr	r2, [r4, #0]
 800d8bc:	c920      	ldmia	r1!, {r5}
 800d8be:	0610      	lsls	r0, r2, #24
 800d8c0:	d402      	bmi.n	800d8c8 <_printf_i+0x16c>
 800d8c2:	0650      	lsls	r0, r2, #25
 800d8c4:	d500      	bpl.n	800d8c8 <_printf_i+0x16c>
 800d8c6:	b2ad      	uxth	r5, r5
 800d8c8:	6019      	str	r1, [r3, #0]
 800d8ca:	07d3      	lsls	r3, r2, #31
 800d8cc:	d502      	bpl.n	800d8d4 <_printf_i+0x178>
 800d8ce:	2320      	movs	r3, #32
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	6023      	str	r3, [r4, #0]
 800d8d4:	2710      	movs	r7, #16
 800d8d6:	2d00      	cmp	r5, #0
 800d8d8:	d1a9      	bne.n	800d82e <_printf_i+0xd2>
 800d8da:	2220      	movs	r2, #32
 800d8dc:	6823      	ldr	r3, [r4, #0]
 800d8de:	4393      	bics	r3, r2
 800d8e0:	6023      	str	r3, [r4, #0]
 800d8e2:	e7a4      	b.n	800d82e <_printf_i+0xd2>
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	680d      	ldr	r5, [r1, #0]
 800d8e8:	1d10      	adds	r0, r2, #4
 800d8ea:	6949      	ldr	r1, [r1, #20]
 800d8ec:	6018      	str	r0, [r3, #0]
 800d8ee:	6813      	ldr	r3, [r2, #0]
 800d8f0:	062e      	lsls	r6, r5, #24
 800d8f2:	d501      	bpl.n	800d8f8 <_printf_i+0x19c>
 800d8f4:	6019      	str	r1, [r3, #0]
 800d8f6:	e002      	b.n	800d8fe <_printf_i+0x1a2>
 800d8f8:	066d      	lsls	r5, r5, #25
 800d8fa:	d5fb      	bpl.n	800d8f4 <_printf_i+0x198>
 800d8fc:	8019      	strh	r1, [r3, #0]
 800d8fe:	2300      	movs	r3, #0
 800d900:	9e04      	ldr	r6, [sp, #16]
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	e7c0      	b.n	800d888 <_printf_i+0x12c>
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	1d11      	adds	r1, r2, #4
 800d90a:	6019      	str	r1, [r3, #0]
 800d90c:	6816      	ldr	r6, [r2, #0]
 800d90e:	2100      	movs	r1, #0
 800d910:	0030      	movs	r0, r6
 800d912:	6862      	ldr	r2, [r4, #4]
 800d914:	f000 fd5b 	bl	800e3ce <memchr>
 800d918:	2800      	cmp	r0, #0
 800d91a:	d001      	beq.n	800d920 <_printf_i+0x1c4>
 800d91c:	1b80      	subs	r0, r0, r6
 800d91e:	6060      	str	r0, [r4, #4]
 800d920:	6863      	ldr	r3, [r4, #4]
 800d922:	6123      	str	r3, [r4, #16]
 800d924:	2300      	movs	r3, #0
 800d926:	9a04      	ldr	r2, [sp, #16]
 800d928:	7013      	strb	r3, [r2, #0]
 800d92a:	e7ad      	b.n	800d888 <_printf_i+0x12c>
 800d92c:	0032      	movs	r2, r6
 800d92e:	6923      	ldr	r3, [r4, #16]
 800d930:	9906      	ldr	r1, [sp, #24]
 800d932:	9805      	ldr	r0, [sp, #20]
 800d934:	9d07      	ldr	r5, [sp, #28]
 800d936:	47a8      	blx	r5
 800d938:	3001      	adds	r0, #1
 800d93a:	d0af      	beq.n	800d89c <_printf_i+0x140>
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	079b      	lsls	r3, r3, #30
 800d940:	d415      	bmi.n	800d96e <_printf_i+0x212>
 800d942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d944:	68e0      	ldr	r0, [r4, #12]
 800d946:	4298      	cmp	r0, r3
 800d948:	daaa      	bge.n	800d8a0 <_printf_i+0x144>
 800d94a:	0018      	movs	r0, r3
 800d94c:	e7a8      	b.n	800d8a0 <_printf_i+0x144>
 800d94e:	0022      	movs	r2, r4
 800d950:	2301      	movs	r3, #1
 800d952:	9906      	ldr	r1, [sp, #24]
 800d954:	9805      	ldr	r0, [sp, #20]
 800d956:	9e07      	ldr	r6, [sp, #28]
 800d958:	3219      	adds	r2, #25
 800d95a:	47b0      	blx	r6
 800d95c:	3001      	adds	r0, #1
 800d95e:	d09d      	beq.n	800d89c <_printf_i+0x140>
 800d960:	3501      	adds	r5, #1
 800d962:	68e3      	ldr	r3, [r4, #12]
 800d964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d966:	1a9b      	subs	r3, r3, r2
 800d968:	42ab      	cmp	r3, r5
 800d96a:	dcf0      	bgt.n	800d94e <_printf_i+0x1f2>
 800d96c:	e7e9      	b.n	800d942 <_printf_i+0x1e6>
 800d96e:	2500      	movs	r5, #0
 800d970:	e7f7      	b.n	800d962 <_printf_i+0x206>
 800d972:	46c0      	nop			; (mov r8, r8)
 800d974:	08013073 	.word	0x08013073
 800d978:	08013084 	.word	0x08013084

0800d97c <_scanf_float>:
 800d97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d97e:	b08b      	sub	sp, #44	; 0x2c
 800d980:	0016      	movs	r6, r2
 800d982:	9002      	str	r0, [sp, #8]
 800d984:	22ae      	movs	r2, #174	; 0xae
 800d986:	2000      	movs	r0, #0
 800d988:	9307      	str	r3, [sp, #28]
 800d98a:	688b      	ldr	r3, [r1, #8]
 800d98c:	000f      	movs	r7, r1
 800d98e:	1e59      	subs	r1, r3, #1
 800d990:	0052      	lsls	r2, r2, #1
 800d992:	9006      	str	r0, [sp, #24]
 800d994:	4291      	cmp	r1, r2
 800d996:	d905      	bls.n	800d9a4 <_scanf_float+0x28>
 800d998:	3b5e      	subs	r3, #94	; 0x5e
 800d99a:	3bff      	subs	r3, #255	; 0xff
 800d99c:	9306      	str	r3, [sp, #24]
 800d99e:	235e      	movs	r3, #94	; 0x5e
 800d9a0:	33ff      	adds	r3, #255	; 0xff
 800d9a2:	60bb      	str	r3, [r7, #8]
 800d9a4:	23f0      	movs	r3, #240	; 0xf0
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	00db      	lsls	r3, r3, #3
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	603b      	str	r3, [r7, #0]
 800d9ae:	003b      	movs	r3, r7
 800d9b0:	2400      	movs	r4, #0
 800d9b2:	331c      	adds	r3, #28
 800d9b4:	001d      	movs	r5, r3
 800d9b6:	9304      	str	r3, [sp, #16]
 800d9b8:	9403      	str	r4, [sp, #12]
 800d9ba:	9409      	str	r4, [sp, #36]	; 0x24
 800d9bc:	9408      	str	r4, [sp, #32]
 800d9be:	9401      	str	r4, [sp, #4]
 800d9c0:	9405      	str	r4, [sp, #20]
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	2a00      	cmp	r2, #0
 800d9c6:	d00a      	beq.n	800d9de <_scanf_float+0x62>
 800d9c8:	6833      	ldr	r3, [r6, #0]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	2b4e      	cmp	r3, #78	; 0x4e
 800d9ce:	d844      	bhi.n	800da5a <_scanf_float+0xde>
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	2b40      	cmp	r3, #64	; 0x40
 800d9d4:	d82c      	bhi.n	800da30 <_scanf_float+0xb4>
 800d9d6:	382b      	subs	r0, #43	; 0x2b
 800d9d8:	b2c1      	uxtb	r1, r0
 800d9da:	290e      	cmp	r1, #14
 800d9dc:	d92a      	bls.n	800da34 <_scanf_float+0xb8>
 800d9de:	9b01      	ldr	r3, [sp, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d003      	beq.n	800d9ec <_scanf_float+0x70>
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	4aa3      	ldr	r2, [pc, #652]	; (800dc74 <_scanf_float+0x2f8>)
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	603b      	str	r3, [r7, #0]
 800d9ec:	9b03      	ldr	r3, [sp, #12]
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d900      	bls.n	800d9f6 <_scanf_float+0x7a>
 800d9f4:	e0f9      	b.n	800dbea <_scanf_float+0x26e>
 800d9f6:	24be      	movs	r4, #190	; 0xbe
 800d9f8:	0064      	lsls	r4, r4, #1
 800d9fa:	9b04      	ldr	r3, [sp, #16]
 800d9fc:	429d      	cmp	r5, r3
 800d9fe:	d900      	bls.n	800da02 <_scanf_float+0x86>
 800da00:	e0e9      	b.n	800dbd6 <_scanf_float+0x25a>
 800da02:	2301      	movs	r3, #1
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	e183      	b.n	800dd10 <_scanf_float+0x394>
 800da08:	0018      	movs	r0, r3
 800da0a:	3861      	subs	r0, #97	; 0x61
 800da0c:	280d      	cmp	r0, #13
 800da0e:	d8e6      	bhi.n	800d9de <_scanf_float+0x62>
 800da10:	f7f2 fb8c 	bl	800012c <__gnu_thumb1_case_shi>
 800da14:	ffe50083 	.word	0xffe50083
 800da18:	ffe5ffe5 	.word	0xffe5ffe5
 800da1c:	00a200b6 	.word	0x00a200b6
 800da20:	ffe5ffe5 	.word	0xffe5ffe5
 800da24:	ffe50089 	.word	0xffe50089
 800da28:	ffe5ffe5 	.word	0xffe5ffe5
 800da2c:	0065ffe5 	.word	0x0065ffe5
 800da30:	3841      	subs	r0, #65	; 0x41
 800da32:	e7eb      	b.n	800da0c <_scanf_float+0x90>
 800da34:	280e      	cmp	r0, #14
 800da36:	d8d2      	bhi.n	800d9de <_scanf_float+0x62>
 800da38:	f7f2 fb78 	bl	800012c <__gnu_thumb1_case_shi>
 800da3c:	ffd1004b 	.word	0xffd1004b
 800da40:	0098004b 	.word	0x0098004b
 800da44:	0020ffd1 	.word	0x0020ffd1
 800da48:	00400040 	.word	0x00400040
 800da4c:	00400040 	.word	0x00400040
 800da50:	00400040 	.word	0x00400040
 800da54:	00400040 	.word	0x00400040
 800da58:	0040      	.short	0x0040
 800da5a:	2b6e      	cmp	r3, #110	; 0x6e
 800da5c:	d809      	bhi.n	800da72 <_scanf_float+0xf6>
 800da5e:	2b60      	cmp	r3, #96	; 0x60
 800da60:	d8d2      	bhi.n	800da08 <_scanf_float+0x8c>
 800da62:	2b54      	cmp	r3, #84	; 0x54
 800da64:	d07d      	beq.n	800db62 <_scanf_float+0x1e6>
 800da66:	2b59      	cmp	r3, #89	; 0x59
 800da68:	d1b9      	bne.n	800d9de <_scanf_float+0x62>
 800da6a:	2c07      	cmp	r4, #7
 800da6c:	d1b7      	bne.n	800d9de <_scanf_float+0x62>
 800da6e:	2408      	movs	r4, #8
 800da70:	e02c      	b.n	800dacc <_scanf_float+0x150>
 800da72:	2b74      	cmp	r3, #116	; 0x74
 800da74:	d075      	beq.n	800db62 <_scanf_float+0x1e6>
 800da76:	2b79      	cmp	r3, #121	; 0x79
 800da78:	d0f7      	beq.n	800da6a <_scanf_float+0xee>
 800da7a:	e7b0      	b.n	800d9de <_scanf_float+0x62>
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	05c8      	lsls	r0, r1, #23
 800da80:	d51c      	bpl.n	800dabc <_scanf_float+0x140>
 800da82:	2380      	movs	r3, #128	; 0x80
 800da84:	4399      	bics	r1, r3
 800da86:	9b01      	ldr	r3, [sp, #4]
 800da88:	6039      	str	r1, [r7, #0]
 800da8a:	3301      	adds	r3, #1
 800da8c:	9301      	str	r3, [sp, #4]
 800da8e:	9b06      	ldr	r3, [sp, #24]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d003      	beq.n	800da9c <_scanf_float+0x120>
 800da94:	3b01      	subs	r3, #1
 800da96:	3201      	adds	r2, #1
 800da98:	9306      	str	r3, [sp, #24]
 800da9a:	60ba      	str	r2, [r7, #8]
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	3b01      	subs	r3, #1
 800daa0:	60bb      	str	r3, [r7, #8]
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	3301      	adds	r3, #1
 800daa6:	613b      	str	r3, [r7, #16]
 800daa8:	6873      	ldr	r3, [r6, #4]
 800daaa:	3b01      	subs	r3, #1
 800daac:	6073      	str	r3, [r6, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	dc00      	bgt.n	800dab4 <_scanf_float+0x138>
 800dab2:	e086      	b.n	800dbc2 <_scanf_float+0x246>
 800dab4:	6833      	ldr	r3, [r6, #0]
 800dab6:	3301      	adds	r3, #1
 800dab8:	6033      	str	r3, [r6, #0]
 800daba:	e782      	b.n	800d9c2 <_scanf_float+0x46>
 800dabc:	9a03      	ldr	r2, [sp, #12]
 800dabe:	1912      	adds	r2, r2, r4
 800dac0:	2a00      	cmp	r2, #0
 800dac2:	d18c      	bne.n	800d9de <_scanf_float+0x62>
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	496c      	ldr	r1, [pc, #432]	; (800dc78 <_scanf_float+0x2fc>)
 800dac8:	400a      	ands	r2, r1
 800daca:	603a      	str	r2, [r7, #0]
 800dacc:	702b      	strb	r3, [r5, #0]
 800dace:	3501      	adds	r5, #1
 800dad0:	e7e4      	b.n	800da9c <_scanf_float+0x120>
 800dad2:	2180      	movs	r1, #128	; 0x80
 800dad4:	683a      	ldr	r2, [r7, #0]
 800dad6:	420a      	tst	r2, r1
 800dad8:	d081      	beq.n	800d9de <_scanf_float+0x62>
 800dada:	438a      	bics	r2, r1
 800dadc:	e7f5      	b.n	800daca <_scanf_float+0x14e>
 800dade:	9a03      	ldr	r2, [sp, #12]
 800dae0:	2a00      	cmp	r2, #0
 800dae2:	d10f      	bne.n	800db04 <_scanf_float+0x188>
 800dae4:	9a01      	ldr	r2, [sp, #4]
 800dae6:	2a00      	cmp	r2, #0
 800dae8:	d10f      	bne.n	800db0a <_scanf_float+0x18e>
 800daea:	683a      	ldr	r2, [r7, #0]
 800daec:	21e0      	movs	r1, #224	; 0xe0
 800daee:	0010      	movs	r0, r2
 800daf0:	00c9      	lsls	r1, r1, #3
 800daf2:	4008      	ands	r0, r1
 800daf4:	4288      	cmp	r0, r1
 800daf6:	d108      	bne.n	800db0a <_scanf_float+0x18e>
 800daf8:	4960      	ldr	r1, [pc, #384]	; (800dc7c <_scanf_float+0x300>)
 800dafa:	400a      	ands	r2, r1
 800dafc:	603a      	str	r2, [r7, #0]
 800dafe:	2201      	movs	r2, #1
 800db00:	9203      	str	r2, [sp, #12]
 800db02:	e7e3      	b.n	800dacc <_scanf_float+0x150>
 800db04:	9a03      	ldr	r2, [sp, #12]
 800db06:	2a02      	cmp	r2, #2
 800db08:	d059      	beq.n	800dbbe <_scanf_float+0x242>
 800db0a:	2c01      	cmp	r4, #1
 800db0c:	d002      	beq.n	800db14 <_scanf_float+0x198>
 800db0e:	2c04      	cmp	r4, #4
 800db10:	d000      	beq.n	800db14 <_scanf_float+0x198>
 800db12:	e764      	b.n	800d9de <_scanf_float+0x62>
 800db14:	3401      	adds	r4, #1
 800db16:	b2e4      	uxtb	r4, r4
 800db18:	e7d8      	b.n	800dacc <_scanf_float+0x150>
 800db1a:	9a03      	ldr	r2, [sp, #12]
 800db1c:	2a01      	cmp	r2, #1
 800db1e:	d000      	beq.n	800db22 <_scanf_float+0x1a6>
 800db20:	e75d      	b.n	800d9de <_scanf_float+0x62>
 800db22:	2202      	movs	r2, #2
 800db24:	e7ec      	b.n	800db00 <_scanf_float+0x184>
 800db26:	2c00      	cmp	r4, #0
 800db28:	d110      	bne.n	800db4c <_scanf_float+0x1d0>
 800db2a:	9a01      	ldr	r2, [sp, #4]
 800db2c:	2a00      	cmp	r2, #0
 800db2e:	d000      	beq.n	800db32 <_scanf_float+0x1b6>
 800db30:	e758      	b.n	800d9e4 <_scanf_float+0x68>
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	21e0      	movs	r1, #224	; 0xe0
 800db36:	0010      	movs	r0, r2
 800db38:	00c9      	lsls	r1, r1, #3
 800db3a:	4008      	ands	r0, r1
 800db3c:	4288      	cmp	r0, r1
 800db3e:	d000      	beq.n	800db42 <_scanf_float+0x1c6>
 800db40:	e754      	b.n	800d9ec <_scanf_float+0x70>
 800db42:	494e      	ldr	r1, [pc, #312]	; (800dc7c <_scanf_float+0x300>)
 800db44:	3401      	adds	r4, #1
 800db46:	400a      	ands	r2, r1
 800db48:	603a      	str	r2, [r7, #0]
 800db4a:	e7bf      	b.n	800dacc <_scanf_float+0x150>
 800db4c:	21fd      	movs	r1, #253	; 0xfd
 800db4e:	1ee2      	subs	r2, r4, #3
 800db50:	420a      	tst	r2, r1
 800db52:	d000      	beq.n	800db56 <_scanf_float+0x1da>
 800db54:	e743      	b.n	800d9de <_scanf_float+0x62>
 800db56:	e7dd      	b.n	800db14 <_scanf_float+0x198>
 800db58:	2c02      	cmp	r4, #2
 800db5a:	d000      	beq.n	800db5e <_scanf_float+0x1e2>
 800db5c:	e73f      	b.n	800d9de <_scanf_float+0x62>
 800db5e:	2403      	movs	r4, #3
 800db60:	e7b4      	b.n	800dacc <_scanf_float+0x150>
 800db62:	2c06      	cmp	r4, #6
 800db64:	d000      	beq.n	800db68 <_scanf_float+0x1ec>
 800db66:	e73a      	b.n	800d9de <_scanf_float+0x62>
 800db68:	2407      	movs	r4, #7
 800db6a:	e7af      	b.n	800dacc <_scanf_float+0x150>
 800db6c:	683a      	ldr	r2, [r7, #0]
 800db6e:	0591      	lsls	r1, r2, #22
 800db70:	d400      	bmi.n	800db74 <_scanf_float+0x1f8>
 800db72:	e734      	b.n	800d9de <_scanf_float+0x62>
 800db74:	4942      	ldr	r1, [pc, #264]	; (800dc80 <_scanf_float+0x304>)
 800db76:	400a      	ands	r2, r1
 800db78:	603a      	str	r2, [r7, #0]
 800db7a:	9a01      	ldr	r2, [sp, #4]
 800db7c:	9205      	str	r2, [sp, #20]
 800db7e:	e7a5      	b.n	800dacc <_scanf_float+0x150>
 800db80:	21a0      	movs	r1, #160	; 0xa0
 800db82:	2080      	movs	r0, #128	; 0x80
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	00c9      	lsls	r1, r1, #3
 800db88:	4011      	ands	r1, r2
 800db8a:	00c0      	lsls	r0, r0, #3
 800db8c:	4281      	cmp	r1, r0
 800db8e:	d006      	beq.n	800db9e <_scanf_float+0x222>
 800db90:	4202      	tst	r2, r0
 800db92:	d100      	bne.n	800db96 <_scanf_float+0x21a>
 800db94:	e723      	b.n	800d9de <_scanf_float+0x62>
 800db96:	9901      	ldr	r1, [sp, #4]
 800db98:	2900      	cmp	r1, #0
 800db9a:	d100      	bne.n	800db9e <_scanf_float+0x222>
 800db9c:	e726      	b.n	800d9ec <_scanf_float+0x70>
 800db9e:	0591      	lsls	r1, r2, #22
 800dba0:	d404      	bmi.n	800dbac <_scanf_float+0x230>
 800dba2:	9901      	ldr	r1, [sp, #4]
 800dba4:	9805      	ldr	r0, [sp, #20]
 800dba6:	9509      	str	r5, [sp, #36]	; 0x24
 800dba8:	1a09      	subs	r1, r1, r0
 800dbaa:	9108      	str	r1, [sp, #32]
 800dbac:	4933      	ldr	r1, [pc, #204]	; (800dc7c <_scanf_float+0x300>)
 800dbae:	400a      	ands	r2, r1
 800dbb0:	21c0      	movs	r1, #192	; 0xc0
 800dbb2:	0049      	lsls	r1, r1, #1
 800dbb4:	430a      	orrs	r2, r1
 800dbb6:	603a      	str	r2, [r7, #0]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	9201      	str	r2, [sp, #4]
 800dbbc:	e786      	b.n	800dacc <_scanf_float+0x150>
 800dbbe:	2203      	movs	r2, #3
 800dbc0:	e79e      	b.n	800db00 <_scanf_float+0x184>
 800dbc2:	23c0      	movs	r3, #192	; 0xc0
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	0031      	movs	r1, r6
 800dbc8:	58fb      	ldr	r3, [r7, r3]
 800dbca:	9802      	ldr	r0, [sp, #8]
 800dbcc:	4798      	blx	r3
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d100      	bne.n	800dbd4 <_scanf_float+0x258>
 800dbd2:	e6f6      	b.n	800d9c2 <_scanf_float+0x46>
 800dbd4:	e703      	b.n	800d9de <_scanf_float+0x62>
 800dbd6:	3d01      	subs	r5, #1
 800dbd8:	593b      	ldr	r3, [r7, r4]
 800dbda:	0032      	movs	r2, r6
 800dbdc:	7829      	ldrb	r1, [r5, #0]
 800dbde:	9802      	ldr	r0, [sp, #8]
 800dbe0:	4798      	blx	r3
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	3b01      	subs	r3, #1
 800dbe6:	613b      	str	r3, [r7, #16]
 800dbe8:	e707      	b.n	800d9fa <_scanf_float+0x7e>
 800dbea:	1e63      	subs	r3, r4, #1
 800dbec:	2b06      	cmp	r3, #6
 800dbee:	d80e      	bhi.n	800dc0e <_scanf_float+0x292>
 800dbf0:	9503      	str	r5, [sp, #12]
 800dbf2:	2c02      	cmp	r4, #2
 800dbf4:	d920      	bls.n	800dc38 <_scanf_float+0x2bc>
 800dbf6:	1b63      	subs	r3, r4, r5
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	9306      	str	r3, [sp, #24]
 800dbfc:	9b03      	ldr	r3, [sp, #12]
 800dbfe:	9a06      	ldr	r2, [sp, #24]
 800dc00:	189b      	adds	r3, r3, r2
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b03      	cmp	r3, #3
 800dc06:	d827      	bhi.n	800dc58 <_scanf_float+0x2dc>
 800dc08:	3c03      	subs	r4, #3
 800dc0a:	b2e4      	uxtb	r4, r4
 800dc0c:	1b2d      	subs	r5, r5, r4
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	05da      	lsls	r2, r3, #23
 800dc12:	d552      	bpl.n	800dcba <_scanf_float+0x33e>
 800dc14:	055b      	lsls	r3, r3, #21
 800dc16:	d535      	bpl.n	800dc84 <_scanf_float+0x308>
 800dc18:	24be      	movs	r4, #190	; 0xbe
 800dc1a:	0064      	lsls	r4, r4, #1
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	429d      	cmp	r5, r3
 800dc20:	d800      	bhi.n	800dc24 <_scanf_float+0x2a8>
 800dc22:	e6ee      	b.n	800da02 <_scanf_float+0x86>
 800dc24:	3d01      	subs	r5, #1
 800dc26:	593b      	ldr	r3, [r7, r4]
 800dc28:	0032      	movs	r2, r6
 800dc2a:	7829      	ldrb	r1, [r5, #0]
 800dc2c:	9802      	ldr	r0, [sp, #8]
 800dc2e:	4798      	blx	r3
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	3b01      	subs	r3, #1
 800dc34:	613b      	str	r3, [r7, #16]
 800dc36:	e7f1      	b.n	800dc1c <_scanf_float+0x2a0>
 800dc38:	24be      	movs	r4, #190	; 0xbe
 800dc3a:	0064      	lsls	r4, r4, #1
 800dc3c:	9b04      	ldr	r3, [sp, #16]
 800dc3e:	429d      	cmp	r5, r3
 800dc40:	d800      	bhi.n	800dc44 <_scanf_float+0x2c8>
 800dc42:	e6de      	b.n	800da02 <_scanf_float+0x86>
 800dc44:	3d01      	subs	r5, #1
 800dc46:	593b      	ldr	r3, [r7, r4]
 800dc48:	0032      	movs	r2, r6
 800dc4a:	7829      	ldrb	r1, [r5, #0]
 800dc4c:	9802      	ldr	r0, [sp, #8]
 800dc4e:	4798      	blx	r3
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	3b01      	subs	r3, #1
 800dc54:	613b      	str	r3, [r7, #16]
 800dc56:	e7f1      	b.n	800dc3c <_scanf_float+0x2c0>
 800dc58:	9b03      	ldr	r3, [sp, #12]
 800dc5a:	0032      	movs	r2, r6
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	7819      	ldrb	r1, [r3, #0]
 800dc60:	9303      	str	r3, [sp, #12]
 800dc62:	23be      	movs	r3, #190	; 0xbe
 800dc64:	005b      	lsls	r3, r3, #1
 800dc66:	58fb      	ldr	r3, [r7, r3]
 800dc68:	9802      	ldr	r0, [sp, #8]
 800dc6a:	4798      	blx	r3
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	613b      	str	r3, [r7, #16]
 800dc72:	e7c3      	b.n	800dbfc <_scanf_float+0x280>
 800dc74:	fffffeff 	.word	0xfffffeff
 800dc78:	fffffe7f 	.word	0xfffffe7f
 800dc7c:	fffff87f 	.word	0xfffff87f
 800dc80:	fffffd7f 	.word	0xfffffd7f
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	1e6c      	subs	r4, r5, #1
 800dc88:	7821      	ldrb	r1, [r4, #0]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	613b      	str	r3, [r7, #16]
 800dc8e:	2965      	cmp	r1, #101	; 0x65
 800dc90:	d00c      	beq.n	800dcac <_scanf_float+0x330>
 800dc92:	2945      	cmp	r1, #69	; 0x45
 800dc94:	d00a      	beq.n	800dcac <_scanf_float+0x330>
 800dc96:	23be      	movs	r3, #190	; 0xbe
 800dc98:	005b      	lsls	r3, r3, #1
 800dc9a:	58fb      	ldr	r3, [r7, r3]
 800dc9c:	0032      	movs	r2, r6
 800dc9e:	9802      	ldr	r0, [sp, #8]
 800dca0:	4798      	blx	r3
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	1eac      	subs	r4, r5, #2
 800dca6:	3b01      	subs	r3, #1
 800dca8:	7821      	ldrb	r1, [r4, #0]
 800dcaa:	613b      	str	r3, [r7, #16]
 800dcac:	23be      	movs	r3, #190	; 0xbe
 800dcae:	005b      	lsls	r3, r3, #1
 800dcb0:	0032      	movs	r2, r6
 800dcb2:	58fb      	ldr	r3, [r7, r3]
 800dcb4:	9802      	ldr	r0, [sp, #8]
 800dcb6:	4798      	blx	r3
 800dcb8:	0025      	movs	r5, r4
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	2310      	movs	r3, #16
 800dcbe:	0011      	movs	r1, r2
 800dcc0:	4019      	ands	r1, r3
 800dcc2:	9103      	str	r1, [sp, #12]
 800dcc4:	421a      	tst	r2, r3
 800dcc6:	d15b      	bne.n	800dd80 <_scanf_float+0x404>
 800dcc8:	22c0      	movs	r2, #192	; 0xc0
 800dcca:	7029      	strb	r1, [r5, #0]
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	00d2      	lsls	r2, r2, #3
 800dcd0:	4013      	ands	r3, r2
 800dcd2:	2280      	movs	r2, #128	; 0x80
 800dcd4:	00d2      	lsls	r2, r2, #3
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d11d      	bne.n	800dd16 <_scanf_float+0x39a>
 800dcda:	9b05      	ldr	r3, [sp, #20]
 800dcdc:	9a01      	ldr	r2, [sp, #4]
 800dcde:	9901      	ldr	r1, [sp, #4]
 800dce0:	1a9a      	subs	r2, r3, r2
 800dce2:	428b      	cmp	r3, r1
 800dce4:	d124      	bne.n	800dd30 <_scanf_float+0x3b4>
 800dce6:	2200      	movs	r2, #0
 800dce8:	9904      	ldr	r1, [sp, #16]
 800dcea:	9802      	ldr	r0, [sp, #8]
 800dcec:	f7ff f91c 	bl	800cf28 <_strtod_r>
 800dcf0:	9b07      	ldr	r3, [sp, #28]
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	0004      	movs	r4, r0
 800dcf6:	000d      	movs	r5, r1
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	0791      	lsls	r1, r2, #30
 800dcfc:	d525      	bpl.n	800dd4a <_scanf_float+0x3ce>
 800dcfe:	9907      	ldr	r1, [sp, #28]
 800dd00:	1d1a      	adds	r2, r3, #4
 800dd02:	600a      	str	r2, [r1, #0]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	601c      	str	r4, [r3, #0]
 800dd08:	605d      	str	r5, [r3, #4]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	9803      	ldr	r0, [sp, #12]
 800dd12:	b00b      	add	sp, #44	; 0x2c
 800dd14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd16:	9b08      	ldr	r3, [sp, #32]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0e4      	beq.n	800dce6 <_scanf_float+0x36a>
 800dd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd1e:	9a03      	ldr	r2, [sp, #12]
 800dd20:	1c59      	adds	r1, r3, #1
 800dd22:	9802      	ldr	r0, [sp, #8]
 800dd24:	230a      	movs	r3, #10
 800dd26:	f7ff f99b 	bl	800d060 <_strtol_r>
 800dd2a:	9b08      	ldr	r3, [sp, #32]
 800dd2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd2e:	1ac2      	subs	r2, r0, r3
 800dd30:	003b      	movs	r3, r7
 800dd32:	3370      	adds	r3, #112	; 0x70
 800dd34:	33ff      	adds	r3, #255	; 0xff
 800dd36:	429d      	cmp	r5, r3
 800dd38:	d302      	bcc.n	800dd40 <_scanf_float+0x3c4>
 800dd3a:	003d      	movs	r5, r7
 800dd3c:	356f      	adds	r5, #111	; 0x6f
 800dd3e:	35ff      	adds	r5, #255	; 0xff
 800dd40:	0028      	movs	r0, r5
 800dd42:	4910      	ldr	r1, [pc, #64]	; (800dd84 <_scanf_float+0x408>)
 800dd44:	f000 f91a 	bl	800df7c <siprintf>
 800dd48:	e7cd      	b.n	800dce6 <_scanf_float+0x36a>
 800dd4a:	1d19      	adds	r1, r3, #4
 800dd4c:	0752      	lsls	r2, r2, #29
 800dd4e:	d502      	bpl.n	800dd56 <_scanf_float+0x3da>
 800dd50:	9a07      	ldr	r2, [sp, #28]
 800dd52:	6011      	str	r1, [r2, #0]
 800dd54:	e7d6      	b.n	800dd04 <_scanf_float+0x388>
 800dd56:	9a07      	ldr	r2, [sp, #28]
 800dd58:	0020      	movs	r0, r4
 800dd5a:	6011      	str	r1, [r2, #0]
 800dd5c:	681e      	ldr	r6, [r3, #0]
 800dd5e:	0022      	movs	r2, r4
 800dd60:	002b      	movs	r3, r5
 800dd62:	0029      	movs	r1, r5
 800dd64:	f7f5 f8fa 	bl	8002f5c <__aeabi_dcmpun>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d004      	beq.n	800dd76 <_scanf_float+0x3fa>
 800dd6c:	4806      	ldr	r0, [pc, #24]	; (800dd88 <_scanf_float+0x40c>)
 800dd6e:	f000 fb49 	bl	800e404 <nanf>
 800dd72:	6030      	str	r0, [r6, #0]
 800dd74:	e7c9      	b.n	800dd0a <_scanf_float+0x38e>
 800dd76:	0020      	movs	r0, r4
 800dd78:	0029      	movs	r1, r5
 800dd7a:	f7f5 f9e1 	bl	8003140 <__aeabi_d2f>
 800dd7e:	e7f8      	b.n	800dd72 <_scanf_float+0x3f6>
 800dd80:	2300      	movs	r3, #0
 800dd82:	e63f      	b.n	800da04 <_scanf_float+0x88>
 800dd84:	08013095 	.word	0x08013095
 800dd88:	0801314e 	.word	0x0801314e

0800dd8c <std>:
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	b510      	push	{r4, lr}
 800dd90:	0004      	movs	r4, r0
 800dd92:	6003      	str	r3, [r0, #0]
 800dd94:	6043      	str	r3, [r0, #4]
 800dd96:	6083      	str	r3, [r0, #8]
 800dd98:	8181      	strh	r1, [r0, #12]
 800dd9a:	6643      	str	r3, [r0, #100]	; 0x64
 800dd9c:	81c2      	strh	r2, [r0, #14]
 800dd9e:	6103      	str	r3, [r0, #16]
 800dda0:	6143      	str	r3, [r0, #20]
 800dda2:	6183      	str	r3, [r0, #24]
 800dda4:	0019      	movs	r1, r3
 800dda6:	2208      	movs	r2, #8
 800dda8:	305c      	adds	r0, #92	; 0x5c
 800ddaa:	f000 f953 	bl	800e054 <memset>
 800ddae:	4b0b      	ldr	r3, [pc, #44]	; (800dddc <std+0x50>)
 800ddb0:	6224      	str	r4, [r4, #32]
 800ddb2:	6263      	str	r3, [r4, #36]	; 0x24
 800ddb4:	4b0a      	ldr	r3, [pc, #40]	; (800dde0 <std+0x54>)
 800ddb6:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddb8:	4b0a      	ldr	r3, [pc, #40]	; (800dde4 <std+0x58>)
 800ddba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddbc:	4b0a      	ldr	r3, [pc, #40]	; (800dde8 <std+0x5c>)
 800ddbe:	6323      	str	r3, [r4, #48]	; 0x30
 800ddc0:	4b0a      	ldr	r3, [pc, #40]	; (800ddec <std+0x60>)
 800ddc2:	429c      	cmp	r4, r3
 800ddc4:	d005      	beq.n	800ddd2 <std+0x46>
 800ddc6:	4b0a      	ldr	r3, [pc, #40]	; (800ddf0 <std+0x64>)
 800ddc8:	429c      	cmp	r4, r3
 800ddca:	d002      	beq.n	800ddd2 <std+0x46>
 800ddcc:	4b09      	ldr	r3, [pc, #36]	; (800ddf4 <std+0x68>)
 800ddce:	429c      	cmp	r4, r3
 800ddd0:	d103      	bne.n	800ddda <std+0x4e>
 800ddd2:	0020      	movs	r0, r4
 800ddd4:	3058      	adds	r0, #88	; 0x58
 800ddd6:	f000 faef 	bl	800e3b8 <__retarget_lock_init_recursive>
 800ddda:	bd10      	pop	{r4, pc}
 800dddc:	0800dfbd 	.word	0x0800dfbd
 800dde0:	0800dfe5 	.word	0x0800dfe5
 800dde4:	0800e01d 	.word	0x0800e01d
 800dde8:	0800e049 	.word	0x0800e049
 800ddec:	2000595c 	.word	0x2000595c
 800ddf0:	200059c4 	.word	0x200059c4
 800ddf4:	20005a2c 	.word	0x20005a2c

0800ddf8 <stdio_exit_handler>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	4a03      	ldr	r2, [pc, #12]	; (800de08 <stdio_exit_handler+0x10>)
 800ddfc:	4903      	ldr	r1, [pc, #12]	; (800de0c <stdio_exit_handler+0x14>)
 800ddfe:	4804      	ldr	r0, [pc, #16]	; (800de10 <stdio_exit_handler+0x18>)
 800de00:	f000 f86c 	bl	800dedc <_fwalk_sglue>
 800de04:	bd10      	pop	{r4, pc}
 800de06:	46c0      	nop			; (mov r8, r8)
 800de08:	200000f4 	.word	0x200000f4
 800de0c:	0801065d 	.word	0x0801065d
 800de10:	2000026c 	.word	0x2000026c

0800de14 <cleanup_stdio>:
 800de14:	6841      	ldr	r1, [r0, #4]
 800de16:	4b0b      	ldr	r3, [pc, #44]	; (800de44 <cleanup_stdio+0x30>)
 800de18:	b510      	push	{r4, lr}
 800de1a:	0004      	movs	r4, r0
 800de1c:	4299      	cmp	r1, r3
 800de1e:	d001      	beq.n	800de24 <cleanup_stdio+0x10>
 800de20:	f002 fc1c 	bl	801065c <_fflush_r>
 800de24:	68a1      	ldr	r1, [r4, #8]
 800de26:	4b08      	ldr	r3, [pc, #32]	; (800de48 <cleanup_stdio+0x34>)
 800de28:	4299      	cmp	r1, r3
 800de2a:	d002      	beq.n	800de32 <cleanup_stdio+0x1e>
 800de2c:	0020      	movs	r0, r4
 800de2e:	f002 fc15 	bl	801065c <_fflush_r>
 800de32:	68e1      	ldr	r1, [r4, #12]
 800de34:	4b05      	ldr	r3, [pc, #20]	; (800de4c <cleanup_stdio+0x38>)
 800de36:	4299      	cmp	r1, r3
 800de38:	d002      	beq.n	800de40 <cleanup_stdio+0x2c>
 800de3a:	0020      	movs	r0, r4
 800de3c:	f002 fc0e 	bl	801065c <_fflush_r>
 800de40:	bd10      	pop	{r4, pc}
 800de42:	46c0      	nop			; (mov r8, r8)
 800de44:	2000595c 	.word	0x2000595c
 800de48:	200059c4 	.word	0x200059c4
 800de4c:	20005a2c 	.word	0x20005a2c

0800de50 <global_stdio_init.part.0>:
 800de50:	b510      	push	{r4, lr}
 800de52:	4b09      	ldr	r3, [pc, #36]	; (800de78 <global_stdio_init.part.0+0x28>)
 800de54:	4a09      	ldr	r2, [pc, #36]	; (800de7c <global_stdio_init.part.0+0x2c>)
 800de56:	2104      	movs	r1, #4
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	4809      	ldr	r0, [pc, #36]	; (800de80 <global_stdio_init.part.0+0x30>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	f7ff ff95 	bl	800dd8c <std>
 800de62:	2201      	movs	r2, #1
 800de64:	2109      	movs	r1, #9
 800de66:	4807      	ldr	r0, [pc, #28]	; (800de84 <global_stdio_init.part.0+0x34>)
 800de68:	f7ff ff90 	bl	800dd8c <std>
 800de6c:	2202      	movs	r2, #2
 800de6e:	2112      	movs	r1, #18
 800de70:	4805      	ldr	r0, [pc, #20]	; (800de88 <global_stdio_init.part.0+0x38>)
 800de72:	f7ff ff8b 	bl	800dd8c <std>
 800de76:	bd10      	pop	{r4, pc}
 800de78:	20005a94 	.word	0x20005a94
 800de7c:	0800ddf9 	.word	0x0800ddf9
 800de80:	2000595c 	.word	0x2000595c
 800de84:	200059c4 	.word	0x200059c4
 800de88:	20005a2c 	.word	0x20005a2c

0800de8c <__sfp_lock_acquire>:
 800de8c:	b510      	push	{r4, lr}
 800de8e:	4802      	ldr	r0, [pc, #8]	; (800de98 <__sfp_lock_acquire+0xc>)
 800de90:	f000 fa93 	bl	800e3ba <__retarget_lock_acquire_recursive>
 800de94:	bd10      	pop	{r4, pc}
 800de96:	46c0      	nop			; (mov r8, r8)
 800de98:	20005a9d 	.word	0x20005a9d

0800de9c <__sfp_lock_release>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4802      	ldr	r0, [pc, #8]	; (800dea8 <__sfp_lock_release+0xc>)
 800dea0:	f000 fa8c 	bl	800e3bc <__retarget_lock_release_recursive>
 800dea4:	bd10      	pop	{r4, pc}
 800dea6:	46c0      	nop			; (mov r8, r8)
 800dea8:	20005a9d 	.word	0x20005a9d

0800deac <__sinit>:
 800deac:	b510      	push	{r4, lr}
 800deae:	0004      	movs	r4, r0
 800deb0:	f7ff ffec 	bl	800de8c <__sfp_lock_acquire>
 800deb4:	6a23      	ldr	r3, [r4, #32]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d002      	beq.n	800dec0 <__sinit+0x14>
 800deba:	f7ff ffef 	bl	800de9c <__sfp_lock_release>
 800debe:	bd10      	pop	{r4, pc}
 800dec0:	4b04      	ldr	r3, [pc, #16]	; (800ded4 <__sinit+0x28>)
 800dec2:	6223      	str	r3, [r4, #32]
 800dec4:	4b04      	ldr	r3, [pc, #16]	; (800ded8 <__sinit+0x2c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d1f6      	bne.n	800deba <__sinit+0xe>
 800decc:	f7ff ffc0 	bl	800de50 <global_stdio_init.part.0>
 800ded0:	e7f3      	b.n	800deba <__sinit+0xe>
 800ded2:	46c0      	nop			; (mov r8, r8)
 800ded4:	0800de15 	.word	0x0800de15
 800ded8:	20005a94 	.word	0x20005a94

0800dedc <_fwalk_sglue>:
 800dedc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dede:	0014      	movs	r4, r2
 800dee0:	2600      	movs	r6, #0
 800dee2:	9000      	str	r0, [sp, #0]
 800dee4:	9101      	str	r1, [sp, #4]
 800dee6:	68a5      	ldr	r5, [r4, #8]
 800dee8:	6867      	ldr	r7, [r4, #4]
 800deea:	3f01      	subs	r7, #1
 800deec:	d504      	bpl.n	800def8 <_fwalk_sglue+0x1c>
 800deee:	6824      	ldr	r4, [r4, #0]
 800def0:	2c00      	cmp	r4, #0
 800def2:	d1f8      	bne.n	800dee6 <_fwalk_sglue+0xa>
 800def4:	0030      	movs	r0, r6
 800def6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800def8:	89ab      	ldrh	r3, [r5, #12]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d908      	bls.n	800df10 <_fwalk_sglue+0x34>
 800defe:	220e      	movs	r2, #14
 800df00:	5eab      	ldrsh	r3, [r5, r2]
 800df02:	3301      	adds	r3, #1
 800df04:	d004      	beq.n	800df10 <_fwalk_sglue+0x34>
 800df06:	0029      	movs	r1, r5
 800df08:	9800      	ldr	r0, [sp, #0]
 800df0a:	9b01      	ldr	r3, [sp, #4]
 800df0c:	4798      	blx	r3
 800df0e:	4306      	orrs	r6, r0
 800df10:	3568      	adds	r5, #104	; 0x68
 800df12:	e7ea      	b.n	800deea <_fwalk_sglue+0xe>

0800df14 <sniprintf>:
 800df14:	b40c      	push	{r2, r3}
 800df16:	b530      	push	{r4, r5, lr}
 800df18:	4b17      	ldr	r3, [pc, #92]	; (800df78 <sniprintf+0x64>)
 800df1a:	000c      	movs	r4, r1
 800df1c:	681d      	ldr	r5, [r3, #0]
 800df1e:	b09d      	sub	sp, #116	; 0x74
 800df20:	2900      	cmp	r1, #0
 800df22:	da08      	bge.n	800df36 <sniprintf+0x22>
 800df24:	238b      	movs	r3, #139	; 0x8b
 800df26:	2001      	movs	r0, #1
 800df28:	602b      	str	r3, [r5, #0]
 800df2a:	4240      	negs	r0, r0
 800df2c:	b01d      	add	sp, #116	; 0x74
 800df2e:	bc30      	pop	{r4, r5}
 800df30:	bc08      	pop	{r3}
 800df32:	b002      	add	sp, #8
 800df34:	4718      	bx	r3
 800df36:	2382      	movs	r3, #130	; 0x82
 800df38:	466a      	mov	r2, sp
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	8293      	strh	r3, [r2, #20]
 800df3e:	2300      	movs	r3, #0
 800df40:	9002      	str	r0, [sp, #8]
 800df42:	9006      	str	r0, [sp, #24]
 800df44:	4299      	cmp	r1, r3
 800df46:	d000      	beq.n	800df4a <sniprintf+0x36>
 800df48:	1e4b      	subs	r3, r1, #1
 800df4a:	9304      	str	r3, [sp, #16]
 800df4c:	9307      	str	r3, [sp, #28]
 800df4e:	2301      	movs	r3, #1
 800df50:	466a      	mov	r2, sp
 800df52:	425b      	negs	r3, r3
 800df54:	82d3      	strh	r3, [r2, #22]
 800df56:	0028      	movs	r0, r5
 800df58:	ab21      	add	r3, sp, #132	; 0x84
 800df5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800df5c:	a902      	add	r1, sp, #8
 800df5e:	9301      	str	r3, [sp, #4]
 800df60:	f002 f9f2 	bl	8010348 <_svfiprintf_r>
 800df64:	1c43      	adds	r3, r0, #1
 800df66:	da01      	bge.n	800df6c <sniprintf+0x58>
 800df68:	238b      	movs	r3, #139	; 0x8b
 800df6a:	602b      	str	r3, [r5, #0]
 800df6c:	2c00      	cmp	r4, #0
 800df6e:	d0dd      	beq.n	800df2c <sniprintf+0x18>
 800df70:	2200      	movs	r2, #0
 800df72:	9b02      	ldr	r3, [sp, #8]
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e7d9      	b.n	800df2c <sniprintf+0x18>
 800df78:	200002b8 	.word	0x200002b8

0800df7c <siprintf>:
 800df7c:	b40e      	push	{r1, r2, r3}
 800df7e:	b500      	push	{lr}
 800df80:	490b      	ldr	r1, [pc, #44]	; (800dfb0 <siprintf+0x34>)
 800df82:	b09c      	sub	sp, #112	; 0x70
 800df84:	ab1d      	add	r3, sp, #116	; 0x74
 800df86:	9002      	str	r0, [sp, #8]
 800df88:	9006      	str	r0, [sp, #24]
 800df8a:	9107      	str	r1, [sp, #28]
 800df8c:	9104      	str	r1, [sp, #16]
 800df8e:	4809      	ldr	r0, [pc, #36]	; (800dfb4 <siprintf+0x38>)
 800df90:	4909      	ldr	r1, [pc, #36]	; (800dfb8 <siprintf+0x3c>)
 800df92:	cb04      	ldmia	r3!, {r2}
 800df94:	9105      	str	r1, [sp, #20]
 800df96:	6800      	ldr	r0, [r0, #0]
 800df98:	a902      	add	r1, sp, #8
 800df9a:	9301      	str	r3, [sp, #4]
 800df9c:	f002 f9d4 	bl	8010348 <_svfiprintf_r>
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	9b02      	ldr	r3, [sp, #8]
 800dfa4:	701a      	strb	r2, [r3, #0]
 800dfa6:	b01c      	add	sp, #112	; 0x70
 800dfa8:	bc08      	pop	{r3}
 800dfaa:	b003      	add	sp, #12
 800dfac:	4718      	bx	r3
 800dfae:	46c0      	nop			; (mov r8, r8)
 800dfb0:	7fffffff 	.word	0x7fffffff
 800dfb4:	200002b8 	.word	0x200002b8
 800dfb8:	ffff0208 	.word	0xffff0208

0800dfbc <__sread>:
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	000c      	movs	r4, r1
 800dfc0:	250e      	movs	r5, #14
 800dfc2:	5f49      	ldrsh	r1, [r1, r5]
 800dfc4:	f000 f994 	bl	800e2f0 <_read_r>
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	db03      	blt.n	800dfd4 <__sread+0x18>
 800dfcc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dfce:	181b      	adds	r3, r3, r0
 800dfd0:	6563      	str	r3, [r4, #84]	; 0x54
 800dfd2:	bd70      	pop	{r4, r5, r6, pc}
 800dfd4:	89a3      	ldrh	r3, [r4, #12]
 800dfd6:	4a02      	ldr	r2, [pc, #8]	; (800dfe0 <__sread+0x24>)
 800dfd8:	4013      	ands	r3, r2
 800dfda:	81a3      	strh	r3, [r4, #12]
 800dfdc:	e7f9      	b.n	800dfd2 <__sread+0x16>
 800dfde:	46c0      	nop			; (mov r8, r8)
 800dfe0:	ffffefff 	.word	0xffffefff

0800dfe4 <__swrite>:
 800dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe6:	001f      	movs	r7, r3
 800dfe8:	898b      	ldrh	r3, [r1, #12]
 800dfea:	0005      	movs	r5, r0
 800dfec:	000c      	movs	r4, r1
 800dfee:	0016      	movs	r6, r2
 800dff0:	05db      	lsls	r3, r3, #23
 800dff2:	d505      	bpl.n	800e000 <__swrite+0x1c>
 800dff4:	230e      	movs	r3, #14
 800dff6:	5ec9      	ldrsh	r1, [r1, r3]
 800dff8:	2200      	movs	r2, #0
 800dffa:	2302      	movs	r3, #2
 800dffc:	f000 f964 	bl	800e2c8 <_lseek_r>
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	4a05      	ldr	r2, [pc, #20]	; (800e018 <__swrite+0x34>)
 800e004:	0028      	movs	r0, r5
 800e006:	4013      	ands	r3, r2
 800e008:	81a3      	strh	r3, [r4, #12]
 800e00a:	0032      	movs	r2, r6
 800e00c:	230e      	movs	r3, #14
 800e00e:	5ee1      	ldrsh	r1, [r4, r3]
 800e010:	003b      	movs	r3, r7
 800e012:	f000 f993 	bl	800e33c <_write_r>
 800e016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e018:	ffffefff 	.word	0xffffefff

0800e01c <__sseek>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	000c      	movs	r4, r1
 800e020:	250e      	movs	r5, #14
 800e022:	5f49      	ldrsh	r1, [r1, r5]
 800e024:	f000 f950 	bl	800e2c8 <_lseek_r>
 800e028:	89a3      	ldrh	r3, [r4, #12]
 800e02a:	1c42      	adds	r2, r0, #1
 800e02c:	d103      	bne.n	800e036 <__sseek+0x1a>
 800e02e:	4a05      	ldr	r2, [pc, #20]	; (800e044 <__sseek+0x28>)
 800e030:	4013      	ands	r3, r2
 800e032:	81a3      	strh	r3, [r4, #12]
 800e034:	bd70      	pop	{r4, r5, r6, pc}
 800e036:	2280      	movs	r2, #128	; 0x80
 800e038:	0152      	lsls	r2, r2, #5
 800e03a:	4313      	orrs	r3, r2
 800e03c:	81a3      	strh	r3, [r4, #12]
 800e03e:	6560      	str	r0, [r4, #84]	; 0x54
 800e040:	e7f8      	b.n	800e034 <__sseek+0x18>
 800e042:	46c0      	nop			; (mov r8, r8)
 800e044:	ffffefff 	.word	0xffffefff

0800e048 <__sclose>:
 800e048:	b510      	push	{r4, lr}
 800e04a:	230e      	movs	r3, #14
 800e04c:	5ec9      	ldrsh	r1, [r1, r3]
 800e04e:	f000 f8cb 	bl	800e1e8 <_close_r>
 800e052:	bd10      	pop	{r4, pc}

0800e054 <memset>:
 800e054:	0003      	movs	r3, r0
 800e056:	1882      	adds	r2, r0, r2
 800e058:	4293      	cmp	r3, r2
 800e05a:	d100      	bne.n	800e05e <memset+0xa>
 800e05c:	4770      	bx	lr
 800e05e:	7019      	strb	r1, [r3, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	e7f9      	b.n	800e058 <memset+0x4>

0800e064 <strcat>:
 800e064:	0002      	movs	r2, r0
 800e066:	b510      	push	{r4, lr}
 800e068:	7813      	ldrb	r3, [r2, #0]
 800e06a:	0014      	movs	r4, r2
 800e06c:	3201      	adds	r2, #1
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1fa      	bne.n	800e068 <strcat+0x4>
 800e072:	5cca      	ldrb	r2, [r1, r3]
 800e074:	54e2      	strb	r2, [r4, r3]
 800e076:	3301      	adds	r3, #1
 800e078:	2a00      	cmp	r2, #0
 800e07a:	d1fa      	bne.n	800e072 <strcat+0xe>
 800e07c:	bd10      	pop	{r4, pc}

0800e07e <strchr>:
 800e07e:	b2c9      	uxtb	r1, r1
 800e080:	7803      	ldrb	r3, [r0, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d004      	beq.n	800e090 <strchr+0x12>
 800e086:	428b      	cmp	r3, r1
 800e088:	d100      	bne.n	800e08c <strchr+0xe>
 800e08a:	4770      	bx	lr
 800e08c:	3001      	adds	r0, #1
 800e08e:	e7f7      	b.n	800e080 <strchr+0x2>
 800e090:	424b      	negs	r3, r1
 800e092:	4159      	adcs	r1, r3
 800e094:	4249      	negs	r1, r1
 800e096:	4008      	ands	r0, r1
 800e098:	e7f7      	b.n	800e08a <strchr+0xc>

0800e09a <strncmp>:
 800e09a:	b530      	push	{r4, r5, lr}
 800e09c:	0005      	movs	r5, r0
 800e09e:	1e10      	subs	r0, r2, #0
 800e0a0:	d00b      	beq.n	800e0ba <strncmp+0x20>
 800e0a2:	2400      	movs	r4, #0
 800e0a4:	3a01      	subs	r2, #1
 800e0a6:	5d2b      	ldrb	r3, [r5, r4]
 800e0a8:	5d08      	ldrb	r0, [r1, r4]
 800e0aa:	4283      	cmp	r3, r0
 800e0ac:	d104      	bne.n	800e0b8 <strncmp+0x1e>
 800e0ae:	42a2      	cmp	r2, r4
 800e0b0:	d002      	beq.n	800e0b8 <strncmp+0x1e>
 800e0b2:	3401      	adds	r4, #1
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d1f6      	bne.n	800e0a6 <strncmp+0xc>
 800e0b8:	1a18      	subs	r0, r3, r0
 800e0ba:	bd30      	pop	{r4, r5, pc}

0800e0bc <strncpy>:
 800e0bc:	0003      	movs	r3, r0
 800e0be:	b530      	push	{r4, r5, lr}
 800e0c0:	001d      	movs	r5, r3
 800e0c2:	2a00      	cmp	r2, #0
 800e0c4:	d006      	beq.n	800e0d4 <strncpy+0x18>
 800e0c6:	780c      	ldrb	r4, [r1, #0]
 800e0c8:	3a01      	subs	r2, #1
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	702c      	strb	r4, [r5, #0]
 800e0ce:	3101      	adds	r1, #1
 800e0d0:	2c00      	cmp	r4, #0
 800e0d2:	d1f5      	bne.n	800e0c0 <strncpy+0x4>
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	189a      	adds	r2, r3, r2
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d100      	bne.n	800e0de <strncpy+0x22>
 800e0dc:	bd30      	pop	{r4, r5, pc}
 800e0de:	7019      	strb	r1, [r3, #0]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	e7f9      	b.n	800e0d8 <strncpy+0x1c>

0800e0e4 <strtok>:
 800e0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e6:	4b16      	ldr	r3, [pc, #88]	; (800e140 <strtok+0x5c>)
 800e0e8:	0005      	movs	r5, r0
 800e0ea:	681f      	ldr	r7, [r3, #0]
 800e0ec:	000e      	movs	r6, r1
 800e0ee:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800e0f0:	2c00      	cmp	r4, #0
 800e0f2:	d11d      	bne.n	800e130 <strtok+0x4c>
 800e0f4:	2050      	movs	r0, #80	; 0x50
 800e0f6:	f7fe f837 	bl	800c168 <malloc>
 800e0fa:	1e02      	subs	r2, r0, #0
 800e0fc:	6478      	str	r0, [r7, #68]	; 0x44
 800e0fe:	d104      	bne.n	800e10a <strtok+0x26>
 800e100:	215b      	movs	r1, #91	; 0x5b
 800e102:	4b10      	ldr	r3, [pc, #64]	; (800e144 <strtok+0x60>)
 800e104:	4810      	ldr	r0, [pc, #64]	; (800e148 <strtok+0x64>)
 800e106:	f000 f981 	bl	800e40c <__assert_func>
 800e10a:	6004      	str	r4, [r0, #0]
 800e10c:	6044      	str	r4, [r0, #4]
 800e10e:	6084      	str	r4, [r0, #8]
 800e110:	60c4      	str	r4, [r0, #12]
 800e112:	6104      	str	r4, [r0, #16]
 800e114:	6144      	str	r4, [r0, #20]
 800e116:	6184      	str	r4, [r0, #24]
 800e118:	6284      	str	r4, [r0, #40]	; 0x28
 800e11a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800e11c:	6304      	str	r4, [r0, #48]	; 0x30
 800e11e:	6344      	str	r4, [r0, #52]	; 0x34
 800e120:	6384      	str	r4, [r0, #56]	; 0x38
 800e122:	63c4      	str	r4, [r0, #60]	; 0x3c
 800e124:	6404      	str	r4, [r0, #64]	; 0x40
 800e126:	6444      	str	r4, [r0, #68]	; 0x44
 800e128:	6484      	str	r4, [r0, #72]	; 0x48
 800e12a:	64c4      	str	r4, [r0, #76]	; 0x4c
 800e12c:	7704      	strb	r4, [r0, #28]
 800e12e:	6244      	str	r4, [r0, #36]	; 0x24
 800e130:	0031      	movs	r1, r6
 800e132:	0028      	movs	r0, r5
 800e134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e136:	2301      	movs	r3, #1
 800e138:	f000 f808 	bl	800e14c <__strtok_r>
 800e13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e13e:	46c0      	nop			; (mov r8, r8)
 800e140:	200002b8 	.word	0x200002b8
 800e144:	0801309a 	.word	0x0801309a
 800e148:	080130b1 	.word	0x080130b1

0800e14c <__strtok_r>:
 800e14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e14e:	2800      	cmp	r0, #0
 800e150:	d102      	bne.n	800e158 <__strtok_r+0xc>
 800e152:	6810      	ldr	r0, [r2, #0]
 800e154:	2800      	cmp	r0, #0
 800e156:	d013      	beq.n	800e180 <__strtok_r+0x34>
 800e158:	0004      	movs	r4, r0
 800e15a:	0020      	movs	r0, r4
 800e15c:	000e      	movs	r6, r1
 800e15e:	7805      	ldrb	r5, [r0, #0]
 800e160:	3401      	adds	r4, #1
 800e162:	7837      	ldrb	r7, [r6, #0]
 800e164:	2f00      	cmp	r7, #0
 800e166:	d104      	bne.n	800e172 <__strtok_r+0x26>
 800e168:	2d00      	cmp	r5, #0
 800e16a:	d10f      	bne.n	800e18c <__strtok_r+0x40>
 800e16c:	0028      	movs	r0, r5
 800e16e:	6015      	str	r5, [r2, #0]
 800e170:	e006      	b.n	800e180 <__strtok_r+0x34>
 800e172:	3601      	adds	r6, #1
 800e174:	42bd      	cmp	r5, r7
 800e176:	d1f4      	bne.n	800e162 <__strtok_r+0x16>
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d1ee      	bne.n	800e15a <__strtok_r+0xe>
 800e17c:	6014      	str	r4, [r2, #0]
 800e17e:	7003      	strb	r3, [r0, #0]
 800e180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e182:	002f      	movs	r7, r5
 800e184:	e00f      	b.n	800e1a6 <__strtok_r+0x5a>
 800e186:	3301      	adds	r3, #1
 800e188:	2e00      	cmp	r6, #0
 800e18a:	d104      	bne.n	800e196 <__strtok_r+0x4a>
 800e18c:	0023      	movs	r3, r4
 800e18e:	3401      	adds	r4, #1
 800e190:	781d      	ldrb	r5, [r3, #0]
 800e192:	0027      	movs	r7, r4
 800e194:	000b      	movs	r3, r1
 800e196:	781e      	ldrb	r6, [r3, #0]
 800e198:	42b5      	cmp	r5, r6
 800e19a:	d1f4      	bne.n	800e186 <__strtok_r+0x3a>
 800e19c:	2d00      	cmp	r5, #0
 800e19e:	d0f0      	beq.n	800e182 <__strtok_r+0x36>
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	3c01      	subs	r4, #1
 800e1a4:	7023      	strb	r3, [r4, #0]
 800e1a6:	6017      	str	r7, [r2, #0]
 800e1a8:	e7ea      	b.n	800e180 <__strtok_r+0x34>

0800e1aa <strtok_r>:
 800e1aa:	b510      	push	{r4, lr}
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	f7ff ffcd 	bl	800e14c <__strtok_r>
 800e1b2:	bd10      	pop	{r4, pc}

0800e1b4 <strstr>:
 800e1b4:	780a      	ldrb	r2, [r1, #0]
 800e1b6:	b530      	push	{r4, r5, lr}
 800e1b8:	2a00      	cmp	r2, #0
 800e1ba:	d10c      	bne.n	800e1d6 <strstr+0x22>
 800e1bc:	bd30      	pop	{r4, r5, pc}
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d108      	bne.n	800e1d4 <strstr+0x20>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	5ccc      	ldrb	r4, [r1, r3]
 800e1c6:	2c00      	cmp	r4, #0
 800e1c8:	d0f8      	beq.n	800e1bc <strstr+0x8>
 800e1ca:	5cc5      	ldrb	r5, [r0, r3]
 800e1cc:	42a5      	cmp	r5, r4
 800e1ce:	d101      	bne.n	800e1d4 <strstr+0x20>
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	e7f7      	b.n	800e1c4 <strstr+0x10>
 800e1d4:	3001      	adds	r0, #1
 800e1d6:	7803      	ldrb	r3, [r0, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d1f0      	bne.n	800e1be <strstr+0xa>
 800e1dc:	0018      	movs	r0, r3
 800e1de:	e7ed      	b.n	800e1bc <strstr+0x8>

0800e1e0 <_localeconv_r>:
 800e1e0:	4800      	ldr	r0, [pc, #0]	; (800e1e4 <_localeconv_r+0x4>)
 800e1e2:	4770      	bx	lr
 800e1e4:	200001f0 	.word	0x200001f0

0800e1e8 <_close_r>:
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	b570      	push	{r4, r5, r6, lr}
 800e1ec:	4d06      	ldr	r5, [pc, #24]	; (800e208 <_close_r+0x20>)
 800e1ee:	0004      	movs	r4, r0
 800e1f0:	0008      	movs	r0, r1
 800e1f2:	602b      	str	r3, [r5, #0]
 800e1f4:	f7f8 fe12 	bl	8006e1c <_close>
 800e1f8:	1c43      	adds	r3, r0, #1
 800e1fa:	d103      	bne.n	800e204 <_close_r+0x1c>
 800e1fc:	682b      	ldr	r3, [r5, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d000      	beq.n	800e204 <_close_r+0x1c>
 800e202:	6023      	str	r3, [r4, #0]
 800e204:	bd70      	pop	{r4, r5, r6, pc}
 800e206:	46c0      	nop			; (mov r8, r8)
 800e208:	20005a98 	.word	0x20005a98

0800e20c <_reclaim_reent>:
 800e20c:	4b2d      	ldr	r3, [pc, #180]	; (800e2c4 <_reclaim_reent+0xb8>)
 800e20e:	b570      	push	{r4, r5, r6, lr}
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	0004      	movs	r4, r0
 800e214:	4283      	cmp	r3, r0
 800e216:	d042      	beq.n	800e29e <_reclaim_reent+0x92>
 800e218:	69c3      	ldr	r3, [r0, #28]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <_reclaim_reent+0x28>
 800e21e:	2500      	movs	r5, #0
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	42ab      	cmp	r3, r5
 800e224:	d140      	bne.n	800e2a8 <_reclaim_reent+0x9c>
 800e226:	69e3      	ldr	r3, [r4, #28]
 800e228:	6819      	ldr	r1, [r3, #0]
 800e22a:	2900      	cmp	r1, #0
 800e22c:	d002      	beq.n	800e234 <_reclaim_reent+0x28>
 800e22e:	0020      	movs	r0, r4
 800e230:	f000 ffa8 	bl	800f184 <_free_r>
 800e234:	6961      	ldr	r1, [r4, #20]
 800e236:	2900      	cmp	r1, #0
 800e238:	d002      	beq.n	800e240 <_reclaim_reent+0x34>
 800e23a:	0020      	movs	r0, r4
 800e23c:	f000 ffa2 	bl	800f184 <_free_r>
 800e240:	69e1      	ldr	r1, [r4, #28]
 800e242:	2900      	cmp	r1, #0
 800e244:	d002      	beq.n	800e24c <_reclaim_reent+0x40>
 800e246:	0020      	movs	r0, r4
 800e248:	f000 ff9c 	bl	800f184 <_free_r>
 800e24c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e24e:	2900      	cmp	r1, #0
 800e250:	d002      	beq.n	800e258 <_reclaim_reent+0x4c>
 800e252:	0020      	movs	r0, r4
 800e254:	f000 ff96 	bl	800f184 <_free_r>
 800e258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e25a:	2900      	cmp	r1, #0
 800e25c:	d002      	beq.n	800e264 <_reclaim_reent+0x58>
 800e25e:	0020      	movs	r0, r4
 800e260:	f000 ff90 	bl	800f184 <_free_r>
 800e264:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e266:	2900      	cmp	r1, #0
 800e268:	d002      	beq.n	800e270 <_reclaim_reent+0x64>
 800e26a:	0020      	movs	r0, r4
 800e26c:	f000 ff8a 	bl	800f184 <_free_r>
 800e270:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e272:	2900      	cmp	r1, #0
 800e274:	d002      	beq.n	800e27c <_reclaim_reent+0x70>
 800e276:	0020      	movs	r0, r4
 800e278:	f000 ff84 	bl	800f184 <_free_r>
 800e27c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e27e:	2900      	cmp	r1, #0
 800e280:	d002      	beq.n	800e288 <_reclaim_reent+0x7c>
 800e282:	0020      	movs	r0, r4
 800e284:	f000 ff7e 	bl	800f184 <_free_r>
 800e288:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e28a:	2900      	cmp	r1, #0
 800e28c:	d002      	beq.n	800e294 <_reclaim_reent+0x88>
 800e28e:	0020      	movs	r0, r4
 800e290:	f000 ff78 	bl	800f184 <_free_r>
 800e294:	6a23      	ldr	r3, [r4, #32]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d001      	beq.n	800e29e <_reclaim_reent+0x92>
 800e29a:	0020      	movs	r0, r4
 800e29c:	4798      	blx	r3
 800e29e:	bd70      	pop	{r4, r5, r6, pc}
 800e2a0:	5949      	ldr	r1, [r1, r5]
 800e2a2:	2900      	cmp	r1, #0
 800e2a4:	d108      	bne.n	800e2b8 <_reclaim_reent+0xac>
 800e2a6:	3504      	adds	r5, #4
 800e2a8:	69e3      	ldr	r3, [r4, #28]
 800e2aa:	68d9      	ldr	r1, [r3, #12]
 800e2ac:	2d80      	cmp	r5, #128	; 0x80
 800e2ae:	d1f7      	bne.n	800e2a0 <_reclaim_reent+0x94>
 800e2b0:	0020      	movs	r0, r4
 800e2b2:	f000 ff67 	bl	800f184 <_free_r>
 800e2b6:	e7b6      	b.n	800e226 <_reclaim_reent+0x1a>
 800e2b8:	680e      	ldr	r6, [r1, #0]
 800e2ba:	0020      	movs	r0, r4
 800e2bc:	f000 ff62 	bl	800f184 <_free_r>
 800e2c0:	0031      	movs	r1, r6
 800e2c2:	e7ee      	b.n	800e2a2 <_reclaim_reent+0x96>
 800e2c4:	200002b8 	.word	0x200002b8

0800e2c8 <_lseek_r>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	0004      	movs	r4, r0
 800e2cc:	0008      	movs	r0, r1
 800e2ce:	0011      	movs	r1, r2
 800e2d0:	001a      	movs	r2, r3
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	4d05      	ldr	r5, [pc, #20]	; (800e2ec <_lseek_r+0x24>)
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	f7f8 fdaa 	bl	8006e30 <_lseek>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d103      	bne.n	800e2e8 <_lseek_r+0x20>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d000      	beq.n	800e2e8 <_lseek_r+0x20>
 800e2e6:	6023      	str	r3, [r4, #0]
 800e2e8:	bd70      	pop	{r4, r5, r6, pc}
 800e2ea:	46c0      	nop			; (mov r8, r8)
 800e2ec:	20005a98 	.word	0x20005a98

0800e2f0 <_read_r>:
 800e2f0:	b570      	push	{r4, r5, r6, lr}
 800e2f2:	0004      	movs	r4, r0
 800e2f4:	0008      	movs	r0, r1
 800e2f6:	0011      	movs	r1, r2
 800e2f8:	001a      	movs	r2, r3
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	4d05      	ldr	r5, [pc, #20]	; (800e314 <_read_r+0x24>)
 800e2fe:	602b      	str	r3, [r5, #0]
 800e300:	f7f8 fd72 	bl	8006de8 <_read>
 800e304:	1c43      	adds	r3, r0, #1
 800e306:	d103      	bne.n	800e310 <_read_r+0x20>
 800e308:	682b      	ldr	r3, [r5, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d000      	beq.n	800e310 <_read_r+0x20>
 800e30e:	6023      	str	r3, [r4, #0]
 800e310:	bd70      	pop	{r4, r5, r6, pc}
 800e312:	46c0      	nop			; (mov r8, r8)
 800e314:	20005a98 	.word	0x20005a98

0800e318 <_sbrk_r>:
 800e318:	2300      	movs	r3, #0
 800e31a:	b570      	push	{r4, r5, r6, lr}
 800e31c:	4d06      	ldr	r5, [pc, #24]	; (800e338 <_sbrk_r+0x20>)
 800e31e:	0004      	movs	r4, r0
 800e320:	0008      	movs	r0, r1
 800e322:	602b      	str	r3, [r5, #0]
 800e324:	f7f8 fd86 	bl	8006e34 <_sbrk>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d103      	bne.n	800e334 <_sbrk_r+0x1c>
 800e32c:	682b      	ldr	r3, [r5, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d000      	beq.n	800e334 <_sbrk_r+0x1c>
 800e332:	6023      	str	r3, [r4, #0]
 800e334:	bd70      	pop	{r4, r5, r6, pc}
 800e336:	46c0      	nop			; (mov r8, r8)
 800e338:	20005a98 	.word	0x20005a98

0800e33c <_write_r>:
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	0004      	movs	r4, r0
 800e340:	0008      	movs	r0, r1
 800e342:	0011      	movs	r1, r2
 800e344:	001a      	movs	r2, r3
 800e346:	2300      	movs	r3, #0
 800e348:	4d05      	ldr	r5, [pc, #20]	; (800e360 <_write_r+0x24>)
 800e34a:	602b      	str	r3, [r5, #0]
 800e34c:	f7f8 fd59 	bl	8006e02 <_write>
 800e350:	1c43      	adds	r3, r0, #1
 800e352:	d103      	bne.n	800e35c <_write_r+0x20>
 800e354:	682b      	ldr	r3, [r5, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d000      	beq.n	800e35c <_write_r+0x20>
 800e35a:	6023      	str	r3, [r4, #0]
 800e35c:	bd70      	pop	{r4, r5, r6, pc}
 800e35e:	46c0      	nop			; (mov r8, r8)
 800e360:	20005a98 	.word	0x20005a98

0800e364 <__errno>:
 800e364:	4b01      	ldr	r3, [pc, #4]	; (800e36c <__errno+0x8>)
 800e366:	6818      	ldr	r0, [r3, #0]
 800e368:	4770      	bx	lr
 800e36a:	46c0      	nop			; (mov r8, r8)
 800e36c:	200002b8 	.word	0x200002b8

0800e370 <__libc_init_array>:
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	2600      	movs	r6, #0
 800e374:	4c0c      	ldr	r4, [pc, #48]	; (800e3a8 <__libc_init_array+0x38>)
 800e376:	4d0d      	ldr	r5, [pc, #52]	; (800e3ac <__libc_init_array+0x3c>)
 800e378:	1b64      	subs	r4, r4, r5
 800e37a:	10a4      	asrs	r4, r4, #2
 800e37c:	42a6      	cmp	r6, r4
 800e37e:	d109      	bne.n	800e394 <__libc_init_array+0x24>
 800e380:	2600      	movs	r6, #0
 800e382:	f003 fbef 	bl	8011b64 <_init>
 800e386:	4c0a      	ldr	r4, [pc, #40]	; (800e3b0 <__libc_init_array+0x40>)
 800e388:	4d0a      	ldr	r5, [pc, #40]	; (800e3b4 <__libc_init_array+0x44>)
 800e38a:	1b64      	subs	r4, r4, r5
 800e38c:	10a4      	asrs	r4, r4, #2
 800e38e:	42a6      	cmp	r6, r4
 800e390:	d105      	bne.n	800e39e <__libc_init_array+0x2e>
 800e392:	bd70      	pop	{r4, r5, r6, pc}
 800e394:	00b3      	lsls	r3, r6, #2
 800e396:	58eb      	ldr	r3, [r5, r3]
 800e398:	4798      	blx	r3
 800e39a:	3601      	adds	r6, #1
 800e39c:	e7ee      	b.n	800e37c <__libc_init_array+0xc>
 800e39e:	00b3      	lsls	r3, r6, #2
 800e3a0:	58eb      	ldr	r3, [r5, r3]
 800e3a2:	4798      	blx	r3
 800e3a4:	3601      	adds	r6, #1
 800e3a6:	e7f2      	b.n	800e38e <__libc_init_array+0x1e>
 800e3a8:	080133c0 	.word	0x080133c0
 800e3ac:	080133c0 	.word	0x080133c0
 800e3b0:	080133c4 	.word	0x080133c4
 800e3b4:	080133c0 	.word	0x080133c0

0800e3b8 <__retarget_lock_init_recursive>:
 800e3b8:	4770      	bx	lr

0800e3ba <__retarget_lock_acquire_recursive>:
 800e3ba:	4770      	bx	lr

0800e3bc <__retarget_lock_release_recursive>:
 800e3bc:	4770      	bx	lr

0800e3be <strcpy>:
 800e3be:	0003      	movs	r3, r0
 800e3c0:	780a      	ldrb	r2, [r1, #0]
 800e3c2:	3101      	adds	r1, #1
 800e3c4:	701a      	strb	r2, [r3, #0]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	2a00      	cmp	r2, #0
 800e3ca:	d1f9      	bne.n	800e3c0 <strcpy+0x2>
 800e3cc:	4770      	bx	lr

0800e3ce <memchr>:
 800e3ce:	b2c9      	uxtb	r1, r1
 800e3d0:	1882      	adds	r2, r0, r2
 800e3d2:	4290      	cmp	r0, r2
 800e3d4:	d101      	bne.n	800e3da <memchr+0xc>
 800e3d6:	2000      	movs	r0, #0
 800e3d8:	4770      	bx	lr
 800e3da:	7803      	ldrb	r3, [r0, #0]
 800e3dc:	428b      	cmp	r3, r1
 800e3de:	d0fb      	beq.n	800e3d8 <memchr+0xa>
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	e7f6      	b.n	800e3d2 <memchr+0x4>

0800e3e4 <memcpy>:
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	b510      	push	{r4, lr}
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d100      	bne.n	800e3ee <memcpy+0xa>
 800e3ec:	bd10      	pop	{r4, pc}
 800e3ee:	5ccc      	ldrb	r4, [r1, r3]
 800e3f0:	54c4      	strb	r4, [r0, r3]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	e7f8      	b.n	800e3e8 <memcpy+0x4>
	...

0800e3f8 <nan>:
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	4901      	ldr	r1, [pc, #4]	; (800e400 <nan+0x8>)
 800e3fc:	4770      	bx	lr
 800e3fe:	46c0      	nop			; (mov r8, r8)
 800e400:	7ff80000 	.word	0x7ff80000

0800e404 <nanf>:
 800e404:	4800      	ldr	r0, [pc, #0]	; (800e408 <nanf+0x4>)
 800e406:	4770      	bx	lr
 800e408:	7fc00000 	.word	0x7fc00000

0800e40c <__assert_func>:
 800e40c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e40e:	0014      	movs	r4, r2
 800e410:	001a      	movs	r2, r3
 800e412:	4b09      	ldr	r3, [pc, #36]	; (800e438 <__assert_func+0x2c>)
 800e414:	0005      	movs	r5, r0
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	000e      	movs	r6, r1
 800e41a:	68d8      	ldr	r0, [r3, #12]
 800e41c:	4b07      	ldr	r3, [pc, #28]	; (800e43c <__assert_func+0x30>)
 800e41e:	2c00      	cmp	r4, #0
 800e420:	d101      	bne.n	800e426 <__assert_func+0x1a>
 800e422:	4b07      	ldr	r3, [pc, #28]	; (800e440 <__assert_func+0x34>)
 800e424:	001c      	movs	r4, r3
 800e426:	4907      	ldr	r1, [pc, #28]	; (800e444 <__assert_func+0x38>)
 800e428:	9301      	str	r3, [sp, #4]
 800e42a:	9402      	str	r4, [sp, #8]
 800e42c:	002b      	movs	r3, r5
 800e42e:	9600      	str	r6, [sp, #0]
 800e430:	f002 f940 	bl	80106b4 <fiprintf>
 800e434:	f002 f961 	bl	80106fa <abort>
 800e438:	200002b8 	.word	0x200002b8
 800e43c:	08013113 	.word	0x08013113
 800e440:	0801314e 	.word	0x0801314e
 800e444:	08013120 	.word	0x08013120

0800e448 <quorem>:
 800e448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e44a:	6902      	ldr	r2, [r0, #16]
 800e44c:	690b      	ldr	r3, [r1, #16]
 800e44e:	b089      	sub	sp, #36	; 0x24
 800e450:	0007      	movs	r7, r0
 800e452:	9104      	str	r1, [sp, #16]
 800e454:	2000      	movs	r0, #0
 800e456:	429a      	cmp	r2, r3
 800e458:	db69      	blt.n	800e52e <quorem+0xe6>
 800e45a:	3b01      	subs	r3, #1
 800e45c:	009c      	lsls	r4, r3, #2
 800e45e:	9301      	str	r3, [sp, #4]
 800e460:	000b      	movs	r3, r1
 800e462:	3314      	adds	r3, #20
 800e464:	9306      	str	r3, [sp, #24]
 800e466:	191b      	adds	r3, r3, r4
 800e468:	9305      	str	r3, [sp, #20]
 800e46a:	003b      	movs	r3, r7
 800e46c:	3314      	adds	r3, #20
 800e46e:	9303      	str	r3, [sp, #12]
 800e470:	191c      	adds	r4, r3, r4
 800e472:	9b05      	ldr	r3, [sp, #20]
 800e474:	6826      	ldr	r6, [r4, #0]
 800e476:	681d      	ldr	r5, [r3, #0]
 800e478:	0030      	movs	r0, r6
 800e47a:	3501      	adds	r5, #1
 800e47c:	0029      	movs	r1, r5
 800e47e:	f7f1 fe5f 	bl	8000140 <__udivsi3>
 800e482:	9002      	str	r0, [sp, #8]
 800e484:	42ae      	cmp	r6, r5
 800e486:	d329      	bcc.n	800e4dc <quorem+0x94>
 800e488:	9b06      	ldr	r3, [sp, #24]
 800e48a:	2600      	movs	r6, #0
 800e48c:	469c      	mov	ip, r3
 800e48e:	9d03      	ldr	r5, [sp, #12]
 800e490:	9606      	str	r6, [sp, #24]
 800e492:	4662      	mov	r2, ip
 800e494:	ca08      	ldmia	r2!, {r3}
 800e496:	6828      	ldr	r0, [r5, #0]
 800e498:	4694      	mov	ip, r2
 800e49a:	9a02      	ldr	r2, [sp, #8]
 800e49c:	b299      	uxth	r1, r3
 800e49e:	4351      	muls	r1, r2
 800e4a0:	0c1b      	lsrs	r3, r3, #16
 800e4a2:	4353      	muls	r3, r2
 800e4a4:	1989      	adds	r1, r1, r6
 800e4a6:	0c0a      	lsrs	r2, r1, #16
 800e4a8:	189b      	adds	r3, r3, r2
 800e4aa:	9307      	str	r3, [sp, #28]
 800e4ac:	0c1e      	lsrs	r6, r3, #16
 800e4ae:	9b06      	ldr	r3, [sp, #24]
 800e4b0:	b282      	uxth	r2, r0
 800e4b2:	18d2      	adds	r2, r2, r3
 800e4b4:	466b      	mov	r3, sp
 800e4b6:	b289      	uxth	r1, r1
 800e4b8:	8b9b      	ldrh	r3, [r3, #28]
 800e4ba:	1a52      	subs	r2, r2, r1
 800e4bc:	0c01      	lsrs	r1, r0, #16
 800e4be:	1ac9      	subs	r1, r1, r3
 800e4c0:	1413      	asrs	r3, r2, #16
 800e4c2:	18cb      	adds	r3, r1, r3
 800e4c4:	1419      	asrs	r1, r3, #16
 800e4c6:	b292      	uxth	r2, r2
 800e4c8:	041b      	lsls	r3, r3, #16
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	c508      	stmia	r5!, {r3}
 800e4ce:	9b05      	ldr	r3, [sp, #20]
 800e4d0:	9106      	str	r1, [sp, #24]
 800e4d2:	4563      	cmp	r3, ip
 800e4d4:	d2dd      	bcs.n	800e492 <quorem+0x4a>
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d030      	beq.n	800e53e <quorem+0xf6>
 800e4dc:	0038      	movs	r0, r7
 800e4de:	9904      	ldr	r1, [sp, #16]
 800e4e0:	f001 fcda 	bl	800fe98 <__mcmp>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	db21      	blt.n	800e52c <quorem+0xe4>
 800e4e8:	0038      	movs	r0, r7
 800e4ea:	2600      	movs	r6, #0
 800e4ec:	9b02      	ldr	r3, [sp, #8]
 800e4ee:	9c04      	ldr	r4, [sp, #16]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	9302      	str	r3, [sp, #8]
 800e4f4:	3014      	adds	r0, #20
 800e4f6:	3414      	adds	r4, #20
 800e4f8:	6803      	ldr	r3, [r0, #0]
 800e4fa:	cc02      	ldmia	r4!, {r1}
 800e4fc:	b29d      	uxth	r5, r3
 800e4fe:	19ad      	adds	r5, r5, r6
 800e500:	b28a      	uxth	r2, r1
 800e502:	1aaa      	subs	r2, r5, r2
 800e504:	0c09      	lsrs	r1, r1, #16
 800e506:	0c1b      	lsrs	r3, r3, #16
 800e508:	1a5b      	subs	r3, r3, r1
 800e50a:	1411      	asrs	r1, r2, #16
 800e50c:	185b      	adds	r3, r3, r1
 800e50e:	141e      	asrs	r6, r3, #16
 800e510:	b292      	uxth	r2, r2
 800e512:	041b      	lsls	r3, r3, #16
 800e514:	4313      	orrs	r3, r2
 800e516:	c008      	stmia	r0!, {r3}
 800e518:	9b05      	ldr	r3, [sp, #20]
 800e51a:	42a3      	cmp	r3, r4
 800e51c:	d2ec      	bcs.n	800e4f8 <quorem+0xb0>
 800e51e:	9b01      	ldr	r3, [sp, #4]
 800e520:	9a03      	ldr	r2, [sp, #12]
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	18d3      	adds	r3, r2, r3
 800e526:	681a      	ldr	r2, [r3, #0]
 800e528:	2a00      	cmp	r2, #0
 800e52a:	d015      	beq.n	800e558 <quorem+0x110>
 800e52c:	9802      	ldr	r0, [sp, #8]
 800e52e:	b009      	add	sp, #36	; 0x24
 800e530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d106      	bne.n	800e546 <quorem+0xfe>
 800e538:	9b01      	ldr	r3, [sp, #4]
 800e53a:	3b01      	subs	r3, #1
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	9b03      	ldr	r3, [sp, #12]
 800e540:	3c04      	subs	r4, #4
 800e542:	42a3      	cmp	r3, r4
 800e544:	d3f5      	bcc.n	800e532 <quorem+0xea>
 800e546:	9b01      	ldr	r3, [sp, #4]
 800e548:	613b      	str	r3, [r7, #16]
 800e54a:	e7c7      	b.n	800e4dc <quorem+0x94>
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	2a00      	cmp	r2, #0
 800e550:	d106      	bne.n	800e560 <quorem+0x118>
 800e552:	9a01      	ldr	r2, [sp, #4]
 800e554:	3a01      	subs	r2, #1
 800e556:	9201      	str	r2, [sp, #4]
 800e558:	9a03      	ldr	r2, [sp, #12]
 800e55a:	3b04      	subs	r3, #4
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d3f5      	bcc.n	800e54c <quorem+0x104>
 800e560:	9b01      	ldr	r3, [sp, #4]
 800e562:	613b      	str	r3, [r7, #16]
 800e564:	e7e2      	b.n	800e52c <quorem+0xe4>
	...

0800e568 <_dtoa_r>:
 800e568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56a:	0014      	movs	r4, r2
 800e56c:	001d      	movs	r5, r3
 800e56e:	69c6      	ldr	r6, [r0, #28]
 800e570:	b09d      	sub	sp, #116	; 0x74
 800e572:	9408      	str	r4, [sp, #32]
 800e574:	9509      	str	r5, [sp, #36]	; 0x24
 800e576:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800e578:	9004      	str	r0, [sp, #16]
 800e57a:	2e00      	cmp	r6, #0
 800e57c:	d10f      	bne.n	800e59e <_dtoa_r+0x36>
 800e57e:	2010      	movs	r0, #16
 800e580:	f7fd fdf2 	bl	800c168 <malloc>
 800e584:	9b04      	ldr	r3, [sp, #16]
 800e586:	1e02      	subs	r2, r0, #0
 800e588:	61d8      	str	r0, [r3, #28]
 800e58a:	d104      	bne.n	800e596 <_dtoa_r+0x2e>
 800e58c:	21ef      	movs	r1, #239	; 0xef
 800e58e:	4bc6      	ldr	r3, [pc, #792]	; (800e8a8 <_dtoa_r+0x340>)
 800e590:	48c6      	ldr	r0, [pc, #792]	; (800e8ac <_dtoa_r+0x344>)
 800e592:	f7ff ff3b 	bl	800e40c <__assert_func>
 800e596:	6046      	str	r6, [r0, #4]
 800e598:	6086      	str	r6, [r0, #8]
 800e59a:	6006      	str	r6, [r0, #0]
 800e59c:	60c6      	str	r6, [r0, #12]
 800e59e:	9b04      	ldr	r3, [sp, #16]
 800e5a0:	69db      	ldr	r3, [r3, #28]
 800e5a2:	6819      	ldr	r1, [r3, #0]
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	d00b      	beq.n	800e5c0 <_dtoa_r+0x58>
 800e5a8:	685a      	ldr	r2, [r3, #4]
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	4093      	lsls	r3, r2
 800e5ae:	604a      	str	r2, [r1, #4]
 800e5b0:	608b      	str	r3, [r1, #8]
 800e5b2:	9804      	ldr	r0, [sp, #16]
 800e5b4:	f001 f9e2 	bl	800f97c <_Bfree>
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	9b04      	ldr	r3, [sp, #16]
 800e5bc:	69db      	ldr	r3, [r3, #28]
 800e5be:	601a      	str	r2, [r3, #0]
 800e5c0:	2d00      	cmp	r5, #0
 800e5c2:	da1e      	bge.n	800e602 <_dtoa_r+0x9a>
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	603b      	str	r3, [r7, #0]
 800e5c8:	006b      	lsls	r3, r5, #1
 800e5ca:	085b      	lsrs	r3, r3, #1
 800e5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e5d0:	4bb7      	ldr	r3, [pc, #732]	; (800e8b0 <_dtoa_r+0x348>)
 800e5d2:	4ab7      	ldr	r2, [pc, #732]	; (800e8b0 <_dtoa_r+0x348>)
 800e5d4:	403b      	ands	r3, r7
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d116      	bne.n	800e608 <_dtoa_r+0xa0>
 800e5da:	4bb6      	ldr	r3, [pc, #728]	; (800e8b4 <_dtoa_r+0x34c>)
 800e5dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e5de:	6013      	str	r3, [r2, #0]
 800e5e0:	033b      	lsls	r3, r7, #12
 800e5e2:	0b1b      	lsrs	r3, r3, #12
 800e5e4:	4323      	orrs	r3, r4
 800e5e6:	d101      	bne.n	800e5ec <_dtoa_r+0x84>
 800e5e8:	f000 fdb5 	bl	800f156 <_dtoa_r+0xbee>
 800e5ec:	4bb2      	ldr	r3, [pc, #712]	; (800e8b8 <_dtoa_r+0x350>)
 800e5ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e5f0:	9306      	str	r3, [sp, #24]
 800e5f2:	2a00      	cmp	r2, #0
 800e5f4:	d002      	beq.n	800e5fc <_dtoa_r+0x94>
 800e5f6:	4bb1      	ldr	r3, [pc, #708]	; (800e8bc <_dtoa_r+0x354>)
 800e5f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e5fa:	6013      	str	r3, [r2, #0]
 800e5fc:	9806      	ldr	r0, [sp, #24]
 800e5fe:	b01d      	add	sp, #116	; 0x74
 800e600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e602:	2300      	movs	r3, #0
 800e604:	603b      	str	r3, [r7, #0]
 800e606:	e7e2      	b.n	800e5ce <_dtoa_r+0x66>
 800e608:	9a08      	ldr	r2, [sp, #32]
 800e60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60c:	9210      	str	r2, [sp, #64]	; 0x40
 800e60e:	9311      	str	r3, [sp, #68]	; 0x44
 800e610:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e612:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e614:	2200      	movs	r2, #0
 800e616:	2300      	movs	r3, #0
 800e618:	f7f1 ff18 	bl	800044c <__aeabi_dcmpeq>
 800e61c:	1e06      	subs	r6, r0, #0
 800e61e:	d009      	beq.n	800e634 <_dtoa_r+0xcc>
 800e620:	2301      	movs	r3, #1
 800e622:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e624:	6013      	str	r3, [r2, #0]
 800e626:	4ba6      	ldr	r3, [pc, #664]	; (800e8c0 <_dtoa_r+0x358>)
 800e628:	9306      	str	r3, [sp, #24]
 800e62a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d0e5      	beq.n	800e5fc <_dtoa_r+0x94>
 800e630:	4ba4      	ldr	r3, [pc, #656]	; (800e8c4 <_dtoa_r+0x35c>)
 800e632:	e7e1      	b.n	800e5f8 <_dtoa_r+0x90>
 800e634:	ab1a      	add	r3, sp, #104	; 0x68
 800e636:	9301      	str	r3, [sp, #4]
 800e638:	ab1b      	add	r3, sp, #108	; 0x6c
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	9804      	ldr	r0, [sp, #16]
 800e63e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e640:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e642:	f001 fd45 	bl	80100d0 <__d2b>
 800e646:	007a      	lsls	r2, r7, #1
 800e648:	9005      	str	r0, [sp, #20]
 800e64a:	0d52      	lsrs	r2, r2, #21
 800e64c:	d100      	bne.n	800e650 <_dtoa_r+0xe8>
 800e64e:	e07b      	b.n	800e748 <_dtoa_r+0x1e0>
 800e650:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e652:	9617      	str	r6, [sp, #92]	; 0x5c
 800e654:	0319      	lsls	r1, r3, #12
 800e656:	4b9c      	ldr	r3, [pc, #624]	; (800e8c8 <_dtoa_r+0x360>)
 800e658:	0b09      	lsrs	r1, r1, #12
 800e65a:	430b      	orrs	r3, r1
 800e65c:	499b      	ldr	r1, [pc, #620]	; (800e8cc <_dtoa_r+0x364>)
 800e65e:	1857      	adds	r7, r2, r1
 800e660:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e662:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e664:	0019      	movs	r1, r3
 800e666:	2200      	movs	r2, #0
 800e668:	4b99      	ldr	r3, [pc, #612]	; (800e8d0 <_dtoa_r+0x368>)
 800e66a:	f7f4 f8f5 	bl	8002858 <__aeabi_dsub>
 800e66e:	4a99      	ldr	r2, [pc, #612]	; (800e8d4 <_dtoa_r+0x36c>)
 800e670:	4b99      	ldr	r3, [pc, #612]	; (800e8d8 <_dtoa_r+0x370>)
 800e672:	f7f3 fe2f 	bl	80022d4 <__aeabi_dmul>
 800e676:	4a99      	ldr	r2, [pc, #612]	; (800e8dc <_dtoa_r+0x374>)
 800e678:	4b99      	ldr	r3, [pc, #612]	; (800e8e0 <_dtoa_r+0x378>)
 800e67a:	f7f2 fed1 	bl	8001420 <__aeabi_dadd>
 800e67e:	0004      	movs	r4, r0
 800e680:	0038      	movs	r0, r7
 800e682:	000d      	movs	r5, r1
 800e684:	f7f4 fcbe 	bl	8003004 <__aeabi_i2d>
 800e688:	4a96      	ldr	r2, [pc, #600]	; (800e8e4 <_dtoa_r+0x37c>)
 800e68a:	4b97      	ldr	r3, [pc, #604]	; (800e8e8 <_dtoa_r+0x380>)
 800e68c:	f7f3 fe22 	bl	80022d4 <__aeabi_dmul>
 800e690:	0002      	movs	r2, r0
 800e692:	000b      	movs	r3, r1
 800e694:	0020      	movs	r0, r4
 800e696:	0029      	movs	r1, r5
 800e698:	f7f2 fec2 	bl	8001420 <__aeabi_dadd>
 800e69c:	0004      	movs	r4, r0
 800e69e:	000d      	movs	r5, r1
 800e6a0:	f7f4 fc7a 	bl	8002f98 <__aeabi_d2iz>
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	9003      	str	r0, [sp, #12]
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	0020      	movs	r0, r4
 800e6ac:	0029      	movs	r1, r5
 800e6ae:	f7f1 fed3 	bl	8000458 <__aeabi_dcmplt>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	d00b      	beq.n	800e6ce <_dtoa_r+0x166>
 800e6b6:	9803      	ldr	r0, [sp, #12]
 800e6b8:	f7f4 fca4 	bl	8003004 <__aeabi_i2d>
 800e6bc:	002b      	movs	r3, r5
 800e6be:	0022      	movs	r2, r4
 800e6c0:	f7f1 fec4 	bl	800044c <__aeabi_dcmpeq>
 800e6c4:	4243      	negs	r3, r0
 800e6c6:	4158      	adcs	r0, r3
 800e6c8:	9b03      	ldr	r3, [sp, #12]
 800e6ca:	1a1b      	subs	r3, r3, r0
 800e6cc:	9303      	str	r3, [sp, #12]
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	9316      	str	r3, [sp, #88]	; 0x58
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	2b16      	cmp	r3, #22
 800e6d6:	d810      	bhi.n	800e6fa <_dtoa_r+0x192>
 800e6d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e6da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e6dc:	9a03      	ldr	r2, [sp, #12]
 800e6de:	4b83      	ldr	r3, [pc, #524]	; (800e8ec <_dtoa_r+0x384>)
 800e6e0:	00d2      	lsls	r2, r2, #3
 800e6e2:	189b      	adds	r3, r3, r2
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	f7f1 feb6 	bl	8000458 <__aeabi_dcmplt>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d047      	beq.n	800e780 <_dtoa_r+0x218>
 800e6f0:	9b03      	ldr	r3, [sp, #12]
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	9303      	str	r3, [sp, #12]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	9316      	str	r3, [sp, #88]	; 0x58
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e6fe:	920a      	str	r2, [sp, #40]	; 0x28
 800e700:	1bdb      	subs	r3, r3, r7
 800e702:	1e5a      	subs	r2, r3, #1
 800e704:	d53e      	bpl.n	800e784 <_dtoa_r+0x21c>
 800e706:	2201      	movs	r2, #1
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	930a      	str	r3, [sp, #40]	; 0x28
 800e70c:	2300      	movs	r3, #0
 800e70e:	930c      	str	r3, [sp, #48]	; 0x30
 800e710:	9b03      	ldr	r3, [sp, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	db38      	blt.n	800e788 <_dtoa_r+0x220>
 800e716:	9a03      	ldr	r2, [sp, #12]
 800e718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e71a:	4694      	mov	ip, r2
 800e71c:	4463      	add	r3, ip
 800e71e:	930c      	str	r3, [sp, #48]	; 0x30
 800e720:	2300      	movs	r3, #0
 800e722:	9213      	str	r2, [sp, #76]	; 0x4c
 800e724:	930d      	str	r3, [sp, #52]	; 0x34
 800e726:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e728:	2401      	movs	r4, #1
 800e72a:	2b09      	cmp	r3, #9
 800e72c:	d867      	bhi.n	800e7fe <_dtoa_r+0x296>
 800e72e:	2b05      	cmp	r3, #5
 800e730:	dd02      	ble.n	800e738 <_dtoa_r+0x1d0>
 800e732:	2400      	movs	r4, #0
 800e734:	3b04      	subs	r3, #4
 800e736:	9322      	str	r3, [sp, #136]	; 0x88
 800e738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e73a:	1e98      	subs	r0, r3, #2
 800e73c:	2803      	cmp	r0, #3
 800e73e:	d867      	bhi.n	800e810 <_dtoa_r+0x2a8>
 800e740:	f7f1 fcea 	bl	8000118 <__gnu_thumb1_case_uqi>
 800e744:	5b383a2b 	.word	0x5b383a2b
 800e748:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e74a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800e74c:	18f6      	adds	r6, r6, r3
 800e74e:	4b68      	ldr	r3, [pc, #416]	; (800e8f0 <_dtoa_r+0x388>)
 800e750:	18f2      	adds	r2, r6, r3
 800e752:	2a20      	cmp	r2, #32
 800e754:	dd0f      	ble.n	800e776 <_dtoa_r+0x20e>
 800e756:	2340      	movs	r3, #64	; 0x40
 800e758:	1a9b      	subs	r3, r3, r2
 800e75a:	409f      	lsls	r7, r3
 800e75c:	4b65      	ldr	r3, [pc, #404]	; (800e8f4 <_dtoa_r+0x38c>)
 800e75e:	0038      	movs	r0, r7
 800e760:	18f3      	adds	r3, r6, r3
 800e762:	40dc      	lsrs	r4, r3
 800e764:	4320      	orrs	r0, r4
 800e766:	f7f4 fc7d 	bl	8003064 <__aeabi_ui2d>
 800e76a:	2201      	movs	r2, #1
 800e76c:	4b62      	ldr	r3, [pc, #392]	; (800e8f8 <_dtoa_r+0x390>)
 800e76e:	1e77      	subs	r7, r6, #1
 800e770:	18cb      	adds	r3, r1, r3
 800e772:	9217      	str	r2, [sp, #92]	; 0x5c
 800e774:	e776      	b.n	800e664 <_dtoa_r+0xfc>
 800e776:	2320      	movs	r3, #32
 800e778:	0020      	movs	r0, r4
 800e77a:	1a9b      	subs	r3, r3, r2
 800e77c:	4098      	lsls	r0, r3
 800e77e:	e7f2      	b.n	800e766 <_dtoa_r+0x1fe>
 800e780:	9016      	str	r0, [sp, #88]	; 0x58
 800e782:	e7ba      	b.n	800e6fa <_dtoa_r+0x192>
 800e784:	920c      	str	r2, [sp, #48]	; 0x30
 800e786:	e7c3      	b.n	800e710 <_dtoa_r+0x1a8>
 800e788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e78a:	9a03      	ldr	r2, [sp, #12]
 800e78c:	1a9b      	subs	r3, r3, r2
 800e78e:	930a      	str	r3, [sp, #40]	; 0x28
 800e790:	4253      	negs	r3, r2
 800e792:	930d      	str	r3, [sp, #52]	; 0x34
 800e794:	2300      	movs	r3, #0
 800e796:	9313      	str	r3, [sp, #76]	; 0x4c
 800e798:	e7c5      	b.n	800e726 <_dtoa_r+0x1be>
 800e79a:	2300      	movs	r3, #0
 800e79c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e79e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e7a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7a2:	9307      	str	r3, [sp, #28]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	dc13      	bgt.n	800e7d0 <_dtoa_r+0x268>
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	001a      	movs	r2, r3
 800e7ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7ae:	9307      	str	r3, [sp, #28]
 800e7b0:	9223      	str	r2, [sp, #140]	; 0x8c
 800e7b2:	e00d      	b.n	800e7d0 <_dtoa_r+0x268>
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	e7f1      	b.n	800e79c <_dtoa_r+0x234>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e7bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7be:	4694      	mov	ip, r2
 800e7c0:	9b03      	ldr	r3, [sp, #12]
 800e7c2:	4463      	add	r3, ip
 800e7c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	9307      	str	r3, [sp, #28]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	dc00      	bgt.n	800e7d0 <_dtoa_r+0x268>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	9a04      	ldr	r2, [sp, #16]
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	69d0      	ldr	r0, [r2, #28]
 800e7d6:	2204      	movs	r2, #4
 800e7d8:	0015      	movs	r5, r2
 800e7da:	3514      	adds	r5, #20
 800e7dc:	429d      	cmp	r5, r3
 800e7de:	d91b      	bls.n	800e818 <_dtoa_r+0x2b0>
 800e7e0:	6041      	str	r1, [r0, #4]
 800e7e2:	9804      	ldr	r0, [sp, #16]
 800e7e4:	f001 f886 	bl	800f8f4 <_Balloc>
 800e7e8:	9006      	str	r0, [sp, #24]
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d117      	bne.n	800e81e <_dtoa_r+0x2b6>
 800e7ee:	21b0      	movs	r1, #176	; 0xb0
 800e7f0:	4b42      	ldr	r3, [pc, #264]	; (800e8fc <_dtoa_r+0x394>)
 800e7f2:	482e      	ldr	r0, [pc, #184]	; (800e8ac <_dtoa_r+0x344>)
 800e7f4:	9a06      	ldr	r2, [sp, #24]
 800e7f6:	31ff      	adds	r1, #255	; 0xff
 800e7f8:	e6cb      	b.n	800e592 <_dtoa_r+0x2a>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e7dd      	b.n	800e7ba <_dtoa_r+0x252>
 800e7fe:	2300      	movs	r3, #0
 800e800:	940f      	str	r4, [sp, #60]	; 0x3c
 800e802:	9322      	str	r3, [sp, #136]	; 0x88
 800e804:	3b01      	subs	r3, #1
 800e806:	930b      	str	r3, [sp, #44]	; 0x2c
 800e808:	9307      	str	r3, [sp, #28]
 800e80a:	2200      	movs	r2, #0
 800e80c:	3313      	adds	r3, #19
 800e80e:	e7cf      	b.n	800e7b0 <_dtoa_r+0x248>
 800e810:	2301      	movs	r3, #1
 800e812:	930f      	str	r3, [sp, #60]	; 0x3c
 800e814:	3b02      	subs	r3, #2
 800e816:	e7f6      	b.n	800e806 <_dtoa_r+0x29e>
 800e818:	3101      	adds	r1, #1
 800e81a:	0052      	lsls	r2, r2, #1
 800e81c:	e7dc      	b.n	800e7d8 <_dtoa_r+0x270>
 800e81e:	9b04      	ldr	r3, [sp, #16]
 800e820:	9a06      	ldr	r2, [sp, #24]
 800e822:	69db      	ldr	r3, [r3, #28]
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	9b07      	ldr	r3, [sp, #28]
 800e828:	2b0e      	cmp	r3, #14
 800e82a:	d900      	bls.n	800e82e <_dtoa_r+0x2c6>
 800e82c:	e0e5      	b.n	800e9fa <_dtoa_r+0x492>
 800e82e:	2c00      	cmp	r4, #0
 800e830:	d100      	bne.n	800e834 <_dtoa_r+0x2cc>
 800e832:	e0e2      	b.n	800e9fa <_dtoa_r+0x492>
 800e834:	9b03      	ldr	r3, [sp, #12]
 800e836:	2b00      	cmp	r3, #0
 800e838:	dd64      	ble.n	800e904 <_dtoa_r+0x39c>
 800e83a:	210f      	movs	r1, #15
 800e83c:	9a03      	ldr	r2, [sp, #12]
 800e83e:	4b2b      	ldr	r3, [pc, #172]	; (800e8ec <_dtoa_r+0x384>)
 800e840:	400a      	ands	r2, r1
 800e842:	00d2      	lsls	r2, r2, #3
 800e844:	189b      	adds	r3, r3, r2
 800e846:	681e      	ldr	r6, [r3, #0]
 800e848:	685f      	ldr	r7, [r3, #4]
 800e84a:	9b03      	ldr	r3, [sp, #12]
 800e84c:	2402      	movs	r4, #2
 800e84e:	111d      	asrs	r5, r3, #4
 800e850:	05db      	lsls	r3, r3, #23
 800e852:	d50a      	bpl.n	800e86a <_dtoa_r+0x302>
 800e854:	4b2a      	ldr	r3, [pc, #168]	; (800e900 <_dtoa_r+0x398>)
 800e856:	400d      	ands	r5, r1
 800e858:	6a1a      	ldr	r2, [r3, #32]
 800e85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e85e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e860:	f7f3 f93e 	bl	8001ae0 <__aeabi_ddiv>
 800e864:	9008      	str	r0, [sp, #32]
 800e866:	9109      	str	r1, [sp, #36]	; 0x24
 800e868:	3401      	adds	r4, #1
 800e86a:	4b25      	ldr	r3, [pc, #148]	; (800e900 <_dtoa_r+0x398>)
 800e86c:	930e      	str	r3, [sp, #56]	; 0x38
 800e86e:	2d00      	cmp	r5, #0
 800e870:	d108      	bne.n	800e884 <_dtoa_r+0x31c>
 800e872:	9808      	ldr	r0, [sp, #32]
 800e874:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e876:	0032      	movs	r2, r6
 800e878:	003b      	movs	r3, r7
 800e87a:	f7f3 f931 	bl	8001ae0 <__aeabi_ddiv>
 800e87e:	9008      	str	r0, [sp, #32]
 800e880:	9109      	str	r1, [sp, #36]	; 0x24
 800e882:	e05a      	b.n	800e93a <_dtoa_r+0x3d2>
 800e884:	2301      	movs	r3, #1
 800e886:	421d      	tst	r5, r3
 800e888:	d009      	beq.n	800e89e <_dtoa_r+0x336>
 800e88a:	18e4      	adds	r4, r4, r3
 800e88c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e88e:	0030      	movs	r0, r6
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	0039      	movs	r1, r7
 800e896:	f7f3 fd1d 	bl	80022d4 <__aeabi_dmul>
 800e89a:	0006      	movs	r6, r0
 800e89c:	000f      	movs	r7, r1
 800e89e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e8a0:	106d      	asrs	r5, r5, #1
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	e7e2      	b.n	800e86c <_dtoa_r+0x304>
 800e8a6:	46c0      	nop			; (mov r8, r8)
 800e8a8:	0801309a 	.word	0x0801309a
 800e8ac:	0801315c 	.word	0x0801315c
 800e8b0:	7ff00000 	.word	0x7ff00000
 800e8b4:	0000270f 	.word	0x0000270f
 800e8b8:	08013158 	.word	0x08013158
 800e8bc:	0801315b 	.word	0x0801315b
 800e8c0:	08013071 	.word	0x08013071
 800e8c4:	08013072 	.word	0x08013072
 800e8c8:	3ff00000 	.word	0x3ff00000
 800e8cc:	fffffc01 	.word	0xfffffc01
 800e8d0:	3ff80000 	.word	0x3ff80000
 800e8d4:	636f4361 	.word	0x636f4361
 800e8d8:	3fd287a7 	.word	0x3fd287a7
 800e8dc:	8b60c8b3 	.word	0x8b60c8b3
 800e8e0:	3fc68a28 	.word	0x3fc68a28
 800e8e4:	509f79fb 	.word	0x509f79fb
 800e8e8:	3fd34413 	.word	0x3fd34413
 800e8ec:	080132a8 	.word	0x080132a8
 800e8f0:	00000432 	.word	0x00000432
 800e8f4:	00000412 	.word	0x00000412
 800e8f8:	fe100000 	.word	0xfe100000
 800e8fc:	080131b4 	.word	0x080131b4
 800e900:	08013280 	.word	0x08013280
 800e904:	9b03      	ldr	r3, [sp, #12]
 800e906:	2402      	movs	r4, #2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d016      	beq.n	800e93a <_dtoa_r+0x3d2>
 800e90c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e90e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e910:	220f      	movs	r2, #15
 800e912:	425d      	negs	r5, r3
 800e914:	402a      	ands	r2, r5
 800e916:	4bdd      	ldr	r3, [pc, #884]	; (800ec8c <_dtoa_r+0x724>)
 800e918:	00d2      	lsls	r2, r2, #3
 800e91a:	189b      	adds	r3, r3, r2
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	685b      	ldr	r3, [r3, #4]
 800e920:	f7f3 fcd8 	bl	80022d4 <__aeabi_dmul>
 800e924:	2701      	movs	r7, #1
 800e926:	2300      	movs	r3, #0
 800e928:	9008      	str	r0, [sp, #32]
 800e92a:	9109      	str	r1, [sp, #36]	; 0x24
 800e92c:	4ed8      	ldr	r6, [pc, #864]	; (800ec90 <_dtoa_r+0x728>)
 800e92e:	112d      	asrs	r5, r5, #4
 800e930:	2d00      	cmp	r5, #0
 800e932:	d000      	beq.n	800e936 <_dtoa_r+0x3ce>
 800e934:	e091      	b.n	800ea5a <_dtoa_r+0x4f2>
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1a1      	bne.n	800e87e <_dtoa_r+0x316>
 800e93a:	9e08      	ldr	r6, [sp, #32]
 800e93c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e93e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e940:	2b00      	cmp	r3, #0
 800e942:	d100      	bne.n	800e946 <_dtoa_r+0x3de>
 800e944:	e094      	b.n	800ea70 <_dtoa_r+0x508>
 800e946:	2200      	movs	r2, #0
 800e948:	0030      	movs	r0, r6
 800e94a:	0039      	movs	r1, r7
 800e94c:	4bd1      	ldr	r3, [pc, #836]	; (800ec94 <_dtoa_r+0x72c>)
 800e94e:	f7f1 fd83 	bl	8000458 <__aeabi_dcmplt>
 800e952:	2800      	cmp	r0, #0
 800e954:	d100      	bne.n	800e958 <_dtoa_r+0x3f0>
 800e956:	e08b      	b.n	800ea70 <_dtoa_r+0x508>
 800e958:	9b07      	ldr	r3, [sp, #28]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d100      	bne.n	800e960 <_dtoa_r+0x3f8>
 800e95e:	e087      	b.n	800ea70 <_dtoa_r+0x508>
 800e960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e962:	2b00      	cmp	r3, #0
 800e964:	dd45      	ble.n	800e9f2 <_dtoa_r+0x48a>
 800e966:	9b03      	ldr	r3, [sp, #12]
 800e968:	2200      	movs	r2, #0
 800e96a:	3b01      	subs	r3, #1
 800e96c:	930e      	str	r3, [sp, #56]	; 0x38
 800e96e:	0030      	movs	r0, r6
 800e970:	4bc9      	ldr	r3, [pc, #804]	; (800ec98 <_dtoa_r+0x730>)
 800e972:	0039      	movs	r1, r7
 800e974:	f7f3 fcae 	bl	80022d4 <__aeabi_dmul>
 800e978:	9008      	str	r0, [sp, #32]
 800e97a:	9109      	str	r1, [sp, #36]	; 0x24
 800e97c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e97e:	3401      	adds	r4, #1
 800e980:	0020      	movs	r0, r4
 800e982:	9e08      	ldr	r6, [sp, #32]
 800e984:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e986:	9312      	str	r3, [sp, #72]	; 0x48
 800e988:	f7f4 fb3c 	bl	8003004 <__aeabi_i2d>
 800e98c:	0032      	movs	r2, r6
 800e98e:	003b      	movs	r3, r7
 800e990:	f7f3 fca0 	bl	80022d4 <__aeabi_dmul>
 800e994:	2200      	movs	r2, #0
 800e996:	4bc1      	ldr	r3, [pc, #772]	; (800ec9c <_dtoa_r+0x734>)
 800e998:	f7f2 fd42 	bl	8001420 <__aeabi_dadd>
 800e99c:	4ac0      	ldr	r2, [pc, #768]	; (800eca0 <_dtoa_r+0x738>)
 800e99e:	9014      	str	r0, [sp, #80]	; 0x50
 800e9a0:	9115      	str	r1, [sp, #84]	; 0x54
 800e9a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9a4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800e9a6:	4694      	mov	ip, r2
 800e9a8:	9308      	str	r3, [sp, #32]
 800e9aa:	9409      	str	r4, [sp, #36]	; 0x24
 800e9ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e9ae:	4463      	add	r3, ip
 800e9b0:	9318      	str	r3, [sp, #96]	; 0x60
 800e9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e9b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d15e      	bne.n	800ea78 <_dtoa_r+0x510>
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	4bb9      	ldr	r3, [pc, #740]	; (800eca4 <_dtoa_r+0x73c>)
 800e9be:	0030      	movs	r0, r6
 800e9c0:	0039      	movs	r1, r7
 800e9c2:	f7f3 ff49 	bl	8002858 <__aeabi_dsub>
 800e9c6:	9a08      	ldr	r2, [sp, #32]
 800e9c8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e9ca:	0004      	movs	r4, r0
 800e9cc:	000d      	movs	r5, r1
 800e9ce:	f7f1 fd57 	bl	8000480 <__aeabi_dcmpgt>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d000      	beq.n	800e9d8 <_dtoa_r+0x470>
 800e9d6:	e2b3      	b.n	800ef40 <_dtoa_r+0x9d8>
 800e9d8:	48b3      	ldr	r0, [pc, #716]	; (800eca8 <_dtoa_r+0x740>)
 800e9da:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e9dc:	4684      	mov	ip, r0
 800e9de:	4461      	add	r1, ip
 800e9e0:	000b      	movs	r3, r1
 800e9e2:	0020      	movs	r0, r4
 800e9e4:	0029      	movs	r1, r5
 800e9e6:	9a08      	ldr	r2, [sp, #32]
 800e9e8:	f7f1 fd36 	bl	8000458 <__aeabi_dcmplt>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d000      	beq.n	800e9f2 <_dtoa_r+0x48a>
 800e9f0:	e2a3      	b.n	800ef3a <_dtoa_r+0x9d2>
 800e9f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9f4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e9f6:	9308      	str	r3, [sp, #32]
 800e9f8:	9409      	str	r4, [sp, #36]	; 0x24
 800e9fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	da00      	bge.n	800ea02 <_dtoa_r+0x49a>
 800ea00:	e179      	b.n	800ecf6 <_dtoa_r+0x78e>
 800ea02:	9a03      	ldr	r2, [sp, #12]
 800ea04:	2a0e      	cmp	r2, #14
 800ea06:	dd00      	ble.n	800ea0a <_dtoa_r+0x4a2>
 800ea08:	e175      	b.n	800ecf6 <_dtoa_r+0x78e>
 800ea0a:	4ba0      	ldr	r3, [pc, #640]	; (800ec8c <_dtoa_r+0x724>)
 800ea0c:	00d2      	lsls	r2, r2, #3
 800ea0e:	189b      	adds	r3, r3, r2
 800ea10:	681e      	ldr	r6, [r3, #0]
 800ea12:	685f      	ldr	r7, [r3, #4]
 800ea14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	db00      	blt.n	800ea1c <_dtoa_r+0x4b4>
 800ea1a:	e0e5      	b.n	800ebe8 <_dtoa_r+0x680>
 800ea1c:	9b07      	ldr	r3, [sp, #28]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	dd00      	ble.n	800ea24 <_dtoa_r+0x4bc>
 800ea22:	e0e1      	b.n	800ebe8 <_dtoa_r+0x680>
 800ea24:	d000      	beq.n	800ea28 <_dtoa_r+0x4c0>
 800ea26:	e288      	b.n	800ef3a <_dtoa_r+0x9d2>
 800ea28:	2200      	movs	r2, #0
 800ea2a:	0030      	movs	r0, r6
 800ea2c:	0039      	movs	r1, r7
 800ea2e:	4b9d      	ldr	r3, [pc, #628]	; (800eca4 <_dtoa_r+0x73c>)
 800ea30:	f7f3 fc50 	bl	80022d4 <__aeabi_dmul>
 800ea34:	9a08      	ldr	r2, [sp, #32]
 800ea36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea38:	f7f1 fd2c 	bl	8000494 <__aeabi_dcmpge>
 800ea3c:	9e07      	ldr	r6, [sp, #28]
 800ea3e:	0037      	movs	r7, r6
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d000      	beq.n	800ea46 <_dtoa_r+0x4de>
 800ea44:	e25f      	b.n	800ef06 <_dtoa_r+0x99e>
 800ea46:	9b06      	ldr	r3, [sp, #24]
 800ea48:	9a06      	ldr	r2, [sp, #24]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	9308      	str	r3, [sp, #32]
 800ea4e:	2331      	movs	r3, #49	; 0x31
 800ea50:	7013      	strb	r3, [r2, #0]
 800ea52:	9b03      	ldr	r3, [sp, #12]
 800ea54:	3301      	adds	r3, #1
 800ea56:	9303      	str	r3, [sp, #12]
 800ea58:	e25a      	b.n	800ef10 <_dtoa_r+0x9a8>
 800ea5a:	423d      	tst	r5, r7
 800ea5c:	d005      	beq.n	800ea6a <_dtoa_r+0x502>
 800ea5e:	6832      	ldr	r2, [r6, #0]
 800ea60:	6873      	ldr	r3, [r6, #4]
 800ea62:	f7f3 fc37 	bl	80022d4 <__aeabi_dmul>
 800ea66:	003b      	movs	r3, r7
 800ea68:	3401      	adds	r4, #1
 800ea6a:	106d      	asrs	r5, r5, #1
 800ea6c:	3608      	adds	r6, #8
 800ea6e:	e75f      	b.n	800e930 <_dtoa_r+0x3c8>
 800ea70:	9b03      	ldr	r3, [sp, #12]
 800ea72:	930e      	str	r3, [sp, #56]	; 0x38
 800ea74:	9b07      	ldr	r3, [sp, #28]
 800ea76:	e783      	b.n	800e980 <_dtoa_r+0x418>
 800ea78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea7a:	4b84      	ldr	r3, [pc, #528]	; (800ec8c <_dtoa_r+0x724>)
 800ea7c:	3a01      	subs	r2, #1
 800ea7e:	00d2      	lsls	r2, r2, #3
 800ea80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ea82:	189b      	adds	r3, r3, r2
 800ea84:	9c08      	ldr	r4, [sp, #32]
 800ea86:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	2900      	cmp	r1, #0
 800ea8e:	d051      	beq.n	800eb34 <_dtoa_r+0x5cc>
 800ea90:	2000      	movs	r0, #0
 800ea92:	4986      	ldr	r1, [pc, #536]	; (800ecac <_dtoa_r+0x744>)
 800ea94:	f7f3 f824 	bl	8001ae0 <__aeabi_ddiv>
 800ea98:	0022      	movs	r2, r4
 800ea9a:	002b      	movs	r3, r5
 800ea9c:	f7f3 fedc 	bl	8002858 <__aeabi_dsub>
 800eaa0:	9a06      	ldr	r2, [sp, #24]
 800eaa2:	0004      	movs	r4, r0
 800eaa4:	4694      	mov	ip, r2
 800eaa6:	000d      	movs	r5, r1
 800eaa8:	9b06      	ldr	r3, [sp, #24]
 800eaaa:	9314      	str	r3, [sp, #80]	; 0x50
 800eaac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eaae:	4463      	add	r3, ip
 800eab0:	9318      	str	r3, [sp, #96]	; 0x60
 800eab2:	0039      	movs	r1, r7
 800eab4:	0030      	movs	r0, r6
 800eab6:	f7f4 fa6f 	bl	8002f98 <__aeabi_d2iz>
 800eaba:	9012      	str	r0, [sp, #72]	; 0x48
 800eabc:	f7f4 faa2 	bl	8003004 <__aeabi_i2d>
 800eac0:	0002      	movs	r2, r0
 800eac2:	000b      	movs	r3, r1
 800eac4:	0030      	movs	r0, r6
 800eac6:	0039      	movs	r1, r7
 800eac8:	f7f3 fec6 	bl	8002858 <__aeabi_dsub>
 800eacc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eace:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ead0:	3301      	adds	r3, #1
 800ead2:	9308      	str	r3, [sp, #32]
 800ead4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ead6:	0006      	movs	r6, r0
 800ead8:	3330      	adds	r3, #48	; 0x30
 800eada:	7013      	strb	r3, [r2, #0]
 800eadc:	0022      	movs	r2, r4
 800eade:	002b      	movs	r3, r5
 800eae0:	000f      	movs	r7, r1
 800eae2:	f7f1 fcb9 	bl	8000458 <__aeabi_dcmplt>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d174      	bne.n	800ebd4 <_dtoa_r+0x66c>
 800eaea:	0032      	movs	r2, r6
 800eaec:	003b      	movs	r3, r7
 800eaee:	2000      	movs	r0, #0
 800eaf0:	4968      	ldr	r1, [pc, #416]	; (800ec94 <_dtoa_r+0x72c>)
 800eaf2:	f7f3 feb1 	bl	8002858 <__aeabi_dsub>
 800eaf6:	0022      	movs	r2, r4
 800eaf8:	002b      	movs	r3, r5
 800eafa:	f7f1 fcad 	bl	8000458 <__aeabi_dcmplt>
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d000      	beq.n	800eb04 <_dtoa_r+0x59c>
 800eb02:	e0d7      	b.n	800ecb4 <_dtoa_r+0x74c>
 800eb04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800eb06:	9a08      	ldr	r2, [sp, #32]
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	d100      	bne.n	800eb0e <_dtoa_r+0x5a6>
 800eb0c:	e771      	b.n	800e9f2 <_dtoa_r+0x48a>
 800eb0e:	2200      	movs	r2, #0
 800eb10:	0020      	movs	r0, r4
 800eb12:	0029      	movs	r1, r5
 800eb14:	4b60      	ldr	r3, [pc, #384]	; (800ec98 <_dtoa_r+0x730>)
 800eb16:	f7f3 fbdd 	bl	80022d4 <__aeabi_dmul>
 800eb1a:	4b5f      	ldr	r3, [pc, #380]	; (800ec98 <_dtoa_r+0x730>)
 800eb1c:	0004      	movs	r4, r0
 800eb1e:	000d      	movs	r5, r1
 800eb20:	0030      	movs	r0, r6
 800eb22:	0039      	movs	r1, r7
 800eb24:	2200      	movs	r2, #0
 800eb26:	f7f3 fbd5 	bl	80022d4 <__aeabi_dmul>
 800eb2a:	9b08      	ldr	r3, [sp, #32]
 800eb2c:	0006      	movs	r6, r0
 800eb2e:	000f      	movs	r7, r1
 800eb30:	9314      	str	r3, [sp, #80]	; 0x50
 800eb32:	e7be      	b.n	800eab2 <_dtoa_r+0x54a>
 800eb34:	0020      	movs	r0, r4
 800eb36:	0029      	movs	r1, r5
 800eb38:	f7f3 fbcc 	bl	80022d4 <__aeabi_dmul>
 800eb3c:	9a06      	ldr	r2, [sp, #24]
 800eb3e:	9b06      	ldr	r3, [sp, #24]
 800eb40:	4694      	mov	ip, r2
 800eb42:	9308      	str	r3, [sp, #32]
 800eb44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eb46:	9014      	str	r0, [sp, #80]	; 0x50
 800eb48:	9115      	str	r1, [sp, #84]	; 0x54
 800eb4a:	4463      	add	r3, ip
 800eb4c:	9319      	str	r3, [sp, #100]	; 0x64
 800eb4e:	0030      	movs	r0, r6
 800eb50:	0039      	movs	r1, r7
 800eb52:	f7f4 fa21 	bl	8002f98 <__aeabi_d2iz>
 800eb56:	9018      	str	r0, [sp, #96]	; 0x60
 800eb58:	f7f4 fa54 	bl	8003004 <__aeabi_i2d>
 800eb5c:	0002      	movs	r2, r0
 800eb5e:	000b      	movs	r3, r1
 800eb60:	0030      	movs	r0, r6
 800eb62:	0039      	movs	r1, r7
 800eb64:	f7f3 fe78 	bl	8002858 <__aeabi_dsub>
 800eb68:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800eb6a:	9b08      	ldr	r3, [sp, #32]
 800eb6c:	3630      	adds	r6, #48	; 0x30
 800eb6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800eb70:	701e      	strb	r6, [r3, #0]
 800eb72:	3301      	adds	r3, #1
 800eb74:	0004      	movs	r4, r0
 800eb76:	000d      	movs	r5, r1
 800eb78:	9308      	str	r3, [sp, #32]
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d12d      	bne.n	800ebda <_dtoa_r+0x672>
 800eb7e:	9814      	ldr	r0, [sp, #80]	; 0x50
 800eb80:	9915      	ldr	r1, [sp, #84]	; 0x54
 800eb82:	9a06      	ldr	r2, [sp, #24]
 800eb84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eb86:	4694      	mov	ip, r2
 800eb88:	4463      	add	r3, ip
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	9308      	str	r3, [sp, #32]
 800eb8e:	4b47      	ldr	r3, [pc, #284]	; (800ecac <_dtoa_r+0x744>)
 800eb90:	f7f2 fc46 	bl	8001420 <__aeabi_dadd>
 800eb94:	0002      	movs	r2, r0
 800eb96:	000b      	movs	r3, r1
 800eb98:	0020      	movs	r0, r4
 800eb9a:	0029      	movs	r1, r5
 800eb9c:	f7f1 fc70 	bl	8000480 <__aeabi_dcmpgt>
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d000      	beq.n	800eba6 <_dtoa_r+0x63e>
 800eba4:	e086      	b.n	800ecb4 <_dtoa_r+0x74c>
 800eba6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebaa:	2000      	movs	r0, #0
 800ebac:	493f      	ldr	r1, [pc, #252]	; (800ecac <_dtoa_r+0x744>)
 800ebae:	f7f3 fe53 	bl	8002858 <__aeabi_dsub>
 800ebb2:	0002      	movs	r2, r0
 800ebb4:	000b      	movs	r3, r1
 800ebb6:	0020      	movs	r0, r4
 800ebb8:	0029      	movs	r1, r5
 800ebba:	f7f1 fc4d 	bl	8000458 <__aeabi_dcmplt>
 800ebbe:	2800      	cmp	r0, #0
 800ebc0:	d100      	bne.n	800ebc4 <_dtoa_r+0x65c>
 800ebc2:	e716      	b.n	800e9f2 <_dtoa_r+0x48a>
 800ebc4:	9b08      	ldr	r3, [sp, #32]
 800ebc6:	001a      	movs	r2, r3
 800ebc8:	3a01      	subs	r2, #1
 800ebca:	9208      	str	r2, [sp, #32]
 800ebcc:	7812      	ldrb	r2, [r2, #0]
 800ebce:	2a30      	cmp	r2, #48	; 0x30
 800ebd0:	d0f8      	beq.n	800ebc4 <_dtoa_r+0x65c>
 800ebd2:	9308      	str	r3, [sp, #32]
 800ebd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebd6:	9303      	str	r3, [sp, #12]
 800ebd8:	e046      	b.n	800ec68 <_dtoa_r+0x700>
 800ebda:	2200      	movs	r2, #0
 800ebdc:	4b2e      	ldr	r3, [pc, #184]	; (800ec98 <_dtoa_r+0x730>)
 800ebde:	f7f3 fb79 	bl	80022d4 <__aeabi_dmul>
 800ebe2:	0006      	movs	r6, r0
 800ebe4:	000f      	movs	r7, r1
 800ebe6:	e7b2      	b.n	800eb4e <_dtoa_r+0x5e6>
 800ebe8:	9b06      	ldr	r3, [sp, #24]
 800ebea:	9a06      	ldr	r2, [sp, #24]
 800ebec:	930a      	str	r3, [sp, #40]	; 0x28
 800ebee:	9b07      	ldr	r3, [sp, #28]
 800ebf0:	9c08      	ldr	r4, [sp, #32]
 800ebf2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	189b      	adds	r3, r3, r2
 800ebf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebfa:	0032      	movs	r2, r6
 800ebfc:	003b      	movs	r3, r7
 800ebfe:	0020      	movs	r0, r4
 800ec00:	0029      	movs	r1, r5
 800ec02:	f7f2 ff6d 	bl	8001ae0 <__aeabi_ddiv>
 800ec06:	f7f4 f9c7 	bl	8002f98 <__aeabi_d2iz>
 800ec0a:	9007      	str	r0, [sp, #28]
 800ec0c:	f7f4 f9fa 	bl	8003004 <__aeabi_i2d>
 800ec10:	0032      	movs	r2, r6
 800ec12:	003b      	movs	r3, r7
 800ec14:	f7f3 fb5e 	bl	80022d4 <__aeabi_dmul>
 800ec18:	0002      	movs	r2, r0
 800ec1a:	000b      	movs	r3, r1
 800ec1c:	0020      	movs	r0, r4
 800ec1e:	0029      	movs	r1, r5
 800ec20:	f7f3 fe1a 	bl	8002858 <__aeabi_dsub>
 800ec24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec26:	001a      	movs	r2, r3
 800ec28:	3201      	adds	r2, #1
 800ec2a:	920a      	str	r2, [sp, #40]	; 0x28
 800ec2c:	9208      	str	r2, [sp, #32]
 800ec2e:	9a07      	ldr	r2, [sp, #28]
 800ec30:	3230      	adds	r2, #48	; 0x30
 800ec32:	701a      	strb	r2, [r3, #0]
 800ec34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d14f      	bne.n	800ecda <_dtoa_r+0x772>
 800ec3a:	0002      	movs	r2, r0
 800ec3c:	000b      	movs	r3, r1
 800ec3e:	f7f2 fbef 	bl	8001420 <__aeabi_dadd>
 800ec42:	0032      	movs	r2, r6
 800ec44:	003b      	movs	r3, r7
 800ec46:	0004      	movs	r4, r0
 800ec48:	000d      	movs	r5, r1
 800ec4a:	f7f1 fc19 	bl	8000480 <__aeabi_dcmpgt>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d12e      	bne.n	800ecb0 <_dtoa_r+0x748>
 800ec52:	0032      	movs	r2, r6
 800ec54:	003b      	movs	r3, r7
 800ec56:	0020      	movs	r0, r4
 800ec58:	0029      	movs	r1, r5
 800ec5a:	f7f1 fbf7 	bl	800044c <__aeabi_dcmpeq>
 800ec5e:	2800      	cmp	r0, #0
 800ec60:	d002      	beq.n	800ec68 <_dtoa_r+0x700>
 800ec62:	9b07      	ldr	r3, [sp, #28]
 800ec64:	07de      	lsls	r6, r3, #31
 800ec66:	d423      	bmi.n	800ecb0 <_dtoa_r+0x748>
 800ec68:	9905      	ldr	r1, [sp, #20]
 800ec6a:	9804      	ldr	r0, [sp, #16]
 800ec6c:	f000 fe86 	bl	800f97c <_Bfree>
 800ec70:	2300      	movs	r3, #0
 800ec72:	9a08      	ldr	r2, [sp, #32]
 800ec74:	7013      	strb	r3, [r2, #0]
 800ec76:	9b03      	ldr	r3, [sp, #12]
 800ec78:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	6013      	str	r3, [r2, #0]
 800ec7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d100      	bne.n	800ec86 <_dtoa_r+0x71e>
 800ec84:	e4ba      	b.n	800e5fc <_dtoa_r+0x94>
 800ec86:	9a08      	ldr	r2, [sp, #32]
 800ec88:	601a      	str	r2, [r3, #0]
 800ec8a:	e4b7      	b.n	800e5fc <_dtoa_r+0x94>
 800ec8c:	080132a8 	.word	0x080132a8
 800ec90:	08013280 	.word	0x08013280
 800ec94:	3ff00000 	.word	0x3ff00000
 800ec98:	40240000 	.word	0x40240000
 800ec9c:	401c0000 	.word	0x401c0000
 800eca0:	fcc00000 	.word	0xfcc00000
 800eca4:	40140000 	.word	0x40140000
 800eca8:	7cc00000 	.word	0x7cc00000
 800ecac:	3fe00000 	.word	0x3fe00000
 800ecb0:	9b03      	ldr	r3, [sp, #12]
 800ecb2:	930e      	str	r3, [sp, #56]	; 0x38
 800ecb4:	9b08      	ldr	r3, [sp, #32]
 800ecb6:	9308      	str	r3, [sp, #32]
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	781a      	ldrb	r2, [r3, #0]
 800ecbc:	2a39      	cmp	r2, #57	; 0x39
 800ecbe:	d108      	bne.n	800ecd2 <_dtoa_r+0x76a>
 800ecc0:	9a06      	ldr	r2, [sp, #24]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d1f7      	bne.n	800ecb6 <_dtoa_r+0x74e>
 800ecc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecc8:	9906      	ldr	r1, [sp, #24]
 800ecca:	3201      	adds	r2, #1
 800eccc:	920e      	str	r2, [sp, #56]	; 0x38
 800ecce:	2230      	movs	r2, #48	; 0x30
 800ecd0:	700a      	strb	r2, [r1, #0]
 800ecd2:	781a      	ldrb	r2, [r3, #0]
 800ecd4:	3201      	adds	r2, #1
 800ecd6:	701a      	strb	r2, [r3, #0]
 800ecd8:	e77c      	b.n	800ebd4 <_dtoa_r+0x66c>
 800ecda:	2200      	movs	r2, #0
 800ecdc:	4ba9      	ldr	r3, [pc, #676]	; (800ef84 <_dtoa_r+0xa1c>)
 800ecde:	f7f3 faf9 	bl	80022d4 <__aeabi_dmul>
 800ece2:	2200      	movs	r2, #0
 800ece4:	2300      	movs	r3, #0
 800ece6:	0004      	movs	r4, r0
 800ece8:	000d      	movs	r5, r1
 800ecea:	f7f1 fbaf 	bl	800044c <__aeabi_dcmpeq>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d100      	bne.n	800ecf4 <_dtoa_r+0x78c>
 800ecf2:	e782      	b.n	800ebfa <_dtoa_r+0x692>
 800ecf4:	e7b8      	b.n	800ec68 <_dtoa_r+0x700>
 800ecf6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ecf8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ecfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ecfc:	2f00      	cmp	r7, #0
 800ecfe:	d012      	beq.n	800ed26 <_dtoa_r+0x7be>
 800ed00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ed02:	2a01      	cmp	r2, #1
 800ed04:	dc6e      	bgt.n	800ede4 <_dtoa_r+0x87c>
 800ed06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ed08:	2a00      	cmp	r2, #0
 800ed0a:	d065      	beq.n	800edd8 <_dtoa_r+0x870>
 800ed0c:	4a9e      	ldr	r2, [pc, #632]	; (800ef88 <_dtoa_r+0xa20>)
 800ed0e:	189b      	adds	r3, r3, r2
 800ed10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed12:	2101      	movs	r1, #1
 800ed14:	18d2      	adds	r2, r2, r3
 800ed16:	920a      	str	r2, [sp, #40]	; 0x28
 800ed18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed1a:	9804      	ldr	r0, [sp, #16]
 800ed1c:	18d3      	adds	r3, r2, r3
 800ed1e:	930c      	str	r3, [sp, #48]	; 0x30
 800ed20:	f000 ff28 	bl	800fb74 <__i2b>
 800ed24:	0007      	movs	r7, r0
 800ed26:	2c00      	cmp	r4, #0
 800ed28:	d00e      	beq.n	800ed48 <_dtoa_r+0x7e0>
 800ed2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	dd0b      	ble.n	800ed48 <_dtoa_r+0x7e0>
 800ed30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed32:	0023      	movs	r3, r4
 800ed34:	4294      	cmp	r4, r2
 800ed36:	dd00      	ble.n	800ed3a <_dtoa_r+0x7d2>
 800ed38:	0013      	movs	r3, r2
 800ed3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed3c:	1ae4      	subs	r4, r4, r3
 800ed3e:	1ad2      	subs	r2, r2, r3
 800ed40:	920a      	str	r2, [sp, #40]	; 0x28
 800ed42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed44:	1ad3      	subs	r3, r2, r3
 800ed46:	930c      	str	r3, [sp, #48]	; 0x30
 800ed48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d01e      	beq.n	800ed8c <_dtoa_r+0x824>
 800ed4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d05c      	beq.n	800ee0e <_dtoa_r+0x8a6>
 800ed54:	2d00      	cmp	r5, #0
 800ed56:	dd10      	ble.n	800ed7a <_dtoa_r+0x812>
 800ed58:	0039      	movs	r1, r7
 800ed5a:	002a      	movs	r2, r5
 800ed5c:	9804      	ldr	r0, [sp, #16]
 800ed5e:	f000 ffd1 	bl	800fd04 <__pow5mult>
 800ed62:	9a05      	ldr	r2, [sp, #20]
 800ed64:	0001      	movs	r1, r0
 800ed66:	0007      	movs	r7, r0
 800ed68:	9804      	ldr	r0, [sp, #16]
 800ed6a:	f000 ff1b 	bl	800fba4 <__multiply>
 800ed6e:	0006      	movs	r6, r0
 800ed70:	9905      	ldr	r1, [sp, #20]
 800ed72:	9804      	ldr	r0, [sp, #16]
 800ed74:	f000 fe02 	bl	800f97c <_Bfree>
 800ed78:	9605      	str	r6, [sp, #20]
 800ed7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed7c:	1b5a      	subs	r2, r3, r5
 800ed7e:	42ab      	cmp	r3, r5
 800ed80:	d004      	beq.n	800ed8c <_dtoa_r+0x824>
 800ed82:	9905      	ldr	r1, [sp, #20]
 800ed84:	9804      	ldr	r0, [sp, #16]
 800ed86:	f000 ffbd 	bl	800fd04 <__pow5mult>
 800ed8a:	9005      	str	r0, [sp, #20]
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	9804      	ldr	r0, [sp, #16]
 800ed90:	f000 fef0 	bl	800fb74 <__i2b>
 800ed94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ed96:	0006      	movs	r6, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	dd3a      	ble.n	800ee12 <_dtoa_r+0x8aa>
 800ed9c:	001a      	movs	r2, r3
 800ed9e:	0001      	movs	r1, r0
 800eda0:	9804      	ldr	r0, [sp, #16]
 800eda2:	f000 ffaf 	bl	800fd04 <__pow5mult>
 800eda6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eda8:	0006      	movs	r6, r0
 800edaa:	2500      	movs	r5, #0
 800edac:	2b01      	cmp	r3, #1
 800edae:	dc38      	bgt.n	800ee22 <_dtoa_r+0x8ba>
 800edb0:	2500      	movs	r5, #0
 800edb2:	9b08      	ldr	r3, [sp, #32]
 800edb4:	42ab      	cmp	r3, r5
 800edb6:	d130      	bne.n	800ee1a <_dtoa_r+0x8b2>
 800edb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edba:	031b      	lsls	r3, r3, #12
 800edbc:	42ab      	cmp	r3, r5
 800edbe:	d12c      	bne.n	800ee1a <_dtoa_r+0x8b2>
 800edc0:	4b72      	ldr	r3, [pc, #456]	; (800ef8c <_dtoa_r+0xa24>)
 800edc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edc4:	4213      	tst	r3, r2
 800edc6:	d028      	beq.n	800ee1a <_dtoa_r+0x8b2>
 800edc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edca:	3501      	adds	r5, #1
 800edcc:	3301      	adds	r3, #1
 800edce:	930a      	str	r3, [sp, #40]	; 0x28
 800edd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edd2:	3301      	adds	r3, #1
 800edd4:	930c      	str	r3, [sp, #48]	; 0x30
 800edd6:	e020      	b.n	800ee1a <_dtoa_r+0x8b2>
 800edd8:	2336      	movs	r3, #54	; 0x36
 800edda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eddc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800edde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ede0:	1a9b      	subs	r3, r3, r2
 800ede2:	e795      	b.n	800ed10 <_dtoa_r+0x7a8>
 800ede4:	9b07      	ldr	r3, [sp, #28]
 800ede6:	1e5d      	subs	r5, r3, #1
 800ede8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edea:	42ab      	cmp	r3, r5
 800edec:	db07      	blt.n	800edfe <_dtoa_r+0x896>
 800edee:	1b5d      	subs	r5, r3, r5
 800edf0:	9b07      	ldr	r3, [sp, #28]
 800edf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	da8b      	bge.n	800ed10 <_dtoa_r+0x7a8>
 800edf8:	1ae4      	subs	r4, r4, r3
 800edfa:	2300      	movs	r3, #0
 800edfc:	e788      	b.n	800ed10 <_dtoa_r+0x7a8>
 800edfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ee00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee02:	1aeb      	subs	r3, r5, r3
 800ee04:	18d3      	adds	r3, r2, r3
 800ee06:	950d      	str	r5, [sp, #52]	; 0x34
 800ee08:	9313      	str	r3, [sp, #76]	; 0x4c
 800ee0a:	2500      	movs	r5, #0
 800ee0c:	e7f0      	b.n	800edf0 <_dtoa_r+0x888>
 800ee0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee10:	e7b7      	b.n	800ed82 <_dtoa_r+0x81a>
 800ee12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ee14:	2500      	movs	r5, #0
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	ddca      	ble.n	800edb0 <_dtoa_r+0x848>
 800ee1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee1c:	2001      	movs	r0, #1
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d008      	beq.n	800ee34 <_dtoa_r+0x8cc>
 800ee22:	6933      	ldr	r3, [r6, #16]
 800ee24:	3303      	adds	r3, #3
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	18f3      	adds	r3, r6, r3
 800ee2a:	6858      	ldr	r0, [r3, #4]
 800ee2c:	f000 fe5a 	bl	800fae4 <__hi0bits>
 800ee30:	2320      	movs	r3, #32
 800ee32:	1a18      	subs	r0, r3, r0
 800ee34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee36:	1818      	adds	r0, r3, r0
 800ee38:	0002      	movs	r2, r0
 800ee3a:	231f      	movs	r3, #31
 800ee3c:	401a      	ands	r2, r3
 800ee3e:	4218      	tst	r0, r3
 800ee40:	d047      	beq.n	800eed2 <_dtoa_r+0x96a>
 800ee42:	3301      	adds	r3, #1
 800ee44:	1a9b      	subs	r3, r3, r2
 800ee46:	2b04      	cmp	r3, #4
 800ee48:	dd3f      	ble.n	800eeca <_dtoa_r+0x962>
 800ee4a:	231c      	movs	r3, #28
 800ee4c:	1a9b      	subs	r3, r3, r2
 800ee4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee50:	18e4      	adds	r4, r4, r3
 800ee52:	18d2      	adds	r2, r2, r3
 800ee54:	920a      	str	r2, [sp, #40]	; 0x28
 800ee56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee58:	18d3      	adds	r3, r2, r3
 800ee5a:	930c      	str	r3, [sp, #48]	; 0x30
 800ee5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	dd05      	ble.n	800ee6e <_dtoa_r+0x906>
 800ee62:	001a      	movs	r2, r3
 800ee64:	9905      	ldr	r1, [sp, #20]
 800ee66:	9804      	ldr	r0, [sp, #16]
 800ee68:	f000 ffa8 	bl	800fdbc <__lshift>
 800ee6c:	9005      	str	r0, [sp, #20]
 800ee6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	dd05      	ble.n	800ee80 <_dtoa_r+0x918>
 800ee74:	0031      	movs	r1, r6
 800ee76:	001a      	movs	r2, r3
 800ee78:	9804      	ldr	r0, [sp, #16]
 800ee7a:	f000 ff9f 	bl	800fdbc <__lshift>
 800ee7e:	0006      	movs	r6, r0
 800ee80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d027      	beq.n	800eed6 <_dtoa_r+0x96e>
 800ee86:	0031      	movs	r1, r6
 800ee88:	9805      	ldr	r0, [sp, #20]
 800ee8a:	f001 f805 	bl	800fe98 <__mcmp>
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	da21      	bge.n	800eed6 <_dtoa_r+0x96e>
 800ee92:	9b03      	ldr	r3, [sp, #12]
 800ee94:	220a      	movs	r2, #10
 800ee96:	3b01      	subs	r3, #1
 800ee98:	9303      	str	r3, [sp, #12]
 800ee9a:	9905      	ldr	r1, [sp, #20]
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	9804      	ldr	r0, [sp, #16]
 800eea0:	f000 fd90 	bl	800f9c4 <__multadd>
 800eea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eea6:	9005      	str	r0, [sp, #20]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d100      	bne.n	800eeae <_dtoa_r+0x946>
 800eeac:	e15d      	b.n	800f16a <_dtoa_r+0xc02>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	0039      	movs	r1, r7
 800eeb2:	220a      	movs	r2, #10
 800eeb4:	9804      	ldr	r0, [sp, #16]
 800eeb6:	f000 fd85 	bl	800f9c4 <__multadd>
 800eeba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eebc:	0007      	movs	r7, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	dc49      	bgt.n	800ef56 <_dtoa_r+0x9ee>
 800eec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	dc0e      	bgt.n	800eee6 <_dtoa_r+0x97e>
 800eec8:	e045      	b.n	800ef56 <_dtoa_r+0x9ee>
 800eeca:	2b04      	cmp	r3, #4
 800eecc:	d0c6      	beq.n	800ee5c <_dtoa_r+0x8f4>
 800eece:	331c      	adds	r3, #28
 800eed0:	e7bd      	b.n	800ee4e <_dtoa_r+0x8e6>
 800eed2:	0013      	movs	r3, r2
 800eed4:	e7fb      	b.n	800eece <_dtoa_r+0x966>
 800eed6:	9b07      	ldr	r3, [sp, #28]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	dc36      	bgt.n	800ef4a <_dtoa_r+0x9e2>
 800eedc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eede:	2b02      	cmp	r3, #2
 800eee0:	dd33      	ble.n	800ef4a <_dtoa_r+0x9e2>
 800eee2:	9b07      	ldr	r3, [sp, #28]
 800eee4:	930b      	str	r3, [sp, #44]	; 0x2c
 800eee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10c      	bne.n	800ef06 <_dtoa_r+0x99e>
 800eeec:	0031      	movs	r1, r6
 800eeee:	2205      	movs	r2, #5
 800eef0:	9804      	ldr	r0, [sp, #16]
 800eef2:	f000 fd67 	bl	800f9c4 <__multadd>
 800eef6:	0006      	movs	r6, r0
 800eef8:	0001      	movs	r1, r0
 800eefa:	9805      	ldr	r0, [sp, #20]
 800eefc:	f000 ffcc 	bl	800fe98 <__mcmp>
 800ef00:	2800      	cmp	r0, #0
 800ef02:	dd00      	ble.n	800ef06 <_dtoa_r+0x99e>
 800ef04:	e59f      	b.n	800ea46 <_dtoa_r+0x4de>
 800ef06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef08:	43db      	mvns	r3, r3
 800ef0a:	9303      	str	r3, [sp, #12]
 800ef0c:	9b06      	ldr	r3, [sp, #24]
 800ef0e:	9308      	str	r3, [sp, #32]
 800ef10:	2500      	movs	r5, #0
 800ef12:	0031      	movs	r1, r6
 800ef14:	9804      	ldr	r0, [sp, #16]
 800ef16:	f000 fd31 	bl	800f97c <_Bfree>
 800ef1a:	2f00      	cmp	r7, #0
 800ef1c:	d100      	bne.n	800ef20 <_dtoa_r+0x9b8>
 800ef1e:	e6a3      	b.n	800ec68 <_dtoa_r+0x700>
 800ef20:	2d00      	cmp	r5, #0
 800ef22:	d005      	beq.n	800ef30 <_dtoa_r+0x9c8>
 800ef24:	42bd      	cmp	r5, r7
 800ef26:	d003      	beq.n	800ef30 <_dtoa_r+0x9c8>
 800ef28:	0029      	movs	r1, r5
 800ef2a:	9804      	ldr	r0, [sp, #16]
 800ef2c:	f000 fd26 	bl	800f97c <_Bfree>
 800ef30:	0039      	movs	r1, r7
 800ef32:	9804      	ldr	r0, [sp, #16]
 800ef34:	f000 fd22 	bl	800f97c <_Bfree>
 800ef38:	e696      	b.n	800ec68 <_dtoa_r+0x700>
 800ef3a:	2600      	movs	r6, #0
 800ef3c:	0037      	movs	r7, r6
 800ef3e:	e7e2      	b.n	800ef06 <_dtoa_r+0x99e>
 800ef40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef42:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ef44:	9303      	str	r3, [sp, #12]
 800ef46:	0037      	movs	r7, r6
 800ef48:	e57d      	b.n	800ea46 <_dtoa_r+0x4de>
 800ef4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d100      	bne.n	800ef52 <_dtoa_r+0x9ea>
 800ef50:	e0c3      	b.n	800f0da <_dtoa_r+0xb72>
 800ef52:	9b07      	ldr	r3, [sp, #28]
 800ef54:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef56:	2c00      	cmp	r4, #0
 800ef58:	dd05      	ble.n	800ef66 <_dtoa_r+0x9fe>
 800ef5a:	0039      	movs	r1, r7
 800ef5c:	0022      	movs	r2, r4
 800ef5e:	9804      	ldr	r0, [sp, #16]
 800ef60:	f000 ff2c 	bl	800fdbc <__lshift>
 800ef64:	0007      	movs	r7, r0
 800ef66:	0038      	movs	r0, r7
 800ef68:	2d00      	cmp	r5, #0
 800ef6a:	d024      	beq.n	800efb6 <_dtoa_r+0xa4e>
 800ef6c:	6879      	ldr	r1, [r7, #4]
 800ef6e:	9804      	ldr	r0, [sp, #16]
 800ef70:	f000 fcc0 	bl	800f8f4 <_Balloc>
 800ef74:	1e04      	subs	r4, r0, #0
 800ef76:	d111      	bne.n	800ef9c <_dtoa_r+0xa34>
 800ef78:	0022      	movs	r2, r4
 800ef7a:	4b05      	ldr	r3, [pc, #20]	; (800ef90 <_dtoa_r+0xa28>)
 800ef7c:	4805      	ldr	r0, [pc, #20]	; (800ef94 <_dtoa_r+0xa2c>)
 800ef7e:	4906      	ldr	r1, [pc, #24]	; (800ef98 <_dtoa_r+0xa30>)
 800ef80:	f7ff fb07 	bl	800e592 <_dtoa_r+0x2a>
 800ef84:	40240000 	.word	0x40240000
 800ef88:	00000433 	.word	0x00000433
 800ef8c:	7ff00000 	.word	0x7ff00000
 800ef90:	080131b4 	.word	0x080131b4
 800ef94:	0801315c 	.word	0x0801315c
 800ef98:	000002ef 	.word	0x000002ef
 800ef9c:	0039      	movs	r1, r7
 800ef9e:	693a      	ldr	r2, [r7, #16]
 800efa0:	310c      	adds	r1, #12
 800efa2:	3202      	adds	r2, #2
 800efa4:	0092      	lsls	r2, r2, #2
 800efa6:	300c      	adds	r0, #12
 800efa8:	f7ff fa1c 	bl	800e3e4 <memcpy>
 800efac:	2201      	movs	r2, #1
 800efae:	0021      	movs	r1, r4
 800efb0:	9804      	ldr	r0, [sp, #16]
 800efb2:	f000 ff03 	bl	800fdbc <__lshift>
 800efb6:	9b06      	ldr	r3, [sp, #24]
 800efb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800efba:	9307      	str	r3, [sp, #28]
 800efbc:	3b01      	subs	r3, #1
 800efbe:	189b      	adds	r3, r3, r2
 800efc0:	2201      	movs	r2, #1
 800efc2:	003d      	movs	r5, r7
 800efc4:	0007      	movs	r7, r0
 800efc6:	930e      	str	r3, [sp, #56]	; 0x38
 800efc8:	9b08      	ldr	r3, [sp, #32]
 800efca:	4013      	ands	r3, r2
 800efcc:	930d      	str	r3, [sp, #52]	; 0x34
 800efce:	0031      	movs	r1, r6
 800efd0:	9805      	ldr	r0, [sp, #20]
 800efd2:	f7ff fa39 	bl	800e448 <quorem>
 800efd6:	0029      	movs	r1, r5
 800efd8:	0004      	movs	r4, r0
 800efda:	900b      	str	r0, [sp, #44]	; 0x2c
 800efdc:	9805      	ldr	r0, [sp, #20]
 800efde:	f000 ff5b 	bl	800fe98 <__mcmp>
 800efe2:	003a      	movs	r2, r7
 800efe4:	900c      	str	r0, [sp, #48]	; 0x30
 800efe6:	0031      	movs	r1, r6
 800efe8:	9804      	ldr	r0, [sp, #16]
 800efea:	f000 ff71 	bl	800fed0 <__mdiff>
 800efee:	2201      	movs	r2, #1
 800eff0:	68c3      	ldr	r3, [r0, #12]
 800eff2:	3430      	adds	r4, #48	; 0x30
 800eff4:	9008      	str	r0, [sp, #32]
 800eff6:	920a      	str	r2, [sp, #40]	; 0x28
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d104      	bne.n	800f006 <_dtoa_r+0xa9e>
 800effc:	0001      	movs	r1, r0
 800effe:	9805      	ldr	r0, [sp, #20]
 800f000:	f000 ff4a 	bl	800fe98 <__mcmp>
 800f004:	900a      	str	r0, [sp, #40]	; 0x28
 800f006:	9908      	ldr	r1, [sp, #32]
 800f008:	9804      	ldr	r0, [sp, #16]
 800f00a:	f000 fcb7 	bl	800f97c <_Bfree>
 800f00e:	9b07      	ldr	r3, [sp, #28]
 800f010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f012:	3301      	adds	r3, #1
 800f014:	9308      	str	r3, [sp, #32]
 800f016:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f018:	4313      	orrs	r3, r2
 800f01a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f01c:	4313      	orrs	r3, r2
 800f01e:	d109      	bne.n	800f034 <_dtoa_r+0xacc>
 800f020:	2c39      	cmp	r4, #57	; 0x39
 800f022:	d022      	beq.n	800f06a <_dtoa_r+0xb02>
 800f024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f026:	2b00      	cmp	r3, #0
 800f028:	dd01      	ble.n	800f02e <_dtoa_r+0xac6>
 800f02a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f02c:	3431      	adds	r4, #49	; 0x31
 800f02e:	9b07      	ldr	r3, [sp, #28]
 800f030:	701c      	strb	r4, [r3, #0]
 800f032:	e76e      	b.n	800ef12 <_dtoa_r+0x9aa>
 800f034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f036:	2b00      	cmp	r3, #0
 800f038:	db04      	blt.n	800f044 <_dtoa_r+0xadc>
 800f03a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f03c:	4313      	orrs	r3, r2
 800f03e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f040:	4313      	orrs	r3, r2
 800f042:	d11e      	bne.n	800f082 <_dtoa_r+0xb1a>
 800f044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f046:	2b00      	cmp	r3, #0
 800f048:	ddf1      	ble.n	800f02e <_dtoa_r+0xac6>
 800f04a:	9905      	ldr	r1, [sp, #20]
 800f04c:	2201      	movs	r2, #1
 800f04e:	9804      	ldr	r0, [sp, #16]
 800f050:	f000 feb4 	bl	800fdbc <__lshift>
 800f054:	0031      	movs	r1, r6
 800f056:	9005      	str	r0, [sp, #20]
 800f058:	f000 ff1e 	bl	800fe98 <__mcmp>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	dc02      	bgt.n	800f066 <_dtoa_r+0xafe>
 800f060:	d1e5      	bne.n	800f02e <_dtoa_r+0xac6>
 800f062:	07e3      	lsls	r3, r4, #31
 800f064:	d5e3      	bpl.n	800f02e <_dtoa_r+0xac6>
 800f066:	2c39      	cmp	r4, #57	; 0x39
 800f068:	d1df      	bne.n	800f02a <_dtoa_r+0xac2>
 800f06a:	2339      	movs	r3, #57	; 0x39
 800f06c:	9a07      	ldr	r2, [sp, #28]
 800f06e:	7013      	strb	r3, [r2, #0]
 800f070:	9b08      	ldr	r3, [sp, #32]
 800f072:	9308      	str	r3, [sp, #32]
 800f074:	3b01      	subs	r3, #1
 800f076:	781a      	ldrb	r2, [r3, #0]
 800f078:	2a39      	cmp	r2, #57	; 0x39
 800f07a:	d063      	beq.n	800f144 <_dtoa_r+0xbdc>
 800f07c:	3201      	adds	r2, #1
 800f07e:	701a      	strb	r2, [r3, #0]
 800f080:	e747      	b.n	800ef12 <_dtoa_r+0x9aa>
 800f082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f084:	2b00      	cmp	r3, #0
 800f086:	dd03      	ble.n	800f090 <_dtoa_r+0xb28>
 800f088:	2c39      	cmp	r4, #57	; 0x39
 800f08a:	d0ee      	beq.n	800f06a <_dtoa_r+0xb02>
 800f08c:	3401      	adds	r4, #1
 800f08e:	e7ce      	b.n	800f02e <_dtoa_r+0xac6>
 800f090:	9b07      	ldr	r3, [sp, #28]
 800f092:	9a07      	ldr	r2, [sp, #28]
 800f094:	701c      	strb	r4, [r3, #0]
 800f096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f098:	4293      	cmp	r3, r2
 800f09a:	d03e      	beq.n	800f11a <_dtoa_r+0xbb2>
 800f09c:	2300      	movs	r3, #0
 800f09e:	220a      	movs	r2, #10
 800f0a0:	9905      	ldr	r1, [sp, #20]
 800f0a2:	9804      	ldr	r0, [sp, #16]
 800f0a4:	f000 fc8e 	bl	800f9c4 <__multadd>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	9005      	str	r0, [sp, #20]
 800f0ac:	220a      	movs	r2, #10
 800f0ae:	0029      	movs	r1, r5
 800f0b0:	9804      	ldr	r0, [sp, #16]
 800f0b2:	42bd      	cmp	r5, r7
 800f0b4:	d106      	bne.n	800f0c4 <_dtoa_r+0xb5c>
 800f0b6:	f000 fc85 	bl	800f9c4 <__multadd>
 800f0ba:	0005      	movs	r5, r0
 800f0bc:	0007      	movs	r7, r0
 800f0be:	9b08      	ldr	r3, [sp, #32]
 800f0c0:	9307      	str	r3, [sp, #28]
 800f0c2:	e784      	b.n	800efce <_dtoa_r+0xa66>
 800f0c4:	f000 fc7e 	bl	800f9c4 <__multadd>
 800f0c8:	0039      	movs	r1, r7
 800f0ca:	0005      	movs	r5, r0
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	220a      	movs	r2, #10
 800f0d0:	9804      	ldr	r0, [sp, #16]
 800f0d2:	f000 fc77 	bl	800f9c4 <__multadd>
 800f0d6:	0007      	movs	r7, r0
 800f0d8:	e7f1      	b.n	800f0be <_dtoa_r+0xb56>
 800f0da:	9b07      	ldr	r3, [sp, #28]
 800f0dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0de:	2500      	movs	r5, #0
 800f0e0:	0031      	movs	r1, r6
 800f0e2:	9805      	ldr	r0, [sp, #20]
 800f0e4:	f7ff f9b0 	bl	800e448 <quorem>
 800f0e8:	9b06      	ldr	r3, [sp, #24]
 800f0ea:	3030      	adds	r0, #48	; 0x30
 800f0ec:	5558      	strb	r0, [r3, r5]
 800f0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0f0:	3501      	adds	r5, #1
 800f0f2:	0004      	movs	r4, r0
 800f0f4:	42ab      	cmp	r3, r5
 800f0f6:	dd07      	ble.n	800f108 <_dtoa_r+0xba0>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	220a      	movs	r2, #10
 800f0fc:	9905      	ldr	r1, [sp, #20]
 800f0fe:	9804      	ldr	r0, [sp, #16]
 800f100:	f000 fc60 	bl	800f9c4 <__multadd>
 800f104:	9005      	str	r0, [sp, #20]
 800f106:	e7eb      	b.n	800f0e0 <_dtoa_r+0xb78>
 800f108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f10a:	2301      	movs	r3, #1
 800f10c:	2a00      	cmp	r2, #0
 800f10e:	dd00      	ble.n	800f112 <_dtoa_r+0xbaa>
 800f110:	0013      	movs	r3, r2
 800f112:	2500      	movs	r5, #0
 800f114:	9a06      	ldr	r2, [sp, #24]
 800f116:	18d3      	adds	r3, r2, r3
 800f118:	9308      	str	r3, [sp, #32]
 800f11a:	9905      	ldr	r1, [sp, #20]
 800f11c:	2201      	movs	r2, #1
 800f11e:	9804      	ldr	r0, [sp, #16]
 800f120:	f000 fe4c 	bl	800fdbc <__lshift>
 800f124:	0031      	movs	r1, r6
 800f126:	9005      	str	r0, [sp, #20]
 800f128:	f000 feb6 	bl	800fe98 <__mcmp>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	dc9f      	bgt.n	800f070 <_dtoa_r+0xb08>
 800f130:	d101      	bne.n	800f136 <_dtoa_r+0xbce>
 800f132:	07e4      	lsls	r4, r4, #31
 800f134:	d49c      	bmi.n	800f070 <_dtoa_r+0xb08>
 800f136:	9b08      	ldr	r3, [sp, #32]
 800f138:	9308      	str	r3, [sp, #32]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	781a      	ldrb	r2, [r3, #0]
 800f13e:	2a30      	cmp	r2, #48	; 0x30
 800f140:	d0fa      	beq.n	800f138 <_dtoa_r+0xbd0>
 800f142:	e6e6      	b.n	800ef12 <_dtoa_r+0x9aa>
 800f144:	9a06      	ldr	r2, [sp, #24]
 800f146:	429a      	cmp	r2, r3
 800f148:	d193      	bne.n	800f072 <_dtoa_r+0xb0a>
 800f14a:	9b03      	ldr	r3, [sp, #12]
 800f14c:	3301      	adds	r3, #1
 800f14e:	9303      	str	r3, [sp, #12]
 800f150:	2331      	movs	r3, #49	; 0x31
 800f152:	7013      	strb	r3, [r2, #0]
 800f154:	e6dd      	b.n	800ef12 <_dtoa_r+0x9aa>
 800f156:	4b09      	ldr	r3, [pc, #36]	; (800f17c <_dtoa_r+0xc14>)
 800f158:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800f15a:	9306      	str	r3, [sp, #24]
 800f15c:	4b08      	ldr	r3, [pc, #32]	; (800f180 <_dtoa_r+0xc18>)
 800f15e:	2a00      	cmp	r2, #0
 800f160:	d001      	beq.n	800f166 <_dtoa_r+0xbfe>
 800f162:	f7ff fa49 	bl	800e5f8 <_dtoa_r+0x90>
 800f166:	f7ff fa49 	bl	800e5fc <_dtoa_r+0x94>
 800f16a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	dcb6      	bgt.n	800f0de <_dtoa_r+0xb76>
 800f170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f172:	2b02      	cmp	r3, #2
 800f174:	dd00      	ble.n	800f178 <_dtoa_r+0xc10>
 800f176:	e6b6      	b.n	800eee6 <_dtoa_r+0x97e>
 800f178:	e7b1      	b.n	800f0de <_dtoa_r+0xb76>
 800f17a:	46c0      	nop			; (mov r8, r8)
 800f17c:	0801314f 	.word	0x0801314f
 800f180:	08013157 	.word	0x08013157

0800f184 <_free_r>:
 800f184:	b570      	push	{r4, r5, r6, lr}
 800f186:	0005      	movs	r5, r0
 800f188:	2900      	cmp	r1, #0
 800f18a:	d010      	beq.n	800f1ae <_free_r+0x2a>
 800f18c:	1f0c      	subs	r4, r1, #4
 800f18e:	6823      	ldr	r3, [r4, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	da00      	bge.n	800f196 <_free_r+0x12>
 800f194:	18e4      	adds	r4, r4, r3
 800f196:	0028      	movs	r0, r5
 800f198:	f7fd f894 	bl	800c2c4 <__malloc_lock>
 800f19c:	4a1d      	ldr	r2, [pc, #116]	; (800f214 <_free_r+0x90>)
 800f19e:	6813      	ldr	r3, [r2, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d105      	bne.n	800f1b0 <_free_r+0x2c>
 800f1a4:	6063      	str	r3, [r4, #4]
 800f1a6:	6014      	str	r4, [r2, #0]
 800f1a8:	0028      	movs	r0, r5
 800f1aa:	f7fd f893 	bl	800c2d4 <__malloc_unlock>
 800f1ae:	bd70      	pop	{r4, r5, r6, pc}
 800f1b0:	42a3      	cmp	r3, r4
 800f1b2:	d908      	bls.n	800f1c6 <_free_r+0x42>
 800f1b4:	6820      	ldr	r0, [r4, #0]
 800f1b6:	1821      	adds	r1, r4, r0
 800f1b8:	428b      	cmp	r3, r1
 800f1ba:	d1f3      	bne.n	800f1a4 <_free_r+0x20>
 800f1bc:	6819      	ldr	r1, [r3, #0]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	1809      	adds	r1, r1, r0
 800f1c2:	6021      	str	r1, [r4, #0]
 800f1c4:	e7ee      	b.n	800f1a4 <_free_r+0x20>
 800f1c6:	001a      	movs	r2, r3
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <_free_r+0x4e>
 800f1ce:	42a3      	cmp	r3, r4
 800f1d0:	d9f9      	bls.n	800f1c6 <_free_r+0x42>
 800f1d2:	6811      	ldr	r1, [r2, #0]
 800f1d4:	1850      	adds	r0, r2, r1
 800f1d6:	42a0      	cmp	r0, r4
 800f1d8:	d10b      	bne.n	800f1f2 <_free_r+0x6e>
 800f1da:	6820      	ldr	r0, [r4, #0]
 800f1dc:	1809      	adds	r1, r1, r0
 800f1de:	1850      	adds	r0, r2, r1
 800f1e0:	6011      	str	r1, [r2, #0]
 800f1e2:	4283      	cmp	r3, r0
 800f1e4:	d1e0      	bne.n	800f1a8 <_free_r+0x24>
 800f1e6:	6818      	ldr	r0, [r3, #0]
 800f1e8:	685b      	ldr	r3, [r3, #4]
 800f1ea:	1841      	adds	r1, r0, r1
 800f1ec:	6011      	str	r1, [r2, #0]
 800f1ee:	6053      	str	r3, [r2, #4]
 800f1f0:	e7da      	b.n	800f1a8 <_free_r+0x24>
 800f1f2:	42a0      	cmp	r0, r4
 800f1f4:	d902      	bls.n	800f1fc <_free_r+0x78>
 800f1f6:	230c      	movs	r3, #12
 800f1f8:	602b      	str	r3, [r5, #0]
 800f1fa:	e7d5      	b.n	800f1a8 <_free_r+0x24>
 800f1fc:	6820      	ldr	r0, [r4, #0]
 800f1fe:	1821      	adds	r1, r4, r0
 800f200:	428b      	cmp	r3, r1
 800f202:	d103      	bne.n	800f20c <_free_r+0x88>
 800f204:	6819      	ldr	r1, [r3, #0]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	1809      	adds	r1, r1, r0
 800f20a:	6021      	str	r1, [r4, #0]
 800f20c:	6063      	str	r3, [r4, #4]
 800f20e:	6054      	str	r4, [r2, #4]
 800f210:	e7ca      	b.n	800f1a8 <_free_r+0x24>
 800f212:	46c0      	nop			; (mov r8, r8)
 800f214:	20005954 	.word	0x20005954

0800f218 <rshift>:
 800f218:	0002      	movs	r2, r0
 800f21a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f21c:	6904      	ldr	r4, [r0, #16]
 800f21e:	114b      	asrs	r3, r1, #5
 800f220:	b085      	sub	sp, #20
 800f222:	3214      	adds	r2, #20
 800f224:	9302      	str	r3, [sp, #8]
 800f226:	114d      	asrs	r5, r1, #5
 800f228:	0013      	movs	r3, r2
 800f22a:	42ac      	cmp	r4, r5
 800f22c:	dd32      	ble.n	800f294 <rshift+0x7c>
 800f22e:	261f      	movs	r6, #31
 800f230:	000f      	movs	r7, r1
 800f232:	114b      	asrs	r3, r1, #5
 800f234:	009b      	lsls	r3, r3, #2
 800f236:	00a5      	lsls	r5, r4, #2
 800f238:	18d3      	adds	r3, r2, r3
 800f23a:	4037      	ands	r7, r6
 800f23c:	1955      	adds	r5, r2, r5
 800f23e:	9300      	str	r3, [sp, #0]
 800f240:	9701      	str	r7, [sp, #4]
 800f242:	4231      	tst	r1, r6
 800f244:	d10d      	bne.n	800f262 <rshift+0x4a>
 800f246:	0016      	movs	r6, r2
 800f248:	0019      	movs	r1, r3
 800f24a:	428d      	cmp	r5, r1
 800f24c:	d836      	bhi.n	800f2bc <rshift+0xa4>
 800f24e:	9900      	ldr	r1, [sp, #0]
 800f250:	2300      	movs	r3, #0
 800f252:	3903      	subs	r1, #3
 800f254:	428d      	cmp	r5, r1
 800f256:	d302      	bcc.n	800f25e <rshift+0x46>
 800f258:	9b02      	ldr	r3, [sp, #8]
 800f25a:	1ae4      	subs	r4, r4, r3
 800f25c:	00a3      	lsls	r3, r4, #2
 800f25e:	18d3      	adds	r3, r2, r3
 800f260:	e018      	b.n	800f294 <rshift+0x7c>
 800f262:	2120      	movs	r1, #32
 800f264:	9e01      	ldr	r6, [sp, #4]
 800f266:	9f01      	ldr	r7, [sp, #4]
 800f268:	1b89      	subs	r1, r1, r6
 800f26a:	9e00      	ldr	r6, [sp, #0]
 800f26c:	9103      	str	r1, [sp, #12]
 800f26e:	ce02      	ldmia	r6!, {r1}
 800f270:	4694      	mov	ip, r2
 800f272:	40f9      	lsrs	r1, r7
 800f274:	42b5      	cmp	r5, r6
 800f276:	d816      	bhi.n	800f2a6 <rshift+0x8e>
 800f278:	9e00      	ldr	r6, [sp, #0]
 800f27a:	2300      	movs	r3, #0
 800f27c:	3601      	adds	r6, #1
 800f27e:	42b5      	cmp	r5, r6
 800f280:	d303      	bcc.n	800f28a <rshift+0x72>
 800f282:	9b02      	ldr	r3, [sp, #8]
 800f284:	1ae3      	subs	r3, r4, r3
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	3b04      	subs	r3, #4
 800f28a:	18d3      	adds	r3, r2, r3
 800f28c:	6019      	str	r1, [r3, #0]
 800f28e:	2900      	cmp	r1, #0
 800f290:	d000      	beq.n	800f294 <rshift+0x7c>
 800f292:	3304      	adds	r3, #4
 800f294:	1a99      	subs	r1, r3, r2
 800f296:	1089      	asrs	r1, r1, #2
 800f298:	6101      	str	r1, [r0, #16]
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d101      	bne.n	800f2a2 <rshift+0x8a>
 800f29e:	2300      	movs	r3, #0
 800f2a0:	6143      	str	r3, [r0, #20]
 800f2a2:	b005      	add	sp, #20
 800f2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2a6:	6837      	ldr	r7, [r6, #0]
 800f2a8:	9b03      	ldr	r3, [sp, #12]
 800f2aa:	409f      	lsls	r7, r3
 800f2ac:	430f      	orrs	r7, r1
 800f2ae:	4661      	mov	r1, ip
 800f2b0:	c180      	stmia	r1!, {r7}
 800f2b2:	468c      	mov	ip, r1
 800f2b4:	9b01      	ldr	r3, [sp, #4]
 800f2b6:	ce02      	ldmia	r6!, {r1}
 800f2b8:	40d9      	lsrs	r1, r3
 800f2ba:	e7db      	b.n	800f274 <rshift+0x5c>
 800f2bc:	c980      	ldmia	r1!, {r7}
 800f2be:	c680      	stmia	r6!, {r7}
 800f2c0:	e7c3      	b.n	800f24a <rshift+0x32>

0800f2c2 <__hexdig_fun>:
 800f2c2:	0002      	movs	r2, r0
 800f2c4:	3a30      	subs	r2, #48	; 0x30
 800f2c6:	0003      	movs	r3, r0
 800f2c8:	2a09      	cmp	r2, #9
 800f2ca:	d802      	bhi.n	800f2d2 <__hexdig_fun+0x10>
 800f2cc:	3b20      	subs	r3, #32
 800f2ce:	b2d8      	uxtb	r0, r3
 800f2d0:	4770      	bx	lr
 800f2d2:	0002      	movs	r2, r0
 800f2d4:	3a61      	subs	r2, #97	; 0x61
 800f2d6:	2a05      	cmp	r2, #5
 800f2d8:	d801      	bhi.n	800f2de <__hexdig_fun+0x1c>
 800f2da:	3b47      	subs	r3, #71	; 0x47
 800f2dc:	e7f7      	b.n	800f2ce <__hexdig_fun+0xc>
 800f2de:	001a      	movs	r2, r3
 800f2e0:	3a41      	subs	r2, #65	; 0x41
 800f2e2:	2000      	movs	r0, #0
 800f2e4:	2a05      	cmp	r2, #5
 800f2e6:	d8f3      	bhi.n	800f2d0 <__hexdig_fun+0xe>
 800f2e8:	3b27      	subs	r3, #39	; 0x27
 800f2ea:	e7f0      	b.n	800f2ce <__hexdig_fun+0xc>

0800f2ec <__gethex>:
 800f2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ee:	b089      	sub	sp, #36	; 0x24
 800f2f0:	9307      	str	r3, [sp, #28]
 800f2f2:	2302      	movs	r3, #2
 800f2f4:	9201      	str	r2, [sp, #4]
 800f2f6:	680a      	ldr	r2, [r1, #0]
 800f2f8:	425b      	negs	r3, r3
 800f2fa:	9003      	str	r0, [sp, #12]
 800f2fc:	9106      	str	r1, [sp, #24]
 800f2fe:	1c96      	adds	r6, r2, #2
 800f300:	1a9b      	subs	r3, r3, r2
 800f302:	199a      	adds	r2, r3, r6
 800f304:	9600      	str	r6, [sp, #0]
 800f306:	9205      	str	r2, [sp, #20]
 800f308:	9a00      	ldr	r2, [sp, #0]
 800f30a:	3601      	adds	r6, #1
 800f30c:	7810      	ldrb	r0, [r2, #0]
 800f30e:	2830      	cmp	r0, #48	; 0x30
 800f310:	d0f7      	beq.n	800f302 <__gethex+0x16>
 800f312:	f7ff ffd6 	bl	800f2c2 <__hexdig_fun>
 800f316:	2300      	movs	r3, #0
 800f318:	001d      	movs	r5, r3
 800f31a:	9302      	str	r3, [sp, #8]
 800f31c:	4298      	cmp	r0, r3
 800f31e:	d11d      	bne.n	800f35c <__gethex+0x70>
 800f320:	2201      	movs	r2, #1
 800f322:	49a6      	ldr	r1, [pc, #664]	; (800f5bc <__gethex+0x2d0>)
 800f324:	9800      	ldr	r0, [sp, #0]
 800f326:	f7fe feb8 	bl	800e09a <strncmp>
 800f32a:	0007      	movs	r7, r0
 800f32c:	42a8      	cmp	r0, r5
 800f32e:	d169      	bne.n	800f404 <__gethex+0x118>
 800f330:	9b00      	ldr	r3, [sp, #0]
 800f332:	0034      	movs	r4, r6
 800f334:	7858      	ldrb	r0, [r3, #1]
 800f336:	f7ff ffc4 	bl	800f2c2 <__hexdig_fun>
 800f33a:	2301      	movs	r3, #1
 800f33c:	9302      	str	r3, [sp, #8]
 800f33e:	42a8      	cmp	r0, r5
 800f340:	d02f      	beq.n	800f3a2 <__gethex+0xb6>
 800f342:	9600      	str	r6, [sp, #0]
 800f344:	9b00      	ldr	r3, [sp, #0]
 800f346:	7818      	ldrb	r0, [r3, #0]
 800f348:	2830      	cmp	r0, #48	; 0x30
 800f34a:	d009      	beq.n	800f360 <__gethex+0x74>
 800f34c:	f7ff ffb9 	bl	800f2c2 <__hexdig_fun>
 800f350:	4242      	negs	r2, r0
 800f352:	4142      	adcs	r2, r0
 800f354:	2301      	movs	r3, #1
 800f356:	0035      	movs	r5, r6
 800f358:	9202      	str	r2, [sp, #8]
 800f35a:	9305      	str	r3, [sp, #20]
 800f35c:	9c00      	ldr	r4, [sp, #0]
 800f35e:	e004      	b.n	800f36a <__gethex+0x7e>
 800f360:	9b00      	ldr	r3, [sp, #0]
 800f362:	3301      	adds	r3, #1
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	e7ed      	b.n	800f344 <__gethex+0x58>
 800f368:	3401      	adds	r4, #1
 800f36a:	7820      	ldrb	r0, [r4, #0]
 800f36c:	f7ff ffa9 	bl	800f2c2 <__hexdig_fun>
 800f370:	1e07      	subs	r7, r0, #0
 800f372:	d1f9      	bne.n	800f368 <__gethex+0x7c>
 800f374:	2201      	movs	r2, #1
 800f376:	0020      	movs	r0, r4
 800f378:	4990      	ldr	r1, [pc, #576]	; (800f5bc <__gethex+0x2d0>)
 800f37a:	f7fe fe8e 	bl	800e09a <strncmp>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d10d      	bne.n	800f39e <__gethex+0xb2>
 800f382:	2d00      	cmp	r5, #0
 800f384:	d106      	bne.n	800f394 <__gethex+0xa8>
 800f386:	3401      	adds	r4, #1
 800f388:	0025      	movs	r5, r4
 800f38a:	7820      	ldrb	r0, [r4, #0]
 800f38c:	f7ff ff99 	bl	800f2c2 <__hexdig_fun>
 800f390:	2800      	cmp	r0, #0
 800f392:	d102      	bne.n	800f39a <__gethex+0xae>
 800f394:	1b2d      	subs	r5, r5, r4
 800f396:	00af      	lsls	r7, r5, #2
 800f398:	e003      	b.n	800f3a2 <__gethex+0xb6>
 800f39a:	3401      	adds	r4, #1
 800f39c:	e7f5      	b.n	800f38a <__gethex+0x9e>
 800f39e:	2d00      	cmp	r5, #0
 800f3a0:	d1f8      	bne.n	800f394 <__gethex+0xa8>
 800f3a2:	2220      	movs	r2, #32
 800f3a4:	7823      	ldrb	r3, [r4, #0]
 800f3a6:	0026      	movs	r6, r4
 800f3a8:	4393      	bics	r3, r2
 800f3aa:	2b50      	cmp	r3, #80	; 0x50
 800f3ac:	d11d      	bne.n	800f3ea <__gethex+0xfe>
 800f3ae:	7863      	ldrb	r3, [r4, #1]
 800f3b0:	2b2b      	cmp	r3, #43	; 0x2b
 800f3b2:	d02c      	beq.n	800f40e <__gethex+0x122>
 800f3b4:	2b2d      	cmp	r3, #45	; 0x2d
 800f3b6:	d02e      	beq.n	800f416 <__gethex+0x12a>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	1c66      	adds	r6, r4, #1
 800f3bc:	9304      	str	r3, [sp, #16]
 800f3be:	7830      	ldrb	r0, [r6, #0]
 800f3c0:	f7ff ff7f 	bl	800f2c2 <__hexdig_fun>
 800f3c4:	1e43      	subs	r3, r0, #1
 800f3c6:	b2db      	uxtb	r3, r3
 800f3c8:	2b18      	cmp	r3, #24
 800f3ca:	d82b      	bhi.n	800f424 <__gethex+0x138>
 800f3cc:	3810      	subs	r0, #16
 800f3ce:	0005      	movs	r5, r0
 800f3d0:	7870      	ldrb	r0, [r6, #1]
 800f3d2:	f7ff ff76 	bl	800f2c2 <__hexdig_fun>
 800f3d6:	1e43      	subs	r3, r0, #1
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	3601      	adds	r6, #1
 800f3dc:	2b18      	cmp	r3, #24
 800f3de:	d91c      	bls.n	800f41a <__gethex+0x12e>
 800f3e0:	9b04      	ldr	r3, [sp, #16]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d000      	beq.n	800f3e8 <__gethex+0xfc>
 800f3e6:	426d      	negs	r5, r5
 800f3e8:	197f      	adds	r7, r7, r5
 800f3ea:	9b06      	ldr	r3, [sp, #24]
 800f3ec:	601e      	str	r6, [r3, #0]
 800f3ee:	9b02      	ldr	r3, [sp, #8]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d019      	beq.n	800f428 <__gethex+0x13c>
 800f3f4:	2600      	movs	r6, #0
 800f3f6:	9b05      	ldr	r3, [sp, #20]
 800f3f8:	42b3      	cmp	r3, r6
 800f3fa:	d100      	bne.n	800f3fe <__gethex+0x112>
 800f3fc:	3606      	adds	r6, #6
 800f3fe:	0030      	movs	r0, r6
 800f400:	b009      	add	sp, #36	; 0x24
 800f402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f404:	2301      	movs	r3, #1
 800f406:	2700      	movs	r7, #0
 800f408:	9c00      	ldr	r4, [sp, #0]
 800f40a:	9302      	str	r3, [sp, #8]
 800f40c:	e7c9      	b.n	800f3a2 <__gethex+0xb6>
 800f40e:	2300      	movs	r3, #0
 800f410:	9304      	str	r3, [sp, #16]
 800f412:	1ca6      	adds	r6, r4, #2
 800f414:	e7d3      	b.n	800f3be <__gethex+0xd2>
 800f416:	2301      	movs	r3, #1
 800f418:	e7fa      	b.n	800f410 <__gethex+0x124>
 800f41a:	230a      	movs	r3, #10
 800f41c:	435d      	muls	r5, r3
 800f41e:	182d      	adds	r5, r5, r0
 800f420:	3d10      	subs	r5, #16
 800f422:	e7d5      	b.n	800f3d0 <__gethex+0xe4>
 800f424:	0026      	movs	r6, r4
 800f426:	e7e0      	b.n	800f3ea <__gethex+0xfe>
 800f428:	9b00      	ldr	r3, [sp, #0]
 800f42a:	9902      	ldr	r1, [sp, #8]
 800f42c:	1ae3      	subs	r3, r4, r3
 800f42e:	3b01      	subs	r3, #1
 800f430:	2b07      	cmp	r3, #7
 800f432:	dc0a      	bgt.n	800f44a <__gethex+0x15e>
 800f434:	9803      	ldr	r0, [sp, #12]
 800f436:	f000 fa5d 	bl	800f8f4 <_Balloc>
 800f43a:	1e05      	subs	r5, r0, #0
 800f43c:	d108      	bne.n	800f450 <__gethex+0x164>
 800f43e:	002a      	movs	r2, r5
 800f440:	21e4      	movs	r1, #228	; 0xe4
 800f442:	4b5f      	ldr	r3, [pc, #380]	; (800f5c0 <__gethex+0x2d4>)
 800f444:	485f      	ldr	r0, [pc, #380]	; (800f5c4 <__gethex+0x2d8>)
 800f446:	f7fe ffe1 	bl	800e40c <__assert_func>
 800f44a:	3101      	adds	r1, #1
 800f44c:	105b      	asrs	r3, r3, #1
 800f44e:	e7ef      	b.n	800f430 <__gethex+0x144>
 800f450:	0003      	movs	r3, r0
 800f452:	3314      	adds	r3, #20
 800f454:	9302      	str	r3, [sp, #8]
 800f456:	9305      	str	r3, [sp, #20]
 800f458:	2300      	movs	r3, #0
 800f45a:	001e      	movs	r6, r3
 800f45c:	9304      	str	r3, [sp, #16]
 800f45e:	9b00      	ldr	r3, [sp, #0]
 800f460:	42a3      	cmp	r3, r4
 800f462:	d33f      	bcc.n	800f4e4 <__gethex+0x1f8>
 800f464:	9c05      	ldr	r4, [sp, #20]
 800f466:	9b02      	ldr	r3, [sp, #8]
 800f468:	c440      	stmia	r4!, {r6}
 800f46a:	1ae4      	subs	r4, r4, r3
 800f46c:	10a4      	asrs	r4, r4, #2
 800f46e:	0030      	movs	r0, r6
 800f470:	612c      	str	r4, [r5, #16]
 800f472:	f000 fb37 	bl	800fae4 <__hi0bits>
 800f476:	9b01      	ldr	r3, [sp, #4]
 800f478:	0164      	lsls	r4, r4, #5
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	1a26      	subs	r6, r4, r0
 800f47e:	9300      	str	r3, [sp, #0]
 800f480:	429e      	cmp	r6, r3
 800f482:	dd51      	ble.n	800f528 <__gethex+0x23c>
 800f484:	1af6      	subs	r6, r6, r3
 800f486:	0031      	movs	r1, r6
 800f488:	0028      	movs	r0, r5
 800f48a:	f000 fecb 	bl	8010224 <__any_on>
 800f48e:	1e04      	subs	r4, r0, #0
 800f490:	d016      	beq.n	800f4c0 <__gethex+0x1d4>
 800f492:	2401      	movs	r4, #1
 800f494:	231f      	movs	r3, #31
 800f496:	0020      	movs	r0, r4
 800f498:	1e72      	subs	r2, r6, #1
 800f49a:	4013      	ands	r3, r2
 800f49c:	4098      	lsls	r0, r3
 800f49e:	0003      	movs	r3, r0
 800f4a0:	1151      	asrs	r1, r2, #5
 800f4a2:	9802      	ldr	r0, [sp, #8]
 800f4a4:	0089      	lsls	r1, r1, #2
 800f4a6:	5809      	ldr	r1, [r1, r0]
 800f4a8:	4219      	tst	r1, r3
 800f4aa:	d009      	beq.n	800f4c0 <__gethex+0x1d4>
 800f4ac:	42a2      	cmp	r2, r4
 800f4ae:	dd06      	ble.n	800f4be <__gethex+0x1d2>
 800f4b0:	0028      	movs	r0, r5
 800f4b2:	1eb1      	subs	r1, r6, #2
 800f4b4:	f000 feb6 	bl	8010224 <__any_on>
 800f4b8:	3402      	adds	r4, #2
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	d100      	bne.n	800f4c0 <__gethex+0x1d4>
 800f4be:	2402      	movs	r4, #2
 800f4c0:	0031      	movs	r1, r6
 800f4c2:	0028      	movs	r0, r5
 800f4c4:	f7ff fea8 	bl	800f218 <rshift>
 800f4c8:	19bf      	adds	r7, r7, r6
 800f4ca:	9b01      	ldr	r3, [sp, #4]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	42bb      	cmp	r3, r7
 800f4d0:	da3a      	bge.n	800f548 <__gethex+0x25c>
 800f4d2:	0029      	movs	r1, r5
 800f4d4:	9803      	ldr	r0, [sp, #12]
 800f4d6:	f000 fa51 	bl	800f97c <_Bfree>
 800f4da:	2300      	movs	r3, #0
 800f4dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4de:	26a3      	movs	r6, #163	; 0xa3
 800f4e0:	6013      	str	r3, [r2, #0]
 800f4e2:	e78c      	b.n	800f3fe <__gethex+0x112>
 800f4e4:	3c01      	subs	r4, #1
 800f4e6:	7823      	ldrb	r3, [r4, #0]
 800f4e8:	2b2e      	cmp	r3, #46	; 0x2e
 800f4ea:	d012      	beq.n	800f512 <__gethex+0x226>
 800f4ec:	9b04      	ldr	r3, [sp, #16]
 800f4ee:	2b20      	cmp	r3, #32
 800f4f0:	d104      	bne.n	800f4fc <__gethex+0x210>
 800f4f2:	9b05      	ldr	r3, [sp, #20]
 800f4f4:	c340      	stmia	r3!, {r6}
 800f4f6:	2600      	movs	r6, #0
 800f4f8:	9305      	str	r3, [sp, #20]
 800f4fa:	9604      	str	r6, [sp, #16]
 800f4fc:	7820      	ldrb	r0, [r4, #0]
 800f4fe:	f7ff fee0 	bl	800f2c2 <__hexdig_fun>
 800f502:	230f      	movs	r3, #15
 800f504:	4018      	ands	r0, r3
 800f506:	9b04      	ldr	r3, [sp, #16]
 800f508:	4098      	lsls	r0, r3
 800f50a:	3304      	adds	r3, #4
 800f50c:	4306      	orrs	r6, r0
 800f50e:	9304      	str	r3, [sp, #16]
 800f510:	e7a5      	b.n	800f45e <__gethex+0x172>
 800f512:	9b00      	ldr	r3, [sp, #0]
 800f514:	42a3      	cmp	r3, r4
 800f516:	d8e9      	bhi.n	800f4ec <__gethex+0x200>
 800f518:	2201      	movs	r2, #1
 800f51a:	0020      	movs	r0, r4
 800f51c:	4927      	ldr	r1, [pc, #156]	; (800f5bc <__gethex+0x2d0>)
 800f51e:	f7fe fdbc 	bl	800e09a <strncmp>
 800f522:	2800      	cmp	r0, #0
 800f524:	d1e2      	bne.n	800f4ec <__gethex+0x200>
 800f526:	e79a      	b.n	800f45e <__gethex+0x172>
 800f528:	9b00      	ldr	r3, [sp, #0]
 800f52a:	2400      	movs	r4, #0
 800f52c:	429e      	cmp	r6, r3
 800f52e:	dacc      	bge.n	800f4ca <__gethex+0x1de>
 800f530:	1b9e      	subs	r6, r3, r6
 800f532:	0029      	movs	r1, r5
 800f534:	0032      	movs	r2, r6
 800f536:	9803      	ldr	r0, [sp, #12]
 800f538:	f000 fc40 	bl	800fdbc <__lshift>
 800f53c:	0003      	movs	r3, r0
 800f53e:	3314      	adds	r3, #20
 800f540:	0005      	movs	r5, r0
 800f542:	1bbf      	subs	r7, r7, r6
 800f544:	9302      	str	r3, [sp, #8]
 800f546:	e7c0      	b.n	800f4ca <__gethex+0x1de>
 800f548:	9b01      	ldr	r3, [sp, #4]
 800f54a:	685e      	ldr	r6, [r3, #4]
 800f54c:	42be      	cmp	r6, r7
 800f54e:	dd70      	ble.n	800f632 <__gethex+0x346>
 800f550:	9b00      	ldr	r3, [sp, #0]
 800f552:	1bf6      	subs	r6, r6, r7
 800f554:	42b3      	cmp	r3, r6
 800f556:	dc37      	bgt.n	800f5c8 <__gethex+0x2dc>
 800f558:	9b01      	ldr	r3, [sp, #4]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	2b02      	cmp	r3, #2
 800f55e:	d024      	beq.n	800f5aa <__gethex+0x2be>
 800f560:	2b03      	cmp	r3, #3
 800f562:	d026      	beq.n	800f5b2 <__gethex+0x2c6>
 800f564:	2b01      	cmp	r3, #1
 800f566:	d117      	bne.n	800f598 <__gethex+0x2ac>
 800f568:	9b00      	ldr	r3, [sp, #0]
 800f56a:	42b3      	cmp	r3, r6
 800f56c:	d114      	bne.n	800f598 <__gethex+0x2ac>
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d10b      	bne.n	800f58a <__gethex+0x29e>
 800f572:	9b01      	ldr	r3, [sp, #4]
 800f574:	9a07      	ldr	r2, [sp, #28]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	2662      	movs	r6, #98	; 0x62
 800f57a:	6013      	str	r3, [r2, #0]
 800f57c:	2301      	movs	r3, #1
 800f57e:	9a02      	ldr	r2, [sp, #8]
 800f580:	612b      	str	r3, [r5, #16]
 800f582:	6013      	str	r3, [r2, #0]
 800f584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f586:	601d      	str	r5, [r3, #0]
 800f588:	e739      	b.n	800f3fe <__gethex+0x112>
 800f58a:	9900      	ldr	r1, [sp, #0]
 800f58c:	0028      	movs	r0, r5
 800f58e:	3901      	subs	r1, #1
 800f590:	f000 fe48 	bl	8010224 <__any_on>
 800f594:	2800      	cmp	r0, #0
 800f596:	d1ec      	bne.n	800f572 <__gethex+0x286>
 800f598:	0029      	movs	r1, r5
 800f59a:	9803      	ldr	r0, [sp, #12]
 800f59c:	f000 f9ee 	bl	800f97c <_Bfree>
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5a4:	2650      	movs	r6, #80	; 0x50
 800f5a6:	6013      	str	r3, [r2, #0]
 800f5a8:	e729      	b.n	800f3fe <__gethex+0x112>
 800f5aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d1f3      	bne.n	800f598 <__gethex+0x2ac>
 800f5b0:	e7df      	b.n	800f572 <__gethex+0x286>
 800f5b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1dc      	bne.n	800f572 <__gethex+0x286>
 800f5b8:	e7ee      	b.n	800f598 <__gethex+0x2ac>
 800f5ba:	46c0      	nop			; (mov r8, r8)
 800f5bc:	08012f0c 	.word	0x08012f0c
 800f5c0:	080131b4 	.word	0x080131b4
 800f5c4:	080131c5 	.word	0x080131c5
 800f5c8:	1e77      	subs	r7, r6, #1
 800f5ca:	2c00      	cmp	r4, #0
 800f5cc:	d12f      	bne.n	800f62e <__gethex+0x342>
 800f5ce:	2f00      	cmp	r7, #0
 800f5d0:	d004      	beq.n	800f5dc <__gethex+0x2f0>
 800f5d2:	0039      	movs	r1, r7
 800f5d4:	0028      	movs	r0, r5
 800f5d6:	f000 fe25 	bl	8010224 <__any_on>
 800f5da:	0004      	movs	r4, r0
 800f5dc:	231f      	movs	r3, #31
 800f5de:	117a      	asrs	r2, r7, #5
 800f5e0:	401f      	ands	r7, r3
 800f5e2:	3b1e      	subs	r3, #30
 800f5e4:	40bb      	lsls	r3, r7
 800f5e6:	9902      	ldr	r1, [sp, #8]
 800f5e8:	0092      	lsls	r2, r2, #2
 800f5ea:	5852      	ldr	r2, [r2, r1]
 800f5ec:	421a      	tst	r2, r3
 800f5ee:	d001      	beq.n	800f5f4 <__gethex+0x308>
 800f5f0:	2302      	movs	r3, #2
 800f5f2:	431c      	orrs	r4, r3
 800f5f4:	9b00      	ldr	r3, [sp, #0]
 800f5f6:	0031      	movs	r1, r6
 800f5f8:	1b9b      	subs	r3, r3, r6
 800f5fa:	2602      	movs	r6, #2
 800f5fc:	0028      	movs	r0, r5
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	f7ff fe0a 	bl	800f218 <rshift>
 800f604:	9b01      	ldr	r3, [sp, #4]
 800f606:	685f      	ldr	r7, [r3, #4]
 800f608:	2c00      	cmp	r4, #0
 800f60a:	d041      	beq.n	800f690 <__gethex+0x3a4>
 800f60c:	9b01      	ldr	r3, [sp, #4]
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	2b02      	cmp	r3, #2
 800f612:	d010      	beq.n	800f636 <__gethex+0x34a>
 800f614:	2b03      	cmp	r3, #3
 800f616:	d012      	beq.n	800f63e <__gethex+0x352>
 800f618:	2b01      	cmp	r3, #1
 800f61a:	d106      	bne.n	800f62a <__gethex+0x33e>
 800f61c:	07a2      	lsls	r2, r4, #30
 800f61e:	d504      	bpl.n	800f62a <__gethex+0x33e>
 800f620:	9a02      	ldr	r2, [sp, #8]
 800f622:	6812      	ldr	r2, [r2, #0]
 800f624:	4314      	orrs	r4, r2
 800f626:	421c      	tst	r4, r3
 800f628:	d10c      	bne.n	800f644 <__gethex+0x358>
 800f62a:	2310      	movs	r3, #16
 800f62c:	e02f      	b.n	800f68e <__gethex+0x3a2>
 800f62e:	2401      	movs	r4, #1
 800f630:	e7d4      	b.n	800f5dc <__gethex+0x2f0>
 800f632:	2601      	movs	r6, #1
 800f634:	e7e8      	b.n	800f608 <__gethex+0x31c>
 800f636:	2301      	movs	r3, #1
 800f638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f63a:	1a9b      	subs	r3, r3, r2
 800f63c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f63e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f640:	2b00      	cmp	r3, #0
 800f642:	d0f2      	beq.n	800f62a <__gethex+0x33e>
 800f644:	692b      	ldr	r3, [r5, #16]
 800f646:	2000      	movs	r0, #0
 800f648:	9302      	str	r3, [sp, #8]
 800f64a:	009b      	lsls	r3, r3, #2
 800f64c:	9304      	str	r3, [sp, #16]
 800f64e:	002b      	movs	r3, r5
 800f650:	9a04      	ldr	r2, [sp, #16]
 800f652:	3314      	adds	r3, #20
 800f654:	1899      	adds	r1, r3, r2
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	1c54      	adds	r4, r2, #1
 800f65a:	d01e      	beq.n	800f69a <__gethex+0x3ae>
 800f65c:	3201      	adds	r2, #1
 800f65e:	601a      	str	r2, [r3, #0]
 800f660:	002b      	movs	r3, r5
 800f662:	3314      	adds	r3, #20
 800f664:	2e02      	cmp	r6, #2
 800f666:	d141      	bne.n	800f6ec <__gethex+0x400>
 800f668:	9a01      	ldr	r2, [sp, #4]
 800f66a:	9900      	ldr	r1, [sp, #0]
 800f66c:	6812      	ldr	r2, [r2, #0]
 800f66e:	3a01      	subs	r2, #1
 800f670:	428a      	cmp	r2, r1
 800f672:	d10b      	bne.n	800f68c <__gethex+0x3a0>
 800f674:	221f      	movs	r2, #31
 800f676:	9800      	ldr	r0, [sp, #0]
 800f678:	1149      	asrs	r1, r1, #5
 800f67a:	4002      	ands	r2, r0
 800f67c:	2001      	movs	r0, #1
 800f67e:	0004      	movs	r4, r0
 800f680:	4094      	lsls	r4, r2
 800f682:	0089      	lsls	r1, r1, #2
 800f684:	58cb      	ldr	r3, [r1, r3]
 800f686:	4223      	tst	r3, r4
 800f688:	d000      	beq.n	800f68c <__gethex+0x3a0>
 800f68a:	2601      	movs	r6, #1
 800f68c:	2320      	movs	r3, #32
 800f68e:	431e      	orrs	r6, r3
 800f690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f692:	601d      	str	r5, [r3, #0]
 800f694:	9b07      	ldr	r3, [sp, #28]
 800f696:	601f      	str	r7, [r3, #0]
 800f698:	e6b1      	b.n	800f3fe <__gethex+0x112>
 800f69a:	c301      	stmia	r3!, {r0}
 800f69c:	4299      	cmp	r1, r3
 800f69e:	d8da      	bhi.n	800f656 <__gethex+0x36a>
 800f6a0:	68ab      	ldr	r3, [r5, #8]
 800f6a2:	9a02      	ldr	r2, [sp, #8]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	db18      	blt.n	800f6da <__gethex+0x3ee>
 800f6a8:	6869      	ldr	r1, [r5, #4]
 800f6aa:	9803      	ldr	r0, [sp, #12]
 800f6ac:	3101      	adds	r1, #1
 800f6ae:	f000 f921 	bl	800f8f4 <_Balloc>
 800f6b2:	1e04      	subs	r4, r0, #0
 800f6b4:	d104      	bne.n	800f6c0 <__gethex+0x3d4>
 800f6b6:	0022      	movs	r2, r4
 800f6b8:	2184      	movs	r1, #132	; 0x84
 800f6ba:	4b1c      	ldr	r3, [pc, #112]	; (800f72c <__gethex+0x440>)
 800f6bc:	481c      	ldr	r0, [pc, #112]	; (800f730 <__gethex+0x444>)
 800f6be:	e6c2      	b.n	800f446 <__gethex+0x15a>
 800f6c0:	0029      	movs	r1, r5
 800f6c2:	692a      	ldr	r2, [r5, #16]
 800f6c4:	310c      	adds	r1, #12
 800f6c6:	3202      	adds	r2, #2
 800f6c8:	0092      	lsls	r2, r2, #2
 800f6ca:	300c      	adds	r0, #12
 800f6cc:	f7fe fe8a 	bl	800e3e4 <memcpy>
 800f6d0:	0029      	movs	r1, r5
 800f6d2:	9803      	ldr	r0, [sp, #12]
 800f6d4:	f000 f952 	bl	800f97c <_Bfree>
 800f6d8:	0025      	movs	r5, r4
 800f6da:	692b      	ldr	r3, [r5, #16]
 800f6dc:	1c5a      	adds	r2, r3, #1
 800f6de:	612a      	str	r2, [r5, #16]
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	3304      	adds	r3, #4
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	18eb      	adds	r3, r5, r3
 800f6e8:	605a      	str	r2, [r3, #4]
 800f6ea:	e7b9      	b.n	800f660 <__gethex+0x374>
 800f6ec:	692a      	ldr	r2, [r5, #16]
 800f6ee:	9902      	ldr	r1, [sp, #8]
 800f6f0:	428a      	cmp	r2, r1
 800f6f2:	dd09      	ble.n	800f708 <__gethex+0x41c>
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	0028      	movs	r0, r5
 800f6f8:	f7ff fd8e 	bl	800f218 <rshift>
 800f6fc:	9b01      	ldr	r3, [sp, #4]
 800f6fe:	3701      	adds	r7, #1
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	42bb      	cmp	r3, r7
 800f704:	dac1      	bge.n	800f68a <__gethex+0x39e>
 800f706:	e6e4      	b.n	800f4d2 <__gethex+0x1e6>
 800f708:	221f      	movs	r2, #31
 800f70a:	9c00      	ldr	r4, [sp, #0]
 800f70c:	9900      	ldr	r1, [sp, #0]
 800f70e:	2601      	movs	r6, #1
 800f710:	4014      	ands	r4, r2
 800f712:	4211      	tst	r1, r2
 800f714:	d0ba      	beq.n	800f68c <__gethex+0x3a0>
 800f716:	9a04      	ldr	r2, [sp, #16]
 800f718:	189b      	adds	r3, r3, r2
 800f71a:	3b04      	subs	r3, #4
 800f71c:	6818      	ldr	r0, [r3, #0]
 800f71e:	f000 f9e1 	bl	800fae4 <__hi0bits>
 800f722:	2320      	movs	r3, #32
 800f724:	1b1b      	subs	r3, r3, r4
 800f726:	4298      	cmp	r0, r3
 800f728:	dbe4      	blt.n	800f6f4 <__gethex+0x408>
 800f72a:	e7af      	b.n	800f68c <__gethex+0x3a0>
 800f72c:	080131b4 	.word	0x080131b4
 800f730:	080131c5 	.word	0x080131c5

0800f734 <L_shift>:
 800f734:	2308      	movs	r3, #8
 800f736:	b570      	push	{r4, r5, r6, lr}
 800f738:	2520      	movs	r5, #32
 800f73a:	1a9a      	subs	r2, r3, r2
 800f73c:	0092      	lsls	r2, r2, #2
 800f73e:	1aad      	subs	r5, r5, r2
 800f740:	6843      	ldr	r3, [r0, #4]
 800f742:	6804      	ldr	r4, [r0, #0]
 800f744:	001e      	movs	r6, r3
 800f746:	40ae      	lsls	r6, r5
 800f748:	40d3      	lsrs	r3, r2
 800f74a:	4334      	orrs	r4, r6
 800f74c:	6004      	str	r4, [r0, #0]
 800f74e:	6043      	str	r3, [r0, #4]
 800f750:	3004      	adds	r0, #4
 800f752:	4288      	cmp	r0, r1
 800f754:	d3f4      	bcc.n	800f740 <L_shift+0xc>
 800f756:	bd70      	pop	{r4, r5, r6, pc}

0800f758 <__match>:
 800f758:	b530      	push	{r4, r5, lr}
 800f75a:	6803      	ldr	r3, [r0, #0]
 800f75c:	780c      	ldrb	r4, [r1, #0]
 800f75e:	3301      	adds	r3, #1
 800f760:	2c00      	cmp	r4, #0
 800f762:	d102      	bne.n	800f76a <__match+0x12>
 800f764:	6003      	str	r3, [r0, #0]
 800f766:	2001      	movs	r0, #1
 800f768:	bd30      	pop	{r4, r5, pc}
 800f76a:	781a      	ldrb	r2, [r3, #0]
 800f76c:	0015      	movs	r5, r2
 800f76e:	3d41      	subs	r5, #65	; 0x41
 800f770:	2d19      	cmp	r5, #25
 800f772:	d800      	bhi.n	800f776 <__match+0x1e>
 800f774:	3220      	adds	r2, #32
 800f776:	3101      	adds	r1, #1
 800f778:	42a2      	cmp	r2, r4
 800f77a:	d0ef      	beq.n	800f75c <__match+0x4>
 800f77c:	2000      	movs	r0, #0
 800f77e:	e7f3      	b.n	800f768 <__match+0x10>

0800f780 <__hexnan>:
 800f780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f782:	680b      	ldr	r3, [r1, #0]
 800f784:	b08b      	sub	sp, #44	; 0x2c
 800f786:	9201      	str	r2, [sp, #4]
 800f788:	9901      	ldr	r1, [sp, #4]
 800f78a:	115a      	asrs	r2, r3, #5
 800f78c:	0092      	lsls	r2, r2, #2
 800f78e:	188a      	adds	r2, r1, r2
 800f790:	9202      	str	r2, [sp, #8]
 800f792:	0019      	movs	r1, r3
 800f794:	221f      	movs	r2, #31
 800f796:	4011      	ands	r1, r2
 800f798:	9008      	str	r0, [sp, #32]
 800f79a:	9106      	str	r1, [sp, #24]
 800f79c:	4213      	tst	r3, r2
 800f79e:	d002      	beq.n	800f7a6 <__hexnan+0x26>
 800f7a0:	9b02      	ldr	r3, [sp, #8]
 800f7a2:	3304      	adds	r3, #4
 800f7a4:	9302      	str	r3, [sp, #8]
 800f7a6:	9b02      	ldr	r3, [sp, #8]
 800f7a8:	2500      	movs	r5, #0
 800f7aa:	1f1f      	subs	r7, r3, #4
 800f7ac:	003e      	movs	r6, r7
 800f7ae:	003c      	movs	r4, r7
 800f7b0:	9b08      	ldr	r3, [sp, #32]
 800f7b2:	603d      	str	r5, [r7, #0]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	9507      	str	r5, [sp, #28]
 800f7b8:	9305      	str	r3, [sp, #20]
 800f7ba:	9503      	str	r5, [sp, #12]
 800f7bc:	9b05      	ldr	r3, [sp, #20]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c2:	9b05      	ldr	r3, [sp, #20]
 800f7c4:	785b      	ldrb	r3, [r3, #1]
 800f7c6:	9304      	str	r3, [sp, #16]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d028      	beq.n	800f81e <__hexnan+0x9e>
 800f7cc:	9804      	ldr	r0, [sp, #16]
 800f7ce:	f7ff fd78 	bl	800f2c2 <__hexdig_fun>
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	d154      	bne.n	800f880 <__hexnan+0x100>
 800f7d6:	9b04      	ldr	r3, [sp, #16]
 800f7d8:	2b20      	cmp	r3, #32
 800f7da:	d819      	bhi.n	800f810 <__hexnan+0x90>
 800f7dc:	9b03      	ldr	r3, [sp, #12]
 800f7de:	9a07      	ldr	r2, [sp, #28]
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	dd12      	ble.n	800f80a <__hexnan+0x8a>
 800f7e4:	42b4      	cmp	r4, r6
 800f7e6:	d206      	bcs.n	800f7f6 <__hexnan+0x76>
 800f7e8:	2d07      	cmp	r5, #7
 800f7ea:	dc04      	bgt.n	800f7f6 <__hexnan+0x76>
 800f7ec:	002a      	movs	r2, r5
 800f7ee:	0031      	movs	r1, r6
 800f7f0:	0020      	movs	r0, r4
 800f7f2:	f7ff ff9f 	bl	800f734 <L_shift>
 800f7f6:	9b01      	ldr	r3, [sp, #4]
 800f7f8:	2508      	movs	r5, #8
 800f7fa:	429c      	cmp	r4, r3
 800f7fc:	d905      	bls.n	800f80a <__hexnan+0x8a>
 800f7fe:	1f26      	subs	r6, r4, #4
 800f800:	2500      	movs	r5, #0
 800f802:	0034      	movs	r4, r6
 800f804:	9b03      	ldr	r3, [sp, #12]
 800f806:	6035      	str	r5, [r6, #0]
 800f808:	9307      	str	r3, [sp, #28]
 800f80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f80c:	9305      	str	r3, [sp, #20]
 800f80e:	e7d5      	b.n	800f7bc <__hexnan+0x3c>
 800f810:	9b04      	ldr	r3, [sp, #16]
 800f812:	2b29      	cmp	r3, #41	; 0x29
 800f814:	d159      	bne.n	800f8ca <__hexnan+0x14a>
 800f816:	9b05      	ldr	r3, [sp, #20]
 800f818:	9a08      	ldr	r2, [sp, #32]
 800f81a:	3302      	adds	r3, #2
 800f81c:	6013      	str	r3, [r2, #0]
 800f81e:	9b03      	ldr	r3, [sp, #12]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d052      	beq.n	800f8ca <__hexnan+0x14a>
 800f824:	42b4      	cmp	r4, r6
 800f826:	d206      	bcs.n	800f836 <__hexnan+0xb6>
 800f828:	2d07      	cmp	r5, #7
 800f82a:	dc04      	bgt.n	800f836 <__hexnan+0xb6>
 800f82c:	002a      	movs	r2, r5
 800f82e:	0031      	movs	r1, r6
 800f830:	0020      	movs	r0, r4
 800f832:	f7ff ff7f 	bl	800f734 <L_shift>
 800f836:	9b01      	ldr	r3, [sp, #4]
 800f838:	429c      	cmp	r4, r3
 800f83a:	d935      	bls.n	800f8a8 <__hexnan+0x128>
 800f83c:	001a      	movs	r2, r3
 800f83e:	0023      	movs	r3, r4
 800f840:	cb02      	ldmia	r3!, {r1}
 800f842:	c202      	stmia	r2!, {r1}
 800f844:	429f      	cmp	r7, r3
 800f846:	d2fb      	bcs.n	800f840 <__hexnan+0xc0>
 800f848:	9b02      	ldr	r3, [sp, #8]
 800f84a:	1c62      	adds	r2, r4, #1
 800f84c:	1ed9      	subs	r1, r3, #3
 800f84e:	2304      	movs	r3, #4
 800f850:	4291      	cmp	r1, r2
 800f852:	d305      	bcc.n	800f860 <__hexnan+0xe0>
 800f854:	9b02      	ldr	r3, [sp, #8]
 800f856:	3b04      	subs	r3, #4
 800f858:	1b1b      	subs	r3, r3, r4
 800f85a:	089b      	lsrs	r3, r3, #2
 800f85c:	3301      	adds	r3, #1
 800f85e:	009b      	lsls	r3, r3, #2
 800f860:	9a01      	ldr	r2, [sp, #4]
 800f862:	18d3      	adds	r3, r2, r3
 800f864:	2200      	movs	r2, #0
 800f866:	c304      	stmia	r3!, {r2}
 800f868:	429f      	cmp	r7, r3
 800f86a:	d2fc      	bcs.n	800f866 <__hexnan+0xe6>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d104      	bne.n	800f87c <__hexnan+0xfc>
 800f872:	9b01      	ldr	r3, [sp, #4]
 800f874:	429f      	cmp	r7, r3
 800f876:	d126      	bne.n	800f8c6 <__hexnan+0x146>
 800f878:	2301      	movs	r3, #1
 800f87a:	603b      	str	r3, [r7, #0]
 800f87c:	2005      	movs	r0, #5
 800f87e:	e025      	b.n	800f8cc <__hexnan+0x14c>
 800f880:	9b03      	ldr	r3, [sp, #12]
 800f882:	3501      	adds	r5, #1
 800f884:	3301      	adds	r3, #1
 800f886:	9303      	str	r3, [sp, #12]
 800f888:	2d08      	cmp	r5, #8
 800f88a:	dd06      	ble.n	800f89a <__hexnan+0x11a>
 800f88c:	9b01      	ldr	r3, [sp, #4]
 800f88e:	429c      	cmp	r4, r3
 800f890:	d9bb      	bls.n	800f80a <__hexnan+0x8a>
 800f892:	2300      	movs	r3, #0
 800f894:	2501      	movs	r5, #1
 800f896:	3c04      	subs	r4, #4
 800f898:	6023      	str	r3, [r4, #0]
 800f89a:	220f      	movs	r2, #15
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	4010      	ands	r0, r2
 800f8a0:	011b      	lsls	r3, r3, #4
 800f8a2:	4303      	orrs	r3, r0
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	e7b0      	b.n	800f80a <__hexnan+0x8a>
 800f8a8:	9b06      	ldr	r3, [sp, #24]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d0de      	beq.n	800f86c <__hexnan+0xec>
 800f8ae:	2320      	movs	r3, #32
 800f8b0:	9a06      	ldr	r2, [sp, #24]
 800f8b2:	9902      	ldr	r1, [sp, #8]
 800f8b4:	1a9b      	subs	r3, r3, r2
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	4252      	negs	r2, r2
 800f8ba:	40da      	lsrs	r2, r3
 800f8bc:	3904      	subs	r1, #4
 800f8be:	680b      	ldr	r3, [r1, #0]
 800f8c0:	4013      	ands	r3, r2
 800f8c2:	600b      	str	r3, [r1, #0]
 800f8c4:	e7d2      	b.n	800f86c <__hexnan+0xec>
 800f8c6:	3f04      	subs	r7, #4
 800f8c8:	e7d0      	b.n	800f86c <__hexnan+0xec>
 800f8ca:	2004      	movs	r0, #4
 800f8cc:	b00b      	add	sp, #44	; 0x2c
 800f8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f8d0 <__ascii_mbtowc>:
 800f8d0:	b082      	sub	sp, #8
 800f8d2:	2900      	cmp	r1, #0
 800f8d4:	d100      	bne.n	800f8d8 <__ascii_mbtowc+0x8>
 800f8d6:	a901      	add	r1, sp, #4
 800f8d8:	1e10      	subs	r0, r2, #0
 800f8da:	d006      	beq.n	800f8ea <__ascii_mbtowc+0x1a>
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d006      	beq.n	800f8ee <__ascii_mbtowc+0x1e>
 800f8e0:	7813      	ldrb	r3, [r2, #0]
 800f8e2:	600b      	str	r3, [r1, #0]
 800f8e4:	7810      	ldrb	r0, [r2, #0]
 800f8e6:	1e43      	subs	r3, r0, #1
 800f8e8:	4198      	sbcs	r0, r3
 800f8ea:	b002      	add	sp, #8
 800f8ec:	4770      	bx	lr
 800f8ee:	2002      	movs	r0, #2
 800f8f0:	4240      	negs	r0, r0
 800f8f2:	e7fa      	b.n	800f8ea <__ascii_mbtowc+0x1a>

0800f8f4 <_Balloc>:
 800f8f4:	b570      	push	{r4, r5, r6, lr}
 800f8f6:	69c5      	ldr	r5, [r0, #28]
 800f8f8:	0006      	movs	r6, r0
 800f8fa:	000c      	movs	r4, r1
 800f8fc:	2d00      	cmp	r5, #0
 800f8fe:	d10e      	bne.n	800f91e <_Balloc+0x2a>
 800f900:	2010      	movs	r0, #16
 800f902:	f7fc fc31 	bl	800c168 <malloc>
 800f906:	1e02      	subs	r2, r0, #0
 800f908:	61f0      	str	r0, [r6, #28]
 800f90a:	d104      	bne.n	800f916 <_Balloc+0x22>
 800f90c:	216b      	movs	r1, #107	; 0x6b
 800f90e:	4b19      	ldr	r3, [pc, #100]	; (800f974 <_Balloc+0x80>)
 800f910:	4819      	ldr	r0, [pc, #100]	; (800f978 <_Balloc+0x84>)
 800f912:	f7fe fd7b 	bl	800e40c <__assert_func>
 800f916:	6045      	str	r5, [r0, #4]
 800f918:	6085      	str	r5, [r0, #8]
 800f91a:	6005      	str	r5, [r0, #0]
 800f91c:	60c5      	str	r5, [r0, #12]
 800f91e:	69f5      	ldr	r5, [r6, #28]
 800f920:	68eb      	ldr	r3, [r5, #12]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d013      	beq.n	800f94e <_Balloc+0x5a>
 800f926:	69f3      	ldr	r3, [r6, #28]
 800f928:	00a2      	lsls	r2, r4, #2
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	189b      	adds	r3, r3, r2
 800f92e:	6818      	ldr	r0, [r3, #0]
 800f930:	2800      	cmp	r0, #0
 800f932:	d118      	bne.n	800f966 <_Balloc+0x72>
 800f934:	2101      	movs	r1, #1
 800f936:	000d      	movs	r5, r1
 800f938:	40a5      	lsls	r5, r4
 800f93a:	1d6a      	adds	r2, r5, #5
 800f93c:	0030      	movs	r0, r6
 800f93e:	0092      	lsls	r2, r2, #2
 800f940:	f000 fee2 	bl	8010708 <_calloc_r>
 800f944:	2800      	cmp	r0, #0
 800f946:	d00c      	beq.n	800f962 <_Balloc+0x6e>
 800f948:	6044      	str	r4, [r0, #4]
 800f94a:	6085      	str	r5, [r0, #8]
 800f94c:	e00d      	b.n	800f96a <_Balloc+0x76>
 800f94e:	2221      	movs	r2, #33	; 0x21
 800f950:	2104      	movs	r1, #4
 800f952:	0030      	movs	r0, r6
 800f954:	f000 fed8 	bl	8010708 <_calloc_r>
 800f958:	69f3      	ldr	r3, [r6, #28]
 800f95a:	60e8      	str	r0, [r5, #12]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1e1      	bne.n	800f926 <_Balloc+0x32>
 800f962:	2000      	movs	r0, #0
 800f964:	bd70      	pop	{r4, r5, r6, pc}
 800f966:	6802      	ldr	r2, [r0, #0]
 800f968:	601a      	str	r2, [r3, #0]
 800f96a:	2300      	movs	r3, #0
 800f96c:	6103      	str	r3, [r0, #16]
 800f96e:	60c3      	str	r3, [r0, #12]
 800f970:	e7f8      	b.n	800f964 <_Balloc+0x70>
 800f972:	46c0      	nop			; (mov r8, r8)
 800f974:	0801309a 	.word	0x0801309a
 800f978:	08013225 	.word	0x08013225

0800f97c <_Bfree>:
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	69c6      	ldr	r6, [r0, #28]
 800f980:	0005      	movs	r5, r0
 800f982:	000c      	movs	r4, r1
 800f984:	2e00      	cmp	r6, #0
 800f986:	d10e      	bne.n	800f9a6 <_Bfree+0x2a>
 800f988:	2010      	movs	r0, #16
 800f98a:	f7fc fbed 	bl	800c168 <malloc>
 800f98e:	1e02      	subs	r2, r0, #0
 800f990:	61e8      	str	r0, [r5, #28]
 800f992:	d104      	bne.n	800f99e <_Bfree+0x22>
 800f994:	218f      	movs	r1, #143	; 0x8f
 800f996:	4b09      	ldr	r3, [pc, #36]	; (800f9bc <_Bfree+0x40>)
 800f998:	4809      	ldr	r0, [pc, #36]	; (800f9c0 <_Bfree+0x44>)
 800f99a:	f7fe fd37 	bl	800e40c <__assert_func>
 800f99e:	6046      	str	r6, [r0, #4]
 800f9a0:	6086      	str	r6, [r0, #8]
 800f9a2:	6006      	str	r6, [r0, #0]
 800f9a4:	60c6      	str	r6, [r0, #12]
 800f9a6:	2c00      	cmp	r4, #0
 800f9a8:	d007      	beq.n	800f9ba <_Bfree+0x3e>
 800f9aa:	69eb      	ldr	r3, [r5, #28]
 800f9ac:	6862      	ldr	r2, [r4, #4]
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	0092      	lsls	r2, r2, #2
 800f9b2:	189b      	adds	r3, r3, r2
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	6022      	str	r2, [r4, #0]
 800f9b8:	601c      	str	r4, [r3, #0]
 800f9ba:	bd70      	pop	{r4, r5, r6, pc}
 800f9bc:	0801309a 	.word	0x0801309a
 800f9c0:	08013225 	.word	0x08013225

0800f9c4 <__multadd>:
 800f9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9c6:	000e      	movs	r6, r1
 800f9c8:	9001      	str	r0, [sp, #4]
 800f9ca:	000c      	movs	r4, r1
 800f9cc:	001d      	movs	r5, r3
 800f9ce:	2000      	movs	r0, #0
 800f9d0:	690f      	ldr	r7, [r1, #16]
 800f9d2:	3614      	adds	r6, #20
 800f9d4:	6833      	ldr	r3, [r6, #0]
 800f9d6:	3001      	adds	r0, #1
 800f9d8:	b299      	uxth	r1, r3
 800f9da:	4351      	muls	r1, r2
 800f9dc:	0c1b      	lsrs	r3, r3, #16
 800f9de:	4353      	muls	r3, r2
 800f9e0:	1949      	adds	r1, r1, r5
 800f9e2:	0c0d      	lsrs	r5, r1, #16
 800f9e4:	195b      	adds	r3, r3, r5
 800f9e6:	0c1d      	lsrs	r5, r3, #16
 800f9e8:	b289      	uxth	r1, r1
 800f9ea:	041b      	lsls	r3, r3, #16
 800f9ec:	185b      	adds	r3, r3, r1
 800f9ee:	c608      	stmia	r6!, {r3}
 800f9f0:	4287      	cmp	r7, r0
 800f9f2:	dcef      	bgt.n	800f9d4 <__multadd+0x10>
 800f9f4:	2d00      	cmp	r5, #0
 800f9f6:	d022      	beq.n	800fa3e <__multadd+0x7a>
 800f9f8:	68a3      	ldr	r3, [r4, #8]
 800f9fa:	42bb      	cmp	r3, r7
 800f9fc:	dc19      	bgt.n	800fa32 <__multadd+0x6e>
 800f9fe:	6861      	ldr	r1, [r4, #4]
 800fa00:	9801      	ldr	r0, [sp, #4]
 800fa02:	3101      	adds	r1, #1
 800fa04:	f7ff ff76 	bl	800f8f4 <_Balloc>
 800fa08:	1e06      	subs	r6, r0, #0
 800fa0a:	d105      	bne.n	800fa18 <__multadd+0x54>
 800fa0c:	0032      	movs	r2, r6
 800fa0e:	21ba      	movs	r1, #186	; 0xba
 800fa10:	4b0c      	ldr	r3, [pc, #48]	; (800fa44 <__multadd+0x80>)
 800fa12:	480d      	ldr	r0, [pc, #52]	; (800fa48 <__multadd+0x84>)
 800fa14:	f7fe fcfa 	bl	800e40c <__assert_func>
 800fa18:	0021      	movs	r1, r4
 800fa1a:	6922      	ldr	r2, [r4, #16]
 800fa1c:	310c      	adds	r1, #12
 800fa1e:	3202      	adds	r2, #2
 800fa20:	0092      	lsls	r2, r2, #2
 800fa22:	300c      	adds	r0, #12
 800fa24:	f7fe fcde 	bl	800e3e4 <memcpy>
 800fa28:	0021      	movs	r1, r4
 800fa2a:	9801      	ldr	r0, [sp, #4]
 800fa2c:	f7ff ffa6 	bl	800f97c <_Bfree>
 800fa30:	0034      	movs	r4, r6
 800fa32:	1d3b      	adds	r3, r7, #4
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	18e3      	adds	r3, r4, r3
 800fa38:	605d      	str	r5, [r3, #4]
 800fa3a:	1c7b      	adds	r3, r7, #1
 800fa3c:	6123      	str	r3, [r4, #16]
 800fa3e:	0020      	movs	r0, r4
 800fa40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa42:	46c0      	nop			; (mov r8, r8)
 800fa44:	080131b4 	.word	0x080131b4
 800fa48:	08013225 	.word	0x08013225

0800fa4c <__s2b>:
 800fa4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa4e:	0006      	movs	r6, r0
 800fa50:	0018      	movs	r0, r3
 800fa52:	000c      	movs	r4, r1
 800fa54:	3008      	adds	r0, #8
 800fa56:	2109      	movs	r1, #9
 800fa58:	9301      	str	r3, [sp, #4]
 800fa5a:	0015      	movs	r5, r2
 800fa5c:	f7f0 fbfa 	bl	8000254 <__divsi3>
 800fa60:	2301      	movs	r3, #1
 800fa62:	2100      	movs	r1, #0
 800fa64:	4283      	cmp	r3, r0
 800fa66:	db0a      	blt.n	800fa7e <__s2b+0x32>
 800fa68:	0030      	movs	r0, r6
 800fa6a:	f7ff ff43 	bl	800f8f4 <_Balloc>
 800fa6e:	1e01      	subs	r1, r0, #0
 800fa70:	d108      	bne.n	800fa84 <__s2b+0x38>
 800fa72:	000a      	movs	r2, r1
 800fa74:	4b19      	ldr	r3, [pc, #100]	; (800fadc <__s2b+0x90>)
 800fa76:	481a      	ldr	r0, [pc, #104]	; (800fae0 <__s2b+0x94>)
 800fa78:	31d3      	adds	r1, #211	; 0xd3
 800fa7a:	f7fe fcc7 	bl	800e40c <__assert_func>
 800fa7e:	005b      	lsls	r3, r3, #1
 800fa80:	3101      	adds	r1, #1
 800fa82:	e7ef      	b.n	800fa64 <__s2b+0x18>
 800fa84:	9b08      	ldr	r3, [sp, #32]
 800fa86:	6143      	str	r3, [r0, #20]
 800fa88:	2301      	movs	r3, #1
 800fa8a:	6103      	str	r3, [r0, #16]
 800fa8c:	2d09      	cmp	r5, #9
 800fa8e:	dd18      	ble.n	800fac2 <__s2b+0x76>
 800fa90:	0023      	movs	r3, r4
 800fa92:	3309      	adds	r3, #9
 800fa94:	001f      	movs	r7, r3
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	1964      	adds	r4, r4, r5
 800fa9a:	783b      	ldrb	r3, [r7, #0]
 800fa9c:	220a      	movs	r2, #10
 800fa9e:	0030      	movs	r0, r6
 800faa0:	3b30      	subs	r3, #48	; 0x30
 800faa2:	f7ff ff8f 	bl	800f9c4 <__multadd>
 800faa6:	3701      	adds	r7, #1
 800faa8:	0001      	movs	r1, r0
 800faaa:	42a7      	cmp	r7, r4
 800faac:	d1f5      	bne.n	800fa9a <__s2b+0x4e>
 800faae:	002c      	movs	r4, r5
 800fab0:	9b00      	ldr	r3, [sp, #0]
 800fab2:	3c08      	subs	r4, #8
 800fab4:	191c      	adds	r4, r3, r4
 800fab6:	002f      	movs	r7, r5
 800fab8:	9b01      	ldr	r3, [sp, #4]
 800faba:	429f      	cmp	r7, r3
 800fabc:	db04      	blt.n	800fac8 <__s2b+0x7c>
 800fabe:	0008      	movs	r0, r1
 800fac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fac2:	2509      	movs	r5, #9
 800fac4:	340a      	adds	r4, #10
 800fac6:	e7f6      	b.n	800fab6 <__s2b+0x6a>
 800fac8:	1b63      	subs	r3, r4, r5
 800faca:	5ddb      	ldrb	r3, [r3, r7]
 800facc:	220a      	movs	r2, #10
 800face:	0030      	movs	r0, r6
 800fad0:	3b30      	subs	r3, #48	; 0x30
 800fad2:	f7ff ff77 	bl	800f9c4 <__multadd>
 800fad6:	3701      	adds	r7, #1
 800fad8:	0001      	movs	r1, r0
 800fada:	e7ed      	b.n	800fab8 <__s2b+0x6c>
 800fadc:	080131b4 	.word	0x080131b4
 800fae0:	08013225 	.word	0x08013225

0800fae4 <__hi0bits>:
 800fae4:	0003      	movs	r3, r0
 800fae6:	0c02      	lsrs	r2, r0, #16
 800fae8:	2000      	movs	r0, #0
 800faea:	4282      	cmp	r2, r0
 800faec:	d101      	bne.n	800faf2 <__hi0bits+0xe>
 800faee:	041b      	lsls	r3, r3, #16
 800faf0:	3010      	adds	r0, #16
 800faf2:	0e1a      	lsrs	r2, r3, #24
 800faf4:	d101      	bne.n	800fafa <__hi0bits+0x16>
 800faf6:	3008      	adds	r0, #8
 800faf8:	021b      	lsls	r3, r3, #8
 800fafa:	0f1a      	lsrs	r2, r3, #28
 800fafc:	d101      	bne.n	800fb02 <__hi0bits+0x1e>
 800fafe:	3004      	adds	r0, #4
 800fb00:	011b      	lsls	r3, r3, #4
 800fb02:	0f9a      	lsrs	r2, r3, #30
 800fb04:	d101      	bne.n	800fb0a <__hi0bits+0x26>
 800fb06:	3002      	adds	r0, #2
 800fb08:	009b      	lsls	r3, r3, #2
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	db03      	blt.n	800fb16 <__hi0bits+0x32>
 800fb0e:	3001      	adds	r0, #1
 800fb10:	005b      	lsls	r3, r3, #1
 800fb12:	d400      	bmi.n	800fb16 <__hi0bits+0x32>
 800fb14:	2020      	movs	r0, #32
 800fb16:	4770      	bx	lr

0800fb18 <__lo0bits>:
 800fb18:	6803      	ldr	r3, [r0, #0]
 800fb1a:	0001      	movs	r1, r0
 800fb1c:	2207      	movs	r2, #7
 800fb1e:	0018      	movs	r0, r3
 800fb20:	4010      	ands	r0, r2
 800fb22:	4213      	tst	r3, r2
 800fb24:	d00d      	beq.n	800fb42 <__lo0bits+0x2a>
 800fb26:	3a06      	subs	r2, #6
 800fb28:	2000      	movs	r0, #0
 800fb2a:	4213      	tst	r3, r2
 800fb2c:	d105      	bne.n	800fb3a <__lo0bits+0x22>
 800fb2e:	3002      	adds	r0, #2
 800fb30:	4203      	tst	r3, r0
 800fb32:	d003      	beq.n	800fb3c <__lo0bits+0x24>
 800fb34:	40d3      	lsrs	r3, r2
 800fb36:	0010      	movs	r0, r2
 800fb38:	600b      	str	r3, [r1, #0]
 800fb3a:	4770      	bx	lr
 800fb3c:	089b      	lsrs	r3, r3, #2
 800fb3e:	600b      	str	r3, [r1, #0]
 800fb40:	e7fb      	b.n	800fb3a <__lo0bits+0x22>
 800fb42:	b29a      	uxth	r2, r3
 800fb44:	2a00      	cmp	r2, #0
 800fb46:	d101      	bne.n	800fb4c <__lo0bits+0x34>
 800fb48:	2010      	movs	r0, #16
 800fb4a:	0c1b      	lsrs	r3, r3, #16
 800fb4c:	b2da      	uxtb	r2, r3
 800fb4e:	2a00      	cmp	r2, #0
 800fb50:	d101      	bne.n	800fb56 <__lo0bits+0x3e>
 800fb52:	3008      	adds	r0, #8
 800fb54:	0a1b      	lsrs	r3, r3, #8
 800fb56:	071a      	lsls	r2, r3, #28
 800fb58:	d101      	bne.n	800fb5e <__lo0bits+0x46>
 800fb5a:	3004      	adds	r0, #4
 800fb5c:	091b      	lsrs	r3, r3, #4
 800fb5e:	079a      	lsls	r2, r3, #30
 800fb60:	d101      	bne.n	800fb66 <__lo0bits+0x4e>
 800fb62:	3002      	adds	r0, #2
 800fb64:	089b      	lsrs	r3, r3, #2
 800fb66:	07da      	lsls	r2, r3, #31
 800fb68:	d4e9      	bmi.n	800fb3e <__lo0bits+0x26>
 800fb6a:	3001      	adds	r0, #1
 800fb6c:	085b      	lsrs	r3, r3, #1
 800fb6e:	d1e6      	bne.n	800fb3e <__lo0bits+0x26>
 800fb70:	2020      	movs	r0, #32
 800fb72:	e7e2      	b.n	800fb3a <__lo0bits+0x22>

0800fb74 <__i2b>:
 800fb74:	b510      	push	{r4, lr}
 800fb76:	000c      	movs	r4, r1
 800fb78:	2101      	movs	r1, #1
 800fb7a:	f7ff febb 	bl	800f8f4 <_Balloc>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d107      	bne.n	800fb92 <__i2b+0x1e>
 800fb82:	2146      	movs	r1, #70	; 0x46
 800fb84:	4c05      	ldr	r4, [pc, #20]	; (800fb9c <__i2b+0x28>)
 800fb86:	0002      	movs	r2, r0
 800fb88:	4b05      	ldr	r3, [pc, #20]	; (800fba0 <__i2b+0x2c>)
 800fb8a:	0020      	movs	r0, r4
 800fb8c:	31ff      	adds	r1, #255	; 0xff
 800fb8e:	f7fe fc3d 	bl	800e40c <__assert_func>
 800fb92:	2301      	movs	r3, #1
 800fb94:	6144      	str	r4, [r0, #20]
 800fb96:	6103      	str	r3, [r0, #16]
 800fb98:	bd10      	pop	{r4, pc}
 800fb9a:	46c0      	nop			; (mov r8, r8)
 800fb9c:	08013225 	.word	0x08013225
 800fba0:	080131b4 	.word	0x080131b4

0800fba4 <__multiply>:
 800fba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fba6:	0015      	movs	r5, r2
 800fba8:	690a      	ldr	r2, [r1, #16]
 800fbaa:	692b      	ldr	r3, [r5, #16]
 800fbac:	000c      	movs	r4, r1
 800fbae:	b08b      	sub	sp, #44	; 0x2c
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	da01      	bge.n	800fbb8 <__multiply+0x14>
 800fbb4:	002c      	movs	r4, r5
 800fbb6:	000d      	movs	r5, r1
 800fbb8:	6927      	ldr	r7, [r4, #16]
 800fbba:	692e      	ldr	r6, [r5, #16]
 800fbbc:	6861      	ldr	r1, [r4, #4]
 800fbbe:	19bb      	adds	r3, r7, r6
 800fbc0:	9303      	str	r3, [sp, #12]
 800fbc2:	68a3      	ldr	r3, [r4, #8]
 800fbc4:	19ba      	adds	r2, r7, r6
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	da00      	bge.n	800fbcc <__multiply+0x28>
 800fbca:	3101      	adds	r1, #1
 800fbcc:	f7ff fe92 	bl	800f8f4 <_Balloc>
 800fbd0:	9002      	str	r0, [sp, #8]
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	d106      	bne.n	800fbe4 <__multiply+0x40>
 800fbd6:	21b1      	movs	r1, #177	; 0xb1
 800fbd8:	4b48      	ldr	r3, [pc, #288]	; (800fcfc <__multiply+0x158>)
 800fbda:	4849      	ldr	r0, [pc, #292]	; (800fd00 <__multiply+0x15c>)
 800fbdc:	9a02      	ldr	r2, [sp, #8]
 800fbde:	0049      	lsls	r1, r1, #1
 800fbe0:	f7fe fc14 	bl	800e40c <__assert_func>
 800fbe4:	9b02      	ldr	r3, [sp, #8]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	3314      	adds	r3, #20
 800fbea:	469c      	mov	ip, r3
 800fbec:	19bb      	adds	r3, r7, r6
 800fbee:	009b      	lsls	r3, r3, #2
 800fbf0:	4463      	add	r3, ip
 800fbf2:	9304      	str	r3, [sp, #16]
 800fbf4:	4663      	mov	r3, ip
 800fbf6:	9904      	ldr	r1, [sp, #16]
 800fbf8:	428b      	cmp	r3, r1
 800fbfa:	d32a      	bcc.n	800fc52 <__multiply+0xae>
 800fbfc:	0023      	movs	r3, r4
 800fbfe:	00bf      	lsls	r7, r7, #2
 800fc00:	3314      	adds	r3, #20
 800fc02:	3514      	adds	r5, #20
 800fc04:	9308      	str	r3, [sp, #32]
 800fc06:	00b6      	lsls	r6, r6, #2
 800fc08:	19db      	adds	r3, r3, r7
 800fc0a:	9305      	str	r3, [sp, #20]
 800fc0c:	19ab      	adds	r3, r5, r6
 800fc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc10:	2304      	movs	r3, #4
 800fc12:	9306      	str	r3, [sp, #24]
 800fc14:	0023      	movs	r3, r4
 800fc16:	9a05      	ldr	r2, [sp, #20]
 800fc18:	3315      	adds	r3, #21
 800fc1a:	9501      	str	r5, [sp, #4]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d305      	bcc.n	800fc2c <__multiply+0x88>
 800fc20:	1b13      	subs	r3, r2, r4
 800fc22:	3b15      	subs	r3, #21
 800fc24:	089b      	lsrs	r3, r3, #2
 800fc26:	3301      	adds	r3, #1
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	9306      	str	r3, [sp, #24]
 800fc2c:	9b01      	ldr	r3, [sp, #4]
 800fc2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d310      	bcc.n	800fc56 <__multiply+0xb2>
 800fc34:	9b03      	ldr	r3, [sp, #12]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	dd05      	ble.n	800fc46 <__multiply+0xa2>
 800fc3a:	9b04      	ldr	r3, [sp, #16]
 800fc3c:	3b04      	subs	r3, #4
 800fc3e:	9304      	str	r3, [sp, #16]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d056      	beq.n	800fcf4 <__multiply+0x150>
 800fc46:	9b02      	ldr	r3, [sp, #8]
 800fc48:	9a03      	ldr	r2, [sp, #12]
 800fc4a:	0018      	movs	r0, r3
 800fc4c:	611a      	str	r2, [r3, #16]
 800fc4e:	b00b      	add	sp, #44	; 0x2c
 800fc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc52:	c304      	stmia	r3!, {r2}
 800fc54:	e7cf      	b.n	800fbf6 <__multiply+0x52>
 800fc56:	9b01      	ldr	r3, [sp, #4]
 800fc58:	6818      	ldr	r0, [r3, #0]
 800fc5a:	b280      	uxth	r0, r0
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d01e      	beq.n	800fc9e <__multiply+0xfa>
 800fc60:	4667      	mov	r7, ip
 800fc62:	2500      	movs	r5, #0
 800fc64:	9e08      	ldr	r6, [sp, #32]
 800fc66:	ce02      	ldmia	r6!, {r1}
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	9307      	str	r3, [sp, #28]
 800fc6c:	b28b      	uxth	r3, r1
 800fc6e:	4343      	muls	r3, r0
 800fc70:	001a      	movs	r2, r3
 800fc72:	466b      	mov	r3, sp
 800fc74:	8b9b      	ldrh	r3, [r3, #28]
 800fc76:	18d3      	adds	r3, r2, r3
 800fc78:	195b      	adds	r3, r3, r5
 800fc7a:	0c0d      	lsrs	r5, r1, #16
 800fc7c:	4345      	muls	r5, r0
 800fc7e:	9a07      	ldr	r2, [sp, #28]
 800fc80:	0c11      	lsrs	r1, r2, #16
 800fc82:	1869      	adds	r1, r5, r1
 800fc84:	0c1a      	lsrs	r2, r3, #16
 800fc86:	188a      	adds	r2, r1, r2
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	0c15      	lsrs	r5, r2, #16
 800fc8c:	0412      	lsls	r2, r2, #16
 800fc8e:	431a      	orrs	r2, r3
 800fc90:	9b05      	ldr	r3, [sp, #20]
 800fc92:	c704      	stmia	r7!, {r2}
 800fc94:	42b3      	cmp	r3, r6
 800fc96:	d8e6      	bhi.n	800fc66 <__multiply+0xc2>
 800fc98:	4663      	mov	r3, ip
 800fc9a:	9a06      	ldr	r2, [sp, #24]
 800fc9c:	509d      	str	r5, [r3, r2]
 800fc9e:	9b01      	ldr	r3, [sp, #4]
 800fca0:	6818      	ldr	r0, [r3, #0]
 800fca2:	0c00      	lsrs	r0, r0, #16
 800fca4:	d020      	beq.n	800fce8 <__multiply+0x144>
 800fca6:	4663      	mov	r3, ip
 800fca8:	0025      	movs	r5, r4
 800fcaa:	4661      	mov	r1, ip
 800fcac:	2700      	movs	r7, #0
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3514      	adds	r5, #20
 800fcb2:	682a      	ldr	r2, [r5, #0]
 800fcb4:	680e      	ldr	r6, [r1, #0]
 800fcb6:	b292      	uxth	r2, r2
 800fcb8:	4342      	muls	r2, r0
 800fcba:	0c36      	lsrs	r6, r6, #16
 800fcbc:	1992      	adds	r2, r2, r6
 800fcbe:	19d2      	adds	r2, r2, r7
 800fcc0:	0416      	lsls	r6, r2, #16
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	431e      	orrs	r6, r3
 800fcc6:	600e      	str	r6, [r1, #0]
 800fcc8:	cd40      	ldmia	r5!, {r6}
 800fcca:	684b      	ldr	r3, [r1, #4]
 800fccc:	0c36      	lsrs	r6, r6, #16
 800fcce:	4346      	muls	r6, r0
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	0c12      	lsrs	r2, r2, #16
 800fcd4:	18f3      	adds	r3, r6, r3
 800fcd6:	189b      	adds	r3, r3, r2
 800fcd8:	9a05      	ldr	r2, [sp, #20]
 800fcda:	0c1f      	lsrs	r7, r3, #16
 800fcdc:	3104      	adds	r1, #4
 800fcde:	42aa      	cmp	r2, r5
 800fce0:	d8e7      	bhi.n	800fcb2 <__multiply+0x10e>
 800fce2:	4662      	mov	r2, ip
 800fce4:	9906      	ldr	r1, [sp, #24]
 800fce6:	5053      	str	r3, [r2, r1]
 800fce8:	9b01      	ldr	r3, [sp, #4]
 800fcea:	3304      	adds	r3, #4
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	2304      	movs	r3, #4
 800fcf0:	449c      	add	ip, r3
 800fcf2:	e79b      	b.n	800fc2c <__multiply+0x88>
 800fcf4:	9b03      	ldr	r3, [sp, #12]
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	9303      	str	r3, [sp, #12]
 800fcfa:	e79b      	b.n	800fc34 <__multiply+0x90>
 800fcfc:	080131b4 	.word	0x080131b4
 800fd00:	08013225 	.word	0x08013225

0800fd04 <__pow5mult>:
 800fd04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd06:	2303      	movs	r3, #3
 800fd08:	0015      	movs	r5, r2
 800fd0a:	0007      	movs	r7, r0
 800fd0c:	000e      	movs	r6, r1
 800fd0e:	401a      	ands	r2, r3
 800fd10:	421d      	tst	r5, r3
 800fd12:	d008      	beq.n	800fd26 <__pow5mult+0x22>
 800fd14:	4925      	ldr	r1, [pc, #148]	; (800fdac <__pow5mult+0xa8>)
 800fd16:	3a01      	subs	r2, #1
 800fd18:	0092      	lsls	r2, r2, #2
 800fd1a:	5852      	ldr	r2, [r2, r1]
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	0031      	movs	r1, r6
 800fd20:	f7ff fe50 	bl	800f9c4 <__multadd>
 800fd24:	0006      	movs	r6, r0
 800fd26:	10ad      	asrs	r5, r5, #2
 800fd28:	d03d      	beq.n	800fda6 <__pow5mult+0xa2>
 800fd2a:	69fc      	ldr	r4, [r7, #28]
 800fd2c:	2c00      	cmp	r4, #0
 800fd2e:	d10f      	bne.n	800fd50 <__pow5mult+0x4c>
 800fd30:	2010      	movs	r0, #16
 800fd32:	f7fc fa19 	bl	800c168 <malloc>
 800fd36:	1e02      	subs	r2, r0, #0
 800fd38:	61f8      	str	r0, [r7, #28]
 800fd3a:	d105      	bne.n	800fd48 <__pow5mult+0x44>
 800fd3c:	21b4      	movs	r1, #180	; 0xb4
 800fd3e:	4b1c      	ldr	r3, [pc, #112]	; (800fdb0 <__pow5mult+0xac>)
 800fd40:	481c      	ldr	r0, [pc, #112]	; (800fdb4 <__pow5mult+0xb0>)
 800fd42:	31ff      	adds	r1, #255	; 0xff
 800fd44:	f7fe fb62 	bl	800e40c <__assert_func>
 800fd48:	6044      	str	r4, [r0, #4]
 800fd4a:	6084      	str	r4, [r0, #8]
 800fd4c:	6004      	str	r4, [r0, #0]
 800fd4e:	60c4      	str	r4, [r0, #12]
 800fd50:	69fb      	ldr	r3, [r7, #28]
 800fd52:	689c      	ldr	r4, [r3, #8]
 800fd54:	9301      	str	r3, [sp, #4]
 800fd56:	2c00      	cmp	r4, #0
 800fd58:	d108      	bne.n	800fd6c <__pow5mult+0x68>
 800fd5a:	0038      	movs	r0, r7
 800fd5c:	4916      	ldr	r1, [pc, #88]	; (800fdb8 <__pow5mult+0xb4>)
 800fd5e:	f7ff ff09 	bl	800fb74 <__i2b>
 800fd62:	9b01      	ldr	r3, [sp, #4]
 800fd64:	0004      	movs	r4, r0
 800fd66:	6098      	str	r0, [r3, #8]
 800fd68:	2300      	movs	r3, #0
 800fd6a:	6003      	str	r3, [r0, #0]
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	421d      	tst	r5, r3
 800fd70:	d00a      	beq.n	800fd88 <__pow5mult+0x84>
 800fd72:	0031      	movs	r1, r6
 800fd74:	0022      	movs	r2, r4
 800fd76:	0038      	movs	r0, r7
 800fd78:	f7ff ff14 	bl	800fba4 <__multiply>
 800fd7c:	0031      	movs	r1, r6
 800fd7e:	9001      	str	r0, [sp, #4]
 800fd80:	0038      	movs	r0, r7
 800fd82:	f7ff fdfb 	bl	800f97c <_Bfree>
 800fd86:	9e01      	ldr	r6, [sp, #4]
 800fd88:	106d      	asrs	r5, r5, #1
 800fd8a:	d00c      	beq.n	800fda6 <__pow5mult+0xa2>
 800fd8c:	6820      	ldr	r0, [r4, #0]
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	d107      	bne.n	800fda2 <__pow5mult+0x9e>
 800fd92:	0022      	movs	r2, r4
 800fd94:	0021      	movs	r1, r4
 800fd96:	0038      	movs	r0, r7
 800fd98:	f7ff ff04 	bl	800fba4 <__multiply>
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	6020      	str	r0, [r4, #0]
 800fda0:	6003      	str	r3, [r0, #0]
 800fda2:	0004      	movs	r4, r0
 800fda4:	e7e2      	b.n	800fd6c <__pow5mult+0x68>
 800fda6:	0030      	movs	r0, r6
 800fda8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fdaa:	46c0      	nop			; (mov r8, r8)
 800fdac:	08013370 	.word	0x08013370
 800fdb0:	0801309a 	.word	0x0801309a
 800fdb4:	08013225 	.word	0x08013225
 800fdb8:	00000271 	.word	0x00000271

0800fdbc <__lshift>:
 800fdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdbe:	000c      	movs	r4, r1
 800fdc0:	0017      	movs	r7, r2
 800fdc2:	6923      	ldr	r3, [r4, #16]
 800fdc4:	1155      	asrs	r5, r2, #5
 800fdc6:	b087      	sub	sp, #28
 800fdc8:	18eb      	adds	r3, r5, r3
 800fdca:	9302      	str	r3, [sp, #8]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	9301      	str	r3, [sp, #4]
 800fdd0:	6849      	ldr	r1, [r1, #4]
 800fdd2:	68a3      	ldr	r3, [r4, #8]
 800fdd4:	9004      	str	r0, [sp, #16]
 800fdd6:	9a01      	ldr	r2, [sp, #4]
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	db10      	blt.n	800fdfe <__lshift+0x42>
 800fddc:	9804      	ldr	r0, [sp, #16]
 800fdde:	f7ff fd89 	bl	800f8f4 <_Balloc>
 800fde2:	2300      	movs	r3, #0
 800fde4:	0002      	movs	r2, r0
 800fde6:	0006      	movs	r6, r0
 800fde8:	0019      	movs	r1, r3
 800fdea:	3214      	adds	r2, #20
 800fdec:	4298      	cmp	r0, r3
 800fdee:	d10c      	bne.n	800fe0a <__lshift+0x4e>
 800fdf0:	31df      	adds	r1, #223	; 0xdf
 800fdf2:	0032      	movs	r2, r6
 800fdf4:	4b26      	ldr	r3, [pc, #152]	; (800fe90 <__lshift+0xd4>)
 800fdf6:	4827      	ldr	r0, [pc, #156]	; (800fe94 <__lshift+0xd8>)
 800fdf8:	31ff      	adds	r1, #255	; 0xff
 800fdfa:	f7fe fb07 	bl	800e40c <__assert_func>
 800fdfe:	3101      	adds	r1, #1
 800fe00:	005b      	lsls	r3, r3, #1
 800fe02:	e7e8      	b.n	800fdd6 <__lshift+0x1a>
 800fe04:	0098      	lsls	r0, r3, #2
 800fe06:	5011      	str	r1, [r2, r0]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	42ab      	cmp	r3, r5
 800fe0c:	dbfa      	blt.n	800fe04 <__lshift+0x48>
 800fe0e:	43eb      	mvns	r3, r5
 800fe10:	17db      	asrs	r3, r3, #31
 800fe12:	401d      	ands	r5, r3
 800fe14:	211f      	movs	r1, #31
 800fe16:	0023      	movs	r3, r4
 800fe18:	0038      	movs	r0, r7
 800fe1a:	00ad      	lsls	r5, r5, #2
 800fe1c:	1955      	adds	r5, r2, r5
 800fe1e:	6922      	ldr	r2, [r4, #16]
 800fe20:	3314      	adds	r3, #20
 800fe22:	0092      	lsls	r2, r2, #2
 800fe24:	4008      	ands	r0, r1
 800fe26:	4684      	mov	ip, r0
 800fe28:	189a      	adds	r2, r3, r2
 800fe2a:	420f      	tst	r7, r1
 800fe2c:	d02a      	beq.n	800fe84 <__lshift+0xc8>
 800fe2e:	3101      	adds	r1, #1
 800fe30:	1a09      	subs	r1, r1, r0
 800fe32:	9105      	str	r1, [sp, #20]
 800fe34:	2100      	movs	r1, #0
 800fe36:	9503      	str	r5, [sp, #12]
 800fe38:	4667      	mov	r7, ip
 800fe3a:	6818      	ldr	r0, [r3, #0]
 800fe3c:	40b8      	lsls	r0, r7
 800fe3e:	4308      	orrs	r0, r1
 800fe40:	9903      	ldr	r1, [sp, #12]
 800fe42:	c101      	stmia	r1!, {r0}
 800fe44:	9103      	str	r1, [sp, #12]
 800fe46:	9805      	ldr	r0, [sp, #20]
 800fe48:	cb02      	ldmia	r3!, {r1}
 800fe4a:	40c1      	lsrs	r1, r0
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d8f3      	bhi.n	800fe38 <__lshift+0x7c>
 800fe50:	0020      	movs	r0, r4
 800fe52:	3015      	adds	r0, #21
 800fe54:	2304      	movs	r3, #4
 800fe56:	4282      	cmp	r2, r0
 800fe58:	d304      	bcc.n	800fe64 <__lshift+0xa8>
 800fe5a:	1b13      	subs	r3, r2, r4
 800fe5c:	3b15      	subs	r3, #21
 800fe5e:	089b      	lsrs	r3, r3, #2
 800fe60:	3301      	adds	r3, #1
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	50e9      	str	r1, [r5, r3]
 800fe66:	2900      	cmp	r1, #0
 800fe68:	d002      	beq.n	800fe70 <__lshift+0xb4>
 800fe6a:	9b02      	ldr	r3, [sp, #8]
 800fe6c:	3302      	adds	r3, #2
 800fe6e:	9301      	str	r3, [sp, #4]
 800fe70:	9b01      	ldr	r3, [sp, #4]
 800fe72:	9804      	ldr	r0, [sp, #16]
 800fe74:	3b01      	subs	r3, #1
 800fe76:	0021      	movs	r1, r4
 800fe78:	6133      	str	r3, [r6, #16]
 800fe7a:	f7ff fd7f 	bl	800f97c <_Bfree>
 800fe7e:	0030      	movs	r0, r6
 800fe80:	b007      	add	sp, #28
 800fe82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe84:	cb02      	ldmia	r3!, {r1}
 800fe86:	c502      	stmia	r5!, {r1}
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d8fb      	bhi.n	800fe84 <__lshift+0xc8>
 800fe8c:	e7f0      	b.n	800fe70 <__lshift+0xb4>
 800fe8e:	46c0      	nop			; (mov r8, r8)
 800fe90:	080131b4 	.word	0x080131b4
 800fe94:	08013225 	.word	0x08013225

0800fe98 <__mcmp>:
 800fe98:	b530      	push	{r4, r5, lr}
 800fe9a:	690b      	ldr	r3, [r1, #16]
 800fe9c:	6904      	ldr	r4, [r0, #16]
 800fe9e:	0002      	movs	r2, r0
 800fea0:	1ae0      	subs	r0, r4, r3
 800fea2:	429c      	cmp	r4, r3
 800fea4:	d10e      	bne.n	800fec4 <__mcmp+0x2c>
 800fea6:	3214      	adds	r2, #20
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	3114      	adds	r1, #20
 800feac:	0014      	movs	r4, r2
 800feae:	18c9      	adds	r1, r1, r3
 800feb0:	18d2      	adds	r2, r2, r3
 800feb2:	3a04      	subs	r2, #4
 800feb4:	3904      	subs	r1, #4
 800feb6:	6815      	ldr	r5, [r2, #0]
 800feb8:	680b      	ldr	r3, [r1, #0]
 800feba:	429d      	cmp	r5, r3
 800febc:	d003      	beq.n	800fec6 <__mcmp+0x2e>
 800febe:	2001      	movs	r0, #1
 800fec0:	429d      	cmp	r5, r3
 800fec2:	d303      	bcc.n	800fecc <__mcmp+0x34>
 800fec4:	bd30      	pop	{r4, r5, pc}
 800fec6:	4294      	cmp	r4, r2
 800fec8:	d3f3      	bcc.n	800feb2 <__mcmp+0x1a>
 800feca:	e7fb      	b.n	800fec4 <__mcmp+0x2c>
 800fecc:	4240      	negs	r0, r0
 800fece:	e7f9      	b.n	800fec4 <__mcmp+0x2c>

0800fed0 <__mdiff>:
 800fed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fed2:	000e      	movs	r6, r1
 800fed4:	0007      	movs	r7, r0
 800fed6:	0011      	movs	r1, r2
 800fed8:	0030      	movs	r0, r6
 800feda:	b087      	sub	sp, #28
 800fedc:	0014      	movs	r4, r2
 800fede:	f7ff ffdb 	bl	800fe98 <__mcmp>
 800fee2:	1e05      	subs	r5, r0, #0
 800fee4:	d110      	bne.n	800ff08 <__mdiff+0x38>
 800fee6:	0001      	movs	r1, r0
 800fee8:	0038      	movs	r0, r7
 800feea:	f7ff fd03 	bl	800f8f4 <_Balloc>
 800feee:	1e02      	subs	r2, r0, #0
 800fef0:	d104      	bne.n	800fefc <__mdiff+0x2c>
 800fef2:	4b3f      	ldr	r3, [pc, #252]	; (800fff0 <__mdiff+0x120>)
 800fef4:	483f      	ldr	r0, [pc, #252]	; (800fff4 <__mdiff+0x124>)
 800fef6:	4940      	ldr	r1, [pc, #256]	; (800fff8 <__mdiff+0x128>)
 800fef8:	f7fe fa88 	bl	800e40c <__assert_func>
 800fefc:	2301      	movs	r3, #1
 800fefe:	6145      	str	r5, [r0, #20]
 800ff00:	6103      	str	r3, [r0, #16]
 800ff02:	0010      	movs	r0, r2
 800ff04:	b007      	add	sp, #28
 800ff06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff08:	2301      	movs	r3, #1
 800ff0a:	9301      	str	r3, [sp, #4]
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	db04      	blt.n	800ff1a <__mdiff+0x4a>
 800ff10:	0023      	movs	r3, r4
 800ff12:	0034      	movs	r4, r6
 800ff14:	001e      	movs	r6, r3
 800ff16:	2300      	movs	r3, #0
 800ff18:	9301      	str	r3, [sp, #4]
 800ff1a:	0038      	movs	r0, r7
 800ff1c:	6861      	ldr	r1, [r4, #4]
 800ff1e:	f7ff fce9 	bl	800f8f4 <_Balloc>
 800ff22:	1e02      	subs	r2, r0, #0
 800ff24:	d103      	bne.n	800ff2e <__mdiff+0x5e>
 800ff26:	4b32      	ldr	r3, [pc, #200]	; (800fff0 <__mdiff+0x120>)
 800ff28:	4832      	ldr	r0, [pc, #200]	; (800fff4 <__mdiff+0x124>)
 800ff2a:	4934      	ldr	r1, [pc, #208]	; (800fffc <__mdiff+0x12c>)
 800ff2c:	e7e4      	b.n	800fef8 <__mdiff+0x28>
 800ff2e:	9b01      	ldr	r3, [sp, #4]
 800ff30:	2700      	movs	r7, #0
 800ff32:	60c3      	str	r3, [r0, #12]
 800ff34:	6920      	ldr	r0, [r4, #16]
 800ff36:	3414      	adds	r4, #20
 800ff38:	0083      	lsls	r3, r0, #2
 800ff3a:	18e3      	adds	r3, r4, r3
 800ff3c:	0021      	movs	r1, r4
 800ff3e:	9401      	str	r4, [sp, #4]
 800ff40:	0034      	movs	r4, r6
 800ff42:	9302      	str	r3, [sp, #8]
 800ff44:	6933      	ldr	r3, [r6, #16]
 800ff46:	3414      	adds	r4, #20
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	18e3      	adds	r3, r4, r3
 800ff4c:	9303      	str	r3, [sp, #12]
 800ff4e:	0013      	movs	r3, r2
 800ff50:	3314      	adds	r3, #20
 800ff52:	469c      	mov	ip, r3
 800ff54:	9305      	str	r3, [sp, #20]
 800ff56:	9104      	str	r1, [sp, #16]
 800ff58:	9b04      	ldr	r3, [sp, #16]
 800ff5a:	cc02      	ldmia	r4!, {r1}
 800ff5c:	cb20      	ldmia	r3!, {r5}
 800ff5e:	9304      	str	r3, [sp, #16]
 800ff60:	b2ab      	uxth	r3, r5
 800ff62:	19df      	adds	r7, r3, r7
 800ff64:	b28b      	uxth	r3, r1
 800ff66:	1afb      	subs	r3, r7, r3
 800ff68:	0c09      	lsrs	r1, r1, #16
 800ff6a:	0c2d      	lsrs	r5, r5, #16
 800ff6c:	1a6d      	subs	r5, r5, r1
 800ff6e:	1419      	asrs	r1, r3, #16
 800ff70:	1869      	adds	r1, r5, r1
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	140f      	asrs	r7, r1, #16
 800ff76:	0409      	lsls	r1, r1, #16
 800ff78:	4319      	orrs	r1, r3
 800ff7a:	4663      	mov	r3, ip
 800ff7c:	c302      	stmia	r3!, {r1}
 800ff7e:	469c      	mov	ip, r3
 800ff80:	9b03      	ldr	r3, [sp, #12]
 800ff82:	42a3      	cmp	r3, r4
 800ff84:	d8e8      	bhi.n	800ff58 <__mdiff+0x88>
 800ff86:	0031      	movs	r1, r6
 800ff88:	9c03      	ldr	r4, [sp, #12]
 800ff8a:	3115      	adds	r1, #21
 800ff8c:	2304      	movs	r3, #4
 800ff8e:	428c      	cmp	r4, r1
 800ff90:	d304      	bcc.n	800ff9c <__mdiff+0xcc>
 800ff92:	1ba3      	subs	r3, r4, r6
 800ff94:	3b15      	subs	r3, #21
 800ff96:	089b      	lsrs	r3, r3, #2
 800ff98:	3301      	adds	r3, #1
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	9901      	ldr	r1, [sp, #4]
 800ff9e:	18cd      	adds	r5, r1, r3
 800ffa0:	9905      	ldr	r1, [sp, #20]
 800ffa2:	002e      	movs	r6, r5
 800ffa4:	18cb      	adds	r3, r1, r3
 800ffa6:	469c      	mov	ip, r3
 800ffa8:	9902      	ldr	r1, [sp, #8]
 800ffaa:	428e      	cmp	r6, r1
 800ffac:	d310      	bcc.n	800ffd0 <__mdiff+0x100>
 800ffae:	9e02      	ldr	r6, [sp, #8]
 800ffb0:	1ee9      	subs	r1, r5, #3
 800ffb2:	2400      	movs	r4, #0
 800ffb4:	428e      	cmp	r6, r1
 800ffb6:	d304      	bcc.n	800ffc2 <__mdiff+0xf2>
 800ffb8:	0031      	movs	r1, r6
 800ffba:	3103      	adds	r1, #3
 800ffbc:	1b49      	subs	r1, r1, r5
 800ffbe:	0889      	lsrs	r1, r1, #2
 800ffc0:	008c      	lsls	r4, r1, #2
 800ffc2:	191b      	adds	r3, r3, r4
 800ffc4:	3b04      	subs	r3, #4
 800ffc6:	6819      	ldr	r1, [r3, #0]
 800ffc8:	2900      	cmp	r1, #0
 800ffca:	d00f      	beq.n	800ffec <__mdiff+0x11c>
 800ffcc:	6110      	str	r0, [r2, #16]
 800ffce:	e798      	b.n	800ff02 <__mdiff+0x32>
 800ffd0:	ce02      	ldmia	r6!, {r1}
 800ffd2:	b28c      	uxth	r4, r1
 800ffd4:	19e4      	adds	r4, r4, r7
 800ffd6:	0c0f      	lsrs	r7, r1, #16
 800ffd8:	1421      	asrs	r1, r4, #16
 800ffda:	1879      	adds	r1, r7, r1
 800ffdc:	b2a4      	uxth	r4, r4
 800ffde:	140f      	asrs	r7, r1, #16
 800ffe0:	0409      	lsls	r1, r1, #16
 800ffe2:	4321      	orrs	r1, r4
 800ffe4:	4664      	mov	r4, ip
 800ffe6:	c402      	stmia	r4!, {r1}
 800ffe8:	46a4      	mov	ip, r4
 800ffea:	e7dd      	b.n	800ffa8 <__mdiff+0xd8>
 800ffec:	3801      	subs	r0, #1
 800ffee:	e7e9      	b.n	800ffc4 <__mdiff+0xf4>
 800fff0:	080131b4 	.word	0x080131b4
 800fff4:	08013225 	.word	0x08013225
 800fff8:	00000237 	.word	0x00000237
 800fffc:	00000245 	.word	0x00000245

08010000 <__ulp>:
 8010000:	2000      	movs	r0, #0
 8010002:	4b0b      	ldr	r3, [pc, #44]	; (8010030 <__ulp+0x30>)
 8010004:	4019      	ands	r1, r3
 8010006:	4b0b      	ldr	r3, [pc, #44]	; (8010034 <__ulp+0x34>)
 8010008:	18c9      	adds	r1, r1, r3
 801000a:	4281      	cmp	r1, r0
 801000c:	dc06      	bgt.n	801001c <__ulp+0x1c>
 801000e:	4249      	negs	r1, r1
 8010010:	150b      	asrs	r3, r1, #20
 8010012:	2b13      	cmp	r3, #19
 8010014:	dc03      	bgt.n	801001e <__ulp+0x1e>
 8010016:	2180      	movs	r1, #128	; 0x80
 8010018:	0309      	lsls	r1, r1, #12
 801001a:	4119      	asrs	r1, r3
 801001c:	4770      	bx	lr
 801001e:	3b14      	subs	r3, #20
 8010020:	2001      	movs	r0, #1
 8010022:	2b1e      	cmp	r3, #30
 8010024:	dc02      	bgt.n	801002c <__ulp+0x2c>
 8010026:	2080      	movs	r0, #128	; 0x80
 8010028:	0600      	lsls	r0, r0, #24
 801002a:	40d8      	lsrs	r0, r3
 801002c:	2100      	movs	r1, #0
 801002e:	e7f5      	b.n	801001c <__ulp+0x1c>
 8010030:	7ff00000 	.word	0x7ff00000
 8010034:	fcc00000 	.word	0xfcc00000

08010038 <__b2d>:
 8010038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801003a:	0006      	movs	r6, r0
 801003c:	6903      	ldr	r3, [r0, #16]
 801003e:	3614      	adds	r6, #20
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	18f3      	adds	r3, r6, r3
 8010044:	1f1d      	subs	r5, r3, #4
 8010046:	682c      	ldr	r4, [r5, #0]
 8010048:	000f      	movs	r7, r1
 801004a:	0020      	movs	r0, r4
 801004c:	9301      	str	r3, [sp, #4]
 801004e:	f7ff fd49 	bl	800fae4 <__hi0bits>
 8010052:	2220      	movs	r2, #32
 8010054:	1a12      	subs	r2, r2, r0
 8010056:	603a      	str	r2, [r7, #0]
 8010058:	0003      	movs	r3, r0
 801005a:	4a1c      	ldr	r2, [pc, #112]	; (80100cc <__b2d+0x94>)
 801005c:	280a      	cmp	r0, #10
 801005e:	dc15      	bgt.n	801008c <__b2d+0x54>
 8010060:	210b      	movs	r1, #11
 8010062:	0027      	movs	r7, r4
 8010064:	1a09      	subs	r1, r1, r0
 8010066:	40cf      	lsrs	r7, r1
 8010068:	433a      	orrs	r2, r7
 801006a:	468c      	mov	ip, r1
 801006c:	0011      	movs	r1, r2
 801006e:	2200      	movs	r2, #0
 8010070:	42ae      	cmp	r6, r5
 8010072:	d202      	bcs.n	801007a <__b2d+0x42>
 8010074:	9a01      	ldr	r2, [sp, #4]
 8010076:	3a08      	subs	r2, #8
 8010078:	6812      	ldr	r2, [r2, #0]
 801007a:	3315      	adds	r3, #21
 801007c:	409c      	lsls	r4, r3
 801007e:	4663      	mov	r3, ip
 8010080:	0027      	movs	r7, r4
 8010082:	40da      	lsrs	r2, r3
 8010084:	4317      	orrs	r7, r2
 8010086:	0038      	movs	r0, r7
 8010088:	b003      	add	sp, #12
 801008a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801008c:	2700      	movs	r7, #0
 801008e:	42ae      	cmp	r6, r5
 8010090:	d202      	bcs.n	8010098 <__b2d+0x60>
 8010092:	9d01      	ldr	r5, [sp, #4]
 8010094:	3d08      	subs	r5, #8
 8010096:	682f      	ldr	r7, [r5, #0]
 8010098:	210b      	movs	r1, #11
 801009a:	4249      	negs	r1, r1
 801009c:	468c      	mov	ip, r1
 801009e:	449c      	add	ip, r3
 80100a0:	2b0b      	cmp	r3, #11
 80100a2:	d010      	beq.n	80100c6 <__b2d+0x8e>
 80100a4:	4661      	mov	r1, ip
 80100a6:	2320      	movs	r3, #32
 80100a8:	408c      	lsls	r4, r1
 80100aa:	1a5b      	subs	r3, r3, r1
 80100ac:	0039      	movs	r1, r7
 80100ae:	40d9      	lsrs	r1, r3
 80100b0:	430c      	orrs	r4, r1
 80100b2:	4322      	orrs	r2, r4
 80100b4:	0011      	movs	r1, r2
 80100b6:	2200      	movs	r2, #0
 80100b8:	42b5      	cmp	r5, r6
 80100ba:	d901      	bls.n	80100c0 <__b2d+0x88>
 80100bc:	3d04      	subs	r5, #4
 80100be:	682a      	ldr	r2, [r5, #0]
 80100c0:	4664      	mov	r4, ip
 80100c2:	40a7      	lsls	r7, r4
 80100c4:	e7dd      	b.n	8010082 <__b2d+0x4a>
 80100c6:	4322      	orrs	r2, r4
 80100c8:	0011      	movs	r1, r2
 80100ca:	e7dc      	b.n	8010086 <__b2d+0x4e>
 80100cc:	3ff00000 	.word	0x3ff00000

080100d0 <__d2b>:
 80100d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100d2:	2101      	movs	r1, #1
 80100d4:	0014      	movs	r4, r2
 80100d6:	001d      	movs	r5, r3
 80100d8:	9f08      	ldr	r7, [sp, #32]
 80100da:	f7ff fc0b 	bl	800f8f4 <_Balloc>
 80100de:	1e06      	subs	r6, r0, #0
 80100e0:	d105      	bne.n	80100ee <__d2b+0x1e>
 80100e2:	0032      	movs	r2, r6
 80100e4:	4b24      	ldr	r3, [pc, #144]	; (8010178 <__d2b+0xa8>)
 80100e6:	4825      	ldr	r0, [pc, #148]	; (801017c <__d2b+0xac>)
 80100e8:	4925      	ldr	r1, [pc, #148]	; (8010180 <__d2b+0xb0>)
 80100ea:	f7fe f98f 	bl	800e40c <__assert_func>
 80100ee:	032b      	lsls	r3, r5, #12
 80100f0:	006d      	lsls	r5, r5, #1
 80100f2:	0b1b      	lsrs	r3, r3, #12
 80100f4:	0d6d      	lsrs	r5, r5, #21
 80100f6:	d125      	bne.n	8010144 <__d2b+0x74>
 80100f8:	9301      	str	r3, [sp, #4]
 80100fa:	2c00      	cmp	r4, #0
 80100fc:	d028      	beq.n	8010150 <__d2b+0x80>
 80100fe:	4668      	mov	r0, sp
 8010100:	9400      	str	r4, [sp, #0]
 8010102:	f7ff fd09 	bl	800fb18 <__lo0bits>
 8010106:	9b01      	ldr	r3, [sp, #4]
 8010108:	9900      	ldr	r1, [sp, #0]
 801010a:	2800      	cmp	r0, #0
 801010c:	d01e      	beq.n	801014c <__d2b+0x7c>
 801010e:	2220      	movs	r2, #32
 8010110:	001c      	movs	r4, r3
 8010112:	1a12      	subs	r2, r2, r0
 8010114:	4094      	lsls	r4, r2
 8010116:	0022      	movs	r2, r4
 8010118:	40c3      	lsrs	r3, r0
 801011a:	430a      	orrs	r2, r1
 801011c:	6172      	str	r2, [r6, #20]
 801011e:	9301      	str	r3, [sp, #4]
 8010120:	9c01      	ldr	r4, [sp, #4]
 8010122:	61b4      	str	r4, [r6, #24]
 8010124:	1e63      	subs	r3, r4, #1
 8010126:	419c      	sbcs	r4, r3
 8010128:	3401      	adds	r4, #1
 801012a:	6134      	str	r4, [r6, #16]
 801012c:	2d00      	cmp	r5, #0
 801012e:	d017      	beq.n	8010160 <__d2b+0x90>
 8010130:	2435      	movs	r4, #53	; 0x35
 8010132:	4b14      	ldr	r3, [pc, #80]	; (8010184 <__d2b+0xb4>)
 8010134:	18ed      	adds	r5, r5, r3
 8010136:	182d      	adds	r5, r5, r0
 8010138:	603d      	str	r5, [r7, #0]
 801013a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801013c:	1a24      	subs	r4, r4, r0
 801013e:	601c      	str	r4, [r3, #0]
 8010140:	0030      	movs	r0, r6
 8010142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010144:	2280      	movs	r2, #128	; 0x80
 8010146:	0352      	lsls	r2, r2, #13
 8010148:	4313      	orrs	r3, r2
 801014a:	e7d5      	b.n	80100f8 <__d2b+0x28>
 801014c:	6171      	str	r1, [r6, #20]
 801014e:	e7e7      	b.n	8010120 <__d2b+0x50>
 8010150:	a801      	add	r0, sp, #4
 8010152:	f7ff fce1 	bl	800fb18 <__lo0bits>
 8010156:	9b01      	ldr	r3, [sp, #4]
 8010158:	2401      	movs	r4, #1
 801015a:	6173      	str	r3, [r6, #20]
 801015c:	3020      	adds	r0, #32
 801015e:	e7e4      	b.n	801012a <__d2b+0x5a>
 8010160:	4b09      	ldr	r3, [pc, #36]	; (8010188 <__d2b+0xb8>)
 8010162:	18c0      	adds	r0, r0, r3
 8010164:	4b09      	ldr	r3, [pc, #36]	; (801018c <__d2b+0xbc>)
 8010166:	6038      	str	r0, [r7, #0]
 8010168:	18e3      	adds	r3, r4, r3
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	18f3      	adds	r3, r6, r3
 801016e:	6958      	ldr	r0, [r3, #20]
 8010170:	f7ff fcb8 	bl	800fae4 <__hi0bits>
 8010174:	0164      	lsls	r4, r4, #5
 8010176:	e7e0      	b.n	801013a <__d2b+0x6a>
 8010178:	080131b4 	.word	0x080131b4
 801017c:	08013225 	.word	0x08013225
 8010180:	0000030f 	.word	0x0000030f
 8010184:	fffffbcd 	.word	0xfffffbcd
 8010188:	fffffbce 	.word	0xfffffbce
 801018c:	3fffffff 	.word	0x3fffffff

08010190 <__ratio>:
 8010190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010192:	b087      	sub	sp, #28
 8010194:	000f      	movs	r7, r1
 8010196:	a904      	add	r1, sp, #16
 8010198:	0006      	movs	r6, r0
 801019a:	f7ff ff4d 	bl	8010038 <__b2d>
 801019e:	9000      	str	r0, [sp, #0]
 80101a0:	9101      	str	r1, [sp, #4]
 80101a2:	9c00      	ldr	r4, [sp, #0]
 80101a4:	9d01      	ldr	r5, [sp, #4]
 80101a6:	0038      	movs	r0, r7
 80101a8:	a905      	add	r1, sp, #20
 80101aa:	f7ff ff45 	bl	8010038 <__b2d>
 80101ae:	9002      	str	r0, [sp, #8]
 80101b0:	9103      	str	r1, [sp, #12]
 80101b2:	9a02      	ldr	r2, [sp, #8]
 80101b4:	9b03      	ldr	r3, [sp, #12]
 80101b6:	6930      	ldr	r0, [r6, #16]
 80101b8:	6939      	ldr	r1, [r7, #16]
 80101ba:	9e04      	ldr	r6, [sp, #16]
 80101bc:	1a40      	subs	r0, r0, r1
 80101be:	9905      	ldr	r1, [sp, #20]
 80101c0:	0140      	lsls	r0, r0, #5
 80101c2:	1a71      	subs	r1, r6, r1
 80101c4:	1841      	adds	r1, r0, r1
 80101c6:	0508      	lsls	r0, r1, #20
 80101c8:	2900      	cmp	r1, #0
 80101ca:	dd07      	ble.n	80101dc <__ratio+0x4c>
 80101cc:	9901      	ldr	r1, [sp, #4]
 80101ce:	1845      	adds	r5, r0, r1
 80101d0:	0020      	movs	r0, r4
 80101d2:	0029      	movs	r1, r5
 80101d4:	f7f1 fc84 	bl	8001ae0 <__aeabi_ddiv>
 80101d8:	b007      	add	sp, #28
 80101da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101dc:	9903      	ldr	r1, [sp, #12]
 80101de:	1a0b      	subs	r3, r1, r0
 80101e0:	e7f6      	b.n	80101d0 <__ratio+0x40>

080101e2 <__copybits>:
 80101e2:	b570      	push	{r4, r5, r6, lr}
 80101e4:	0014      	movs	r4, r2
 80101e6:	0005      	movs	r5, r0
 80101e8:	3901      	subs	r1, #1
 80101ea:	6913      	ldr	r3, [r2, #16]
 80101ec:	1149      	asrs	r1, r1, #5
 80101ee:	3101      	adds	r1, #1
 80101f0:	0089      	lsls	r1, r1, #2
 80101f2:	3414      	adds	r4, #20
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	1841      	adds	r1, r0, r1
 80101f8:	18e3      	adds	r3, r4, r3
 80101fa:	42a3      	cmp	r3, r4
 80101fc:	d80d      	bhi.n	801021a <__copybits+0x38>
 80101fe:	0014      	movs	r4, r2
 8010200:	3411      	adds	r4, #17
 8010202:	2500      	movs	r5, #0
 8010204:	429c      	cmp	r4, r3
 8010206:	d803      	bhi.n	8010210 <__copybits+0x2e>
 8010208:	1a9b      	subs	r3, r3, r2
 801020a:	3b11      	subs	r3, #17
 801020c:	089b      	lsrs	r3, r3, #2
 801020e:	009d      	lsls	r5, r3, #2
 8010210:	2300      	movs	r3, #0
 8010212:	1940      	adds	r0, r0, r5
 8010214:	4281      	cmp	r1, r0
 8010216:	d803      	bhi.n	8010220 <__copybits+0x3e>
 8010218:	bd70      	pop	{r4, r5, r6, pc}
 801021a:	cc40      	ldmia	r4!, {r6}
 801021c:	c540      	stmia	r5!, {r6}
 801021e:	e7ec      	b.n	80101fa <__copybits+0x18>
 8010220:	c008      	stmia	r0!, {r3}
 8010222:	e7f7      	b.n	8010214 <__copybits+0x32>

08010224 <__any_on>:
 8010224:	0002      	movs	r2, r0
 8010226:	6900      	ldr	r0, [r0, #16]
 8010228:	b510      	push	{r4, lr}
 801022a:	3214      	adds	r2, #20
 801022c:	114b      	asrs	r3, r1, #5
 801022e:	4298      	cmp	r0, r3
 8010230:	db13      	blt.n	801025a <__any_on+0x36>
 8010232:	dd0c      	ble.n	801024e <__any_on+0x2a>
 8010234:	241f      	movs	r4, #31
 8010236:	0008      	movs	r0, r1
 8010238:	4020      	ands	r0, r4
 801023a:	4221      	tst	r1, r4
 801023c:	d007      	beq.n	801024e <__any_on+0x2a>
 801023e:	0099      	lsls	r1, r3, #2
 8010240:	588c      	ldr	r4, [r1, r2]
 8010242:	0021      	movs	r1, r4
 8010244:	40c1      	lsrs	r1, r0
 8010246:	4081      	lsls	r1, r0
 8010248:	2001      	movs	r0, #1
 801024a:	428c      	cmp	r4, r1
 801024c:	d104      	bne.n	8010258 <__any_on+0x34>
 801024e:	009b      	lsls	r3, r3, #2
 8010250:	18d3      	adds	r3, r2, r3
 8010252:	4293      	cmp	r3, r2
 8010254:	d803      	bhi.n	801025e <__any_on+0x3a>
 8010256:	2000      	movs	r0, #0
 8010258:	bd10      	pop	{r4, pc}
 801025a:	0003      	movs	r3, r0
 801025c:	e7f7      	b.n	801024e <__any_on+0x2a>
 801025e:	3b04      	subs	r3, #4
 8010260:	6819      	ldr	r1, [r3, #0]
 8010262:	2900      	cmp	r1, #0
 8010264:	d0f5      	beq.n	8010252 <__any_on+0x2e>
 8010266:	2001      	movs	r0, #1
 8010268:	e7f6      	b.n	8010258 <__any_on+0x34>

0801026a <__ascii_wctomb>:
 801026a:	0003      	movs	r3, r0
 801026c:	1e08      	subs	r0, r1, #0
 801026e:	d005      	beq.n	801027c <__ascii_wctomb+0x12>
 8010270:	2aff      	cmp	r2, #255	; 0xff
 8010272:	d904      	bls.n	801027e <__ascii_wctomb+0x14>
 8010274:	228a      	movs	r2, #138	; 0x8a
 8010276:	2001      	movs	r0, #1
 8010278:	601a      	str	r2, [r3, #0]
 801027a:	4240      	negs	r0, r0
 801027c:	4770      	bx	lr
 801027e:	2001      	movs	r0, #1
 8010280:	700a      	strb	r2, [r1, #0]
 8010282:	e7fb      	b.n	801027c <__ascii_wctomb+0x12>

08010284 <__ssputs_r>:
 8010284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010286:	b085      	sub	sp, #20
 8010288:	9301      	str	r3, [sp, #4]
 801028a:	9203      	str	r2, [sp, #12]
 801028c:	688e      	ldr	r6, [r1, #8]
 801028e:	9a01      	ldr	r2, [sp, #4]
 8010290:	0007      	movs	r7, r0
 8010292:	000c      	movs	r4, r1
 8010294:	680b      	ldr	r3, [r1, #0]
 8010296:	4296      	cmp	r6, r2
 8010298:	d831      	bhi.n	80102fe <__ssputs_r+0x7a>
 801029a:	898a      	ldrh	r2, [r1, #12]
 801029c:	2190      	movs	r1, #144	; 0x90
 801029e:	00c9      	lsls	r1, r1, #3
 80102a0:	420a      	tst	r2, r1
 80102a2:	d029      	beq.n	80102f8 <__ssputs_r+0x74>
 80102a4:	2003      	movs	r0, #3
 80102a6:	6921      	ldr	r1, [r4, #16]
 80102a8:	1a5b      	subs	r3, r3, r1
 80102aa:	9302      	str	r3, [sp, #8]
 80102ac:	6963      	ldr	r3, [r4, #20]
 80102ae:	4343      	muls	r3, r0
 80102b0:	0fdd      	lsrs	r5, r3, #31
 80102b2:	18ed      	adds	r5, r5, r3
 80102b4:	9b01      	ldr	r3, [sp, #4]
 80102b6:	9802      	ldr	r0, [sp, #8]
 80102b8:	3301      	adds	r3, #1
 80102ba:	181b      	adds	r3, r3, r0
 80102bc:	106d      	asrs	r5, r5, #1
 80102be:	42ab      	cmp	r3, r5
 80102c0:	d900      	bls.n	80102c4 <__ssputs_r+0x40>
 80102c2:	001d      	movs	r5, r3
 80102c4:	0552      	lsls	r2, r2, #21
 80102c6:	d529      	bpl.n	801031c <__ssputs_r+0x98>
 80102c8:	0029      	movs	r1, r5
 80102ca:	0038      	movs	r0, r7
 80102cc:	f7fb ff78 	bl	800c1c0 <_malloc_r>
 80102d0:	1e06      	subs	r6, r0, #0
 80102d2:	d02d      	beq.n	8010330 <__ssputs_r+0xac>
 80102d4:	9a02      	ldr	r2, [sp, #8]
 80102d6:	6921      	ldr	r1, [r4, #16]
 80102d8:	f7fe f884 	bl	800e3e4 <memcpy>
 80102dc:	89a2      	ldrh	r2, [r4, #12]
 80102de:	4b19      	ldr	r3, [pc, #100]	; (8010344 <__ssputs_r+0xc0>)
 80102e0:	401a      	ands	r2, r3
 80102e2:	2380      	movs	r3, #128	; 0x80
 80102e4:	4313      	orrs	r3, r2
 80102e6:	81a3      	strh	r3, [r4, #12]
 80102e8:	9b02      	ldr	r3, [sp, #8]
 80102ea:	6126      	str	r6, [r4, #16]
 80102ec:	18f6      	adds	r6, r6, r3
 80102ee:	6026      	str	r6, [r4, #0]
 80102f0:	6165      	str	r5, [r4, #20]
 80102f2:	9e01      	ldr	r6, [sp, #4]
 80102f4:	1aed      	subs	r5, r5, r3
 80102f6:	60a5      	str	r5, [r4, #8]
 80102f8:	9b01      	ldr	r3, [sp, #4]
 80102fa:	429e      	cmp	r6, r3
 80102fc:	d900      	bls.n	8010300 <__ssputs_r+0x7c>
 80102fe:	9e01      	ldr	r6, [sp, #4]
 8010300:	0032      	movs	r2, r6
 8010302:	9903      	ldr	r1, [sp, #12]
 8010304:	6820      	ldr	r0, [r4, #0]
 8010306:	f000 f9e5 	bl	80106d4 <memmove>
 801030a:	2000      	movs	r0, #0
 801030c:	68a3      	ldr	r3, [r4, #8]
 801030e:	1b9b      	subs	r3, r3, r6
 8010310:	60a3      	str	r3, [r4, #8]
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	199b      	adds	r3, r3, r6
 8010316:	6023      	str	r3, [r4, #0]
 8010318:	b005      	add	sp, #20
 801031a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801031c:	002a      	movs	r2, r5
 801031e:	0038      	movs	r0, r7
 8010320:	f000 fa1f 	bl	8010762 <_realloc_r>
 8010324:	1e06      	subs	r6, r0, #0
 8010326:	d1df      	bne.n	80102e8 <__ssputs_r+0x64>
 8010328:	0038      	movs	r0, r7
 801032a:	6921      	ldr	r1, [r4, #16]
 801032c:	f7fe ff2a 	bl	800f184 <_free_r>
 8010330:	230c      	movs	r3, #12
 8010332:	2001      	movs	r0, #1
 8010334:	603b      	str	r3, [r7, #0]
 8010336:	89a2      	ldrh	r2, [r4, #12]
 8010338:	3334      	adds	r3, #52	; 0x34
 801033a:	4313      	orrs	r3, r2
 801033c:	81a3      	strh	r3, [r4, #12]
 801033e:	4240      	negs	r0, r0
 8010340:	e7ea      	b.n	8010318 <__ssputs_r+0x94>
 8010342:	46c0      	nop			; (mov r8, r8)
 8010344:	fffffb7f 	.word	0xfffffb7f

08010348 <_svfiprintf_r>:
 8010348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801034a:	b0a1      	sub	sp, #132	; 0x84
 801034c:	9003      	str	r0, [sp, #12]
 801034e:	001d      	movs	r5, r3
 8010350:	898b      	ldrh	r3, [r1, #12]
 8010352:	000f      	movs	r7, r1
 8010354:	0016      	movs	r6, r2
 8010356:	061b      	lsls	r3, r3, #24
 8010358:	d511      	bpl.n	801037e <_svfiprintf_r+0x36>
 801035a:	690b      	ldr	r3, [r1, #16]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d10e      	bne.n	801037e <_svfiprintf_r+0x36>
 8010360:	2140      	movs	r1, #64	; 0x40
 8010362:	f7fb ff2d 	bl	800c1c0 <_malloc_r>
 8010366:	6038      	str	r0, [r7, #0]
 8010368:	6138      	str	r0, [r7, #16]
 801036a:	2800      	cmp	r0, #0
 801036c:	d105      	bne.n	801037a <_svfiprintf_r+0x32>
 801036e:	230c      	movs	r3, #12
 8010370:	9a03      	ldr	r2, [sp, #12]
 8010372:	3801      	subs	r0, #1
 8010374:	6013      	str	r3, [r2, #0]
 8010376:	b021      	add	sp, #132	; 0x84
 8010378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801037a:	2340      	movs	r3, #64	; 0x40
 801037c:	617b      	str	r3, [r7, #20]
 801037e:	2300      	movs	r3, #0
 8010380:	ac08      	add	r4, sp, #32
 8010382:	6163      	str	r3, [r4, #20]
 8010384:	3320      	adds	r3, #32
 8010386:	7663      	strb	r3, [r4, #25]
 8010388:	3310      	adds	r3, #16
 801038a:	76a3      	strb	r3, [r4, #26]
 801038c:	9507      	str	r5, [sp, #28]
 801038e:	0035      	movs	r5, r6
 8010390:	782b      	ldrb	r3, [r5, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d001      	beq.n	801039a <_svfiprintf_r+0x52>
 8010396:	2b25      	cmp	r3, #37	; 0x25
 8010398:	d148      	bne.n	801042c <_svfiprintf_r+0xe4>
 801039a:	1bab      	subs	r3, r5, r6
 801039c:	9305      	str	r3, [sp, #20]
 801039e:	42b5      	cmp	r5, r6
 80103a0:	d00b      	beq.n	80103ba <_svfiprintf_r+0x72>
 80103a2:	0032      	movs	r2, r6
 80103a4:	0039      	movs	r1, r7
 80103a6:	9803      	ldr	r0, [sp, #12]
 80103a8:	f7ff ff6c 	bl	8010284 <__ssputs_r>
 80103ac:	3001      	adds	r0, #1
 80103ae:	d100      	bne.n	80103b2 <_svfiprintf_r+0x6a>
 80103b0:	e0af      	b.n	8010512 <_svfiprintf_r+0x1ca>
 80103b2:	6963      	ldr	r3, [r4, #20]
 80103b4:	9a05      	ldr	r2, [sp, #20]
 80103b6:	189b      	adds	r3, r3, r2
 80103b8:	6163      	str	r3, [r4, #20]
 80103ba:	782b      	ldrb	r3, [r5, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d100      	bne.n	80103c2 <_svfiprintf_r+0x7a>
 80103c0:	e0a7      	b.n	8010512 <_svfiprintf_r+0x1ca>
 80103c2:	2201      	movs	r2, #1
 80103c4:	2300      	movs	r3, #0
 80103c6:	4252      	negs	r2, r2
 80103c8:	6062      	str	r2, [r4, #4]
 80103ca:	a904      	add	r1, sp, #16
 80103cc:	3254      	adds	r2, #84	; 0x54
 80103ce:	1852      	adds	r2, r2, r1
 80103d0:	1c6e      	adds	r6, r5, #1
 80103d2:	6023      	str	r3, [r4, #0]
 80103d4:	60e3      	str	r3, [r4, #12]
 80103d6:	60a3      	str	r3, [r4, #8]
 80103d8:	7013      	strb	r3, [r2, #0]
 80103da:	65a3      	str	r3, [r4, #88]	; 0x58
 80103dc:	4b55      	ldr	r3, [pc, #340]	; (8010534 <_svfiprintf_r+0x1ec>)
 80103de:	2205      	movs	r2, #5
 80103e0:	0018      	movs	r0, r3
 80103e2:	7831      	ldrb	r1, [r6, #0]
 80103e4:	9305      	str	r3, [sp, #20]
 80103e6:	f7fd fff2 	bl	800e3ce <memchr>
 80103ea:	1c75      	adds	r5, r6, #1
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d11f      	bne.n	8010430 <_svfiprintf_r+0xe8>
 80103f0:	6822      	ldr	r2, [r4, #0]
 80103f2:	06d3      	lsls	r3, r2, #27
 80103f4:	d504      	bpl.n	8010400 <_svfiprintf_r+0xb8>
 80103f6:	2353      	movs	r3, #83	; 0x53
 80103f8:	a904      	add	r1, sp, #16
 80103fa:	185b      	adds	r3, r3, r1
 80103fc:	2120      	movs	r1, #32
 80103fe:	7019      	strb	r1, [r3, #0]
 8010400:	0713      	lsls	r3, r2, #28
 8010402:	d504      	bpl.n	801040e <_svfiprintf_r+0xc6>
 8010404:	2353      	movs	r3, #83	; 0x53
 8010406:	a904      	add	r1, sp, #16
 8010408:	185b      	adds	r3, r3, r1
 801040a:	212b      	movs	r1, #43	; 0x2b
 801040c:	7019      	strb	r1, [r3, #0]
 801040e:	7833      	ldrb	r3, [r6, #0]
 8010410:	2b2a      	cmp	r3, #42	; 0x2a
 8010412:	d016      	beq.n	8010442 <_svfiprintf_r+0xfa>
 8010414:	0035      	movs	r5, r6
 8010416:	2100      	movs	r1, #0
 8010418:	200a      	movs	r0, #10
 801041a:	68e3      	ldr	r3, [r4, #12]
 801041c:	782a      	ldrb	r2, [r5, #0]
 801041e:	1c6e      	adds	r6, r5, #1
 8010420:	3a30      	subs	r2, #48	; 0x30
 8010422:	2a09      	cmp	r2, #9
 8010424:	d94e      	bls.n	80104c4 <_svfiprintf_r+0x17c>
 8010426:	2900      	cmp	r1, #0
 8010428:	d111      	bne.n	801044e <_svfiprintf_r+0x106>
 801042a:	e017      	b.n	801045c <_svfiprintf_r+0x114>
 801042c:	3501      	adds	r5, #1
 801042e:	e7af      	b.n	8010390 <_svfiprintf_r+0x48>
 8010430:	9b05      	ldr	r3, [sp, #20]
 8010432:	6822      	ldr	r2, [r4, #0]
 8010434:	1ac0      	subs	r0, r0, r3
 8010436:	2301      	movs	r3, #1
 8010438:	4083      	lsls	r3, r0
 801043a:	4313      	orrs	r3, r2
 801043c:	002e      	movs	r6, r5
 801043e:	6023      	str	r3, [r4, #0]
 8010440:	e7cc      	b.n	80103dc <_svfiprintf_r+0x94>
 8010442:	9b07      	ldr	r3, [sp, #28]
 8010444:	1d19      	adds	r1, r3, #4
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	9107      	str	r1, [sp, #28]
 801044a:	2b00      	cmp	r3, #0
 801044c:	db01      	blt.n	8010452 <_svfiprintf_r+0x10a>
 801044e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010450:	e004      	b.n	801045c <_svfiprintf_r+0x114>
 8010452:	425b      	negs	r3, r3
 8010454:	60e3      	str	r3, [r4, #12]
 8010456:	2302      	movs	r3, #2
 8010458:	4313      	orrs	r3, r2
 801045a:	6023      	str	r3, [r4, #0]
 801045c:	782b      	ldrb	r3, [r5, #0]
 801045e:	2b2e      	cmp	r3, #46	; 0x2e
 8010460:	d10a      	bne.n	8010478 <_svfiprintf_r+0x130>
 8010462:	786b      	ldrb	r3, [r5, #1]
 8010464:	2b2a      	cmp	r3, #42	; 0x2a
 8010466:	d135      	bne.n	80104d4 <_svfiprintf_r+0x18c>
 8010468:	9b07      	ldr	r3, [sp, #28]
 801046a:	3502      	adds	r5, #2
 801046c:	1d1a      	adds	r2, r3, #4
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	9207      	str	r2, [sp, #28]
 8010472:	2b00      	cmp	r3, #0
 8010474:	db2b      	blt.n	80104ce <_svfiprintf_r+0x186>
 8010476:	9309      	str	r3, [sp, #36]	; 0x24
 8010478:	4e2f      	ldr	r6, [pc, #188]	; (8010538 <_svfiprintf_r+0x1f0>)
 801047a:	2203      	movs	r2, #3
 801047c:	0030      	movs	r0, r6
 801047e:	7829      	ldrb	r1, [r5, #0]
 8010480:	f7fd ffa5 	bl	800e3ce <memchr>
 8010484:	2800      	cmp	r0, #0
 8010486:	d006      	beq.n	8010496 <_svfiprintf_r+0x14e>
 8010488:	2340      	movs	r3, #64	; 0x40
 801048a:	1b80      	subs	r0, r0, r6
 801048c:	4083      	lsls	r3, r0
 801048e:	6822      	ldr	r2, [r4, #0]
 8010490:	3501      	adds	r5, #1
 8010492:	4313      	orrs	r3, r2
 8010494:	6023      	str	r3, [r4, #0]
 8010496:	7829      	ldrb	r1, [r5, #0]
 8010498:	2206      	movs	r2, #6
 801049a:	4828      	ldr	r0, [pc, #160]	; (801053c <_svfiprintf_r+0x1f4>)
 801049c:	1c6e      	adds	r6, r5, #1
 801049e:	7621      	strb	r1, [r4, #24]
 80104a0:	f7fd ff95 	bl	800e3ce <memchr>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	d03c      	beq.n	8010522 <_svfiprintf_r+0x1da>
 80104a8:	4b25      	ldr	r3, [pc, #148]	; (8010540 <_svfiprintf_r+0x1f8>)
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d125      	bne.n	80104fa <_svfiprintf_r+0x1b2>
 80104ae:	2207      	movs	r2, #7
 80104b0:	9b07      	ldr	r3, [sp, #28]
 80104b2:	3307      	adds	r3, #7
 80104b4:	4393      	bics	r3, r2
 80104b6:	3308      	adds	r3, #8
 80104b8:	9307      	str	r3, [sp, #28]
 80104ba:	6963      	ldr	r3, [r4, #20]
 80104bc:	9a04      	ldr	r2, [sp, #16]
 80104be:	189b      	adds	r3, r3, r2
 80104c0:	6163      	str	r3, [r4, #20]
 80104c2:	e764      	b.n	801038e <_svfiprintf_r+0x46>
 80104c4:	4343      	muls	r3, r0
 80104c6:	0035      	movs	r5, r6
 80104c8:	2101      	movs	r1, #1
 80104ca:	189b      	adds	r3, r3, r2
 80104cc:	e7a6      	b.n	801041c <_svfiprintf_r+0xd4>
 80104ce:	2301      	movs	r3, #1
 80104d0:	425b      	negs	r3, r3
 80104d2:	e7d0      	b.n	8010476 <_svfiprintf_r+0x12e>
 80104d4:	2300      	movs	r3, #0
 80104d6:	200a      	movs	r0, #10
 80104d8:	001a      	movs	r2, r3
 80104da:	3501      	adds	r5, #1
 80104dc:	6063      	str	r3, [r4, #4]
 80104de:	7829      	ldrb	r1, [r5, #0]
 80104e0:	1c6e      	adds	r6, r5, #1
 80104e2:	3930      	subs	r1, #48	; 0x30
 80104e4:	2909      	cmp	r1, #9
 80104e6:	d903      	bls.n	80104f0 <_svfiprintf_r+0x1a8>
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d0c5      	beq.n	8010478 <_svfiprintf_r+0x130>
 80104ec:	9209      	str	r2, [sp, #36]	; 0x24
 80104ee:	e7c3      	b.n	8010478 <_svfiprintf_r+0x130>
 80104f0:	4342      	muls	r2, r0
 80104f2:	0035      	movs	r5, r6
 80104f4:	2301      	movs	r3, #1
 80104f6:	1852      	adds	r2, r2, r1
 80104f8:	e7f1      	b.n	80104de <_svfiprintf_r+0x196>
 80104fa:	aa07      	add	r2, sp, #28
 80104fc:	9200      	str	r2, [sp, #0]
 80104fe:	0021      	movs	r1, r4
 8010500:	003a      	movs	r2, r7
 8010502:	4b10      	ldr	r3, [pc, #64]	; (8010544 <_svfiprintf_r+0x1fc>)
 8010504:	9803      	ldr	r0, [sp, #12]
 8010506:	f7fc fe63 	bl	800d1d0 <_printf_float>
 801050a:	9004      	str	r0, [sp, #16]
 801050c:	9b04      	ldr	r3, [sp, #16]
 801050e:	3301      	adds	r3, #1
 8010510:	d1d3      	bne.n	80104ba <_svfiprintf_r+0x172>
 8010512:	89bb      	ldrh	r3, [r7, #12]
 8010514:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010516:	065b      	lsls	r3, r3, #25
 8010518:	d400      	bmi.n	801051c <_svfiprintf_r+0x1d4>
 801051a:	e72c      	b.n	8010376 <_svfiprintf_r+0x2e>
 801051c:	2001      	movs	r0, #1
 801051e:	4240      	negs	r0, r0
 8010520:	e729      	b.n	8010376 <_svfiprintf_r+0x2e>
 8010522:	aa07      	add	r2, sp, #28
 8010524:	9200      	str	r2, [sp, #0]
 8010526:	0021      	movs	r1, r4
 8010528:	003a      	movs	r2, r7
 801052a:	4b06      	ldr	r3, [pc, #24]	; (8010544 <_svfiprintf_r+0x1fc>)
 801052c:	9803      	ldr	r0, [sp, #12]
 801052e:	f7fd f915 	bl	800d75c <_printf_i>
 8010532:	e7ea      	b.n	801050a <_svfiprintf_r+0x1c2>
 8010534:	0801337c 	.word	0x0801337c
 8010538:	08013382 	.word	0x08013382
 801053c:	08013386 	.word	0x08013386
 8010540:	0800d1d1 	.word	0x0800d1d1
 8010544:	08010285 	.word	0x08010285

08010548 <__sflush_r>:
 8010548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801054a:	898b      	ldrh	r3, [r1, #12]
 801054c:	0005      	movs	r5, r0
 801054e:	000c      	movs	r4, r1
 8010550:	071a      	lsls	r2, r3, #28
 8010552:	d45c      	bmi.n	801060e <__sflush_r+0xc6>
 8010554:	684a      	ldr	r2, [r1, #4]
 8010556:	2a00      	cmp	r2, #0
 8010558:	dc04      	bgt.n	8010564 <__sflush_r+0x1c>
 801055a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801055c:	2a00      	cmp	r2, #0
 801055e:	dc01      	bgt.n	8010564 <__sflush_r+0x1c>
 8010560:	2000      	movs	r0, #0
 8010562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010564:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010566:	2f00      	cmp	r7, #0
 8010568:	d0fa      	beq.n	8010560 <__sflush_r+0x18>
 801056a:	2200      	movs	r2, #0
 801056c:	2080      	movs	r0, #128	; 0x80
 801056e:	682e      	ldr	r6, [r5, #0]
 8010570:	602a      	str	r2, [r5, #0]
 8010572:	001a      	movs	r2, r3
 8010574:	0140      	lsls	r0, r0, #5
 8010576:	6a21      	ldr	r1, [r4, #32]
 8010578:	4002      	ands	r2, r0
 801057a:	4203      	tst	r3, r0
 801057c:	d034      	beq.n	80105e8 <__sflush_r+0xa0>
 801057e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010580:	89a3      	ldrh	r3, [r4, #12]
 8010582:	075b      	lsls	r3, r3, #29
 8010584:	d506      	bpl.n	8010594 <__sflush_r+0x4c>
 8010586:	6863      	ldr	r3, [r4, #4]
 8010588:	1ac0      	subs	r0, r0, r3
 801058a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801058c:	2b00      	cmp	r3, #0
 801058e:	d001      	beq.n	8010594 <__sflush_r+0x4c>
 8010590:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010592:	1ac0      	subs	r0, r0, r3
 8010594:	0002      	movs	r2, r0
 8010596:	2300      	movs	r3, #0
 8010598:	0028      	movs	r0, r5
 801059a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801059c:	6a21      	ldr	r1, [r4, #32]
 801059e:	47b8      	blx	r7
 80105a0:	89a2      	ldrh	r2, [r4, #12]
 80105a2:	1c43      	adds	r3, r0, #1
 80105a4:	d106      	bne.n	80105b4 <__sflush_r+0x6c>
 80105a6:	6829      	ldr	r1, [r5, #0]
 80105a8:	291d      	cmp	r1, #29
 80105aa:	d82c      	bhi.n	8010606 <__sflush_r+0xbe>
 80105ac:	4b2a      	ldr	r3, [pc, #168]	; (8010658 <__sflush_r+0x110>)
 80105ae:	410b      	asrs	r3, r1
 80105b0:	07db      	lsls	r3, r3, #31
 80105b2:	d428      	bmi.n	8010606 <__sflush_r+0xbe>
 80105b4:	2300      	movs	r3, #0
 80105b6:	6063      	str	r3, [r4, #4]
 80105b8:	6923      	ldr	r3, [r4, #16]
 80105ba:	6023      	str	r3, [r4, #0]
 80105bc:	04d2      	lsls	r2, r2, #19
 80105be:	d505      	bpl.n	80105cc <__sflush_r+0x84>
 80105c0:	1c43      	adds	r3, r0, #1
 80105c2:	d102      	bne.n	80105ca <__sflush_r+0x82>
 80105c4:	682b      	ldr	r3, [r5, #0]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d100      	bne.n	80105cc <__sflush_r+0x84>
 80105ca:	6560      	str	r0, [r4, #84]	; 0x54
 80105cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80105ce:	602e      	str	r6, [r5, #0]
 80105d0:	2900      	cmp	r1, #0
 80105d2:	d0c5      	beq.n	8010560 <__sflush_r+0x18>
 80105d4:	0023      	movs	r3, r4
 80105d6:	3344      	adds	r3, #68	; 0x44
 80105d8:	4299      	cmp	r1, r3
 80105da:	d002      	beq.n	80105e2 <__sflush_r+0x9a>
 80105dc:	0028      	movs	r0, r5
 80105de:	f7fe fdd1 	bl	800f184 <_free_r>
 80105e2:	2000      	movs	r0, #0
 80105e4:	6360      	str	r0, [r4, #52]	; 0x34
 80105e6:	e7bc      	b.n	8010562 <__sflush_r+0x1a>
 80105e8:	2301      	movs	r3, #1
 80105ea:	0028      	movs	r0, r5
 80105ec:	47b8      	blx	r7
 80105ee:	1c43      	adds	r3, r0, #1
 80105f0:	d1c6      	bne.n	8010580 <__sflush_r+0x38>
 80105f2:	682b      	ldr	r3, [r5, #0]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d0c3      	beq.n	8010580 <__sflush_r+0x38>
 80105f8:	2b1d      	cmp	r3, #29
 80105fa:	d001      	beq.n	8010600 <__sflush_r+0xb8>
 80105fc:	2b16      	cmp	r3, #22
 80105fe:	d101      	bne.n	8010604 <__sflush_r+0xbc>
 8010600:	602e      	str	r6, [r5, #0]
 8010602:	e7ad      	b.n	8010560 <__sflush_r+0x18>
 8010604:	89a2      	ldrh	r2, [r4, #12]
 8010606:	2340      	movs	r3, #64	; 0x40
 8010608:	4313      	orrs	r3, r2
 801060a:	81a3      	strh	r3, [r4, #12]
 801060c:	e7a9      	b.n	8010562 <__sflush_r+0x1a>
 801060e:	690e      	ldr	r6, [r1, #16]
 8010610:	2e00      	cmp	r6, #0
 8010612:	d0a5      	beq.n	8010560 <__sflush_r+0x18>
 8010614:	680f      	ldr	r7, [r1, #0]
 8010616:	600e      	str	r6, [r1, #0]
 8010618:	1bba      	subs	r2, r7, r6
 801061a:	9201      	str	r2, [sp, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	079b      	lsls	r3, r3, #30
 8010620:	d100      	bne.n	8010624 <__sflush_r+0xdc>
 8010622:	694a      	ldr	r2, [r1, #20]
 8010624:	60a2      	str	r2, [r4, #8]
 8010626:	9b01      	ldr	r3, [sp, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	dd99      	ble.n	8010560 <__sflush_r+0x18>
 801062c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801062e:	0032      	movs	r2, r6
 8010630:	001f      	movs	r7, r3
 8010632:	0028      	movs	r0, r5
 8010634:	9b01      	ldr	r3, [sp, #4]
 8010636:	6a21      	ldr	r1, [r4, #32]
 8010638:	47b8      	blx	r7
 801063a:	2800      	cmp	r0, #0
 801063c:	dc06      	bgt.n	801064c <__sflush_r+0x104>
 801063e:	2340      	movs	r3, #64	; 0x40
 8010640:	2001      	movs	r0, #1
 8010642:	89a2      	ldrh	r2, [r4, #12]
 8010644:	4240      	negs	r0, r0
 8010646:	4313      	orrs	r3, r2
 8010648:	81a3      	strh	r3, [r4, #12]
 801064a:	e78a      	b.n	8010562 <__sflush_r+0x1a>
 801064c:	9b01      	ldr	r3, [sp, #4]
 801064e:	1836      	adds	r6, r6, r0
 8010650:	1a1b      	subs	r3, r3, r0
 8010652:	9301      	str	r3, [sp, #4]
 8010654:	e7e7      	b.n	8010626 <__sflush_r+0xde>
 8010656:	46c0      	nop			; (mov r8, r8)
 8010658:	dfbffffe 	.word	0xdfbffffe

0801065c <_fflush_r>:
 801065c:	690b      	ldr	r3, [r1, #16]
 801065e:	b570      	push	{r4, r5, r6, lr}
 8010660:	0005      	movs	r5, r0
 8010662:	000c      	movs	r4, r1
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <_fflush_r+0x12>
 8010668:	2500      	movs	r5, #0
 801066a:	0028      	movs	r0, r5
 801066c:	bd70      	pop	{r4, r5, r6, pc}
 801066e:	2800      	cmp	r0, #0
 8010670:	d004      	beq.n	801067c <_fflush_r+0x20>
 8010672:	6a03      	ldr	r3, [r0, #32]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d101      	bne.n	801067c <_fflush_r+0x20>
 8010678:	f7fd fc18 	bl	800deac <__sinit>
 801067c:	220c      	movs	r2, #12
 801067e:	5ea3      	ldrsh	r3, [r4, r2]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d0f1      	beq.n	8010668 <_fflush_r+0xc>
 8010684:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010686:	07d2      	lsls	r2, r2, #31
 8010688:	d404      	bmi.n	8010694 <_fflush_r+0x38>
 801068a:	059b      	lsls	r3, r3, #22
 801068c:	d402      	bmi.n	8010694 <_fflush_r+0x38>
 801068e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010690:	f7fd fe93 	bl	800e3ba <__retarget_lock_acquire_recursive>
 8010694:	0028      	movs	r0, r5
 8010696:	0021      	movs	r1, r4
 8010698:	f7ff ff56 	bl	8010548 <__sflush_r>
 801069c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801069e:	0005      	movs	r5, r0
 80106a0:	07db      	lsls	r3, r3, #31
 80106a2:	d4e2      	bmi.n	801066a <_fflush_r+0xe>
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	059b      	lsls	r3, r3, #22
 80106a8:	d4df      	bmi.n	801066a <_fflush_r+0xe>
 80106aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106ac:	f7fd fe86 	bl	800e3bc <__retarget_lock_release_recursive>
 80106b0:	e7db      	b.n	801066a <_fflush_r+0xe>
	...

080106b4 <fiprintf>:
 80106b4:	b40e      	push	{r1, r2, r3}
 80106b6:	b517      	push	{r0, r1, r2, r4, lr}
 80106b8:	4c05      	ldr	r4, [pc, #20]	; (80106d0 <fiprintf+0x1c>)
 80106ba:	ab05      	add	r3, sp, #20
 80106bc:	cb04      	ldmia	r3!, {r2}
 80106be:	0001      	movs	r1, r0
 80106c0:	6820      	ldr	r0, [r4, #0]
 80106c2:	9301      	str	r3, [sp, #4]
 80106c4:	f000 f8a4 	bl	8010810 <_vfiprintf_r>
 80106c8:	bc1e      	pop	{r1, r2, r3, r4}
 80106ca:	bc08      	pop	{r3}
 80106cc:	b003      	add	sp, #12
 80106ce:	4718      	bx	r3
 80106d0:	200002b8 	.word	0x200002b8

080106d4 <memmove>:
 80106d4:	b510      	push	{r4, lr}
 80106d6:	4288      	cmp	r0, r1
 80106d8:	d902      	bls.n	80106e0 <memmove+0xc>
 80106da:	188b      	adds	r3, r1, r2
 80106dc:	4298      	cmp	r0, r3
 80106de:	d303      	bcc.n	80106e8 <memmove+0x14>
 80106e0:	2300      	movs	r3, #0
 80106e2:	e007      	b.n	80106f4 <memmove+0x20>
 80106e4:	5c8b      	ldrb	r3, [r1, r2]
 80106e6:	5483      	strb	r3, [r0, r2]
 80106e8:	3a01      	subs	r2, #1
 80106ea:	d2fb      	bcs.n	80106e4 <memmove+0x10>
 80106ec:	bd10      	pop	{r4, pc}
 80106ee:	5ccc      	ldrb	r4, [r1, r3]
 80106f0:	54c4      	strb	r4, [r0, r3]
 80106f2:	3301      	adds	r3, #1
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d1fa      	bne.n	80106ee <memmove+0x1a>
 80106f8:	e7f8      	b.n	80106ec <memmove+0x18>

080106fa <abort>:
 80106fa:	2006      	movs	r0, #6
 80106fc:	b510      	push	{r4, lr}
 80106fe:	f000 fa73 	bl	8010be8 <raise>
 8010702:	2001      	movs	r0, #1
 8010704:	f7f6 fb6a 	bl	8006ddc <_exit>

08010708 <_calloc_r>:
 8010708:	b570      	push	{r4, r5, r6, lr}
 801070a:	0c0b      	lsrs	r3, r1, #16
 801070c:	0c15      	lsrs	r5, r2, #16
 801070e:	2b00      	cmp	r3, #0
 8010710:	d11e      	bne.n	8010750 <_calloc_r+0x48>
 8010712:	2d00      	cmp	r5, #0
 8010714:	d10c      	bne.n	8010730 <_calloc_r+0x28>
 8010716:	b289      	uxth	r1, r1
 8010718:	b294      	uxth	r4, r2
 801071a:	434c      	muls	r4, r1
 801071c:	0021      	movs	r1, r4
 801071e:	f7fb fd4f 	bl	800c1c0 <_malloc_r>
 8010722:	1e05      	subs	r5, r0, #0
 8010724:	d01b      	beq.n	801075e <_calloc_r+0x56>
 8010726:	0022      	movs	r2, r4
 8010728:	2100      	movs	r1, #0
 801072a:	f7fd fc93 	bl	800e054 <memset>
 801072e:	e016      	b.n	801075e <_calloc_r+0x56>
 8010730:	1c2b      	adds	r3, r5, #0
 8010732:	1c0c      	adds	r4, r1, #0
 8010734:	b289      	uxth	r1, r1
 8010736:	b292      	uxth	r2, r2
 8010738:	434a      	muls	r2, r1
 801073a:	b2a1      	uxth	r1, r4
 801073c:	b29c      	uxth	r4, r3
 801073e:	434c      	muls	r4, r1
 8010740:	0c13      	lsrs	r3, r2, #16
 8010742:	18e4      	adds	r4, r4, r3
 8010744:	0c23      	lsrs	r3, r4, #16
 8010746:	d107      	bne.n	8010758 <_calloc_r+0x50>
 8010748:	0424      	lsls	r4, r4, #16
 801074a:	b292      	uxth	r2, r2
 801074c:	4314      	orrs	r4, r2
 801074e:	e7e5      	b.n	801071c <_calloc_r+0x14>
 8010750:	2d00      	cmp	r5, #0
 8010752:	d101      	bne.n	8010758 <_calloc_r+0x50>
 8010754:	1c14      	adds	r4, r2, #0
 8010756:	e7ed      	b.n	8010734 <_calloc_r+0x2c>
 8010758:	230c      	movs	r3, #12
 801075a:	2500      	movs	r5, #0
 801075c:	6003      	str	r3, [r0, #0]
 801075e:	0028      	movs	r0, r5
 8010760:	bd70      	pop	{r4, r5, r6, pc}

08010762 <_realloc_r>:
 8010762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010764:	0007      	movs	r7, r0
 8010766:	000e      	movs	r6, r1
 8010768:	0014      	movs	r4, r2
 801076a:	2900      	cmp	r1, #0
 801076c:	d105      	bne.n	801077a <_realloc_r+0x18>
 801076e:	0011      	movs	r1, r2
 8010770:	f7fb fd26 	bl	800c1c0 <_malloc_r>
 8010774:	0005      	movs	r5, r0
 8010776:	0028      	movs	r0, r5
 8010778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801077a:	2a00      	cmp	r2, #0
 801077c:	d103      	bne.n	8010786 <_realloc_r+0x24>
 801077e:	f7fe fd01 	bl	800f184 <_free_r>
 8010782:	0025      	movs	r5, r4
 8010784:	e7f7      	b.n	8010776 <_realloc_r+0x14>
 8010786:	f000 fa4f 	bl	8010c28 <_malloc_usable_size_r>
 801078a:	9001      	str	r0, [sp, #4]
 801078c:	4284      	cmp	r4, r0
 801078e:	d803      	bhi.n	8010798 <_realloc_r+0x36>
 8010790:	0035      	movs	r5, r6
 8010792:	0843      	lsrs	r3, r0, #1
 8010794:	42a3      	cmp	r3, r4
 8010796:	d3ee      	bcc.n	8010776 <_realloc_r+0x14>
 8010798:	0021      	movs	r1, r4
 801079a:	0038      	movs	r0, r7
 801079c:	f7fb fd10 	bl	800c1c0 <_malloc_r>
 80107a0:	1e05      	subs	r5, r0, #0
 80107a2:	d0e8      	beq.n	8010776 <_realloc_r+0x14>
 80107a4:	9b01      	ldr	r3, [sp, #4]
 80107a6:	0022      	movs	r2, r4
 80107a8:	429c      	cmp	r4, r3
 80107aa:	d900      	bls.n	80107ae <_realloc_r+0x4c>
 80107ac:	001a      	movs	r2, r3
 80107ae:	0031      	movs	r1, r6
 80107b0:	0028      	movs	r0, r5
 80107b2:	f7fd fe17 	bl	800e3e4 <memcpy>
 80107b6:	0031      	movs	r1, r6
 80107b8:	0038      	movs	r0, r7
 80107ba:	f7fe fce3 	bl	800f184 <_free_r>
 80107be:	e7da      	b.n	8010776 <_realloc_r+0x14>

080107c0 <__sfputc_r>:
 80107c0:	6893      	ldr	r3, [r2, #8]
 80107c2:	b510      	push	{r4, lr}
 80107c4:	3b01      	subs	r3, #1
 80107c6:	6093      	str	r3, [r2, #8]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	da04      	bge.n	80107d6 <__sfputc_r+0x16>
 80107cc:	6994      	ldr	r4, [r2, #24]
 80107ce:	42a3      	cmp	r3, r4
 80107d0:	db07      	blt.n	80107e2 <__sfputc_r+0x22>
 80107d2:	290a      	cmp	r1, #10
 80107d4:	d005      	beq.n	80107e2 <__sfputc_r+0x22>
 80107d6:	6813      	ldr	r3, [r2, #0]
 80107d8:	1c58      	adds	r0, r3, #1
 80107da:	6010      	str	r0, [r2, #0]
 80107dc:	7019      	strb	r1, [r3, #0]
 80107de:	0008      	movs	r0, r1
 80107e0:	bd10      	pop	{r4, pc}
 80107e2:	f000 f931 	bl	8010a48 <__swbuf_r>
 80107e6:	0001      	movs	r1, r0
 80107e8:	e7f9      	b.n	80107de <__sfputc_r+0x1e>

080107ea <__sfputs_r>:
 80107ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ec:	0006      	movs	r6, r0
 80107ee:	000f      	movs	r7, r1
 80107f0:	0014      	movs	r4, r2
 80107f2:	18d5      	adds	r5, r2, r3
 80107f4:	42ac      	cmp	r4, r5
 80107f6:	d101      	bne.n	80107fc <__sfputs_r+0x12>
 80107f8:	2000      	movs	r0, #0
 80107fa:	e007      	b.n	801080c <__sfputs_r+0x22>
 80107fc:	7821      	ldrb	r1, [r4, #0]
 80107fe:	003a      	movs	r2, r7
 8010800:	0030      	movs	r0, r6
 8010802:	f7ff ffdd 	bl	80107c0 <__sfputc_r>
 8010806:	3401      	adds	r4, #1
 8010808:	1c43      	adds	r3, r0, #1
 801080a:	d1f3      	bne.n	80107f4 <__sfputs_r+0xa>
 801080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010810 <_vfiprintf_r>:
 8010810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010812:	b0a1      	sub	sp, #132	; 0x84
 8010814:	000f      	movs	r7, r1
 8010816:	0015      	movs	r5, r2
 8010818:	001e      	movs	r6, r3
 801081a:	9003      	str	r0, [sp, #12]
 801081c:	2800      	cmp	r0, #0
 801081e:	d004      	beq.n	801082a <_vfiprintf_r+0x1a>
 8010820:	6a03      	ldr	r3, [r0, #32]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <_vfiprintf_r+0x1a>
 8010826:	f7fd fb41 	bl	800deac <__sinit>
 801082a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801082c:	07db      	lsls	r3, r3, #31
 801082e:	d405      	bmi.n	801083c <_vfiprintf_r+0x2c>
 8010830:	89bb      	ldrh	r3, [r7, #12]
 8010832:	059b      	lsls	r3, r3, #22
 8010834:	d402      	bmi.n	801083c <_vfiprintf_r+0x2c>
 8010836:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010838:	f7fd fdbf 	bl	800e3ba <__retarget_lock_acquire_recursive>
 801083c:	89bb      	ldrh	r3, [r7, #12]
 801083e:	071b      	lsls	r3, r3, #28
 8010840:	d502      	bpl.n	8010848 <_vfiprintf_r+0x38>
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d113      	bne.n	8010870 <_vfiprintf_r+0x60>
 8010848:	0039      	movs	r1, r7
 801084a:	9803      	ldr	r0, [sp, #12]
 801084c:	f000 f93e 	bl	8010acc <__swsetup_r>
 8010850:	2800      	cmp	r0, #0
 8010852:	d00d      	beq.n	8010870 <_vfiprintf_r+0x60>
 8010854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010856:	07db      	lsls	r3, r3, #31
 8010858:	d503      	bpl.n	8010862 <_vfiprintf_r+0x52>
 801085a:	2001      	movs	r0, #1
 801085c:	4240      	negs	r0, r0
 801085e:	b021      	add	sp, #132	; 0x84
 8010860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010862:	89bb      	ldrh	r3, [r7, #12]
 8010864:	059b      	lsls	r3, r3, #22
 8010866:	d4f8      	bmi.n	801085a <_vfiprintf_r+0x4a>
 8010868:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801086a:	f7fd fda7 	bl	800e3bc <__retarget_lock_release_recursive>
 801086e:	e7f4      	b.n	801085a <_vfiprintf_r+0x4a>
 8010870:	2300      	movs	r3, #0
 8010872:	ac08      	add	r4, sp, #32
 8010874:	6163      	str	r3, [r4, #20]
 8010876:	3320      	adds	r3, #32
 8010878:	7663      	strb	r3, [r4, #25]
 801087a:	3310      	adds	r3, #16
 801087c:	76a3      	strb	r3, [r4, #26]
 801087e:	9607      	str	r6, [sp, #28]
 8010880:	002e      	movs	r6, r5
 8010882:	7833      	ldrb	r3, [r6, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d001      	beq.n	801088c <_vfiprintf_r+0x7c>
 8010888:	2b25      	cmp	r3, #37	; 0x25
 801088a:	d148      	bne.n	801091e <_vfiprintf_r+0x10e>
 801088c:	1b73      	subs	r3, r6, r5
 801088e:	9305      	str	r3, [sp, #20]
 8010890:	42ae      	cmp	r6, r5
 8010892:	d00b      	beq.n	80108ac <_vfiprintf_r+0x9c>
 8010894:	002a      	movs	r2, r5
 8010896:	0039      	movs	r1, r7
 8010898:	9803      	ldr	r0, [sp, #12]
 801089a:	f7ff ffa6 	bl	80107ea <__sfputs_r>
 801089e:	3001      	adds	r0, #1
 80108a0:	d100      	bne.n	80108a4 <_vfiprintf_r+0x94>
 80108a2:	e0af      	b.n	8010a04 <_vfiprintf_r+0x1f4>
 80108a4:	6963      	ldr	r3, [r4, #20]
 80108a6:	9a05      	ldr	r2, [sp, #20]
 80108a8:	189b      	adds	r3, r3, r2
 80108aa:	6163      	str	r3, [r4, #20]
 80108ac:	7833      	ldrb	r3, [r6, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d100      	bne.n	80108b4 <_vfiprintf_r+0xa4>
 80108b2:	e0a7      	b.n	8010a04 <_vfiprintf_r+0x1f4>
 80108b4:	2201      	movs	r2, #1
 80108b6:	2300      	movs	r3, #0
 80108b8:	4252      	negs	r2, r2
 80108ba:	6062      	str	r2, [r4, #4]
 80108bc:	a904      	add	r1, sp, #16
 80108be:	3254      	adds	r2, #84	; 0x54
 80108c0:	1852      	adds	r2, r2, r1
 80108c2:	1c75      	adds	r5, r6, #1
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	60e3      	str	r3, [r4, #12]
 80108c8:	60a3      	str	r3, [r4, #8]
 80108ca:	7013      	strb	r3, [r2, #0]
 80108cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80108ce:	4b59      	ldr	r3, [pc, #356]	; (8010a34 <_vfiprintf_r+0x224>)
 80108d0:	2205      	movs	r2, #5
 80108d2:	0018      	movs	r0, r3
 80108d4:	7829      	ldrb	r1, [r5, #0]
 80108d6:	9305      	str	r3, [sp, #20]
 80108d8:	f7fd fd79 	bl	800e3ce <memchr>
 80108dc:	1c6e      	adds	r6, r5, #1
 80108de:	2800      	cmp	r0, #0
 80108e0:	d11f      	bne.n	8010922 <_vfiprintf_r+0x112>
 80108e2:	6822      	ldr	r2, [r4, #0]
 80108e4:	06d3      	lsls	r3, r2, #27
 80108e6:	d504      	bpl.n	80108f2 <_vfiprintf_r+0xe2>
 80108e8:	2353      	movs	r3, #83	; 0x53
 80108ea:	a904      	add	r1, sp, #16
 80108ec:	185b      	adds	r3, r3, r1
 80108ee:	2120      	movs	r1, #32
 80108f0:	7019      	strb	r1, [r3, #0]
 80108f2:	0713      	lsls	r3, r2, #28
 80108f4:	d504      	bpl.n	8010900 <_vfiprintf_r+0xf0>
 80108f6:	2353      	movs	r3, #83	; 0x53
 80108f8:	a904      	add	r1, sp, #16
 80108fa:	185b      	adds	r3, r3, r1
 80108fc:	212b      	movs	r1, #43	; 0x2b
 80108fe:	7019      	strb	r1, [r3, #0]
 8010900:	782b      	ldrb	r3, [r5, #0]
 8010902:	2b2a      	cmp	r3, #42	; 0x2a
 8010904:	d016      	beq.n	8010934 <_vfiprintf_r+0x124>
 8010906:	002e      	movs	r6, r5
 8010908:	2100      	movs	r1, #0
 801090a:	200a      	movs	r0, #10
 801090c:	68e3      	ldr	r3, [r4, #12]
 801090e:	7832      	ldrb	r2, [r6, #0]
 8010910:	1c75      	adds	r5, r6, #1
 8010912:	3a30      	subs	r2, #48	; 0x30
 8010914:	2a09      	cmp	r2, #9
 8010916:	d94e      	bls.n	80109b6 <_vfiprintf_r+0x1a6>
 8010918:	2900      	cmp	r1, #0
 801091a:	d111      	bne.n	8010940 <_vfiprintf_r+0x130>
 801091c:	e017      	b.n	801094e <_vfiprintf_r+0x13e>
 801091e:	3601      	adds	r6, #1
 8010920:	e7af      	b.n	8010882 <_vfiprintf_r+0x72>
 8010922:	9b05      	ldr	r3, [sp, #20]
 8010924:	6822      	ldr	r2, [r4, #0]
 8010926:	1ac0      	subs	r0, r0, r3
 8010928:	2301      	movs	r3, #1
 801092a:	4083      	lsls	r3, r0
 801092c:	4313      	orrs	r3, r2
 801092e:	0035      	movs	r5, r6
 8010930:	6023      	str	r3, [r4, #0]
 8010932:	e7cc      	b.n	80108ce <_vfiprintf_r+0xbe>
 8010934:	9b07      	ldr	r3, [sp, #28]
 8010936:	1d19      	adds	r1, r3, #4
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	9107      	str	r1, [sp, #28]
 801093c:	2b00      	cmp	r3, #0
 801093e:	db01      	blt.n	8010944 <_vfiprintf_r+0x134>
 8010940:	930b      	str	r3, [sp, #44]	; 0x2c
 8010942:	e004      	b.n	801094e <_vfiprintf_r+0x13e>
 8010944:	425b      	negs	r3, r3
 8010946:	60e3      	str	r3, [r4, #12]
 8010948:	2302      	movs	r3, #2
 801094a:	4313      	orrs	r3, r2
 801094c:	6023      	str	r3, [r4, #0]
 801094e:	7833      	ldrb	r3, [r6, #0]
 8010950:	2b2e      	cmp	r3, #46	; 0x2e
 8010952:	d10a      	bne.n	801096a <_vfiprintf_r+0x15a>
 8010954:	7873      	ldrb	r3, [r6, #1]
 8010956:	2b2a      	cmp	r3, #42	; 0x2a
 8010958:	d135      	bne.n	80109c6 <_vfiprintf_r+0x1b6>
 801095a:	9b07      	ldr	r3, [sp, #28]
 801095c:	3602      	adds	r6, #2
 801095e:	1d1a      	adds	r2, r3, #4
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	9207      	str	r2, [sp, #28]
 8010964:	2b00      	cmp	r3, #0
 8010966:	db2b      	blt.n	80109c0 <_vfiprintf_r+0x1b0>
 8010968:	9309      	str	r3, [sp, #36]	; 0x24
 801096a:	4d33      	ldr	r5, [pc, #204]	; (8010a38 <_vfiprintf_r+0x228>)
 801096c:	2203      	movs	r2, #3
 801096e:	0028      	movs	r0, r5
 8010970:	7831      	ldrb	r1, [r6, #0]
 8010972:	f7fd fd2c 	bl	800e3ce <memchr>
 8010976:	2800      	cmp	r0, #0
 8010978:	d006      	beq.n	8010988 <_vfiprintf_r+0x178>
 801097a:	2340      	movs	r3, #64	; 0x40
 801097c:	1b40      	subs	r0, r0, r5
 801097e:	4083      	lsls	r3, r0
 8010980:	6822      	ldr	r2, [r4, #0]
 8010982:	3601      	adds	r6, #1
 8010984:	4313      	orrs	r3, r2
 8010986:	6023      	str	r3, [r4, #0]
 8010988:	7831      	ldrb	r1, [r6, #0]
 801098a:	2206      	movs	r2, #6
 801098c:	482b      	ldr	r0, [pc, #172]	; (8010a3c <_vfiprintf_r+0x22c>)
 801098e:	1c75      	adds	r5, r6, #1
 8010990:	7621      	strb	r1, [r4, #24]
 8010992:	f7fd fd1c 	bl	800e3ce <memchr>
 8010996:	2800      	cmp	r0, #0
 8010998:	d043      	beq.n	8010a22 <_vfiprintf_r+0x212>
 801099a:	4b29      	ldr	r3, [pc, #164]	; (8010a40 <_vfiprintf_r+0x230>)
 801099c:	2b00      	cmp	r3, #0
 801099e:	d125      	bne.n	80109ec <_vfiprintf_r+0x1dc>
 80109a0:	2207      	movs	r2, #7
 80109a2:	9b07      	ldr	r3, [sp, #28]
 80109a4:	3307      	adds	r3, #7
 80109a6:	4393      	bics	r3, r2
 80109a8:	3308      	adds	r3, #8
 80109aa:	9307      	str	r3, [sp, #28]
 80109ac:	6963      	ldr	r3, [r4, #20]
 80109ae:	9a04      	ldr	r2, [sp, #16]
 80109b0:	189b      	adds	r3, r3, r2
 80109b2:	6163      	str	r3, [r4, #20]
 80109b4:	e764      	b.n	8010880 <_vfiprintf_r+0x70>
 80109b6:	4343      	muls	r3, r0
 80109b8:	002e      	movs	r6, r5
 80109ba:	2101      	movs	r1, #1
 80109bc:	189b      	adds	r3, r3, r2
 80109be:	e7a6      	b.n	801090e <_vfiprintf_r+0xfe>
 80109c0:	2301      	movs	r3, #1
 80109c2:	425b      	negs	r3, r3
 80109c4:	e7d0      	b.n	8010968 <_vfiprintf_r+0x158>
 80109c6:	2300      	movs	r3, #0
 80109c8:	200a      	movs	r0, #10
 80109ca:	001a      	movs	r2, r3
 80109cc:	3601      	adds	r6, #1
 80109ce:	6063      	str	r3, [r4, #4]
 80109d0:	7831      	ldrb	r1, [r6, #0]
 80109d2:	1c75      	adds	r5, r6, #1
 80109d4:	3930      	subs	r1, #48	; 0x30
 80109d6:	2909      	cmp	r1, #9
 80109d8:	d903      	bls.n	80109e2 <_vfiprintf_r+0x1d2>
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d0c5      	beq.n	801096a <_vfiprintf_r+0x15a>
 80109de:	9209      	str	r2, [sp, #36]	; 0x24
 80109e0:	e7c3      	b.n	801096a <_vfiprintf_r+0x15a>
 80109e2:	4342      	muls	r2, r0
 80109e4:	002e      	movs	r6, r5
 80109e6:	2301      	movs	r3, #1
 80109e8:	1852      	adds	r2, r2, r1
 80109ea:	e7f1      	b.n	80109d0 <_vfiprintf_r+0x1c0>
 80109ec:	aa07      	add	r2, sp, #28
 80109ee:	9200      	str	r2, [sp, #0]
 80109f0:	0021      	movs	r1, r4
 80109f2:	003a      	movs	r2, r7
 80109f4:	4b13      	ldr	r3, [pc, #76]	; (8010a44 <_vfiprintf_r+0x234>)
 80109f6:	9803      	ldr	r0, [sp, #12]
 80109f8:	f7fc fbea 	bl	800d1d0 <_printf_float>
 80109fc:	9004      	str	r0, [sp, #16]
 80109fe:	9b04      	ldr	r3, [sp, #16]
 8010a00:	3301      	adds	r3, #1
 8010a02:	d1d3      	bne.n	80109ac <_vfiprintf_r+0x19c>
 8010a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a06:	07db      	lsls	r3, r3, #31
 8010a08:	d405      	bmi.n	8010a16 <_vfiprintf_r+0x206>
 8010a0a:	89bb      	ldrh	r3, [r7, #12]
 8010a0c:	059b      	lsls	r3, r3, #22
 8010a0e:	d402      	bmi.n	8010a16 <_vfiprintf_r+0x206>
 8010a10:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010a12:	f7fd fcd3 	bl	800e3bc <__retarget_lock_release_recursive>
 8010a16:	89bb      	ldrh	r3, [r7, #12]
 8010a18:	065b      	lsls	r3, r3, #25
 8010a1a:	d500      	bpl.n	8010a1e <_vfiprintf_r+0x20e>
 8010a1c:	e71d      	b.n	801085a <_vfiprintf_r+0x4a>
 8010a1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010a20:	e71d      	b.n	801085e <_vfiprintf_r+0x4e>
 8010a22:	aa07      	add	r2, sp, #28
 8010a24:	9200      	str	r2, [sp, #0]
 8010a26:	0021      	movs	r1, r4
 8010a28:	003a      	movs	r2, r7
 8010a2a:	4b06      	ldr	r3, [pc, #24]	; (8010a44 <_vfiprintf_r+0x234>)
 8010a2c:	9803      	ldr	r0, [sp, #12]
 8010a2e:	f7fc fe95 	bl	800d75c <_printf_i>
 8010a32:	e7e3      	b.n	80109fc <_vfiprintf_r+0x1ec>
 8010a34:	0801337c 	.word	0x0801337c
 8010a38:	08013382 	.word	0x08013382
 8010a3c:	08013386 	.word	0x08013386
 8010a40:	0800d1d1 	.word	0x0800d1d1
 8010a44:	080107eb 	.word	0x080107eb

08010a48 <__swbuf_r>:
 8010a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4a:	0006      	movs	r6, r0
 8010a4c:	000d      	movs	r5, r1
 8010a4e:	0014      	movs	r4, r2
 8010a50:	2800      	cmp	r0, #0
 8010a52:	d004      	beq.n	8010a5e <__swbuf_r+0x16>
 8010a54:	6a03      	ldr	r3, [r0, #32]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d101      	bne.n	8010a5e <__swbuf_r+0x16>
 8010a5a:	f7fd fa27 	bl	800deac <__sinit>
 8010a5e:	69a3      	ldr	r3, [r4, #24]
 8010a60:	60a3      	str	r3, [r4, #8]
 8010a62:	89a3      	ldrh	r3, [r4, #12]
 8010a64:	071b      	lsls	r3, r3, #28
 8010a66:	d528      	bpl.n	8010aba <__swbuf_r+0x72>
 8010a68:	6923      	ldr	r3, [r4, #16]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d025      	beq.n	8010aba <__swbuf_r+0x72>
 8010a6e:	6923      	ldr	r3, [r4, #16]
 8010a70:	6820      	ldr	r0, [r4, #0]
 8010a72:	b2ef      	uxtb	r7, r5
 8010a74:	1ac0      	subs	r0, r0, r3
 8010a76:	6963      	ldr	r3, [r4, #20]
 8010a78:	b2ed      	uxtb	r5, r5
 8010a7a:	4283      	cmp	r3, r0
 8010a7c:	dc05      	bgt.n	8010a8a <__swbuf_r+0x42>
 8010a7e:	0021      	movs	r1, r4
 8010a80:	0030      	movs	r0, r6
 8010a82:	f7ff fdeb 	bl	801065c <_fflush_r>
 8010a86:	2800      	cmp	r0, #0
 8010a88:	d11d      	bne.n	8010ac6 <__swbuf_r+0x7e>
 8010a8a:	68a3      	ldr	r3, [r4, #8]
 8010a8c:	3001      	adds	r0, #1
 8010a8e:	3b01      	subs	r3, #1
 8010a90:	60a3      	str	r3, [r4, #8]
 8010a92:	6823      	ldr	r3, [r4, #0]
 8010a94:	1c5a      	adds	r2, r3, #1
 8010a96:	6022      	str	r2, [r4, #0]
 8010a98:	701f      	strb	r7, [r3, #0]
 8010a9a:	6963      	ldr	r3, [r4, #20]
 8010a9c:	4283      	cmp	r3, r0
 8010a9e:	d004      	beq.n	8010aaa <__swbuf_r+0x62>
 8010aa0:	89a3      	ldrh	r3, [r4, #12]
 8010aa2:	07db      	lsls	r3, r3, #31
 8010aa4:	d507      	bpl.n	8010ab6 <__swbuf_r+0x6e>
 8010aa6:	2d0a      	cmp	r5, #10
 8010aa8:	d105      	bne.n	8010ab6 <__swbuf_r+0x6e>
 8010aaa:	0021      	movs	r1, r4
 8010aac:	0030      	movs	r0, r6
 8010aae:	f7ff fdd5 	bl	801065c <_fflush_r>
 8010ab2:	2800      	cmp	r0, #0
 8010ab4:	d107      	bne.n	8010ac6 <__swbuf_r+0x7e>
 8010ab6:	0028      	movs	r0, r5
 8010ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aba:	0021      	movs	r1, r4
 8010abc:	0030      	movs	r0, r6
 8010abe:	f000 f805 	bl	8010acc <__swsetup_r>
 8010ac2:	2800      	cmp	r0, #0
 8010ac4:	d0d3      	beq.n	8010a6e <__swbuf_r+0x26>
 8010ac6:	2501      	movs	r5, #1
 8010ac8:	426d      	negs	r5, r5
 8010aca:	e7f4      	b.n	8010ab6 <__swbuf_r+0x6e>

08010acc <__swsetup_r>:
 8010acc:	4b30      	ldr	r3, [pc, #192]	; (8010b90 <__swsetup_r+0xc4>)
 8010ace:	b570      	push	{r4, r5, r6, lr}
 8010ad0:	0005      	movs	r5, r0
 8010ad2:	6818      	ldr	r0, [r3, #0]
 8010ad4:	000c      	movs	r4, r1
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d004      	beq.n	8010ae4 <__swsetup_r+0x18>
 8010ada:	6a03      	ldr	r3, [r0, #32]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d101      	bne.n	8010ae4 <__swsetup_r+0x18>
 8010ae0:	f7fd f9e4 	bl	800deac <__sinit>
 8010ae4:	230c      	movs	r3, #12
 8010ae6:	5ee2      	ldrsh	r2, [r4, r3]
 8010ae8:	b293      	uxth	r3, r2
 8010aea:	0711      	lsls	r1, r2, #28
 8010aec:	d423      	bmi.n	8010b36 <__swsetup_r+0x6a>
 8010aee:	06d9      	lsls	r1, r3, #27
 8010af0:	d407      	bmi.n	8010b02 <__swsetup_r+0x36>
 8010af2:	2309      	movs	r3, #9
 8010af4:	2001      	movs	r0, #1
 8010af6:	602b      	str	r3, [r5, #0]
 8010af8:	3337      	adds	r3, #55	; 0x37
 8010afa:	4313      	orrs	r3, r2
 8010afc:	81a3      	strh	r3, [r4, #12]
 8010afe:	4240      	negs	r0, r0
 8010b00:	bd70      	pop	{r4, r5, r6, pc}
 8010b02:	075b      	lsls	r3, r3, #29
 8010b04:	d513      	bpl.n	8010b2e <__swsetup_r+0x62>
 8010b06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b08:	2900      	cmp	r1, #0
 8010b0a:	d008      	beq.n	8010b1e <__swsetup_r+0x52>
 8010b0c:	0023      	movs	r3, r4
 8010b0e:	3344      	adds	r3, #68	; 0x44
 8010b10:	4299      	cmp	r1, r3
 8010b12:	d002      	beq.n	8010b1a <__swsetup_r+0x4e>
 8010b14:	0028      	movs	r0, r5
 8010b16:	f7fe fb35 	bl	800f184 <_free_r>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8010b1e:	2224      	movs	r2, #36	; 0x24
 8010b20:	89a3      	ldrh	r3, [r4, #12]
 8010b22:	4393      	bics	r3, r2
 8010b24:	81a3      	strh	r3, [r4, #12]
 8010b26:	2300      	movs	r3, #0
 8010b28:	6063      	str	r3, [r4, #4]
 8010b2a:	6923      	ldr	r3, [r4, #16]
 8010b2c:	6023      	str	r3, [r4, #0]
 8010b2e:	2308      	movs	r3, #8
 8010b30:	89a2      	ldrh	r2, [r4, #12]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	81a3      	strh	r3, [r4, #12]
 8010b36:	6923      	ldr	r3, [r4, #16]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d10b      	bne.n	8010b54 <__swsetup_r+0x88>
 8010b3c:	21a0      	movs	r1, #160	; 0xa0
 8010b3e:	2280      	movs	r2, #128	; 0x80
 8010b40:	89a3      	ldrh	r3, [r4, #12]
 8010b42:	0089      	lsls	r1, r1, #2
 8010b44:	0092      	lsls	r2, r2, #2
 8010b46:	400b      	ands	r3, r1
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d003      	beq.n	8010b54 <__swsetup_r+0x88>
 8010b4c:	0021      	movs	r1, r4
 8010b4e:	0028      	movs	r0, r5
 8010b50:	f000 f89a 	bl	8010c88 <__smakebuf_r>
 8010b54:	220c      	movs	r2, #12
 8010b56:	5ea3      	ldrsh	r3, [r4, r2]
 8010b58:	2001      	movs	r0, #1
 8010b5a:	001a      	movs	r2, r3
 8010b5c:	b299      	uxth	r1, r3
 8010b5e:	4002      	ands	r2, r0
 8010b60:	4203      	tst	r3, r0
 8010b62:	d00f      	beq.n	8010b84 <__swsetup_r+0xb8>
 8010b64:	2200      	movs	r2, #0
 8010b66:	60a2      	str	r2, [r4, #8]
 8010b68:	6962      	ldr	r2, [r4, #20]
 8010b6a:	4252      	negs	r2, r2
 8010b6c:	61a2      	str	r2, [r4, #24]
 8010b6e:	2000      	movs	r0, #0
 8010b70:	6922      	ldr	r2, [r4, #16]
 8010b72:	4282      	cmp	r2, r0
 8010b74:	d1c4      	bne.n	8010b00 <__swsetup_r+0x34>
 8010b76:	0609      	lsls	r1, r1, #24
 8010b78:	d5c2      	bpl.n	8010b00 <__swsetup_r+0x34>
 8010b7a:	2240      	movs	r2, #64	; 0x40
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	81a3      	strh	r3, [r4, #12]
 8010b80:	3801      	subs	r0, #1
 8010b82:	e7bd      	b.n	8010b00 <__swsetup_r+0x34>
 8010b84:	0788      	lsls	r0, r1, #30
 8010b86:	d400      	bmi.n	8010b8a <__swsetup_r+0xbe>
 8010b88:	6962      	ldr	r2, [r4, #20]
 8010b8a:	60a2      	str	r2, [r4, #8]
 8010b8c:	e7ef      	b.n	8010b6e <__swsetup_r+0xa2>
 8010b8e:	46c0      	nop			; (mov r8, r8)
 8010b90:	200002b8 	.word	0x200002b8

08010b94 <_raise_r>:
 8010b94:	b570      	push	{r4, r5, r6, lr}
 8010b96:	0004      	movs	r4, r0
 8010b98:	000d      	movs	r5, r1
 8010b9a:	291f      	cmp	r1, #31
 8010b9c:	d904      	bls.n	8010ba8 <_raise_r+0x14>
 8010b9e:	2316      	movs	r3, #22
 8010ba0:	6003      	str	r3, [r0, #0]
 8010ba2:	2001      	movs	r0, #1
 8010ba4:	4240      	negs	r0, r0
 8010ba6:	bd70      	pop	{r4, r5, r6, pc}
 8010ba8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d004      	beq.n	8010bb8 <_raise_r+0x24>
 8010bae:	008a      	lsls	r2, r1, #2
 8010bb0:	189b      	adds	r3, r3, r2
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	2a00      	cmp	r2, #0
 8010bb6:	d108      	bne.n	8010bca <_raise_r+0x36>
 8010bb8:	0020      	movs	r0, r4
 8010bba:	f000 f831 	bl	8010c20 <_getpid_r>
 8010bbe:	002a      	movs	r2, r5
 8010bc0:	0001      	movs	r1, r0
 8010bc2:	0020      	movs	r0, r4
 8010bc4:	f000 f81a 	bl	8010bfc <_kill_r>
 8010bc8:	e7ed      	b.n	8010ba6 <_raise_r+0x12>
 8010bca:	2000      	movs	r0, #0
 8010bcc:	2a01      	cmp	r2, #1
 8010bce:	d0ea      	beq.n	8010ba6 <_raise_r+0x12>
 8010bd0:	1c51      	adds	r1, r2, #1
 8010bd2:	d103      	bne.n	8010bdc <_raise_r+0x48>
 8010bd4:	2316      	movs	r3, #22
 8010bd6:	3001      	adds	r0, #1
 8010bd8:	6023      	str	r3, [r4, #0]
 8010bda:	e7e4      	b.n	8010ba6 <_raise_r+0x12>
 8010bdc:	2400      	movs	r4, #0
 8010bde:	0028      	movs	r0, r5
 8010be0:	601c      	str	r4, [r3, #0]
 8010be2:	4790      	blx	r2
 8010be4:	0020      	movs	r0, r4
 8010be6:	e7de      	b.n	8010ba6 <_raise_r+0x12>

08010be8 <raise>:
 8010be8:	b510      	push	{r4, lr}
 8010bea:	4b03      	ldr	r3, [pc, #12]	; (8010bf8 <raise+0x10>)
 8010bec:	0001      	movs	r1, r0
 8010bee:	6818      	ldr	r0, [r3, #0]
 8010bf0:	f7ff ffd0 	bl	8010b94 <_raise_r>
 8010bf4:	bd10      	pop	{r4, pc}
 8010bf6:	46c0      	nop			; (mov r8, r8)
 8010bf8:	200002b8 	.word	0x200002b8

08010bfc <_kill_r>:
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	b570      	push	{r4, r5, r6, lr}
 8010c00:	4d06      	ldr	r5, [pc, #24]	; (8010c1c <_kill_r+0x20>)
 8010c02:	0004      	movs	r4, r0
 8010c04:	0008      	movs	r0, r1
 8010c06:	0011      	movs	r1, r2
 8010c08:	602b      	str	r3, [r5, #0]
 8010c0a:	f7f6 f8df 	bl	8006dcc <_kill>
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	d103      	bne.n	8010c1a <_kill_r+0x1e>
 8010c12:	682b      	ldr	r3, [r5, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d000      	beq.n	8010c1a <_kill_r+0x1e>
 8010c18:	6023      	str	r3, [r4, #0]
 8010c1a:	bd70      	pop	{r4, r5, r6, pc}
 8010c1c:	20005a98 	.word	0x20005a98

08010c20 <_getpid_r>:
 8010c20:	b510      	push	{r4, lr}
 8010c22:	f7f6 f8d1 	bl	8006dc8 <_getpid>
 8010c26:	bd10      	pop	{r4, pc}

08010c28 <_malloc_usable_size_r>:
 8010c28:	1f0b      	subs	r3, r1, #4
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	1f18      	subs	r0, r3, #4
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	da01      	bge.n	8010c36 <_malloc_usable_size_r+0xe>
 8010c32:	580b      	ldr	r3, [r1, r0]
 8010c34:	18c0      	adds	r0, r0, r3
 8010c36:	4770      	bx	lr

08010c38 <__swhatbuf_r>:
 8010c38:	b570      	push	{r4, r5, r6, lr}
 8010c3a:	000e      	movs	r6, r1
 8010c3c:	001d      	movs	r5, r3
 8010c3e:	230e      	movs	r3, #14
 8010c40:	5ec9      	ldrsh	r1, [r1, r3]
 8010c42:	0014      	movs	r4, r2
 8010c44:	b096      	sub	sp, #88	; 0x58
 8010c46:	2900      	cmp	r1, #0
 8010c48:	da0c      	bge.n	8010c64 <__swhatbuf_r+0x2c>
 8010c4a:	89b2      	ldrh	r2, [r6, #12]
 8010c4c:	2380      	movs	r3, #128	; 0x80
 8010c4e:	0011      	movs	r1, r2
 8010c50:	4019      	ands	r1, r3
 8010c52:	421a      	tst	r2, r3
 8010c54:	d013      	beq.n	8010c7e <__swhatbuf_r+0x46>
 8010c56:	2100      	movs	r1, #0
 8010c58:	3b40      	subs	r3, #64	; 0x40
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	6029      	str	r1, [r5, #0]
 8010c5e:	6023      	str	r3, [r4, #0]
 8010c60:	b016      	add	sp, #88	; 0x58
 8010c62:	bd70      	pop	{r4, r5, r6, pc}
 8010c64:	466a      	mov	r2, sp
 8010c66:	f000 f84d 	bl	8010d04 <_fstat_r>
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	dbed      	blt.n	8010c4a <__swhatbuf_r+0x12>
 8010c6e:	23f0      	movs	r3, #240	; 0xf0
 8010c70:	9901      	ldr	r1, [sp, #4]
 8010c72:	021b      	lsls	r3, r3, #8
 8010c74:	4019      	ands	r1, r3
 8010c76:	4b03      	ldr	r3, [pc, #12]	; (8010c84 <__swhatbuf_r+0x4c>)
 8010c78:	18c9      	adds	r1, r1, r3
 8010c7a:	424b      	negs	r3, r1
 8010c7c:	4159      	adcs	r1, r3
 8010c7e:	2380      	movs	r3, #128	; 0x80
 8010c80:	00db      	lsls	r3, r3, #3
 8010c82:	e7ea      	b.n	8010c5a <__swhatbuf_r+0x22>
 8010c84:	ffffe000 	.word	0xffffe000

08010c88 <__smakebuf_r>:
 8010c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010c8a:	2602      	movs	r6, #2
 8010c8c:	898b      	ldrh	r3, [r1, #12]
 8010c8e:	0005      	movs	r5, r0
 8010c90:	000c      	movs	r4, r1
 8010c92:	4233      	tst	r3, r6
 8010c94:	d006      	beq.n	8010ca4 <__smakebuf_r+0x1c>
 8010c96:	0023      	movs	r3, r4
 8010c98:	3347      	adds	r3, #71	; 0x47
 8010c9a:	6023      	str	r3, [r4, #0]
 8010c9c:	6123      	str	r3, [r4, #16]
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	6163      	str	r3, [r4, #20]
 8010ca2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010ca4:	466a      	mov	r2, sp
 8010ca6:	ab01      	add	r3, sp, #4
 8010ca8:	f7ff ffc6 	bl	8010c38 <__swhatbuf_r>
 8010cac:	9900      	ldr	r1, [sp, #0]
 8010cae:	0007      	movs	r7, r0
 8010cb0:	0028      	movs	r0, r5
 8010cb2:	f7fb fa85 	bl	800c1c0 <_malloc_r>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	d108      	bne.n	8010ccc <__smakebuf_r+0x44>
 8010cba:	220c      	movs	r2, #12
 8010cbc:	5ea3      	ldrsh	r3, [r4, r2]
 8010cbe:	059a      	lsls	r2, r3, #22
 8010cc0:	d4ef      	bmi.n	8010ca2 <__smakebuf_r+0x1a>
 8010cc2:	2203      	movs	r2, #3
 8010cc4:	4393      	bics	r3, r2
 8010cc6:	431e      	orrs	r6, r3
 8010cc8:	81a6      	strh	r6, [r4, #12]
 8010cca:	e7e4      	b.n	8010c96 <__smakebuf_r+0xe>
 8010ccc:	2380      	movs	r3, #128	; 0x80
 8010cce:	89a2      	ldrh	r2, [r4, #12]
 8010cd0:	6020      	str	r0, [r4, #0]
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	81a3      	strh	r3, [r4, #12]
 8010cd6:	9b00      	ldr	r3, [sp, #0]
 8010cd8:	6120      	str	r0, [r4, #16]
 8010cda:	6163      	str	r3, [r4, #20]
 8010cdc:	9b01      	ldr	r3, [sp, #4]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d00c      	beq.n	8010cfc <__smakebuf_r+0x74>
 8010ce2:	0028      	movs	r0, r5
 8010ce4:	230e      	movs	r3, #14
 8010ce6:	5ee1      	ldrsh	r1, [r4, r3]
 8010ce8:	f000 f81e 	bl	8010d28 <_isatty_r>
 8010cec:	2800      	cmp	r0, #0
 8010cee:	d005      	beq.n	8010cfc <__smakebuf_r+0x74>
 8010cf0:	2303      	movs	r3, #3
 8010cf2:	89a2      	ldrh	r2, [r4, #12]
 8010cf4:	439a      	bics	r2, r3
 8010cf6:	3b02      	subs	r3, #2
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	81a3      	strh	r3, [r4, #12]
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	433b      	orrs	r3, r7
 8010d00:	81a3      	strh	r3, [r4, #12]
 8010d02:	e7ce      	b.n	8010ca2 <__smakebuf_r+0x1a>

08010d04 <_fstat_r>:
 8010d04:	2300      	movs	r3, #0
 8010d06:	b570      	push	{r4, r5, r6, lr}
 8010d08:	4d06      	ldr	r5, [pc, #24]	; (8010d24 <_fstat_r+0x20>)
 8010d0a:	0004      	movs	r4, r0
 8010d0c:	0008      	movs	r0, r1
 8010d0e:	0011      	movs	r1, r2
 8010d10:	602b      	str	r3, [r5, #0]
 8010d12:	f7f6 f886 	bl	8006e22 <_fstat>
 8010d16:	1c43      	adds	r3, r0, #1
 8010d18:	d103      	bne.n	8010d22 <_fstat_r+0x1e>
 8010d1a:	682b      	ldr	r3, [r5, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d000      	beq.n	8010d22 <_fstat_r+0x1e>
 8010d20:	6023      	str	r3, [r4, #0]
 8010d22:	bd70      	pop	{r4, r5, r6, pc}
 8010d24:	20005a98 	.word	0x20005a98

08010d28 <_isatty_r>:
 8010d28:	2300      	movs	r3, #0
 8010d2a:	b570      	push	{r4, r5, r6, lr}
 8010d2c:	4d06      	ldr	r5, [pc, #24]	; (8010d48 <_isatty_r+0x20>)
 8010d2e:	0004      	movs	r4, r0
 8010d30:	0008      	movs	r0, r1
 8010d32:	602b      	str	r3, [r5, #0]
 8010d34:	f7f6 f87a 	bl	8006e2c <_isatty>
 8010d38:	1c43      	adds	r3, r0, #1
 8010d3a:	d103      	bne.n	8010d44 <_isatty_r+0x1c>
 8010d3c:	682b      	ldr	r3, [r5, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d000      	beq.n	8010d44 <_isatty_r+0x1c>
 8010d42:	6023      	str	r3, [r4, #0]
 8010d44:	bd70      	pop	{r4, r5, r6, pc}
 8010d46:	46c0      	nop			; (mov r8, r8)
 8010d48:	20005a98 	.word	0x20005a98

08010d4c <pow>:
 8010d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d4e:	0014      	movs	r4, r2
 8010d50:	001d      	movs	r5, r3
 8010d52:	9000      	str	r0, [sp, #0]
 8010d54:	9101      	str	r1, [sp, #4]
 8010d56:	f000 f86f 	bl	8010e38 <__ieee754_pow>
 8010d5a:	0022      	movs	r2, r4
 8010d5c:	0006      	movs	r6, r0
 8010d5e:	000f      	movs	r7, r1
 8010d60:	002b      	movs	r3, r5
 8010d62:	0020      	movs	r0, r4
 8010d64:	0029      	movs	r1, r5
 8010d66:	f7f2 f8f9 	bl	8002f5c <__aeabi_dcmpun>
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	d13f      	bne.n	8010dee <pow+0xa2>
 8010d6e:	9800      	ldr	r0, [sp, #0]
 8010d70:	9901      	ldr	r1, [sp, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	2300      	movs	r3, #0
 8010d76:	f7ef fb69 	bl	800044c <__aeabi_dcmpeq>
 8010d7a:	2800      	cmp	r0, #0
 8010d7c:	d019      	beq.n	8010db2 <pow+0x66>
 8010d7e:	2200      	movs	r2, #0
 8010d80:	2300      	movs	r3, #0
 8010d82:	0020      	movs	r0, r4
 8010d84:	0029      	movs	r1, r5
 8010d86:	f7ef fb61 	bl	800044c <__aeabi_dcmpeq>
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	d146      	bne.n	8010e1c <pow+0xd0>
 8010d8e:	0020      	movs	r0, r4
 8010d90:	0029      	movs	r1, r5
 8010d92:	f000 f849 	bl	8010e28 <finite>
 8010d96:	2800      	cmp	r0, #0
 8010d98:	d029      	beq.n	8010dee <pow+0xa2>
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	0020      	movs	r0, r4
 8010da0:	0029      	movs	r1, r5
 8010da2:	f7ef fb59 	bl	8000458 <__aeabi_dcmplt>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d021      	beq.n	8010dee <pow+0xa2>
 8010daa:	f7fd fadb 	bl	800e364 <__errno>
 8010dae:	2322      	movs	r3, #34	; 0x22
 8010db0:	e01c      	b.n	8010dec <pow+0xa0>
 8010db2:	0030      	movs	r0, r6
 8010db4:	0039      	movs	r1, r7
 8010db6:	f000 f837 	bl	8010e28 <finite>
 8010dba:	2800      	cmp	r0, #0
 8010dbc:	d11b      	bne.n	8010df6 <pow+0xaa>
 8010dbe:	9800      	ldr	r0, [sp, #0]
 8010dc0:	9901      	ldr	r1, [sp, #4]
 8010dc2:	f000 f831 	bl	8010e28 <finite>
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	d015      	beq.n	8010df6 <pow+0xaa>
 8010dca:	0020      	movs	r0, r4
 8010dcc:	0029      	movs	r1, r5
 8010dce:	f000 f82b 	bl	8010e28 <finite>
 8010dd2:	2800      	cmp	r0, #0
 8010dd4:	d00f      	beq.n	8010df6 <pow+0xaa>
 8010dd6:	0032      	movs	r2, r6
 8010dd8:	003b      	movs	r3, r7
 8010dda:	0030      	movs	r0, r6
 8010ddc:	0039      	movs	r1, r7
 8010dde:	f7f2 f8bd 	bl	8002f5c <__aeabi_dcmpun>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	d0e1      	beq.n	8010daa <pow+0x5e>
 8010de6:	f7fd fabd 	bl	800e364 <__errno>
 8010dea:	2321      	movs	r3, #33	; 0x21
 8010dec:	6003      	str	r3, [r0, #0]
 8010dee:	0030      	movs	r0, r6
 8010df0:	0039      	movs	r1, r7
 8010df2:	b003      	add	sp, #12
 8010df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010df6:	2200      	movs	r2, #0
 8010df8:	2300      	movs	r3, #0
 8010dfa:	0030      	movs	r0, r6
 8010dfc:	0039      	movs	r1, r7
 8010dfe:	f7ef fb25 	bl	800044c <__aeabi_dcmpeq>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	d0f3      	beq.n	8010dee <pow+0xa2>
 8010e06:	9800      	ldr	r0, [sp, #0]
 8010e08:	9901      	ldr	r1, [sp, #4]
 8010e0a:	f000 f80d 	bl	8010e28 <finite>
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	d0ed      	beq.n	8010dee <pow+0xa2>
 8010e12:	0020      	movs	r0, r4
 8010e14:	0029      	movs	r1, r5
 8010e16:	f000 f807 	bl	8010e28 <finite>
 8010e1a:	e7c4      	b.n	8010da6 <pow+0x5a>
 8010e1c:	2600      	movs	r6, #0
 8010e1e:	4f01      	ldr	r7, [pc, #4]	; (8010e24 <pow+0xd8>)
 8010e20:	e7e5      	b.n	8010dee <pow+0xa2>
 8010e22:	46c0      	nop			; (mov r8, r8)
 8010e24:	3ff00000 	.word	0x3ff00000

08010e28 <finite>:
 8010e28:	4b02      	ldr	r3, [pc, #8]	; (8010e34 <finite+0xc>)
 8010e2a:	0048      	lsls	r0, r1, #1
 8010e2c:	0840      	lsrs	r0, r0, #1
 8010e2e:	18c0      	adds	r0, r0, r3
 8010e30:	0fc0      	lsrs	r0, r0, #31
 8010e32:	4770      	bx	lr
 8010e34:	80100000 	.word	0x80100000

08010e38 <__ieee754_pow>:
 8010e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e3a:	b095      	sub	sp, #84	; 0x54
 8010e3c:	9202      	str	r2, [sp, #8]
 8010e3e:	9303      	str	r3, [sp, #12]
 8010e40:	9b03      	ldr	r3, [sp, #12]
 8010e42:	9a03      	ldr	r2, [sp, #12]
 8010e44:	9304      	str	r3, [sp, #16]
 8010e46:	9b02      	ldr	r3, [sp, #8]
 8010e48:	0056      	lsls	r6, r2, #1
 8010e4a:	001a      	movs	r2, r3
 8010e4c:	0876      	lsrs	r6, r6, #1
 8010e4e:	0007      	movs	r7, r0
 8010e50:	000d      	movs	r5, r1
 8010e52:	4332      	orrs	r2, r6
 8010e54:	d119      	bne.n	8010e8a <__ieee754_pow+0x52>
 8010e56:	2180      	movs	r1, #128	; 0x80
 8010e58:	0309      	lsls	r1, r1, #12
 8010e5a:	4069      	eors	r1, r5
 8010e5c:	0002      	movs	r2, r0
 8010e5e:	000b      	movs	r3, r1
 8010e60:	1892      	adds	r2, r2, r2
 8010e62:	415b      	adcs	r3, r3
 8010e64:	4989      	ldr	r1, [pc, #548]	; (801108c <__ieee754_pow+0x254>)
 8010e66:	428b      	cmp	r3, r1
 8010e68:	d806      	bhi.n	8010e78 <__ieee754_pow+0x40>
 8010e6a:	d001      	beq.n	8010e70 <__ieee754_pow+0x38>
 8010e6c:	f000 fcb6 	bl	80117dc <__ieee754_pow+0x9a4>
 8010e70:	2a00      	cmp	r2, #0
 8010e72:	d101      	bne.n	8010e78 <__ieee754_pow+0x40>
 8010e74:	f000 fcb2 	bl	80117dc <__ieee754_pow+0x9a4>
 8010e78:	9a02      	ldr	r2, [sp, #8]
 8010e7a:	9b03      	ldr	r3, [sp, #12]
 8010e7c:	0038      	movs	r0, r7
 8010e7e:	0029      	movs	r1, r5
 8010e80:	f7f0 face 	bl	8001420 <__aeabi_dadd>
 8010e84:	9000      	str	r0, [sp, #0]
 8010e86:	9101      	str	r1, [sp, #4]
 8010e88:	e0ad      	b.n	8010fe6 <__ieee754_pow+0x1ae>
 8010e8a:	4a81      	ldr	r2, [pc, #516]	; (8011090 <__ieee754_pow+0x258>)
 8010e8c:	004c      	lsls	r4, r1, #1
 8010e8e:	9108      	str	r1, [sp, #32]
 8010e90:	9000      	str	r0, [sp, #0]
 8010e92:	0864      	lsrs	r4, r4, #1
 8010e94:	4294      	cmp	r4, r2
 8010e96:	dc08      	bgt.n	8010eaa <__ieee754_pow+0x72>
 8010e98:	d101      	bne.n	8010e9e <__ieee754_pow+0x66>
 8010e9a:	2800      	cmp	r0, #0
 8010e9c:	d1ec      	bne.n	8010e78 <__ieee754_pow+0x40>
 8010e9e:	4a7c      	ldr	r2, [pc, #496]	; (8011090 <__ieee754_pow+0x258>)
 8010ea0:	4296      	cmp	r6, r2
 8010ea2:	dc02      	bgt.n	8010eaa <__ieee754_pow+0x72>
 8010ea4:	d10c      	bne.n	8010ec0 <__ieee754_pow+0x88>
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d00a      	beq.n	8010ec0 <__ieee754_pow+0x88>
 8010eaa:	4b7a      	ldr	r3, [pc, #488]	; (8011094 <__ieee754_pow+0x25c>)
 8010eac:	18eb      	adds	r3, r5, r3
 8010eae:	433b      	orrs	r3, r7
 8010eb0:	d1e2      	bne.n	8010e78 <__ieee754_pow+0x40>
 8010eb2:	2180      	movs	r1, #128	; 0x80
 8010eb4:	9803      	ldr	r0, [sp, #12]
 8010eb6:	0309      	lsls	r1, r1, #12
 8010eb8:	4048      	eors	r0, r1
 8010eba:	0003      	movs	r3, r0
 8010ebc:	9a02      	ldr	r2, [sp, #8]
 8010ebe:	e7cf      	b.n	8010e60 <__ieee754_pow+0x28>
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	9206      	str	r2, [sp, #24]
 8010ec4:	2d00      	cmp	r5, #0
 8010ec6:	da69      	bge.n	8010f9c <__ieee754_pow+0x164>
 8010ec8:	4a73      	ldr	r2, [pc, #460]	; (8011098 <__ieee754_pow+0x260>)
 8010eca:	4296      	cmp	r6, r2
 8010ecc:	dc64      	bgt.n	8010f98 <__ieee754_pow+0x160>
 8010ece:	4a73      	ldr	r2, [pc, #460]	; (801109c <__ieee754_pow+0x264>)
 8010ed0:	4296      	cmp	r6, r2
 8010ed2:	dd11      	ble.n	8010ef8 <__ieee754_pow+0xc0>
 8010ed4:	4972      	ldr	r1, [pc, #456]	; (80110a0 <__ieee754_pow+0x268>)
 8010ed6:	1532      	asrs	r2, r6, #20
 8010ed8:	1852      	adds	r2, r2, r1
 8010eda:	2a14      	cmp	r2, #20
 8010edc:	dd3c      	ble.n	8010f58 <__ieee754_pow+0x120>
 8010ede:	2134      	movs	r1, #52	; 0x34
 8010ee0:	1a89      	subs	r1, r1, r2
 8010ee2:	9a02      	ldr	r2, [sp, #8]
 8010ee4:	40ca      	lsrs	r2, r1
 8010ee6:	0010      	movs	r0, r2
 8010ee8:	4088      	lsls	r0, r1
 8010eea:	4298      	cmp	r0, r3
 8010eec:	d104      	bne.n	8010ef8 <__ieee754_pow+0xc0>
 8010eee:	2101      	movs	r1, #1
 8010ef0:	400a      	ands	r2, r1
 8010ef2:	1849      	adds	r1, r1, r1
 8010ef4:	1a8a      	subs	r2, r1, r2
 8010ef6:	9206      	str	r2, [sp, #24]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d03c      	beq.n	8010f76 <__ieee754_pow+0x13e>
 8010efc:	0038      	movs	r0, r7
 8010efe:	0029      	movs	r1, r5
 8010f00:	f000 fca4 	bl	801184c <fabs>
 8010f04:	9000      	str	r0, [sp, #0]
 8010f06:	9101      	str	r1, [sp, #4]
 8010f08:	2f00      	cmp	r7, #0
 8010f0a:	d000      	beq.n	8010f0e <__ieee754_pow+0xd6>
 8010f0c:	e094      	b.n	8011038 <__ieee754_pow+0x200>
 8010f0e:	2c00      	cmp	r4, #0
 8010f10:	d005      	beq.n	8010f1e <__ieee754_pow+0xe6>
 8010f12:	4a64      	ldr	r2, [pc, #400]	; (80110a4 <__ieee754_pow+0x26c>)
 8010f14:	00ab      	lsls	r3, r5, #2
 8010f16:	089b      	lsrs	r3, r3, #2
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d000      	beq.n	8010f1e <__ieee754_pow+0xe6>
 8010f1c:	e08c      	b.n	8011038 <__ieee754_pow+0x200>
 8010f1e:	9b04      	ldr	r3, [sp, #16]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	da07      	bge.n	8010f34 <__ieee754_pow+0xfc>
 8010f24:	9a00      	ldr	r2, [sp, #0]
 8010f26:	9b01      	ldr	r3, [sp, #4]
 8010f28:	2000      	movs	r0, #0
 8010f2a:	495e      	ldr	r1, [pc, #376]	; (80110a4 <__ieee754_pow+0x26c>)
 8010f2c:	f7f0 fdd8 	bl	8001ae0 <__aeabi_ddiv>
 8010f30:	9000      	str	r0, [sp, #0]
 8010f32:	9101      	str	r1, [sp, #4]
 8010f34:	9b08      	ldr	r3, [sp, #32]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	da55      	bge.n	8010fe6 <__ieee754_pow+0x1ae>
 8010f3a:	4b56      	ldr	r3, [pc, #344]	; (8011094 <__ieee754_pow+0x25c>)
 8010f3c:	18e4      	adds	r4, r4, r3
 8010f3e:	9b06      	ldr	r3, [sp, #24]
 8010f40:	431c      	orrs	r4, r3
 8010f42:	d000      	beq.n	8010f46 <__ieee754_pow+0x10e>
 8010f44:	e06c      	b.n	8011020 <__ieee754_pow+0x1e8>
 8010f46:	9a00      	ldr	r2, [sp, #0]
 8010f48:	9b01      	ldr	r3, [sp, #4]
 8010f4a:	0010      	movs	r0, r2
 8010f4c:	0019      	movs	r1, r3
 8010f4e:	f7f1 fc83 	bl	8002858 <__aeabi_dsub>
 8010f52:	0002      	movs	r2, r0
 8010f54:	000b      	movs	r3, r1
 8010f56:	e01c      	b.n	8010f92 <__ieee754_pow+0x15a>
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d1cf      	bne.n	8010efc <__ieee754_pow+0xc4>
 8010f5c:	3314      	adds	r3, #20
 8010f5e:	1a9a      	subs	r2, r3, r2
 8010f60:	0033      	movs	r3, r6
 8010f62:	4113      	asrs	r3, r2
 8010f64:	0019      	movs	r1, r3
 8010f66:	4091      	lsls	r1, r2
 8010f68:	42b1      	cmp	r1, r6
 8010f6a:	d104      	bne.n	8010f76 <__ieee754_pow+0x13e>
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	4013      	ands	r3, r2
 8010f70:	1892      	adds	r2, r2, r2
 8010f72:	1ad3      	subs	r3, r2, r3
 8010f74:	9306      	str	r3, [sp, #24]
 8010f76:	4b4b      	ldr	r3, [pc, #300]	; (80110a4 <__ieee754_pow+0x26c>)
 8010f78:	429e      	cmp	r6, r3
 8010f7a:	d138      	bne.n	8010fee <__ieee754_pow+0x1b6>
 8010f7c:	0038      	movs	r0, r7
 8010f7e:	0029      	movs	r1, r5
 8010f80:	9b04      	ldr	r3, [sp, #16]
 8010f82:	9000      	str	r0, [sp, #0]
 8010f84:	9101      	str	r1, [sp, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	da2d      	bge.n	8010fe6 <__ieee754_pow+0x1ae>
 8010f8a:	003a      	movs	r2, r7
 8010f8c:	002b      	movs	r3, r5
 8010f8e:	2000      	movs	r0, #0
 8010f90:	4944      	ldr	r1, [pc, #272]	; (80110a4 <__ieee754_pow+0x26c>)
 8010f92:	f7f0 fda5 	bl	8001ae0 <__aeabi_ddiv>
 8010f96:	e775      	b.n	8010e84 <__ieee754_pow+0x4c>
 8010f98:	2202      	movs	r2, #2
 8010f9a:	9206      	str	r2, [sp, #24]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d1ad      	bne.n	8010efc <__ieee754_pow+0xc4>
 8010fa0:	4b3b      	ldr	r3, [pc, #236]	; (8011090 <__ieee754_pow+0x258>)
 8010fa2:	429e      	cmp	r6, r3
 8010fa4:	d1e7      	bne.n	8010f76 <__ieee754_pow+0x13e>
 8010fa6:	4b3b      	ldr	r3, [pc, #236]	; (8011094 <__ieee754_pow+0x25c>)
 8010fa8:	18e3      	adds	r3, r4, r3
 8010faa:	433b      	orrs	r3, r7
 8010fac:	d101      	bne.n	8010fb2 <__ieee754_pow+0x17a>
 8010fae:	f000 fc15 	bl	80117dc <__ieee754_pow+0x9a4>
 8010fb2:	4b3a      	ldr	r3, [pc, #232]	; (801109c <__ieee754_pow+0x264>)
 8010fb4:	429c      	cmp	r4, r3
 8010fb6:	dd09      	ble.n	8010fcc <__ieee754_pow+0x194>
 8010fb8:	9b04      	ldr	r3, [sp, #16]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	da01      	bge.n	8010fc2 <__ieee754_pow+0x18a>
 8010fbe:	f000 fc11 	bl	80117e4 <__ieee754_pow+0x9ac>
 8010fc2:	9b02      	ldr	r3, [sp, #8]
 8010fc4:	9c03      	ldr	r4, [sp, #12]
 8010fc6:	9300      	str	r3, [sp, #0]
 8010fc8:	9401      	str	r4, [sp, #4]
 8010fca:	e00c      	b.n	8010fe6 <__ieee754_pow+0x1ae>
 8010fcc:	9b04      	ldr	r3, [sp, #16]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	db01      	blt.n	8010fd6 <__ieee754_pow+0x19e>
 8010fd2:	f000 fc07 	bl	80117e4 <__ieee754_pow+0x9ac>
 8010fd6:	2280      	movs	r2, #128	; 0x80
 8010fd8:	0612      	lsls	r2, r2, #24
 8010fda:	4694      	mov	ip, r2
 8010fdc:	9b02      	ldr	r3, [sp, #8]
 8010fde:	9300      	str	r3, [sp, #0]
 8010fe0:	9b03      	ldr	r3, [sp, #12]
 8010fe2:	4463      	add	r3, ip
 8010fe4:	9301      	str	r3, [sp, #4]
 8010fe6:	9800      	ldr	r0, [sp, #0]
 8010fe8:	9901      	ldr	r1, [sp, #4]
 8010fea:	b015      	add	sp, #84	; 0x54
 8010fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fee:	2380      	movs	r3, #128	; 0x80
 8010ff0:	9a04      	ldr	r2, [sp, #16]
 8010ff2:	05db      	lsls	r3, r3, #23
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d106      	bne.n	8011006 <__ieee754_pow+0x1ce>
 8010ff8:	003a      	movs	r2, r7
 8010ffa:	002b      	movs	r3, r5
 8010ffc:	0038      	movs	r0, r7
 8010ffe:	0029      	movs	r1, r5
 8011000:	f7f1 f968 	bl	80022d4 <__aeabi_dmul>
 8011004:	e73e      	b.n	8010e84 <__ieee754_pow+0x4c>
 8011006:	4b28      	ldr	r3, [pc, #160]	; (80110a8 <__ieee754_pow+0x270>)
 8011008:	9a04      	ldr	r2, [sp, #16]
 801100a:	429a      	cmp	r2, r3
 801100c:	d000      	beq.n	8011010 <__ieee754_pow+0x1d8>
 801100e:	e775      	b.n	8010efc <__ieee754_pow+0xc4>
 8011010:	2d00      	cmp	r5, #0
 8011012:	da00      	bge.n	8011016 <__ieee754_pow+0x1de>
 8011014:	e772      	b.n	8010efc <__ieee754_pow+0xc4>
 8011016:	0038      	movs	r0, r7
 8011018:	0029      	movs	r1, r5
 801101a:	f000 fcb7 	bl	801198c <__ieee754_sqrt>
 801101e:	e731      	b.n	8010e84 <__ieee754_pow+0x4c>
 8011020:	9b06      	ldr	r3, [sp, #24]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d1df      	bne.n	8010fe6 <__ieee754_pow+0x1ae>
 8011026:	9800      	ldr	r0, [sp, #0]
 8011028:	2180      	movs	r1, #128	; 0x80
 801102a:	0002      	movs	r2, r0
 801102c:	9801      	ldr	r0, [sp, #4]
 801102e:	0609      	lsls	r1, r1, #24
 8011030:	1843      	adds	r3, r0, r1
 8011032:	9200      	str	r2, [sp, #0]
 8011034:	9301      	str	r3, [sp, #4]
 8011036:	e7d6      	b.n	8010fe6 <__ieee754_pow+0x1ae>
 8011038:	0feb      	lsrs	r3, r5, #31
 801103a:	3b01      	subs	r3, #1
 801103c:	930e      	str	r3, [sp, #56]	; 0x38
 801103e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011040:	9b06      	ldr	r3, [sp, #24]
 8011042:	4313      	orrs	r3, r2
 8011044:	d104      	bne.n	8011050 <__ieee754_pow+0x218>
 8011046:	003a      	movs	r2, r7
 8011048:	002b      	movs	r3, r5
 801104a:	0038      	movs	r0, r7
 801104c:	0029      	movs	r1, r5
 801104e:	e77e      	b.n	8010f4e <__ieee754_pow+0x116>
 8011050:	4b16      	ldr	r3, [pc, #88]	; (80110ac <__ieee754_pow+0x274>)
 8011052:	429e      	cmp	r6, r3
 8011054:	dc00      	bgt.n	8011058 <__ieee754_pow+0x220>
 8011056:	e0f1      	b.n	801123c <__ieee754_pow+0x404>
 8011058:	4b15      	ldr	r3, [pc, #84]	; (80110b0 <__ieee754_pow+0x278>)
 801105a:	429e      	cmp	r6, r3
 801105c:	dd09      	ble.n	8011072 <__ieee754_pow+0x23a>
 801105e:	4b0f      	ldr	r3, [pc, #60]	; (801109c <__ieee754_pow+0x264>)
 8011060:	429c      	cmp	r4, r3
 8011062:	dc0c      	bgt.n	801107e <__ieee754_pow+0x246>
 8011064:	9b04      	ldr	r3, [sp, #16]
 8011066:	2b00      	cmp	r3, #0
 8011068:	da0c      	bge.n	8011084 <__ieee754_pow+0x24c>
 801106a:	2000      	movs	r0, #0
 801106c:	f000 fc86 	bl	801197c <__math_oflow>
 8011070:	e708      	b.n	8010e84 <__ieee754_pow+0x4c>
 8011072:	4b10      	ldr	r3, [pc, #64]	; (80110b4 <__ieee754_pow+0x27c>)
 8011074:	429c      	cmp	r4, r3
 8011076:	ddf5      	ble.n	8011064 <__ieee754_pow+0x22c>
 8011078:	4b0a      	ldr	r3, [pc, #40]	; (80110a4 <__ieee754_pow+0x26c>)
 801107a:	429c      	cmp	r4, r3
 801107c:	dd1c      	ble.n	80110b8 <__ieee754_pow+0x280>
 801107e:	9b04      	ldr	r3, [sp, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	dcf2      	bgt.n	801106a <__ieee754_pow+0x232>
 8011084:	2000      	movs	r0, #0
 8011086:	f000 fc72 	bl	801196e <__math_uflow>
 801108a:	e6fb      	b.n	8010e84 <__ieee754_pow+0x4c>
 801108c:	fff00000 	.word	0xfff00000
 8011090:	7ff00000 	.word	0x7ff00000
 8011094:	c0100000 	.word	0xc0100000
 8011098:	433fffff 	.word	0x433fffff
 801109c:	3fefffff 	.word	0x3fefffff
 80110a0:	fffffc01 	.word	0xfffffc01
 80110a4:	3ff00000 	.word	0x3ff00000
 80110a8:	3fe00000 	.word	0x3fe00000
 80110ac:	41e00000 	.word	0x41e00000
 80110b0:	43f00000 	.word	0x43f00000
 80110b4:	3feffffe 	.word	0x3feffffe
 80110b8:	2200      	movs	r2, #0
 80110ba:	9800      	ldr	r0, [sp, #0]
 80110bc:	9901      	ldr	r1, [sp, #4]
 80110be:	4b53      	ldr	r3, [pc, #332]	; (801120c <__ieee754_pow+0x3d4>)
 80110c0:	f7f1 fbca 	bl	8002858 <__aeabi_dsub>
 80110c4:	22c0      	movs	r2, #192	; 0xc0
 80110c6:	4b52      	ldr	r3, [pc, #328]	; (8011210 <__ieee754_pow+0x3d8>)
 80110c8:	05d2      	lsls	r2, r2, #23
 80110ca:	0004      	movs	r4, r0
 80110cc:	000d      	movs	r5, r1
 80110ce:	f7f1 f901 	bl	80022d4 <__aeabi_dmul>
 80110d2:	4a50      	ldr	r2, [pc, #320]	; (8011214 <__ieee754_pow+0x3dc>)
 80110d4:	0006      	movs	r6, r0
 80110d6:	000f      	movs	r7, r1
 80110d8:	0020      	movs	r0, r4
 80110da:	0029      	movs	r1, r5
 80110dc:	4b4e      	ldr	r3, [pc, #312]	; (8011218 <__ieee754_pow+0x3e0>)
 80110de:	f7f1 f8f9 	bl	80022d4 <__aeabi_dmul>
 80110e2:	2200      	movs	r2, #0
 80110e4:	9000      	str	r0, [sp, #0]
 80110e6:	9101      	str	r1, [sp, #4]
 80110e8:	4b4c      	ldr	r3, [pc, #304]	; (801121c <__ieee754_pow+0x3e4>)
 80110ea:	0020      	movs	r0, r4
 80110ec:	0029      	movs	r1, r5
 80110ee:	f7f1 f8f1 	bl	80022d4 <__aeabi_dmul>
 80110f2:	0002      	movs	r2, r0
 80110f4:	000b      	movs	r3, r1
 80110f6:	484a      	ldr	r0, [pc, #296]	; (8011220 <__ieee754_pow+0x3e8>)
 80110f8:	494a      	ldr	r1, [pc, #296]	; (8011224 <__ieee754_pow+0x3ec>)
 80110fa:	f7f1 fbad 	bl	8002858 <__aeabi_dsub>
 80110fe:	0022      	movs	r2, r4
 8011100:	002b      	movs	r3, r5
 8011102:	f7f1 f8e7 	bl	80022d4 <__aeabi_dmul>
 8011106:	0002      	movs	r2, r0
 8011108:	000b      	movs	r3, r1
 801110a:	2000      	movs	r0, #0
 801110c:	4946      	ldr	r1, [pc, #280]	; (8011228 <__ieee754_pow+0x3f0>)
 801110e:	f7f1 fba3 	bl	8002858 <__aeabi_dsub>
 8011112:	0022      	movs	r2, r4
 8011114:	002b      	movs	r3, r5
 8011116:	9004      	str	r0, [sp, #16]
 8011118:	9105      	str	r1, [sp, #20]
 801111a:	0020      	movs	r0, r4
 801111c:	0029      	movs	r1, r5
 801111e:	f7f1 f8d9 	bl	80022d4 <__aeabi_dmul>
 8011122:	0002      	movs	r2, r0
 8011124:	000b      	movs	r3, r1
 8011126:	9804      	ldr	r0, [sp, #16]
 8011128:	9905      	ldr	r1, [sp, #20]
 801112a:	f7f1 f8d3 	bl	80022d4 <__aeabi_dmul>
 801112e:	4a3f      	ldr	r2, [pc, #252]	; (801122c <__ieee754_pow+0x3f4>)
 8011130:	4b37      	ldr	r3, [pc, #220]	; (8011210 <__ieee754_pow+0x3d8>)
 8011132:	f7f1 f8cf 	bl	80022d4 <__aeabi_dmul>
 8011136:	0002      	movs	r2, r0
 8011138:	000b      	movs	r3, r1
 801113a:	9800      	ldr	r0, [sp, #0]
 801113c:	9901      	ldr	r1, [sp, #4]
 801113e:	f7f1 fb8b 	bl	8002858 <__aeabi_dsub>
 8011142:	0002      	movs	r2, r0
 8011144:	000b      	movs	r3, r1
 8011146:	0004      	movs	r4, r0
 8011148:	000d      	movs	r5, r1
 801114a:	0030      	movs	r0, r6
 801114c:	0039      	movs	r1, r7
 801114e:	f7f0 f967 	bl	8001420 <__aeabi_dadd>
 8011152:	2000      	movs	r0, #0
 8011154:	0032      	movs	r2, r6
 8011156:	003b      	movs	r3, r7
 8011158:	9004      	str	r0, [sp, #16]
 801115a:	9105      	str	r1, [sp, #20]
 801115c:	f7f1 fb7c 	bl	8002858 <__aeabi_dsub>
 8011160:	0002      	movs	r2, r0
 8011162:	000b      	movs	r3, r1
 8011164:	0020      	movs	r0, r4
 8011166:	0029      	movs	r1, r5
 8011168:	f7f1 fb76 	bl	8002858 <__aeabi_dsub>
 801116c:	9b06      	ldr	r3, [sp, #24]
 801116e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011170:	3b01      	subs	r3, #1
 8011172:	0006      	movs	r6, r0
 8011174:	000f      	movs	r7, r1
 8011176:	4313      	orrs	r3, r2
 8011178:	d000      	beq.n	801117c <__ieee754_pow+0x344>
 801117a:	e1dc      	b.n	8011536 <__ieee754_pow+0x6fe>
 801117c:	2300      	movs	r3, #0
 801117e:	4c2c      	ldr	r4, [pc, #176]	; (8011230 <__ieee754_pow+0x3f8>)
 8011180:	9300      	str	r3, [sp, #0]
 8011182:	9401      	str	r4, [sp, #4]
 8011184:	9c02      	ldr	r4, [sp, #8]
 8011186:	9d03      	ldr	r5, [sp, #12]
 8011188:	9802      	ldr	r0, [sp, #8]
 801118a:	9903      	ldr	r1, [sp, #12]
 801118c:	2400      	movs	r4, #0
 801118e:	002b      	movs	r3, r5
 8011190:	0022      	movs	r2, r4
 8011192:	f7f1 fb61 	bl	8002858 <__aeabi_dsub>
 8011196:	9a04      	ldr	r2, [sp, #16]
 8011198:	9b05      	ldr	r3, [sp, #20]
 801119a:	f7f1 f89b 	bl	80022d4 <__aeabi_dmul>
 801119e:	9a02      	ldr	r2, [sp, #8]
 80111a0:	9b03      	ldr	r3, [sp, #12]
 80111a2:	9006      	str	r0, [sp, #24]
 80111a4:	9107      	str	r1, [sp, #28]
 80111a6:	0030      	movs	r0, r6
 80111a8:	0039      	movs	r1, r7
 80111aa:	f7f1 f893 	bl	80022d4 <__aeabi_dmul>
 80111ae:	0002      	movs	r2, r0
 80111b0:	000b      	movs	r3, r1
 80111b2:	9806      	ldr	r0, [sp, #24]
 80111b4:	9907      	ldr	r1, [sp, #28]
 80111b6:	f7f0 f933 	bl	8001420 <__aeabi_dadd>
 80111ba:	0022      	movs	r2, r4
 80111bc:	002b      	movs	r3, r5
 80111be:	0006      	movs	r6, r0
 80111c0:	000f      	movs	r7, r1
 80111c2:	9804      	ldr	r0, [sp, #16]
 80111c4:	9905      	ldr	r1, [sp, #20]
 80111c6:	f7f1 f885 	bl	80022d4 <__aeabi_dmul>
 80111ca:	0003      	movs	r3, r0
 80111cc:	000c      	movs	r4, r1
 80111ce:	9004      	str	r0, [sp, #16]
 80111d0:	9105      	str	r1, [sp, #20]
 80111d2:	9306      	str	r3, [sp, #24]
 80111d4:	9407      	str	r4, [sp, #28]
 80111d6:	0002      	movs	r2, r0
 80111d8:	000b      	movs	r3, r1
 80111da:	0030      	movs	r0, r6
 80111dc:	0039      	movs	r1, r7
 80111de:	f7f0 f91f 	bl	8001420 <__aeabi_dadd>
 80111e2:	4b14      	ldr	r3, [pc, #80]	; (8011234 <__ieee754_pow+0x3fc>)
 80111e4:	0005      	movs	r5, r0
 80111e6:	000c      	movs	r4, r1
 80111e8:	9108      	str	r1, [sp, #32]
 80111ea:	4299      	cmp	r1, r3
 80111ec:	dc00      	bgt.n	80111f0 <__ieee754_pow+0x3b8>
 80111ee:	e2d4      	b.n	801179a <__ieee754_pow+0x962>
 80111f0:	4b11      	ldr	r3, [pc, #68]	; (8011238 <__ieee754_pow+0x400>)
 80111f2:	18cb      	adds	r3, r1, r3
 80111f4:	4303      	orrs	r3, r0
 80111f6:	d100      	bne.n	80111fa <__ieee754_pow+0x3c2>
 80111f8:	e1d6      	b.n	80115a8 <__ieee754_pow+0x770>
 80111fa:	9800      	ldr	r0, [sp, #0]
 80111fc:	9901      	ldr	r1, [sp, #4]
 80111fe:	2300      	movs	r3, #0
 8011200:	2200      	movs	r2, #0
 8011202:	f7ef f929 	bl	8000458 <__aeabi_dcmplt>
 8011206:	1e43      	subs	r3, r0, #1
 8011208:	4198      	sbcs	r0, r3
 801120a:	e72f      	b.n	801106c <__ieee754_pow+0x234>
 801120c:	3ff00000 	.word	0x3ff00000
 8011210:	3ff71547 	.word	0x3ff71547
 8011214:	f85ddf44 	.word	0xf85ddf44
 8011218:	3e54ae0b 	.word	0x3e54ae0b
 801121c:	3fd00000 	.word	0x3fd00000
 8011220:	55555555 	.word	0x55555555
 8011224:	3fd55555 	.word	0x3fd55555
 8011228:	3fe00000 	.word	0x3fe00000
 801122c:	652b82fe 	.word	0x652b82fe
 8011230:	bff00000 	.word	0xbff00000
 8011234:	408fffff 	.word	0x408fffff
 8011238:	bf700000 	.word	0xbf700000
 801123c:	4bbf      	ldr	r3, [pc, #764]	; (801153c <__ieee754_pow+0x704>)
 801123e:	2200      	movs	r2, #0
 8011240:	422b      	tst	r3, r5
 8011242:	d10a      	bne.n	801125a <__ieee754_pow+0x422>
 8011244:	9800      	ldr	r0, [sp, #0]
 8011246:	9901      	ldr	r1, [sp, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	4bbd      	ldr	r3, [pc, #756]	; (8011540 <__ieee754_pow+0x708>)
 801124c:	f7f1 f842 	bl	80022d4 <__aeabi_dmul>
 8011250:	2235      	movs	r2, #53	; 0x35
 8011252:	9000      	str	r0, [sp, #0]
 8011254:	9101      	str	r1, [sp, #4]
 8011256:	9c01      	ldr	r4, [sp, #4]
 8011258:	4252      	negs	r2, r2
 801125a:	49ba      	ldr	r1, [pc, #744]	; (8011544 <__ieee754_pow+0x70c>)
 801125c:	1523      	asrs	r3, r4, #20
 801125e:	185b      	adds	r3, r3, r1
 8011260:	189b      	adds	r3, r3, r2
 8011262:	0324      	lsls	r4, r4, #12
 8011264:	4db8      	ldr	r5, [pc, #736]	; (8011548 <__ieee754_pow+0x710>)
 8011266:	930d      	str	r3, [sp, #52]	; 0x34
 8011268:	4bb8      	ldr	r3, [pc, #736]	; (801154c <__ieee754_pow+0x714>)
 801126a:	0b22      	lsrs	r2, r4, #12
 801126c:	4315      	orrs	r5, r2
 801126e:	2400      	movs	r4, #0
 8011270:	429a      	cmp	r2, r3
 8011272:	dd09      	ble.n	8011288 <__ieee754_pow+0x450>
 8011274:	4bb6      	ldr	r3, [pc, #728]	; (8011550 <__ieee754_pow+0x718>)
 8011276:	3401      	adds	r4, #1
 8011278:	429a      	cmp	r2, r3
 801127a:	dd05      	ble.n	8011288 <__ieee754_pow+0x450>
 801127c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801127e:	191b      	adds	r3, r3, r4
 8011280:	2400      	movs	r4, #0
 8011282:	930d      	str	r3, [sp, #52]	; 0x34
 8011284:	4bb3      	ldr	r3, [pc, #716]	; (8011554 <__ieee754_pow+0x71c>)
 8011286:	18ed      	adds	r5, r5, r3
 8011288:	4bb3      	ldr	r3, [pc, #716]	; (8011558 <__ieee754_pow+0x720>)
 801128a:	00e2      	lsls	r2, r4, #3
 801128c:	189b      	adds	r3, r3, r2
 801128e:	9800      	ldr	r0, [sp, #0]
 8011290:	9901      	ldr	r1, [sp, #4]
 8011292:	920f      	str	r2, [sp, #60]	; 0x3c
 8011294:	0029      	movs	r1, r5
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	0006      	movs	r6, r0
 801129c:	920a      	str	r2, [sp, #40]	; 0x28
 801129e:	930b      	str	r3, [sp, #44]	; 0x2c
 80112a0:	f7f1 fada 	bl	8002858 <__aeabi_dsub>
 80112a4:	0032      	movs	r2, r6
 80112a6:	002b      	movs	r3, r5
 80112a8:	9010      	str	r0, [sp, #64]	; 0x40
 80112aa:	9111      	str	r1, [sp, #68]	; 0x44
 80112ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80112ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80112b0:	f7f0 f8b6 	bl	8001420 <__aeabi_dadd>
 80112b4:	0002      	movs	r2, r0
 80112b6:	000b      	movs	r3, r1
 80112b8:	2000      	movs	r0, #0
 80112ba:	49a3      	ldr	r1, [pc, #652]	; (8011548 <__ieee754_pow+0x710>)
 80112bc:	f7f0 fc10 	bl	8001ae0 <__aeabi_ddiv>
 80112c0:	0002      	movs	r2, r0
 80112c2:	000b      	movs	r3, r1
 80112c4:	9012      	str	r0, [sp, #72]	; 0x48
 80112c6:	9113      	str	r1, [sp, #76]	; 0x4c
 80112c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80112ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80112cc:	f7f1 f802 	bl	80022d4 <__aeabi_dmul>
 80112d0:	9008      	str	r0, [sp, #32]
 80112d2:	9109      	str	r1, [sp, #36]	; 0x24
 80112d4:	9a08      	ldr	r2, [sp, #32]
 80112d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112d8:	9204      	str	r2, [sp, #16]
 80112da:	9305      	str	r3, [sp, #20]
 80112dc:	2300      	movs	r3, #0
 80112de:	2180      	movs	r1, #128	; 0x80
 80112e0:	2080      	movs	r0, #128	; 0x80
 80112e2:	9304      	str	r3, [sp, #16]
 80112e4:	9a04      	ldr	r2, [sp, #16]
 80112e6:	9b05      	ldr	r3, [sp, #20]
 80112e8:	9200      	str	r2, [sp, #0]
 80112ea:	9301      	str	r3, [sp, #4]
 80112ec:	2200      	movs	r2, #0
 80112ee:	002f      	movs	r7, r5
 80112f0:	0589      	lsls	r1, r1, #22
 80112f2:	106d      	asrs	r5, r5, #1
 80112f4:	4329      	orrs	r1, r5
 80112f6:	0300      	lsls	r0, r0, #12
 80112f8:	1809      	adds	r1, r1, r0
 80112fa:	04a0      	lsls	r0, r4, #18
 80112fc:	180b      	adds	r3, r1, r0
 80112fe:	9800      	ldr	r0, [sp, #0]
 8011300:	9901      	ldr	r1, [sp, #4]
 8011302:	0014      	movs	r4, r2
 8011304:	001d      	movs	r5, r3
 8011306:	f7f0 ffe5 	bl	80022d4 <__aeabi_dmul>
 801130a:	0002      	movs	r2, r0
 801130c:	000b      	movs	r3, r1
 801130e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011310:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011312:	f7f1 faa1 	bl	8002858 <__aeabi_dsub>
 8011316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801131a:	9010      	str	r0, [sp, #64]	; 0x40
 801131c:	9111      	str	r1, [sp, #68]	; 0x44
 801131e:	0020      	movs	r0, r4
 8011320:	0029      	movs	r1, r5
 8011322:	f7f1 fa99 	bl	8002858 <__aeabi_dsub>
 8011326:	0002      	movs	r2, r0
 8011328:	000b      	movs	r3, r1
 801132a:	0030      	movs	r0, r6
 801132c:	0039      	movs	r1, r7
 801132e:	f7f1 fa93 	bl	8002858 <__aeabi_dsub>
 8011332:	9a00      	ldr	r2, [sp, #0]
 8011334:	9b01      	ldr	r3, [sp, #4]
 8011336:	f7f0 ffcd 	bl	80022d4 <__aeabi_dmul>
 801133a:	0002      	movs	r2, r0
 801133c:	000b      	movs	r3, r1
 801133e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011340:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011342:	f7f1 fa89 	bl	8002858 <__aeabi_dsub>
 8011346:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801134a:	f7f0 ffc3 	bl	80022d4 <__aeabi_dmul>
 801134e:	9a08      	ldr	r2, [sp, #32]
 8011350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011352:	900a      	str	r0, [sp, #40]	; 0x28
 8011354:	910b      	str	r1, [sp, #44]	; 0x2c
 8011356:	0010      	movs	r0, r2
 8011358:	0019      	movs	r1, r3
 801135a:	f7f0 ffbb 	bl	80022d4 <__aeabi_dmul>
 801135e:	0006      	movs	r6, r0
 8011360:	000f      	movs	r7, r1
 8011362:	4a7e      	ldr	r2, [pc, #504]	; (801155c <__ieee754_pow+0x724>)
 8011364:	4b7e      	ldr	r3, [pc, #504]	; (8011560 <__ieee754_pow+0x728>)
 8011366:	f7f0 ffb5 	bl	80022d4 <__aeabi_dmul>
 801136a:	4a7e      	ldr	r2, [pc, #504]	; (8011564 <__ieee754_pow+0x72c>)
 801136c:	4b7e      	ldr	r3, [pc, #504]	; (8011568 <__ieee754_pow+0x730>)
 801136e:	f7f0 f857 	bl	8001420 <__aeabi_dadd>
 8011372:	0032      	movs	r2, r6
 8011374:	003b      	movs	r3, r7
 8011376:	f7f0 ffad 	bl	80022d4 <__aeabi_dmul>
 801137a:	4a7c      	ldr	r2, [pc, #496]	; (801156c <__ieee754_pow+0x734>)
 801137c:	4b7c      	ldr	r3, [pc, #496]	; (8011570 <__ieee754_pow+0x738>)
 801137e:	f7f0 f84f 	bl	8001420 <__aeabi_dadd>
 8011382:	0032      	movs	r2, r6
 8011384:	003b      	movs	r3, r7
 8011386:	f7f0 ffa5 	bl	80022d4 <__aeabi_dmul>
 801138a:	4a7a      	ldr	r2, [pc, #488]	; (8011574 <__ieee754_pow+0x73c>)
 801138c:	4b7a      	ldr	r3, [pc, #488]	; (8011578 <__ieee754_pow+0x740>)
 801138e:	f7f0 f847 	bl	8001420 <__aeabi_dadd>
 8011392:	0032      	movs	r2, r6
 8011394:	003b      	movs	r3, r7
 8011396:	f7f0 ff9d 	bl	80022d4 <__aeabi_dmul>
 801139a:	4a78      	ldr	r2, [pc, #480]	; (801157c <__ieee754_pow+0x744>)
 801139c:	4b78      	ldr	r3, [pc, #480]	; (8011580 <__ieee754_pow+0x748>)
 801139e:	f7f0 f83f 	bl	8001420 <__aeabi_dadd>
 80113a2:	0032      	movs	r2, r6
 80113a4:	003b      	movs	r3, r7
 80113a6:	f7f0 ff95 	bl	80022d4 <__aeabi_dmul>
 80113aa:	4a76      	ldr	r2, [pc, #472]	; (8011584 <__ieee754_pow+0x74c>)
 80113ac:	4b76      	ldr	r3, [pc, #472]	; (8011588 <__ieee754_pow+0x750>)
 80113ae:	f7f0 f837 	bl	8001420 <__aeabi_dadd>
 80113b2:	0032      	movs	r2, r6
 80113b4:	0004      	movs	r4, r0
 80113b6:	000d      	movs	r5, r1
 80113b8:	003b      	movs	r3, r7
 80113ba:	0030      	movs	r0, r6
 80113bc:	0039      	movs	r1, r7
 80113be:	f7f0 ff89 	bl	80022d4 <__aeabi_dmul>
 80113c2:	0002      	movs	r2, r0
 80113c4:	000b      	movs	r3, r1
 80113c6:	0020      	movs	r0, r4
 80113c8:	0029      	movs	r1, r5
 80113ca:	f7f0 ff83 	bl	80022d4 <__aeabi_dmul>
 80113ce:	9a00      	ldr	r2, [sp, #0]
 80113d0:	9b01      	ldr	r3, [sp, #4]
 80113d2:	0004      	movs	r4, r0
 80113d4:	000d      	movs	r5, r1
 80113d6:	9808      	ldr	r0, [sp, #32]
 80113d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113da:	f7f0 f821 	bl	8001420 <__aeabi_dadd>
 80113de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80113e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113e2:	f7f0 ff77 	bl	80022d4 <__aeabi_dmul>
 80113e6:	0022      	movs	r2, r4
 80113e8:	002b      	movs	r3, r5
 80113ea:	f7f0 f819 	bl	8001420 <__aeabi_dadd>
 80113ee:	9a00      	ldr	r2, [sp, #0]
 80113f0:	9b01      	ldr	r3, [sp, #4]
 80113f2:	9010      	str	r0, [sp, #64]	; 0x40
 80113f4:	9111      	str	r1, [sp, #68]	; 0x44
 80113f6:	0010      	movs	r0, r2
 80113f8:	0019      	movs	r1, r3
 80113fa:	f7f0 ff6b 	bl	80022d4 <__aeabi_dmul>
 80113fe:	2200      	movs	r2, #0
 8011400:	4b62      	ldr	r3, [pc, #392]	; (801158c <__ieee754_pow+0x754>)
 8011402:	0004      	movs	r4, r0
 8011404:	000d      	movs	r5, r1
 8011406:	f7f0 f80b 	bl	8001420 <__aeabi_dadd>
 801140a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801140c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801140e:	f7f0 f807 	bl	8001420 <__aeabi_dadd>
 8011412:	2000      	movs	r0, #0
 8011414:	000f      	movs	r7, r1
 8011416:	0006      	movs	r6, r0
 8011418:	0002      	movs	r2, r0
 801141a:	000b      	movs	r3, r1
 801141c:	9800      	ldr	r0, [sp, #0]
 801141e:	9901      	ldr	r1, [sp, #4]
 8011420:	f7f0 ff58 	bl	80022d4 <__aeabi_dmul>
 8011424:	2200      	movs	r2, #0
 8011426:	9000      	str	r0, [sp, #0]
 8011428:	9101      	str	r1, [sp, #4]
 801142a:	4b58      	ldr	r3, [pc, #352]	; (801158c <__ieee754_pow+0x754>)
 801142c:	0030      	movs	r0, r6
 801142e:	0039      	movs	r1, r7
 8011430:	f7f1 fa12 	bl	8002858 <__aeabi_dsub>
 8011434:	0022      	movs	r2, r4
 8011436:	002b      	movs	r3, r5
 8011438:	f7f1 fa0e 	bl	8002858 <__aeabi_dsub>
 801143c:	0002      	movs	r2, r0
 801143e:	000b      	movs	r3, r1
 8011440:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011442:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011444:	f7f1 fa08 	bl	8002858 <__aeabi_dsub>
 8011448:	9a08      	ldr	r2, [sp, #32]
 801144a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801144c:	f7f0 ff42 	bl	80022d4 <__aeabi_dmul>
 8011450:	0032      	movs	r2, r6
 8011452:	0004      	movs	r4, r0
 8011454:	000d      	movs	r5, r1
 8011456:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801145a:	003b      	movs	r3, r7
 801145c:	f7f0 ff3a 	bl	80022d4 <__aeabi_dmul>
 8011460:	0002      	movs	r2, r0
 8011462:	000b      	movs	r3, r1
 8011464:	0020      	movs	r0, r4
 8011466:	0029      	movs	r1, r5
 8011468:	f7ef ffda 	bl	8001420 <__aeabi_dadd>
 801146c:	0004      	movs	r4, r0
 801146e:	000d      	movs	r5, r1
 8011470:	0002      	movs	r2, r0
 8011472:	000b      	movs	r3, r1
 8011474:	9800      	ldr	r0, [sp, #0]
 8011476:	9901      	ldr	r1, [sp, #4]
 8011478:	f7ef ffd2 	bl	8001420 <__aeabi_dadd>
 801147c:	22e0      	movs	r2, #224	; 0xe0
 801147e:	2000      	movs	r0, #0
 8011480:	4b43      	ldr	r3, [pc, #268]	; (8011590 <__ieee754_pow+0x758>)
 8011482:	0612      	lsls	r2, r2, #24
 8011484:	0006      	movs	r6, r0
 8011486:	000f      	movs	r7, r1
 8011488:	f7f0 ff24 	bl	80022d4 <__aeabi_dmul>
 801148c:	9008      	str	r0, [sp, #32]
 801148e:	9109      	str	r1, [sp, #36]	; 0x24
 8011490:	9a00      	ldr	r2, [sp, #0]
 8011492:	9b01      	ldr	r3, [sp, #4]
 8011494:	0030      	movs	r0, r6
 8011496:	0039      	movs	r1, r7
 8011498:	f7f1 f9de 	bl	8002858 <__aeabi_dsub>
 801149c:	0002      	movs	r2, r0
 801149e:	000b      	movs	r3, r1
 80114a0:	0020      	movs	r0, r4
 80114a2:	0029      	movs	r1, r5
 80114a4:	f7f1 f9d8 	bl	8002858 <__aeabi_dsub>
 80114a8:	4a3a      	ldr	r2, [pc, #232]	; (8011594 <__ieee754_pow+0x75c>)
 80114aa:	4b39      	ldr	r3, [pc, #228]	; (8011590 <__ieee754_pow+0x758>)
 80114ac:	f7f0 ff12 	bl	80022d4 <__aeabi_dmul>
 80114b0:	4a39      	ldr	r2, [pc, #228]	; (8011598 <__ieee754_pow+0x760>)
 80114b2:	0004      	movs	r4, r0
 80114b4:	000d      	movs	r5, r1
 80114b6:	0030      	movs	r0, r6
 80114b8:	0039      	movs	r1, r7
 80114ba:	4b38      	ldr	r3, [pc, #224]	; (801159c <__ieee754_pow+0x764>)
 80114bc:	f7f0 ff0a 	bl	80022d4 <__aeabi_dmul>
 80114c0:	0002      	movs	r2, r0
 80114c2:	000b      	movs	r3, r1
 80114c4:	0020      	movs	r0, r4
 80114c6:	0029      	movs	r1, r5
 80114c8:	f7ef ffaa 	bl	8001420 <__aeabi_dadd>
 80114cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114ce:	4b34      	ldr	r3, [pc, #208]	; (80115a0 <__ieee754_pow+0x768>)
 80114d0:	189b      	adds	r3, r3, r2
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	f7ef ffa3 	bl	8001420 <__aeabi_dadd>
 80114da:	9000      	str	r0, [sp, #0]
 80114dc:	9101      	str	r1, [sp, #4]
 80114de:	980d      	ldr	r0, [sp, #52]	; 0x34
 80114e0:	f7f1 fd90 	bl	8003004 <__aeabi_i2d>
 80114e4:	0004      	movs	r4, r0
 80114e6:	000d      	movs	r5, r1
 80114e8:	9808      	ldr	r0, [sp, #32]
 80114ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114ee:	4b2d      	ldr	r3, [pc, #180]	; (80115a4 <__ieee754_pow+0x76c>)
 80114f0:	189b      	adds	r3, r3, r2
 80114f2:	681e      	ldr	r6, [r3, #0]
 80114f4:	685f      	ldr	r7, [r3, #4]
 80114f6:	9a00      	ldr	r2, [sp, #0]
 80114f8:	9b01      	ldr	r3, [sp, #4]
 80114fa:	f7ef ff91 	bl	8001420 <__aeabi_dadd>
 80114fe:	0032      	movs	r2, r6
 8011500:	003b      	movs	r3, r7
 8011502:	f7ef ff8d 	bl	8001420 <__aeabi_dadd>
 8011506:	0022      	movs	r2, r4
 8011508:	002b      	movs	r3, r5
 801150a:	f7ef ff89 	bl	8001420 <__aeabi_dadd>
 801150e:	2000      	movs	r0, #0
 8011510:	0022      	movs	r2, r4
 8011512:	002b      	movs	r3, r5
 8011514:	9004      	str	r0, [sp, #16]
 8011516:	9105      	str	r1, [sp, #20]
 8011518:	f7f1 f99e 	bl	8002858 <__aeabi_dsub>
 801151c:	0032      	movs	r2, r6
 801151e:	003b      	movs	r3, r7
 8011520:	f7f1 f99a 	bl	8002858 <__aeabi_dsub>
 8011524:	9a08      	ldr	r2, [sp, #32]
 8011526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011528:	f7f1 f996 	bl	8002858 <__aeabi_dsub>
 801152c:	0002      	movs	r2, r0
 801152e:	000b      	movs	r3, r1
 8011530:	9800      	ldr	r0, [sp, #0]
 8011532:	9901      	ldr	r1, [sp, #4]
 8011534:	e618      	b.n	8011168 <__ieee754_pow+0x330>
 8011536:	2300      	movs	r3, #0
 8011538:	4c03      	ldr	r4, [pc, #12]	; (8011548 <__ieee754_pow+0x710>)
 801153a:	e621      	b.n	8011180 <__ieee754_pow+0x348>
 801153c:	7ff00000 	.word	0x7ff00000
 8011540:	43400000 	.word	0x43400000
 8011544:	fffffc01 	.word	0xfffffc01
 8011548:	3ff00000 	.word	0x3ff00000
 801154c:	0003988e 	.word	0x0003988e
 8011550:	000bb679 	.word	0x000bb679
 8011554:	fff00000 	.word	0xfff00000
 8011558:	08013390 	.word	0x08013390
 801155c:	4a454eef 	.word	0x4a454eef
 8011560:	3fca7e28 	.word	0x3fca7e28
 8011564:	93c9db65 	.word	0x93c9db65
 8011568:	3fcd864a 	.word	0x3fcd864a
 801156c:	a91d4101 	.word	0xa91d4101
 8011570:	3fd17460 	.word	0x3fd17460
 8011574:	518f264d 	.word	0x518f264d
 8011578:	3fd55555 	.word	0x3fd55555
 801157c:	db6fabff 	.word	0xdb6fabff
 8011580:	3fdb6db6 	.word	0x3fdb6db6
 8011584:	33333303 	.word	0x33333303
 8011588:	3fe33333 	.word	0x3fe33333
 801158c:	40080000 	.word	0x40080000
 8011590:	3feec709 	.word	0x3feec709
 8011594:	dc3a03fd 	.word	0xdc3a03fd
 8011598:	145b01f5 	.word	0x145b01f5
 801159c:	be3e2fe0 	.word	0xbe3e2fe0
 80115a0:	080133b0 	.word	0x080133b0
 80115a4:	080133a0 	.word	0x080133a0
 80115a8:	4a90      	ldr	r2, [pc, #576]	; (80117ec <__ieee754_pow+0x9b4>)
 80115aa:	4b91      	ldr	r3, [pc, #580]	; (80117f0 <__ieee754_pow+0x9b8>)
 80115ac:	0030      	movs	r0, r6
 80115ae:	0039      	movs	r1, r7
 80115b0:	f7ef ff36 	bl	8001420 <__aeabi_dadd>
 80115b4:	9a04      	ldr	r2, [sp, #16]
 80115b6:	9b05      	ldr	r3, [sp, #20]
 80115b8:	9002      	str	r0, [sp, #8]
 80115ba:	9103      	str	r1, [sp, #12]
 80115bc:	0028      	movs	r0, r5
 80115be:	0021      	movs	r1, r4
 80115c0:	f7f1 f94a 	bl	8002858 <__aeabi_dsub>
 80115c4:	0002      	movs	r2, r0
 80115c6:	000b      	movs	r3, r1
 80115c8:	9802      	ldr	r0, [sp, #8]
 80115ca:	9903      	ldr	r1, [sp, #12]
 80115cc:	f7ee ff58 	bl	8000480 <__aeabi_dcmpgt>
 80115d0:	2800      	cmp	r0, #0
 80115d2:	d000      	beq.n	80115d6 <__ieee754_pow+0x79e>
 80115d4:	e611      	b.n	80111fa <__ieee754_pow+0x3c2>
 80115d6:	2100      	movs	r1, #0
 80115d8:	4a86      	ldr	r2, [pc, #536]	; (80117f4 <__ieee754_pow+0x9bc>)
 80115da:	0063      	lsls	r3, r4, #1
 80115dc:	085b      	lsrs	r3, r3, #1
 80115de:	9102      	str	r1, [sp, #8]
 80115e0:	4293      	cmp	r3, r2
 80115e2:	dd25      	ble.n	8011630 <__ieee754_pow+0x7f8>
 80115e4:	4a84      	ldr	r2, [pc, #528]	; (80117f8 <__ieee754_pow+0x9c0>)
 80115e6:	151b      	asrs	r3, r3, #20
 80115e8:	189b      	adds	r3, r3, r2
 80115ea:	2280      	movs	r2, #128	; 0x80
 80115ec:	0352      	lsls	r2, r2, #13
 80115ee:	0011      	movs	r1, r2
 80115f0:	4119      	asrs	r1, r3
 80115f2:	190b      	adds	r3, r1, r4
 80115f4:	005c      	lsls	r4, r3, #1
 80115f6:	4981      	ldr	r1, [pc, #516]	; (80117fc <__ieee754_pow+0x9c4>)
 80115f8:	4d81      	ldr	r5, [pc, #516]	; (8011800 <__ieee754_pow+0x9c8>)
 80115fa:	0d64      	lsrs	r4, r4, #21
 80115fc:	1864      	adds	r4, r4, r1
 80115fe:	4125      	asrs	r5, r4
 8011600:	401d      	ands	r5, r3
 8011602:	031b      	lsls	r3, r3, #12
 8011604:	0b1b      	lsrs	r3, r3, #12
 8011606:	4313      	orrs	r3, r2
 8011608:	2214      	movs	r2, #20
 801160a:	1b12      	subs	r2, r2, r4
 801160c:	4113      	asrs	r3, r2
 801160e:	9302      	str	r3, [sp, #8]
 8011610:	9b08      	ldr	r3, [sp, #32]
 8011612:	2000      	movs	r0, #0
 8011614:	0029      	movs	r1, r5
 8011616:	2b00      	cmp	r3, #0
 8011618:	da02      	bge.n	8011620 <__ieee754_pow+0x7e8>
 801161a:	9b02      	ldr	r3, [sp, #8]
 801161c:	425b      	negs	r3, r3
 801161e:	9302      	str	r3, [sp, #8]
 8011620:	0002      	movs	r2, r0
 8011622:	000b      	movs	r3, r1
 8011624:	9804      	ldr	r0, [sp, #16]
 8011626:	9905      	ldr	r1, [sp, #20]
 8011628:	f7f1 f916 	bl	8002858 <__aeabi_dsub>
 801162c:	9006      	str	r0, [sp, #24]
 801162e:	9107      	str	r1, [sp, #28]
 8011630:	9806      	ldr	r0, [sp, #24]
 8011632:	9907      	ldr	r1, [sp, #28]
 8011634:	0032      	movs	r2, r6
 8011636:	003b      	movs	r3, r7
 8011638:	f7ef fef2 	bl	8001420 <__aeabi_dadd>
 801163c:	2000      	movs	r0, #0
 801163e:	2200      	movs	r2, #0
 8011640:	4b70      	ldr	r3, [pc, #448]	; (8011804 <__ieee754_pow+0x9cc>)
 8011642:	9004      	str	r0, [sp, #16]
 8011644:	9105      	str	r1, [sp, #20]
 8011646:	f7f0 fe45 	bl	80022d4 <__aeabi_dmul>
 801164a:	9a06      	ldr	r2, [sp, #24]
 801164c:	9b07      	ldr	r3, [sp, #28]
 801164e:	9008      	str	r0, [sp, #32]
 8011650:	9109      	str	r1, [sp, #36]	; 0x24
 8011652:	9804      	ldr	r0, [sp, #16]
 8011654:	9905      	ldr	r1, [sp, #20]
 8011656:	f7f1 f8ff 	bl	8002858 <__aeabi_dsub>
 801165a:	0002      	movs	r2, r0
 801165c:	000b      	movs	r3, r1
 801165e:	0030      	movs	r0, r6
 8011660:	0039      	movs	r1, r7
 8011662:	f7f1 f8f9 	bl	8002858 <__aeabi_dsub>
 8011666:	4a68      	ldr	r2, [pc, #416]	; (8011808 <__ieee754_pow+0x9d0>)
 8011668:	4b68      	ldr	r3, [pc, #416]	; (801180c <__ieee754_pow+0x9d4>)
 801166a:	f7f0 fe33 	bl	80022d4 <__aeabi_dmul>
 801166e:	4a68      	ldr	r2, [pc, #416]	; (8011810 <__ieee754_pow+0x9d8>)
 8011670:	0004      	movs	r4, r0
 8011672:	000d      	movs	r5, r1
 8011674:	9804      	ldr	r0, [sp, #16]
 8011676:	9905      	ldr	r1, [sp, #20]
 8011678:	4b66      	ldr	r3, [pc, #408]	; (8011814 <__ieee754_pow+0x9dc>)
 801167a:	f7f0 fe2b 	bl	80022d4 <__aeabi_dmul>
 801167e:	0002      	movs	r2, r0
 8011680:	000b      	movs	r3, r1
 8011682:	0020      	movs	r0, r4
 8011684:	0029      	movs	r1, r5
 8011686:	f7ef fecb 	bl	8001420 <__aeabi_dadd>
 801168a:	0004      	movs	r4, r0
 801168c:	000d      	movs	r5, r1
 801168e:	0002      	movs	r2, r0
 8011690:	000b      	movs	r3, r1
 8011692:	9808      	ldr	r0, [sp, #32]
 8011694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011696:	f7ef fec3 	bl	8001420 <__aeabi_dadd>
 801169a:	9a08      	ldr	r2, [sp, #32]
 801169c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801169e:	0006      	movs	r6, r0
 80116a0:	000f      	movs	r7, r1
 80116a2:	f7f1 f8d9 	bl	8002858 <__aeabi_dsub>
 80116a6:	0002      	movs	r2, r0
 80116a8:	000b      	movs	r3, r1
 80116aa:	0020      	movs	r0, r4
 80116ac:	0029      	movs	r1, r5
 80116ae:	f7f1 f8d3 	bl	8002858 <__aeabi_dsub>
 80116b2:	0032      	movs	r2, r6
 80116b4:	9004      	str	r0, [sp, #16]
 80116b6:	9105      	str	r1, [sp, #20]
 80116b8:	003b      	movs	r3, r7
 80116ba:	0030      	movs	r0, r6
 80116bc:	0039      	movs	r1, r7
 80116be:	f7f0 fe09 	bl	80022d4 <__aeabi_dmul>
 80116c2:	0004      	movs	r4, r0
 80116c4:	000d      	movs	r5, r1
 80116c6:	4a54      	ldr	r2, [pc, #336]	; (8011818 <__ieee754_pow+0x9e0>)
 80116c8:	4b54      	ldr	r3, [pc, #336]	; (801181c <__ieee754_pow+0x9e4>)
 80116ca:	f7f0 fe03 	bl	80022d4 <__aeabi_dmul>
 80116ce:	4a54      	ldr	r2, [pc, #336]	; (8011820 <__ieee754_pow+0x9e8>)
 80116d0:	4b54      	ldr	r3, [pc, #336]	; (8011824 <__ieee754_pow+0x9ec>)
 80116d2:	f7f1 f8c1 	bl	8002858 <__aeabi_dsub>
 80116d6:	0022      	movs	r2, r4
 80116d8:	002b      	movs	r3, r5
 80116da:	f7f0 fdfb 	bl	80022d4 <__aeabi_dmul>
 80116de:	4a52      	ldr	r2, [pc, #328]	; (8011828 <__ieee754_pow+0x9f0>)
 80116e0:	4b52      	ldr	r3, [pc, #328]	; (801182c <__ieee754_pow+0x9f4>)
 80116e2:	f7ef fe9d 	bl	8001420 <__aeabi_dadd>
 80116e6:	0022      	movs	r2, r4
 80116e8:	002b      	movs	r3, r5
 80116ea:	f7f0 fdf3 	bl	80022d4 <__aeabi_dmul>
 80116ee:	4a50      	ldr	r2, [pc, #320]	; (8011830 <__ieee754_pow+0x9f8>)
 80116f0:	4b50      	ldr	r3, [pc, #320]	; (8011834 <__ieee754_pow+0x9fc>)
 80116f2:	f7f1 f8b1 	bl	8002858 <__aeabi_dsub>
 80116f6:	0022      	movs	r2, r4
 80116f8:	002b      	movs	r3, r5
 80116fa:	f7f0 fdeb 	bl	80022d4 <__aeabi_dmul>
 80116fe:	4a4e      	ldr	r2, [pc, #312]	; (8011838 <__ieee754_pow+0xa00>)
 8011700:	4b4e      	ldr	r3, [pc, #312]	; (801183c <__ieee754_pow+0xa04>)
 8011702:	f7ef fe8d 	bl	8001420 <__aeabi_dadd>
 8011706:	0022      	movs	r2, r4
 8011708:	002b      	movs	r3, r5
 801170a:	f7f0 fde3 	bl	80022d4 <__aeabi_dmul>
 801170e:	0002      	movs	r2, r0
 8011710:	000b      	movs	r3, r1
 8011712:	0030      	movs	r0, r6
 8011714:	0039      	movs	r1, r7
 8011716:	f7f1 f89f 	bl	8002858 <__aeabi_dsub>
 801171a:	0004      	movs	r4, r0
 801171c:	000d      	movs	r5, r1
 801171e:	0002      	movs	r2, r0
 8011720:	000b      	movs	r3, r1
 8011722:	0030      	movs	r0, r6
 8011724:	0039      	movs	r1, r7
 8011726:	f7f0 fdd5 	bl	80022d4 <__aeabi_dmul>
 801172a:	2380      	movs	r3, #128	; 0x80
 801172c:	9006      	str	r0, [sp, #24]
 801172e:	9107      	str	r1, [sp, #28]
 8011730:	2200      	movs	r2, #0
 8011732:	0020      	movs	r0, r4
 8011734:	0029      	movs	r1, r5
 8011736:	05db      	lsls	r3, r3, #23
 8011738:	f7f1 f88e 	bl	8002858 <__aeabi_dsub>
 801173c:	0002      	movs	r2, r0
 801173e:	000b      	movs	r3, r1
 8011740:	9806      	ldr	r0, [sp, #24]
 8011742:	9907      	ldr	r1, [sp, #28]
 8011744:	f7f0 f9cc 	bl	8001ae0 <__aeabi_ddiv>
 8011748:	9a04      	ldr	r2, [sp, #16]
 801174a:	9b05      	ldr	r3, [sp, #20]
 801174c:	0004      	movs	r4, r0
 801174e:	000d      	movs	r5, r1
 8011750:	0030      	movs	r0, r6
 8011752:	0039      	movs	r1, r7
 8011754:	f7f0 fdbe 	bl	80022d4 <__aeabi_dmul>
 8011758:	9a04      	ldr	r2, [sp, #16]
 801175a:	9b05      	ldr	r3, [sp, #20]
 801175c:	f7ef fe60 	bl	8001420 <__aeabi_dadd>
 8011760:	0002      	movs	r2, r0
 8011762:	000b      	movs	r3, r1
 8011764:	0020      	movs	r0, r4
 8011766:	0029      	movs	r1, r5
 8011768:	f7f1 f876 	bl	8002858 <__aeabi_dsub>
 801176c:	0032      	movs	r2, r6
 801176e:	003b      	movs	r3, r7
 8011770:	f7f1 f872 	bl	8002858 <__aeabi_dsub>
 8011774:	0002      	movs	r2, r0
 8011776:	000b      	movs	r3, r1
 8011778:	2000      	movs	r0, #0
 801177a:	4931      	ldr	r1, [pc, #196]	; (8011840 <__ieee754_pow+0xa08>)
 801177c:	f7f1 f86c 	bl	8002858 <__aeabi_dsub>
 8011780:	9b02      	ldr	r3, [sp, #8]
 8011782:	051b      	lsls	r3, r3, #20
 8011784:	185b      	adds	r3, r3, r1
 8011786:	151a      	asrs	r2, r3, #20
 8011788:	2a00      	cmp	r2, #0
 801178a:	dc25      	bgt.n	80117d8 <__ieee754_pow+0x9a0>
 801178c:	9a02      	ldr	r2, [sp, #8]
 801178e:	f000 f861 	bl	8011854 <scalbn>
 8011792:	9a00      	ldr	r2, [sp, #0]
 8011794:	9b01      	ldr	r3, [sp, #4]
 8011796:	f7ff fc33 	bl	8011000 <__ieee754_pow+0x1c8>
 801179a:	4a2a      	ldr	r2, [pc, #168]	; (8011844 <__ieee754_pow+0xa0c>)
 801179c:	004b      	lsls	r3, r1, #1
 801179e:	085b      	lsrs	r3, r3, #1
 80117a0:	4293      	cmp	r3, r2
 80117a2:	dc00      	bgt.n	80117a6 <__ieee754_pow+0x96e>
 80117a4:	e717      	b.n	80115d6 <__ieee754_pow+0x79e>
 80117a6:	4b28      	ldr	r3, [pc, #160]	; (8011848 <__ieee754_pow+0xa10>)
 80117a8:	18cb      	adds	r3, r1, r3
 80117aa:	4303      	orrs	r3, r0
 80117ac:	d008      	beq.n	80117c0 <__ieee754_pow+0x988>
 80117ae:	9800      	ldr	r0, [sp, #0]
 80117b0:	9901      	ldr	r1, [sp, #4]
 80117b2:	2300      	movs	r3, #0
 80117b4:	2200      	movs	r2, #0
 80117b6:	f7ee fe4f 	bl	8000458 <__aeabi_dcmplt>
 80117ba:	1e43      	subs	r3, r0, #1
 80117bc:	4198      	sbcs	r0, r3
 80117be:	e462      	b.n	8011086 <__ieee754_pow+0x24e>
 80117c0:	9a04      	ldr	r2, [sp, #16]
 80117c2:	9b05      	ldr	r3, [sp, #20]
 80117c4:	f7f1 f848 	bl	8002858 <__aeabi_dsub>
 80117c8:	0032      	movs	r2, r6
 80117ca:	003b      	movs	r3, r7
 80117cc:	f7ee fe62 	bl	8000494 <__aeabi_dcmpge>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d100      	bne.n	80117d6 <__ieee754_pow+0x99e>
 80117d4:	e6ff      	b.n	80115d6 <__ieee754_pow+0x79e>
 80117d6:	e7ea      	b.n	80117ae <__ieee754_pow+0x976>
 80117d8:	0019      	movs	r1, r3
 80117da:	e7da      	b.n	8011792 <__ieee754_pow+0x95a>
 80117dc:	2300      	movs	r3, #0
 80117de:	4c18      	ldr	r4, [pc, #96]	; (8011840 <__ieee754_pow+0xa08>)
 80117e0:	f7ff fbf1 	bl	8010fc6 <__ieee754_pow+0x18e>
 80117e4:	2300      	movs	r3, #0
 80117e6:	2400      	movs	r4, #0
 80117e8:	f7ff fbed 	bl	8010fc6 <__ieee754_pow+0x18e>
 80117ec:	652b82fe 	.word	0x652b82fe
 80117f0:	3c971547 	.word	0x3c971547
 80117f4:	3fe00000 	.word	0x3fe00000
 80117f8:	fffffc02 	.word	0xfffffc02
 80117fc:	fffffc01 	.word	0xfffffc01
 8011800:	fff00000 	.word	0xfff00000
 8011804:	3fe62e43 	.word	0x3fe62e43
 8011808:	fefa39ef 	.word	0xfefa39ef
 801180c:	3fe62e42 	.word	0x3fe62e42
 8011810:	0ca86c39 	.word	0x0ca86c39
 8011814:	be205c61 	.word	0xbe205c61
 8011818:	72bea4d0 	.word	0x72bea4d0
 801181c:	3e663769 	.word	0x3e663769
 8011820:	c5d26bf1 	.word	0xc5d26bf1
 8011824:	3ebbbd41 	.word	0x3ebbbd41
 8011828:	af25de2c 	.word	0xaf25de2c
 801182c:	3f11566a 	.word	0x3f11566a
 8011830:	16bebd93 	.word	0x16bebd93
 8011834:	3f66c16c 	.word	0x3f66c16c
 8011838:	5555553e 	.word	0x5555553e
 801183c:	3fc55555 	.word	0x3fc55555
 8011840:	3ff00000 	.word	0x3ff00000
 8011844:	4090cbff 	.word	0x4090cbff
 8011848:	3f6f3400 	.word	0x3f6f3400

0801184c <fabs>:
 801184c:	0049      	lsls	r1, r1, #1
 801184e:	084b      	lsrs	r3, r1, #1
 8011850:	0019      	movs	r1, r3
 8011852:	4770      	bx	lr

08011854 <scalbn>:
 8011854:	b570      	push	{r4, r5, r6, lr}
 8011856:	0014      	movs	r4, r2
 8011858:	004a      	lsls	r2, r1, #1
 801185a:	000b      	movs	r3, r1
 801185c:	0d52      	lsrs	r2, r2, #21
 801185e:	d10f      	bne.n	8011880 <scalbn+0x2c>
 8011860:	004b      	lsls	r3, r1, #1
 8011862:	085b      	lsrs	r3, r3, #1
 8011864:	4303      	orrs	r3, r0
 8011866:	d011      	beq.n	801188c <scalbn+0x38>
 8011868:	4b22      	ldr	r3, [pc, #136]	; (80118f4 <scalbn+0xa0>)
 801186a:	2200      	movs	r2, #0
 801186c:	f7f0 fd32 	bl	80022d4 <__aeabi_dmul>
 8011870:	4b21      	ldr	r3, [pc, #132]	; (80118f8 <scalbn+0xa4>)
 8011872:	429c      	cmp	r4, r3
 8011874:	da0b      	bge.n	801188e <scalbn+0x3a>
 8011876:	4a21      	ldr	r2, [pc, #132]	; (80118fc <scalbn+0xa8>)
 8011878:	4b21      	ldr	r3, [pc, #132]	; (8011900 <scalbn+0xac>)
 801187a:	f7f0 fd2b 	bl	80022d4 <__aeabi_dmul>
 801187e:	e005      	b.n	801188c <scalbn+0x38>
 8011880:	4d20      	ldr	r5, [pc, #128]	; (8011904 <scalbn+0xb0>)
 8011882:	42aa      	cmp	r2, r5
 8011884:	d107      	bne.n	8011896 <scalbn+0x42>
 8011886:	0002      	movs	r2, r0
 8011888:	f7ef fdca 	bl	8001420 <__aeabi_dadd>
 801188c:	bd70      	pop	{r4, r5, r6, pc}
 801188e:	000b      	movs	r3, r1
 8011890:	004a      	lsls	r2, r1, #1
 8011892:	0d52      	lsrs	r2, r2, #21
 8011894:	3a36      	subs	r2, #54	; 0x36
 8011896:	4d1c      	ldr	r5, [pc, #112]	; (8011908 <scalbn+0xb4>)
 8011898:	42ac      	cmp	r4, r5
 801189a:	dd0a      	ble.n	80118b2 <scalbn+0x5e>
 801189c:	4c1b      	ldr	r4, [pc, #108]	; (801190c <scalbn+0xb8>)
 801189e:	4d1c      	ldr	r5, [pc, #112]	; (8011910 <scalbn+0xbc>)
 80118a0:	2900      	cmp	r1, #0
 80118a2:	da01      	bge.n	80118a8 <scalbn+0x54>
 80118a4:	4c19      	ldr	r4, [pc, #100]	; (801190c <scalbn+0xb8>)
 80118a6:	4d1b      	ldr	r5, [pc, #108]	; (8011914 <scalbn+0xc0>)
 80118a8:	4a18      	ldr	r2, [pc, #96]	; (801190c <scalbn+0xb8>)
 80118aa:	4b19      	ldr	r3, [pc, #100]	; (8011910 <scalbn+0xbc>)
 80118ac:	0020      	movs	r0, r4
 80118ae:	0029      	movs	r1, r5
 80118b0:	e7e3      	b.n	801187a <scalbn+0x26>
 80118b2:	18a2      	adds	r2, r4, r2
 80118b4:	4c18      	ldr	r4, [pc, #96]	; (8011918 <scalbn+0xc4>)
 80118b6:	42a2      	cmp	r2, r4
 80118b8:	dcf0      	bgt.n	801189c <scalbn+0x48>
 80118ba:	2a00      	cmp	r2, #0
 80118bc:	dd05      	ble.n	80118ca <scalbn+0x76>
 80118be:	4c17      	ldr	r4, [pc, #92]	; (801191c <scalbn+0xc8>)
 80118c0:	0512      	lsls	r2, r2, #20
 80118c2:	4023      	ands	r3, r4
 80118c4:	4313      	orrs	r3, r2
 80118c6:	0019      	movs	r1, r3
 80118c8:	e7e0      	b.n	801188c <scalbn+0x38>
 80118ca:	0014      	movs	r4, r2
 80118cc:	3435      	adds	r4, #53	; 0x35
 80118ce:	da08      	bge.n	80118e2 <scalbn+0x8e>
 80118d0:	4c0a      	ldr	r4, [pc, #40]	; (80118fc <scalbn+0xa8>)
 80118d2:	4d0b      	ldr	r5, [pc, #44]	; (8011900 <scalbn+0xac>)
 80118d4:	2900      	cmp	r1, #0
 80118d6:	da01      	bge.n	80118dc <scalbn+0x88>
 80118d8:	4c08      	ldr	r4, [pc, #32]	; (80118fc <scalbn+0xa8>)
 80118da:	4d11      	ldr	r5, [pc, #68]	; (8011920 <scalbn+0xcc>)
 80118dc:	4a07      	ldr	r2, [pc, #28]	; (80118fc <scalbn+0xa8>)
 80118de:	4b08      	ldr	r3, [pc, #32]	; (8011900 <scalbn+0xac>)
 80118e0:	e7e4      	b.n	80118ac <scalbn+0x58>
 80118e2:	4c0e      	ldr	r4, [pc, #56]	; (801191c <scalbn+0xc8>)
 80118e4:	3236      	adds	r2, #54	; 0x36
 80118e6:	4023      	ands	r3, r4
 80118e8:	0512      	lsls	r2, r2, #20
 80118ea:	431a      	orrs	r2, r3
 80118ec:	0011      	movs	r1, r2
 80118ee:	4b0d      	ldr	r3, [pc, #52]	; (8011924 <scalbn+0xd0>)
 80118f0:	2200      	movs	r2, #0
 80118f2:	e7c2      	b.n	801187a <scalbn+0x26>
 80118f4:	43500000 	.word	0x43500000
 80118f8:	ffff3cb0 	.word	0xffff3cb0
 80118fc:	c2f8f359 	.word	0xc2f8f359
 8011900:	01a56e1f 	.word	0x01a56e1f
 8011904:	000007ff 	.word	0x000007ff
 8011908:	0000c350 	.word	0x0000c350
 801190c:	8800759c 	.word	0x8800759c
 8011910:	7e37e43c 	.word	0x7e37e43c
 8011914:	fe37e43c 	.word	0xfe37e43c
 8011918:	000007fe 	.word	0x000007fe
 801191c:	800fffff 	.word	0x800fffff
 8011920:	81a56e1f 	.word	0x81a56e1f
 8011924:	3c900000 	.word	0x3c900000

08011928 <with_errno>:
 8011928:	b570      	push	{r4, r5, r6, lr}
 801192a:	000d      	movs	r5, r1
 801192c:	0016      	movs	r6, r2
 801192e:	0004      	movs	r4, r0
 8011930:	f7fc fd18 	bl	800e364 <__errno>
 8011934:	0029      	movs	r1, r5
 8011936:	6006      	str	r6, [r0, #0]
 8011938:	0020      	movs	r0, r4
 801193a:	bd70      	pop	{r4, r5, r6, pc}

0801193c <xflow>:
 801193c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801193e:	0015      	movs	r5, r2
 8011940:	001c      	movs	r4, r3
 8011942:	2800      	cmp	r0, #0
 8011944:	d010      	beq.n	8011968 <xflow+0x2c>
 8011946:	2380      	movs	r3, #128	; 0x80
 8011948:	0010      	movs	r0, r2
 801194a:	061b      	lsls	r3, r3, #24
 801194c:	18e1      	adds	r1, r4, r3
 801194e:	9000      	str	r0, [sp, #0]
 8011950:	9101      	str	r1, [sp, #4]
 8011952:	9a00      	ldr	r2, [sp, #0]
 8011954:	9b01      	ldr	r3, [sp, #4]
 8011956:	0028      	movs	r0, r5
 8011958:	0021      	movs	r1, r4
 801195a:	f7f0 fcbb 	bl	80022d4 <__aeabi_dmul>
 801195e:	2222      	movs	r2, #34	; 0x22
 8011960:	f7ff ffe2 	bl	8011928 <with_errno>
 8011964:	b003      	add	sp, #12
 8011966:	bd30      	pop	{r4, r5, pc}
 8011968:	0010      	movs	r0, r2
 801196a:	0019      	movs	r1, r3
 801196c:	e7ef      	b.n	801194e <xflow+0x12>

0801196e <__math_uflow>:
 801196e:	2380      	movs	r3, #128	; 0x80
 8011970:	b510      	push	{r4, lr}
 8011972:	2200      	movs	r2, #0
 8011974:	055b      	lsls	r3, r3, #21
 8011976:	f7ff ffe1 	bl	801193c <xflow>
 801197a:	bd10      	pop	{r4, pc}

0801197c <__math_oflow>:
 801197c:	23e0      	movs	r3, #224	; 0xe0
 801197e:	b510      	push	{r4, lr}
 8011980:	2200      	movs	r2, #0
 8011982:	05db      	lsls	r3, r3, #23
 8011984:	f7ff ffda 	bl	801193c <xflow>
 8011988:	bd10      	pop	{r4, pc}
	...

0801198c <__ieee754_sqrt>:
 801198c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801198e:	000a      	movs	r2, r1
 8011990:	000c      	movs	r4, r1
 8011992:	496f      	ldr	r1, [pc, #444]	; (8011b50 <__ieee754_sqrt+0x1c4>)
 8011994:	0005      	movs	r5, r0
 8011996:	0003      	movs	r3, r0
 8011998:	0008      	movs	r0, r1
 801199a:	b087      	sub	sp, #28
 801199c:	4020      	ands	r0, r4
 801199e:	4288      	cmp	r0, r1
 80119a0:	d111      	bne.n	80119c6 <__ieee754_sqrt+0x3a>
 80119a2:	002a      	movs	r2, r5
 80119a4:	0023      	movs	r3, r4
 80119a6:	0028      	movs	r0, r5
 80119a8:	0021      	movs	r1, r4
 80119aa:	f7f0 fc93 	bl	80022d4 <__aeabi_dmul>
 80119ae:	0002      	movs	r2, r0
 80119b0:	000b      	movs	r3, r1
 80119b2:	0028      	movs	r0, r5
 80119b4:	0021      	movs	r1, r4
 80119b6:	f7ef fd33 	bl	8001420 <__aeabi_dadd>
 80119ba:	0005      	movs	r5, r0
 80119bc:	000c      	movs	r4, r1
 80119be:	0028      	movs	r0, r5
 80119c0:	0021      	movs	r1, r4
 80119c2:	b007      	add	sp, #28
 80119c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c6:	2c00      	cmp	r4, #0
 80119c8:	dc12      	bgt.n	80119f0 <__ieee754_sqrt+0x64>
 80119ca:	0061      	lsls	r1, r4, #1
 80119cc:	0849      	lsrs	r1, r1, #1
 80119ce:	4329      	orrs	r1, r5
 80119d0:	d0f5      	beq.n	80119be <__ieee754_sqrt+0x32>
 80119d2:	2100      	movs	r1, #0
 80119d4:	428c      	cmp	r4, r1
 80119d6:	d100      	bne.n	80119da <__ieee754_sqrt+0x4e>
 80119d8:	e09f      	b.n	8011b1a <__ieee754_sqrt+0x18e>
 80119da:	002a      	movs	r2, r5
 80119dc:	0023      	movs	r3, r4
 80119de:	0028      	movs	r0, r5
 80119e0:	0021      	movs	r1, r4
 80119e2:	f7f0 ff39 	bl	8002858 <__aeabi_dsub>
 80119e6:	0002      	movs	r2, r0
 80119e8:	000b      	movs	r3, r1
 80119ea:	f7f0 f879 	bl	8001ae0 <__aeabi_ddiv>
 80119ee:	e7e4      	b.n	80119ba <__ieee754_sqrt+0x2e>
 80119f0:	1521      	asrs	r1, r4, #20
 80119f2:	d100      	bne.n	80119f6 <__ieee754_sqrt+0x6a>
 80119f4:	e091      	b.n	8011b1a <__ieee754_sqrt+0x18e>
 80119f6:	4857      	ldr	r0, [pc, #348]	; (8011b54 <__ieee754_sqrt+0x1c8>)
 80119f8:	0312      	lsls	r2, r2, #12
 80119fa:	180c      	adds	r4, r1, r0
 80119fc:	2080      	movs	r0, #128	; 0x80
 80119fe:	0b12      	lsrs	r2, r2, #12
 8011a00:	0340      	lsls	r0, r0, #13
 8011a02:	4310      	orrs	r0, r2
 8011a04:	07c9      	lsls	r1, r1, #31
 8011a06:	d403      	bmi.n	8011a10 <__ieee754_sqrt+0x84>
 8011a08:	0fda      	lsrs	r2, r3, #31
 8011a0a:	0040      	lsls	r0, r0, #1
 8011a0c:	1810      	adds	r0, r2, r0
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	2500      	movs	r5, #0
 8011a12:	1062      	asrs	r2, r4, #1
 8011a14:	0040      	lsls	r0, r0, #1
 8011a16:	2480      	movs	r4, #128	; 0x80
 8011a18:	9205      	str	r2, [sp, #20]
 8011a1a:	0fda      	lsrs	r2, r3, #31
 8011a1c:	1812      	adds	r2, r2, r0
 8011a1e:	0029      	movs	r1, r5
 8011a20:	2016      	movs	r0, #22
 8011a22:	005b      	lsls	r3, r3, #1
 8011a24:	03a4      	lsls	r4, r4, #14
 8011a26:	190e      	adds	r6, r1, r4
 8011a28:	4296      	cmp	r6, r2
 8011a2a:	dc02      	bgt.n	8011a32 <__ieee754_sqrt+0xa6>
 8011a2c:	1931      	adds	r1, r6, r4
 8011a2e:	1b92      	subs	r2, r2, r6
 8011a30:	192d      	adds	r5, r5, r4
 8011a32:	0fde      	lsrs	r6, r3, #31
 8011a34:	0052      	lsls	r2, r2, #1
 8011a36:	3801      	subs	r0, #1
 8011a38:	18b2      	adds	r2, r6, r2
 8011a3a:	005b      	lsls	r3, r3, #1
 8011a3c:	0864      	lsrs	r4, r4, #1
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d1f1      	bne.n	8011a26 <__ieee754_sqrt+0x9a>
 8011a42:	2620      	movs	r6, #32
 8011a44:	2780      	movs	r7, #128	; 0x80
 8011a46:	0004      	movs	r4, r0
 8011a48:	9604      	str	r6, [sp, #16]
 8011a4a:	063f      	lsls	r7, r7, #24
 8011a4c:	183e      	adds	r6, r7, r0
 8011a4e:	46b4      	mov	ip, r6
 8011a50:	428a      	cmp	r2, r1
 8011a52:	dc02      	bgt.n	8011a5a <__ieee754_sqrt+0xce>
 8011a54:	d114      	bne.n	8011a80 <__ieee754_sqrt+0xf4>
 8011a56:	429e      	cmp	r6, r3
 8011a58:	d812      	bhi.n	8011a80 <__ieee754_sqrt+0xf4>
 8011a5a:	4660      	mov	r0, ip
 8011a5c:	4666      	mov	r6, ip
 8011a5e:	19c0      	adds	r0, r0, r7
 8011a60:	9100      	str	r1, [sp, #0]
 8011a62:	2e00      	cmp	r6, #0
 8011a64:	da03      	bge.n	8011a6e <__ieee754_sqrt+0xe2>
 8011a66:	43c6      	mvns	r6, r0
 8011a68:	0ff6      	lsrs	r6, r6, #31
 8011a6a:	198e      	adds	r6, r1, r6
 8011a6c:	9600      	str	r6, [sp, #0]
 8011a6e:	1a52      	subs	r2, r2, r1
 8011a70:	4563      	cmp	r3, ip
 8011a72:	4189      	sbcs	r1, r1
 8011a74:	4249      	negs	r1, r1
 8011a76:	1a52      	subs	r2, r2, r1
 8011a78:	4661      	mov	r1, ip
 8011a7a:	1a5b      	subs	r3, r3, r1
 8011a7c:	9900      	ldr	r1, [sp, #0]
 8011a7e:	19e4      	adds	r4, r4, r7
 8011a80:	0fde      	lsrs	r6, r3, #31
 8011a82:	0052      	lsls	r2, r2, #1
 8011a84:	18b2      	adds	r2, r6, r2
 8011a86:	9e04      	ldr	r6, [sp, #16]
 8011a88:	005b      	lsls	r3, r3, #1
 8011a8a:	3e01      	subs	r6, #1
 8011a8c:	087f      	lsrs	r7, r7, #1
 8011a8e:	9604      	str	r6, [sp, #16]
 8011a90:	2e00      	cmp	r6, #0
 8011a92:	d1db      	bne.n	8011a4c <__ieee754_sqrt+0xc0>
 8011a94:	431a      	orrs	r2, r3
 8011a96:	d01f      	beq.n	8011ad8 <__ieee754_sqrt+0x14c>
 8011a98:	4e2f      	ldr	r6, [pc, #188]	; (8011b58 <__ieee754_sqrt+0x1cc>)
 8011a9a:	4f30      	ldr	r7, [pc, #192]	; (8011b5c <__ieee754_sqrt+0x1d0>)
 8011a9c:	6830      	ldr	r0, [r6, #0]
 8011a9e:	6871      	ldr	r1, [r6, #4]
 8011aa0:	683a      	ldr	r2, [r7, #0]
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	9200      	str	r2, [sp, #0]
 8011aa6:	9301      	str	r3, [sp, #4]
 8011aa8:	6832      	ldr	r2, [r6, #0]
 8011aaa:	6873      	ldr	r3, [r6, #4]
 8011aac:	9202      	str	r2, [sp, #8]
 8011aae:	9303      	str	r3, [sp, #12]
 8011ab0:	9a00      	ldr	r2, [sp, #0]
 8011ab2:	9b01      	ldr	r3, [sp, #4]
 8011ab4:	f7f0 fed0 	bl	8002858 <__aeabi_dsub>
 8011ab8:	0002      	movs	r2, r0
 8011aba:	000b      	movs	r3, r1
 8011abc:	9802      	ldr	r0, [sp, #8]
 8011abe:	9903      	ldr	r1, [sp, #12]
 8011ac0:	f7ee fcd4 	bl	800046c <__aeabi_dcmple>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d007      	beq.n	8011ad8 <__ieee754_sqrt+0x14c>
 8011ac8:	6830      	ldr	r0, [r6, #0]
 8011aca:	6871      	ldr	r1, [r6, #4]
 8011acc:	683a      	ldr	r2, [r7, #0]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	1c67      	adds	r7, r4, #1
 8011ad2:	d127      	bne.n	8011b24 <__ieee754_sqrt+0x198>
 8011ad4:	9c04      	ldr	r4, [sp, #16]
 8011ad6:	3501      	adds	r5, #1
 8011ad8:	4b21      	ldr	r3, [pc, #132]	; (8011b60 <__ieee754_sqrt+0x1d4>)
 8011ada:	1069      	asrs	r1, r5, #1
 8011adc:	18c9      	adds	r1, r1, r3
 8011ade:	0864      	lsrs	r4, r4, #1
 8011ae0:	07ed      	lsls	r5, r5, #31
 8011ae2:	d502      	bpl.n	8011aea <__ieee754_sqrt+0x15e>
 8011ae4:	2380      	movs	r3, #128	; 0x80
 8011ae6:	061b      	lsls	r3, r3, #24
 8011ae8:	431c      	orrs	r4, r3
 8011aea:	9b05      	ldr	r3, [sp, #20]
 8011aec:	0025      	movs	r5, r4
 8011aee:	0518      	lsls	r0, r3, #20
 8011af0:	1843      	adds	r3, r0, r1
 8011af2:	001c      	movs	r4, r3
 8011af4:	e763      	b.n	80119be <__ieee754_sqrt+0x32>
 8011af6:	0ada      	lsrs	r2, r3, #11
 8011af8:	3815      	subs	r0, #21
 8011afa:	055b      	lsls	r3, r3, #21
 8011afc:	2a00      	cmp	r2, #0
 8011afe:	d0fa      	beq.n	8011af6 <__ieee754_sqrt+0x16a>
 8011b00:	2480      	movs	r4, #128	; 0x80
 8011b02:	0364      	lsls	r4, r4, #13
 8011b04:	4222      	tst	r2, r4
 8011b06:	d00a      	beq.n	8011b1e <__ieee754_sqrt+0x192>
 8011b08:	2420      	movs	r4, #32
 8011b0a:	001e      	movs	r6, r3
 8011b0c:	1a64      	subs	r4, r4, r1
 8011b0e:	40e6      	lsrs	r6, r4
 8011b10:	1e4d      	subs	r5, r1, #1
 8011b12:	408b      	lsls	r3, r1
 8011b14:	4332      	orrs	r2, r6
 8011b16:	1b41      	subs	r1, r0, r5
 8011b18:	e76d      	b.n	80119f6 <__ieee754_sqrt+0x6a>
 8011b1a:	2000      	movs	r0, #0
 8011b1c:	e7ee      	b.n	8011afc <__ieee754_sqrt+0x170>
 8011b1e:	0052      	lsls	r2, r2, #1
 8011b20:	3101      	adds	r1, #1
 8011b22:	e7ef      	b.n	8011b04 <__ieee754_sqrt+0x178>
 8011b24:	f7ef fc7c 	bl	8001420 <__aeabi_dadd>
 8011b28:	6877      	ldr	r7, [r6, #4]
 8011b2a:	6836      	ldr	r6, [r6, #0]
 8011b2c:	0002      	movs	r2, r0
 8011b2e:	000b      	movs	r3, r1
 8011b30:	0030      	movs	r0, r6
 8011b32:	0039      	movs	r1, r7
 8011b34:	f7ee fc90 	bl	8000458 <__aeabi_dcmplt>
 8011b38:	2800      	cmp	r0, #0
 8011b3a:	d004      	beq.n	8011b46 <__ieee754_sqrt+0x1ba>
 8011b3c:	3402      	adds	r4, #2
 8011b3e:	4263      	negs	r3, r4
 8011b40:	4163      	adcs	r3, r4
 8011b42:	18ed      	adds	r5, r5, r3
 8011b44:	e7c8      	b.n	8011ad8 <__ieee754_sqrt+0x14c>
 8011b46:	2301      	movs	r3, #1
 8011b48:	3401      	adds	r4, #1
 8011b4a:	439c      	bics	r4, r3
 8011b4c:	e7c4      	b.n	8011ad8 <__ieee754_sqrt+0x14c>
 8011b4e:	46c0      	nop			; (mov r8, r8)
 8011b50:	7ff00000 	.word	0x7ff00000
 8011b54:	fffffc01 	.word	0xfffffc01
 8011b58:	200002c0 	.word	0x200002c0
 8011b5c:	200002c8 	.word	0x200002c8
 8011b60:	3fe00000 	.word	0x3fe00000

08011b64 <_init>:
 8011b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b66:	46c0      	nop			; (mov r8, r8)
 8011b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b6a:	bc08      	pop	{r3}
 8011b6c:	469e      	mov	lr, r3
 8011b6e:	4770      	bx	lr

08011b70 <_fini>:
 8011b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b72:	46c0      	nop			; (mov r8, r8)
 8011b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b76:	bc08      	pop	{r3}
 8011b78:	469e      	mov	lr, r3
 8011b7a:	4770      	bx	lr
