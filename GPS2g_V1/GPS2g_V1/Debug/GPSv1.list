
GPSv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  0800c800  0800c800  0000c800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010600  0800c8b8  0800c8b8  0000c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017c0  0801ceb8  0801ceb8  0001ceb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e678  0801e678  000202c8  2**0
                  CONTENTS
  4 .ARM          00000000  0801e678  0801e678  000202c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801e678  0801e678  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e678  0801e678  0001e678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e67c  0801e67c  0001e67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0801e680  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000499c  200002c8  0801e948  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c64  0801e948  00024c64  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031a0d  00000000  00000000  00020333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044da  00000000  00000000  00051d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000143ec  00000000  00000000  0005621a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014a0  00000000  00000000  0006a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002527  00000000  00000000  0006baa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019f0a  00000000  00000000  0006dfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002d411  00000000  00000000  00087ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a1551  00000000  00000000  000b52ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006048  00000000  00000000  0015683c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0015c884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c8b8 <__do_global_dtors_aux>:
 800c8b8:	b510      	push	{r4, lr}
 800c8ba:	4c06      	ldr	r4, [pc, #24]	; (800c8d4 <__do_global_dtors_aux+0x1c>)
 800c8bc:	7823      	ldrb	r3, [r4, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d107      	bne.n	800c8d2 <__do_global_dtors_aux+0x1a>
 800c8c2:	4b05      	ldr	r3, [pc, #20]	; (800c8d8 <__do_global_dtors_aux+0x20>)
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <__do_global_dtors_aux+0x16>
 800c8c8:	4804      	ldr	r0, [pc, #16]	; (800c8dc <__do_global_dtors_aux+0x24>)
 800c8ca:	e000      	b.n	800c8ce <__do_global_dtors_aux+0x16>
 800c8cc:	bf00      	nop
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	7023      	strb	r3, [r4, #0]
 800c8d2:	bd10      	pop	{r4, pc}
 800c8d4:	200002c8 	.word	0x200002c8
 800c8d8:	00000000 	.word	0x00000000
 800c8dc:	0801cea0 	.word	0x0801cea0

0800c8e0 <frame_dummy>:
 800c8e0:	4b04      	ldr	r3, [pc, #16]	; (800c8f4 <frame_dummy+0x14>)
 800c8e2:	b510      	push	{r4, lr}
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d003      	beq.n	800c8f0 <frame_dummy+0x10>
 800c8e8:	4903      	ldr	r1, [pc, #12]	; (800c8f8 <frame_dummy+0x18>)
 800c8ea:	4804      	ldr	r0, [pc, #16]	; (800c8fc <frame_dummy+0x1c>)
 800c8ec:	e000      	b.n	800c8f0 <frame_dummy+0x10>
 800c8ee:	bf00      	nop
 800c8f0:	bd10      	pop	{r4, pc}
 800c8f2:	46c0      	nop			; (mov r8, r8)
 800c8f4:	00000000 	.word	0x00000000
 800c8f8:	200002cc 	.word	0x200002cc
 800c8fc:	0801cea0 	.word	0x0801cea0

0800c900 <strlen>:
 800c900:	2300      	movs	r3, #0
 800c902:	5cc2      	ldrb	r2, [r0, r3]
 800c904:	3301      	adds	r3, #1
 800c906:	2a00      	cmp	r2, #0
 800c908:	d1fb      	bne.n	800c902 <strlen+0x2>
 800c90a:	1e58      	subs	r0, r3, #1
 800c90c:	4770      	bx	lr
	...

0800c910 <__gnu_thumb1_case_uqi>:
 800c910:	b402      	push	{r1}
 800c912:	4671      	mov	r1, lr
 800c914:	0849      	lsrs	r1, r1, #1
 800c916:	0049      	lsls	r1, r1, #1
 800c918:	5c09      	ldrb	r1, [r1, r0]
 800c91a:	0049      	lsls	r1, r1, #1
 800c91c:	448e      	add	lr, r1
 800c91e:	bc02      	pop	{r1}
 800c920:	4770      	bx	lr
 800c922:	46c0      	nop			; (mov r8, r8)

0800c924 <__gnu_thumb1_case_shi>:
 800c924:	b403      	push	{r0, r1}
 800c926:	4671      	mov	r1, lr
 800c928:	0849      	lsrs	r1, r1, #1
 800c92a:	0040      	lsls	r0, r0, #1
 800c92c:	0049      	lsls	r1, r1, #1
 800c92e:	5e09      	ldrsh	r1, [r1, r0]
 800c930:	0049      	lsls	r1, r1, #1
 800c932:	448e      	add	lr, r1
 800c934:	bc03      	pop	{r0, r1}
 800c936:	4770      	bx	lr

0800c938 <__udivsi3>:
 800c938:	2200      	movs	r2, #0
 800c93a:	0843      	lsrs	r3, r0, #1
 800c93c:	428b      	cmp	r3, r1
 800c93e:	d374      	bcc.n	800ca2a <__udivsi3+0xf2>
 800c940:	0903      	lsrs	r3, r0, #4
 800c942:	428b      	cmp	r3, r1
 800c944:	d35f      	bcc.n	800ca06 <__udivsi3+0xce>
 800c946:	0a03      	lsrs	r3, r0, #8
 800c948:	428b      	cmp	r3, r1
 800c94a:	d344      	bcc.n	800c9d6 <__udivsi3+0x9e>
 800c94c:	0b03      	lsrs	r3, r0, #12
 800c94e:	428b      	cmp	r3, r1
 800c950:	d328      	bcc.n	800c9a4 <__udivsi3+0x6c>
 800c952:	0c03      	lsrs	r3, r0, #16
 800c954:	428b      	cmp	r3, r1
 800c956:	d30d      	bcc.n	800c974 <__udivsi3+0x3c>
 800c958:	22ff      	movs	r2, #255	; 0xff
 800c95a:	0209      	lsls	r1, r1, #8
 800c95c:	ba12      	rev	r2, r2
 800c95e:	0c03      	lsrs	r3, r0, #16
 800c960:	428b      	cmp	r3, r1
 800c962:	d302      	bcc.n	800c96a <__udivsi3+0x32>
 800c964:	1212      	asrs	r2, r2, #8
 800c966:	0209      	lsls	r1, r1, #8
 800c968:	d065      	beq.n	800ca36 <__udivsi3+0xfe>
 800c96a:	0b03      	lsrs	r3, r0, #12
 800c96c:	428b      	cmp	r3, r1
 800c96e:	d319      	bcc.n	800c9a4 <__udivsi3+0x6c>
 800c970:	e000      	b.n	800c974 <__udivsi3+0x3c>
 800c972:	0a09      	lsrs	r1, r1, #8
 800c974:	0bc3      	lsrs	r3, r0, #15
 800c976:	428b      	cmp	r3, r1
 800c978:	d301      	bcc.n	800c97e <__udivsi3+0x46>
 800c97a:	03cb      	lsls	r3, r1, #15
 800c97c:	1ac0      	subs	r0, r0, r3
 800c97e:	4152      	adcs	r2, r2
 800c980:	0b83      	lsrs	r3, r0, #14
 800c982:	428b      	cmp	r3, r1
 800c984:	d301      	bcc.n	800c98a <__udivsi3+0x52>
 800c986:	038b      	lsls	r3, r1, #14
 800c988:	1ac0      	subs	r0, r0, r3
 800c98a:	4152      	adcs	r2, r2
 800c98c:	0b43      	lsrs	r3, r0, #13
 800c98e:	428b      	cmp	r3, r1
 800c990:	d301      	bcc.n	800c996 <__udivsi3+0x5e>
 800c992:	034b      	lsls	r3, r1, #13
 800c994:	1ac0      	subs	r0, r0, r3
 800c996:	4152      	adcs	r2, r2
 800c998:	0b03      	lsrs	r3, r0, #12
 800c99a:	428b      	cmp	r3, r1
 800c99c:	d301      	bcc.n	800c9a2 <__udivsi3+0x6a>
 800c99e:	030b      	lsls	r3, r1, #12
 800c9a0:	1ac0      	subs	r0, r0, r3
 800c9a2:	4152      	adcs	r2, r2
 800c9a4:	0ac3      	lsrs	r3, r0, #11
 800c9a6:	428b      	cmp	r3, r1
 800c9a8:	d301      	bcc.n	800c9ae <__udivsi3+0x76>
 800c9aa:	02cb      	lsls	r3, r1, #11
 800c9ac:	1ac0      	subs	r0, r0, r3
 800c9ae:	4152      	adcs	r2, r2
 800c9b0:	0a83      	lsrs	r3, r0, #10
 800c9b2:	428b      	cmp	r3, r1
 800c9b4:	d301      	bcc.n	800c9ba <__udivsi3+0x82>
 800c9b6:	028b      	lsls	r3, r1, #10
 800c9b8:	1ac0      	subs	r0, r0, r3
 800c9ba:	4152      	adcs	r2, r2
 800c9bc:	0a43      	lsrs	r3, r0, #9
 800c9be:	428b      	cmp	r3, r1
 800c9c0:	d301      	bcc.n	800c9c6 <__udivsi3+0x8e>
 800c9c2:	024b      	lsls	r3, r1, #9
 800c9c4:	1ac0      	subs	r0, r0, r3
 800c9c6:	4152      	adcs	r2, r2
 800c9c8:	0a03      	lsrs	r3, r0, #8
 800c9ca:	428b      	cmp	r3, r1
 800c9cc:	d301      	bcc.n	800c9d2 <__udivsi3+0x9a>
 800c9ce:	020b      	lsls	r3, r1, #8
 800c9d0:	1ac0      	subs	r0, r0, r3
 800c9d2:	4152      	adcs	r2, r2
 800c9d4:	d2cd      	bcs.n	800c972 <__udivsi3+0x3a>
 800c9d6:	09c3      	lsrs	r3, r0, #7
 800c9d8:	428b      	cmp	r3, r1
 800c9da:	d301      	bcc.n	800c9e0 <__udivsi3+0xa8>
 800c9dc:	01cb      	lsls	r3, r1, #7
 800c9de:	1ac0      	subs	r0, r0, r3
 800c9e0:	4152      	adcs	r2, r2
 800c9e2:	0983      	lsrs	r3, r0, #6
 800c9e4:	428b      	cmp	r3, r1
 800c9e6:	d301      	bcc.n	800c9ec <__udivsi3+0xb4>
 800c9e8:	018b      	lsls	r3, r1, #6
 800c9ea:	1ac0      	subs	r0, r0, r3
 800c9ec:	4152      	adcs	r2, r2
 800c9ee:	0943      	lsrs	r3, r0, #5
 800c9f0:	428b      	cmp	r3, r1
 800c9f2:	d301      	bcc.n	800c9f8 <__udivsi3+0xc0>
 800c9f4:	014b      	lsls	r3, r1, #5
 800c9f6:	1ac0      	subs	r0, r0, r3
 800c9f8:	4152      	adcs	r2, r2
 800c9fa:	0903      	lsrs	r3, r0, #4
 800c9fc:	428b      	cmp	r3, r1
 800c9fe:	d301      	bcc.n	800ca04 <__udivsi3+0xcc>
 800ca00:	010b      	lsls	r3, r1, #4
 800ca02:	1ac0      	subs	r0, r0, r3
 800ca04:	4152      	adcs	r2, r2
 800ca06:	08c3      	lsrs	r3, r0, #3
 800ca08:	428b      	cmp	r3, r1
 800ca0a:	d301      	bcc.n	800ca10 <__udivsi3+0xd8>
 800ca0c:	00cb      	lsls	r3, r1, #3
 800ca0e:	1ac0      	subs	r0, r0, r3
 800ca10:	4152      	adcs	r2, r2
 800ca12:	0883      	lsrs	r3, r0, #2
 800ca14:	428b      	cmp	r3, r1
 800ca16:	d301      	bcc.n	800ca1c <__udivsi3+0xe4>
 800ca18:	008b      	lsls	r3, r1, #2
 800ca1a:	1ac0      	subs	r0, r0, r3
 800ca1c:	4152      	adcs	r2, r2
 800ca1e:	0843      	lsrs	r3, r0, #1
 800ca20:	428b      	cmp	r3, r1
 800ca22:	d301      	bcc.n	800ca28 <__udivsi3+0xf0>
 800ca24:	004b      	lsls	r3, r1, #1
 800ca26:	1ac0      	subs	r0, r0, r3
 800ca28:	4152      	adcs	r2, r2
 800ca2a:	1a41      	subs	r1, r0, r1
 800ca2c:	d200      	bcs.n	800ca30 <__udivsi3+0xf8>
 800ca2e:	4601      	mov	r1, r0
 800ca30:	4152      	adcs	r2, r2
 800ca32:	4610      	mov	r0, r2
 800ca34:	4770      	bx	lr
 800ca36:	e7ff      	b.n	800ca38 <__udivsi3+0x100>
 800ca38:	b501      	push	{r0, lr}
 800ca3a:	2000      	movs	r0, #0
 800ca3c:	f000 f8f0 	bl	800cc20 <__aeabi_idiv0>
 800ca40:	bd02      	pop	{r1, pc}
 800ca42:	46c0      	nop			; (mov r8, r8)

0800ca44 <__aeabi_uidivmod>:
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d0f7      	beq.n	800ca38 <__udivsi3+0x100>
 800ca48:	e776      	b.n	800c938 <__udivsi3>
 800ca4a:	4770      	bx	lr

0800ca4c <__divsi3>:
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	430b      	orrs	r3, r1
 800ca50:	d47f      	bmi.n	800cb52 <__divsi3+0x106>
 800ca52:	2200      	movs	r2, #0
 800ca54:	0843      	lsrs	r3, r0, #1
 800ca56:	428b      	cmp	r3, r1
 800ca58:	d374      	bcc.n	800cb44 <__divsi3+0xf8>
 800ca5a:	0903      	lsrs	r3, r0, #4
 800ca5c:	428b      	cmp	r3, r1
 800ca5e:	d35f      	bcc.n	800cb20 <__divsi3+0xd4>
 800ca60:	0a03      	lsrs	r3, r0, #8
 800ca62:	428b      	cmp	r3, r1
 800ca64:	d344      	bcc.n	800caf0 <__divsi3+0xa4>
 800ca66:	0b03      	lsrs	r3, r0, #12
 800ca68:	428b      	cmp	r3, r1
 800ca6a:	d328      	bcc.n	800cabe <__divsi3+0x72>
 800ca6c:	0c03      	lsrs	r3, r0, #16
 800ca6e:	428b      	cmp	r3, r1
 800ca70:	d30d      	bcc.n	800ca8e <__divsi3+0x42>
 800ca72:	22ff      	movs	r2, #255	; 0xff
 800ca74:	0209      	lsls	r1, r1, #8
 800ca76:	ba12      	rev	r2, r2
 800ca78:	0c03      	lsrs	r3, r0, #16
 800ca7a:	428b      	cmp	r3, r1
 800ca7c:	d302      	bcc.n	800ca84 <__divsi3+0x38>
 800ca7e:	1212      	asrs	r2, r2, #8
 800ca80:	0209      	lsls	r1, r1, #8
 800ca82:	d065      	beq.n	800cb50 <__divsi3+0x104>
 800ca84:	0b03      	lsrs	r3, r0, #12
 800ca86:	428b      	cmp	r3, r1
 800ca88:	d319      	bcc.n	800cabe <__divsi3+0x72>
 800ca8a:	e000      	b.n	800ca8e <__divsi3+0x42>
 800ca8c:	0a09      	lsrs	r1, r1, #8
 800ca8e:	0bc3      	lsrs	r3, r0, #15
 800ca90:	428b      	cmp	r3, r1
 800ca92:	d301      	bcc.n	800ca98 <__divsi3+0x4c>
 800ca94:	03cb      	lsls	r3, r1, #15
 800ca96:	1ac0      	subs	r0, r0, r3
 800ca98:	4152      	adcs	r2, r2
 800ca9a:	0b83      	lsrs	r3, r0, #14
 800ca9c:	428b      	cmp	r3, r1
 800ca9e:	d301      	bcc.n	800caa4 <__divsi3+0x58>
 800caa0:	038b      	lsls	r3, r1, #14
 800caa2:	1ac0      	subs	r0, r0, r3
 800caa4:	4152      	adcs	r2, r2
 800caa6:	0b43      	lsrs	r3, r0, #13
 800caa8:	428b      	cmp	r3, r1
 800caaa:	d301      	bcc.n	800cab0 <__divsi3+0x64>
 800caac:	034b      	lsls	r3, r1, #13
 800caae:	1ac0      	subs	r0, r0, r3
 800cab0:	4152      	adcs	r2, r2
 800cab2:	0b03      	lsrs	r3, r0, #12
 800cab4:	428b      	cmp	r3, r1
 800cab6:	d301      	bcc.n	800cabc <__divsi3+0x70>
 800cab8:	030b      	lsls	r3, r1, #12
 800caba:	1ac0      	subs	r0, r0, r3
 800cabc:	4152      	adcs	r2, r2
 800cabe:	0ac3      	lsrs	r3, r0, #11
 800cac0:	428b      	cmp	r3, r1
 800cac2:	d301      	bcc.n	800cac8 <__divsi3+0x7c>
 800cac4:	02cb      	lsls	r3, r1, #11
 800cac6:	1ac0      	subs	r0, r0, r3
 800cac8:	4152      	adcs	r2, r2
 800caca:	0a83      	lsrs	r3, r0, #10
 800cacc:	428b      	cmp	r3, r1
 800cace:	d301      	bcc.n	800cad4 <__divsi3+0x88>
 800cad0:	028b      	lsls	r3, r1, #10
 800cad2:	1ac0      	subs	r0, r0, r3
 800cad4:	4152      	adcs	r2, r2
 800cad6:	0a43      	lsrs	r3, r0, #9
 800cad8:	428b      	cmp	r3, r1
 800cada:	d301      	bcc.n	800cae0 <__divsi3+0x94>
 800cadc:	024b      	lsls	r3, r1, #9
 800cade:	1ac0      	subs	r0, r0, r3
 800cae0:	4152      	adcs	r2, r2
 800cae2:	0a03      	lsrs	r3, r0, #8
 800cae4:	428b      	cmp	r3, r1
 800cae6:	d301      	bcc.n	800caec <__divsi3+0xa0>
 800cae8:	020b      	lsls	r3, r1, #8
 800caea:	1ac0      	subs	r0, r0, r3
 800caec:	4152      	adcs	r2, r2
 800caee:	d2cd      	bcs.n	800ca8c <__divsi3+0x40>
 800caf0:	09c3      	lsrs	r3, r0, #7
 800caf2:	428b      	cmp	r3, r1
 800caf4:	d301      	bcc.n	800cafa <__divsi3+0xae>
 800caf6:	01cb      	lsls	r3, r1, #7
 800caf8:	1ac0      	subs	r0, r0, r3
 800cafa:	4152      	adcs	r2, r2
 800cafc:	0983      	lsrs	r3, r0, #6
 800cafe:	428b      	cmp	r3, r1
 800cb00:	d301      	bcc.n	800cb06 <__divsi3+0xba>
 800cb02:	018b      	lsls	r3, r1, #6
 800cb04:	1ac0      	subs	r0, r0, r3
 800cb06:	4152      	adcs	r2, r2
 800cb08:	0943      	lsrs	r3, r0, #5
 800cb0a:	428b      	cmp	r3, r1
 800cb0c:	d301      	bcc.n	800cb12 <__divsi3+0xc6>
 800cb0e:	014b      	lsls	r3, r1, #5
 800cb10:	1ac0      	subs	r0, r0, r3
 800cb12:	4152      	adcs	r2, r2
 800cb14:	0903      	lsrs	r3, r0, #4
 800cb16:	428b      	cmp	r3, r1
 800cb18:	d301      	bcc.n	800cb1e <__divsi3+0xd2>
 800cb1a:	010b      	lsls	r3, r1, #4
 800cb1c:	1ac0      	subs	r0, r0, r3
 800cb1e:	4152      	adcs	r2, r2
 800cb20:	08c3      	lsrs	r3, r0, #3
 800cb22:	428b      	cmp	r3, r1
 800cb24:	d301      	bcc.n	800cb2a <__divsi3+0xde>
 800cb26:	00cb      	lsls	r3, r1, #3
 800cb28:	1ac0      	subs	r0, r0, r3
 800cb2a:	4152      	adcs	r2, r2
 800cb2c:	0883      	lsrs	r3, r0, #2
 800cb2e:	428b      	cmp	r3, r1
 800cb30:	d301      	bcc.n	800cb36 <__divsi3+0xea>
 800cb32:	008b      	lsls	r3, r1, #2
 800cb34:	1ac0      	subs	r0, r0, r3
 800cb36:	4152      	adcs	r2, r2
 800cb38:	0843      	lsrs	r3, r0, #1
 800cb3a:	428b      	cmp	r3, r1
 800cb3c:	d301      	bcc.n	800cb42 <__divsi3+0xf6>
 800cb3e:	004b      	lsls	r3, r1, #1
 800cb40:	1ac0      	subs	r0, r0, r3
 800cb42:	4152      	adcs	r2, r2
 800cb44:	1a41      	subs	r1, r0, r1
 800cb46:	d200      	bcs.n	800cb4a <__divsi3+0xfe>
 800cb48:	4601      	mov	r1, r0
 800cb4a:	4152      	adcs	r2, r2
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4770      	bx	lr
 800cb50:	e05d      	b.n	800cc0e <__divsi3+0x1c2>
 800cb52:	0fca      	lsrs	r2, r1, #31
 800cb54:	d000      	beq.n	800cb58 <__divsi3+0x10c>
 800cb56:	4249      	negs	r1, r1
 800cb58:	1003      	asrs	r3, r0, #32
 800cb5a:	d300      	bcc.n	800cb5e <__divsi3+0x112>
 800cb5c:	4240      	negs	r0, r0
 800cb5e:	4053      	eors	r3, r2
 800cb60:	2200      	movs	r2, #0
 800cb62:	469c      	mov	ip, r3
 800cb64:	0903      	lsrs	r3, r0, #4
 800cb66:	428b      	cmp	r3, r1
 800cb68:	d32d      	bcc.n	800cbc6 <__divsi3+0x17a>
 800cb6a:	0a03      	lsrs	r3, r0, #8
 800cb6c:	428b      	cmp	r3, r1
 800cb6e:	d312      	bcc.n	800cb96 <__divsi3+0x14a>
 800cb70:	22fc      	movs	r2, #252	; 0xfc
 800cb72:	0189      	lsls	r1, r1, #6
 800cb74:	ba12      	rev	r2, r2
 800cb76:	0a03      	lsrs	r3, r0, #8
 800cb78:	428b      	cmp	r3, r1
 800cb7a:	d30c      	bcc.n	800cb96 <__divsi3+0x14a>
 800cb7c:	0189      	lsls	r1, r1, #6
 800cb7e:	1192      	asrs	r2, r2, #6
 800cb80:	428b      	cmp	r3, r1
 800cb82:	d308      	bcc.n	800cb96 <__divsi3+0x14a>
 800cb84:	0189      	lsls	r1, r1, #6
 800cb86:	1192      	asrs	r2, r2, #6
 800cb88:	428b      	cmp	r3, r1
 800cb8a:	d304      	bcc.n	800cb96 <__divsi3+0x14a>
 800cb8c:	0189      	lsls	r1, r1, #6
 800cb8e:	d03a      	beq.n	800cc06 <__divsi3+0x1ba>
 800cb90:	1192      	asrs	r2, r2, #6
 800cb92:	e000      	b.n	800cb96 <__divsi3+0x14a>
 800cb94:	0989      	lsrs	r1, r1, #6
 800cb96:	09c3      	lsrs	r3, r0, #7
 800cb98:	428b      	cmp	r3, r1
 800cb9a:	d301      	bcc.n	800cba0 <__divsi3+0x154>
 800cb9c:	01cb      	lsls	r3, r1, #7
 800cb9e:	1ac0      	subs	r0, r0, r3
 800cba0:	4152      	adcs	r2, r2
 800cba2:	0983      	lsrs	r3, r0, #6
 800cba4:	428b      	cmp	r3, r1
 800cba6:	d301      	bcc.n	800cbac <__divsi3+0x160>
 800cba8:	018b      	lsls	r3, r1, #6
 800cbaa:	1ac0      	subs	r0, r0, r3
 800cbac:	4152      	adcs	r2, r2
 800cbae:	0943      	lsrs	r3, r0, #5
 800cbb0:	428b      	cmp	r3, r1
 800cbb2:	d301      	bcc.n	800cbb8 <__divsi3+0x16c>
 800cbb4:	014b      	lsls	r3, r1, #5
 800cbb6:	1ac0      	subs	r0, r0, r3
 800cbb8:	4152      	adcs	r2, r2
 800cbba:	0903      	lsrs	r3, r0, #4
 800cbbc:	428b      	cmp	r3, r1
 800cbbe:	d301      	bcc.n	800cbc4 <__divsi3+0x178>
 800cbc0:	010b      	lsls	r3, r1, #4
 800cbc2:	1ac0      	subs	r0, r0, r3
 800cbc4:	4152      	adcs	r2, r2
 800cbc6:	08c3      	lsrs	r3, r0, #3
 800cbc8:	428b      	cmp	r3, r1
 800cbca:	d301      	bcc.n	800cbd0 <__divsi3+0x184>
 800cbcc:	00cb      	lsls	r3, r1, #3
 800cbce:	1ac0      	subs	r0, r0, r3
 800cbd0:	4152      	adcs	r2, r2
 800cbd2:	0883      	lsrs	r3, r0, #2
 800cbd4:	428b      	cmp	r3, r1
 800cbd6:	d301      	bcc.n	800cbdc <__divsi3+0x190>
 800cbd8:	008b      	lsls	r3, r1, #2
 800cbda:	1ac0      	subs	r0, r0, r3
 800cbdc:	4152      	adcs	r2, r2
 800cbde:	d2d9      	bcs.n	800cb94 <__divsi3+0x148>
 800cbe0:	0843      	lsrs	r3, r0, #1
 800cbe2:	428b      	cmp	r3, r1
 800cbe4:	d301      	bcc.n	800cbea <__divsi3+0x19e>
 800cbe6:	004b      	lsls	r3, r1, #1
 800cbe8:	1ac0      	subs	r0, r0, r3
 800cbea:	4152      	adcs	r2, r2
 800cbec:	1a41      	subs	r1, r0, r1
 800cbee:	d200      	bcs.n	800cbf2 <__divsi3+0x1a6>
 800cbf0:	4601      	mov	r1, r0
 800cbf2:	4663      	mov	r3, ip
 800cbf4:	4152      	adcs	r2, r2
 800cbf6:	105b      	asrs	r3, r3, #1
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	d301      	bcc.n	800cc00 <__divsi3+0x1b4>
 800cbfc:	4240      	negs	r0, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d500      	bpl.n	800cc04 <__divsi3+0x1b8>
 800cc02:	4249      	negs	r1, r1
 800cc04:	4770      	bx	lr
 800cc06:	4663      	mov	r3, ip
 800cc08:	105b      	asrs	r3, r3, #1
 800cc0a:	d300      	bcc.n	800cc0e <__divsi3+0x1c2>
 800cc0c:	4240      	negs	r0, r0
 800cc0e:	b501      	push	{r0, lr}
 800cc10:	2000      	movs	r0, #0
 800cc12:	f000 f805 	bl	800cc20 <__aeabi_idiv0>
 800cc16:	bd02      	pop	{r1, pc}

0800cc18 <__aeabi_idivmod>:
 800cc18:	2900      	cmp	r1, #0
 800cc1a:	d0f8      	beq.n	800cc0e <__divsi3+0x1c2>
 800cc1c:	e716      	b.n	800ca4c <__divsi3>
 800cc1e:	4770      	bx	lr

0800cc20 <__aeabi_idiv0>:
 800cc20:	4770      	bx	lr
 800cc22:	46c0      	nop			; (mov r8, r8)

0800cc24 <__aeabi_cdrcmple>:
 800cc24:	4684      	mov	ip, r0
 800cc26:	0010      	movs	r0, r2
 800cc28:	4662      	mov	r2, ip
 800cc2a:	468c      	mov	ip, r1
 800cc2c:	0019      	movs	r1, r3
 800cc2e:	4663      	mov	r3, ip
 800cc30:	e000      	b.n	800cc34 <__aeabi_cdcmpeq>
 800cc32:	46c0      	nop			; (mov r8, r8)

0800cc34 <__aeabi_cdcmpeq>:
 800cc34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc36:	f001 fee5 	bl	800ea04 <__ledf2>
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d401      	bmi.n	800cc42 <__aeabi_cdcmpeq+0xe>
 800cc3e:	2100      	movs	r1, #0
 800cc40:	42c8      	cmn	r0, r1
 800cc42:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800cc44 <__aeabi_dcmpeq>:
 800cc44:	b510      	push	{r4, lr}
 800cc46:	f001 fe35 	bl	800e8b4 <__eqdf2>
 800cc4a:	4240      	negs	r0, r0
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	bd10      	pop	{r4, pc}

0800cc50 <__aeabi_dcmplt>:
 800cc50:	b510      	push	{r4, lr}
 800cc52:	f001 fed7 	bl	800ea04 <__ledf2>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	db01      	blt.n	800cc5e <__aeabi_dcmplt+0xe>
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	bd10      	pop	{r4, pc}
 800cc5e:	2001      	movs	r0, #1
 800cc60:	bd10      	pop	{r4, pc}
 800cc62:	46c0      	nop			; (mov r8, r8)

0800cc64 <__aeabi_dcmple>:
 800cc64:	b510      	push	{r4, lr}
 800cc66:	f001 fecd 	bl	800ea04 <__ledf2>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	dd01      	ble.n	800cc72 <__aeabi_dcmple+0xe>
 800cc6e:	2000      	movs	r0, #0
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	2001      	movs	r0, #1
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	46c0      	nop			; (mov r8, r8)

0800cc78 <__aeabi_dcmpgt>:
 800cc78:	b510      	push	{r4, lr}
 800cc7a:	f001 fe5d 	bl	800e938 <__gedf2>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	dc01      	bgt.n	800cc86 <__aeabi_dcmpgt+0xe>
 800cc82:	2000      	movs	r0, #0
 800cc84:	bd10      	pop	{r4, pc}
 800cc86:	2001      	movs	r0, #1
 800cc88:	bd10      	pop	{r4, pc}
 800cc8a:	46c0      	nop			; (mov r8, r8)

0800cc8c <__aeabi_dcmpge>:
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	f001 fe53 	bl	800e938 <__gedf2>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	da01      	bge.n	800cc9a <__aeabi_dcmpge+0xe>
 800cc96:	2000      	movs	r0, #0
 800cc98:	bd10      	pop	{r4, pc}
 800cc9a:	2001      	movs	r0, #1
 800cc9c:	bd10      	pop	{r4, pc}
 800cc9e:	46c0      	nop			; (mov r8, r8)

0800cca0 <__aeabi_cfrcmple>:
 800cca0:	4684      	mov	ip, r0
 800cca2:	0008      	movs	r0, r1
 800cca4:	4661      	mov	r1, ip
 800cca6:	e7ff      	b.n	800cca8 <__aeabi_cfcmpeq>

0800cca8 <__aeabi_cfcmpeq>:
 800cca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccaa:	f000 fbc9 	bl	800d440 <__lesf2>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d401      	bmi.n	800ccb6 <__aeabi_cfcmpeq+0xe>
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	42c8      	cmn	r0, r1
 800ccb6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800ccb8 <__aeabi_fcmpeq>:
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	f000 fb55 	bl	800d368 <__eqsf2>
 800ccbe:	4240      	negs	r0, r0
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	bd10      	pop	{r4, pc}

0800ccc4 <__aeabi_fcmplt>:
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	f000 fbbb 	bl	800d440 <__lesf2>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	db01      	blt.n	800ccd2 <__aeabi_fcmplt+0xe>
 800ccce:	2000      	movs	r0, #0
 800ccd0:	bd10      	pop	{r4, pc}
 800ccd2:	2001      	movs	r0, #1
 800ccd4:	bd10      	pop	{r4, pc}
 800ccd6:	46c0      	nop			; (mov r8, r8)

0800ccd8 <__aeabi_fcmple>:
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	f000 fbb1 	bl	800d440 <__lesf2>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	dd01      	ble.n	800cce6 <__aeabi_fcmple+0xe>
 800cce2:	2000      	movs	r0, #0
 800cce4:	bd10      	pop	{r4, pc}
 800cce6:	2001      	movs	r0, #1
 800cce8:	bd10      	pop	{r4, pc}
 800ccea:	46c0      	nop			; (mov r8, r8)

0800ccec <__aeabi_fcmpgt>:
 800ccec:	b510      	push	{r4, lr}
 800ccee:	f000 fb61 	bl	800d3b4 <__gesf2>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	dc01      	bgt.n	800ccfa <__aeabi_fcmpgt+0xe>
 800ccf6:	2000      	movs	r0, #0
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	2001      	movs	r0, #1
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	46c0      	nop			; (mov r8, r8)

0800cd00 <__aeabi_fcmpge>:
 800cd00:	b510      	push	{r4, lr}
 800cd02:	f000 fb57 	bl	800d3b4 <__gesf2>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	da01      	bge.n	800cd0e <__aeabi_fcmpge+0xe>
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	2001      	movs	r0, #1
 800cd10:	bd10      	pop	{r4, pc}
 800cd12:	46c0      	nop			; (mov r8, r8)

0800cd14 <__aeabi_d2uiz>:
 800cd14:	b570      	push	{r4, r5, r6, lr}
 800cd16:	2200      	movs	r2, #0
 800cd18:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <__aeabi_d2uiz+0x38>)
 800cd1a:	0004      	movs	r4, r0
 800cd1c:	000d      	movs	r5, r1
 800cd1e:	f7ff ffb5 	bl	800cc8c <__aeabi_dcmpge>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d104      	bne.n	800cd30 <__aeabi_d2uiz+0x1c>
 800cd26:	0020      	movs	r0, r4
 800cd28:	0029      	movs	r1, r5
 800cd2a:	f002 fd31 	bl	800f790 <__aeabi_d2iz>
 800cd2e:	bd70      	pop	{r4, r5, r6, pc}
 800cd30:	4b06      	ldr	r3, [pc, #24]	; (800cd4c <__aeabi_d2uiz+0x38>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	0020      	movs	r0, r4
 800cd36:	0029      	movs	r1, r5
 800cd38:	f002 f98a 	bl	800f050 <__aeabi_dsub>
 800cd3c:	f002 fd28 	bl	800f790 <__aeabi_d2iz>
 800cd40:	2380      	movs	r3, #128	; 0x80
 800cd42:	061b      	lsls	r3, r3, #24
 800cd44:	469c      	mov	ip, r3
 800cd46:	4460      	add	r0, ip
 800cd48:	e7f1      	b.n	800cd2e <__aeabi_d2uiz+0x1a>
 800cd4a:	46c0      	nop			; (mov r8, r8)
 800cd4c:	41e00000 	.word	0x41e00000

0800cd50 <__aeabi_d2lz>:
 800cd50:	b570      	push	{r4, r5, r6, lr}
 800cd52:	0005      	movs	r5, r0
 800cd54:	000c      	movs	r4, r1
 800cd56:	2200      	movs	r2, #0
 800cd58:	2300      	movs	r3, #0
 800cd5a:	0028      	movs	r0, r5
 800cd5c:	0021      	movs	r1, r4
 800cd5e:	f7ff ff77 	bl	800cc50 <__aeabi_dcmplt>
 800cd62:	2800      	cmp	r0, #0
 800cd64:	d108      	bne.n	800cd78 <__aeabi_d2lz+0x28>
 800cd66:	0028      	movs	r0, r5
 800cd68:	0021      	movs	r1, r4
 800cd6a:	f000 f80f 	bl	800cd8c <__aeabi_d2ulz>
 800cd6e:	0002      	movs	r2, r0
 800cd70:	000b      	movs	r3, r1
 800cd72:	0010      	movs	r0, r2
 800cd74:	0019      	movs	r1, r3
 800cd76:	bd70      	pop	{r4, r5, r6, pc}
 800cd78:	2380      	movs	r3, #128	; 0x80
 800cd7a:	061b      	lsls	r3, r3, #24
 800cd7c:	18e1      	adds	r1, r4, r3
 800cd7e:	0028      	movs	r0, r5
 800cd80:	f000 f804 	bl	800cd8c <__aeabi_d2ulz>
 800cd84:	2300      	movs	r3, #0
 800cd86:	4242      	negs	r2, r0
 800cd88:	418b      	sbcs	r3, r1
 800cd8a:	e7f2      	b.n	800cd72 <__aeabi_d2lz+0x22>

0800cd8c <__aeabi_d2ulz>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	2200      	movs	r2, #0
 800cd90:	4b0b      	ldr	r3, [pc, #44]	; (800cdc0 <__aeabi_d2ulz+0x34>)
 800cd92:	000d      	movs	r5, r1
 800cd94:	0004      	movs	r4, r0
 800cd96:	f001 fe99 	bl	800eacc <__aeabi_dmul>
 800cd9a:	f7ff ffbb 	bl	800cd14 <__aeabi_d2uiz>
 800cd9e:	0006      	movs	r6, r0
 800cda0:	f002 fd5c 	bl	800f85c <__aeabi_ui2d>
 800cda4:	2200      	movs	r2, #0
 800cda6:	4b07      	ldr	r3, [pc, #28]	; (800cdc4 <__aeabi_d2ulz+0x38>)
 800cda8:	f001 fe90 	bl	800eacc <__aeabi_dmul>
 800cdac:	0002      	movs	r2, r0
 800cdae:	000b      	movs	r3, r1
 800cdb0:	0020      	movs	r0, r4
 800cdb2:	0029      	movs	r1, r5
 800cdb4:	f002 f94c 	bl	800f050 <__aeabi_dsub>
 800cdb8:	f7ff ffac 	bl	800cd14 <__aeabi_d2uiz>
 800cdbc:	0031      	movs	r1, r6
 800cdbe:	bd70      	pop	{r4, r5, r6, pc}
 800cdc0:	3df00000 	.word	0x3df00000
 800cdc4:	41f00000 	.word	0x41f00000

0800cdc8 <__aeabi_l2d>:
 800cdc8:	b570      	push	{r4, r5, r6, lr}
 800cdca:	0006      	movs	r6, r0
 800cdcc:	0008      	movs	r0, r1
 800cdce:	f002 fd15 	bl	800f7fc <__aeabi_i2d>
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	4b06      	ldr	r3, [pc, #24]	; (800cdf0 <__aeabi_l2d+0x28>)
 800cdd6:	f001 fe79 	bl	800eacc <__aeabi_dmul>
 800cdda:	000d      	movs	r5, r1
 800cddc:	0004      	movs	r4, r0
 800cdde:	0030      	movs	r0, r6
 800cde0:	f002 fd3c 	bl	800f85c <__aeabi_ui2d>
 800cde4:	002b      	movs	r3, r5
 800cde6:	0022      	movs	r2, r4
 800cde8:	f000 ff16 	bl	800dc18 <__aeabi_dadd>
 800cdec:	bd70      	pop	{r4, r5, r6, pc}
 800cdee:	46c0      	nop			; (mov r8, r8)
 800cdf0:	41f00000 	.word	0x41f00000

0800cdf4 <__aeabi_fadd>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	4647      	mov	r7, r8
 800cdf8:	46ce      	mov	lr, r9
 800cdfa:	024a      	lsls	r2, r1, #9
 800cdfc:	0243      	lsls	r3, r0, #9
 800cdfe:	0045      	lsls	r5, r0, #1
 800ce00:	0fc4      	lsrs	r4, r0, #31
 800ce02:	0a50      	lsrs	r0, r2, #9
 800ce04:	4680      	mov	r8, r0
 800ce06:	0048      	lsls	r0, r1, #1
 800ce08:	0a5b      	lsrs	r3, r3, #9
 800ce0a:	0e00      	lsrs	r0, r0, #24
 800ce0c:	0992      	lsrs	r2, r2, #6
 800ce0e:	4694      	mov	ip, r2
 800ce10:	b580      	push	{r7, lr}
 800ce12:	001e      	movs	r6, r3
 800ce14:	4681      	mov	r9, r0
 800ce16:	0002      	movs	r2, r0
 800ce18:	0e2d      	lsrs	r5, r5, #24
 800ce1a:	00df      	lsls	r7, r3, #3
 800ce1c:	0fc9      	lsrs	r1, r1, #31
 800ce1e:	428c      	cmp	r4, r1
 800ce20:	d024      	beq.n	800ce6c <__aeabi_fadd+0x78>
 800ce22:	1a28      	subs	r0, r5, r0
 800ce24:	2800      	cmp	r0, #0
 800ce26:	dd0e      	ble.n	800ce46 <__aeabi_fadd+0x52>
 800ce28:	2a00      	cmp	r2, #0
 800ce2a:	d13e      	bne.n	800ceaa <__aeabi_fadd+0xb6>
 800ce2c:	4662      	mov	r2, ip
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	d100      	bne.n	800ce34 <__aeabi_fadd+0x40>
 800ce32:	e0fd      	b.n	800d030 <__aeabi_fadd+0x23c>
 800ce34:	1e42      	subs	r2, r0, #1
 800ce36:	2801      	cmp	r0, #1
 800ce38:	d100      	bne.n	800ce3c <__aeabi_fadd+0x48>
 800ce3a:	e137      	b.n	800d0ac <__aeabi_fadd+0x2b8>
 800ce3c:	28ff      	cmp	r0, #255	; 0xff
 800ce3e:	d100      	bne.n	800ce42 <__aeabi_fadd+0x4e>
 800ce40:	e0a9      	b.n	800cf96 <__aeabi_fadd+0x1a2>
 800ce42:	0010      	movs	r0, r2
 800ce44:	e039      	b.n	800ceba <__aeabi_fadd+0xc6>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	d063      	beq.n	800cf12 <__aeabi_fadd+0x11e>
 800ce4a:	464b      	mov	r3, r9
 800ce4c:	1b52      	subs	r2, r2, r5
 800ce4e:	2d00      	cmp	r5, #0
 800ce50:	d000      	beq.n	800ce54 <__aeabi_fadd+0x60>
 800ce52:	e0e0      	b.n	800d016 <__aeabi_fadd+0x222>
 800ce54:	2f00      	cmp	r7, #0
 800ce56:	d100      	bne.n	800ce5a <__aeabi_fadd+0x66>
 800ce58:	e0ce      	b.n	800cff8 <__aeabi_fadd+0x204>
 800ce5a:	1e53      	subs	r3, r2, #1
 800ce5c:	2a01      	cmp	r2, #1
 800ce5e:	d100      	bne.n	800ce62 <__aeabi_fadd+0x6e>
 800ce60:	e155      	b.n	800d10e <__aeabi_fadd+0x31a>
 800ce62:	2aff      	cmp	r2, #255	; 0xff
 800ce64:	d100      	bne.n	800ce68 <__aeabi_fadd+0x74>
 800ce66:	e094      	b.n	800cf92 <__aeabi_fadd+0x19e>
 800ce68:	001a      	movs	r2, r3
 800ce6a:	e0d9      	b.n	800d020 <__aeabi_fadd+0x22c>
 800ce6c:	1a2a      	subs	r2, r5, r0
 800ce6e:	2a00      	cmp	r2, #0
 800ce70:	dc00      	bgt.n	800ce74 <__aeabi_fadd+0x80>
 800ce72:	e099      	b.n	800cfa8 <__aeabi_fadd+0x1b4>
 800ce74:	2800      	cmp	r0, #0
 800ce76:	d062      	beq.n	800cf3e <__aeabi_fadd+0x14a>
 800ce78:	2dff      	cmp	r5, #255	; 0xff
 800ce7a:	d100      	bne.n	800ce7e <__aeabi_fadd+0x8a>
 800ce7c:	e08b      	b.n	800cf96 <__aeabi_fadd+0x1a2>
 800ce7e:	2380      	movs	r3, #128	; 0x80
 800ce80:	4661      	mov	r1, ip
 800ce82:	04db      	lsls	r3, r3, #19
 800ce84:	4319      	orrs	r1, r3
 800ce86:	468c      	mov	ip, r1
 800ce88:	2a1b      	cmp	r2, #27
 800ce8a:	dc00      	bgt.n	800ce8e <__aeabi_fadd+0x9a>
 800ce8c:	e0d2      	b.n	800d034 <__aeabi_fadd+0x240>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	19db      	adds	r3, r3, r7
 800ce92:	015a      	lsls	r2, r3, #5
 800ce94:	d56a      	bpl.n	800cf6c <__aeabi_fadd+0x178>
 800ce96:	3501      	adds	r5, #1
 800ce98:	2dff      	cmp	r5, #255	; 0xff
 800ce9a:	d05b      	beq.n	800cf54 <__aeabi_fadd+0x160>
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	49a3      	ldr	r1, [pc, #652]	; (800d12c <__aeabi_fadd+0x338>)
 800cea0:	401a      	ands	r2, r3
 800cea2:	085b      	lsrs	r3, r3, #1
 800cea4:	400b      	ands	r3, r1
 800cea6:	4313      	orrs	r3, r2
 800cea8:	e01c      	b.n	800cee4 <__aeabi_fadd+0xf0>
 800ceaa:	2dff      	cmp	r5, #255	; 0xff
 800ceac:	d100      	bne.n	800ceb0 <__aeabi_fadd+0xbc>
 800ceae:	e072      	b.n	800cf96 <__aeabi_fadd+0x1a2>
 800ceb0:	2380      	movs	r3, #128	; 0x80
 800ceb2:	4662      	mov	r2, ip
 800ceb4:	04db      	lsls	r3, r3, #19
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	4694      	mov	ip, r2
 800ceba:	281b      	cmp	r0, #27
 800cebc:	dc00      	bgt.n	800cec0 <__aeabi_fadd+0xcc>
 800cebe:	e090      	b.n	800cfe2 <__aeabi_fadd+0x1ee>
 800cec0:	2301      	movs	r3, #1
 800cec2:	1afb      	subs	r3, r7, r3
 800cec4:	015a      	lsls	r2, r3, #5
 800cec6:	d551      	bpl.n	800cf6c <__aeabi_fadd+0x178>
 800cec8:	019b      	lsls	r3, r3, #6
 800ceca:	099e      	lsrs	r6, r3, #6
 800cecc:	0030      	movs	r0, r6
 800cece:	f002 fdb9 	bl	800fa44 <__clzsi2>
 800ced2:	0033      	movs	r3, r6
 800ced4:	3805      	subs	r0, #5
 800ced6:	4083      	lsls	r3, r0
 800ced8:	4285      	cmp	r5, r0
 800ceda:	dc00      	bgt.n	800cede <__aeabi_fadd+0xea>
 800cedc:	e075      	b.n	800cfca <__aeabi_fadd+0x1d6>
 800cede:	4a94      	ldr	r2, [pc, #592]	; (800d130 <__aeabi_fadd+0x33c>)
 800cee0:	1a2d      	subs	r5, r5, r0
 800cee2:	4013      	ands	r3, r2
 800cee4:	075a      	lsls	r2, r3, #29
 800cee6:	d004      	beq.n	800cef2 <__aeabi_fadd+0xfe>
 800cee8:	220f      	movs	r2, #15
 800ceea:	401a      	ands	r2, r3
 800ceec:	2a04      	cmp	r2, #4
 800ceee:	d000      	beq.n	800cef2 <__aeabi_fadd+0xfe>
 800cef0:	3304      	adds	r3, #4
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	d53c      	bpl.n	800cf70 <__aeabi_fadd+0x17c>
 800cef6:	1c68      	adds	r0, r5, #1
 800cef8:	2dfe      	cmp	r5, #254	; 0xfe
 800cefa:	d02b      	beq.n	800cf54 <__aeabi_fadd+0x160>
 800cefc:	019b      	lsls	r3, r3, #6
 800cefe:	0a5e      	lsrs	r6, r3, #9
 800cf00:	b2c0      	uxtb	r0, r0
 800cf02:	05c0      	lsls	r0, r0, #23
 800cf04:	4330      	orrs	r0, r6
 800cf06:	07e4      	lsls	r4, r4, #31
 800cf08:	4320      	orrs	r0, r4
 800cf0a:	bcc0      	pop	{r6, r7}
 800cf0c:	46b9      	mov	r9, r7
 800cf0e:	46b0      	mov	r8, r6
 800cf10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf12:	20fe      	movs	r0, #254	; 0xfe
 800cf14:	1c6a      	adds	r2, r5, #1
 800cf16:	4210      	tst	r0, r2
 800cf18:	d172      	bne.n	800d000 <__aeabi_fadd+0x20c>
 800cf1a:	2d00      	cmp	r5, #0
 800cf1c:	d000      	beq.n	800cf20 <__aeabi_fadd+0x12c>
 800cf1e:	e0ae      	b.n	800d07e <__aeabi_fadd+0x28a>
 800cf20:	2f00      	cmp	r7, #0
 800cf22:	d100      	bne.n	800cf26 <__aeabi_fadd+0x132>
 800cf24:	e0ec      	b.n	800d100 <__aeabi_fadd+0x30c>
 800cf26:	4663      	mov	r3, ip
 800cf28:	2000      	movs	r0, #0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d0e9      	beq.n	800cf02 <__aeabi_fadd+0x10e>
 800cf2e:	1afb      	subs	r3, r7, r3
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	d400      	bmi.n	800cf36 <__aeabi_fadd+0x142>
 800cf34:	e0f3      	b.n	800d11e <__aeabi_fadd+0x32a>
 800cf36:	4663      	mov	r3, ip
 800cf38:	000c      	movs	r4, r1
 800cf3a:	1bdb      	subs	r3, r3, r7
 800cf3c:	e7d2      	b.n	800cee4 <__aeabi_fadd+0xf0>
 800cf3e:	4661      	mov	r1, ip
 800cf40:	2900      	cmp	r1, #0
 800cf42:	d05b      	beq.n	800cffc <__aeabi_fadd+0x208>
 800cf44:	1e51      	subs	r1, r2, #1
 800cf46:	2a01      	cmp	r2, #1
 800cf48:	d100      	bne.n	800cf4c <__aeabi_fadd+0x158>
 800cf4a:	e0a7      	b.n	800d09c <__aeabi_fadd+0x2a8>
 800cf4c:	2aff      	cmp	r2, #255	; 0xff
 800cf4e:	d022      	beq.n	800cf96 <__aeabi_fadd+0x1a2>
 800cf50:	000a      	movs	r2, r1
 800cf52:	e799      	b.n	800ce88 <__aeabi_fadd+0x94>
 800cf54:	20ff      	movs	r0, #255	; 0xff
 800cf56:	2600      	movs	r6, #0
 800cf58:	e7d3      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800cf5a:	21fe      	movs	r1, #254	; 0xfe
 800cf5c:	1c6a      	adds	r2, r5, #1
 800cf5e:	4211      	tst	r1, r2
 800cf60:	d073      	beq.n	800d04a <__aeabi_fadd+0x256>
 800cf62:	2aff      	cmp	r2, #255	; 0xff
 800cf64:	d0f6      	beq.n	800cf54 <__aeabi_fadd+0x160>
 800cf66:	0015      	movs	r5, r2
 800cf68:	4467      	add	r7, ip
 800cf6a:	087b      	lsrs	r3, r7, #1
 800cf6c:	075a      	lsls	r2, r3, #29
 800cf6e:	d1bb      	bne.n	800cee8 <__aeabi_fadd+0xf4>
 800cf70:	08db      	lsrs	r3, r3, #3
 800cf72:	2dff      	cmp	r5, #255	; 0xff
 800cf74:	d00f      	beq.n	800cf96 <__aeabi_fadd+0x1a2>
 800cf76:	025b      	lsls	r3, r3, #9
 800cf78:	0a5e      	lsrs	r6, r3, #9
 800cf7a:	b2e8      	uxtb	r0, r5
 800cf7c:	e7c1      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800cf7e:	4662      	mov	r2, ip
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	d008      	beq.n	800cf96 <__aeabi_fadd+0x1a2>
 800cf84:	2280      	movs	r2, #128	; 0x80
 800cf86:	03d2      	lsls	r2, r2, #15
 800cf88:	4213      	tst	r3, r2
 800cf8a:	d004      	beq.n	800cf96 <__aeabi_fadd+0x1a2>
 800cf8c:	4640      	mov	r0, r8
 800cf8e:	4210      	tst	r0, r2
 800cf90:	d101      	bne.n	800cf96 <__aeabi_fadd+0x1a2>
 800cf92:	000c      	movs	r4, r1
 800cf94:	4643      	mov	r3, r8
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d0dc      	beq.n	800cf54 <__aeabi_fadd+0x160>
 800cf9a:	2680      	movs	r6, #128	; 0x80
 800cf9c:	03f6      	lsls	r6, r6, #15
 800cf9e:	431e      	orrs	r6, r3
 800cfa0:	0276      	lsls	r6, r6, #9
 800cfa2:	20ff      	movs	r0, #255	; 0xff
 800cfa4:	0a76      	lsrs	r6, r6, #9
 800cfa6:	e7ac      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800cfa8:	2a00      	cmp	r2, #0
 800cfaa:	d0d6      	beq.n	800cf5a <__aeabi_fadd+0x166>
 800cfac:	1b42      	subs	r2, r0, r5
 800cfae:	2d00      	cmp	r5, #0
 800cfb0:	d05c      	beq.n	800d06c <__aeabi_fadd+0x278>
 800cfb2:	28ff      	cmp	r0, #255	; 0xff
 800cfb4:	d0ee      	beq.n	800cf94 <__aeabi_fadd+0x1a0>
 800cfb6:	2380      	movs	r3, #128	; 0x80
 800cfb8:	04db      	lsls	r3, r3, #19
 800cfba:	431f      	orrs	r7, r3
 800cfbc:	2a1b      	cmp	r2, #27
 800cfbe:	dc00      	bgt.n	800cfc2 <__aeabi_fadd+0x1ce>
 800cfc0:	e082      	b.n	800d0c8 <__aeabi_fadd+0x2d4>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	464d      	mov	r5, r9
 800cfc6:	4463      	add	r3, ip
 800cfc8:	e763      	b.n	800ce92 <__aeabi_fadd+0x9e>
 800cfca:	2220      	movs	r2, #32
 800cfcc:	1b40      	subs	r0, r0, r5
 800cfce:	3001      	adds	r0, #1
 800cfd0:	1a12      	subs	r2, r2, r0
 800cfd2:	0019      	movs	r1, r3
 800cfd4:	4093      	lsls	r3, r2
 800cfd6:	40c1      	lsrs	r1, r0
 800cfd8:	1e5a      	subs	r2, r3, #1
 800cfda:	4193      	sbcs	r3, r2
 800cfdc:	2500      	movs	r5, #0
 800cfde:	430b      	orrs	r3, r1
 800cfe0:	e780      	b.n	800cee4 <__aeabi_fadd+0xf0>
 800cfe2:	2320      	movs	r3, #32
 800cfe4:	4661      	mov	r1, ip
 800cfe6:	1a1b      	subs	r3, r3, r0
 800cfe8:	4099      	lsls	r1, r3
 800cfea:	4662      	mov	r2, ip
 800cfec:	000b      	movs	r3, r1
 800cfee:	40c2      	lsrs	r2, r0
 800cff0:	1e59      	subs	r1, r3, #1
 800cff2:	418b      	sbcs	r3, r1
 800cff4:	4313      	orrs	r3, r2
 800cff6:	e764      	b.n	800cec2 <__aeabi_fadd+0xce>
 800cff8:	000c      	movs	r4, r1
 800cffa:	4643      	mov	r3, r8
 800cffc:	0015      	movs	r5, r2
 800cffe:	e7b8      	b.n	800cf72 <__aeabi_fadd+0x17e>
 800d000:	4663      	mov	r3, ip
 800d002:	1afe      	subs	r6, r7, r3
 800d004:	0173      	lsls	r3, r6, #5
 800d006:	d445      	bmi.n	800d094 <__aeabi_fadd+0x2a0>
 800d008:	2e00      	cmp	r6, #0
 800d00a:	d000      	beq.n	800d00e <__aeabi_fadd+0x21a>
 800d00c:	e75e      	b.n	800cecc <__aeabi_fadd+0xd8>
 800d00e:	2400      	movs	r4, #0
 800d010:	2000      	movs	r0, #0
 800d012:	2600      	movs	r6, #0
 800d014:	e775      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800d016:	2bff      	cmp	r3, #255	; 0xff
 800d018:	d0bb      	beq.n	800cf92 <__aeabi_fadd+0x19e>
 800d01a:	2380      	movs	r3, #128	; 0x80
 800d01c:	04db      	lsls	r3, r3, #19
 800d01e:	431f      	orrs	r7, r3
 800d020:	2a1b      	cmp	r2, #27
 800d022:	dd47      	ble.n	800d0b4 <__aeabi_fadd+0x2c0>
 800d024:	2301      	movs	r3, #1
 800d026:	4662      	mov	r2, ip
 800d028:	000c      	movs	r4, r1
 800d02a:	464d      	mov	r5, r9
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	e749      	b.n	800cec4 <__aeabi_fadd+0xd0>
 800d030:	0005      	movs	r5, r0
 800d032:	e79e      	b.n	800cf72 <__aeabi_fadd+0x17e>
 800d034:	4661      	mov	r1, ip
 800d036:	2320      	movs	r3, #32
 800d038:	40d1      	lsrs	r1, r2
 800d03a:	1a9b      	subs	r3, r3, r2
 800d03c:	4662      	mov	r2, ip
 800d03e:	409a      	lsls	r2, r3
 800d040:	0013      	movs	r3, r2
 800d042:	1e5a      	subs	r2, r3, #1
 800d044:	4193      	sbcs	r3, r2
 800d046:	430b      	orrs	r3, r1
 800d048:	e722      	b.n	800ce90 <__aeabi_fadd+0x9c>
 800d04a:	2d00      	cmp	r5, #0
 800d04c:	d146      	bne.n	800d0dc <__aeabi_fadd+0x2e8>
 800d04e:	2f00      	cmp	r7, #0
 800d050:	d062      	beq.n	800d118 <__aeabi_fadd+0x324>
 800d052:	4663      	mov	r3, ip
 800d054:	2000      	movs	r0, #0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d100      	bne.n	800d05c <__aeabi_fadd+0x268>
 800d05a:	e752      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800d05c:	003b      	movs	r3, r7
 800d05e:	4463      	add	r3, ip
 800d060:	015a      	lsls	r2, r3, #5
 800d062:	d583      	bpl.n	800cf6c <__aeabi_fadd+0x178>
 800d064:	4a32      	ldr	r2, [pc, #200]	; (800d130 <__aeabi_fadd+0x33c>)
 800d066:	3501      	adds	r5, #1
 800d068:	4013      	ands	r3, r2
 800d06a:	e77f      	b.n	800cf6c <__aeabi_fadd+0x178>
 800d06c:	2f00      	cmp	r7, #0
 800d06e:	d0c4      	beq.n	800cffa <__aeabi_fadd+0x206>
 800d070:	1e53      	subs	r3, r2, #1
 800d072:	2a01      	cmp	r2, #1
 800d074:	d012      	beq.n	800d09c <__aeabi_fadd+0x2a8>
 800d076:	2aff      	cmp	r2, #255	; 0xff
 800d078:	d08c      	beq.n	800cf94 <__aeabi_fadd+0x1a0>
 800d07a:	001a      	movs	r2, r3
 800d07c:	e79e      	b.n	800cfbc <__aeabi_fadd+0x1c8>
 800d07e:	2f00      	cmp	r7, #0
 800d080:	d000      	beq.n	800d084 <__aeabi_fadd+0x290>
 800d082:	e77c      	b.n	800cf7e <__aeabi_fadd+0x18a>
 800d084:	4663      	mov	r3, ip
 800d086:	2b00      	cmp	r3, #0
 800d088:	d183      	bne.n	800cf92 <__aeabi_fadd+0x19e>
 800d08a:	2680      	movs	r6, #128	; 0x80
 800d08c:	2400      	movs	r4, #0
 800d08e:	20ff      	movs	r0, #255	; 0xff
 800d090:	03f6      	lsls	r6, r6, #15
 800d092:	e736      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800d094:	4663      	mov	r3, ip
 800d096:	000c      	movs	r4, r1
 800d098:	1bde      	subs	r6, r3, r7
 800d09a:	e717      	b.n	800cecc <__aeabi_fadd+0xd8>
 800d09c:	003b      	movs	r3, r7
 800d09e:	4463      	add	r3, ip
 800d0a0:	2501      	movs	r5, #1
 800d0a2:	015a      	lsls	r2, r3, #5
 800d0a4:	d400      	bmi.n	800d0a8 <__aeabi_fadd+0x2b4>
 800d0a6:	e761      	b.n	800cf6c <__aeabi_fadd+0x178>
 800d0a8:	2502      	movs	r5, #2
 800d0aa:	e6f7      	b.n	800ce9c <__aeabi_fadd+0xa8>
 800d0ac:	4663      	mov	r3, ip
 800d0ae:	2501      	movs	r5, #1
 800d0b0:	1afb      	subs	r3, r7, r3
 800d0b2:	e707      	b.n	800cec4 <__aeabi_fadd+0xd0>
 800d0b4:	2320      	movs	r3, #32
 800d0b6:	1a9b      	subs	r3, r3, r2
 800d0b8:	0038      	movs	r0, r7
 800d0ba:	409f      	lsls	r7, r3
 800d0bc:	003b      	movs	r3, r7
 800d0be:	40d0      	lsrs	r0, r2
 800d0c0:	1e5a      	subs	r2, r3, #1
 800d0c2:	4193      	sbcs	r3, r2
 800d0c4:	4303      	orrs	r3, r0
 800d0c6:	e7ae      	b.n	800d026 <__aeabi_fadd+0x232>
 800d0c8:	2320      	movs	r3, #32
 800d0ca:	1a9b      	subs	r3, r3, r2
 800d0cc:	0039      	movs	r1, r7
 800d0ce:	409f      	lsls	r7, r3
 800d0d0:	003b      	movs	r3, r7
 800d0d2:	40d1      	lsrs	r1, r2
 800d0d4:	1e5a      	subs	r2, r3, #1
 800d0d6:	4193      	sbcs	r3, r2
 800d0d8:	430b      	orrs	r3, r1
 800d0da:	e773      	b.n	800cfc4 <__aeabi_fadd+0x1d0>
 800d0dc:	2f00      	cmp	r7, #0
 800d0de:	d100      	bne.n	800d0e2 <__aeabi_fadd+0x2ee>
 800d0e0:	e758      	b.n	800cf94 <__aeabi_fadd+0x1a0>
 800d0e2:	4662      	mov	r2, ip
 800d0e4:	2a00      	cmp	r2, #0
 800d0e6:	d100      	bne.n	800d0ea <__aeabi_fadd+0x2f6>
 800d0e8:	e755      	b.n	800cf96 <__aeabi_fadd+0x1a2>
 800d0ea:	2280      	movs	r2, #128	; 0x80
 800d0ec:	03d2      	lsls	r2, r2, #15
 800d0ee:	4213      	tst	r3, r2
 800d0f0:	d100      	bne.n	800d0f4 <__aeabi_fadd+0x300>
 800d0f2:	e750      	b.n	800cf96 <__aeabi_fadd+0x1a2>
 800d0f4:	4641      	mov	r1, r8
 800d0f6:	4211      	tst	r1, r2
 800d0f8:	d000      	beq.n	800d0fc <__aeabi_fadd+0x308>
 800d0fa:	e74c      	b.n	800cf96 <__aeabi_fadd+0x1a2>
 800d0fc:	4643      	mov	r3, r8
 800d0fe:	e74a      	b.n	800cf96 <__aeabi_fadd+0x1a2>
 800d100:	4663      	mov	r3, ip
 800d102:	2b00      	cmp	r3, #0
 800d104:	d083      	beq.n	800d00e <__aeabi_fadd+0x21a>
 800d106:	000c      	movs	r4, r1
 800d108:	4646      	mov	r6, r8
 800d10a:	2000      	movs	r0, #0
 800d10c:	e6f9      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800d10e:	4663      	mov	r3, ip
 800d110:	000c      	movs	r4, r1
 800d112:	1bdb      	subs	r3, r3, r7
 800d114:	3501      	adds	r5, #1
 800d116:	e6d5      	b.n	800cec4 <__aeabi_fadd+0xd0>
 800d118:	4646      	mov	r6, r8
 800d11a:	2000      	movs	r0, #0
 800d11c:	e6f1      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d000      	beq.n	800d124 <__aeabi_fadd+0x330>
 800d122:	e723      	b.n	800cf6c <__aeabi_fadd+0x178>
 800d124:	2400      	movs	r4, #0
 800d126:	2600      	movs	r6, #0
 800d128:	e6eb      	b.n	800cf02 <__aeabi_fadd+0x10e>
 800d12a:	46c0      	nop			; (mov r8, r8)
 800d12c:	7dffffff 	.word	0x7dffffff
 800d130:	fbffffff 	.word	0xfbffffff

0800d134 <__aeabi_fdiv>:
 800d134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d136:	464f      	mov	r7, r9
 800d138:	4646      	mov	r6, r8
 800d13a:	46d6      	mov	lr, sl
 800d13c:	0245      	lsls	r5, r0, #9
 800d13e:	b5c0      	push	{r6, r7, lr}
 800d140:	0047      	lsls	r7, r0, #1
 800d142:	1c0c      	adds	r4, r1, #0
 800d144:	0a6d      	lsrs	r5, r5, #9
 800d146:	0e3f      	lsrs	r7, r7, #24
 800d148:	0fc6      	lsrs	r6, r0, #31
 800d14a:	2f00      	cmp	r7, #0
 800d14c:	d100      	bne.n	800d150 <__aeabi_fdiv+0x1c>
 800d14e:	e06f      	b.n	800d230 <__aeabi_fdiv+0xfc>
 800d150:	2fff      	cmp	r7, #255	; 0xff
 800d152:	d100      	bne.n	800d156 <__aeabi_fdiv+0x22>
 800d154:	e074      	b.n	800d240 <__aeabi_fdiv+0x10c>
 800d156:	2300      	movs	r3, #0
 800d158:	2280      	movs	r2, #128	; 0x80
 800d15a:	4699      	mov	r9, r3
 800d15c:	469a      	mov	sl, r3
 800d15e:	00ed      	lsls	r5, r5, #3
 800d160:	04d2      	lsls	r2, r2, #19
 800d162:	4315      	orrs	r5, r2
 800d164:	3f7f      	subs	r7, #127	; 0x7f
 800d166:	0263      	lsls	r3, r4, #9
 800d168:	0a5b      	lsrs	r3, r3, #9
 800d16a:	4698      	mov	r8, r3
 800d16c:	0063      	lsls	r3, r4, #1
 800d16e:	0e1b      	lsrs	r3, r3, #24
 800d170:	0fe4      	lsrs	r4, r4, #31
 800d172:	2b00      	cmp	r3, #0
 800d174:	d04d      	beq.n	800d212 <__aeabi_fdiv+0xde>
 800d176:	2bff      	cmp	r3, #255	; 0xff
 800d178:	d045      	beq.n	800d206 <__aeabi_fdiv+0xd2>
 800d17a:	4642      	mov	r2, r8
 800d17c:	2180      	movs	r1, #128	; 0x80
 800d17e:	00d2      	lsls	r2, r2, #3
 800d180:	04c9      	lsls	r1, r1, #19
 800d182:	4311      	orrs	r1, r2
 800d184:	4688      	mov	r8, r1
 800d186:	2200      	movs	r2, #0
 800d188:	3b7f      	subs	r3, #127	; 0x7f
 800d18a:	0031      	movs	r1, r6
 800d18c:	1aff      	subs	r7, r7, r3
 800d18e:	464b      	mov	r3, r9
 800d190:	4061      	eors	r1, r4
 800d192:	b2c9      	uxtb	r1, r1
 800d194:	2b0f      	cmp	r3, #15
 800d196:	d900      	bls.n	800d19a <__aeabi_fdiv+0x66>
 800d198:	e0b8      	b.n	800d30c <__aeabi_fdiv+0x1d8>
 800d19a:	4870      	ldr	r0, [pc, #448]	; (800d35c <__aeabi_fdiv+0x228>)
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	58c3      	ldr	r3, [r0, r3]
 800d1a0:	469f      	mov	pc, r3
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	4698      	mov	r8, r3
 800d1a6:	0026      	movs	r6, r4
 800d1a8:	4645      	mov	r5, r8
 800d1aa:	4692      	mov	sl, r2
 800d1ac:	4653      	mov	r3, sl
 800d1ae:	2b02      	cmp	r3, #2
 800d1b0:	d100      	bne.n	800d1b4 <__aeabi_fdiv+0x80>
 800d1b2:	e08d      	b.n	800d2d0 <__aeabi_fdiv+0x19c>
 800d1b4:	2b03      	cmp	r3, #3
 800d1b6:	d100      	bne.n	800d1ba <__aeabi_fdiv+0x86>
 800d1b8:	e0a1      	b.n	800d2fe <__aeabi_fdiv+0x1ca>
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d018      	beq.n	800d1f0 <__aeabi_fdiv+0xbc>
 800d1be:	003b      	movs	r3, r7
 800d1c0:	337f      	adds	r3, #127	; 0x7f
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	dd6d      	ble.n	800d2a2 <__aeabi_fdiv+0x16e>
 800d1c6:	076a      	lsls	r2, r5, #29
 800d1c8:	d004      	beq.n	800d1d4 <__aeabi_fdiv+0xa0>
 800d1ca:	220f      	movs	r2, #15
 800d1cc:	402a      	ands	r2, r5
 800d1ce:	2a04      	cmp	r2, #4
 800d1d0:	d000      	beq.n	800d1d4 <__aeabi_fdiv+0xa0>
 800d1d2:	3504      	adds	r5, #4
 800d1d4:	012a      	lsls	r2, r5, #4
 800d1d6:	d503      	bpl.n	800d1e0 <__aeabi_fdiv+0xac>
 800d1d8:	4b61      	ldr	r3, [pc, #388]	; (800d360 <__aeabi_fdiv+0x22c>)
 800d1da:	401d      	ands	r5, r3
 800d1dc:	003b      	movs	r3, r7
 800d1de:	3380      	adds	r3, #128	; 0x80
 800d1e0:	2bfe      	cmp	r3, #254	; 0xfe
 800d1e2:	dd00      	ble.n	800d1e6 <__aeabi_fdiv+0xb2>
 800d1e4:	e074      	b.n	800d2d0 <__aeabi_fdiv+0x19c>
 800d1e6:	01aa      	lsls	r2, r5, #6
 800d1e8:	0a52      	lsrs	r2, r2, #9
 800d1ea:	b2d8      	uxtb	r0, r3
 800d1ec:	e002      	b.n	800d1f4 <__aeabi_fdiv+0xc0>
 800d1ee:	000e      	movs	r6, r1
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	05c0      	lsls	r0, r0, #23
 800d1f6:	07f6      	lsls	r6, r6, #31
 800d1f8:	4310      	orrs	r0, r2
 800d1fa:	4330      	orrs	r0, r6
 800d1fc:	bce0      	pop	{r5, r6, r7}
 800d1fe:	46ba      	mov	sl, r7
 800d200:	46b1      	mov	r9, r6
 800d202:	46a8      	mov	r8, r5
 800d204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d206:	4643      	mov	r3, r8
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d13f      	bne.n	800d28c <__aeabi_fdiv+0x158>
 800d20c:	2202      	movs	r2, #2
 800d20e:	3fff      	subs	r7, #255	; 0xff
 800d210:	e003      	b.n	800d21a <__aeabi_fdiv+0xe6>
 800d212:	4643      	mov	r3, r8
 800d214:	2b00      	cmp	r3, #0
 800d216:	d12d      	bne.n	800d274 <__aeabi_fdiv+0x140>
 800d218:	2201      	movs	r2, #1
 800d21a:	0031      	movs	r1, r6
 800d21c:	464b      	mov	r3, r9
 800d21e:	4061      	eors	r1, r4
 800d220:	b2c9      	uxtb	r1, r1
 800d222:	4313      	orrs	r3, r2
 800d224:	2b0f      	cmp	r3, #15
 800d226:	d838      	bhi.n	800d29a <__aeabi_fdiv+0x166>
 800d228:	484e      	ldr	r0, [pc, #312]	; (800d364 <__aeabi_fdiv+0x230>)
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	58c3      	ldr	r3, [r0, r3]
 800d22e:	469f      	mov	pc, r3
 800d230:	2d00      	cmp	r5, #0
 800d232:	d113      	bne.n	800d25c <__aeabi_fdiv+0x128>
 800d234:	2304      	movs	r3, #4
 800d236:	4699      	mov	r9, r3
 800d238:	3b03      	subs	r3, #3
 800d23a:	2700      	movs	r7, #0
 800d23c:	469a      	mov	sl, r3
 800d23e:	e792      	b.n	800d166 <__aeabi_fdiv+0x32>
 800d240:	2d00      	cmp	r5, #0
 800d242:	d105      	bne.n	800d250 <__aeabi_fdiv+0x11c>
 800d244:	2308      	movs	r3, #8
 800d246:	4699      	mov	r9, r3
 800d248:	3b06      	subs	r3, #6
 800d24a:	27ff      	movs	r7, #255	; 0xff
 800d24c:	469a      	mov	sl, r3
 800d24e:	e78a      	b.n	800d166 <__aeabi_fdiv+0x32>
 800d250:	230c      	movs	r3, #12
 800d252:	4699      	mov	r9, r3
 800d254:	3b09      	subs	r3, #9
 800d256:	27ff      	movs	r7, #255	; 0xff
 800d258:	469a      	mov	sl, r3
 800d25a:	e784      	b.n	800d166 <__aeabi_fdiv+0x32>
 800d25c:	0028      	movs	r0, r5
 800d25e:	f002 fbf1 	bl	800fa44 <__clzsi2>
 800d262:	2776      	movs	r7, #118	; 0x76
 800d264:	1f43      	subs	r3, r0, #5
 800d266:	409d      	lsls	r5, r3
 800d268:	2300      	movs	r3, #0
 800d26a:	427f      	negs	r7, r7
 800d26c:	4699      	mov	r9, r3
 800d26e:	469a      	mov	sl, r3
 800d270:	1a3f      	subs	r7, r7, r0
 800d272:	e778      	b.n	800d166 <__aeabi_fdiv+0x32>
 800d274:	4640      	mov	r0, r8
 800d276:	f002 fbe5 	bl	800fa44 <__clzsi2>
 800d27a:	4642      	mov	r2, r8
 800d27c:	1f43      	subs	r3, r0, #5
 800d27e:	409a      	lsls	r2, r3
 800d280:	2376      	movs	r3, #118	; 0x76
 800d282:	425b      	negs	r3, r3
 800d284:	4690      	mov	r8, r2
 800d286:	1a1b      	subs	r3, r3, r0
 800d288:	2200      	movs	r2, #0
 800d28a:	e77e      	b.n	800d18a <__aeabi_fdiv+0x56>
 800d28c:	2303      	movs	r3, #3
 800d28e:	464a      	mov	r2, r9
 800d290:	431a      	orrs	r2, r3
 800d292:	4691      	mov	r9, r2
 800d294:	33fc      	adds	r3, #252	; 0xfc
 800d296:	2203      	movs	r2, #3
 800d298:	e777      	b.n	800d18a <__aeabi_fdiv+0x56>
 800d29a:	000e      	movs	r6, r1
 800d29c:	20ff      	movs	r0, #255	; 0xff
 800d29e:	2200      	movs	r2, #0
 800d2a0:	e7a8      	b.n	800d1f4 <__aeabi_fdiv+0xc0>
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	1ad3      	subs	r3, r2, r3
 800d2a6:	2b1b      	cmp	r3, #27
 800d2a8:	dca2      	bgt.n	800d1f0 <__aeabi_fdiv+0xbc>
 800d2aa:	379e      	adds	r7, #158	; 0x9e
 800d2ac:	002a      	movs	r2, r5
 800d2ae:	40bd      	lsls	r5, r7
 800d2b0:	40da      	lsrs	r2, r3
 800d2b2:	1e6b      	subs	r3, r5, #1
 800d2b4:	419d      	sbcs	r5, r3
 800d2b6:	4315      	orrs	r5, r2
 800d2b8:	076a      	lsls	r2, r5, #29
 800d2ba:	d004      	beq.n	800d2c6 <__aeabi_fdiv+0x192>
 800d2bc:	220f      	movs	r2, #15
 800d2be:	402a      	ands	r2, r5
 800d2c0:	2a04      	cmp	r2, #4
 800d2c2:	d000      	beq.n	800d2c6 <__aeabi_fdiv+0x192>
 800d2c4:	3504      	adds	r5, #4
 800d2c6:	016a      	lsls	r2, r5, #5
 800d2c8:	d544      	bpl.n	800d354 <__aeabi_fdiv+0x220>
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	e791      	b.n	800d1f4 <__aeabi_fdiv+0xc0>
 800d2d0:	20ff      	movs	r0, #255	; 0xff
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	e78e      	b.n	800d1f4 <__aeabi_fdiv+0xc0>
 800d2d6:	2280      	movs	r2, #128	; 0x80
 800d2d8:	2600      	movs	r6, #0
 800d2da:	20ff      	movs	r0, #255	; 0xff
 800d2dc:	03d2      	lsls	r2, r2, #15
 800d2de:	e789      	b.n	800d1f4 <__aeabi_fdiv+0xc0>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	4698      	mov	r8, r3
 800d2e4:	2280      	movs	r2, #128	; 0x80
 800d2e6:	03d2      	lsls	r2, r2, #15
 800d2e8:	4215      	tst	r5, r2
 800d2ea:	d008      	beq.n	800d2fe <__aeabi_fdiv+0x1ca>
 800d2ec:	4643      	mov	r3, r8
 800d2ee:	4213      	tst	r3, r2
 800d2f0:	d105      	bne.n	800d2fe <__aeabi_fdiv+0x1ca>
 800d2f2:	431a      	orrs	r2, r3
 800d2f4:	0252      	lsls	r2, r2, #9
 800d2f6:	0026      	movs	r6, r4
 800d2f8:	20ff      	movs	r0, #255	; 0xff
 800d2fa:	0a52      	lsrs	r2, r2, #9
 800d2fc:	e77a      	b.n	800d1f4 <__aeabi_fdiv+0xc0>
 800d2fe:	2280      	movs	r2, #128	; 0x80
 800d300:	03d2      	lsls	r2, r2, #15
 800d302:	432a      	orrs	r2, r5
 800d304:	0252      	lsls	r2, r2, #9
 800d306:	20ff      	movs	r0, #255	; 0xff
 800d308:	0a52      	lsrs	r2, r2, #9
 800d30a:	e773      	b.n	800d1f4 <__aeabi_fdiv+0xc0>
 800d30c:	4642      	mov	r2, r8
 800d30e:	016b      	lsls	r3, r5, #5
 800d310:	0155      	lsls	r5, r2, #5
 800d312:	42ab      	cmp	r3, r5
 800d314:	d21a      	bcs.n	800d34c <__aeabi_fdiv+0x218>
 800d316:	201b      	movs	r0, #27
 800d318:	2200      	movs	r2, #0
 800d31a:	3f01      	subs	r7, #1
 800d31c:	2601      	movs	r6, #1
 800d31e:	001c      	movs	r4, r3
 800d320:	0052      	lsls	r2, r2, #1
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	2c00      	cmp	r4, #0
 800d326:	db01      	blt.n	800d32c <__aeabi_fdiv+0x1f8>
 800d328:	429d      	cmp	r5, r3
 800d32a:	d801      	bhi.n	800d330 <__aeabi_fdiv+0x1fc>
 800d32c:	1b5b      	subs	r3, r3, r5
 800d32e:	4332      	orrs	r2, r6
 800d330:	3801      	subs	r0, #1
 800d332:	2800      	cmp	r0, #0
 800d334:	d1f3      	bne.n	800d31e <__aeabi_fdiv+0x1ea>
 800d336:	1e58      	subs	r0, r3, #1
 800d338:	4183      	sbcs	r3, r0
 800d33a:	4313      	orrs	r3, r2
 800d33c:	001d      	movs	r5, r3
 800d33e:	003b      	movs	r3, r7
 800d340:	337f      	adds	r3, #127	; 0x7f
 800d342:	000e      	movs	r6, r1
 800d344:	2b00      	cmp	r3, #0
 800d346:	dd00      	ble.n	800d34a <__aeabi_fdiv+0x216>
 800d348:	e73d      	b.n	800d1c6 <__aeabi_fdiv+0x92>
 800d34a:	e7aa      	b.n	800d2a2 <__aeabi_fdiv+0x16e>
 800d34c:	201a      	movs	r0, #26
 800d34e:	2201      	movs	r2, #1
 800d350:	1b5b      	subs	r3, r3, r5
 800d352:	e7e3      	b.n	800d31c <__aeabi_fdiv+0x1e8>
 800d354:	01aa      	lsls	r2, r5, #6
 800d356:	2000      	movs	r0, #0
 800d358:	0a52      	lsrs	r2, r2, #9
 800d35a:	e74b      	b.n	800d1f4 <__aeabi_fdiv+0xc0>
 800d35c:	0801cf74 	.word	0x0801cf74
 800d360:	f7ffffff 	.word	0xf7ffffff
 800d364:	0801cfb4 	.word	0x0801cfb4

0800d368 <__eqsf2>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	0042      	lsls	r2, r0, #1
 800d36c:	0245      	lsls	r5, r0, #9
 800d36e:	024e      	lsls	r6, r1, #9
 800d370:	004c      	lsls	r4, r1, #1
 800d372:	0fc3      	lsrs	r3, r0, #31
 800d374:	0a6d      	lsrs	r5, r5, #9
 800d376:	2001      	movs	r0, #1
 800d378:	0e12      	lsrs	r2, r2, #24
 800d37a:	0a76      	lsrs	r6, r6, #9
 800d37c:	0e24      	lsrs	r4, r4, #24
 800d37e:	0fc9      	lsrs	r1, r1, #31
 800d380:	2aff      	cmp	r2, #255	; 0xff
 800d382:	d006      	beq.n	800d392 <__eqsf2+0x2a>
 800d384:	2cff      	cmp	r4, #255	; 0xff
 800d386:	d003      	beq.n	800d390 <__eqsf2+0x28>
 800d388:	42a2      	cmp	r2, r4
 800d38a:	d101      	bne.n	800d390 <__eqsf2+0x28>
 800d38c:	42b5      	cmp	r5, r6
 800d38e:	d006      	beq.n	800d39e <__eqsf2+0x36>
 800d390:	bd70      	pop	{r4, r5, r6, pc}
 800d392:	2d00      	cmp	r5, #0
 800d394:	d1fc      	bne.n	800d390 <__eqsf2+0x28>
 800d396:	2cff      	cmp	r4, #255	; 0xff
 800d398:	d1fa      	bne.n	800d390 <__eqsf2+0x28>
 800d39a:	2e00      	cmp	r6, #0
 800d39c:	d1f8      	bne.n	800d390 <__eqsf2+0x28>
 800d39e:	428b      	cmp	r3, r1
 800d3a0:	d006      	beq.n	800d3b0 <__eqsf2+0x48>
 800d3a2:	2001      	movs	r0, #1
 800d3a4:	2a00      	cmp	r2, #0
 800d3a6:	d1f3      	bne.n	800d390 <__eqsf2+0x28>
 800d3a8:	0028      	movs	r0, r5
 800d3aa:	1e43      	subs	r3, r0, #1
 800d3ac:	4198      	sbcs	r0, r3
 800d3ae:	e7ef      	b.n	800d390 <__eqsf2+0x28>
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	e7ed      	b.n	800d390 <__eqsf2+0x28>

0800d3b4 <__gesf2>:
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	0042      	lsls	r2, r0, #1
 800d3b8:	0245      	lsls	r5, r0, #9
 800d3ba:	024e      	lsls	r6, r1, #9
 800d3bc:	004c      	lsls	r4, r1, #1
 800d3be:	0fc3      	lsrs	r3, r0, #31
 800d3c0:	0a6d      	lsrs	r5, r5, #9
 800d3c2:	0e12      	lsrs	r2, r2, #24
 800d3c4:	0a76      	lsrs	r6, r6, #9
 800d3c6:	0e24      	lsrs	r4, r4, #24
 800d3c8:	0fc8      	lsrs	r0, r1, #31
 800d3ca:	2aff      	cmp	r2, #255	; 0xff
 800d3cc:	d01b      	beq.n	800d406 <__gesf2+0x52>
 800d3ce:	2cff      	cmp	r4, #255	; 0xff
 800d3d0:	d00e      	beq.n	800d3f0 <__gesf2+0x3c>
 800d3d2:	2a00      	cmp	r2, #0
 800d3d4:	d11b      	bne.n	800d40e <__gesf2+0x5a>
 800d3d6:	2c00      	cmp	r4, #0
 800d3d8:	d101      	bne.n	800d3de <__gesf2+0x2a>
 800d3da:	2e00      	cmp	r6, #0
 800d3dc:	d01c      	beq.n	800d418 <__gesf2+0x64>
 800d3de:	2d00      	cmp	r5, #0
 800d3e0:	d00c      	beq.n	800d3fc <__gesf2+0x48>
 800d3e2:	4283      	cmp	r3, r0
 800d3e4:	d01c      	beq.n	800d420 <__gesf2+0x6c>
 800d3e6:	2102      	movs	r1, #2
 800d3e8:	1e58      	subs	r0, r3, #1
 800d3ea:	4008      	ands	r0, r1
 800d3ec:	3801      	subs	r0, #1
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}
 800d3f0:	2e00      	cmp	r6, #0
 800d3f2:	d122      	bne.n	800d43a <__gesf2+0x86>
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	d1f4      	bne.n	800d3e2 <__gesf2+0x2e>
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	d1f2      	bne.n	800d3e2 <__gesf2+0x2e>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d1f6      	bne.n	800d3ee <__gesf2+0x3a>
 800d400:	2001      	movs	r0, #1
 800d402:	4240      	negs	r0, r0
 800d404:	e7f3      	b.n	800d3ee <__gesf2+0x3a>
 800d406:	2d00      	cmp	r5, #0
 800d408:	d117      	bne.n	800d43a <__gesf2+0x86>
 800d40a:	2cff      	cmp	r4, #255	; 0xff
 800d40c:	d0f0      	beq.n	800d3f0 <__gesf2+0x3c>
 800d40e:	2c00      	cmp	r4, #0
 800d410:	d1e7      	bne.n	800d3e2 <__gesf2+0x2e>
 800d412:	2e00      	cmp	r6, #0
 800d414:	d1e5      	bne.n	800d3e2 <__gesf2+0x2e>
 800d416:	e7e6      	b.n	800d3e6 <__gesf2+0x32>
 800d418:	2000      	movs	r0, #0
 800d41a:	2d00      	cmp	r5, #0
 800d41c:	d0e7      	beq.n	800d3ee <__gesf2+0x3a>
 800d41e:	e7e2      	b.n	800d3e6 <__gesf2+0x32>
 800d420:	42a2      	cmp	r2, r4
 800d422:	dc05      	bgt.n	800d430 <__gesf2+0x7c>
 800d424:	dbea      	blt.n	800d3fc <__gesf2+0x48>
 800d426:	42b5      	cmp	r5, r6
 800d428:	d802      	bhi.n	800d430 <__gesf2+0x7c>
 800d42a:	d3e7      	bcc.n	800d3fc <__gesf2+0x48>
 800d42c:	2000      	movs	r0, #0
 800d42e:	e7de      	b.n	800d3ee <__gesf2+0x3a>
 800d430:	4243      	negs	r3, r0
 800d432:	4158      	adcs	r0, r3
 800d434:	0040      	lsls	r0, r0, #1
 800d436:	3801      	subs	r0, #1
 800d438:	e7d9      	b.n	800d3ee <__gesf2+0x3a>
 800d43a:	2002      	movs	r0, #2
 800d43c:	4240      	negs	r0, r0
 800d43e:	e7d6      	b.n	800d3ee <__gesf2+0x3a>

0800d440 <__lesf2>:
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	0042      	lsls	r2, r0, #1
 800d444:	0245      	lsls	r5, r0, #9
 800d446:	024e      	lsls	r6, r1, #9
 800d448:	004c      	lsls	r4, r1, #1
 800d44a:	0fc3      	lsrs	r3, r0, #31
 800d44c:	0a6d      	lsrs	r5, r5, #9
 800d44e:	0e12      	lsrs	r2, r2, #24
 800d450:	0a76      	lsrs	r6, r6, #9
 800d452:	0e24      	lsrs	r4, r4, #24
 800d454:	0fc8      	lsrs	r0, r1, #31
 800d456:	2aff      	cmp	r2, #255	; 0xff
 800d458:	d00b      	beq.n	800d472 <__lesf2+0x32>
 800d45a:	2cff      	cmp	r4, #255	; 0xff
 800d45c:	d00d      	beq.n	800d47a <__lesf2+0x3a>
 800d45e:	2a00      	cmp	r2, #0
 800d460:	d11f      	bne.n	800d4a2 <__lesf2+0x62>
 800d462:	2c00      	cmp	r4, #0
 800d464:	d116      	bne.n	800d494 <__lesf2+0x54>
 800d466:	2e00      	cmp	r6, #0
 800d468:	d114      	bne.n	800d494 <__lesf2+0x54>
 800d46a:	2000      	movs	r0, #0
 800d46c:	2d00      	cmp	r5, #0
 800d46e:	d010      	beq.n	800d492 <__lesf2+0x52>
 800d470:	e009      	b.n	800d486 <__lesf2+0x46>
 800d472:	2d00      	cmp	r5, #0
 800d474:	d10c      	bne.n	800d490 <__lesf2+0x50>
 800d476:	2cff      	cmp	r4, #255	; 0xff
 800d478:	d113      	bne.n	800d4a2 <__lesf2+0x62>
 800d47a:	2e00      	cmp	r6, #0
 800d47c:	d108      	bne.n	800d490 <__lesf2+0x50>
 800d47e:	2a00      	cmp	r2, #0
 800d480:	d008      	beq.n	800d494 <__lesf2+0x54>
 800d482:	4283      	cmp	r3, r0
 800d484:	d012      	beq.n	800d4ac <__lesf2+0x6c>
 800d486:	2102      	movs	r1, #2
 800d488:	1e58      	subs	r0, r3, #1
 800d48a:	4008      	ands	r0, r1
 800d48c:	3801      	subs	r0, #1
 800d48e:	e000      	b.n	800d492 <__lesf2+0x52>
 800d490:	2002      	movs	r0, #2
 800d492:	bd70      	pop	{r4, r5, r6, pc}
 800d494:	2d00      	cmp	r5, #0
 800d496:	d1f4      	bne.n	800d482 <__lesf2+0x42>
 800d498:	2800      	cmp	r0, #0
 800d49a:	d1fa      	bne.n	800d492 <__lesf2+0x52>
 800d49c:	2001      	movs	r0, #1
 800d49e:	4240      	negs	r0, r0
 800d4a0:	e7f7      	b.n	800d492 <__lesf2+0x52>
 800d4a2:	2c00      	cmp	r4, #0
 800d4a4:	d1ed      	bne.n	800d482 <__lesf2+0x42>
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	d1eb      	bne.n	800d482 <__lesf2+0x42>
 800d4aa:	e7ec      	b.n	800d486 <__lesf2+0x46>
 800d4ac:	42a2      	cmp	r2, r4
 800d4ae:	dc05      	bgt.n	800d4bc <__lesf2+0x7c>
 800d4b0:	dbf2      	blt.n	800d498 <__lesf2+0x58>
 800d4b2:	42b5      	cmp	r5, r6
 800d4b4:	d802      	bhi.n	800d4bc <__lesf2+0x7c>
 800d4b6:	d3ef      	bcc.n	800d498 <__lesf2+0x58>
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	e7ea      	b.n	800d492 <__lesf2+0x52>
 800d4bc:	4243      	negs	r3, r0
 800d4be:	4158      	adcs	r0, r3
 800d4c0:	0040      	lsls	r0, r0, #1
 800d4c2:	3801      	subs	r0, #1
 800d4c4:	e7e5      	b.n	800d492 <__lesf2+0x52>
 800d4c6:	46c0      	nop			; (mov r8, r8)

0800d4c8 <__aeabi_fmul>:
 800d4c8:	0243      	lsls	r3, r0, #9
 800d4ca:	0a5b      	lsrs	r3, r3, #9
 800d4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ce:	464f      	mov	r7, r9
 800d4d0:	4646      	mov	r6, r8
 800d4d2:	4699      	mov	r9, r3
 800d4d4:	46d6      	mov	lr, sl
 800d4d6:	0fc3      	lsrs	r3, r0, #31
 800d4d8:	0045      	lsls	r5, r0, #1
 800d4da:	4698      	mov	r8, r3
 800d4dc:	b5c0      	push	{r6, r7, lr}
 800d4de:	464b      	mov	r3, r9
 800d4e0:	1c0f      	adds	r7, r1, #0
 800d4e2:	0e2d      	lsrs	r5, r5, #24
 800d4e4:	d100      	bne.n	800d4e8 <__aeabi_fmul+0x20>
 800d4e6:	e0cb      	b.n	800d680 <__aeabi_fmul+0x1b8>
 800d4e8:	2dff      	cmp	r5, #255	; 0xff
 800d4ea:	d100      	bne.n	800d4ee <__aeabi_fmul+0x26>
 800d4ec:	e0cf      	b.n	800d68e <__aeabi_fmul+0x1c6>
 800d4ee:	2280      	movs	r2, #128	; 0x80
 800d4f0:	00db      	lsls	r3, r3, #3
 800d4f2:	04d2      	lsls	r2, r2, #19
 800d4f4:	431a      	orrs	r2, r3
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	4691      	mov	r9, r2
 800d4fa:	2600      	movs	r6, #0
 800d4fc:	469a      	mov	sl, r3
 800d4fe:	3d7f      	subs	r5, #127	; 0x7f
 800d500:	027c      	lsls	r4, r7, #9
 800d502:	007b      	lsls	r3, r7, #1
 800d504:	0a64      	lsrs	r4, r4, #9
 800d506:	0e1b      	lsrs	r3, r3, #24
 800d508:	0fff      	lsrs	r7, r7, #31
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d100      	bne.n	800d510 <__aeabi_fmul+0x48>
 800d50e:	e0a9      	b.n	800d664 <__aeabi_fmul+0x19c>
 800d510:	2bff      	cmp	r3, #255	; 0xff
 800d512:	d011      	beq.n	800d538 <__aeabi_fmul+0x70>
 800d514:	2280      	movs	r2, #128	; 0x80
 800d516:	00e4      	lsls	r4, r4, #3
 800d518:	04d2      	lsls	r2, r2, #19
 800d51a:	4314      	orrs	r4, r2
 800d51c:	4642      	mov	r2, r8
 800d51e:	3b7f      	subs	r3, #127	; 0x7f
 800d520:	195b      	adds	r3, r3, r5
 800d522:	407a      	eors	r2, r7
 800d524:	2000      	movs	r0, #0
 800d526:	b2d2      	uxtb	r2, r2
 800d528:	1c5d      	adds	r5, r3, #1
 800d52a:	2e0a      	cmp	r6, #10
 800d52c:	dd13      	ble.n	800d556 <__aeabi_fmul+0x8e>
 800d52e:	003a      	movs	r2, r7
 800d530:	2e0b      	cmp	r6, #11
 800d532:	d047      	beq.n	800d5c4 <__aeabi_fmul+0xfc>
 800d534:	4647      	mov	r7, r8
 800d536:	e03f      	b.n	800d5b8 <__aeabi_fmul+0xf0>
 800d538:	002b      	movs	r3, r5
 800d53a:	33ff      	adds	r3, #255	; 0xff
 800d53c:	2c00      	cmp	r4, #0
 800d53e:	d11e      	bne.n	800d57e <__aeabi_fmul+0xb6>
 800d540:	2202      	movs	r2, #2
 800d542:	4316      	orrs	r6, r2
 800d544:	4642      	mov	r2, r8
 800d546:	3501      	adds	r5, #1
 800d548:	407a      	eors	r2, r7
 800d54a:	b2d2      	uxtb	r2, r2
 800d54c:	35ff      	adds	r5, #255	; 0xff
 800d54e:	2e0a      	cmp	r6, #10
 800d550:	dd00      	ble.n	800d554 <__aeabi_fmul+0x8c>
 800d552:	e0e4      	b.n	800d71e <__aeabi_fmul+0x256>
 800d554:	2002      	movs	r0, #2
 800d556:	2e02      	cmp	r6, #2
 800d558:	dc1c      	bgt.n	800d594 <__aeabi_fmul+0xcc>
 800d55a:	3e01      	subs	r6, #1
 800d55c:	2e01      	cmp	r6, #1
 800d55e:	d842      	bhi.n	800d5e6 <__aeabi_fmul+0x11e>
 800d560:	2802      	cmp	r0, #2
 800d562:	d03d      	beq.n	800d5e0 <__aeabi_fmul+0x118>
 800d564:	2801      	cmp	r0, #1
 800d566:	d166      	bne.n	800d636 <__aeabi_fmul+0x16e>
 800d568:	2000      	movs	r0, #0
 800d56a:	2100      	movs	r1, #0
 800d56c:	05c0      	lsls	r0, r0, #23
 800d56e:	4308      	orrs	r0, r1
 800d570:	07d2      	lsls	r2, r2, #31
 800d572:	4310      	orrs	r0, r2
 800d574:	bce0      	pop	{r5, r6, r7}
 800d576:	46ba      	mov	sl, r7
 800d578:	46b1      	mov	r9, r6
 800d57a:	46a8      	mov	r8, r5
 800d57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d57e:	2203      	movs	r2, #3
 800d580:	4316      	orrs	r6, r2
 800d582:	4642      	mov	r2, r8
 800d584:	3501      	adds	r5, #1
 800d586:	407a      	eors	r2, r7
 800d588:	b2d2      	uxtb	r2, r2
 800d58a:	35ff      	adds	r5, #255	; 0xff
 800d58c:	2e0a      	cmp	r6, #10
 800d58e:	dd00      	ble.n	800d592 <__aeabi_fmul+0xca>
 800d590:	e0e4      	b.n	800d75c <__aeabi_fmul+0x294>
 800d592:	2003      	movs	r0, #3
 800d594:	2101      	movs	r1, #1
 800d596:	40b1      	lsls	r1, r6
 800d598:	26a6      	movs	r6, #166	; 0xa6
 800d59a:	00f6      	lsls	r6, r6, #3
 800d59c:	4231      	tst	r1, r6
 800d59e:	d10a      	bne.n	800d5b6 <__aeabi_fmul+0xee>
 800d5a0:	2690      	movs	r6, #144	; 0x90
 800d5a2:	00b6      	lsls	r6, r6, #2
 800d5a4:	4231      	tst	r1, r6
 800d5a6:	d116      	bne.n	800d5d6 <__aeabi_fmul+0x10e>
 800d5a8:	3eb9      	subs	r6, #185	; 0xb9
 800d5aa:	3eff      	subs	r6, #255	; 0xff
 800d5ac:	420e      	tst	r6, r1
 800d5ae:	d01a      	beq.n	800d5e6 <__aeabi_fmul+0x11e>
 800d5b0:	46a1      	mov	r9, r4
 800d5b2:	4682      	mov	sl, r0
 800d5b4:	e000      	b.n	800d5b8 <__aeabi_fmul+0xf0>
 800d5b6:	0017      	movs	r7, r2
 800d5b8:	4653      	mov	r3, sl
 800d5ba:	003a      	movs	r2, r7
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d00f      	beq.n	800d5e0 <__aeabi_fmul+0x118>
 800d5c0:	464c      	mov	r4, r9
 800d5c2:	4650      	mov	r0, sl
 800d5c4:	2803      	cmp	r0, #3
 800d5c6:	d1cd      	bne.n	800d564 <__aeabi_fmul+0x9c>
 800d5c8:	2180      	movs	r1, #128	; 0x80
 800d5ca:	03c9      	lsls	r1, r1, #15
 800d5cc:	4321      	orrs	r1, r4
 800d5ce:	0249      	lsls	r1, r1, #9
 800d5d0:	20ff      	movs	r0, #255	; 0xff
 800d5d2:	0a49      	lsrs	r1, r1, #9
 800d5d4:	e7ca      	b.n	800d56c <__aeabi_fmul+0xa4>
 800d5d6:	2180      	movs	r1, #128	; 0x80
 800d5d8:	2200      	movs	r2, #0
 800d5da:	20ff      	movs	r0, #255	; 0xff
 800d5dc:	03c9      	lsls	r1, r1, #15
 800d5de:	e7c5      	b.n	800d56c <__aeabi_fmul+0xa4>
 800d5e0:	20ff      	movs	r0, #255	; 0xff
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	e7c2      	b.n	800d56c <__aeabi_fmul+0xa4>
 800d5e6:	0c20      	lsrs	r0, r4, #16
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	0424      	lsls	r4, r4, #16
 800d5ec:	0c24      	lsrs	r4, r4, #16
 800d5ee:	0027      	movs	r7, r4
 800d5f0:	0c0e      	lsrs	r6, r1, #16
 800d5f2:	0409      	lsls	r1, r1, #16
 800d5f4:	0c09      	lsrs	r1, r1, #16
 800d5f6:	4374      	muls	r4, r6
 800d5f8:	434f      	muls	r7, r1
 800d5fa:	4346      	muls	r6, r0
 800d5fc:	4348      	muls	r0, r1
 800d5fe:	0c39      	lsrs	r1, r7, #16
 800d600:	1900      	adds	r0, r0, r4
 800d602:	1809      	adds	r1, r1, r0
 800d604:	428c      	cmp	r4, r1
 800d606:	d903      	bls.n	800d610 <__aeabi_fmul+0x148>
 800d608:	2080      	movs	r0, #128	; 0x80
 800d60a:	0240      	lsls	r0, r0, #9
 800d60c:	4684      	mov	ip, r0
 800d60e:	4466      	add	r6, ip
 800d610:	043f      	lsls	r7, r7, #16
 800d612:	0408      	lsls	r0, r1, #16
 800d614:	0c3f      	lsrs	r7, r7, #16
 800d616:	19c0      	adds	r0, r0, r7
 800d618:	0184      	lsls	r4, r0, #6
 800d61a:	1e67      	subs	r7, r4, #1
 800d61c:	41bc      	sbcs	r4, r7
 800d61e:	0c09      	lsrs	r1, r1, #16
 800d620:	0e80      	lsrs	r0, r0, #26
 800d622:	1989      	adds	r1, r1, r6
 800d624:	4304      	orrs	r4, r0
 800d626:	0189      	lsls	r1, r1, #6
 800d628:	430c      	orrs	r4, r1
 800d62a:	0109      	lsls	r1, r1, #4
 800d62c:	d571      	bpl.n	800d712 <__aeabi_fmul+0x24a>
 800d62e:	2301      	movs	r3, #1
 800d630:	0861      	lsrs	r1, r4, #1
 800d632:	401c      	ands	r4, r3
 800d634:	430c      	orrs	r4, r1
 800d636:	002b      	movs	r3, r5
 800d638:	337f      	adds	r3, #127	; 0x7f
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	dd51      	ble.n	800d6e2 <__aeabi_fmul+0x21a>
 800d63e:	0761      	lsls	r1, r4, #29
 800d640:	d004      	beq.n	800d64c <__aeabi_fmul+0x184>
 800d642:	210f      	movs	r1, #15
 800d644:	4021      	ands	r1, r4
 800d646:	2904      	cmp	r1, #4
 800d648:	d000      	beq.n	800d64c <__aeabi_fmul+0x184>
 800d64a:	3404      	adds	r4, #4
 800d64c:	0121      	lsls	r1, r4, #4
 800d64e:	d503      	bpl.n	800d658 <__aeabi_fmul+0x190>
 800d650:	4b43      	ldr	r3, [pc, #268]	; (800d760 <__aeabi_fmul+0x298>)
 800d652:	401c      	ands	r4, r3
 800d654:	002b      	movs	r3, r5
 800d656:	3380      	adds	r3, #128	; 0x80
 800d658:	2bfe      	cmp	r3, #254	; 0xfe
 800d65a:	dcc1      	bgt.n	800d5e0 <__aeabi_fmul+0x118>
 800d65c:	01a1      	lsls	r1, r4, #6
 800d65e:	0a49      	lsrs	r1, r1, #9
 800d660:	b2d8      	uxtb	r0, r3
 800d662:	e783      	b.n	800d56c <__aeabi_fmul+0xa4>
 800d664:	2c00      	cmp	r4, #0
 800d666:	d12c      	bne.n	800d6c2 <__aeabi_fmul+0x1fa>
 800d668:	2301      	movs	r3, #1
 800d66a:	4642      	mov	r2, r8
 800d66c:	431e      	orrs	r6, r3
 800d66e:	002b      	movs	r3, r5
 800d670:	407a      	eors	r2, r7
 800d672:	2001      	movs	r0, #1
 800d674:	b2d2      	uxtb	r2, r2
 800d676:	1c5d      	adds	r5, r3, #1
 800d678:	2e0a      	cmp	r6, #10
 800d67a:	dd00      	ble.n	800d67e <__aeabi_fmul+0x1b6>
 800d67c:	e757      	b.n	800d52e <__aeabi_fmul+0x66>
 800d67e:	e76a      	b.n	800d556 <__aeabi_fmul+0x8e>
 800d680:	2b00      	cmp	r3, #0
 800d682:	d110      	bne.n	800d6a6 <__aeabi_fmul+0x1de>
 800d684:	2301      	movs	r3, #1
 800d686:	2604      	movs	r6, #4
 800d688:	2500      	movs	r5, #0
 800d68a:	469a      	mov	sl, r3
 800d68c:	e738      	b.n	800d500 <__aeabi_fmul+0x38>
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d104      	bne.n	800d69c <__aeabi_fmul+0x1d4>
 800d692:	2302      	movs	r3, #2
 800d694:	2608      	movs	r6, #8
 800d696:	25ff      	movs	r5, #255	; 0xff
 800d698:	469a      	mov	sl, r3
 800d69a:	e731      	b.n	800d500 <__aeabi_fmul+0x38>
 800d69c:	2303      	movs	r3, #3
 800d69e:	260c      	movs	r6, #12
 800d6a0:	25ff      	movs	r5, #255	; 0xff
 800d6a2:	469a      	mov	sl, r3
 800d6a4:	e72c      	b.n	800d500 <__aeabi_fmul+0x38>
 800d6a6:	4648      	mov	r0, r9
 800d6a8:	f002 f9cc 	bl	800fa44 <__clzsi2>
 800d6ac:	464a      	mov	r2, r9
 800d6ae:	1f43      	subs	r3, r0, #5
 800d6b0:	2576      	movs	r5, #118	; 0x76
 800d6b2:	409a      	lsls	r2, r3
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	426d      	negs	r5, r5
 800d6b8:	4691      	mov	r9, r2
 800d6ba:	2600      	movs	r6, #0
 800d6bc:	469a      	mov	sl, r3
 800d6be:	1a2d      	subs	r5, r5, r0
 800d6c0:	e71e      	b.n	800d500 <__aeabi_fmul+0x38>
 800d6c2:	0020      	movs	r0, r4
 800d6c4:	f002 f9be 	bl	800fa44 <__clzsi2>
 800d6c8:	4642      	mov	r2, r8
 800d6ca:	1f43      	subs	r3, r0, #5
 800d6cc:	409c      	lsls	r4, r3
 800d6ce:	1a2b      	subs	r3, r5, r0
 800d6d0:	3b76      	subs	r3, #118	; 0x76
 800d6d2:	407a      	eors	r2, r7
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	b2d2      	uxtb	r2, r2
 800d6d8:	1c5d      	adds	r5, r3, #1
 800d6da:	2e0a      	cmp	r6, #10
 800d6dc:	dd00      	ble.n	800d6e0 <__aeabi_fmul+0x218>
 800d6de:	e726      	b.n	800d52e <__aeabi_fmul+0x66>
 800d6e0:	e739      	b.n	800d556 <__aeabi_fmul+0x8e>
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	1acb      	subs	r3, r1, r3
 800d6e6:	2b1b      	cmp	r3, #27
 800d6e8:	dd00      	ble.n	800d6ec <__aeabi_fmul+0x224>
 800d6ea:	e73d      	b.n	800d568 <__aeabi_fmul+0xa0>
 800d6ec:	359e      	adds	r5, #158	; 0x9e
 800d6ee:	0021      	movs	r1, r4
 800d6f0:	40ac      	lsls	r4, r5
 800d6f2:	40d9      	lsrs	r1, r3
 800d6f4:	1e63      	subs	r3, r4, #1
 800d6f6:	419c      	sbcs	r4, r3
 800d6f8:	4321      	orrs	r1, r4
 800d6fa:	074b      	lsls	r3, r1, #29
 800d6fc:	d004      	beq.n	800d708 <__aeabi_fmul+0x240>
 800d6fe:	230f      	movs	r3, #15
 800d700:	400b      	ands	r3, r1
 800d702:	2b04      	cmp	r3, #4
 800d704:	d000      	beq.n	800d708 <__aeabi_fmul+0x240>
 800d706:	3104      	adds	r1, #4
 800d708:	014b      	lsls	r3, r1, #5
 800d70a:	d504      	bpl.n	800d716 <__aeabi_fmul+0x24e>
 800d70c:	2001      	movs	r0, #1
 800d70e:	2100      	movs	r1, #0
 800d710:	e72c      	b.n	800d56c <__aeabi_fmul+0xa4>
 800d712:	001d      	movs	r5, r3
 800d714:	e78f      	b.n	800d636 <__aeabi_fmul+0x16e>
 800d716:	0189      	lsls	r1, r1, #6
 800d718:	2000      	movs	r0, #0
 800d71a:	0a49      	lsrs	r1, r1, #9
 800d71c:	e726      	b.n	800d56c <__aeabi_fmul+0xa4>
 800d71e:	2302      	movs	r3, #2
 800d720:	2e0f      	cmp	r6, #15
 800d722:	d10c      	bne.n	800d73e <__aeabi_fmul+0x276>
 800d724:	2180      	movs	r1, #128	; 0x80
 800d726:	464b      	mov	r3, r9
 800d728:	03c9      	lsls	r1, r1, #15
 800d72a:	420b      	tst	r3, r1
 800d72c:	d00d      	beq.n	800d74a <__aeabi_fmul+0x282>
 800d72e:	420c      	tst	r4, r1
 800d730:	d10b      	bne.n	800d74a <__aeabi_fmul+0x282>
 800d732:	4321      	orrs	r1, r4
 800d734:	0249      	lsls	r1, r1, #9
 800d736:	003a      	movs	r2, r7
 800d738:	20ff      	movs	r0, #255	; 0xff
 800d73a:	0a49      	lsrs	r1, r1, #9
 800d73c:	e716      	b.n	800d56c <__aeabi_fmul+0xa4>
 800d73e:	2e0b      	cmp	r6, #11
 800d740:	d000      	beq.n	800d744 <__aeabi_fmul+0x27c>
 800d742:	e6f7      	b.n	800d534 <__aeabi_fmul+0x6c>
 800d744:	46a1      	mov	r9, r4
 800d746:	469a      	mov	sl, r3
 800d748:	e736      	b.n	800d5b8 <__aeabi_fmul+0xf0>
 800d74a:	2180      	movs	r1, #128	; 0x80
 800d74c:	464b      	mov	r3, r9
 800d74e:	03c9      	lsls	r1, r1, #15
 800d750:	4319      	orrs	r1, r3
 800d752:	0249      	lsls	r1, r1, #9
 800d754:	4642      	mov	r2, r8
 800d756:	20ff      	movs	r0, #255	; 0xff
 800d758:	0a49      	lsrs	r1, r1, #9
 800d75a:	e707      	b.n	800d56c <__aeabi_fmul+0xa4>
 800d75c:	2303      	movs	r3, #3
 800d75e:	e7df      	b.n	800d720 <__aeabi_fmul+0x258>
 800d760:	f7ffffff 	.word	0xf7ffffff

0800d764 <__aeabi_fsub>:
 800d764:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d766:	46c6      	mov	lr, r8
 800d768:	0243      	lsls	r3, r0, #9
 800d76a:	0a5b      	lsrs	r3, r3, #9
 800d76c:	0045      	lsls	r5, r0, #1
 800d76e:	00da      	lsls	r2, r3, #3
 800d770:	0fc4      	lsrs	r4, r0, #31
 800d772:	0248      	lsls	r0, r1, #9
 800d774:	004f      	lsls	r7, r1, #1
 800d776:	4694      	mov	ip, r2
 800d778:	0a42      	lsrs	r2, r0, #9
 800d77a:	001e      	movs	r6, r3
 800d77c:	4690      	mov	r8, r2
 800d77e:	b500      	push	{lr}
 800d780:	0e2d      	lsrs	r5, r5, #24
 800d782:	0e3f      	lsrs	r7, r7, #24
 800d784:	0fc9      	lsrs	r1, r1, #31
 800d786:	0980      	lsrs	r0, r0, #6
 800d788:	2fff      	cmp	r7, #255	; 0xff
 800d78a:	d059      	beq.n	800d840 <__aeabi_fsub+0xdc>
 800d78c:	2201      	movs	r2, #1
 800d78e:	4051      	eors	r1, r2
 800d790:	428c      	cmp	r4, r1
 800d792:	d039      	beq.n	800d808 <__aeabi_fsub+0xa4>
 800d794:	1bea      	subs	r2, r5, r7
 800d796:	2a00      	cmp	r2, #0
 800d798:	dd58      	ble.n	800d84c <__aeabi_fsub+0xe8>
 800d79a:	2f00      	cmp	r7, #0
 800d79c:	d068      	beq.n	800d870 <__aeabi_fsub+0x10c>
 800d79e:	2dff      	cmp	r5, #255	; 0xff
 800d7a0:	d100      	bne.n	800d7a4 <__aeabi_fsub+0x40>
 800d7a2:	e0d1      	b.n	800d948 <__aeabi_fsub+0x1e4>
 800d7a4:	2380      	movs	r3, #128	; 0x80
 800d7a6:	04db      	lsls	r3, r3, #19
 800d7a8:	4318      	orrs	r0, r3
 800d7aa:	2a1b      	cmp	r2, #27
 800d7ac:	dc00      	bgt.n	800d7b0 <__aeabi_fsub+0x4c>
 800d7ae:	e0e3      	b.n	800d978 <__aeabi_fsub+0x214>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	4662      	mov	r2, ip
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	015a      	lsls	r2, r3, #5
 800d7b8:	d400      	bmi.n	800d7bc <__aeabi_fsub+0x58>
 800d7ba:	e0ac      	b.n	800d916 <__aeabi_fsub+0x1b2>
 800d7bc:	019b      	lsls	r3, r3, #6
 800d7be:	099e      	lsrs	r6, r3, #6
 800d7c0:	0030      	movs	r0, r6
 800d7c2:	f002 f93f 	bl	800fa44 <__clzsi2>
 800d7c6:	0033      	movs	r3, r6
 800d7c8:	3805      	subs	r0, #5
 800d7ca:	4083      	lsls	r3, r0
 800d7cc:	4285      	cmp	r5, r0
 800d7ce:	dc00      	bgt.n	800d7d2 <__aeabi_fsub+0x6e>
 800d7d0:	e0c6      	b.n	800d960 <__aeabi_fsub+0x1fc>
 800d7d2:	4ab2      	ldr	r2, [pc, #712]	; (800da9c <__aeabi_fsub+0x338>)
 800d7d4:	1a2d      	subs	r5, r5, r0
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	075a      	lsls	r2, r3, #29
 800d7da:	d004      	beq.n	800d7e6 <__aeabi_fsub+0x82>
 800d7dc:	220f      	movs	r2, #15
 800d7de:	401a      	ands	r2, r3
 800d7e0:	2a04      	cmp	r2, #4
 800d7e2:	d000      	beq.n	800d7e6 <__aeabi_fsub+0x82>
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	015a      	lsls	r2, r3, #5
 800d7e8:	d400      	bmi.n	800d7ec <__aeabi_fsub+0x88>
 800d7ea:	e097      	b.n	800d91c <__aeabi_fsub+0x1b8>
 800d7ec:	1c6a      	adds	r2, r5, #1
 800d7ee:	2dfe      	cmp	r5, #254	; 0xfe
 800d7f0:	d100      	bne.n	800d7f4 <__aeabi_fsub+0x90>
 800d7f2:	e084      	b.n	800d8fe <__aeabi_fsub+0x19a>
 800d7f4:	019b      	lsls	r3, r3, #6
 800d7f6:	0a5e      	lsrs	r6, r3, #9
 800d7f8:	b2d2      	uxtb	r2, r2
 800d7fa:	05d0      	lsls	r0, r2, #23
 800d7fc:	4330      	orrs	r0, r6
 800d7fe:	07e4      	lsls	r4, r4, #31
 800d800:	4320      	orrs	r0, r4
 800d802:	bc80      	pop	{r7}
 800d804:	46b8      	mov	r8, r7
 800d806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d808:	1bea      	subs	r2, r5, r7
 800d80a:	2a00      	cmp	r2, #0
 800d80c:	dd41      	ble.n	800d892 <__aeabi_fsub+0x12e>
 800d80e:	2f00      	cmp	r7, #0
 800d810:	d06b      	beq.n	800d8ea <__aeabi_fsub+0x186>
 800d812:	2dff      	cmp	r5, #255	; 0xff
 800d814:	d100      	bne.n	800d818 <__aeabi_fsub+0xb4>
 800d816:	e097      	b.n	800d948 <__aeabi_fsub+0x1e4>
 800d818:	2380      	movs	r3, #128	; 0x80
 800d81a:	04db      	lsls	r3, r3, #19
 800d81c:	4318      	orrs	r0, r3
 800d81e:	2a1b      	cmp	r2, #27
 800d820:	dc00      	bgt.n	800d824 <__aeabi_fsub+0xc0>
 800d822:	e0cc      	b.n	800d9be <__aeabi_fsub+0x25a>
 800d824:	2301      	movs	r3, #1
 800d826:	4463      	add	r3, ip
 800d828:	015a      	lsls	r2, r3, #5
 800d82a:	d574      	bpl.n	800d916 <__aeabi_fsub+0x1b2>
 800d82c:	3501      	adds	r5, #1
 800d82e:	2dff      	cmp	r5, #255	; 0xff
 800d830:	d065      	beq.n	800d8fe <__aeabi_fsub+0x19a>
 800d832:	2201      	movs	r2, #1
 800d834:	499a      	ldr	r1, [pc, #616]	; (800daa0 <__aeabi_fsub+0x33c>)
 800d836:	401a      	ands	r2, r3
 800d838:	085b      	lsrs	r3, r3, #1
 800d83a:	400b      	ands	r3, r1
 800d83c:	4313      	orrs	r3, r2
 800d83e:	e7cb      	b.n	800d7d8 <__aeabi_fsub+0x74>
 800d840:	2800      	cmp	r0, #0
 800d842:	d01f      	beq.n	800d884 <__aeabi_fsub+0x120>
 800d844:	428c      	cmp	r4, r1
 800d846:	d022      	beq.n	800d88e <__aeabi_fsub+0x12a>
 800d848:	002a      	movs	r2, r5
 800d84a:	3aff      	subs	r2, #255	; 0xff
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	d035      	beq.n	800d8bc <__aeabi_fsub+0x158>
 800d850:	1b7a      	subs	r2, r7, r5
 800d852:	2d00      	cmp	r5, #0
 800d854:	d000      	beq.n	800d858 <__aeabi_fsub+0xf4>
 800d856:	e099      	b.n	800d98c <__aeabi_fsub+0x228>
 800d858:	4663      	mov	r3, ip
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d100      	bne.n	800d860 <__aeabi_fsub+0xfc>
 800d85e:	e0dd      	b.n	800da1c <__aeabi_fsub+0x2b8>
 800d860:	1e53      	subs	r3, r2, #1
 800d862:	2a01      	cmp	r2, #1
 800d864:	d100      	bne.n	800d868 <__aeabi_fsub+0x104>
 800d866:	e105      	b.n	800da74 <__aeabi_fsub+0x310>
 800d868:	2aff      	cmp	r2, #255	; 0xff
 800d86a:	d06b      	beq.n	800d944 <__aeabi_fsub+0x1e0>
 800d86c:	001a      	movs	r2, r3
 800d86e:	e094      	b.n	800d99a <__aeabi_fsub+0x236>
 800d870:	2800      	cmp	r0, #0
 800d872:	d073      	beq.n	800d95c <__aeabi_fsub+0x1f8>
 800d874:	1e51      	subs	r1, r2, #1
 800d876:	2a01      	cmp	r2, #1
 800d878:	d100      	bne.n	800d87c <__aeabi_fsub+0x118>
 800d87a:	e0df      	b.n	800da3c <__aeabi_fsub+0x2d8>
 800d87c:	2aff      	cmp	r2, #255	; 0xff
 800d87e:	d063      	beq.n	800d948 <__aeabi_fsub+0x1e4>
 800d880:	000a      	movs	r2, r1
 800d882:	e792      	b.n	800d7aa <__aeabi_fsub+0x46>
 800d884:	2201      	movs	r2, #1
 800d886:	4051      	eors	r1, r2
 800d888:	42a1      	cmp	r1, r4
 800d88a:	d000      	beq.n	800d88e <__aeabi_fsub+0x12a>
 800d88c:	e782      	b.n	800d794 <__aeabi_fsub+0x30>
 800d88e:	002a      	movs	r2, r5
 800d890:	3aff      	subs	r2, #255	; 0xff
 800d892:	2a00      	cmp	r2, #0
 800d894:	d036      	beq.n	800d904 <__aeabi_fsub+0x1a0>
 800d896:	1b7a      	subs	r2, r7, r5
 800d898:	2d00      	cmp	r5, #0
 800d89a:	d100      	bne.n	800d89e <__aeabi_fsub+0x13a>
 800d89c:	e0aa      	b.n	800d9f4 <__aeabi_fsub+0x290>
 800d89e:	2fff      	cmp	r7, #255	; 0xff
 800d8a0:	d100      	bne.n	800d8a4 <__aeabi_fsub+0x140>
 800d8a2:	e0da      	b.n	800da5a <__aeabi_fsub+0x2f6>
 800d8a4:	2380      	movs	r3, #128	; 0x80
 800d8a6:	4661      	mov	r1, ip
 800d8a8:	04db      	lsls	r3, r3, #19
 800d8aa:	4319      	orrs	r1, r3
 800d8ac:	468c      	mov	ip, r1
 800d8ae:	2a1b      	cmp	r2, #27
 800d8b0:	dc00      	bgt.n	800d8b4 <__aeabi_fsub+0x150>
 800d8b2:	e0d4      	b.n	800da5e <__aeabi_fsub+0x2fa>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	003d      	movs	r5, r7
 800d8b8:	181b      	adds	r3, r3, r0
 800d8ba:	e7b5      	b.n	800d828 <__aeabi_fsub+0xc4>
 800d8bc:	27fe      	movs	r7, #254	; 0xfe
 800d8be:	1c6a      	adds	r2, r5, #1
 800d8c0:	4217      	tst	r7, r2
 800d8c2:	d171      	bne.n	800d9a8 <__aeabi_fsub+0x244>
 800d8c4:	2d00      	cmp	r5, #0
 800d8c6:	d000      	beq.n	800d8ca <__aeabi_fsub+0x166>
 800d8c8:	e09e      	b.n	800da08 <__aeabi_fsub+0x2a4>
 800d8ca:	4663      	mov	r3, ip
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d100      	bne.n	800d8d2 <__aeabi_fsub+0x16e>
 800d8d0:	e0d5      	b.n	800da7e <__aeabi_fsub+0x31a>
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d100      	bne.n	800d8da <__aeabi_fsub+0x176>
 800d8d8:	e78f      	b.n	800d7fa <__aeabi_fsub+0x96>
 800d8da:	1a1b      	subs	r3, r3, r0
 800d8dc:	015e      	lsls	r6, r3, #5
 800d8de:	d400      	bmi.n	800d8e2 <__aeabi_fsub+0x17e>
 800d8e0:	e0d6      	b.n	800da90 <__aeabi_fsub+0x32c>
 800d8e2:	4663      	mov	r3, ip
 800d8e4:	000c      	movs	r4, r1
 800d8e6:	1ac3      	subs	r3, r0, r3
 800d8e8:	e776      	b.n	800d7d8 <__aeabi_fsub+0x74>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d036      	beq.n	800d95c <__aeabi_fsub+0x1f8>
 800d8ee:	1e51      	subs	r1, r2, #1
 800d8f0:	2a01      	cmp	r2, #1
 800d8f2:	d100      	bne.n	800d8f6 <__aeabi_fsub+0x192>
 800d8f4:	e09a      	b.n	800da2c <__aeabi_fsub+0x2c8>
 800d8f6:	2aff      	cmp	r2, #255	; 0xff
 800d8f8:	d026      	beq.n	800d948 <__aeabi_fsub+0x1e4>
 800d8fa:	000a      	movs	r2, r1
 800d8fc:	e78f      	b.n	800d81e <__aeabi_fsub+0xba>
 800d8fe:	22ff      	movs	r2, #255	; 0xff
 800d900:	2600      	movs	r6, #0
 800d902:	e77a      	b.n	800d7fa <__aeabi_fsub+0x96>
 800d904:	27fe      	movs	r7, #254	; 0xfe
 800d906:	1c6a      	adds	r2, r5, #1
 800d908:	4217      	tst	r7, r2
 800d90a:	d062      	beq.n	800d9d2 <__aeabi_fsub+0x26e>
 800d90c:	2aff      	cmp	r2, #255	; 0xff
 800d90e:	d0f6      	beq.n	800d8fe <__aeabi_fsub+0x19a>
 800d910:	0015      	movs	r5, r2
 800d912:	4460      	add	r0, ip
 800d914:	0843      	lsrs	r3, r0, #1
 800d916:	075a      	lsls	r2, r3, #29
 800d918:	d000      	beq.n	800d91c <__aeabi_fsub+0x1b8>
 800d91a:	e75f      	b.n	800d7dc <__aeabi_fsub+0x78>
 800d91c:	08db      	lsrs	r3, r3, #3
 800d91e:	2dff      	cmp	r5, #255	; 0xff
 800d920:	d012      	beq.n	800d948 <__aeabi_fsub+0x1e4>
 800d922:	025b      	lsls	r3, r3, #9
 800d924:	0a5e      	lsrs	r6, r3, #9
 800d926:	b2ea      	uxtb	r2, r5
 800d928:	e767      	b.n	800d7fa <__aeabi_fsub+0x96>
 800d92a:	4662      	mov	r2, ip
 800d92c:	2a00      	cmp	r2, #0
 800d92e:	d100      	bne.n	800d932 <__aeabi_fsub+0x1ce>
 800d930:	e093      	b.n	800da5a <__aeabi_fsub+0x2f6>
 800d932:	2800      	cmp	r0, #0
 800d934:	d008      	beq.n	800d948 <__aeabi_fsub+0x1e4>
 800d936:	2280      	movs	r2, #128	; 0x80
 800d938:	03d2      	lsls	r2, r2, #15
 800d93a:	4213      	tst	r3, r2
 800d93c:	d004      	beq.n	800d948 <__aeabi_fsub+0x1e4>
 800d93e:	4640      	mov	r0, r8
 800d940:	4210      	tst	r0, r2
 800d942:	d101      	bne.n	800d948 <__aeabi_fsub+0x1e4>
 800d944:	000c      	movs	r4, r1
 800d946:	4643      	mov	r3, r8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d0d8      	beq.n	800d8fe <__aeabi_fsub+0x19a>
 800d94c:	2680      	movs	r6, #128	; 0x80
 800d94e:	03f6      	lsls	r6, r6, #15
 800d950:	431e      	orrs	r6, r3
 800d952:	0276      	lsls	r6, r6, #9
 800d954:	22ff      	movs	r2, #255	; 0xff
 800d956:	0a76      	lsrs	r6, r6, #9
 800d958:	e74f      	b.n	800d7fa <__aeabi_fsub+0x96>
 800d95a:	4643      	mov	r3, r8
 800d95c:	0015      	movs	r5, r2
 800d95e:	e7de      	b.n	800d91e <__aeabi_fsub+0x1ba>
 800d960:	2220      	movs	r2, #32
 800d962:	1b40      	subs	r0, r0, r5
 800d964:	3001      	adds	r0, #1
 800d966:	1a12      	subs	r2, r2, r0
 800d968:	0019      	movs	r1, r3
 800d96a:	4093      	lsls	r3, r2
 800d96c:	40c1      	lsrs	r1, r0
 800d96e:	1e5a      	subs	r2, r3, #1
 800d970:	4193      	sbcs	r3, r2
 800d972:	2500      	movs	r5, #0
 800d974:	430b      	orrs	r3, r1
 800d976:	e72f      	b.n	800d7d8 <__aeabi_fsub+0x74>
 800d978:	2320      	movs	r3, #32
 800d97a:	1a9b      	subs	r3, r3, r2
 800d97c:	0001      	movs	r1, r0
 800d97e:	4098      	lsls	r0, r3
 800d980:	0003      	movs	r3, r0
 800d982:	40d1      	lsrs	r1, r2
 800d984:	1e5a      	subs	r2, r3, #1
 800d986:	4193      	sbcs	r3, r2
 800d988:	430b      	orrs	r3, r1
 800d98a:	e712      	b.n	800d7b2 <__aeabi_fsub+0x4e>
 800d98c:	2fff      	cmp	r7, #255	; 0xff
 800d98e:	d0d9      	beq.n	800d944 <__aeabi_fsub+0x1e0>
 800d990:	2380      	movs	r3, #128	; 0x80
 800d992:	4664      	mov	r4, ip
 800d994:	04db      	lsls	r3, r3, #19
 800d996:	431c      	orrs	r4, r3
 800d998:	46a4      	mov	ip, r4
 800d99a:	2a1b      	cmp	r2, #27
 800d99c:	dd52      	ble.n	800da44 <__aeabi_fsub+0x2e0>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	000c      	movs	r4, r1
 800d9a2:	003d      	movs	r5, r7
 800d9a4:	1ac3      	subs	r3, r0, r3
 800d9a6:	e706      	b.n	800d7b6 <__aeabi_fsub+0x52>
 800d9a8:	4663      	mov	r3, ip
 800d9aa:	1a1e      	subs	r6, r3, r0
 800d9ac:	0173      	lsls	r3, r6, #5
 800d9ae:	d439      	bmi.n	800da24 <__aeabi_fsub+0x2c0>
 800d9b0:	2e00      	cmp	r6, #0
 800d9b2:	d000      	beq.n	800d9b6 <__aeabi_fsub+0x252>
 800d9b4:	e704      	b.n	800d7c0 <__aeabi_fsub+0x5c>
 800d9b6:	2400      	movs	r4, #0
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	2600      	movs	r6, #0
 800d9bc:	e71d      	b.n	800d7fa <__aeabi_fsub+0x96>
 800d9be:	2320      	movs	r3, #32
 800d9c0:	1a9b      	subs	r3, r3, r2
 800d9c2:	0001      	movs	r1, r0
 800d9c4:	4098      	lsls	r0, r3
 800d9c6:	0003      	movs	r3, r0
 800d9c8:	40d1      	lsrs	r1, r2
 800d9ca:	1e5a      	subs	r2, r3, #1
 800d9cc:	4193      	sbcs	r3, r2
 800d9ce:	430b      	orrs	r3, r1
 800d9d0:	e729      	b.n	800d826 <__aeabi_fsub+0xc2>
 800d9d2:	2d00      	cmp	r5, #0
 800d9d4:	d1a9      	bne.n	800d92a <__aeabi_fsub+0x1c6>
 800d9d6:	4663      	mov	r3, ip
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d056      	beq.n	800da8a <__aeabi_fsub+0x326>
 800d9dc:	2200      	movs	r2, #0
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d100      	bne.n	800d9e4 <__aeabi_fsub+0x280>
 800d9e2:	e70a      	b.n	800d7fa <__aeabi_fsub+0x96>
 800d9e4:	0003      	movs	r3, r0
 800d9e6:	4463      	add	r3, ip
 800d9e8:	015a      	lsls	r2, r3, #5
 800d9ea:	d594      	bpl.n	800d916 <__aeabi_fsub+0x1b2>
 800d9ec:	4a2b      	ldr	r2, [pc, #172]	; (800da9c <__aeabi_fsub+0x338>)
 800d9ee:	3501      	adds	r5, #1
 800d9f0:	4013      	ands	r3, r2
 800d9f2:	e790      	b.n	800d916 <__aeabi_fsub+0x1b2>
 800d9f4:	4663      	mov	r3, ip
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d0af      	beq.n	800d95a <__aeabi_fsub+0x1f6>
 800d9fa:	1e53      	subs	r3, r2, #1
 800d9fc:	2a01      	cmp	r2, #1
 800d9fe:	d015      	beq.n	800da2c <__aeabi_fsub+0x2c8>
 800da00:	2aff      	cmp	r2, #255	; 0xff
 800da02:	d02a      	beq.n	800da5a <__aeabi_fsub+0x2f6>
 800da04:	001a      	movs	r2, r3
 800da06:	e752      	b.n	800d8ae <__aeabi_fsub+0x14a>
 800da08:	4662      	mov	r2, ip
 800da0a:	2a00      	cmp	r2, #0
 800da0c:	d191      	bne.n	800d932 <__aeabi_fsub+0x1ce>
 800da0e:	2800      	cmp	r0, #0
 800da10:	d198      	bne.n	800d944 <__aeabi_fsub+0x1e0>
 800da12:	2680      	movs	r6, #128	; 0x80
 800da14:	2400      	movs	r4, #0
 800da16:	22ff      	movs	r2, #255	; 0xff
 800da18:	03f6      	lsls	r6, r6, #15
 800da1a:	e6ee      	b.n	800d7fa <__aeabi_fsub+0x96>
 800da1c:	000c      	movs	r4, r1
 800da1e:	4643      	mov	r3, r8
 800da20:	0015      	movs	r5, r2
 800da22:	e77c      	b.n	800d91e <__aeabi_fsub+0x1ba>
 800da24:	4663      	mov	r3, ip
 800da26:	000c      	movs	r4, r1
 800da28:	1ac6      	subs	r6, r0, r3
 800da2a:	e6c9      	b.n	800d7c0 <__aeabi_fsub+0x5c>
 800da2c:	0003      	movs	r3, r0
 800da2e:	4463      	add	r3, ip
 800da30:	2501      	movs	r5, #1
 800da32:	015a      	lsls	r2, r3, #5
 800da34:	d400      	bmi.n	800da38 <__aeabi_fsub+0x2d4>
 800da36:	e76e      	b.n	800d916 <__aeabi_fsub+0x1b2>
 800da38:	2502      	movs	r5, #2
 800da3a:	e6fa      	b.n	800d832 <__aeabi_fsub+0xce>
 800da3c:	4663      	mov	r3, ip
 800da3e:	2501      	movs	r5, #1
 800da40:	1a1b      	subs	r3, r3, r0
 800da42:	e6b8      	b.n	800d7b6 <__aeabi_fsub+0x52>
 800da44:	4664      	mov	r4, ip
 800da46:	2320      	movs	r3, #32
 800da48:	40d4      	lsrs	r4, r2
 800da4a:	1a9b      	subs	r3, r3, r2
 800da4c:	4662      	mov	r2, ip
 800da4e:	409a      	lsls	r2, r3
 800da50:	0013      	movs	r3, r2
 800da52:	1e5a      	subs	r2, r3, #1
 800da54:	4193      	sbcs	r3, r2
 800da56:	4323      	orrs	r3, r4
 800da58:	e7a2      	b.n	800d9a0 <__aeabi_fsub+0x23c>
 800da5a:	4643      	mov	r3, r8
 800da5c:	e774      	b.n	800d948 <__aeabi_fsub+0x1e4>
 800da5e:	4661      	mov	r1, ip
 800da60:	2320      	movs	r3, #32
 800da62:	40d1      	lsrs	r1, r2
 800da64:	1a9b      	subs	r3, r3, r2
 800da66:	4662      	mov	r2, ip
 800da68:	409a      	lsls	r2, r3
 800da6a:	0013      	movs	r3, r2
 800da6c:	1e5a      	subs	r2, r3, #1
 800da6e:	4193      	sbcs	r3, r2
 800da70:	430b      	orrs	r3, r1
 800da72:	e720      	b.n	800d8b6 <__aeabi_fsub+0x152>
 800da74:	4663      	mov	r3, ip
 800da76:	000c      	movs	r4, r1
 800da78:	2501      	movs	r5, #1
 800da7a:	1ac3      	subs	r3, r0, r3
 800da7c:	e69b      	b.n	800d7b6 <__aeabi_fsub+0x52>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d099      	beq.n	800d9b6 <__aeabi_fsub+0x252>
 800da82:	000c      	movs	r4, r1
 800da84:	4646      	mov	r6, r8
 800da86:	2200      	movs	r2, #0
 800da88:	e6b7      	b.n	800d7fa <__aeabi_fsub+0x96>
 800da8a:	4646      	mov	r6, r8
 800da8c:	2200      	movs	r2, #0
 800da8e:	e6b4      	b.n	800d7fa <__aeabi_fsub+0x96>
 800da90:	2b00      	cmp	r3, #0
 800da92:	d000      	beq.n	800da96 <__aeabi_fsub+0x332>
 800da94:	e73f      	b.n	800d916 <__aeabi_fsub+0x1b2>
 800da96:	2400      	movs	r4, #0
 800da98:	2600      	movs	r6, #0
 800da9a:	e6ae      	b.n	800d7fa <__aeabi_fsub+0x96>
 800da9c:	fbffffff 	.word	0xfbffffff
 800daa0:	7dffffff 	.word	0x7dffffff

0800daa4 <__aeabi_f2iz>:
 800daa4:	0241      	lsls	r1, r0, #9
 800daa6:	0042      	lsls	r2, r0, #1
 800daa8:	0fc3      	lsrs	r3, r0, #31
 800daaa:	0a49      	lsrs	r1, r1, #9
 800daac:	2000      	movs	r0, #0
 800daae:	0e12      	lsrs	r2, r2, #24
 800dab0:	2a7e      	cmp	r2, #126	; 0x7e
 800dab2:	dd03      	ble.n	800dabc <__aeabi_f2iz+0x18>
 800dab4:	2a9d      	cmp	r2, #157	; 0x9d
 800dab6:	dd02      	ble.n	800dabe <__aeabi_f2iz+0x1a>
 800dab8:	4a09      	ldr	r2, [pc, #36]	; (800dae0 <__aeabi_f2iz+0x3c>)
 800daba:	1898      	adds	r0, r3, r2
 800dabc:	4770      	bx	lr
 800dabe:	2080      	movs	r0, #128	; 0x80
 800dac0:	0400      	lsls	r0, r0, #16
 800dac2:	4301      	orrs	r1, r0
 800dac4:	2a95      	cmp	r2, #149	; 0x95
 800dac6:	dc07      	bgt.n	800dad8 <__aeabi_f2iz+0x34>
 800dac8:	2096      	movs	r0, #150	; 0x96
 800daca:	1a82      	subs	r2, r0, r2
 800dacc:	40d1      	lsrs	r1, r2
 800dace:	4248      	negs	r0, r1
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1f3      	bne.n	800dabc <__aeabi_f2iz+0x18>
 800dad4:	0008      	movs	r0, r1
 800dad6:	e7f1      	b.n	800dabc <__aeabi_f2iz+0x18>
 800dad8:	3a96      	subs	r2, #150	; 0x96
 800dada:	4091      	lsls	r1, r2
 800dadc:	e7f7      	b.n	800dace <__aeabi_f2iz+0x2a>
 800dade:	46c0      	nop			; (mov r8, r8)
 800dae0:	7fffffff 	.word	0x7fffffff

0800dae4 <__aeabi_i2f>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	2800      	cmp	r0, #0
 800dae8:	d013      	beq.n	800db12 <__aeabi_i2f+0x2e>
 800daea:	17c3      	asrs	r3, r0, #31
 800daec:	18c5      	adds	r5, r0, r3
 800daee:	405d      	eors	r5, r3
 800daf0:	0fc4      	lsrs	r4, r0, #31
 800daf2:	0028      	movs	r0, r5
 800daf4:	f001 ffa6 	bl	800fa44 <__clzsi2>
 800daf8:	239e      	movs	r3, #158	; 0x9e
 800dafa:	0001      	movs	r1, r0
 800dafc:	1a1b      	subs	r3, r3, r0
 800dafe:	2b96      	cmp	r3, #150	; 0x96
 800db00:	dc0f      	bgt.n	800db22 <__aeabi_i2f+0x3e>
 800db02:	2808      	cmp	r0, #8
 800db04:	d031      	beq.n	800db6a <__aeabi_i2f+0x86>
 800db06:	3908      	subs	r1, #8
 800db08:	408d      	lsls	r5, r1
 800db0a:	026d      	lsls	r5, r5, #9
 800db0c:	0a6d      	lsrs	r5, r5, #9
 800db0e:	b2d8      	uxtb	r0, r3
 800db10:	e002      	b.n	800db18 <__aeabi_i2f+0x34>
 800db12:	2400      	movs	r4, #0
 800db14:	2000      	movs	r0, #0
 800db16:	2500      	movs	r5, #0
 800db18:	05c0      	lsls	r0, r0, #23
 800db1a:	4328      	orrs	r0, r5
 800db1c:	07e4      	lsls	r4, r4, #31
 800db1e:	4320      	orrs	r0, r4
 800db20:	bd70      	pop	{r4, r5, r6, pc}
 800db22:	2b99      	cmp	r3, #153	; 0x99
 800db24:	dd0c      	ble.n	800db40 <__aeabi_i2f+0x5c>
 800db26:	2205      	movs	r2, #5
 800db28:	1a12      	subs	r2, r2, r0
 800db2a:	0028      	movs	r0, r5
 800db2c:	40d0      	lsrs	r0, r2
 800db2e:	0002      	movs	r2, r0
 800db30:	0008      	movs	r0, r1
 800db32:	301b      	adds	r0, #27
 800db34:	4085      	lsls	r5, r0
 800db36:	0028      	movs	r0, r5
 800db38:	1e45      	subs	r5, r0, #1
 800db3a:	41a8      	sbcs	r0, r5
 800db3c:	4302      	orrs	r2, r0
 800db3e:	0015      	movs	r5, r2
 800db40:	2905      	cmp	r1, #5
 800db42:	dc16      	bgt.n	800db72 <__aeabi_i2f+0x8e>
 800db44:	002a      	movs	r2, r5
 800db46:	480f      	ldr	r0, [pc, #60]	; (800db84 <__aeabi_i2f+0xa0>)
 800db48:	4002      	ands	r2, r0
 800db4a:	076e      	lsls	r6, r5, #29
 800db4c:	d009      	beq.n	800db62 <__aeabi_i2f+0x7e>
 800db4e:	260f      	movs	r6, #15
 800db50:	4035      	ands	r5, r6
 800db52:	2d04      	cmp	r5, #4
 800db54:	d005      	beq.n	800db62 <__aeabi_i2f+0x7e>
 800db56:	3204      	adds	r2, #4
 800db58:	0155      	lsls	r5, r2, #5
 800db5a:	d502      	bpl.n	800db62 <__aeabi_i2f+0x7e>
 800db5c:	239f      	movs	r3, #159	; 0x9f
 800db5e:	4002      	ands	r2, r0
 800db60:	1a5b      	subs	r3, r3, r1
 800db62:	0192      	lsls	r2, r2, #6
 800db64:	0a55      	lsrs	r5, r2, #9
 800db66:	b2d8      	uxtb	r0, r3
 800db68:	e7d6      	b.n	800db18 <__aeabi_i2f+0x34>
 800db6a:	026d      	lsls	r5, r5, #9
 800db6c:	2096      	movs	r0, #150	; 0x96
 800db6e:	0a6d      	lsrs	r5, r5, #9
 800db70:	e7d2      	b.n	800db18 <__aeabi_i2f+0x34>
 800db72:	1f4a      	subs	r2, r1, #5
 800db74:	4095      	lsls	r5, r2
 800db76:	002a      	movs	r2, r5
 800db78:	4802      	ldr	r0, [pc, #8]	; (800db84 <__aeabi_i2f+0xa0>)
 800db7a:	4002      	ands	r2, r0
 800db7c:	076e      	lsls	r6, r5, #29
 800db7e:	d0f0      	beq.n	800db62 <__aeabi_i2f+0x7e>
 800db80:	e7e5      	b.n	800db4e <__aeabi_i2f+0x6a>
 800db82:	46c0      	nop			; (mov r8, r8)
 800db84:	fbffffff 	.word	0xfbffffff

0800db88 <__aeabi_ui2f>:
 800db88:	b570      	push	{r4, r5, r6, lr}
 800db8a:	1e04      	subs	r4, r0, #0
 800db8c:	d00e      	beq.n	800dbac <__aeabi_ui2f+0x24>
 800db8e:	f001 ff59 	bl	800fa44 <__clzsi2>
 800db92:	239e      	movs	r3, #158	; 0x9e
 800db94:	0001      	movs	r1, r0
 800db96:	1a1b      	subs	r3, r3, r0
 800db98:	2b96      	cmp	r3, #150	; 0x96
 800db9a:	dc0c      	bgt.n	800dbb6 <__aeabi_ui2f+0x2e>
 800db9c:	2808      	cmp	r0, #8
 800db9e:	d02c      	beq.n	800dbfa <__aeabi_ui2f+0x72>
 800dba0:	3908      	subs	r1, #8
 800dba2:	408c      	lsls	r4, r1
 800dba4:	0264      	lsls	r4, r4, #9
 800dba6:	0a64      	lsrs	r4, r4, #9
 800dba8:	b2d8      	uxtb	r0, r3
 800dbaa:	e001      	b.n	800dbb0 <__aeabi_ui2f+0x28>
 800dbac:	2000      	movs	r0, #0
 800dbae:	2400      	movs	r4, #0
 800dbb0:	05c0      	lsls	r0, r0, #23
 800dbb2:	4320      	orrs	r0, r4
 800dbb4:	bd70      	pop	{r4, r5, r6, pc}
 800dbb6:	2b99      	cmp	r3, #153	; 0x99
 800dbb8:	dd0a      	ble.n	800dbd0 <__aeabi_ui2f+0x48>
 800dbba:	0002      	movs	r2, r0
 800dbbc:	0020      	movs	r0, r4
 800dbbe:	321b      	adds	r2, #27
 800dbc0:	4090      	lsls	r0, r2
 800dbc2:	0002      	movs	r2, r0
 800dbc4:	1e50      	subs	r0, r2, #1
 800dbc6:	4182      	sbcs	r2, r0
 800dbc8:	2005      	movs	r0, #5
 800dbca:	1a40      	subs	r0, r0, r1
 800dbcc:	40c4      	lsrs	r4, r0
 800dbce:	4314      	orrs	r4, r2
 800dbd0:	2905      	cmp	r1, #5
 800dbd2:	dc16      	bgt.n	800dc02 <__aeabi_ui2f+0x7a>
 800dbd4:	0022      	movs	r2, r4
 800dbd6:	480f      	ldr	r0, [pc, #60]	; (800dc14 <__aeabi_ui2f+0x8c>)
 800dbd8:	4002      	ands	r2, r0
 800dbda:	0765      	lsls	r5, r4, #29
 800dbdc:	d009      	beq.n	800dbf2 <__aeabi_ui2f+0x6a>
 800dbde:	250f      	movs	r5, #15
 800dbe0:	402c      	ands	r4, r5
 800dbe2:	2c04      	cmp	r4, #4
 800dbe4:	d005      	beq.n	800dbf2 <__aeabi_ui2f+0x6a>
 800dbe6:	3204      	adds	r2, #4
 800dbe8:	0154      	lsls	r4, r2, #5
 800dbea:	d502      	bpl.n	800dbf2 <__aeabi_ui2f+0x6a>
 800dbec:	239f      	movs	r3, #159	; 0x9f
 800dbee:	4002      	ands	r2, r0
 800dbf0:	1a5b      	subs	r3, r3, r1
 800dbf2:	0192      	lsls	r2, r2, #6
 800dbf4:	0a54      	lsrs	r4, r2, #9
 800dbf6:	b2d8      	uxtb	r0, r3
 800dbf8:	e7da      	b.n	800dbb0 <__aeabi_ui2f+0x28>
 800dbfa:	0264      	lsls	r4, r4, #9
 800dbfc:	2096      	movs	r0, #150	; 0x96
 800dbfe:	0a64      	lsrs	r4, r4, #9
 800dc00:	e7d6      	b.n	800dbb0 <__aeabi_ui2f+0x28>
 800dc02:	1f4a      	subs	r2, r1, #5
 800dc04:	4094      	lsls	r4, r2
 800dc06:	0022      	movs	r2, r4
 800dc08:	4802      	ldr	r0, [pc, #8]	; (800dc14 <__aeabi_ui2f+0x8c>)
 800dc0a:	4002      	ands	r2, r0
 800dc0c:	0765      	lsls	r5, r4, #29
 800dc0e:	d0f0      	beq.n	800dbf2 <__aeabi_ui2f+0x6a>
 800dc10:	e7e5      	b.n	800dbde <__aeabi_ui2f+0x56>
 800dc12:	46c0      	nop			; (mov r8, r8)
 800dc14:	fbffffff 	.word	0xfbffffff

0800dc18 <__aeabi_dadd>:
 800dc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc1a:	464f      	mov	r7, r9
 800dc1c:	4646      	mov	r6, r8
 800dc1e:	46d6      	mov	lr, sl
 800dc20:	0004      	movs	r4, r0
 800dc22:	b5c0      	push	{r6, r7, lr}
 800dc24:	001f      	movs	r7, r3
 800dc26:	030b      	lsls	r3, r1, #12
 800dc28:	0010      	movs	r0, r2
 800dc2a:	004e      	lsls	r6, r1, #1
 800dc2c:	0a5b      	lsrs	r3, r3, #9
 800dc2e:	0fcd      	lsrs	r5, r1, #31
 800dc30:	0f61      	lsrs	r1, r4, #29
 800dc32:	007a      	lsls	r2, r7, #1
 800dc34:	4319      	orrs	r1, r3
 800dc36:	00e3      	lsls	r3, r4, #3
 800dc38:	033c      	lsls	r4, r7, #12
 800dc3a:	0fff      	lsrs	r7, r7, #31
 800dc3c:	46bc      	mov	ip, r7
 800dc3e:	0a64      	lsrs	r4, r4, #9
 800dc40:	0f47      	lsrs	r7, r0, #29
 800dc42:	4327      	orrs	r7, r4
 800dc44:	0d76      	lsrs	r6, r6, #21
 800dc46:	0d52      	lsrs	r2, r2, #21
 800dc48:	00c0      	lsls	r0, r0, #3
 800dc4a:	46b9      	mov	r9, r7
 800dc4c:	4680      	mov	r8, r0
 800dc4e:	1ab7      	subs	r7, r6, r2
 800dc50:	4565      	cmp	r5, ip
 800dc52:	d100      	bne.n	800dc56 <__aeabi_dadd+0x3e>
 800dc54:	e09b      	b.n	800dd8e <__aeabi_dadd+0x176>
 800dc56:	2f00      	cmp	r7, #0
 800dc58:	dc00      	bgt.n	800dc5c <__aeabi_dadd+0x44>
 800dc5a:	e084      	b.n	800dd66 <__aeabi_dadd+0x14e>
 800dc5c:	2a00      	cmp	r2, #0
 800dc5e:	d100      	bne.n	800dc62 <__aeabi_dadd+0x4a>
 800dc60:	e0be      	b.n	800dde0 <__aeabi_dadd+0x1c8>
 800dc62:	4ac8      	ldr	r2, [pc, #800]	; (800df84 <__aeabi_dadd+0x36c>)
 800dc64:	4296      	cmp	r6, r2
 800dc66:	d100      	bne.n	800dc6a <__aeabi_dadd+0x52>
 800dc68:	e124      	b.n	800deb4 <__aeabi_dadd+0x29c>
 800dc6a:	2280      	movs	r2, #128	; 0x80
 800dc6c:	464c      	mov	r4, r9
 800dc6e:	0412      	lsls	r2, r2, #16
 800dc70:	4314      	orrs	r4, r2
 800dc72:	46a1      	mov	r9, r4
 800dc74:	2f38      	cmp	r7, #56	; 0x38
 800dc76:	dd00      	ble.n	800dc7a <__aeabi_dadd+0x62>
 800dc78:	e167      	b.n	800df4a <__aeabi_dadd+0x332>
 800dc7a:	2f1f      	cmp	r7, #31
 800dc7c:	dd00      	ble.n	800dc80 <__aeabi_dadd+0x68>
 800dc7e:	e1d6      	b.n	800e02e <__aeabi_dadd+0x416>
 800dc80:	2220      	movs	r2, #32
 800dc82:	464c      	mov	r4, r9
 800dc84:	1bd2      	subs	r2, r2, r7
 800dc86:	4094      	lsls	r4, r2
 800dc88:	46a2      	mov	sl, r4
 800dc8a:	4644      	mov	r4, r8
 800dc8c:	40fc      	lsrs	r4, r7
 800dc8e:	0020      	movs	r0, r4
 800dc90:	4654      	mov	r4, sl
 800dc92:	4304      	orrs	r4, r0
 800dc94:	4640      	mov	r0, r8
 800dc96:	4090      	lsls	r0, r2
 800dc98:	1e42      	subs	r2, r0, #1
 800dc9a:	4190      	sbcs	r0, r2
 800dc9c:	464a      	mov	r2, r9
 800dc9e:	40fa      	lsrs	r2, r7
 800dca0:	4304      	orrs	r4, r0
 800dca2:	1a89      	subs	r1, r1, r2
 800dca4:	1b1c      	subs	r4, r3, r4
 800dca6:	42a3      	cmp	r3, r4
 800dca8:	4192      	sbcs	r2, r2
 800dcaa:	4252      	negs	r2, r2
 800dcac:	1a8b      	subs	r3, r1, r2
 800dcae:	469a      	mov	sl, r3
 800dcb0:	4653      	mov	r3, sl
 800dcb2:	021b      	lsls	r3, r3, #8
 800dcb4:	d400      	bmi.n	800dcb8 <__aeabi_dadd+0xa0>
 800dcb6:	e0d4      	b.n	800de62 <__aeabi_dadd+0x24a>
 800dcb8:	4653      	mov	r3, sl
 800dcba:	025a      	lsls	r2, r3, #9
 800dcbc:	0a53      	lsrs	r3, r2, #9
 800dcbe:	469a      	mov	sl, r3
 800dcc0:	4653      	mov	r3, sl
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d100      	bne.n	800dcc8 <__aeabi_dadd+0xb0>
 800dcc6:	e104      	b.n	800ded2 <__aeabi_dadd+0x2ba>
 800dcc8:	4650      	mov	r0, sl
 800dcca:	f001 febb 	bl	800fa44 <__clzsi2>
 800dcce:	0003      	movs	r3, r0
 800dcd0:	3b08      	subs	r3, #8
 800dcd2:	2220      	movs	r2, #32
 800dcd4:	0020      	movs	r0, r4
 800dcd6:	1ad2      	subs	r2, r2, r3
 800dcd8:	4651      	mov	r1, sl
 800dcda:	40d0      	lsrs	r0, r2
 800dcdc:	4099      	lsls	r1, r3
 800dcde:	0002      	movs	r2, r0
 800dce0:	409c      	lsls	r4, r3
 800dce2:	430a      	orrs	r2, r1
 800dce4:	42b3      	cmp	r3, r6
 800dce6:	da00      	bge.n	800dcea <__aeabi_dadd+0xd2>
 800dce8:	e102      	b.n	800def0 <__aeabi_dadd+0x2d8>
 800dcea:	1b9b      	subs	r3, r3, r6
 800dcec:	1c59      	adds	r1, r3, #1
 800dcee:	291f      	cmp	r1, #31
 800dcf0:	dd00      	ble.n	800dcf4 <__aeabi_dadd+0xdc>
 800dcf2:	e0a7      	b.n	800de44 <__aeabi_dadd+0x22c>
 800dcf4:	2320      	movs	r3, #32
 800dcf6:	0010      	movs	r0, r2
 800dcf8:	0026      	movs	r6, r4
 800dcfa:	1a5b      	subs	r3, r3, r1
 800dcfc:	409c      	lsls	r4, r3
 800dcfe:	4098      	lsls	r0, r3
 800dd00:	40ce      	lsrs	r6, r1
 800dd02:	40ca      	lsrs	r2, r1
 800dd04:	1e63      	subs	r3, r4, #1
 800dd06:	419c      	sbcs	r4, r3
 800dd08:	4330      	orrs	r0, r6
 800dd0a:	4692      	mov	sl, r2
 800dd0c:	2600      	movs	r6, #0
 800dd0e:	4304      	orrs	r4, r0
 800dd10:	0763      	lsls	r3, r4, #29
 800dd12:	d009      	beq.n	800dd28 <__aeabi_dadd+0x110>
 800dd14:	230f      	movs	r3, #15
 800dd16:	4023      	ands	r3, r4
 800dd18:	2b04      	cmp	r3, #4
 800dd1a:	d005      	beq.n	800dd28 <__aeabi_dadd+0x110>
 800dd1c:	1d23      	adds	r3, r4, #4
 800dd1e:	42a3      	cmp	r3, r4
 800dd20:	41a4      	sbcs	r4, r4
 800dd22:	4264      	negs	r4, r4
 800dd24:	44a2      	add	sl, r4
 800dd26:	001c      	movs	r4, r3
 800dd28:	4653      	mov	r3, sl
 800dd2a:	021b      	lsls	r3, r3, #8
 800dd2c:	d400      	bmi.n	800dd30 <__aeabi_dadd+0x118>
 800dd2e:	e09b      	b.n	800de68 <__aeabi_dadd+0x250>
 800dd30:	4b94      	ldr	r3, [pc, #592]	; (800df84 <__aeabi_dadd+0x36c>)
 800dd32:	3601      	adds	r6, #1
 800dd34:	429e      	cmp	r6, r3
 800dd36:	d100      	bne.n	800dd3a <__aeabi_dadd+0x122>
 800dd38:	e0b8      	b.n	800deac <__aeabi_dadd+0x294>
 800dd3a:	4653      	mov	r3, sl
 800dd3c:	4992      	ldr	r1, [pc, #584]	; (800df88 <__aeabi_dadd+0x370>)
 800dd3e:	08e4      	lsrs	r4, r4, #3
 800dd40:	400b      	ands	r3, r1
 800dd42:	0019      	movs	r1, r3
 800dd44:	075b      	lsls	r3, r3, #29
 800dd46:	4323      	orrs	r3, r4
 800dd48:	0572      	lsls	r2, r6, #21
 800dd4a:	024c      	lsls	r4, r1, #9
 800dd4c:	0b24      	lsrs	r4, r4, #12
 800dd4e:	0d52      	lsrs	r2, r2, #21
 800dd50:	0512      	lsls	r2, r2, #20
 800dd52:	07ed      	lsls	r5, r5, #31
 800dd54:	4322      	orrs	r2, r4
 800dd56:	432a      	orrs	r2, r5
 800dd58:	0018      	movs	r0, r3
 800dd5a:	0011      	movs	r1, r2
 800dd5c:	bce0      	pop	{r5, r6, r7}
 800dd5e:	46ba      	mov	sl, r7
 800dd60:	46b1      	mov	r9, r6
 800dd62:	46a8      	mov	r8, r5
 800dd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd66:	2f00      	cmp	r7, #0
 800dd68:	d048      	beq.n	800ddfc <__aeabi_dadd+0x1e4>
 800dd6a:	1b97      	subs	r7, r2, r6
 800dd6c:	2e00      	cmp	r6, #0
 800dd6e:	d000      	beq.n	800dd72 <__aeabi_dadd+0x15a>
 800dd70:	e10e      	b.n	800df90 <__aeabi_dadd+0x378>
 800dd72:	000c      	movs	r4, r1
 800dd74:	431c      	orrs	r4, r3
 800dd76:	d100      	bne.n	800dd7a <__aeabi_dadd+0x162>
 800dd78:	e1b7      	b.n	800e0ea <__aeabi_dadd+0x4d2>
 800dd7a:	1e7c      	subs	r4, r7, #1
 800dd7c:	2f01      	cmp	r7, #1
 800dd7e:	d100      	bne.n	800dd82 <__aeabi_dadd+0x16a>
 800dd80:	e226      	b.n	800e1d0 <__aeabi_dadd+0x5b8>
 800dd82:	4d80      	ldr	r5, [pc, #512]	; (800df84 <__aeabi_dadd+0x36c>)
 800dd84:	42af      	cmp	r7, r5
 800dd86:	d100      	bne.n	800dd8a <__aeabi_dadd+0x172>
 800dd88:	e1d5      	b.n	800e136 <__aeabi_dadd+0x51e>
 800dd8a:	0027      	movs	r7, r4
 800dd8c:	e107      	b.n	800df9e <__aeabi_dadd+0x386>
 800dd8e:	2f00      	cmp	r7, #0
 800dd90:	dc00      	bgt.n	800dd94 <__aeabi_dadd+0x17c>
 800dd92:	e0b2      	b.n	800defa <__aeabi_dadd+0x2e2>
 800dd94:	2a00      	cmp	r2, #0
 800dd96:	d047      	beq.n	800de28 <__aeabi_dadd+0x210>
 800dd98:	4a7a      	ldr	r2, [pc, #488]	; (800df84 <__aeabi_dadd+0x36c>)
 800dd9a:	4296      	cmp	r6, r2
 800dd9c:	d100      	bne.n	800dda0 <__aeabi_dadd+0x188>
 800dd9e:	e089      	b.n	800deb4 <__aeabi_dadd+0x29c>
 800dda0:	2280      	movs	r2, #128	; 0x80
 800dda2:	464c      	mov	r4, r9
 800dda4:	0412      	lsls	r2, r2, #16
 800dda6:	4314      	orrs	r4, r2
 800dda8:	46a1      	mov	r9, r4
 800ddaa:	2f38      	cmp	r7, #56	; 0x38
 800ddac:	dc6b      	bgt.n	800de86 <__aeabi_dadd+0x26e>
 800ddae:	2f1f      	cmp	r7, #31
 800ddb0:	dc00      	bgt.n	800ddb4 <__aeabi_dadd+0x19c>
 800ddb2:	e16e      	b.n	800e092 <__aeabi_dadd+0x47a>
 800ddb4:	003a      	movs	r2, r7
 800ddb6:	4648      	mov	r0, r9
 800ddb8:	3a20      	subs	r2, #32
 800ddba:	40d0      	lsrs	r0, r2
 800ddbc:	4684      	mov	ip, r0
 800ddbe:	2f20      	cmp	r7, #32
 800ddc0:	d007      	beq.n	800ddd2 <__aeabi_dadd+0x1ba>
 800ddc2:	2240      	movs	r2, #64	; 0x40
 800ddc4:	4648      	mov	r0, r9
 800ddc6:	1bd2      	subs	r2, r2, r7
 800ddc8:	4090      	lsls	r0, r2
 800ddca:	0002      	movs	r2, r0
 800ddcc:	4640      	mov	r0, r8
 800ddce:	4310      	orrs	r0, r2
 800ddd0:	4680      	mov	r8, r0
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	1e42      	subs	r2, r0, #1
 800ddd6:	4190      	sbcs	r0, r2
 800ddd8:	4662      	mov	r2, ip
 800ddda:	0004      	movs	r4, r0
 800dddc:	4314      	orrs	r4, r2
 800ddde:	e057      	b.n	800de90 <__aeabi_dadd+0x278>
 800dde0:	464a      	mov	r2, r9
 800dde2:	4302      	orrs	r2, r0
 800dde4:	d100      	bne.n	800dde8 <__aeabi_dadd+0x1d0>
 800dde6:	e103      	b.n	800dff0 <__aeabi_dadd+0x3d8>
 800dde8:	1e7a      	subs	r2, r7, #1
 800ddea:	2f01      	cmp	r7, #1
 800ddec:	d100      	bne.n	800ddf0 <__aeabi_dadd+0x1d8>
 800ddee:	e193      	b.n	800e118 <__aeabi_dadd+0x500>
 800ddf0:	4c64      	ldr	r4, [pc, #400]	; (800df84 <__aeabi_dadd+0x36c>)
 800ddf2:	42a7      	cmp	r7, r4
 800ddf4:	d100      	bne.n	800ddf8 <__aeabi_dadd+0x1e0>
 800ddf6:	e18a      	b.n	800e10e <__aeabi_dadd+0x4f6>
 800ddf8:	0017      	movs	r7, r2
 800ddfa:	e73b      	b.n	800dc74 <__aeabi_dadd+0x5c>
 800ddfc:	4c63      	ldr	r4, [pc, #396]	; (800df8c <__aeabi_dadd+0x374>)
 800ddfe:	1c72      	adds	r2, r6, #1
 800de00:	4222      	tst	r2, r4
 800de02:	d000      	beq.n	800de06 <__aeabi_dadd+0x1ee>
 800de04:	e0e0      	b.n	800dfc8 <__aeabi_dadd+0x3b0>
 800de06:	000a      	movs	r2, r1
 800de08:	431a      	orrs	r2, r3
 800de0a:	2e00      	cmp	r6, #0
 800de0c:	d000      	beq.n	800de10 <__aeabi_dadd+0x1f8>
 800de0e:	e174      	b.n	800e0fa <__aeabi_dadd+0x4e2>
 800de10:	2a00      	cmp	r2, #0
 800de12:	d100      	bne.n	800de16 <__aeabi_dadd+0x1fe>
 800de14:	e1d0      	b.n	800e1b8 <__aeabi_dadd+0x5a0>
 800de16:	464a      	mov	r2, r9
 800de18:	4302      	orrs	r2, r0
 800de1a:	d000      	beq.n	800de1e <__aeabi_dadd+0x206>
 800de1c:	e1e3      	b.n	800e1e6 <__aeabi_dadd+0x5ce>
 800de1e:	074a      	lsls	r2, r1, #29
 800de20:	08db      	lsrs	r3, r3, #3
 800de22:	4313      	orrs	r3, r2
 800de24:	08c9      	lsrs	r1, r1, #3
 800de26:	e029      	b.n	800de7c <__aeabi_dadd+0x264>
 800de28:	464a      	mov	r2, r9
 800de2a:	4302      	orrs	r2, r0
 800de2c:	d100      	bne.n	800de30 <__aeabi_dadd+0x218>
 800de2e:	e17d      	b.n	800e12c <__aeabi_dadd+0x514>
 800de30:	1e7a      	subs	r2, r7, #1
 800de32:	2f01      	cmp	r7, #1
 800de34:	d100      	bne.n	800de38 <__aeabi_dadd+0x220>
 800de36:	e0e0      	b.n	800dffa <__aeabi_dadd+0x3e2>
 800de38:	4c52      	ldr	r4, [pc, #328]	; (800df84 <__aeabi_dadd+0x36c>)
 800de3a:	42a7      	cmp	r7, r4
 800de3c:	d100      	bne.n	800de40 <__aeabi_dadd+0x228>
 800de3e:	e166      	b.n	800e10e <__aeabi_dadd+0x4f6>
 800de40:	0017      	movs	r7, r2
 800de42:	e7b2      	b.n	800ddaa <__aeabi_dadd+0x192>
 800de44:	0010      	movs	r0, r2
 800de46:	3b1f      	subs	r3, #31
 800de48:	40d8      	lsrs	r0, r3
 800de4a:	2920      	cmp	r1, #32
 800de4c:	d003      	beq.n	800de56 <__aeabi_dadd+0x23e>
 800de4e:	2340      	movs	r3, #64	; 0x40
 800de50:	1a5b      	subs	r3, r3, r1
 800de52:	409a      	lsls	r2, r3
 800de54:	4314      	orrs	r4, r2
 800de56:	1e63      	subs	r3, r4, #1
 800de58:	419c      	sbcs	r4, r3
 800de5a:	2300      	movs	r3, #0
 800de5c:	2600      	movs	r6, #0
 800de5e:	469a      	mov	sl, r3
 800de60:	4304      	orrs	r4, r0
 800de62:	0763      	lsls	r3, r4, #29
 800de64:	d000      	beq.n	800de68 <__aeabi_dadd+0x250>
 800de66:	e755      	b.n	800dd14 <__aeabi_dadd+0xfc>
 800de68:	4652      	mov	r2, sl
 800de6a:	08e3      	lsrs	r3, r4, #3
 800de6c:	0752      	lsls	r2, r2, #29
 800de6e:	4313      	orrs	r3, r2
 800de70:	4652      	mov	r2, sl
 800de72:	0037      	movs	r7, r6
 800de74:	08d1      	lsrs	r1, r2, #3
 800de76:	4a43      	ldr	r2, [pc, #268]	; (800df84 <__aeabi_dadd+0x36c>)
 800de78:	4297      	cmp	r7, r2
 800de7a:	d01f      	beq.n	800debc <__aeabi_dadd+0x2a4>
 800de7c:	0309      	lsls	r1, r1, #12
 800de7e:	057a      	lsls	r2, r7, #21
 800de80:	0b0c      	lsrs	r4, r1, #12
 800de82:	0d52      	lsrs	r2, r2, #21
 800de84:	e764      	b.n	800dd50 <__aeabi_dadd+0x138>
 800de86:	4642      	mov	r2, r8
 800de88:	464c      	mov	r4, r9
 800de8a:	4314      	orrs	r4, r2
 800de8c:	1e62      	subs	r2, r4, #1
 800de8e:	4194      	sbcs	r4, r2
 800de90:	18e4      	adds	r4, r4, r3
 800de92:	429c      	cmp	r4, r3
 800de94:	4192      	sbcs	r2, r2
 800de96:	4252      	negs	r2, r2
 800de98:	4692      	mov	sl, r2
 800de9a:	448a      	add	sl, r1
 800de9c:	4653      	mov	r3, sl
 800de9e:	021b      	lsls	r3, r3, #8
 800dea0:	d5df      	bpl.n	800de62 <__aeabi_dadd+0x24a>
 800dea2:	4b38      	ldr	r3, [pc, #224]	; (800df84 <__aeabi_dadd+0x36c>)
 800dea4:	3601      	adds	r6, #1
 800dea6:	429e      	cmp	r6, r3
 800dea8:	d000      	beq.n	800deac <__aeabi_dadd+0x294>
 800deaa:	e0b3      	b.n	800e014 <__aeabi_dadd+0x3fc>
 800deac:	0032      	movs	r2, r6
 800deae:	2400      	movs	r4, #0
 800deb0:	2300      	movs	r3, #0
 800deb2:	e74d      	b.n	800dd50 <__aeabi_dadd+0x138>
 800deb4:	074a      	lsls	r2, r1, #29
 800deb6:	08db      	lsrs	r3, r3, #3
 800deb8:	4313      	orrs	r3, r2
 800deba:	08c9      	lsrs	r1, r1, #3
 800debc:	001a      	movs	r2, r3
 800debe:	430a      	orrs	r2, r1
 800dec0:	d100      	bne.n	800dec4 <__aeabi_dadd+0x2ac>
 800dec2:	e200      	b.n	800e2c6 <__aeabi_dadd+0x6ae>
 800dec4:	2480      	movs	r4, #128	; 0x80
 800dec6:	0324      	lsls	r4, r4, #12
 800dec8:	430c      	orrs	r4, r1
 800deca:	0324      	lsls	r4, r4, #12
 800decc:	4a2d      	ldr	r2, [pc, #180]	; (800df84 <__aeabi_dadd+0x36c>)
 800dece:	0b24      	lsrs	r4, r4, #12
 800ded0:	e73e      	b.n	800dd50 <__aeabi_dadd+0x138>
 800ded2:	0020      	movs	r0, r4
 800ded4:	f001 fdb6 	bl	800fa44 <__clzsi2>
 800ded8:	0003      	movs	r3, r0
 800deda:	3318      	adds	r3, #24
 800dedc:	2b1f      	cmp	r3, #31
 800dede:	dc00      	bgt.n	800dee2 <__aeabi_dadd+0x2ca>
 800dee0:	e6f7      	b.n	800dcd2 <__aeabi_dadd+0xba>
 800dee2:	0022      	movs	r2, r4
 800dee4:	3808      	subs	r0, #8
 800dee6:	4082      	lsls	r2, r0
 800dee8:	2400      	movs	r4, #0
 800deea:	42b3      	cmp	r3, r6
 800deec:	db00      	blt.n	800def0 <__aeabi_dadd+0x2d8>
 800deee:	e6fc      	b.n	800dcea <__aeabi_dadd+0xd2>
 800def0:	1af6      	subs	r6, r6, r3
 800def2:	4b25      	ldr	r3, [pc, #148]	; (800df88 <__aeabi_dadd+0x370>)
 800def4:	401a      	ands	r2, r3
 800def6:	4692      	mov	sl, r2
 800def8:	e70a      	b.n	800dd10 <__aeabi_dadd+0xf8>
 800defa:	2f00      	cmp	r7, #0
 800defc:	d02b      	beq.n	800df56 <__aeabi_dadd+0x33e>
 800defe:	1b97      	subs	r7, r2, r6
 800df00:	2e00      	cmp	r6, #0
 800df02:	d100      	bne.n	800df06 <__aeabi_dadd+0x2ee>
 800df04:	e0b8      	b.n	800e078 <__aeabi_dadd+0x460>
 800df06:	4c1f      	ldr	r4, [pc, #124]	; (800df84 <__aeabi_dadd+0x36c>)
 800df08:	42a2      	cmp	r2, r4
 800df0a:	d100      	bne.n	800df0e <__aeabi_dadd+0x2f6>
 800df0c:	e11c      	b.n	800e148 <__aeabi_dadd+0x530>
 800df0e:	2480      	movs	r4, #128	; 0x80
 800df10:	0424      	lsls	r4, r4, #16
 800df12:	4321      	orrs	r1, r4
 800df14:	2f38      	cmp	r7, #56	; 0x38
 800df16:	dd00      	ble.n	800df1a <__aeabi_dadd+0x302>
 800df18:	e11e      	b.n	800e158 <__aeabi_dadd+0x540>
 800df1a:	2f1f      	cmp	r7, #31
 800df1c:	dd00      	ble.n	800df20 <__aeabi_dadd+0x308>
 800df1e:	e19e      	b.n	800e25e <__aeabi_dadd+0x646>
 800df20:	2620      	movs	r6, #32
 800df22:	000c      	movs	r4, r1
 800df24:	1bf6      	subs	r6, r6, r7
 800df26:	0018      	movs	r0, r3
 800df28:	40b3      	lsls	r3, r6
 800df2a:	40b4      	lsls	r4, r6
 800df2c:	40f8      	lsrs	r0, r7
 800df2e:	1e5e      	subs	r6, r3, #1
 800df30:	41b3      	sbcs	r3, r6
 800df32:	40f9      	lsrs	r1, r7
 800df34:	4304      	orrs	r4, r0
 800df36:	431c      	orrs	r4, r3
 800df38:	4489      	add	r9, r1
 800df3a:	4444      	add	r4, r8
 800df3c:	4544      	cmp	r4, r8
 800df3e:	419b      	sbcs	r3, r3
 800df40:	425b      	negs	r3, r3
 800df42:	444b      	add	r3, r9
 800df44:	469a      	mov	sl, r3
 800df46:	0016      	movs	r6, r2
 800df48:	e7a8      	b.n	800de9c <__aeabi_dadd+0x284>
 800df4a:	4642      	mov	r2, r8
 800df4c:	464c      	mov	r4, r9
 800df4e:	4314      	orrs	r4, r2
 800df50:	1e62      	subs	r2, r4, #1
 800df52:	4194      	sbcs	r4, r2
 800df54:	e6a6      	b.n	800dca4 <__aeabi_dadd+0x8c>
 800df56:	4c0d      	ldr	r4, [pc, #52]	; (800df8c <__aeabi_dadd+0x374>)
 800df58:	1c72      	adds	r2, r6, #1
 800df5a:	4222      	tst	r2, r4
 800df5c:	d000      	beq.n	800df60 <__aeabi_dadd+0x348>
 800df5e:	e0a8      	b.n	800e0b2 <__aeabi_dadd+0x49a>
 800df60:	000a      	movs	r2, r1
 800df62:	431a      	orrs	r2, r3
 800df64:	2e00      	cmp	r6, #0
 800df66:	d000      	beq.n	800df6a <__aeabi_dadd+0x352>
 800df68:	e10a      	b.n	800e180 <__aeabi_dadd+0x568>
 800df6a:	2a00      	cmp	r2, #0
 800df6c:	d100      	bne.n	800df70 <__aeabi_dadd+0x358>
 800df6e:	e15e      	b.n	800e22e <__aeabi_dadd+0x616>
 800df70:	464a      	mov	r2, r9
 800df72:	4302      	orrs	r2, r0
 800df74:	d000      	beq.n	800df78 <__aeabi_dadd+0x360>
 800df76:	e161      	b.n	800e23c <__aeabi_dadd+0x624>
 800df78:	074a      	lsls	r2, r1, #29
 800df7a:	08db      	lsrs	r3, r3, #3
 800df7c:	4313      	orrs	r3, r2
 800df7e:	08c9      	lsrs	r1, r1, #3
 800df80:	e77c      	b.n	800de7c <__aeabi_dadd+0x264>
 800df82:	46c0      	nop			; (mov r8, r8)
 800df84:	000007ff 	.word	0x000007ff
 800df88:	ff7fffff 	.word	0xff7fffff
 800df8c:	000007fe 	.word	0x000007fe
 800df90:	4ccf      	ldr	r4, [pc, #828]	; (800e2d0 <__aeabi_dadd+0x6b8>)
 800df92:	42a2      	cmp	r2, r4
 800df94:	d100      	bne.n	800df98 <__aeabi_dadd+0x380>
 800df96:	e0ce      	b.n	800e136 <__aeabi_dadd+0x51e>
 800df98:	2480      	movs	r4, #128	; 0x80
 800df9a:	0424      	lsls	r4, r4, #16
 800df9c:	4321      	orrs	r1, r4
 800df9e:	2f38      	cmp	r7, #56	; 0x38
 800dfa0:	dc5b      	bgt.n	800e05a <__aeabi_dadd+0x442>
 800dfa2:	2f1f      	cmp	r7, #31
 800dfa4:	dd00      	ble.n	800dfa8 <__aeabi_dadd+0x390>
 800dfa6:	e0dc      	b.n	800e162 <__aeabi_dadd+0x54a>
 800dfa8:	2520      	movs	r5, #32
 800dfaa:	000c      	movs	r4, r1
 800dfac:	1bed      	subs	r5, r5, r7
 800dfae:	001e      	movs	r6, r3
 800dfb0:	40ab      	lsls	r3, r5
 800dfb2:	40ac      	lsls	r4, r5
 800dfb4:	40fe      	lsrs	r6, r7
 800dfb6:	1e5d      	subs	r5, r3, #1
 800dfb8:	41ab      	sbcs	r3, r5
 800dfba:	4334      	orrs	r4, r6
 800dfbc:	40f9      	lsrs	r1, r7
 800dfbe:	431c      	orrs	r4, r3
 800dfc0:	464b      	mov	r3, r9
 800dfc2:	1a5b      	subs	r3, r3, r1
 800dfc4:	4699      	mov	r9, r3
 800dfc6:	e04c      	b.n	800e062 <__aeabi_dadd+0x44a>
 800dfc8:	464a      	mov	r2, r9
 800dfca:	1a1c      	subs	r4, r3, r0
 800dfcc:	1a88      	subs	r0, r1, r2
 800dfce:	42a3      	cmp	r3, r4
 800dfd0:	4192      	sbcs	r2, r2
 800dfd2:	4252      	negs	r2, r2
 800dfd4:	4692      	mov	sl, r2
 800dfd6:	0002      	movs	r2, r0
 800dfd8:	4650      	mov	r0, sl
 800dfda:	1a12      	subs	r2, r2, r0
 800dfdc:	4692      	mov	sl, r2
 800dfde:	0212      	lsls	r2, r2, #8
 800dfe0:	d478      	bmi.n	800e0d4 <__aeabi_dadd+0x4bc>
 800dfe2:	4653      	mov	r3, sl
 800dfe4:	4323      	orrs	r3, r4
 800dfe6:	d000      	beq.n	800dfea <__aeabi_dadd+0x3d2>
 800dfe8:	e66a      	b.n	800dcc0 <__aeabi_dadd+0xa8>
 800dfea:	2100      	movs	r1, #0
 800dfec:	2500      	movs	r5, #0
 800dfee:	e745      	b.n	800de7c <__aeabi_dadd+0x264>
 800dff0:	074a      	lsls	r2, r1, #29
 800dff2:	08db      	lsrs	r3, r3, #3
 800dff4:	4313      	orrs	r3, r2
 800dff6:	08c9      	lsrs	r1, r1, #3
 800dff8:	e73d      	b.n	800de76 <__aeabi_dadd+0x25e>
 800dffa:	181c      	adds	r4, r3, r0
 800dffc:	429c      	cmp	r4, r3
 800dffe:	419b      	sbcs	r3, r3
 800e000:	4449      	add	r1, r9
 800e002:	468a      	mov	sl, r1
 800e004:	425b      	negs	r3, r3
 800e006:	449a      	add	sl, r3
 800e008:	4653      	mov	r3, sl
 800e00a:	2601      	movs	r6, #1
 800e00c:	021b      	lsls	r3, r3, #8
 800e00e:	d400      	bmi.n	800e012 <__aeabi_dadd+0x3fa>
 800e010:	e727      	b.n	800de62 <__aeabi_dadd+0x24a>
 800e012:	2602      	movs	r6, #2
 800e014:	4652      	mov	r2, sl
 800e016:	4baf      	ldr	r3, [pc, #700]	; (800e2d4 <__aeabi_dadd+0x6bc>)
 800e018:	2101      	movs	r1, #1
 800e01a:	401a      	ands	r2, r3
 800e01c:	0013      	movs	r3, r2
 800e01e:	4021      	ands	r1, r4
 800e020:	0862      	lsrs	r2, r4, #1
 800e022:	430a      	orrs	r2, r1
 800e024:	07dc      	lsls	r4, r3, #31
 800e026:	085b      	lsrs	r3, r3, #1
 800e028:	469a      	mov	sl, r3
 800e02a:	4314      	orrs	r4, r2
 800e02c:	e670      	b.n	800dd10 <__aeabi_dadd+0xf8>
 800e02e:	003a      	movs	r2, r7
 800e030:	464c      	mov	r4, r9
 800e032:	3a20      	subs	r2, #32
 800e034:	40d4      	lsrs	r4, r2
 800e036:	46a4      	mov	ip, r4
 800e038:	2f20      	cmp	r7, #32
 800e03a:	d007      	beq.n	800e04c <__aeabi_dadd+0x434>
 800e03c:	2240      	movs	r2, #64	; 0x40
 800e03e:	4648      	mov	r0, r9
 800e040:	1bd2      	subs	r2, r2, r7
 800e042:	4090      	lsls	r0, r2
 800e044:	0002      	movs	r2, r0
 800e046:	4640      	mov	r0, r8
 800e048:	4310      	orrs	r0, r2
 800e04a:	4680      	mov	r8, r0
 800e04c:	4640      	mov	r0, r8
 800e04e:	1e42      	subs	r2, r0, #1
 800e050:	4190      	sbcs	r0, r2
 800e052:	4662      	mov	r2, ip
 800e054:	0004      	movs	r4, r0
 800e056:	4314      	orrs	r4, r2
 800e058:	e624      	b.n	800dca4 <__aeabi_dadd+0x8c>
 800e05a:	4319      	orrs	r1, r3
 800e05c:	000c      	movs	r4, r1
 800e05e:	1e63      	subs	r3, r4, #1
 800e060:	419c      	sbcs	r4, r3
 800e062:	4643      	mov	r3, r8
 800e064:	1b1c      	subs	r4, r3, r4
 800e066:	45a0      	cmp	r8, r4
 800e068:	419b      	sbcs	r3, r3
 800e06a:	4649      	mov	r1, r9
 800e06c:	425b      	negs	r3, r3
 800e06e:	1acb      	subs	r3, r1, r3
 800e070:	469a      	mov	sl, r3
 800e072:	4665      	mov	r5, ip
 800e074:	0016      	movs	r6, r2
 800e076:	e61b      	b.n	800dcb0 <__aeabi_dadd+0x98>
 800e078:	000c      	movs	r4, r1
 800e07a:	431c      	orrs	r4, r3
 800e07c:	d100      	bne.n	800e080 <__aeabi_dadd+0x468>
 800e07e:	e0c7      	b.n	800e210 <__aeabi_dadd+0x5f8>
 800e080:	1e7c      	subs	r4, r7, #1
 800e082:	2f01      	cmp	r7, #1
 800e084:	d100      	bne.n	800e088 <__aeabi_dadd+0x470>
 800e086:	e0f9      	b.n	800e27c <__aeabi_dadd+0x664>
 800e088:	4e91      	ldr	r6, [pc, #580]	; (800e2d0 <__aeabi_dadd+0x6b8>)
 800e08a:	42b7      	cmp	r7, r6
 800e08c:	d05c      	beq.n	800e148 <__aeabi_dadd+0x530>
 800e08e:	0027      	movs	r7, r4
 800e090:	e740      	b.n	800df14 <__aeabi_dadd+0x2fc>
 800e092:	2220      	movs	r2, #32
 800e094:	464c      	mov	r4, r9
 800e096:	4640      	mov	r0, r8
 800e098:	1bd2      	subs	r2, r2, r7
 800e09a:	4094      	lsls	r4, r2
 800e09c:	40f8      	lsrs	r0, r7
 800e09e:	4304      	orrs	r4, r0
 800e0a0:	4640      	mov	r0, r8
 800e0a2:	4090      	lsls	r0, r2
 800e0a4:	1e42      	subs	r2, r0, #1
 800e0a6:	4190      	sbcs	r0, r2
 800e0a8:	464a      	mov	r2, r9
 800e0aa:	40fa      	lsrs	r2, r7
 800e0ac:	4304      	orrs	r4, r0
 800e0ae:	1889      	adds	r1, r1, r2
 800e0b0:	e6ee      	b.n	800de90 <__aeabi_dadd+0x278>
 800e0b2:	4c87      	ldr	r4, [pc, #540]	; (800e2d0 <__aeabi_dadd+0x6b8>)
 800e0b4:	42a2      	cmp	r2, r4
 800e0b6:	d100      	bne.n	800e0ba <__aeabi_dadd+0x4a2>
 800e0b8:	e6f9      	b.n	800deae <__aeabi_dadd+0x296>
 800e0ba:	1818      	adds	r0, r3, r0
 800e0bc:	4298      	cmp	r0, r3
 800e0be:	419b      	sbcs	r3, r3
 800e0c0:	4449      	add	r1, r9
 800e0c2:	425b      	negs	r3, r3
 800e0c4:	18cb      	adds	r3, r1, r3
 800e0c6:	07dc      	lsls	r4, r3, #31
 800e0c8:	0840      	lsrs	r0, r0, #1
 800e0ca:	085b      	lsrs	r3, r3, #1
 800e0cc:	469a      	mov	sl, r3
 800e0ce:	0016      	movs	r6, r2
 800e0d0:	4304      	orrs	r4, r0
 800e0d2:	e6c6      	b.n	800de62 <__aeabi_dadd+0x24a>
 800e0d4:	4642      	mov	r2, r8
 800e0d6:	1ad4      	subs	r4, r2, r3
 800e0d8:	45a0      	cmp	r8, r4
 800e0da:	4180      	sbcs	r0, r0
 800e0dc:	464b      	mov	r3, r9
 800e0de:	4240      	negs	r0, r0
 800e0e0:	1a59      	subs	r1, r3, r1
 800e0e2:	1a0b      	subs	r3, r1, r0
 800e0e4:	469a      	mov	sl, r3
 800e0e6:	4665      	mov	r5, ip
 800e0e8:	e5ea      	b.n	800dcc0 <__aeabi_dadd+0xa8>
 800e0ea:	464b      	mov	r3, r9
 800e0ec:	464a      	mov	r2, r9
 800e0ee:	08c0      	lsrs	r0, r0, #3
 800e0f0:	075b      	lsls	r3, r3, #29
 800e0f2:	4665      	mov	r5, ip
 800e0f4:	4303      	orrs	r3, r0
 800e0f6:	08d1      	lsrs	r1, r2, #3
 800e0f8:	e6bd      	b.n	800de76 <__aeabi_dadd+0x25e>
 800e0fa:	2a00      	cmp	r2, #0
 800e0fc:	d000      	beq.n	800e100 <__aeabi_dadd+0x4e8>
 800e0fe:	e08e      	b.n	800e21e <__aeabi_dadd+0x606>
 800e100:	464b      	mov	r3, r9
 800e102:	4303      	orrs	r3, r0
 800e104:	d117      	bne.n	800e136 <__aeabi_dadd+0x51e>
 800e106:	2180      	movs	r1, #128	; 0x80
 800e108:	2500      	movs	r5, #0
 800e10a:	0309      	lsls	r1, r1, #12
 800e10c:	e6da      	b.n	800dec4 <__aeabi_dadd+0x2ac>
 800e10e:	074a      	lsls	r2, r1, #29
 800e110:	08db      	lsrs	r3, r3, #3
 800e112:	4313      	orrs	r3, r2
 800e114:	08c9      	lsrs	r1, r1, #3
 800e116:	e6d1      	b.n	800debc <__aeabi_dadd+0x2a4>
 800e118:	1a1c      	subs	r4, r3, r0
 800e11a:	464a      	mov	r2, r9
 800e11c:	42a3      	cmp	r3, r4
 800e11e:	419b      	sbcs	r3, r3
 800e120:	1a89      	subs	r1, r1, r2
 800e122:	425b      	negs	r3, r3
 800e124:	1acb      	subs	r3, r1, r3
 800e126:	469a      	mov	sl, r3
 800e128:	2601      	movs	r6, #1
 800e12a:	e5c1      	b.n	800dcb0 <__aeabi_dadd+0x98>
 800e12c:	074a      	lsls	r2, r1, #29
 800e12e:	08db      	lsrs	r3, r3, #3
 800e130:	4313      	orrs	r3, r2
 800e132:	08c9      	lsrs	r1, r1, #3
 800e134:	e69f      	b.n	800de76 <__aeabi_dadd+0x25e>
 800e136:	4643      	mov	r3, r8
 800e138:	08d8      	lsrs	r0, r3, #3
 800e13a:	464b      	mov	r3, r9
 800e13c:	464a      	mov	r2, r9
 800e13e:	075b      	lsls	r3, r3, #29
 800e140:	4665      	mov	r5, ip
 800e142:	4303      	orrs	r3, r0
 800e144:	08d1      	lsrs	r1, r2, #3
 800e146:	e6b9      	b.n	800debc <__aeabi_dadd+0x2a4>
 800e148:	4643      	mov	r3, r8
 800e14a:	08d8      	lsrs	r0, r3, #3
 800e14c:	464b      	mov	r3, r9
 800e14e:	464a      	mov	r2, r9
 800e150:	075b      	lsls	r3, r3, #29
 800e152:	4303      	orrs	r3, r0
 800e154:	08d1      	lsrs	r1, r2, #3
 800e156:	e6b1      	b.n	800debc <__aeabi_dadd+0x2a4>
 800e158:	4319      	orrs	r1, r3
 800e15a:	000c      	movs	r4, r1
 800e15c:	1e63      	subs	r3, r4, #1
 800e15e:	419c      	sbcs	r4, r3
 800e160:	e6eb      	b.n	800df3a <__aeabi_dadd+0x322>
 800e162:	003c      	movs	r4, r7
 800e164:	000d      	movs	r5, r1
 800e166:	3c20      	subs	r4, #32
 800e168:	40e5      	lsrs	r5, r4
 800e16a:	2f20      	cmp	r7, #32
 800e16c:	d003      	beq.n	800e176 <__aeabi_dadd+0x55e>
 800e16e:	2440      	movs	r4, #64	; 0x40
 800e170:	1be4      	subs	r4, r4, r7
 800e172:	40a1      	lsls	r1, r4
 800e174:	430b      	orrs	r3, r1
 800e176:	001c      	movs	r4, r3
 800e178:	1e63      	subs	r3, r4, #1
 800e17a:	419c      	sbcs	r4, r3
 800e17c:	432c      	orrs	r4, r5
 800e17e:	e770      	b.n	800e062 <__aeabi_dadd+0x44a>
 800e180:	2a00      	cmp	r2, #0
 800e182:	d0e1      	beq.n	800e148 <__aeabi_dadd+0x530>
 800e184:	464a      	mov	r2, r9
 800e186:	4302      	orrs	r2, r0
 800e188:	d0c1      	beq.n	800e10e <__aeabi_dadd+0x4f6>
 800e18a:	074a      	lsls	r2, r1, #29
 800e18c:	08db      	lsrs	r3, r3, #3
 800e18e:	4313      	orrs	r3, r2
 800e190:	2280      	movs	r2, #128	; 0x80
 800e192:	08c9      	lsrs	r1, r1, #3
 800e194:	0312      	lsls	r2, r2, #12
 800e196:	4211      	tst	r1, r2
 800e198:	d008      	beq.n	800e1ac <__aeabi_dadd+0x594>
 800e19a:	4648      	mov	r0, r9
 800e19c:	08c4      	lsrs	r4, r0, #3
 800e19e:	4214      	tst	r4, r2
 800e1a0:	d104      	bne.n	800e1ac <__aeabi_dadd+0x594>
 800e1a2:	4643      	mov	r3, r8
 800e1a4:	0021      	movs	r1, r4
 800e1a6:	08db      	lsrs	r3, r3, #3
 800e1a8:	0742      	lsls	r2, r0, #29
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	0f5a      	lsrs	r2, r3, #29
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	0752      	lsls	r2, r2, #29
 800e1b2:	08db      	lsrs	r3, r3, #3
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	e681      	b.n	800debc <__aeabi_dadd+0x2a4>
 800e1b8:	464b      	mov	r3, r9
 800e1ba:	4303      	orrs	r3, r0
 800e1bc:	d100      	bne.n	800e1c0 <__aeabi_dadd+0x5a8>
 800e1be:	e714      	b.n	800dfea <__aeabi_dadd+0x3d2>
 800e1c0:	464b      	mov	r3, r9
 800e1c2:	464a      	mov	r2, r9
 800e1c4:	08c0      	lsrs	r0, r0, #3
 800e1c6:	075b      	lsls	r3, r3, #29
 800e1c8:	4665      	mov	r5, ip
 800e1ca:	4303      	orrs	r3, r0
 800e1cc:	08d1      	lsrs	r1, r2, #3
 800e1ce:	e655      	b.n	800de7c <__aeabi_dadd+0x264>
 800e1d0:	1ac4      	subs	r4, r0, r3
 800e1d2:	45a0      	cmp	r8, r4
 800e1d4:	4180      	sbcs	r0, r0
 800e1d6:	464b      	mov	r3, r9
 800e1d8:	4240      	negs	r0, r0
 800e1da:	1a59      	subs	r1, r3, r1
 800e1dc:	1a0b      	subs	r3, r1, r0
 800e1de:	469a      	mov	sl, r3
 800e1e0:	4665      	mov	r5, ip
 800e1e2:	2601      	movs	r6, #1
 800e1e4:	e564      	b.n	800dcb0 <__aeabi_dadd+0x98>
 800e1e6:	1a1c      	subs	r4, r3, r0
 800e1e8:	464a      	mov	r2, r9
 800e1ea:	42a3      	cmp	r3, r4
 800e1ec:	4180      	sbcs	r0, r0
 800e1ee:	1a8a      	subs	r2, r1, r2
 800e1f0:	4240      	negs	r0, r0
 800e1f2:	1a12      	subs	r2, r2, r0
 800e1f4:	4692      	mov	sl, r2
 800e1f6:	0212      	lsls	r2, r2, #8
 800e1f8:	d549      	bpl.n	800e28e <__aeabi_dadd+0x676>
 800e1fa:	4642      	mov	r2, r8
 800e1fc:	1ad4      	subs	r4, r2, r3
 800e1fe:	45a0      	cmp	r8, r4
 800e200:	4180      	sbcs	r0, r0
 800e202:	464b      	mov	r3, r9
 800e204:	4240      	negs	r0, r0
 800e206:	1a59      	subs	r1, r3, r1
 800e208:	1a0b      	subs	r3, r1, r0
 800e20a:	469a      	mov	sl, r3
 800e20c:	4665      	mov	r5, ip
 800e20e:	e57f      	b.n	800dd10 <__aeabi_dadd+0xf8>
 800e210:	464b      	mov	r3, r9
 800e212:	464a      	mov	r2, r9
 800e214:	08c0      	lsrs	r0, r0, #3
 800e216:	075b      	lsls	r3, r3, #29
 800e218:	4303      	orrs	r3, r0
 800e21a:	08d1      	lsrs	r1, r2, #3
 800e21c:	e62b      	b.n	800de76 <__aeabi_dadd+0x25e>
 800e21e:	464a      	mov	r2, r9
 800e220:	08db      	lsrs	r3, r3, #3
 800e222:	4302      	orrs	r2, r0
 800e224:	d138      	bne.n	800e298 <__aeabi_dadd+0x680>
 800e226:	074a      	lsls	r2, r1, #29
 800e228:	4313      	orrs	r3, r2
 800e22a:	08c9      	lsrs	r1, r1, #3
 800e22c:	e646      	b.n	800debc <__aeabi_dadd+0x2a4>
 800e22e:	464b      	mov	r3, r9
 800e230:	464a      	mov	r2, r9
 800e232:	08c0      	lsrs	r0, r0, #3
 800e234:	075b      	lsls	r3, r3, #29
 800e236:	4303      	orrs	r3, r0
 800e238:	08d1      	lsrs	r1, r2, #3
 800e23a:	e61f      	b.n	800de7c <__aeabi_dadd+0x264>
 800e23c:	181c      	adds	r4, r3, r0
 800e23e:	429c      	cmp	r4, r3
 800e240:	419b      	sbcs	r3, r3
 800e242:	4449      	add	r1, r9
 800e244:	468a      	mov	sl, r1
 800e246:	425b      	negs	r3, r3
 800e248:	449a      	add	sl, r3
 800e24a:	4653      	mov	r3, sl
 800e24c:	021b      	lsls	r3, r3, #8
 800e24e:	d400      	bmi.n	800e252 <__aeabi_dadd+0x63a>
 800e250:	e607      	b.n	800de62 <__aeabi_dadd+0x24a>
 800e252:	4652      	mov	r2, sl
 800e254:	4b1f      	ldr	r3, [pc, #124]	; (800e2d4 <__aeabi_dadd+0x6bc>)
 800e256:	2601      	movs	r6, #1
 800e258:	401a      	ands	r2, r3
 800e25a:	4692      	mov	sl, r2
 800e25c:	e601      	b.n	800de62 <__aeabi_dadd+0x24a>
 800e25e:	003c      	movs	r4, r7
 800e260:	000e      	movs	r6, r1
 800e262:	3c20      	subs	r4, #32
 800e264:	40e6      	lsrs	r6, r4
 800e266:	2f20      	cmp	r7, #32
 800e268:	d003      	beq.n	800e272 <__aeabi_dadd+0x65a>
 800e26a:	2440      	movs	r4, #64	; 0x40
 800e26c:	1be4      	subs	r4, r4, r7
 800e26e:	40a1      	lsls	r1, r4
 800e270:	430b      	orrs	r3, r1
 800e272:	001c      	movs	r4, r3
 800e274:	1e63      	subs	r3, r4, #1
 800e276:	419c      	sbcs	r4, r3
 800e278:	4334      	orrs	r4, r6
 800e27a:	e65e      	b.n	800df3a <__aeabi_dadd+0x322>
 800e27c:	4443      	add	r3, r8
 800e27e:	4283      	cmp	r3, r0
 800e280:	4180      	sbcs	r0, r0
 800e282:	4449      	add	r1, r9
 800e284:	468a      	mov	sl, r1
 800e286:	4240      	negs	r0, r0
 800e288:	001c      	movs	r4, r3
 800e28a:	4482      	add	sl, r0
 800e28c:	e6bc      	b.n	800e008 <__aeabi_dadd+0x3f0>
 800e28e:	4653      	mov	r3, sl
 800e290:	4323      	orrs	r3, r4
 800e292:	d100      	bne.n	800e296 <__aeabi_dadd+0x67e>
 800e294:	e6a9      	b.n	800dfea <__aeabi_dadd+0x3d2>
 800e296:	e5e4      	b.n	800de62 <__aeabi_dadd+0x24a>
 800e298:	074a      	lsls	r2, r1, #29
 800e29a:	4313      	orrs	r3, r2
 800e29c:	2280      	movs	r2, #128	; 0x80
 800e29e:	08c9      	lsrs	r1, r1, #3
 800e2a0:	0312      	lsls	r2, r2, #12
 800e2a2:	4211      	tst	r1, r2
 800e2a4:	d009      	beq.n	800e2ba <__aeabi_dadd+0x6a2>
 800e2a6:	4648      	mov	r0, r9
 800e2a8:	08c4      	lsrs	r4, r0, #3
 800e2aa:	4214      	tst	r4, r2
 800e2ac:	d105      	bne.n	800e2ba <__aeabi_dadd+0x6a2>
 800e2ae:	4643      	mov	r3, r8
 800e2b0:	4665      	mov	r5, ip
 800e2b2:	0021      	movs	r1, r4
 800e2b4:	08db      	lsrs	r3, r3, #3
 800e2b6:	0742      	lsls	r2, r0, #29
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	0f5a      	lsrs	r2, r3, #29
 800e2bc:	00db      	lsls	r3, r3, #3
 800e2be:	08db      	lsrs	r3, r3, #3
 800e2c0:	0752      	lsls	r2, r2, #29
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	e5fa      	b.n	800debc <__aeabi_dadd+0x2a4>
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	4a01      	ldr	r2, [pc, #4]	; (800e2d0 <__aeabi_dadd+0x6b8>)
 800e2ca:	001c      	movs	r4, r3
 800e2cc:	e540      	b.n	800dd50 <__aeabi_dadd+0x138>
 800e2ce:	46c0      	nop			; (mov r8, r8)
 800e2d0:	000007ff 	.word	0x000007ff
 800e2d4:	ff7fffff 	.word	0xff7fffff

0800e2d8 <__aeabi_ddiv>:
 800e2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2da:	4657      	mov	r7, sl
 800e2dc:	464e      	mov	r6, r9
 800e2de:	4645      	mov	r5, r8
 800e2e0:	46de      	mov	lr, fp
 800e2e2:	b5e0      	push	{r5, r6, r7, lr}
 800e2e4:	030c      	lsls	r4, r1, #12
 800e2e6:	001f      	movs	r7, r3
 800e2e8:	004b      	lsls	r3, r1, #1
 800e2ea:	4681      	mov	r9, r0
 800e2ec:	4692      	mov	sl, r2
 800e2ee:	0005      	movs	r5, r0
 800e2f0:	b085      	sub	sp, #20
 800e2f2:	0b24      	lsrs	r4, r4, #12
 800e2f4:	0d5b      	lsrs	r3, r3, #21
 800e2f6:	0fce      	lsrs	r6, r1, #31
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d100      	bne.n	800e2fe <__aeabi_ddiv+0x26>
 800e2fc:	e152      	b.n	800e5a4 <__aeabi_ddiv+0x2cc>
 800e2fe:	4ad2      	ldr	r2, [pc, #840]	; (800e648 <__aeabi_ddiv+0x370>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d100      	bne.n	800e306 <__aeabi_ddiv+0x2e>
 800e304:	e16e      	b.n	800e5e4 <__aeabi_ddiv+0x30c>
 800e306:	0f42      	lsrs	r2, r0, #29
 800e308:	00e4      	lsls	r4, r4, #3
 800e30a:	4314      	orrs	r4, r2
 800e30c:	2280      	movs	r2, #128	; 0x80
 800e30e:	0412      	lsls	r2, r2, #16
 800e310:	4322      	orrs	r2, r4
 800e312:	4690      	mov	r8, r2
 800e314:	4acd      	ldr	r2, [pc, #820]	; (800e64c <__aeabi_ddiv+0x374>)
 800e316:	00c5      	lsls	r5, r0, #3
 800e318:	4693      	mov	fp, r2
 800e31a:	449b      	add	fp, r3
 800e31c:	2300      	movs	r3, #0
 800e31e:	4699      	mov	r9, r3
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	033c      	lsls	r4, r7, #12
 800e324:	007b      	lsls	r3, r7, #1
 800e326:	4650      	mov	r0, sl
 800e328:	0b24      	lsrs	r4, r4, #12
 800e32a:	0d5b      	lsrs	r3, r3, #21
 800e32c:	0fff      	lsrs	r7, r7, #31
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d100      	bne.n	800e334 <__aeabi_ddiv+0x5c>
 800e332:	e11a      	b.n	800e56a <__aeabi_ddiv+0x292>
 800e334:	4ac4      	ldr	r2, [pc, #784]	; (800e648 <__aeabi_ddiv+0x370>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d100      	bne.n	800e33c <__aeabi_ddiv+0x64>
 800e33a:	e15e      	b.n	800e5fa <__aeabi_ddiv+0x322>
 800e33c:	0f42      	lsrs	r2, r0, #29
 800e33e:	00e4      	lsls	r4, r4, #3
 800e340:	4322      	orrs	r2, r4
 800e342:	2480      	movs	r4, #128	; 0x80
 800e344:	0424      	lsls	r4, r4, #16
 800e346:	4314      	orrs	r4, r2
 800e348:	4ac0      	ldr	r2, [pc, #768]	; (800e64c <__aeabi_ddiv+0x374>)
 800e34a:	00c1      	lsls	r1, r0, #3
 800e34c:	4694      	mov	ip, r2
 800e34e:	465a      	mov	r2, fp
 800e350:	4463      	add	r3, ip
 800e352:	1ad3      	subs	r3, r2, r3
 800e354:	469b      	mov	fp, r3
 800e356:	2000      	movs	r0, #0
 800e358:	0033      	movs	r3, r6
 800e35a:	407b      	eors	r3, r7
 800e35c:	469a      	mov	sl, r3
 800e35e:	464b      	mov	r3, r9
 800e360:	2b0f      	cmp	r3, #15
 800e362:	d827      	bhi.n	800e3b4 <__aeabi_ddiv+0xdc>
 800e364:	4aba      	ldr	r2, [pc, #744]	; (800e650 <__aeabi_ddiv+0x378>)
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	58d3      	ldr	r3, [r2, r3]
 800e36a:	469f      	mov	pc, r3
 800e36c:	46b2      	mov	sl, r6
 800e36e:	9b00      	ldr	r3, [sp, #0]
 800e370:	2b02      	cmp	r3, #2
 800e372:	d016      	beq.n	800e3a2 <__aeabi_ddiv+0xca>
 800e374:	2b03      	cmp	r3, #3
 800e376:	d100      	bne.n	800e37a <__aeabi_ddiv+0xa2>
 800e378:	e287      	b.n	800e88a <__aeabi_ddiv+0x5b2>
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d000      	beq.n	800e380 <__aeabi_ddiv+0xa8>
 800e37e:	e0d5      	b.n	800e52c <__aeabi_ddiv+0x254>
 800e380:	2300      	movs	r3, #0
 800e382:	2200      	movs	r2, #0
 800e384:	2500      	movs	r5, #0
 800e386:	051b      	lsls	r3, r3, #20
 800e388:	4313      	orrs	r3, r2
 800e38a:	4652      	mov	r2, sl
 800e38c:	07d2      	lsls	r2, r2, #31
 800e38e:	4313      	orrs	r3, r2
 800e390:	0028      	movs	r0, r5
 800e392:	0019      	movs	r1, r3
 800e394:	b005      	add	sp, #20
 800e396:	bcf0      	pop	{r4, r5, r6, r7}
 800e398:	46bb      	mov	fp, r7
 800e39a:	46b2      	mov	sl, r6
 800e39c:	46a9      	mov	r9, r5
 800e39e:	46a0      	mov	r8, r4
 800e3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	2500      	movs	r5, #0
 800e3a6:	4ba8      	ldr	r3, [pc, #672]	; (800e648 <__aeabi_ddiv+0x370>)
 800e3a8:	e7ed      	b.n	800e386 <__aeabi_ddiv+0xae>
 800e3aa:	46ba      	mov	sl, r7
 800e3ac:	46a0      	mov	r8, r4
 800e3ae:	000d      	movs	r5, r1
 800e3b0:	9000      	str	r0, [sp, #0]
 800e3b2:	e7dc      	b.n	800e36e <__aeabi_ddiv+0x96>
 800e3b4:	4544      	cmp	r4, r8
 800e3b6:	d200      	bcs.n	800e3ba <__aeabi_ddiv+0xe2>
 800e3b8:	e1c4      	b.n	800e744 <__aeabi_ddiv+0x46c>
 800e3ba:	d100      	bne.n	800e3be <__aeabi_ddiv+0xe6>
 800e3bc:	e1bf      	b.n	800e73e <__aeabi_ddiv+0x466>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	425b      	negs	r3, r3
 800e3c2:	469c      	mov	ip, r3
 800e3c4:	002e      	movs	r6, r5
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	2500      	movs	r5, #0
 800e3ca:	44e3      	add	fp, ip
 800e3cc:	0223      	lsls	r3, r4, #8
 800e3ce:	0e0c      	lsrs	r4, r1, #24
 800e3d0:	431c      	orrs	r4, r3
 800e3d2:	0c1b      	lsrs	r3, r3, #16
 800e3d4:	4699      	mov	r9, r3
 800e3d6:	0423      	lsls	r3, r4, #16
 800e3d8:	020a      	lsls	r2, r1, #8
 800e3da:	0c1f      	lsrs	r7, r3, #16
 800e3dc:	4649      	mov	r1, r9
 800e3de:	9200      	str	r2, [sp, #0]
 800e3e0:	9701      	str	r7, [sp, #4]
 800e3e2:	f7fe fb2f 	bl	800ca44 <__aeabi_uidivmod>
 800e3e6:	0002      	movs	r2, r0
 800e3e8:	437a      	muls	r2, r7
 800e3ea:	040b      	lsls	r3, r1, #16
 800e3ec:	0c31      	lsrs	r1, r6, #16
 800e3ee:	4680      	mov	r8, r0
 800e3f0:	4319      	orrs	r1, r3
 800e3f2:	428a      	cmp	r2, r1
 800e3f4:	d907      	bls.n	800e406 <__aeabi_ddiv+0x12e>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	425b      	negs	r3, r3
 800e3fa:	469c      	mov	ip, r3
 800e3fc:	1909      	adds	r1, r1, r4
 800e3fe:	44e0      	add	r8, ip
 800e400:	428c      	cmp	r4, r1
 800e402:	d800      	bhi.n	800e406 <__aeabi_ddiv+0x12e>
 800e404:	e201      	b.n	800e80a <__aeabi_ddiv+0x532>
 800e406:	1a88      	subs	r0, r1, r2
 800e408:	4649      	mov	r1, r9
 800e40a:	f7fe fb1b 	bl	800ca44 <__aeabi_uidivmod>
 800e40e:	9a01      	ldr	r2, [sp, #4]
 800e410:	0436      	lsls	r6, r6, #16
 800e412:	4342      	muls	r2, r0
 800e414:	0409      	lsls	r1, r1, #16
 800e416:	0c36      	lsrs	r6, r6, #16
 800e418:	0003      	movs	r3, r0
 800e41a:	430e      	orrs	r6, r1
 800e41c:	42b2      	cmp	r2, r6
 800e41e:	d904      	bls.n	800e42a <__aeabi_ddiv+0x152>
 800e420:	1936      	adds	r6, r6, r4
 800e422:	3b01      	subs	r3, #1
 800e424:	42b4      	cmp	r4, r6
 800e426:	d800      	bhi.n	800e42a <__aeabi_ddiv+0x152>
 800e428:	e1e9      	b.n	800e7fe <__aeabi_ddiv+0x526>
 800e42a:	1ab0      	subs	r0, r6, r2
 800e42c:	4642      	mov	r2, r8
 800e42e:	9e00      	ldr	r6, [sp, #0]
 800e430:	0412      	lsls	r2, r2, #16
 800e432:	431a      	orrs	r2, r3
 800e434:	0c33      	lsrs	r3, r6, #16
 800e436:	001f      	movs	r7, r3
 800e438:	0c11      	lsrs	r1, r2, #16
 800e43a:	4690      	mov	r8, r2
 800e43c:	9302      	str	r3, [sp, #8]
 800e43e:	0413      	lsls	r3, r2, #16
 800e440:	0432      	lsls	r2, r6, #16
 800e442:	0c16      	lsrs	r6, r2, #16
 800e444:	0032      	movs	r2, r6
 800e446:	0c1b      	lsrs	r3, r3, #16
 800e448:	435a      	muls	r2, r3
 800e44a:	9603      	str	r6, [sp, #12]
 800e44c:	437b      	muls	r3, r7
 800e44e:	434e      	muls	r6, r1
 800e450:	4379      	muls	r1, r7
 800e452:	0c17      	lsrs	r7, r2, #16
 800e454:	46bc      	mov	ip, r7
 800e456:	199b      	adds	r3, r3, r6
 800e458:	4463      	add	r3, ip
 800e45a:	429e      	cmp	r6, r3
 800e45c:	d903      	bls.n	800e466 <__aeabi_ddiv+0x18e>
 800e45e:	2680      	movs	r6, #128	; 0x80
 800e460:	0276      	lsls	r6, r6, #9
 800e462:	46b4      	mov	ip, r6
 800e464:	4461      	add	r1, ip
 800e466:	0c1e      	lsrs	r6, r3, #16
 800e468:	1871      	adds	r1, r6, r1
 800e46a:	0416      	lsls	r6, r2, #16
 800e46c:	041b      	lsls	r3, r3, #16
 800e46e:	0c36      	lsrs	r6, r6, #16
 800e470:	199e      	adds	r6, r3, r6
 800e472:	4288      	cmp	r0, r1
 800e474:	d302      	bcc.n	800e47c <__aeabi_ddiv+0x1a4>
 800e476:	d112      	bne.n	800e49e <__aeabi_ddiv+0x1c6>
 800e478:	42b5      	cmp	r5, r6
 800e47a:	d210      	bcs.n	800e49e <__aeabi_ddiv+0x1c6>
 800e47c:	4643      	mov	r3, r8
 800e47e:	1e5a      	subs	r2, r3, #1
 800e480:	9b00      	ldr	r3, [sp, #0]
 800e482:	469c      	mov	ip, r3
 800e484:	4465      	add	r5, ip
 800e486:	001f      	movs	r7, r3
 800e488:	429d      	cmp	r5, r3
 800e48a:	419b      	sbcs	r3, r3
 800e48c:	425b      	negs	r3, r3
 800e48e:	191b      	adds	r3, r3, r4
 800e490:	18c0      	adds	r0, r0, r3
 800e492:	4284      	cmp	r4, r0
 800e494:	d200      	bcs.n	800e498 <__aeabi_ddiv+0x1c0>
 800e496:	e19e      	b.n	800e7d6 <__aeabi_ddiv+0x4fe>
 800e498:	d100      	bne.n	800e49c <__aeabi_ddiv+0x1c4>
 800e49a:	e199      	b.n	800e7d0 <__aeabi_ddiv+0x4f8>
 800e49c:	4690      	mov	r8, r2
 800e49e:	1bae      	subs	r6, r5, r6
 800e4a0:	42b5      	cmp	r5, r6
 800e4a2:	41ad      	sbcs	r5, r5
 800e4a4:	1a40      	subs	r0, r0, r1
 800e4a6:	426d      	negs	r5, r5
 800e4a8:	1b40      	subs	r0, r0, r5
 800e4aa:	4284      	cmp	r4, r0
 800e4ac:	d100      	bne.n	800e4b0 <__aeabi_ddiv+0x1d8>
 800e4ae:	e1d2      	b.n	800e856 <__aeabi_ddiv+0x57e>
 800e4b0:	4649      	mov	r1, r9
 800e4b2:	f7fe fac7 	bl	800ca44 <__aeabi_uidivmod>
 800e4b6:	9a01      	ldr	r2, [sp, #4]
 800e4b8:	040b      	lsls	r3, r1, #16
 800e4ba:	4342      	muls	r2, r0
 800e4bc:	0c31      	lsrs	r1, r6, #16
 800e4be:	0005      	movs	r5, r0
 800e4c0:	4319      	orrs	r1, r3
 800e4c2:	428a      	cmp	r2, r1
 800e4c4:	d900      	bls.n	800e4c8 <__aeabi_ddiv+0x1f0>
 800e4c6:	e16c      	b.n	800e7a2 <__aeabi_ddiv+0x4ca>
 800e4c8:	1a88      	subs	r0, r1, r2
 800e4ca:	4649      	mov	r1, r9
 800e4cc:	f7fe faba 	bl	800ca44 <__aeabi_uidivmod>
 800e4d0:	9a01      	ldr	r2, [sp, #4]
 800e4d2:	0436      	lsls	r6, r6, #16
 800e4d4:	4342      	muls	r2, r0
 800e4d6:	0409      	lsls	r1, r1, #16
 800e4d8:	0c36      	lsrs	r6, r6, #16
 800e4da:	0003      	movs	r3, r0
 800e4dc:	430e      	orrs	r6, r1
 800e4de:	42b2      	cmp	r2, r6
 800e4e0:	d900      	bls.n	800e4e4 <__aeabi_ddiv+0x20c>
 800e4e2:	e153      	b.n	800e78c <__aeabi_ddiv+0x4b4>
 800e4e4:	9803      	ldr	r0, [sp, #12]
 800e4e6:	1ab6      	subs	r6, r6, r2
 800e4e8:	0002      	movs	r2, r0
 800e4ea:	042d      	lsls	r5, r5, #16
 800e4ec:	431d      	orrs	r5, r3
 800e4ee:	9f02      	ldr	r7, [sp, #8]
 800e4f0:	042b      	lsls	r3, r5, #16
 800e4f2:	0c1b      	lsrs	r3, r3, #16
 800e4f4:	435a      	muls	r2, r3
 800e4f6:	437b      	muls	r3, r7
 800e4f8:	469c      	mov	ip, r3
 800e4fa:	0c29      	lsrs	r1, r5, #16
 800e4fc:	4348      	muls	r0, r1
 800e4fe:	0c13      	lsrs	r3, r2, #16
 800e500:	4484      	add	ip, r0
 800e502:	4463      	add	r3, ip
 800e504:	4379      	muls	r1, r7
 800e506:	4298      	cmp	r0, r3
 800e508:	d903      	bls.n	800e512 <__aeabi_ddiv+0x23a>
 800e50a:	2080      	movs	r0, #128	; 0x80
 800e50c:	0240      	lsls	r0, r0, #9
 800e50e:	4684      	mov	ip, r0
 800e510:	4461      	add	r1, ip
 800e512:	0c18      	lsrs	r0, r3, #16
 800e514:	0412      	lsls	r2, r2, #16
 800e516:	041b      	lsls	r3, r3, #16
 800e518:	0c12      	lsrs	r2, r2, #16
 800e51a:	1840      	adds	r0, r0, r1
 800e51c:	189b      	adds	r3, r3, r2
 800e51e:	4286      	cmp	r6, r0
 800e520:	d200      	bcs.n	800e524 <__aeabi_ddiv+0x24c>
 800e522:	e100      	b.n	800e726 <__aeabi_ddiv+0x44e>
 800e524:	d100      	bne.n	800e528 <__aeabi_ddiv+0x250>
 800e526:	e0fb      	b.n	800e720 <__aeabi_ddiv+0x448>
 800e528:	2301      	movs	r3, #1
 800e52a:	431d      	orrs	r5, r3
 800e52c:	4b49      	ldr	r3, [pc, #292]	; (800e654 <__aeabi_ddiv+0x37c>)
 800e52e:	445b      	add	r3, fp
 800e530:	2b00      	cmp	r3, #0
 800e532:	dc00      	bgt.n	800e536 <__aeabi_ddiv+0x25e>
 800e534:	e0aa      	b.n	800e68c <__aeabi_ddiv+0x3b4>
 800e536:	076a      	lsls	r2, r5, #29
 800e538:	d000      	beq.n	800e53c <__aeabi_ddiv+0x264>
 800e53a:	e13d      	b.n	800e7b8 <__aeabi_ddiv+0x4e0>
 800e53c:	08e9      	lsrs	r1, r5, #3
 800e53e:	4642      	mov	r2, r8
 800e540:	01d2      	lsls	r2, r2, #7
 800e542:	d506      	bpl.n	800e552 <__aeabi_ddiv+0x27a>
 800e544:	4642      	mov	r2, r8
 800e546:	4b44      	ldr	r3, [pc, #272]	; (800e658 <__aeabi_ddiv+0x380>)
 800e548:	401a      	ands	r2, r3
 800e54a:	2380      	movs	r3, #128	; 0x80
 800e54c:	4690      	mov	r8, r2
 800e54e:	00db      	lsls	r3, r3, #3
 800e550:	445b      	add	r3, fp
 800e552:	4a42      	ldr	r2, [pc, #264]	; (800e65c <__aeabi_ddiv+0x384>)
 800e554:	4293      	cmp	r3, r2
 800e556:	dd00      	ble.n	800e55a <__aeabi_ddiv+0x282>
 800e558:	e723      	b.n	800e3a2 <__aeabi_ddiv+0xca>
 800e55a:	4642      	mov	r2, r8
 800e55c:	055b      	lsls	r3, r3, #21
 800e55e:	0755      	lsls	r5, r2, #29
 800e560:	0252      	lsls	r2, r2, #9
 800e562:	430d      	orrs	r5, r1
 800e564:	0b12      	lsrs	r2, r2, #12
 800e566:	0d5b      	lsrs	r3, r3, #21
 800e568:	e70d      	b.n	800e386 <__aeabi_ddiv+0xae>
 800e56a:	4651      	mov	r1, sl
 800e56c:	4321      	orrs	r1, r4
 800e56e:	d100      	bne.n	800e572 <__aeabi_ddiv+0x29a>
 800e570:	e07c      	b.n	800e66c <__aeabi_ddiv+0x394>
 800e572:	2c00      	cmp	r4, #0
 800e574:	d100      	bne.n	800e578 <__aeabi_ddiv+0x2a0>
 800e576:	e0fb      	b.n	800e770 <__aeabi_ddiv+0x498>
 800e578:	0020      	movs	r0, r4
 800e57a:	f001 fa63 	bl	800fa44 <__clzsi2>
 800e57e:	0002      	movs	r2, r0
 800e580:	3a0b      	subs	r2, #11
 800e582:	231d      	movs	r3, #29
 800e584:	1a9b      	subs	r3, r3, r2
 800e586:	4652      	mov	r2, sl
 800e588:	0001      	movs	r1, r0
 800e58a:	40da      	lsrs	r2, r3
 800e58c:	4653      	mov	r3, sl
 800e58e:	3908      	subs	r1, #8
 800e590:	408b      	lsls	r3, r1
 800e592:	408c      	lsls	r4, r1
 800e594:	0019      	movs	r1, r3
 800e596:	4314      	orrs	r4, r2
 800e598:	4b31      	ldr	r3, [pc, #196]	; (800e660 <__aeabi_ddiv+0x388>)
 800e59a:	4458      	add	r0, fp
 800e59c:	469b      	mov	fp, r3
 800e59e:	4483      	add	fp, r0
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	e6d9      	b.n	800e358 <__aeabi_ddiv+0x80>
 800e5a4:	0003      	movs	r3, r0
 800e5a6:	4323      	orrs	r3, r4
 800e5a8:	4698      	mov	r8, r3
 800e5aa:	d044      	beq.n	800e636 <__aeabi_ddiv+0x35e>
 800e5ac:	2c00      	cmp	r4, #0
 800e5ae:	d100      	bne.n	800e5b2 <__aeabi_ddiv+0x2da>
 800e5b0:	e0cf      	b.n	800e752 <__aeabi_ddiv+0x47a>
 800e5b2:	0020      	movs	r0, r4
 800e5b4:	f001 fa46 	bl	800fa44 <__clzsi2>
 800e5b8:	0001      	movs	r1, r0
 800e5ba:	0002      	movs	r2, r0
 800e5bc:	390b      	subs	r1, #11
 800e5be:	231d      	movs	r3, #29
 800e5c0:	1a5b      	subs	r3, r3, r1
 800e5c2:	4649      	mov	r1, r9
 800e5c4:	0010      	movs	r0, r2
 800e5c6:	40d9      	lsrs	r1, r3
 800e5c8:	3808      	subs	r0, #8
 800e5ca:	4084      	lsls	r4, r0
 800e5cc:	000b      	movs	r3, r1
 800e5ce:	464d      	mov	r5, r9
 800e5d0:	4323      	orrs	r3, r4
 800e5d2:	4698      	mov	r8, r3
 800e5d4:	4085      	lsls	r5, r0
 800e5d6:	4b23      	ldr	r3, [pc, #140]	; (800e664 <__aeabi_ddiv+0x38c>)
 800e5d8:	1a9b      	subs	r3, r3, r2
 800e5da:	469b      	mov	fp, r3
 800e5dc:	2300      	movs	r3, #0
 800e5de:	4699      	mov	r9, r3
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	e69e      	b.n	800e322 <__aeabi_ddiv+0x4a>
 800e5e4:	0002      	movs	r2, r0
 800e5e6:	4322      	orrs	r2, r4
 800e5e8:	4690      	mov	r8, r2
 800e5ea:	d11d      	bne.n	800e628 <__aeabi_ddiv+0x350>
 800e5ec:	2208      	movs	r2, #8
 800e5ee:	469b      	mov	fp, r3
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	2500      	movs	r5, #0
 800e5f4:	4691      	mov	r9, r2
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	e693      	b.n	800e322 <__aeabi_ddiv+0x4a>
 800e5fa:	4651      	mov	r1, sl
 800e5fc:	4321      	orrs	r1, r4
 800e5fe:	d109      	bne.n	800e614 <__aeabi_ddiv+0x33c>
 800e600:	2302      	movs	r3, #2
 800e602:	464a      	mov	r2, r9
 800e604:	431a      	orrs	r2, r3
 800e606:	4b18      	ldr	r3, [pc, #96]	; (800e668 <__aeabi_ddiv+0x390>)
 800e608:	4691      	mov	r9, r2
 800e60a:	469c      	mov	ip, r3
 800e60c:	2400      	movs	r4, #0
 800e60e:	2002      	movs	r0, #2
 800e610:	44e3      	add	fp, ip
 800e612:	e6a1      	b.n	800e358 <__aeabi_ddiv+0x80>
 800e614:	2303      	movs	r3, #3
 800e616:	464a      	mov	r2, r9
 800e618:	431a      	orrs	r2, r3
 800e61a:	4b13      	ldr	r3, [pc, #76]	; (800e668 <__aeabi_ddiv+0x390>)
 800e61c:	4691      	mov	r9, r2
 800e61e:	469c      	mov	ip, r3
 800e620:	4651      	mov	r1, sl
 800e622:	2003      	movs	r0, #3
 800e624:	44e3      	add	fp, ip
 800e626:	e697      	b.n	800e358 <__aeabi_ddiv+0x80>
 800e628:	220c      	movs	r2, #12
 800e62a:	469b      	mov	fp, r3
 800e62c:	2303      	movs	r3, #3
 800e62e:	46a0      	mov	r8, r4
 800e630:	4691      	mov	r9, r2
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	e675      	b.n	800e322 <__aeabi_ddiv+0x4a>
 800e636:	2304      	movs	r3, #4
 800e638:	4699      	mov	r9, r3
 800e63a:	2300      	movs	r3, #0
 800e63c:	469b      	mov	fp, r3
 800e63e:	3301      	adds	r3, #1
 800e640:	2500      	movs	r5, #0
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	e66d      	b.n	800e322 <__aeabi_ddiv+0x4a>
 800e646:	46c0      	nop			; (mov r8, r8)
 800e648:	000007ff 	.word	0x000007ff
 800e64c:	fffffc01 	.word	0xfffffc01
 800e650:	0801cff4 	.word	0x0801cff4
 800e654:	000003ff 	.word	0x000003ff
 800e658:	feffffff 	.word	0xfeffffff
 800e65c:	000007fe 	.word	0x000007fe
 800e660:	000003f3 	.word	0x000003f3
 800e664:	fffffc0d 	.word	0xfffffc0d
 800e668:	fffff801 	.word	0xfffff801
 800e66c:	464a      	mov	r2, r9
 800e66e:	2301      	movs	r3, #1
 800e670:	431a      	orrs	r2, r3
 800e672:	4691      	mov	r9, r2
 800e674:	2400      	movs	r4, #0
 800e676:	2001      	movs	r0, #1
 800e678:	e66e      	b.n	800e358 <__aeabi_ddiv+0x80>
 800e67a:	2300      	movs	r3, #0
 800e67c:	2280      	movs	r2, #128	; 0x80
 800e67e:	469a      	mov	sl, r3
 800e680:	2500      	movs	r5, #0
 800e682:	4b88      	ldr	r3, [pc, #544]	; (800e8a4 <__aeabi_ddiv+0x5cc>)
 800e684:	0312      	lsls	r2, r2, #12
 800e686:	e67e      	b.n	800e386 <__aeabi_ddiv+0xae>
 800e688:	2501      	movs	r5, #1
 800e68a:	426d      	negs	r5, r5
 800e68c:	2201      	movs	r2, #1
 800e68e:	1ad2      	subs	r2, r2, r3
 800e690:	2a38      	cmp	r2, #56	; 0x38
 800e692:	dd00      	ble.n	800e696 <__aeabi_ddiv+0x3be>
 800e694:	e674      	b.n	800e380 <__aeabi_ddiv+0xa8>
 800e696:	2a1f      	cmp	r2, #31
 800e698:	dc00      	bgt.n	800e69c <__aeabi_ddiv+0x3c4>
 800e69a:	e0bd      	b.n	800e818 <__aeabi_ddiv+0x540>
 800e69c:	211f      	movs	r1, #31
 800e69e:	4249      	negs	r1, r1
 800e6a0:	1acb      	subs	r3, r1, r3
 800e6a2:	4641      	mov	r1, r8
 800e6a4:	40d9      	lsrs	r1, r3
 800e6a6:	000b      	movs	r3, r1
 800e6a8:	2a20      	cmp	r2, #32
 800e6aa:	d004      	beq.n	800e6b6 <__aeabi_ddiv+0x3de>
 800e6ac:	4641      	mov	r1, r8
 800e6ae:	4a7e      	ldr	r2, [pc, #504]	; (800e8a8 <__aeabi_ddiv+0x5d0>)
 800e6b0:	445a      	add	r2, fp
 800e6b2:	4091      	lsls	r1, r2
 800e6b4:	430d      	orrs	r5, r1
 800e6b6:	0029      	movs	r1, r5
 800e6b8:	1e4a      	subs	r2, r1, #1
 800e6ba:	4191      	sbcs	r1, r2
 800e6bc:	4319      	orrs	r1, r3
 800e6be:	2307      	movs	r3, #7
 800e6c0:	001d      	movs	r5, r3
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	400d      	ands	r5, r1
 800e6c6:	420b      	tst	r3, r1
 800e6c8:	d100      	bne.n	800e6cc <__aeabi_ddiv+0x3f4>
 800e6ca:	e0d0      	b.n	800e86e <__aeabi_ddiv+0x596>
 800e6cc:	220f      	movs	r2, #15
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	400a      	ands	r2, r1
 800e6d2:	2a04      	cmp	r2, #4
 800e6d4:	d100      	bne.n	800e6d8 <__aeabi_ddiv+0x400>
 800e6d6:	e0c7      	b.n	800e868 <__aeabi_ddiv+0x590>
 800e6d8:	1d0a      	adds	r2, r1, #4
 800e6da:	428a      	cmp	r2, r1
 800e6dc:	4189      	sbcs	r1, r1
 800e6de:	4249      	negs	r1, r1
 800e6e0:	185b      	adds	r3, r3, r1
 800e6e2:	0011      	movs	r1, r2
 800e6e4:	021a      	lsls	r2, r3, #8
 800e6e6:	d400      	bmi.n	800e6ea <__aeabi_ddiv+0x412>
 800e6e8:	e0be      	b.n	800e868 <__aeabi_ddiv+0x590>
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	2500      	movs	r5, #0
 800e6f0:	e649      	b.n	800e386 <__aeabi_ddiv+0xae>
 800e6f2:	2280      	movs	r2, #128	; 0x80
 800e6f4:	4643      	mov	r3, r8
 800e6f6:	0312      	lsls	r2, r2, #12
 800e6f8:	4213      	tst	r3, r2
 800e6fa:	d008      	beq.n	800e70e <__aeabi_ddiv+0x436>
 800e6fc:	4214      	tst	r4, r2
 800e6fe:	d106      	bne.n	800e70e <__aeabi_ddiv+0x436>
 800e700:	4322      	orrs	r2, r4
 800e702:	0312      	lsls	r2, r2, #12
 800e704:	46ba      	mov	sl, r7
 800e706:	000d      	movs	r5, r1
 800e708:	4b66      	ldr	r3, [pc, #408]	; (800e8a4 <__aeabi_ddiv+0x5cc>)
 800e70a:	0b12      	lsrs	r2, r2, #12
 800e70c:	e63b      	b.n	800e386 <__aeabi_ddiv+0xae>
 800e70e:	2280      	movs	r2, #128	; 0x80
 800e710:	4643      	mov	r3, r8
 800e712:	0312      	lsls	r2, r2, #12
 800e714:	431a      	orrs	r2, r3
 800e716:	0312      	lsls	r2, r2, #12
 800e718:	46b2      	mov	sl, r6
 800e71a:	4b62      	ldr	r3, [pc, #392]	; (800e8a4 <__aeabi_ddiv+0x5cc>)
 800e71c:	0b12      	lsrs	r2, r2, #12
 800e71e:	e632      	b.n	800e386 <__aeabi_ddiv+0xae>
 800e720:	2b00      	cmp	r3, #0
 800e722:	d100      	bne.n	800e726 <__aeabi_ddiv+0x44e>
 800e724:	e702      	b.n	800e52c <__aeabi_ddiv+0x254>
 800e726:	19a6      	adds	r6, r4, r6
 800e728:	1e6a      	subs	r2, r5, #1
 800e72a:	42a6      	cmp	r6, r4
 800e72c:	d200      	bcs.n	800e730 <__aeabi_ddiv+0x458>
 800e72e:	e089      	b.n	800e844 <__aeabi_ddiv+0x56c>
 800e730:	4286      	cmp	r6, r0
 800e732:	d200      	bcs.n	800e736 <__aeabi_ddiv+0x45e>
 800e734:	e09f      	b.n	800e876 <__aeabi_ddiv+0x59e>
 800e736:	d100      	bne.n	800e73a <__aeabi_ddiv+0x462>
 800e738:	e0af      	b.n	800e89a <__aeabi_ddiv+0x5c2>
 800e73a:	0015      	movs	r5, r2
 800e73c:	e6f4      	b.n	800e528 <__aeabi_ddiv+0x250>
 800e73e:	42a9      	cmp	r1, r5
 800e740:	d900      	bls.n	800e744 <__aeabi_ddiv+0x46c>
 800e742:	e63c      	b.n	800e3be <__aeabi_ddiv+0xe6>
 800e744:	4643      	mov	r3, r8
 800e746:	07de      	lsls	r6, r3, #31
 800e748:	0858      	lsrs	r0, r3, #1
 800e74a:	086b      	lsrs	r3, r5, #1
 800e74c:	431e      	orrs	r6, r3
 800e74e:	07ed      	lsls	r5, r5, #31
 800e750:	e63c      	b.n	800e3cc <__aeabi_ddiv+0xf4>
 800e752:	f001 f977 	bl	800fa44 <__clzsi2>
 800e756:	0001      	movs	r1, r0
 800e758:	0002      	movs	r2, r0
 800e75a:	3115      	adds	r1, #21
 800e75c:	3220      	adds	r2, #32
 800e75e:	291c      	cmp	r1, #28
 800e760:	dc00      	bgt.n	800e764 <__aeabi_ddiv+0x48c>
 800e762:	e72c      	b.n	800e5be <__aeabi_ddiv+0x2e6>
 800e764:	464b      	mov	r3, r9
 800e766:	3808      	subs	r0, #8
 800e768:	4083      	lsls	r3, r0
 800e76a:	2500      	movs	r5, #0
 800e76c:	4698      	mov	r8, r3
 800e76e:	e732      	b.n	800e5d6 <__aeabi_ddiv+0x2fe>
 800e770:	f001 f968 	bl	800fa44 <__clzsi2>
 800e774:	0003      	movs	r3, r0
 800e776:	001a      	movs	r2, r3
 800e778:	3215      	adds	r2, #21
 800e77a:	3020      	adds	r0, #32
 800e77c:	2a1c      	cmp	r2, #28
 800e77e:	dc00      	bgt.n	800e782 <__aeabi_ddiv+0x4aa>
 800e780:	e6ff      	b.n	800e582 <__aeabi_ddiv+0x2aa>
 800e782:	4654      	mov	r4, sl
 800e784:	3b08      	subs	r3, #8
 800e786:	2100      	movs	r1, #0
 800e788:	409c      	lsls	r4, r3
 800e78a:	e705      	b.n	800e598 <__aeabi_ddiv+0x2c0>
 800e78c:	1936      	adds	r6, r6, r4
 800e78e:	3b01      	subs	r3, #1
 800e790:	42b4      	cmp	r4, r6
 800e792:	d900      	bls.n	800e796 <__aeabi_ddiv+0x4be>
 800e794:	e6a6      	b.n	800e4e4 <__aeabi_ddiv+0x20c>
 800e796:	42b2      	cmp	r2, r6
 800e798:	d800      	bhi.n	800e79c <__aeabi_ddiv+0x4c4>
 800e79a:	e6a3      	b.n	800e4e4 <__aeabi_ddiv+0x20c>
 800e79c:	1e83      	subs	r3, r0, #2
 800e79e:	1936      	adds	r6, r6, r4
 800e7a0:	e6a0      	b.n	800e4e4 <__aeabi_ddiv+0x20c>
 800e7a2:	1909      	adds	r1, r1, r4
 800e7a4:	3d01      	subs	r5, #1
 800e7a6:	428c      	cmp	r4, r1
 800e7a8:	d900      	bls.n	800e7ac <__aeabi_ddiv+0x4d4>
 800e7aa:	e68d      	b.n	800e4c8 <__aeabi_ddiv+0x1f0>
 800e7ac:	428a      	cmp	r2, r1
 800e7ae:	d800      	bhi.n	800e7b2 <__aeabi_ddiv+0x4da>
 800e7b0:	e68a      	b.n	800e4c8 <__aeabi_ddiv+0x1f0>
 800e7b2:	1e85      	subs	r5, r0, #2
 800e7b4:	1909      	adds	r1, r1, r4
 800e7b6:	e687      	b.n	800e4c8 <__aeabi_ddiv+0x1f0>
 800e7b8:	220f      	movs	r2, #15
 800e7ba:	402a      	ands	r2, r5
 800e7bc:	2a04      	cmp	r2, #4
 800e7be:	d100      	bne.n	800e7c2 <__aeabi_ddiv+0x4ea>
 800e7c0:	e6bc      	b.n	800e53c <__aeabi_ddiv+0x264>
 800e7c2:	1d29      	adds	r1, r5, #4
 800e7c4:	42a9      	cmp	r1, r5
 800e7c6:	41ad      	sbcs	r5, r5
 800e7c8:	426d      	negs	r5, r5
 800e7ca:	08c9      	lsrs	r1, r1, #3
 800e7cc:	44a8      	add	r8, r5
 800e7ce:	e6b6      	b.n	800e53e <__aeabi_ddiv+0x266>
 800e7d0:	42af      	cmp	r7, r5
 800e7d2:	d900      	bls.n	800e7d6 <__aeabi_ddiv+0x4fe>
 800e7d4:	e662      	b.n	800e49c <__aeabi_ddiv+0x1c4>
 800e7d6:	4281      	cmp	r1, r0
 800e7d8:	d804      	bhi.n	800e7e4 <__aeabi_ddiv+0x50c>
 800e7da:	d000      	beq.n	800e7de <__aeabi_ddiv+0x506>
 800e7dc:	e65e      	b.n	800e49c <__aeabi_ddiv+0x1c4>
 800e7de:	42ae      	cmp	r6, r5
 800e7e0:	d800      	bhi.n	800e7e4 <__aeabi_ddiv+0x50c>
 800e7e2:	e65b      	b.n	800e49c <__aeabi_ddiv+0x1c4>
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	425b      	negs	r3, r3
 800e7e8:	469c      	mov	ip, r3
 800e7ea:	9b00      	ldr	r3, [sp, #0]
 800e7ec:	44e0      	add	r8, ip
 800e7ee:	469c      	mov	ip, r3
 800e7f0:	4465      	add	r5, ip
 800e7f2:	429d      	cmp	r5, r3
 800e7f4:	419b      	sbcs	r3, r3
 800e7f6:	425b      	negs	r3, r3
 800e7f8:	191b      	adds	r3, r3, r4
 800e7fa:	18c0      	adds	r0, r0, r3
 800e7fc:	e64f      	b.n	800e49e <__aeabi_ddiv+0x1c6>
 800e7fe:	42b2      	cmp	r2, r6
 800e800:	d800      	bhi.n	800e804 <__aeabi_ddiv+0x52c>
 800e802:	e612      	b.n	800e42a <__aeabi_ddiv+0x152>
 800e804:	1e83      	subs	r3, r0, #2
 800e806:	1936      	adds	r6, r6, r4
 800e808:	e60f      	b.n	800e42a <__aeabi_ddiv+0x152>
 800e80a:	428a      	cmp	r2, r1
 800e80c:	d800      	bhi.n	800e810 <__aeabi_ddiv+0x538>
 800e80e:	e5fa      	b.n	800e406 <__aeabi_ddiv+0x12e>
 800e810:	1e83      	subs	r3, r0, #2
 800e812:	4698      	mov	r8, r3
 800e814:	1909      	adds	r1, r1, r4
 800e816:	e5f6      	b.n	800e406 <__aeabi_ddiv+0x12e>
 800e818:	4b24      	ldr	r3, [pc, #144]	; (800e8ac <__aeabi_ddiv+0x5d4>)
 800e81a:	0028      	movs	r0, r5
 800e81c:	445b      	add	r3, fp
 800e81e:	4641      	mov	r1, r8
 800e820:	409d      	lsls	r5, r3
 800e822:	4099      	lsls	r1, r3
 800e824:	40d0      	lsrs	r0, r2
 800e826:	1e6b      	subs	r3, r5, #1
 800e828:	419d      	sbcs	r5, r3
 800e82a:	4643      	mov	r3, r8
 800e82c:	4301      	orrs	r1, r0
 800e82e:	4329      	orrs	r1, r5
 800e830:	40d3      	lsrs	r3, r2
 800e832:	074a      	lsls	r2, r1, #29
 800e834:	d100      	bne.n	800e838 <__aeabi_ddiv+0x560>
 800e836:	e755      	b.n	800e6e4 <__aeabi_ddiv+0x40c>
 800e838:	220f      	movs	r2, #15
 800e83a:	400a      	ands	r2, r1
 800e83c:	2a04      	cmp	r2, #4
 800e83e:	d000      	beq.n	800e842 <__aeabi_ddiv+0x56a>
 800e840:	e74a      	b.n	800e6d8 <__aeabi_ddiv+0x400>
 800e842:	e74f      	b.n	800e6e4 <__aeabi_ddiv+0x40c>
 800e844:	0015      	movs	r5, r2
 800e846:	4286      	cmp	r6, r0
 800e848:	d000      	beq.n	800e84c <__aeabi_ddiv+0x574>
 800e84a:	e66d      	b.n	800e528 <__aeabi_ddiv+0x250>
 800e84c:	9a00      	ldr	r2, [sp, #0]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d000      	beq.n	800e854 <__aeabi_ddiv+0x57c>
 800e852:	e669      	b.n	800e528 <__aeabi_ddiv+0x250>
 800e854:	e66a      	b.n	800e52c <__aeabi_ddiv+0x254>
 800e856:	4b16      	ldr	r3, [pc, #88]	; (800e8b0 <__aeabi_ddiv+0x5d8>)
 800e858:	445b      	add	r3, fp
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	dc00      	bgt.n	800e860 <__aeabi_ddiv+0x588>
 800e85e:	e713      	b.n	800e688 <__aeabi_ddiv+0x3b0>
 800e860:	2501      	movs	r5, #1
 800e862:	2100      	movs	r1, #0
 800e864:	44a8      	add	r8, r5
 800e866:	e66a      	b.n	800e53e <__aeabi_ddiv+0x266>
 800e868:	075d      	lsls	r5, r3, #29
 800e86a:	025b      	lsls	r3, r3, #9
 800e86c:	0b1a      	lsrs	r2, r3, #12
 800e86e:	08c9      	lsrs	r1, r1, #3
 800e870:	2300      	movs	r3, #0
 800e872:	430d      	orrs	r5, r1
 800e874:	e587      	b.n	800e386 <__aeabi_ddiv+0xae>
 800e876:	9900      	ldr	r1, [sp, #0]
 800e878:	3d02      	subs	r5, #2
 800e87a:	004a      	lsls	r2, r1, #1
 800e87c:	428a      	cmp	r2, r1
 800e87e:	41bf      	sbcs	r7, r7
 800e880:	427f      	negs	r7, r7
 800e882:	193f      	adds	r7, r7, r4
 800e884:	19f6      	adds	r6, r6, r7
 800e886:	9200      	str	r2, [sp, #0]
 800e888:	e7dd      	b.n	800e846 <__aeabi_ddiv+0x56e>
 800e88a:	2280      	movs	r2, #128	; 0x80
 800e88c:	4643      	mov	r3, r8
 800e88e:	0312      	lsls	r2, r2, #12
 800e890:	431a      	orrs	r2, r3
 800e892:	0312      	lsls	r2, r2, #12
 800e894:	4b03      	ldr	r3, [pc, #12]	; (800e8a4 <__aeabi_ddiv+0x5cc>)
 800e896:	0b12      	lsrs	r2, r2, #12
 800e898:	e575      	b.n	800e386 <__aeabi_ddiv+0xae>
 800e89a:	9900      	ldr	r1, [sp, #0]
 800e89c:	4299      	cmp	r1, r3
 800e89e:	d3ea      	bcc.n	800e876 <__aeabi_ddiv+0x59e>
 800e8a0:	0015      	movs	r5, r2
 800e8a2:	e7d3      	b.n	800e84c <__aeabi_ddiv+0x574>
 800e8a4:	000007ff 	.word	0x000007ff
 800e8a8:	0000043e 	.word	0x0000043e
 800e8ac:	0000041e 	.word	0x0000041e
 800e8b0:	000003ff 	.word	0x000003ff

0800e8b4 <__eqdf2>:
 800e8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8b6:	464e      	mov	r6, r9
 800e8b8:	4645      	mov	r5, r8
 800e8ba:	46de      	mov	lr, fp
 800e8bc:	4657      	mov	r7, sl
 800e8be:	4690      	mov	r8, r2
 800e8c0:	b5e0      	push	{r5, r6, r7, lr}
 800e8c2:	0017      	movs	r7, r2
 800e8c4:	031a      	lsls	r2, r3, #12
 800e8c6:	0b12      	lsrs	r2, r2, #12
 800e8c8:	0005      	movs	r5, r0
 800e8ca:	4684      	mov	ip, r0
 800e8cc:	4819      	ldr	r0, [pc, #100]	; (800e934 <__eqdf2+0x80>)
 800e8ce:	030e      	lsls	r6, r1, #12
 800e8d0:	004c      	lsls	r4, r1, #1
 800e8d2:	4691      	mov	r9, r2
 800e8d4:	005a      	lsls	r2, r3, #1
 800e8d6:	0fdb      	lsrs	r3, r3, #31
 800e8d8:	469b      	mov	fp, r3
 800e8da:	0b36      	lsrs	r6, r6, #12
 800e8dc:	0d64      	lsrs	r4, r4, #21
 800e8de:	0fc9      	lsrs	r1, r1, #31
 800e8e0:	0d52      	lsrs	r2, r2, #21
 800e8e2:	4284      	cmp	r4, r0
 800e8e4:	d019      	beq.n	800e91a <__eqdf2+0x66>
 800e8e6:	4282      	cmp	r2, r0
 800e8e8:	d010      	beq.n	800e90c <__eqdf2+0x58>
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	4294      	cmp	r4, r2
 800e8ee:	d10e      	bne.n	800e90e <__eqdf2+0x5a>
 800e8f0:	454e      	cmp	r6, r9
 800e8f2:	d10c      	bne.n	800e90e <__eqdf2+0x5a>
 800e8f4:	2001      	movs	r0, #1
 800e8f6:	45c4      	cmp	ip, r8
 800e8f8:	d109      	bne.n	800e90e <__eqdf2+0x5a>
 800e8fa:	4559      	cmp	r1, fp
 800e8fc:	d017      	beq.n	800e92e <__eqdf2+0x7a>
 800e8fe:	2c00      	cmp	r4, #0
 800e900:	d105      	bne.n	800e90e <__eqdf2+0x5a>
 800e902:	0030      	movs	r0, r6
 800e904:	4328      	orrs	r0, r5
 800e906:	1e43      	subs	r3, r0, #1
 800e908:	4198      	sbcs	r0, r3
 800e90a:	e000      	b.n	800e90e <__eqdf2+0x5a>
 800e90c:	2001      	movs	r0, #1
 800e90e:	bcf0      	pop	{r4, r5, r6, r7}
 800e910:	46bb      	mov	fp, r7
 800e912:	46b2      	mov	sl, r6
 800e914:	46a9      	mov	r9, r5
 800e916:	46a0      	mov	r8, r4
 800e918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e91a:	0033      	movs	r3, r6
 800e91c:	2001      	movs	r0, #1
 800e91e:	432b      	orrs	r3, r5
 800e920:	d1f5      	bne.n	800e90e <__eqdf2+0x5a>
 800e922:	42a2      	cmp	r2, r4
 800e924:	d1f3      	bne.n	800e90e <__eqdf2+0x5a>
 800e926:	464b      	mov	r3, r9
 800e928:	433b      	orrs	r3, r7
 800e92a:	d1f0      	bne.n	800e90e <__eqdf2+0x5a>
 800e92c:	e7e2      	b.n	800e8f4 <__eqdf2+0x40>
 800e92e:	2000      	movs	r0, #0
 800e930:	e7ed      	b.n	800e90e <__eqdf2+0x5a>
 800e932:	46c0      	nop			; (mov r8, r8)
 800e934:	000007ff 	.word	0x000007ff

0800e938 <__gedf2>:
 800e938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e93a:	4647      	mov	r7, r8
 800e93c:	46ce      	mov	lr, r9
 800e93e:	0004      	movs	r4, r0
 800e940:	0018      	movs	r0, r3
 800e942:	0016      	movs	r6, r2
 800e944:	031b      	lsls	r3, r3, #12
 800e946:	0b1b      	lsrs	r3, r3, #12
 800e948:	4d2d      	ldr	r5, [pc, #180]	; (800ea00 <__gedf2+0xc8>)
 800e94a:	004a      	lsls	r2, r1, #1
 800e94c:	4699      	mov	r9, r3
 800e94e:	b580      	push	{r7, lr}
 800e950:	0043      	lsls	r3, r0, #1
 800e952:	030f      	lsls	r7, r1, #12
 800e954:	46a4      	mov	ip, r4
 800e956:	46b0      	mov	r8, r6
 800e958:	0b3f      	lsrs	r7, r7, #12
 800e95a:	0d52      	lsrs	r2, r2, #21
 800e95c:	0fc9      	lsrs	r1, r1, #31
 800e95e:	0d5b      	lsrs	r3, r3, #21
 800e960:	0fc0      	lsrs	r0, r0, #31
 800e962:	42aa      	cmp	r2, r5
 800e964:	d021      	beq.n	800e9aa <__gedf2+0x72>
 800e966:	42ab      	cmp	r3, r5
 800e968:	d013      	beq.n	800e992 <__gedf2+0x5a>
 800e96a:	2a00      	cmp	r2, #0
 800e96c:	d122      	bne.n	800e9b4 <__gedf2+0x7c>
 800e96e:	433c      	orrs	r4, r7
 800e970:	2b00      	cmp	r3, #0
 800e972:	d102      	bne.n	800e97a <__gedf2+0x42>
 800e974:	464d      	mov	r5, r9
 800e976:	432e      	orrs	r6, r5
 800e978:	d022      	beq.n	800e9c0 <__gedf2+0x88>
 800e97a:	2c00      	cmp	r4, #0
 800e97c:	d010      	beq.n	800e9a0 <__gedf2+0x68>
 800e97e:	4281      	cmp	r1, r0
 800e980:	d022      	beq.n	800e9c8 <__gedf2+0x90>
 800e982:	2002      	movs	r0, #2
 800e984:	3901      	subs	r1, #1
 800e986:	4008      	ands	r0, r1
 800e988:	3801      	subs	r0, #1
 800e98a:	bcc0      	pop	{r6, r7}
 800e98c:	46b9      	mov	r9, r7
 800e98e:	46b0      	mov	r8, r6
 800e990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e992:	464d      	mov	r5, r9
 800e994:	432e      	orrs	r6, r5
 800e996:	d129      	bne.n	800e9ec <__gedf2+0xb4>
 800e998:	2a00      	cmp	r2, #0
 800e99a:	d1f0      	bne.n	800e97e <__gedf2+0x46>
 800e99c:	433c      	orrs	r4, r7
 800e99e:	d1ee      	bne.n	800e97e <__gedf2+0x46>
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	d1f2      	bne.n	800e98a <__gedf2+0x52>
 800e9a4:	2001      	movs	r0, #1
 800e9a6:	4240      	negs	r0, r0
 800e9a8:	e7ef      	b.n	800e98a <__gedf2+0x52>
 800e9aa:	003d      	movs	r5, r7
 800e9ac:	4325      	orrs	r5, r4
 800e9ae:	d11d      	bne.n	800e9ec <__gedf2+0xb4>
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d0ee      	beq.n	800e992 <__gedf2+0x5a>
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1e2      	bne.n	800e97e <__gedf2+0x46>
 800e9b8:	464c      	mov	r4, r9
 800e9ba:	4326      	orrs	r6, r4
 800e9bc:	d1df      	bne.n	800e97e <__gedf2+0x46>
 800e9be:	e7e0      	b.n	800e982 <__gedf2+0x4a>
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	2c00      	cmp	r4, #0
 800e9c4:	d0e1      	beq.n	800e98a <__gedf2+0x52>
 800e9c6:	e7dc      	b.n	800e982 <__gedf2+0x4a>
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	dc0a      	bgt.n	800e9e2 <__gedf2+0xaa>
 800e9cc:	dbe8      	blt.n	800e9a0 <__gedf2+0x68>
 800e9ce:	454f      	cmp	r7, r9
 800e9d0:	d8d7      	bhi.n	800e982 <__gedf2+0x4a>
 800e9d2:	d00e      	beq.n	800e9f2 <__gedf2+0xba>
 800e9d4:	2000      	movs	r0, #0
 800e9d6:	454f      	cmp	r7, r9
 800e9d8:	d2d7      	bcs.n	800e98a <__gedf2+0x52>
 800e9da:	2900      	cmp	r1, #0
 800e9dc:	d0e2      	beq.n	800e9a4 <__gedf2+0x6c>
 800e9de:	0008      	movs	r0, r1
 800e9e0:	e7d3      	b.n	800e98a <__gedf2+0x52>
 800e9e2:	4243      	negs	r3, r0
 800e9e4:	4158      	adcs	r0, r3
 800e9e6:	0040      	lsls	r0, r0, #1
 800e9e8:	3801      	subs	r0, #1
 800e9ea:	e7ce      	b.n	800e98a <__gedf2+0x52>
 800e9ec:	2002      	movs	r0, #2
 800e9ee:	4240      	negs	r0, r0
 800e9f0:	e7cb      	b.n	800e98a <__gedf2+0x52>
 800e9f2:	45c4      	cmp	ip, r8
 800e9f4:	d8c5      	bhi.n	800e982 <__gedf2+0x4a>
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	45c4      	cmp	ip, r8
 800e9fa:	d2c6      	bcs.n	800e98a <__gedf2+0x52>
 800e9fc:	e7ed      	b.n	800e9da <__gedf2+0xa2>
 800e9fe:	46c0      	nop			; (mov r8, r8)
 800ea00:	000007ff 	.word	0x000007ff

0800ea04 <__ledf2>:
 800ea04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea06:	4647      	mov	r7, r8
 800ea08:	46ce      	mov	lr, r9
 800ea0a:	0004      	movs	r4, r0
 800ea0c:	0018      	movs	r0, r3
 800ea0e:	0016      	movs	r6, r2
 800ea10:	031b      	lsls	r3, r3, #12
 800ea12:	0b1b      	lsrs	r3, r3, #12
 800ea14:	4d2c      	ldr	r5, [pc, #176]	; (800eac8 <__ledf2+0xc4>)
 800ea16:	004a      	lsls	r2, r1, #1
 800ea18:	4699      	mov	r9, r3
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	0043      	lsls	r3, r0, #1
 800ea1e:	030f      	lsls	r7, r1, #12
 800ea20:	46a4      	mov	ip, r4
 800ea22:	46b0      	mov	r8, r6
 800ea24:	0b3f      	lsrs	r7, r7, #12
 800ea26:	0d52      	lsrs	r2, r2, #21
 800ea28:	0fc9      	lsrs	r1, r1, #31
 800ea2a:	0d5b      	lsrs	r3, r3, #21
 800ea2c:	0fc0      	lsrs	r0, r0, #31
 800ea2e:	42aa      	cmp	r2, r5
 800ea30:	d00d      	beq.n	800ea4e <__ledf2+0x4a>
 800ea32:	42ab      	cmp	r3, r5
 800ea34:	d010      	beq.n	800ea58 <__ledf2+0x54>
 800ea36:	2a00      	cmp	r2, #0
 800ea38:	d127      	bne.n	800ea8a <__ledf2+0x86>
 800ea3a:	433c      	orrs	r4, r7
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d111      	bne.n	800ea64 <__ledf2+0x60>
 800ea40:	464d      	mov	r5, r9
 800ea42:	432e      	orrs	r6, r5
 800ea44:	d10e      	bne.n	800ea64 <__ledf2+0x60>
 800ea46:	2000      	movs	r0, #0
 800ea48:	2c00      	cmp	r4, #0
 800ea4a:	d015      	beq.n	800ea78 <__ledf2+0x74>
 800ea4c:	e00e      	b.n	800ea6c <__ledf2+0x68>
 800ea4e:	003d      	movs	r5, r7
 800ea50:	4325      	orrs	r5, r4
 800ea52:	d110      	bne.n	800ea76 <__ledf2+0x72>
 800ea54:	4293      	cmp	r3, r2
 800ea56:	d118      	bne.n	800ea8a <__ledf2+0x86>
 800ea58:	464d      	mov	r5, r9
 800ea5a:	432e      	orrs	r6, r5
 800ea5c:	d10b      	bne.n	800ea76 <__ledf2+0x72>
 800ea5e:	2a00      	cmp	r2, #0
 800ea60:	d102      	bne.n	800ea68 <__ledf2+0x64>
 800ea62:	433c      	orrs	r4, r7
 800ea64:	2c00      	cmp	r4, #0
 800ea66:	d00b      	beq.n	800ea80 <__ledf2+0x7c>
 800ea68:	4281      	cmp	r1, r0
 800ea6a:	d014      	beq.n	800ea96 <__ledf2+0x92>
 800ea6c:	2002      	movs	r0, #2
 800ea6e:	3901      	subs	r1, #1
 800ea70:	4008      	ands	r0, r1
 800ea72:	3801      	subs	r0, #1
 800ea74:	e000      	b.n	800ea78 <__ledf2+0x74>
 800ea76:	2002      	movs	r0, #2
 800ea78:	bcc0      	pop	{r6, r7}
 800ea7a:	46b9      	mov	r9, r7
 800ea7c:	46b0      	mov	r8, r6
 800ea7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d1f9      	bne.n	800ea78 <__ledf2+0x74>
 800ea84:	2001      	movs	r0, #1
 800ea86:	4240      	negs	r0, r0
 800ea88:	e7f6      	b.n	800ea78 <__ledf2+0x74>
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d1ec      	bne.n	800ea68 <__ledf2+0x64>
 800ea8e:	464c      	mov	r4, r9
 800ea90:	4326      	orrs	r6, r4
 800ea92:	d1e9      	bne.n	800ea68 <__ledf2+0x64>
 800ea94:	e7ea      	b.n	800ea6c <__ledf2+0x68>
 800ea96:	429a      	cmp	r2, r3
 800ea98:	dd04      	ble.n	800eaa4 <__ledf2+0xa0>
 800ea9a:	4243      	negs	r3, r0
 800ea9c:	4158      	adcs	r0, r3
 800ea9e:	0040      	lsls	r0, r0, #1
 800eaa0:	3801      	subs	r0, #1
 800eaa2:	e7e9      	b.n	800ea78 <__ledf2+0x74>
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	dbeb      	blt.n	800ea80 <__ledf2+0x7c>
 800eaa8:	454f      	cmp	r7, r9
 800eaaa:	d8df      	bhi.n	800ea6c <__ledf2+0x68>
 800eaac:	d006      	beq.n	800eabc <__ledf2+0xb8>
 800eaae:	2000      	movs	r0, #0
 800eab0:	454f      	cmp	r7, r9
 800eab2:	d2e1      	bcs.n	800ea78 <__ledf2+0x74>
 800eab4:	2900      	cmp	r1, #0
 800eab6:	d0e5      	beq.n	800ea84 <__ledf2+0x80>
 800eab8:	0008      	movs	r0, r1
 800eaba:	e7dd      	b.n	800ea78 <__ledf2+0x74>
 800eabc:	45c4      	cmp	ip, r8
 800eabe:	d8d5      	bhi.n	800ea6c <__ledf2+0x68>
 800eac0:	2000      	movs	r0, #0
 800eac2:	45c4      	cmp	ip, r8
 800eac4:	d2d8      	bcs.n	800ea78 <__ledf2+0x74>
 800eac6:	e7f5      	b.n	800eab4 <__ledf2+0xb0>
 800eac8:	000007ff 	.word	0x000007ff

0800eacc <__aeabi_dmul>:
 800eacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eace:	4645      	mov	r5, r8
 800ead0:	46de      	mov	lr, fp
 800ead2:	4657      	mov	r7, sl
 800ead4:	464e      	mov	r6, r9
 800ead6:	b5e0      	push	{r5, r6, r7, lr}
 800ead8:	001f      	movs	r7, r3
 800eada:	030b      	lsls	r3, r1, #12
 800eadc:	0b1b      	lsrs	r3, r3, #12
 800eade:	469b      	mov	fp, r3
 800eae0:	004d      	lsls	r5, r1, #1
 800eae2:	0fcb      	lsrs	r3, r1, #31
 800eae4:	0004      	movs	r4, r0
 800eae6:	4691      	mov	r9, r2
 800eae8:	4698      	mov	r8, r3
 800eaea:	b087      	sub	sp, #28
 800eaec:	0d6d      	lsrs	r5, r5, #21
 800eaee:	d100      	bne.n	800eaf2 <__aeabi_dmul+0x26>
 800eaf0:	e1cd      	b.n	800ee8e <__aeabi_dmul+0x3c2>
 800eaf2:	4bce      	ldr	r3, [pc, #824]	; (800ee2c <__aeabi_dmul+0x360>)
 800eaf4:	429d      	cmp	r5, r3
 800eaf6:	d100      	bne.n	800eafa <__aeabi_dmul+0x2e>
 800eaf8:	e1e9      	b.n	800eece <__aeabi_dmul+0x402>
 800eafa:	465a      	mov	r2, fp
 800eafc:	0f43      	lsrs	r3, r0, #29
 800eafe:	00d2      	lsls	r2, r2, #3
 800eb00:	4313      	orrs	r3, r2
 800eb02:	2280      	movs	r2, #128	; 0x80
 800eb04:	0412      	lsls	r2, r2, #16
 800eb06:	431a      	orrs	r2, r3
 800eb08:	00c3      	lsls	r3, r0, #3
 800eb0a:	469a      	mov	sl, r3
 800eb0c:	4bc8      	ldr	r3, [pc, #800]	; (800ee30 <__aeabi_dmul+0x364>)
 800eb0e:	4693      	mov	fp, r2
 800eb10:	469c      	mov	ip, r3
 800eb12:	2300      	movs	r3, #0
 800eb14:	2600      	movs	r6, #0
 800eb16:	4465      	add	r5, ip
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	033c      	lsls	r4, r7, #12
 800eb1c:	007b      	lsls	r3, r7, #1
 800eb1e:	4648      	mov	r0, r9
 800eb20:	0b24      	lsrs	r4, r4, #12
 800eb22:	0d5b      	lsrs	r3, r3, #21
 800eb24:	0fff      	lsrs	r7, r7, #31
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d100      	bne.n	800eb2c <__aeabi_dmul+0x60>
 800eb2a:	e189      	b.n	800ee40 <__aeabi_dmul+0x374>
 800eb2c:	4abf      	ldr	r2, [pc, #764]	; (800ee2c <__aeabi_dmul+0x360>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d019      	beq.n	800eb66 <__aeabi_dmul+0x9a>
 800eb32:	0f42      	lsrs	r2, r0, #29
 800eb34:	00e4      	lsls	r4, r4, #3
 800eb36:	4322      	orrs	r2, r4
 800eb38:	2480      	movs	r4, #128	; 0x80
 800eb3a:	0424      	lsls	r4, r4, #16
 800eb3c:	4314      	orrs	r4, r2
 800eb3e:	4abc      	ldr	r2, [pc, #752]	; (800ee30 <__aeabi_dmul+0x364>)
 800eb40:	2100      	movs	r1, #0
 800eb42:	4694      	mov	ip, r2
 800eb44:	4642      	mov	r2, r8
 800eb46:	4463      	add	r3, ip
 800eb48:	195b      	adds	r3, r3, r5
 800eb4a:	9301      	str	r3, [sp, #4]
 800eb4c:	9b01      	ldr	r3, [sp, #4]
 800eb4e:	407a      	eors	r2, r7
 800eb50:	3301      	adds	r3, #1
 800eb52:	00c0      	lsls	r0, r0, #3
 800eb54:	b2d2      	uxtb	r2, r2
 800eb56:	9302      	str	r3, [sp, #8]
 800eb58:	2e0a      	cmp	r6, #10
 800eb5a:	dd1c      	ble.n	800eb96 <__aeabi_dmul+0xca>
 800eb5c:	003a      	movs	r2, r7
 800eb5e:	2e0b      	cmp	r6, #11
 800eb60:	d05e      	beq.n	800ec20 <__aeabi_dmul+0x154>
 800eb62:	4647      	mov	r7, r8
 800eb64:	e056      	b.n	800ec14 <__aeabi_dmul+0x148>
 800eb66:	4649      	mov	r1, r9
 800eb68:	4bb0      	ldr	r3, [pc, #704]	; (800ee2c <__aeabi_dmul+0x360>)
 800eb6a:	4321      	orrs	r1, r4
 800eb6c:	18eb      	adds	r3, r5, r3
 800eb6e:	9301      	str	r3, [sp, #4]
 800eb70:	2900      	cmp	r1, #0
 800eb72:	d12a      	bne.n	800ebca <__aeabi_dmul+0xfe>
 800eb74:	2080      	movs	r0, #128	; 0x80
 800eb76:	2202      	movs	r2, #2
 800eb78:	0100      	lsls	r0, r0, #4
 800eb7a:	002b      	movs	r3, r5
 800eb7c:	4684      	mov	ip, r0
 800eb7e:	4316      	orrs	r6, r2
 800eb80:	4642      	mov	r2, r8
 800eb82:	4463      	add	r3, ip
 800eb84:	407a      	eors	r2, r7
 800eb86:	b2d2      	uxtb	r2, r2
 800eb88:	9302      	str	r3, [sp, #8]
 800eb8a:	2e0a      	cmp	r6, #10
 800eb8c:	dd00      	ble.n	800eb90 <__aeabi_dmul+0xc4>
 800eb8e:	e231      	b.n	800eff4 <__aeabi_dmul+0x528>
 800eb90:	2000      	movs	r0, #0
 800eb92:	2400      	movs	r4, #0
 800eb94:	2102      	movs	r1, #2
 800eb96:	2e02      	cmp	r6, #2
 800eb98:	dc26      	bgt.n	800ebe8 <__aeabi_dmul+0x11c>
 800eb9a:	3e01      	subs	r6, #1
 800eb9c:	2e01      	cmp	r6, #1
 800eb9e:	d852      	bhi.n	800ec46 <__aeabi_dmul+0x17a>
 800eba0:	2902      	cmp	r1, #2
 800eba2:	d04c      	beq.n	800ec3e <__aeabi_dmul+0x172>
 800eba4:	2901      	cmp	r1, #1
 800eba6:	d000      	beq.n	800ebaa <__aeabi_dmul+0xde>
 800eba8:	e118      	b.n	800eddc <__aeabi_dmul+0x310>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	2400      	movs	r4, #0
 800ebae:	2500      	movs	r5, #0
 800ebb0:	051b      	lsls	r3, r3, #20
 800ebb2:	4323      	orrs	r3, r4
 800ebb4:	07d2      	lsls	r2, r2, #31
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	0028      	movs	r0, r5
 800ebba:	0019      	movs	r1, r3
 800ebbc:	b007      	add	sp, #28
 800ebbe:	bcf0      	pop	{r4, r5, r6, r7}
 800ebc0:	46bb      	mov	fp, r7
 800ebc2:	46b2      	mov	sl, r6
 800ebc4:	46a9      	mov	r9, r5
 800ebc6:	46a0      	mov	r8, r4
 800ebc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebca:	2180      	movs	r1, #128	; 0x80
 800ebcc:	2203      	movs	r2, #3
 800ebce:	0109      	lsls	r1, r1, #4
 800ebd0:	002b      	movs	r3, r5
 800ebd2:	468c      	mov	ip, r1
 800ebd4:	4316      	orrs	r6, r2
 800ebd6:	4642      	mov	r2, r8
 800ebd8:	4463      	add	r3, ip
 800ebda:	407a      	eors	r2, r7
 800ebdc:	b2d2      	uxtb	r2, r2
 800ebde:	9302      	str	r3, [sp, #8]
 800ebe0:	2e0a      	cmp	r6, #10
 800ebe2:	dd00      	ble.n	800ebe6 <__aeabi_dmul+0x11a>
 800ebe4:	e228      	b.n	800f038 <__aeabi_dmul+0x56c>
 800ebe6:	2103      	movs	r1, #3
 800ebe8:	2501      	movs	r5, #1
 800ebea:	40b5      	lsls	r5, r6
 800ebec:	46ac      	mov	ip, r5
 800ebee:	26a6      	movs	r6, #166	; 0xa6
 800ebf0:	4663      	mov	r3, ip
 800ebf2:	00f6      	lsls	r6, r6, #3
 800ebf4:	4035      	ands	r5, r6
 800ebf6:	4233      	tst	r3, r6
 800ebf8:	d10b      	bne.n	800ec12 <__aeabi_dmul+0x146>
 800ebfa:	2690      	movs	r6, #144	; 0x90
 800ebfc:	00b6      	lsls	r6, r6, #2
 800ebfe:	4233      	tst	r3, r6
 800ec00:	d118      	bne.n	800ec34 <__aeabi_dmul+0x168>
 800ec02:	3eb9      	subs	r6, #185	; 0xb9
 800ec04:	3eff      	subs	r6, #255	; 0xff
 800ec06:	421e      	tst	r6, r3
 800ec08:	d01d      	beq.n	800ec46 <__aeabi_dmul+0x17a>
 800ec0a:	46a3      	mov	fp, r4
 800ec0c:	4682      	mov	sl, r0
 800ec0e:	9100      	str	r1, [sp, #0]
 800ec10:	e000      	b.n	800ec14 <__aeabi_dmul+0x148>
 800ec12:	0017      	movs	r7, r2
 800ec14:	9900      	ldr	r1, [sp, #0]
 800ec16:	003a      	movs	r2, r7
 800ec18:	2902      	cmp	r1, #2
 800ec1a:	d010      	beq.n	800ec3e <__aeabi_dmul+0x172>
 800ec1c:	465c      	mov	r4, fp
 800ec1e:	4650      	mov	r0, sl
 800ec20:	2903      	cmp	r1, #3
 800ec22:	d1bf      	bne.n	800eba4 <__aeabi_dmul+0xd8>
 800ec24:	2380      	movs	r3, #128	; 0x80
 800ec26:	031b      	lsls	r3, r3, #12
 800ec28:	431c      	orrs	r4, r3
 800ec2a:	0324      	lsls	r4, r4, #12
 800ec2c:	0005      	movs	r5, r0
 800ec2e:	4b7f      	ldr	r3, [pc, #508]	; (800ee2c <__aeabi_dmul+0x360>)
 800ec30:	0b24      	lsrs	r4, r4, #12
 800ec32:	e7bd      	b.n	800ebb0 <__aeabi_dmul+0xe4>
 800ec34:	2480      	movs	r4, #128	; 0x80
 800ec36:	2200      	movs	r2, #0
 800ec38:	4b7c      	ldr	r3, [pc, #496]	; (800ee2c <__aeabi_dmul+0x360>)
 800ec3a:	0324      	lsls	r4, r4, #12
 800ec3c:	e7b8      	b.n	800ebb0 <__aeabi_dmul+0xe4>
 800ec3e:	2400      	movs	r4, #0
 800ec40:	2500      	movs	r5, #0
 800ec42:	4b7a      	ldr	r3, [pc, #488]	; (800ee2c <__aeabi_dmul+0x360>)
 800ec44:	e7b4      	b.n	800ebb0 <__aeabi_dmul+0xe4>
 800ec46:	4653      	mov	r3, sl
 800ec48:	041e      	lsls	r6, r3, #16
 800ec4a:	0c36      	lsrs	r6, r6, #16
 800ec4c:	0c1f      	lsrs	r7, r3, #16
 800ec4e:	0033      	movs	r3, r6
 800ec50:	0c01      	lsrs	r1, r0, #16
 800ec52:	0400      	lsls	r0, r0, #16
 800ec54:	0c00      	lsrs	r0, r0, #16
 800ec56:	4343      	muls	r3, r0
 800ec58:	4698      	mov	r8, r3
 800ec5a:	0003      	movs	r3, r0
 800ec5c:	437b      	muls	r3, r7
 800ec5e:	4699      	mov	r9, r3
 800ec60:	0033      	movs	r3, r6
 800ec62:	434b      	muls	r3, r1
 800ec64:	469c      	mov	ip, r3
 800ec66:	4643      	mov	r3, r8
 800ec68:	000d      	movs	r5, r1
 800ec6a:	0c1b      	lsrs	r3, r3, #16
 800ec6c:	469a      	mov	sl, r3
 800ec6e:	437d      	muls	r5, r7
 800ec70:	44cc      	add	ip, r9
 800ec72:	44d4      	add	ip, sl
 800ec74:	9500      	str	r5, [sp, #0]
 800ec76:	45e1      	cmp	r9, ip
 800ec78:	d904      	bls.n	800ec84 <__aeabi_dmul+0x1b8>
 800ec7a:	2380      	movs	r3, #128	; 0x80
 800ec7c:	025b      	lsls	r3, r3, #9
 800ec7e:	4699      	mov	r9, r3
 800ec80:	444d      	add	r5, r9
 800ec82:	9500      	str	r5, [sp, #0]
 800ec84:	4663      	mov	r3, ip
 800ec86:	0c1b      	lsrs	r3, r3, #16
 800ec88:	001d      	movs	r5, r3
 800ec8a:	4663      	mov	r3, ip
 800ec8c:	041b      	lsls	r3, r3, #16
 800ec8e:	469c      	mov	ip, r3
 800ec90:	4643      	mov	r3, r8
 800ec92:	041b      	lsls	r3, r3, #16
 800ec94:	0c1b      	lsrs	r3, r3, #16
 800ec96:	4698      	mov	r8, r3
 800ec98:	4663      	mov	r3, ip
 800ec9a:	4443      	add	r3, r8
 800ec9c:	9303      	str	r3, [sp, #12]
 800ec9e:	0c23      	lsrs	r3, r4, #16
 800eca0:	4698      	mov	r8, r3
 800eca2:	0033      	movs	r3, r6
 800eca4:	0424      	lsls	r4, r4, #16
 800eca6:	0c24      	lsrs	r4, r4, #16
 800eca8:	4363      	muls	r3, r4
 800ecaa:	469c      	mov	ip, r3
 800ecac:	0023      	movs	r3, r4
 800ecae:	437b      	muls	r3, r7
 800ecb0:	4699      	mov	r9, r3
 800ecb2:	4643      	mov	r3, r8
 800ecb4:	435e      	muls	r6, r3
 800ecb6:	435f      	muls	r7, r3
 800ecb8:	444e      	add	r6, r9
 800ecba:	4663      	mov	r3, ip
 800ecbc:	46b2      	mov	sl, r6
 800ecbe:	0c1e      	lsrs	r6, r3, #16
 800ecc0:	4456      	add	r6, sl
 800ecc2:	45b1      	cmp	r9, r6
 800ecc4:	d903      	bls.n	800ecce <__aeabi_dmul+0x202>
 800ecc6:	2380      	movs	r3, #128	; 0x80
 800ecc8:	025b      	lsls	r3, r3, #9
 800ecca:	4699      	mov	r9, r3
 800eccc:	444f      	add	r7, r9
 800ecce:	0c33      	lsrs	r3, r6, #16
 800ecd0:	4699      	mov	r9, r3
 800ecd2:	003b      	movs	r3, r7
 800ecd4:	444b      	add	r3, r9
 800ecd6:	9305      	str	r3, [sp, #20]
 800ecd8:	4663      	mov	r3, ip
 800ecda:	46ac      	mov	ip, r5
 800ecdc:	041f      	lsls	r7, r3, #16
 800ecde:	0c3f      	lsrs	r7, r7, #16
 800ece0:	0436      	lsls	r6, r6, #16
 800ece2:	19f6      	adds	r6, r6, r7
 800ece4:	44b4      	add	ip, r6
 800ece6:	4663      	mov	r3, ip
 800ece8:	9304      	str	r3, [sp, #16]
 800ecea:	465b      	mov	r3, fp
 800ecec:	0c1b      	lsrs	r3, r3, #16
 800ecee:	469c      	mov	ip, r3
 800ecf0:	465b      	mov	r3, fp
 800ecf2:	041f      	lsls	r7, r3, #16
 800ecf4:	0c3f      	lsrs	r7, r7, #16
 800ecf6:	003b      	movs	r3, r7
 800ecf8:	4343      	muls	r3, r0
 800ecfa:	4699      	mov	r9, r3
 800ecfc:	4663      	mov	r3, ip
 800ecfe:	4343      	muls	r3, r0
 800ed00:	469a      	mov	sl, r3
 800ed02:	464b      	mov	r3, r9
 800ed04:	4660      	mov	r0, ip
 800ed06:	0c1b      	lsrs	r3, r3, #16
 800ed08:	469b      	mov	fp, r3
 800ed0a:	4348      	muls	r0, r1
 800ed0c:	4379      	muls	r1, r7
 800ed0e:	4451      	add	r1, sl
 800ed10:	4459      	add	r1, fp
 800ed12:	458a      	cmp	sl, r1
 800ed14:	d903      	bls.n	800ed1e <__aeabi_dmul+0x252>
 800ed16:	2380      	movs	r3, #128	; 0x80
 800ed18:	025b      	lsls	r3, r3, #9
 800ed1a:	469a      	mov	sl, r3
 800ed1c:	4450      	add	r0, sl
 800ed1e:	0c0b      	lsrs	r3, r1, #16
 800ed20:	469a      	mov	sl, r3
 800ed22:	464b      	mov	r3, r9
 800ed24:	041b      	lsls	r3, r3, #16
 800ed26:	0c1b      	lsrs	r3, r3, #16
 800ed28:	4699      	mov	r9, r3
 800ed2a:	003b      	movs	r3, r7
 800ed2c:	4363      	muls	r3, r4
 800ed2e:	0409      	lsls	r1, r1, #16
 800ed30:	4645      	mov	r5, r8
 800ed32:	4449      	add	r1, r9
 800ed34:	4699      	mov	r9, r3
 800ed36:	4663      	mov	r3, ip
 800ed38:	435c      	muls	r4, r3
 800ed3a:	436b      	muls	r3, r5
 800ed3c:	469c      	mov	ip, r3
 800ed3e:	464b      	mov	r3, r9
 800ed40:	0c1b      	lsrs	r3, r3, #16
 800ed42:	4698      	mov	r8, r3
 800ed44:	436f      	muls	r7, r5
 800ed46:	193f      	adds	r7, r7, r4
 800ed48:	4447      	add	r7, r8
 800ed4a:	4450      	add	r0, sl
 800ed4c:	42bc      	cmp	r4, r7
 800ed4e:	d903      	bls.n	800ed58 <__aeabi_dmul+0x28c>
 800ed50:	2380      	movs	r3, #128	; 0x80
 800ed52:	025b      	lsls	r3, r3, #9
 800ed54:	4698      	mov	r8, r3
 800ed56:	44c4      	add	ip, r8
 800ed58:	9b04      	ldr	r3, [sp, #16]
 800ed5a:	9d00      	ldr	r5, [sp, #0]
 800ed5c:	4698      	mov	r8, r3
 800ed5e:	4445      	add	r5, r8
 800ed60:	42b5      	cmp	r5, r6
 800ed62:	41b6      	sbcs	r6, r6
 800ed64:	4273      	negs	r3, r6
 800ed66:	4698      	mov	r8, r3
 800ed68:	464b      	mov	r3, r9
 800ed6a:	041e      	lsls	r6, r3, #16
 800ed6c:	9b05      	ldr	r3, [sp, #20]
 800ed6e:	043c      	lsls	r4, r7, #16
 800ed70:	4699      	mov	r9, r3
 800ed72:	0c36      	lsrs	r6, r6, #16
 800ed74:	19a4      	adds	r4, r4, r6
 800ed76:	444c      	add	r4, r9
 800ed78:	46a1      	mov	r9, r4
 800ed7a:	4683      	mov	fp, r0
 800ed7c:	186e      	adds	r6, r5, r1
 800ed7e:	44c1      	add	r9, r8
 800ed80:	428e      	cmp	r6, r1
 800ed82:	4189      	sbcs	r1, r1
 800ed84:	44cb      	add	fp, r9
 800ed86:	465d      	mov	r5, fp
 800ed88:	4249      	negs	r1, r1
 800ed8a:	186d      	adds	r5, r5, r1
 800ed8c:	429c      	cmp	r4, r3
 800ed8e:	41a4      	sbcs	r4, r4
 800ed90:	45c1      	cmp	r9, r8
 800ed92:	419b      	sbcs	r3, r3
 800ed94:	4583      	cmp	fp, r0
 800ed96:	4180      	sbcs	r0, r0
 800ed98:	428d      	cmp	r5, r1
 800ed9a:	4189      	sbcs	r1, r1
 800ed9c:	425b      	negs	r3, r3
 800ed9e:	4264      	negs	r4, r4
 800eda0:	431c      	orrs	r4, r3
 800eda2:	4240      	negs	r0, r0
 800eda4:	9b03      	ldr	r3, [sp, #12]
 800eda6:	4249      	negs	r1, r1
 800eda8:	4301      	orrs	r1, r0
 800edaa:	0270      	lsls	r0, r6, #9
 800edac:	0c3f      	lsrs	r7, r7, #16
 800edae:	4318      	orrs	r0, r3
 800edb0:	19e4      	adds	r4, r4, r7
 800edb2:	1e47      	subs	r7, r0, #1
 800edb4:	41b8      	sbcs	r0, r7
 800edb6:	1864      	adds	r4, r4, r1
 800edb8:	4464      	add	r4, ip
 800edba:	0df6      	lsrs	r6, r6, #23
 800edbc:	0261      	lsls	r1, r4, #9
 800edbe:	4330      	orrs	r0, r6
 800edc0:	0dec      	lsrs	r4, r5, #23
 800edc2:	026e      	lsls	r6, r5, #9
 800edc4:	430c      	orrs	r4, r1
 800edc6:	4330      	orrs	r0, r6
 800edc8:	01c9      	lsls	r1, r1, #7
 800edca:	d400      	bmi.n	800edce <__aeabi_dmul+0x302>
 800edcc:	e0f1      	b.n	800efb2 <__aeabi_dmul+0x4e6>
 800edce:	2101      	movs	r1, #1
 800edd0:	0843      	lsrs	r3, r0, #1
 800edd2:	4001      	ands	r1, r0
 800edd4:	430b      	orrs	r3, r1
 800edd6:	07e0      	lsls	r0, r4, #31
 800edd8:	4318      	orrs	r0, r3
 800edda:	0864      	lsrs	r4, r4, #1
 800eddc:	4915      	ldr	r1, [pc, #84]	; (800ee34 <__aeabi_dmul+0x368>)
 800edde:	9b02      	ldr	r3, [sp, #8]
 800ede0:	468c      	mov	ip, r1
 800ede2:	4463      	add	r3, ip
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	dc00      	bgt.n	800edea <__aeabi_dmul+0x31e>
 800ede8:	e097      	b.n	800ef1a <__aeabi_dmul+0x44e>
 800edea:	0741      	lsls	r1, r0, #29
 800edec:	d009      	beq.n	800ee02 <__aeabi_dmul+0x336>
 800edee:	210f      	movs	r1, #15
 800edf0:	4001      	ands	r1, r0
 800edf2:	2904      	cmp	r1, #4
 800edf4:	d005      	beq.n	800ee02 <__aeabi_dmul+0x336>
 800edf6:	1d01      	adds	r1, r0, #4
 800edf8:	4281      	cmp	r1, r0
 800edfa:	4180      	sbcs	r0, r0
 800edfc:	4240      	negs	r0, r0
 800edfe:	1824      	adds	r4, r4, r0
 800ee00:	0008      	movs	r0, r1
 800ee02:	01e1      	lsls	r1, r4, #7
 800ee04:	d506      	bpl.n	800ee14 <__aeabi_dmul+0x348>
 800ee06:	2180      	movs	r1, #128	; 0x80
 800ee08:	00c9      	lsls	r1, r1, #3
 800ee0a:	468c      	mov	ip, r1
 800ee0c:	4b0a      	ldr	r3, [pc, #40]	; (800ee38 <__aeabi_dmul+0x36c>)
 800ee0e:	401c      	ands	r4, r3
 800ee10:	9b02      	ldr	r3, [sp, #8]
 800ee12:	4463      	add	r3, ip
 800ee14:	4909      	ldr	r1, [pc, #36]	; (800ee3c <__aeabi_dmul+0x370>)
 800ee16:	428b      	cmp	r3, r1
 800ee18:	dd00      	ble.n	800ee1c <__aeabi_dmul+0x350>
 800ee1a:	e710      	b.n	800ec3e <__aeabi_dmul+0x172>
 800ee1c:	0761      	lsls	r1, r4, #29
 800ee1e:	08c5      	lsrs	r5, r0, #3
 800ee20:	0264      	lsls	r4, r4, #9
 800ee22:	055b      	lsls	r3, r3, #21
 800ee24:	430d      	orrs	r5, r1
 800ee26:	0b24      	lsrs	r4, r4, #12
 800ee28:	0d5b      	lsrs	r3, r3, #21
 800ee2a:	e6c1      	b.n	800ebb0 <__aeabi_dmul+0xe4>
 800ee2c:	000007ff 	.word	0x000007ff
 800ee30:	fffffc01 	.word	0xfffffc01
 800ee34:	000003ff 	.word	0x000003ff
 800ee38:	feffffff 	.word	0xfeffffff
 800ee3c:	000007fe 	.word	0x000007fe
 800ee40:	464b      	mov	r3, r9
 800ee42:	4323      	orrs	r3, r4
 800ee44:	d059      	beq.n	800eefa <__aeabi_dmul+0x42e>
 800ee46:	2c00      	cmp	r4, #0
 800ee48:	d100      	bne.n	800ee4c <__aeabi_dmul+0x380>
 800ee4a:	e0a3      	b.n	800ef94 <__aeabi_dmul+0x4c8>
 800ee4c:	0020      	movs	r0, r4
 800ee4e:	f000 fdf9 	bl	800fa44 <__clzsi2>
 800ee52:	0001      	movs	r1, r0
 800ee54:	0003      	movs	r3, r0
 800ee56:	390b      	subs	r1, #11
 800ee58:	221d      	movs	r2, #29
 800ee5a:	1a52      	subs	r2, r2, r1
 800ee5c:	4649      	mov	r1, r9
 800ee5e:	0018      	movs	r0, r3
 800ee60:	40d1      	lsrs	r1, r2
 800ee62:	464a      	mov	r2, r9
 800ee64:	3808      	subs	r0, #8
 800ee66:	4082      	lsls	r2, r0
 800ee68:	4084      	lsls	r4, r0
 800ee6a:	0010      	movs	r0, r2
 800ee6c:	430c      	orrs	r4, r1
 800ee6e:	4a74      	ldr	r2, [pc, #464]	; (800f040 <__aeabi_dmul+0x574>)
 800ee70:	1aeb      	subs	r3, r5, r3
 800ee72:	4694      	mov	ip, r2
 800ee74:	4642      	mov	r2, r8
 800ee76:	4463      	add	r3, ip
 800ee78:	9301      	str	r3, [sp, #4]
 800ee7a:	9b01      	ldr	r3, [sp, #4]
 800ee7c:	407a      	eors	r2, r7
 800ee7e:	3301      	adds	r3, #1
 800ee80:	2100      	movs	r1, #0
 800ee82:	b2d2      	uxtb	r2, r2
 800ee84:	9302      	str	r3, [sp, #8]
 800ee86:	2e0a      	cmp	r6, #10
 800ee88:	dd00      	ble.n	800ee8c <__aeabi_dmul+0x3c0>
 800ee8a:	e667      	b.n	800eb5c <__aeabi_dmul+0x90>
 800ee8c:	e683      	b.n	800eb96 <__aeabi_dmul+0xca>
 800ee8e:	465b      	mov	r3, fp
 800ee90:	4303      	orrs	r3, r0
 800ee92:	469a      	mov	sl, r3
 800ee94:	d02a      	beq.n	800eeec <__aeabi_dmul+0x420>
 800ee96:	465b      	mov	r3, fp
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d06d      	beq.n	800ef78 <__aeabi_dmul+0x4ac>
 800ee9c:	4658      	mov	r0, fp
 800ee9e:	f000 fdd1 	bl	800fa44 <__clzsi2>
 800eea2:	0001      	movs	r1, r0
 800eea4:	0003      	movs	r3, r0
 800eea6:	390b      	subs	r1, #11
 800eea8:	221d      	movs	r2, #29
 800eeaa:	1a52      	subs	r2, r2, r1
 800eeac:	0021      	movs	r1, r4
 800eeae:	0018      	movs	r0, r3
 800eeb0:	465d      	mov	r5, fp
 800eeb2:	40d1      	lsrs	r1, r2
 800eeb4:	3808      	subs	r0, #8
 800eeb6:	4085      	lsls	r5, r0
 800eeb8:	000a      	movs	r2, r1
 800eeba:	4084      	lsls	r4, r0
 800eebc:	432a      	orrs	r2, r5
 800eebe:	4693      	mov	fp, r2
 800eec0:	46a2      	mov	sl, r4
 800eec2:	4d5f      	ldr	r5, [pc, #380]	; (800f040 <__aeabi_dmul+0x574>)
 800eec4:	2600      	movs	r6, #0
 800eec6:	1aed      	subs	r5, r5, r3
 800eec8:	2300      	movs	r3, #0
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	e625      	b.n	800eb1a <__aeabi_dmul+0x4e>
 800eece:	465b      	mov	r3, fp
 800eed0:	4303      	orrs	r3, r0
 800eed2:	469a      	mov	sl, r3
 800eed4:	d105      	bne.n	800eee2 <__aeabi_dmul+0x416>
 800eed6:	2300      	movs	r3, #0
 800eed8:	469b      	mov	fp, r3
 800eeda:	3302      	adds	r3, #2
 800eedc:	2608      	movs	r6, #8
 800eede:	9300      	str	r3, [sp, #0]
 800eee0:	e61b      	b.n	800eb1a <__aeabi_dmul+0x4e>
 800eee2:	2303      	movs	r3, #3
 800eee4:	4682      	mov	sl, r0
 800eee6:	260c      	movs	r6, #12
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	e616      	b.n	800eb1a <__aeabi_dmul+0x4e>
 800eeec:	2300      	movs	r3, #0
 800eeee:	469b      	mov	fp, r3
 800eef0:	3301      	adds	r3, #1
 800eef2:	2604      	movs	r6, #4
 800eef4:	2500      	movs	r5, #0
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	e60f      	b.n	800eb1a <__aeabi_dmul+0x4e>
 800eefa:	4642      	mov	r2, r8
 800eefc:	3301      	adds	r3, #1
 800eefe:	9501      	str	r5, [sp, #4]
 800ef00:	431e      	orrs	r6, r3
 800ef02:	9b01      	ldr	r3, [sp, #4]
 800ef04:	407a      	eors	r2, r7
 800ef06:	3301      	adds	r3, #1
 800ef08:	2400      	movs	r4, #0
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	2101      	movs	r1, #1
 800ef0e:	b2d2      	uxtb	r2, r2
 800ef10:	9302      	str	r3, [sp, #8]
 800ef12:	2e0a      	cmp	r6, #10
 800ef14:	dd00      	ble.n	800ef18 <__aeabi_dmul+0x44c>
 800ef16:	e621      	b.n	800eb5c <__aeabi_dmul+0x90>
 800ef18:	e63d      	b.n	800eb96 <__aeabi_dmul+0xca>
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	1ac9      	subs	r1, r1, r3
 800ef1e:	2938      	cmp	r1, #56	; 0x38
 800ef20:	dd00      	ble.n	800ef24 <__aeabi_dmul+0x458>
 800ef22:	e642      	b.n	800ebaa <__aeabi_dmul+0xde>
 800ef24:	291f      	cmp	r1, #31
 800ef26:	dd47      	ble.n	800efb8 <__aeabi_dmul+0x4ec>
 800ef28:	261f      	movs	r6, #31
 800ef2a:	0025      	movs	r5, r4
 800ef2c:	4276      	negs	r6, r6
 800ef2e:	1af3      	subs	r3, r6, r3
 800ef30:	40dd      	lsrs	r5, r3
 800ef32:	002b      	movs	r3, r5
 800ef34:	2920      	cmp	r1, #32
 800ef36:	d005      	beq.n	800ef44 <__aeabi_dmul+0x478>
 800ef38:	4942      	ldr	r1, [pc, #264]	; (800f044 <__aeabi_dmul+0x578>)
 800ef3a:	9d02      	ldr	r5, [sp, #8]
 800ef3c:	468c      	mov	ip, r1
 800ef3e:	4465      	add	r5, ip
 800ef40:	40ac      	lsls	r4, r5
 800ef42:	4320      	orrs	r0, r4
 800ef44:	1e41      	subs	r1, r0, #1
 800ef46:	4188      	sbcs	r0, r1
 800ef48:	4318      	orrs	r0, r3
 800ef4a:	2307      	movs	r3, #7
 800ef4c:	001d      	movs	r5, r3
 800ef4e:	2400      	movs	r4, #0
 800ef50:	4005      	ands	r5, r0
 800ef52:	4203      	tst	r3, r0
 800ef54:	d04a      	beq.n	800efec <__aeabi_dmul+0x520>
 800ef56:	230f      	movs	r3, #15
 800ef58:	2400      	movs	r4, #0
 800ef5a:	4003      	ands	r3, r0
 800ef5c:	2b04      	cmp	r3, #4
 800ef5e:	d042      	beq.n	800efe6 <__aeabi_dmul+0x51a>
 800ef60:	1d03      	adds	r3, r0, #4
 800ef62:	4283      	cmp	r3, r0
 800ef64:	4180      	sbcs	r0, r0
 800ef66:	4240      	negs	r0, r0
 800ef68:	1824      	adds	r4, r4, r0
 800ef6a:	0018      	movs	r0, r3
 800ef6c:	0223      	lsls	r3, r4, #8
 800ef6e:	d53a      	bpl.n	800efe6 <__aeabi_dmul+0x51a>
 800ef70:	2301      	movs	r3, #1
 800ef72:	2400      	movs	r4, #0
 800ef74:	2500      	movs	r5, #0
 800ef76:	e61b      	b.n	800ebb0 <__aeabi_dmul+0xe4>
 800ef78:	f000 fd64 	bl	800fa44 <__clzsi2>
 800ef7c:	0001      	movs	r1, r0
 800ef7e:	0003      	movs	r3, r0
 800ef80:	3115      	adds	r1, #21
 800ef82:	3320      	adds	r3, #32
 800ef84:	291c      	cmp	r1, #28
 800ef86:	dd8f      	ble.n	800eea8 <__aeabi_dmul+0x3dc>
 800ef88:	3808      	subs	r0, #8
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	4084      	lsls	r4, r0
 800ef8e:	4692      	mov	sl, r2
 800ef90:	46a3      	mov	fp, r4
 800ef92:	e796      	b.n	800eec2 <__aeabi_dmul+0x3f6>
 800ef94:	f000 fd56 	bl	800fa44 <__clzsi2>
 800ef98:	0001      	movs	r1, r0
 800ef9a:	0003      	movs	r3, r0
 800ef9c:	3115      	adds	r1, #21
 800ef9e:	3320      	adds	r3, #32
 800efa0:	291c      	cmp	r1, #28
 800efa2:	dc00      	bgt.n	800efa6 <__aeabi_dmul+0x4da>
 800efa4:	e758      	b.n	800ee58 <__aeabi_dmul+0x38c>
 800efa6:	0002      	movs	r2, r0
 800efa8:	464c      	mov	r4, r9
 800efaa:	3a08      	subs	r2, #8
 800efac:	2000      	movs	r0, #0
 800efae:	4094      	lsls	r4, r2
 800efb0:	e75d      	b.n	800ee6e <__aeabi_dmul+0x3a2>
 800efb2:	9b01      	ldr	r3, [sp, #4]
 800efb4:	9302      	str	r3, [sp, #8]
 800efb6:	e711      	b.n	800eddc <__aeabi_dmul+0x310>
 800efb8:	4b23      	ldr	r3, [pc, #140]	; (800f048 <__aeabi_dmul+0x57c>)
 800efba:	0026      	movs	r6, r4
 800efbc:	469c      	mov	ip, r3
 800efbe:	0003      	movs	r3, r0
 800efc0:	9d02      	ldr	r5, [sp, #8]
 800efc2:	40cb      	lsrs	r3, r1
 800efc4:	4465      	add	r5, ip
 800efc6:	40ae      	lsls	r6, r5
 800efc8:	431e      	orrs	r6, r3
 800efca:	0003      	movs	r3, r0
 800efcc:	40ab      	lsls	r3, r5
 800efce:	1e58      	subs	r0, r3, #1
 800efd0:	4183      	sbcs	r3, r0
 800efd2:	0030      	movs	r0, r6
 800efd4:	4318      	orrs	r0, r3
 800efd6:	40cc      	lsrs	r4, r1
 800efd8:	0743      	lsls	r3, r0, #29
 800efda:	d0c7      	beq.n	800ef6c <__aeabi_dmul+0x4a0>
 800efdc:	230f      	movs	r3, #15
 800efde:	4003      	ands	r3, r0
 800efe0:	2b04      	cmp	r3, #4
 800efe2:	d1bd      	bne.n	800ef60 <__aeabi_dmul+0x494>
 800efe4:	e7c2      	b.n	800ef6c <__aeabi_dmul+0x4a0>
 800efe6:	0765      	lsls	r5, r4, #29
 800efe8:	0264      	lsls	r4, r4, #9
 800efea:	0b24      	lsrs	r4, r4, #12
 800efec:	08c0      	lsrs	r0, r0, #3
 800efee:	2300      	movs	r3, #0
 800eff0:	4305      	orrs	r5, r0
 800eff2:	e5dd      	b.n	800ebb0 <__aeabi_dmul+0xe4>
 800eff4:	2500      	movs	r5, #0
 800eff6:	2302      	movs	r3, #2
 800eff8:	2e0f      	cmp	r6, #15
 800effa:	d10c      	bne.n	800f016 <__aeabi_dmul+0x54a>
 800effc:	2480      	movs	r4, #128	; 0x80
 800effe:	465b      	mov	r3, fp
 800f000:	0324      	lsls	r4, r4, #12
 800f002:	4223      	tst	r3, r4
 800f004:	d00e      	beq.n	800f024 <__aeabi_dmul+0x558>
 800f006:	4221      	tst	r1, r4
 800f008:	d10c      	bne.n	800f024 <__aeabi_dmul+0x558>
 800f00a:	430c      	orrs	r4, r1
 800f00c:	0324      	lsls	r4, r4, #12
 800f00e:	003a      	movs	r2, r7
 800f010:	4b0e      	ldr	r3, [pc, #56]	; (800f04c <__aeabi_dmul+0x580>)
 800f012:	0b24      	lsrs	r4, r4, #12
 800f014:	e5cc      	b.n	800ebb0 <__aeabi_dmul+0xe4>
 800f016:	2e0b      	cmp	r6, #11
 800f018:	d000      	beq.n	800f01c <__aeabi_dmul+0x550>
 800f01a:	e5a2      	b.n	800eb62 <__aeabi_dmul+0x96>
 800f01c:	468b      	mov	fp, r1
 800f01e:	46aa      	mov	sl, r5
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	e5f7      	b.n	800ec14 <__aeabi_dmul+0x148>
 800f024:	2480      	movs	r4, #128	; 0x80
 800f026:	465b      	mov	r3, fp
 800f028:	0324      	lsls	r4, r4, #12
 800f02a:	431c      	orrs	r4, r3
 800f02c:	0324      	lsls	r4, r4, #12
 800f02e:	4642      	mov	r2, r8
 800f030:	4655      	mov	r5, sl
 800f032:	4b06      	ldr	r3, [pc, #24]	; (800f04c <__aeabi_dmul+0x580>)
 800f034:	0b24      	lsrs	r4, r4, #12
 800f036:	e5bb      	b.n	800ebb0 <__aeabi_dmul+0xe4>
 800f038:	464d      	mov	r5, r9
 800f03a:	0021      	movs	r1, r4
 800f03c:	2303      	movs	r3, #3
 800f03e:	e7db      	b.n	800eff8 <__aeabi_dmul+0x52c>
 800f040:	fffffc0d 	.word	0xfffffc0d
 800f044:	0000043e 	.word	0x0000043e
 800f048:	0000041e 	.word	0x0000041e
 800f04c:	000007ff 	.word	0x000007ff

0800f050 <__aeabi_dsub>:
 800f050:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f052:	4657      	mov	r7, sl
 800f054:	464e      	mov	r6, r9
 800f056:	4645      	mov	r5, r8
 800f058:	46de      	mov	lr, fp
 800f05a:	b5e0      	push	{r5, r6, r7, lr}
 800f05c:	000d      	movs	r5, r1
 800f05e:	0004      	movs	r4, r0
 800f060:	0019      	movs	r1, r3
 800f062:	0010      	movs	r0, r2
 800f064:	032b      	lsls	r3, r5, #12
 800f066:	0a5b      	lsrs	r3, r3, #9
 800f068:	0f62      	lsrs	r2, r4, #29
 800f06a:	431a      	orrs	r2, r3
 800f06c:	00e3      	lsls	r3, r4, #3
 800f06e:	030c      	lsls	r4, r1, #12
 800f070:	0a64      	lsrs	r4, r4, #9
 800f072:	0f47      	lsrs	r7, r0, #29
 800f074:	4327      	orrs	r7, r4
 800f076:	4cd0      	ldr	r4, [pc, #832]	; (800f3b8 <__aeabi_dsub+0x368>)
 800f078:	006e      	lsls	r6, r5, #1
 800f07a:	4691      	mov	r9, r2
 800f07c:	b083      	sub	sp, #12
 800f07e:	004a      	lsls	r2, r1, #1
 800f080:	00c0      	lsls	r0, r0, #3
 800f082:	4698      	mov	r8, r3
 800f084:	46a2      	mov	sl, r4
 800f086:	0d76      	lsrs	r6, r6, #21
 800f088:	0fed      	lsrs	r5, r5, #31
 800f08a:	0d52      	lsrs	r2, r2, #21
 800f08c:	0fc9      	lsrs	r1, r1, #31
 800f08e:	9001      	str	r0, [sp, #4]
 800f090:	42a2      	cmp	r2, r4
 800f092:	d100      	bne.n	800f096 <__aeabi_dsub+0x46>
 800f094:	e0b9      	b.n	800f20a <__aeabi_dsub+0x1ba>
 800f096:	2401      	movs	r4, #1
 800f098:	4061      	eors	r1, r4
 800f09a:	468b      	mov	fp, r1
 800f09c:	428d      	cmp	r5, r1
 800f09e:	d100      	bne.n	800f0a2 <__aeabi_dsub+0x52>
 800f0a0:	e08d      	b.n	800f1be <__aeabi_dsub+0x16e>
 800f0a2:	1ab4      	subs	r4, r6, r2
 800f0a4:	46a4      	mov	ip, r4
 800f0a6:	2c00      	cmp	r4, #0
 800f0a8:	dc00      	bgt.n	800f0ac <__aeabi_dsub+0x5c>
 800f0aa:	e0b7      	b.n	800f21c <__aeabi_dsub+0x1cc>
 800f0ac:	2a00      	cmp	r2, #0
 800f0ae:	d100      	bne.n	800f0b2 <__aeabi_dsub+0x62>
 800f0b0:	e0cb      	b.n	800f24a <__aeabi_dsub+0x1fa>
 800f0b2:	4ac1      	ldr	r2, [pc, #772]	; (800f3b8 <__aeabi_dsub+0x368>)
 800f0b4:	4296      	cmp	r6, r2
 800f0b6:	d100      	bne.n	800f0ba <__aeabi_dsub+0x6a>
 800f0b8:	e186      	b.n	800f3c8 <__aeabi_dsub+0x378>
 800f0ba:	2280      	movs	r2, #128	; 0x80
 800f0bc:	0412      	lsls	r2, r2, #16
 800f0be:	4317      	orrs	r7, r2
 800f0c0:	4662      	mov	r2, ip
 800f0c2:	2a38      	cmp	r2, #56	; 0x38
 800f0c4:	dd00      	ble.n	800f0c8 <__aeabi_dsub+0x78>
 800f0c6:	e1a4      	b.n	800f412 <__aeabi_dsub+0x3c2>
 800f0c8:	2a1f      	cmp	r2, #31
 800f0ca:	dd00      	ble.n	800f0ce <__aeabi_dsub+0x7e>
 800f0cc:	e21d      	b.n	800f50a <__aeabi_dsub+0x4ba>
 800f0ce:	4661      	mov	r1, ip
 800f0d0:	2220      	movs	r2, #32
 800f0d2:	003c      	movs	r4, r7
 800f0d4:	1a52      	subs	r2, r2, r1
 800f0d6:	0001      	movs	r1, r0
 800f0d8:	4090      	lsls	r0, r2
 800f0da:	4094      	lsls	r4, r2
 800f0dc:	1e42      	subs	r2, r0, #1
 800f0de:	4190      	sbcs	r0, r2
 800f0e0:	4662      	mov	r2, ip
 800f0e2:	46a0      	mov	r8, r4
 800f0e4:	4664      	mov	r4, ip
 800f0e6:	40d7      	lsrs	r7, r2
 800f0e8:	464a      	mov	r2, r9
 800f0ea:	40e1      	lsrs	r1, r4
 800f0ec:	4644      	mov	r4, r8
 800f0ee:	1bd2      	subs	r2, r2, r7
 800f0f0:	4691      	mov	r9, r2
 800f0f2:	430c      	orrs	r4, r1
 800f0f4:	4304      	orrs	r4, r0
 800f0f6:	1b1c      	subs	r4, r3, r4
 800f0f8:	42a3      	cmp	r3, r4
 800f0fa:	4192      	sbcs	r2, r2
 800f0fc:	464b      	mov	r3, r9
 800f0fe:	4252      	negs	r2, r2
 800f100:	1a9b      	subs	r3, r3, r2
 800f102:	469a      	mov	sl, r3
 800f104:	4653      	mov	r3, sl
 800f106:	021b      	lsls	r3, r3, #8
 800f108:	d400      	bmi.n	800f10c <__aeabi_dsub+0xbc>
 800f10a:	e12b      	b.n	800f364 <__aeabi_dsub+0x314>
 800f10c:	4653      	mov	r3, sl
 800f10e:	025a      	lsls	r2, r3, #9
 800f110:	0a53      	lsrs	r3, r2, #9
 800f112:	469a      	mov	sl, r3
 800f114:	4653      	mov	r3, sl
 800f116:	2b00      	cmp	r3, #0
 800f118:	d100      	bne.n	800f11c <__aeabi_dsub+0xcc>
 800f11a:	e166      	b.n	800f3ea <__aeabi_dsub+0x39a>
 800f11c:	4650      	mov	r0, sl
 800f11e:	f000 fc91 	bl	800fa44 <__clzsi2>
 800f122:	0003      	movs	r3, r0
 800f124:	3b08      	subs	r3, #8
 800f126:	2220      	movs	r2, #32
 800f128:	0020      	movs	r0, r4
 800f12a:	1ad2      	subs	r2, r2, r3
 800f12c:	4651      	mov	r1, sl
 800f12e:	40d0      	lsrs	r0, r2
 800f130:	4099      	lsls	r1, r3
 800f132:	0002      	movs	r2, r0
 800f134:	409c      	lsls	r4, r3
 800f136:	430a      	orrs	r2, r1
 800f138:	429e      	cmp	r6, r3
 800f13a:	dd00      	ble.n	800f13e <__aeabi_dsub+0xee>
 800f13c:	e164      	b.n	800f408 <__aeabi_dsub+0x3b8>
 800f13e:	1b9b      	subs	r3, r3, r6
 800f140:	1c59      	adds	r1, r3, #1
 800f142:	291f      	cmp	r1, #31
 800f144:	dd00      	ble.n	800f148 <__aeabi_dsub+0xf8>
 800f146:	e0fe      	b.n	800f346 <__aeabi_dsub+0x2f6>
 800f148:	2320      	movs	r3, #32
 800f14a:	0010      	movs	r0, r2
 800f14c:	0026      	movs	r6, r4
 800f14e:	1a5b      	subs	r3, r3, r1
 800f150:	409c      	lsls	r4, r3
 800f152:	4098      	lsls	r0, r3
 800f154:	40ce      	lsrs	r6, r1
 800f156:	40ca      	lsrs	r2, r1
 800f158:	1e63      	subs	r3, r4, #1
 800f15a:	419c      	sbcs	r4, r3
 800f15c:	4330      	orrs	r0, r6
 800f15e:	4692      	mov	sl, r2
 800f160:	2600      	movs	r6, #0
 800f162:	4304      	orrs	r4, r0
 800f164:	0763      	lsls	r3, r4, #29
 800f166:	d009      	beq.n	800f17c <__aeabi_dsub+0x12c>
 800f168:	230f      	movs	r3, #15
 800f16a:	4023      	ands	r3, r4
 800f16c:	2b04      	cmp	r3, #4
 800f16e:	d005      	beq.n	800f17c <__aeabi_dsub+0x12c>
 800f170:	1d23      	adds	r3, r4, #4
 800f172:	42a3      	cmp	r3, r4
 800f174:	41a4      	sbcs	r4, r4
 800f176:	4264      	negs	r4, r4
 800f178:	44a2      	add	sl, r4
 800f17a:	001c      	movs	r4, r3
 800f17c:	4653      	mov	r3, sl
 800f17e:	021b      	lsls	r3, r3, #8
 800f180:	d400      	bmi.n	800f184 <__aeabi_dsub+0x134>
 800f182:	e0f2      	b.n	800f36a <__aeabi_dsub+0x31a>
 800f184:	4b8c      	ldr	r3, [pc, #560]	; (800f3b8 <__aeabi_dsub+0x368>)
 800f186:	3601      	adds	r6, #1
 800f188:	429e      	cmp	r6, r3
 800f18a:	d100      	bne.n	800f18e <__aeabi_dsub+0x13e>
 800f18c:	e10f      	b.n	800f3ae <__aeabi_dsub+0x35e>
 800f18e:	4653      	mov	r3, sl
 800f190:	498a      	ldr	r1, [pc, #552]	; (800f3bc <__aeabi_dsub+0x36c>)
 800f192:	08e4      	lsrs	r4, r4, #3
 800f194:	400b      	ands	r3, r1
 800f196:	0019      	movs	r1, r3
 800f198:	075b      	lsls	r3, r3, #29
 800f19a:	4323      	orrs	r3, r4
 800f19c:	0572      	lsls	r2, r6, #21
 800f19e:	024c      	lsls	r4, r1, #9
 800f1a0:	0b24      	lsrs	r4, r4, #12
 800f1a2:	0d52      	lsrs	r2, r2, #21
 800f1a4:	0512      	lsls	r2, r2, #20
 800f1a6:	4322      	orrs	r2, r4
 800f1a8:	07ed      	lsls	r5, r5, #31
 800f1aa:	432a      	orrs	r2, r5
 800f1ac:	0018      	movs	r0, r3
 800f1ae:	0011      	movs	r1, r2
 800f1b0:	b003      	add	sp, #12
 800f1b2:	bcf0      	pop	{r4, r5, r6, r7}
 800f1b4:	46bb      	mov	fp, r7
 800f1b6:	46b2      	mov	sl, r6
 800f1b8:	46a9      	mov	r9, r5
 800f1ba:	46a0      	mov	r8, r4
 800f1bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1be:	1ab4      	subs	r4, r6, r2
 800f1c0:	46a4      	mov	ip, r4
 800f1c2:	2c00      	cmp	r4, #0
 800f1c4:	dd59      	ble.n	800f27a <__aeabi_dsub+0x22a>
 800f1c6:	2a00      	cmp	r2, #0
 800f1c8:	d100      	bne.n	800f1cc <__aeabi_dsub+0x17c>
 800f1ca:	e0b0      	b.n	800f32e <__aeabi_dsub+0x2de>
 800f1cc:	4556      	cmp	r6, sl
 800f1ce:	d100      	bne.n	800f1d2 <__aeabi_dsub+0x182>
 800f1d0:	e0fa      	b.n	800f3c8 <__aeabi_dsub+0x378>
 800f1d2:	2280      	movs	r2, #128	; 0x80
 800f1d4:	0412      	lsls	r2, r2, #16
 800f1d6:	4317      	orrs	r7, r2
 800f1d8:	4662      	mov	r2, ip
 800f1da:	2a38      	cmp	r2, #56	; 0x38
 800f1dc:	dd00      	ble.n	800f1e0 <__aeabi_dsub+0x190>
 800f1de:	e0d4      	b.n	800f38a <__aeabi_dsub+0x33a>
 800f1e0:	2a1f      	cmp	r2, #31
 800f1e2:	dc00      	bgt.n	800f1e6 <__aeabi_dsub+0x196>
 800f1e4:	e1c0      	b.n	800f568 <__aeabi_dsub+0x518>
 800f1e6:	0039      	movs	r1, r7
 800f1e8:	3a20      	subs	r2, #32
 800f1ea:	40d1      	lsrs	r1, r2
 800f1ec:	4662      	mov	r2, ip
 800f1ee:	2a20      	cmp	r2, #32
 800f1f0:	d006      	beq.n	800f200 <__aeabi_dsub+0x1b0>
 800f1f2:	4664      	mov	r4, ip
 800f1f4:	2240      	movs	r2, #64	; 0x40
 800f1f6:	1b12      	subs	r2, r2, r4
 800f1f8:	003c      	movs	r4, r7
 800f1fa:	4094      	lsls	r4, r2
 800f1fc:	4304      	orrs	r4, r0
 800f1fe:	9401      	str	r4, [sp, #4]
 800f200:	9c01      	ldr	r4, [sp, #4]
 800f202:	1e62      	subs	r2, r4, #1
 800f204:	4194      	sbcs	r4, r2
 800f206:	430c      	orrs	r4, r1
 800f208:	e0c3      	b.n	800f392 <__aeabi_dsub+0x342>
 800f20a:	003c      	movs	r4, r7
 800f20c:	4304      	orrs	r4, r0
 800f20e:	d02b      	beq.n	800f268 <__aeabi_dsub+0x218>
 800f210:	468b      	mov	fp, r1
 800f212:	428d      	cmp	r5, r1
 800f214:	d02e      	beq.n	800f274 <__aeabi_dsub+0x224>
 800f216:	4c6a      	ldr	r4, [pc, #424]	; (800f3c0 <__aeabi_dsub+0x370>)
 800f218:	46a4      	mov	ip, r4
 800f21a:	44b4      	add	ip, r6
 800f21c:	4664      	mov	r4, ip
 800f21e:	2c00      	cmp	r4, #0
 800f220:	d05f      	beq.n	800f2e2 <__aeabi_dsub+0x292>
 800f222:	1b94      	subs	r4, r2, r6
 800f224:	46a4      	mov	ip, r4
 800f226:	2e00      	cmp	r6, #0
 800f228:	d000      	beq.n	800f22c <__aeabi_dsub+0x1dc>
 800f22a:	e120      	b.n	800f46e <__aeabi_dsub+0x41e>
 800f22c:	464c      	mov	r4, r9
 800f22e:	431c      	orrs	r4, r3
 800f230:	d100      	bne.n	800f234 <__aeabi_dsub+0x1e4>
 800f232:	e1c7      	b.n	800f5c4 <__aeabi_dsub+0x574>
 800f234:	4661      	mov	r1, ip
 800f236:	1e4c      	subs	r4, r1, #1
 800f238:	2901      	cmp	r1, #1
 800f23a:	d100      	bne.n	800f23e <__aeabi_dsub+0x1ee>
 800f23c:	e223      	b.n	800f686 <__aeabi_dsub+0x636>
 800f23e:	4d5e      	ldr	r5, [pc, #376]	; (800f3b8 <__aeabi_dsub+0x368>)
 800f240:	45ac      	cmp	ip, r5
 800f242:	d100      	bne.n	800f246 <__aeabi_dsub+0x1f6>
 800f244:	e1d8      	b.n	800f5f8 <__aeabi_dsub+0x5a8>
 800f246:	46a4      	mov	ip, r4
 800f248:	e11a      	b.n	800f480 <__aeabi_dsub+0x430>
 800f24a:	003a      	movs	r2, r7
 800f24c:	4302      	orrs	r2, r0
 800f24e:	d100      	bne.n	800f252 <__aeabi_dsub+0x202>
 800f250:	e0e4      	b.n	800f41c <__aeabi_dsub+0x3cc>
 800f252:	0022      	movs	r2, r4
 800f254:	3a01      	subs	r2, #1
 800f256:	2c01      	cmp	r4, #1
 800f258:	d100      	bne.n	800f25c <__aeabi_dsub+0x20c>
 800f25a:	e1c3      	b.n	800f5e4 <__aeabi_dsub+0x594>
 800f25c:	4956      	ldr	r1, [pc, #344]	; (800f3b8 <__aeabi_dsub+0x368>)
 800f25e:	428c      	cmp	r4, r1
 800f260:	d100      	bne.n	800f264 <__aeabi_dsub+0x214>
 800f262:	e0b1      	b.n	800f3c8 <__aeabi_dsub+0x378>
 800f264:	4694      	mov	ip, r2
 800f266:	e72b      	b.n	800f0c0 <__aeabi_dsub+0x70>
 800f268:	2401      	movs	r4, #1
 800f26a:	4061      	eors	r1, r4
 800f26c:	468b      	mov	fp, r1
 800f26e:	428d      	cmp	r5, r1
 800f270:	d000      	beq.n	800f274 <__aeabi_dsub+0x224>
 800f272:	e716      	b.n	800f0a2 <__aeabi_dsub+0x52>
 800f274:	4952      	ldr	r1, [pc, #328]	; (800f3c0 <__aeabi_dsub+0x370>)
 800f276:	468c      	mov	ip, r1
 800f278:	44b4      	add	ip, r6
 800f27a:	4664      	mov	r4, ip
 800f27c:	2c00      	cmp	r4, #0
 800f27e:	d100      	bne.n	800f282 <__aeabi_dsub+0x232>
 800f280:	e0d3      	b.n	800f42a <__aeabi_dsub+0x3da>
 800f282:	1b91      	subs	r1, r2, r6
 800f284:	468c      	mov	ip, r1
 800f286:	2e00      	cmp	r6, #0
 800f288:	d100      	bne.n	800f28c <__aeabi_dsub+0x23c>
 800f28a:	e15e      	b.n	800f54a <__aeabi_dsub+0x4fa>
 800f28c:	494a      	ldr	r1, [pc, #296]	; (800f3b8 <__aeabi_dsub+0x368>)
 800f28e:	428a      	cmp	r2, r1
 800f290:	d100      	bne.n	800f294 <__aeabi_dsub+0x244>
 800f292:	e1be      	b.n	800f612 <__aeabi_dsub+0x5c2>
 800f294:	2180      	movs	r1, #128	; 0x80
 800f296:	464c      	mov	r4, r9
 800f298:	0409      	lsls	r1, r1, #16
 800f29a:	430c      	orrs	r4, r1
 800f29c:	46a1      	mov	r9, r4
 800f29e:	4661      	mov	r1, ip
 800f2a0:	2938      	cmp	r1, #56	; 0x38
 800f2a2:	dd00      	ble.n	800f2a6 <__aeabi_dsub+0x256>
 800f2a4:	e1ba      	b.n	800f61c <__aeabi_dsub+0x5cc>
 800f2a6:	291f      	cmp	r1, #31
 800f2a8:	dd00      	ble.n	800f2ac <__aeabi_dsub+0x25c>
 800f2aa:	e227      	b.n	800f6fc <__aeabi_dsub+0x6ac>
 800f2ac:	2420      	movs	r4, #32
 800f2ae:	1a64      	subs	r4, r4, r1
 800f2b0:	4649      	mov	r1, r9
 800f2b2:	40a1      	lsls	r1, r4
 800f2b4:	001e      	movs	r6, r3
 800f2b6:	4688      	mov	r8, r1
 800f2b8:	4661      	mov	r1, ip
 800f2ba:	40a3      	lsls	r3, r4
 800f2bc:	40ce      	lsrs	r6, r1
 800f2be:	4641      	mov	r1, r8
 800f2c0:	1e5c      	subs	r4, r3, #1
 800f2c2:	41a3      	sbcs	r3, r4
 800f2c4:	4331      	orrs	r1, r6
 800f2c6:	4319      	orrs	r1, r3
 800f2c8:	000c      	movs	r4, r1
 800f2ca:	4663      	mov	r3, ip
 800f2cc:	4649      	mov	r1, r9
 800f2ce:	40d9      	lsrs	r1, r3
 800f2d0:	187f      	adds	r7, r7, r1
 800f2d2:	1824      	adds	r4, r4, r0
 800f2d4:	4284      	cmp	r4, r0
 800f2d6:	419b      	sbcs	r3, r3
 800f2d8:	425b      	negs	r3, r3
 800f2da:	469a      	mov	sl, r3
 800f2dc:	0016      	movs	r6, r2
 800f2de:	44ba      	add	sl, r7
 800f2e0:	e05d      	b.n	800f39e <__aeabi_dsub+0x34e>
 800f2e2:	4c38      	ldr	r4, [pc, #224]	; (800f3c4 <__aeabi_dsub+0x374>)
 800f2e4:	1c72      	adds	r2, r6, #1
 800f2e6:	4222      	tst	r2, r4
 800f2e8:	d000      	beq.n	800f2ec <__aeabi_dsub+0x29c>
 800f2ea:	e0df      	b.n	800f4ac <__aeabi_dsub+0x45c>
 800f2ec:	464a      	mov	r2, r9
 800f2ee:	431a      	orrs	r2, r3
 800f2f0:	2e00      	cmp	r6, #0
 800f2f2:	d000      	beq.n	800f2f6 <__aeabi_dsub+0x2a6>
 800f2f4:	e15c      	b.n	800f5b0 <__aeabi_dsub+0x560>
 800f2f6:	2a00      	cmp	r2, #0
 800f2f8:	d100      	bne.n	800f2fc <__aeabi_dsub+0x2ac>
 800f2fa:	e1cf      	b.n	800f69c <__aeabi_dsub+0x64c>
 800f2fc:	003a      	movs	r2, r7
 800f2fe:	4302      	orrs	r2, r0
 800f300:	d100      	bne.n	800f304 <__aeabi_dsub+0x2b4>
 800f302:	e17f      	b.n	800f604 <__aeabi_dsub+0x5b4>
 800f304:	1a1c      	subs	r4, r3, r0
 800f306:	464a      	mov	r2, r9
 800f308:	42a3      	cmp	r3, r4
 800f30a:	4189      	sbcs	r1, r1
 800f30c:	1bd2      	subs	r2, r2, r7
 800f30e:	4249      	negs	r1, r1
 800f310:	1a52      	subs	r2, r2, r1
 800f312:	4692      	mov	sl, r2
 800f314:	0212      	lsls	r2, r2, #8
 800f316:	d400      	bmi.n	800f31a <__aeabi_dsub+0x2ca>
 800f318:	e20a      	b.n	800f730 <__aeabi_dsub+0x6e0>
 800f31a:	1ac4      	subs	r4, r0, r3
 800f31c:	42a0      	cmp	r0, r4
 800f31e:	4180      	sbcs	r0, r0
 800f320:	464b      	mov	r3, r9
 800f322:	4240      	negs	r0, r0
 800f324:	1aff      	subs	r7, r7, r3
 800f326:	1a3b      	subs	r3, r7, r0
 800f328:	469a      	mov	sl, r3
 800f32a:	465d      	mov	r5, fp
 800f32c:	e71a      	b.n	800f164 <__aeabi_dsub+0x114>
 800f32e:	003a      	movs	r2, r7
 800f330:	4302      	orrs	r2, r0
 800f332:	d073      	beq.n	800f41c <__aeabi_dsub+0x3cc>
 800f334:	0022      	movs	r2, r4
 800f336:	3a01      	subs	r2, #1
 800f338:	2c01      	cmp	r4, #1
 800f33a:	d100      	bne.n	800f33e <__aeabi_dsub+0x2ee>
 800f33c:	e0cb      	b.n	800f4d6 <__aeabi_dsub+0x486>
 800f33e:	4554      	cmp	r4, sl
 800f340:	d042      	beq.n	800f3c8 <__aeabi_dsub+0x378>
 800f342:	4694      	mov	ip, r2
 800f344:	e748      	b.n	800f1d8 <__aeabi_dsub+0x188>
 800f346:	0010      	movs	r0, r2
 800f348:	3b1f      	subs	r3, #31
 800f34a:	40d8      	lsrs	r0, r3
 800f34c:	2920      	cmp	r1, #32
 800f34e:	d003      	beq.n	800f358 <__aeabi_dsub+0x308>
 800f350:	2340      	movs	r3, #64	; 0x40
 800f352:	1a5b      	subs	r3, r3, r1
 800f354:	409a      	lsls	r2, r3
 800f356:	4314      	orrs	r4, r2
 800f358:	1e63      	subs	r3, r4, #1
 800f35a:	419c      	sbcs	r4, r3
 800f35c:	2300      	movs	r3, #0
 800f35e:	2600      	movs	r6, #0
 800f360:	469a      	mov	sl, r3
 800f362:	4304      	orrs	r4, r0
 800f364:	0763      	lsls	r3, r4, #29
 800f366:	d000      	beq.n	800f36a <__aeabi_dsub+0x31a>
 800f368:	e6fe      	b.n	800f168 <__aeabi_dsub+0x118>
 800f36a:	4652      	mov	r2, sl
 800f36c:	08e3      	lsrs	r3, r4, #3
 800f36e:	0752      	lsls	r2, r2, #29
 800f370:	4313      	orrs	r3, r2
 800f372:	4652      	mov	r2, sl
 800f374:	46b4      	mov	ip, r6
 800f376:	08d2      	lsrs	r2, r2, #3
 800f378:	490f      	ldr	r1, [pc, #60]	; (800f3b8 <__aeabi_dsub+0x368>)
 800f37a:	458c      	cmp	ip, r1
 800f37c:	d02a      	beq.n	800f3d4 <__aeabi_dsub+0x384>
 800f37e:	0312      	lsls	r2, r2, #12
 800f380:	0b14      	lsrs	r4, r2, #12
 800f382:	4662      	mov	r2, ip
 800f384:	0552      	lsls	r2, r2, #21
 800f386:	0d52      	lsrs	r2, r2, #21
 800f388:	e70c      	b.n	800f1a4 <__aeabi_dsub+0x154>
 800f38a:	003c      	movs	r4, r7
 800f38c:	4304      	orrs	r4, r0
 800f38e:	1e62      	subs	r2, r4, #1
 800f390:	4194      	sbcs	r4, r2
 800f392:	18e4      	adds	r4, r4, r3
 800f394:	429c      	cmp	r4, r3
 800f396:	4192      	sbcs	r2, r2
 800f398:	4252      	negs	r2, r2
 800f39a:	444a      	add	r2, r9
 800f39c:	4692      	mov	sl, r2
 800f39e:	4653      	mov	r3, sl
 800f3a0:	021b      	lsls	r3, r3, #8
 800f3a2:	d5df      	bpl.n	800f364 <__aeabi_dsub+0x314>
 800f3a4:	4b04      	ldr	r3, [pc, #16]	; (800f3b8 <__aeabi_dsub+0x368>)
 800f3a6:	3601      	adds	r6, #1
 800f3a8:	429e      	cmp	r6, r3
 800f3aa:	d000      	beq.n	800f3ae <__aeabi_dsub+0x35e>
 800f3ac:	e0a0      	b.n	800f4f0 <__aeabi_dsub+0x4a0>
 800f3ae:	0032      	movs	r2, r6
 800f3b0:	2400      	movs	r4, #0
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e6f6      	b.n	800f1a4 <__aeabi_dsub+0x154>
 800f3b6:	46c0      	nop			; (mov r8, r8)
 800f3b8:	000007ff 	.word	0x000007ff
 800f3bc:	ff7fffff 	.word	0xff7fffff
 800f3c0:	fffff801 	.word	0xfffff801
 800f3c4:	000007fe 	.word	0x000007fe
 800f3c8:	08db      	lsrs	r3, r3, #3
 800f3ca:	464a      	mov	r2, r9
 800f3cc:	0752      	lsls	r2, r2, #29
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	464a      	mov	r2, r9
 800f3d2:	08d2      	lsrs	r2, r2, #3
 800f3d4:	0019      	movs	r1, r3
 800f3d6:	4311      	orrs	r1, r2
 800f3d8:	d100      	bne.n	800f3dc <__aeabi_dsub+0x38c>
 800f3da:	e1b5      	b.n	800f748 <__aeabi_dsub+0x6f8>
 800f3dc:	2480      	movs	r4, #128	; 0x80
 800f3de:	0324      	lsls	r4, r4, #12
 800f3e0:	4314      	orrs	r4, r2
 800f3e2:	0324      	lsls	r4, r4, #12
 800f3e4:	4ad5      	ldr	r2, [pc, #852]	; (800f73c <__aeabi_dsub+0x6ec>)
 800f3e6:	0b24      	lsrs	r4, r4, #12
 800f3e8:	e6dc      	b.n	800f1a4 <__aeabi_dsub+0x154>
 800f3ea:	0020      	movs	r0, r4
 800f3ec:	f000 fb2a 	bl	800fa44 <__clzsi2>
 800f3f0:	0003      	movs	r3, r0
 800f3f2:	3318      	adds	r3, #24
 800f3f4:	2b1f      	cmp	r3, #31
 800f3f6:	dc00      	bgt.n	800f3fa <__aeabi_dsub+0x3aa>
 800f3f8:	e695      	b.n	800f126 <__aeabi_dsub+0xd6>
 800f3fa:	0022      	movs	r2, r4
 800f3fc:	3808      	subs	r0, #8
 800f3fe:	4082      	lsls	r2, r0
 800f400:	2400      	movs	r4, #0
 800f402:	429e      	cmp	r6, r3
 800f404:	dc00      	bgt.n	800f408 <__aeabi_dsub+0x3b8>
 800f406:	e69a      	b.n	800f13e <__aeabi_dsub+0xee>
 800f408:	1af6      	subs	r6, r6, r3
 800f40a:	4bcd      	ldr	r3, [pc, #820]	; (800f740 <__aeabi_dsub+0x6f0>)
 800f40c:	401a      	ands	r2, r3
 800f40e:	4692      	mov	sl, r2
 800f410:	e6a8      	b.n	800f164 <__aeabi_dsub+0x114>
 800f412:	003c      	movs	r4, r7
 800f414:	4304      	orrs	r4, r0
 800f416:	1e62      	subs	r2, r4, #1
 800f418:	4194      	sbcs	r4, r2
 800f41a:	e66c      	b.n	800f0f6 <__aeabi_dsub+0xa6>
 800f41c:	464a      	mov	r2, r9
 800f41e:	08db      	lsrs	r3, r3, #3
 800f420:	0752      	lsls	r2, r2, #29
 800f422:	4313      	orrs	r3, r2
 800f424:	464a      	mov	r2, r9
 800f426:	08d2      	lsrs	r2, r2, #3
 800f428:	e7a6      	b.n	800f378 <__aeabi_dsub+0x328>
 800f42a:	4cc6      	ldr	r4, [pc, #792]	; (800f744 <__aeabi_dsub+0x6f4>)
 800f42c:	1c72      	adds	r2, r6, #1
 800f42e:	4222      	tst	r2, r4
 800f430:	d000      	beq.n	800f434 <__aeabi_dsub+0x3e4>
 800f432:	e0ac      	b.n	800f58e <__aeabi_dsub+0x53e>
 800f434:	464a      	mov	r2, r9
 800f436:	431a      	orrs	r2, r3
 800f438:	2e00      	cmp	r6, #0
 800f43a:	d000      	beq.n	800f43e <__aeabi_dsub+0x3ee>
 800f43c:	e105      	b.n	800f64a <__aeabi_dsub+0x5fa>
 800f43e:	2a00      	cmp	r2, #0
 800f440:	d100      	bne.n	800f444 <__aeabi_dsub+0x3f4>
 800f442:	e156      	b.n	800f6f2 <__aeabi_dsub+0x6a2>
 800f444:	003a      	movs	r2, r7
 800f446:	4302      	orrs	r2, r0
 800f448:	d100      	bne.n	800f44c <__aeabi_dsub+0x3fc>
 800f44a:	e0db      	b.n	800f604 <__aeabi_dsub+0x5b4>
 800f44c:	181c      	adds	r4, r3, r0
 800f44e:	429c      	cmp	r4, r3
 800f450:	419b      	sbcs	r3, r3
 800f452:	444f      	add	r7, r9
 800f454:	46ba      	mov	sl, r7
 800f456:	425b      	negs	r3, r3
 800f458:	449a      	add	sl, r3
 800f45a:	4653      	mov	r3, sl
 800f45c:	021b      	lsls	r3, r3, #8
 800f45e:	d400      	bmi.n	800f462 <__aeabi_dsub+0x412>
 800f460:	e780      	b.n	800f364 <__aeabi_dsub+0x314>
 800f462:	4652      	mov	r2, sl
 800f464:	4bb6      	ldr	r3, [pc, #728]	; (800f740 <__aeabi_dsub+0x6f0>)
 800f466:	2601      	movs	r6, #1
 800f468:	401a      	ands	r2, r3
 800f46a:	4692      	mov	sl, r2
 800f46c:	e77a      	b.n	800f364 <__aeabi_dsub+0x314>
 800f46e:	4cb3      	ldr	r4, [pc, #716]	; (800f73c <__aeabi_dsub+0x6ec>)
 800f470:	42a2      	cmp	r2, r4
 800f472:	d100      	bne.n	800f476 <__aeabi_dsub+0x426>
 800f474:	e0c0      	b.n	800f5f8 <__aeabi_dsub+0x5a8>
 800f476:	2480      	movs	r4, #128	; 0x80
 800f478:	464d      	mov	r5, r9
 800f47a:	0424      	lsls	r4, r4, #16
 800f47c:	4325      	orrs	r5, r4
 800f47e:	46a9      	mov	r9, r5
 800f480:	4664      	mov	r4, ip
 800f482:	2c38      	cmp	r4, #56	; 0x38
 800f484:	dc53      	bgt.n	800f52e <__aeabi_dsub+0x4de>
 800f486:	4661      	mov	r1, ip
 800f488:	2c1f      	cmp	r4, #31
 800f48a:	dd00      	ble.n	800f48e <__aeabi_dsub+0x43e>
 800f48c:	e0cd      	b.n	800f62a <__aeabi_dsub+0x5da>
 800f48e:	2520      	movs	r5, #32
 800f490:	001e      	movs	r6, r3
 800f492:	1b2d      	subs	r5, r5, r4
 800f494:	464c      	mov	r4, r9
 800f496:	40ab      	lsls	r3, r5
 800f498:	40ac      	lsls	r4, r5
 800f49a:	40ce      	lsrs	r6, r1
 800f49c:	1e5d      	subs	r5, r3, #1
 800f49e:	41ab      	sbcs	r3, r5
 800f4a0:	4334      	orrs	r4, r6
 800f4a2:	4323      	orrs	r3, r4
 800f4a4:	464c      	mov	r4, r9
 800f4a6:	40cc      	lsrs	r4, r1
 800f4a8:	1b3f      	subs	r7, r7, r4
 800f4aa:	e045      	b.n	800f538 <__aeabi_dsub+0x4e8>
 800f4ac:	464a      	mov	r2, r9
 800f4ae:	1a1c      	subs	r4, r3, r0
 800f4b0:	1bd1      	subs	r1, r2, r7
 800f4b2:	42a3      	cmp	r3, r4
 800f4b4:	4192      	sbcs	r2, r2
 800f4b6:	4252      	negs	r2, r2
 800f4b8:	4692      	mov	sl, r2
 800f4ba:	000a      	movs	r2, r1
 800f4bc:	4651      	mov	r1, sl
 800f4be:	1a52      	subs	r2, r2, r1
 800f4c0:	4692      	mov	sl, r2
 800f4c2:	0212      	lsls	r2, r2, #8
 800f4c4:	d500      	bpl.n	800f4c8 <__aeabi_dsub+0x478>
 800f4c6:	e083      	b.n	800f5d0 <__aeabi_dsub+0x580>
 800f4c8:	4653      	mov	r3, sl
 800f4ca:	4323      	orrs	r3, r4
 800f4cc:	d000      	beq.n	800f4d0 <__aeabi_dsub+0x480>
 800f4ce:	e621      	b.n	800f114 <__aeabi_dsub+0xc4>
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	2500      	movs	r5, #0
 800f4d4:	e753      	b.n	800f37e <__aeabi_dsub+0x32e>
 800f4d6:	181c      	adds	r4, r3, r0
 800f4d8:	429c      	cmp	r4, r3
 800f4da:	419b      	sbcs	r3, r3
 800f4dc:	444f      	add	r7, r9
 800f4de:	46ba      	mov	sl, r7
 800f4e0:	425b      	negs	r3, r3
 800f4e2:	449a      	add	sl, r3
 800f4e4:	4653      	mov	r3, sl
 800f4e6:	2601      	movs	r6, #1
 800f4e8:	021b      	lsls	r3, r3, #8
 800f4ea:	d400      	bmi.n	800f4ee <__aeabi_dsub+0x49e>
 800f4ec:	e73a      	b.n	800f364 <__aeabi_dsub+0x314>
 800f4ee:	2602      	movs	r6, #2
 800f4f0:	4652      	mov	r2, sl
 800f4f2:	4b93      	ldr	r3, [pc, #588]	; (800f740 <__aeabi_dsub+0x6f0>)
 800f4f4:	2101      	movs	r1, #1
 800f4f6:	401a      	ands	r2, r3
 800f4f8:	0013      	movs	r3, r2
 800f4fa:	4021      	ands	r1, r4
 800f4fc:	0862      	lsrs	r2, r4, #1
 800f4fe:	430a      	orrs	r2, r1
 800f500:	07dc      	lsls	r4, r3, #31
 800f502:	085b      	lsrs	r3, r3, #1
 800f504:	469a      	mov	sl, r3
 800f506:	4314      	orrs	r4, r2
 800f508:	e62c      	b.n	800f164 <__aeabi_dsub+0x114>
 800f50a:	0039      	movs	r1, r7
 800f50c:	3a20      	subs	r2, #32
 800f50e:	40d1      	lsrs	r1, r2
 800f510:	4662      	mov	r2, ip
 800f512:	2a20      	cmp	r2, #32
 800f514:	d006      	beq.n	800f524 <__aeabi_dsub+0x4d4>
 800f516:	4664      	mov	r4, ip
 800f518:	2240      	movs	r2, #64	; 0x40
 800f51a:	1b12      	subs	r2, r2, r4
 800f51c:	003c      	movs	r4, r7
 800f51e:	4094      	lsls	r4, r2
 800f520:	4304      	orrs	r4, r0
 800f522:	9401      	str	r4, [sp, #4]
 800f524:	9c01      	ldr	r4, [sp, #4]
 800f526:	1e62      	subs	r2, r4, #1
 800f528:	4194      	sbcs	r4, r2
 800f52a:	430c      	orrs	r4, r1
 800f52c:	e5e3      	b.n	800f0f6 <__aeabi_dsub+0xa6>
 800f52e:	4649      	mov	r1, r9
 800f530:	4319      	orrs	r1, r3
 800f532:	000b      	movs	r3, r1
 800f534:	1e5c      	subs	r4, r3, #1
 800f536:	41a3      	sbcs	r3, r4
 800f538:	1ac4      	subs	r4, r0, r3
 800f53a:	42a0      	cmp	r0, r4
 800f53c:	419b      	sbcs	r3, r3
 800f53e:	425b      	negs	r3, r3
 800f540:	1afb      	subs	r3, r7, r3
 800f542:	469a      	mov	sl, r3
 800f544:	465d      	mov	r5, fp
 800f546:	0016      	movs	r6, r2
 800f548:	e5dc      	b.n	800f104 <__aeabi_dsub+0xb4>
 800f54a:	4649      	mov	r1, r9
 800f54c:	4319      	orrs	r1, r3
 800f54e:	d100      	bne.n	800f552 <__aeabi_dsub+0x502>
 800f550:	e0ae      	b.n	800f6b0 <__aeabi_dsub+0x660>
 800f552:	4661      	mov	r1, ip
 800f554:	4664      	mov	r4, ip
 800f556:	3901      	subs	r1, #1
 800f558:	2c01      	cmp	r4, #1
 800f55a:	d100      	bne.n	800f55e <__aeabi_dsub+0x50e>
 800f55c:	e0e0      	b.n	800f720 <__aeabi_dsub+0x6d0>
 800f55e:	4c77      	ldr	r4, [pc, #476]	; (800f73c <__aeabi_dsub+0x6ec>)
 800f560:	45a4      	cmp	ip, r4
 800f562:	d056      	beq.n	800f612 <__aeabi_dsub+0x5c2>
 800f564:	468c      	mov	ip, r1
 800f566:	e69a      	b.n	800f29e <__aeabi_dsub+0x24e>
 800f568:	4661      	mov	r1, ip
 800f56a:	2220      	movs	r2, #32
 800f56c:	003c      	movs	r4, r7
 800f56e:	1a52      	subs	r2, r2, r1
 800f570:	4094      	lsls	r4, r2
 800f572:	0001      	movs	r1, r0
 800f574:	4090      	lsls	r0, r2
 800f576:	46a0      	mov	r8, r4
 800f578:	4664      	mov	r4, ip
 800f57a:	1e42      	subs	r2, r0, #1
 800f57c:	4190      	sbcs	r0, r2
 800f57e:	4662      	mov	r2, ip
 800f580:	40e1      	lsrs	r1, r4
 800f582:	4644      	mov	r4, r8
 800f584:	40d7      	lsrs	r7, r2
 800f586:	430c      	orrs	r4, r1
 800f588:	4304      	orrs	r4, r0
 800f58a:	44b9      	add	r9, r7
 800f58c:	e701      	b.n	800f392 <__aeabi_dsub+0x342>
 800f58e:	496b      	ldr	r1, [pc, #428]	; (800f73c <__aeabi_dsub+0x6ec>)
 800f590:	428a      	cmp	r2, r1
 800f592:	d100      	bne.n	800f596 <__aeabi_dsub+0x546>
 800f594:	e70c      	b.n	800f3b0 <__aeabi_dsub+0x360>
 800f596:	1818      	adds	r0, r3, r0
 800f598:	4298      	cmp	r0, r3
 800f59a:	419b      	sbcs	r3, r3
 800f59c:	444f      	add	r7, r9
 800f59e:	425b      	negs	r3, r3
 800f5a0:	18fb      	adds	r3, r7, r3
 800f5a2:	07dc      	lsls	r4, r3, #31
 800f5a4:	0840      	lsrs	r0, r0, #1
 800f5a6:	085b      	lsrs	r3, r3, #1
 800f5a8:	469a      	mov	sl, r3
 800f5aa:	0016      	movs	r6, r2
 800f5ac:	4304      	orrs	r4, r0
 800f5ae:	e6d9      	b.n	800f364 <__aeabi_dsub+0x314>
 800f5b0:	2a00      	cmp	r2, #0
 800f5b2:	d000      	beq.n	800f5b6 <__aeabi_dsub+0x566>
 800f5b4:	e081      	b.n	800f6ba <__aeabi_dsub+0x66a>
 800f5b6:	003b      	movs	r3, r7
 800f5b8:	4303      	orrs	r3, r0
 800f5ba:	d11d      	bne.n	800f5f8 <__aeabi_dsub+0x5a8>
 800f5bc:	2280      	movs	r2, #128	; 0x80
 800f5be:	2500      	movs	r5, #0
 800f5c0:	0312      	lsls	r2, r2, #12
 800f5c2:	e70b      	b.n	800f3dc <__aeabi_dsub+0x38c>
 800f5c4:	08c0      	lsrs	r0, r0, #3
 800f5c6:	077b      	lsls	r3, r7, #29
 800f5c8:	465d      	mov	r5, fp
 800f5ca:	4303      	orrs	r3, r0
 800f5cc:	08fa      	lsrs	r2, r7, #3
 800f5ce:	e6d3      	b.n	800f378 <__aeabi_dsub+0x328>
 800f5d0:	1ac4      	subs	r4, r0, r3
 800f5d2:	42a0      	cmp	r0, r4
 800f5d4:	4180      	sbcs	r0, r0
 800f5d6:	464b      	mov	r3, r9
 800f5d8:	4240      	negs	r0, r0
 800f5da:	1aff      	subs	r7, r7, r3
 800f5dc:	1a3b      	subs	r3, r7, r0
 800f5de:	469a      	mov	sl, r3
 800f5e0:	465d      	mov	r5, fp
 800f5e2:	e597      	b.n	800f114 <__aeabi_dsub+0xc4>
 800f5e4:	1a1c      	subs	r4, r3, r0
 800f5e6:	464a      	mov	r2, r9
 800f5e8:	42a3      	cmp	r3, r4
 800f5ea:	419b      	sbcs	r3, r3
 800f5ec:	1bd7      	subs	r7, r2, r7
 800f5ee:	425b      	negs	r3, r3
 800f5f0:	1afb      	subs	r3, r7, r3
 800f5f2:	469a      	mov	sl, r3
 800f5f4:	2601      	movs	r6, #1
 800f5f6:	e585      	b.n	800f104 <__aeabi_dsub+0xb4>
 800f5f8:	08c0      	lsrs	r0, r0, #3
 800f5fa:	077b      	lsls	r3, r7, #29
 800f5fc:	465d      	mov	r5, fp
 800f5fe:	4303      	orrs	r3, r0
 800f600:	08fa      	lsrs	r2, r7, #3
 800f602:	e6e7      	b.n	800f3d4 <__aeabi_dsub+0x384>
 800f604:	464a      	mov	r2, r9
 800f606:	08db      	lsrs	r3, r3, #3
 800f608:	0752      	lsls	r2, r2, #29
 800f60a:	4313      	orrs	r3, r2
 800f60c:	464a      	mov	r2, r9
 800f60e:	08d2      	lsrs	r2, r2, #3
 800f610:	e6b5      	b.n	800f37e <__aeabi_dsub+0x32e>
 800f612:	08c0      	lsrs	r0, r0, #3
 800f614:	077b      	lsls	r3, r7, #29
 800f616:	4303      	orrs	r3, r0
 800f618:	08fa      	lsrs	r2, r7, #3
 800f61a:	e6db      	b.n	800f3d4 <__aeabi_dsub+0x384>
 800f61c:	4649      	mov	r1, r9
 800f61e:	4319      	orrs	r1, r3
 800f620:	000b      	movs	r3, r1
 800f622:	1e59      	subs	r1, r3, #1
 800f624:	418b      	sbcs	r3, r1
 800f626:	001c      	movs	r4, r3
 800f628:	e653      	b.n	800f2d2 <__aeabi_dsub+0x282>
 800f62a:	464d      	mov	r5, r9
 800f62c:	3c20      	subs	r4, #32
 800f62e:	40e5      	lsrs	r5, r4
 800f630:	2920      	cmp	r1, #32
 800f632:	d005      	beq.n	800f640 <__aeabi_dsub+0x5f0>
 800f634:	2440      	movs	r4, #64	; 0x40
 800f636:	1a64      	subs	r4, r4, r1
 800f638:	4649      	mov	r1, r9
 800f63a:	40a1      	lsls	r1, r4
 800f63c:	430b      	orrs	r3, r1
 800f63e:	4698      	mov	r8, r3
 800f640:	4643      	mov	r3, r8
 800f642:	1e5c      	subs	r4, r3, #1
 800f644:	41a3      	sbcs	r3, r4
 800f646:	432b      	orrs	r3, r5
 800f648:	e776      	b.n	800f538 <__aeabi_dsub+0x4e8>
 800f64a:	2a00      	cmp	r2, #0
 800f64c:	d0e1      	beq.n	800f612 <__aeabi_dsub+0x5c2>
 800f64e:	003a      	movs	r2, r7
 800f650:	08db      	lsrs	r3, r3, #3
 800f652:	4302      	orrs	r2, r0
 800f654:	d100      	bne.n	800f658 <__aeabi_dsub+0x608>
 800f656:	e6b8      	b.n	800f3ca <__aeabi_dsub+0x37a>
 800f658:	464a      	mov	r2, r9
 800f65a:	0752      	lsls	r2, r2, #29
 800f65c:	2480      	movs	r4, #128	; 0x80
 800f65e:	4313      	orrs	r3, r2
 800f660:	464a      	mov	r2, r9
 800f662:	0324      	lsls	r4, r4, #12
 800f664:	08d2      	lsrs	r2, r2, #3
 800f666:	4222      	tst	r2, r4
 800f668:	d007      	beq.n	800f67a <__aeabi_dsub+0x62a>
 800f66a:	08fe      	lsrs	r6, r7, #3
 800f66c:	4226      	tst	r6, r4
 800f66e:	d104      	bne.n	800f67a <__aeabi_dsub+0x62a>
 800f670:	465d      	mov	r5, fp
 800f672:	0032      	movs	r2, r6
 800f674:	08c3      	lsrs	r3, r0, #3
 800f676:	077f      	lsls	r7, r7, #29
 800f678:	433b      	orrs	r3, r7
 800f67a:	0f59      	lsrs	r1, r3, #29
 800f67c:	00db      	lsls	r3, r3, #3
 800f67e:	0749      	lsls	r1, r1, #29
 800f680:	08db      	lsrs	r3, r3, #3
 800f682:	430b      	orrs	r3, r1
 800f684:	e6a6      	b.n	800f3d4 <__aeabi_dsub+0x384>
 800f686:	1ac4      	subs	r4, r0, r3
 800f688:	42a0      	cmp	r0, r4
 800f68a:	4180      	sbcs	r0, r0
 800f68c:	464b      	mov	r3, r9
 800f68e:	4240      	negs	r0, r0
 800f690:	1aff      	subs	r7, r7, r3
 800f692:	1a3b      	subs	r3, r7, r0
 800f694:	469a      	mov	sl, r3
 800f696:	465d      	mov	r5, fp
 800f698:	2601      	movs	r6, #1
 800f69a:	e533      	b.n	800f104 <__aeabi_dsub+0xb4>
 800f69c:	003b      	movs	r3, r7
 800f69e:	4303      	orrs	r3, r0
 800f6a0:	d100      	bne.n	800f6a4 <__aeabi_dsub+0x654>
 800f6a2:	e715      	b.n	800f4d0 <__aeabi_dsub+0x480>
 800f6a4:	08c0      	lsrs	r0, r0, #3
 800f6a6:	077b      	lsls	r3, r7, #29
 800f6a8:	465d      	mov	r5, fp
 800f6aa:	4303      	orrs	r3, r0
 800f6ac:	08fa      	lsrs	r2, r7, #3
 800f6ae:	e666      	b.n	800f37e <__aeabi_dsub+0x32e>
 800f6b0:	08c0      	lsrs	r0, r0, #3
 800f6b2:	077b      	lsls	r3, r7, #29
 800f6b4:	4303      	orrs	r3, r0
 800f6b6:	08fa      	lsrs	r2, r7, #3
 800f6b8:	e65e      	b.n	800f378 <__aeabi_dsub+0x328>
 800f6ba:	003a      	movs	r2, r7
 800f6bc:	08db      	lsrs	r3, r3, #3
 800f6be:	4302      	orrs	r2, r0
 800f6c0:	d100      	bne.n	800f6c4 <__aeabi_dsub+0x674>
 800f6c2:	e682      	b.n	800f3ca <__aeabi_dsub+0x37a>
 800f6c4:	464a      	mov	r2, r9
 800f6c6:	0752      	lsls	r2, r2, #29
 800f6c8:	2480      	movs	r4, #128	; 0x80
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	464a      	mov	r2, r9
 800f6ce:	0324      	lsls	r4, r4, #12
 800f6d0:	08d2      	lsrs	r2, r2, #3
 800f6d2:	4222      	tst	r2, r4
 800f6d4:	d007      	beq.n	800f6e6 <__aeabi_dsub+0x696>
 800f6d6:	08fe      	lsrs	r6, r7, #3
 800f6d8:	4226      	tst	r6, r4
 800f6da:	d104      	bne.n	800f6e6 <__aeabi_dsub+0x696>
 800f6dc:	465d      	mov	r5, fp
 800f6de:	0032      	movs	r2, r6
 800f6e0:	08c3      	lsrs	r3, r0, #3
 800f6e2:	077f      	lsls	r7, r7, #29
 800f6e4:	433b      	orrs	r3, r7
 800f6e6:	0f59      	lsrs	r1, r3, #29
 800f6e8:	00db      	lsls	r3, r3, #3
 800f6ea:	08db      	lsrs	r3, r3, #3
 800f6ec:	0749      	lsls	r1, r1, #29
 800f6ee:	430b      	orrs	r3, r1
 800f6f0:	e670      	b.n	800f3d4 <__aeabi_dsub+0x384>
 800f6f2:	08c0      	lsrs	r0, r0, #3
 800f6f4:	077b      	lsls	r3, r7, #29
 800f6f6:	4303      	orrs	r3, r0
 800f6f8:	08fa      	lsrs	r2, r7, #3
 800f6fa:	e640      	b.n	800f37e <__aeabi_dsub+0x32e>
 800f6fc:	464c      	mov	r4, r9
 800f6fe:	3920      	subs	r1, #32
 800f700:	40cc      	lsrs	r4, r1
 800f702:	4661      	mov	r1, ip
 800f704:	2920      	cmp	r1, #32
 800f706:	d006      	beq.n	800f716 <__aeabi_dsub+0x6c6>
 800f708:	4666      	mov	r6, ip
 800f70a:	2140      	movs	r1, #64	; 0x40
 800f70c:	1b89      	subs	r1, r1, r6
 800f70e:	464e      	mov	r6, r9
 800f710:	408e      	lsls	r6, r1
 800f712:	4333      	orrs	r3, r6
 800f714:	4698      	mov	r8, r3
 800f716:	4643      	mov	r3, r8
 800f718:	1e59      	subs	r1, r3, #1
 800f71a:	418b      	sbcs	r3, r1
 800f71c:	431c      	orrs	r4, r3
 800f71e:	e5d8      	b.n	800f2d2 <__aeabi_dsub+0x282>
 800f720:	181c      	adds	r4, r3, r0
 800f722:	4284      	cmp	r4, r0
 800f724:	4180      	sbcs	r0, r0
 800f726:	444f      	add	r7, r9
 800f728:	46ba      	mov	sl, r7
 800f72a:	4240      	negs	r0, r0
 800f72c:	4482      	add	sl, r0
 800f72e:	e6d9      	b.n	800f4e4 <__aeabi_dsub+0x494>
 800f730:	4653      	mov	r3, sl
 800f732:	4323      	orrs	r3, r4
 800f734:	d100      	bne.n	800f738 <__aeabi_dsub+0x6e8>
 800f736:	e6cb      	b.n	800f4d0 <__aeabi_dsub+0x480>
 800f738:	e614      	b.n	800f364 <__aeabi_dsub+0x314>
 800f73a:	46c0      	nop			; (mov r8, r8)
 800f73c:	000007ff 	.word	0x000007ff
 800f740:	ff7fffff 	.word	0xff7fffff
 800f744:	000007fe 	.word	0x000007fe
 800f748:	2300      	movs	r3, #0
 800f74a:	4a01      	ldr	r2, [pc, #4]	; (800f750 <__aeabi_dsub+0x700>)
 800f74c:	001c      	movs	r4, r3
 800f74e:	e529      	b.n	800f1a4 <__aeabi_dsub+0x154>
 800f750:	000007ff 	.word	0x000007ff

0800f754 <__aeabi_dcmpun>:
 800f754:	b570      	push	{r4, r5, r6, lr}
 800f756:	0005      	movs	r5, r0
 800f758:	480c      	ldr	r0, [pc, #48]	; (800f78c <__aeabi_dcmpun+0x38>)
 800f75a:	031c      	lsls	r4, r3, #12
 800f75c:	0016      	movs	r6, r2
 800f75e:	005b      	lsls	r3, r3, #1
 800f760:	030a      	lsls	r2, r1, #12
 800f762:	0049      	lsls	r1, r1, #1
 800f764:	0b12      	lsrs	r2, r2, #12
 800f766:	0d49      	lsrs	r1, r1, #21
 800f768:	0b24      	lsrs	r4, r4, #12
 800f76a:	0d5b      	lsrs	r3, r3, #21
 800f76c:	4281      	cmp	r1, r0
 800f76e:	d008      	beq.n	800f782 <__aeabi_dcmpun+0x2e>
 800f770:	4a06      	ldr	r2, [pc, #24]	; (800f78c <__aeabi_dcmpun+0x38>)
 800f772:	2000      	movs	r0, #0
 800f774:	4293      	cmp	r3, r2
 800f776:	d103      	bne.n	800f780 <__aeabi_dcmpun+0x2c>
 800f778:	0020      	movs	r0, r4
 800f77a:	4330      	orrs	r0, r6
 800f77c:	1e43      	subs	r3, r0, #1
 800f77e:	4198      	sbcs	r0, r3
 800f780:	bd70      	pop	{r4, r5, r6, pc}
 800f782:	2001      	movs	r0, #1
 800f784:	432a      	orrs	r2, r5
 800f786:	d1fb      	bne.n	800f780 <__aeabi_dcmpun+0x2c>
 800f788:	e7f2      	b.n	800f770 <__aeabi_dcmpun+0x1c>
 800f78a:	46c0      	nop			; (mov r8, r8)
 800f78c:	000007ff 	.word	0x000007ff

0800f790 <__aeabi_d2iz>:
 800f790:	000a      	movs	r2, r1
 800f792:	b530      	push	{r4, r5, lr}
 800f794:	4c13      	ldr	r4, [pc, #76]	; (800f7e4 <__aeabi_d2iz+0x54>)
 800f796:	0053      	lsls	r3, r2, #1
 800f798:	0309      	lsls	r1, r1, #12
 800f79a:	0005      	movs	r5, r0
 800f79c:	0b09      	lsrs	r1, r1, #12
 800f79e:	2000      	movs	r0, #0
 800f7a0:	0d5b      	lsrs	r3, r3, #21
 800f7a2:	0fd2      	lsrs	r2, r2, #31
 800f7a4:	42a3      	cmp	r3, r4
 800f7a6:	dd04      	ble.n	800f7b2 <__aeabi_d2iz+0x22>
 800f7a8:	480f      	ldr	r0, [pc, #60]	; (800f7e8 <__aeabi_d2iz+0x58>)
 800f7aa:	4283      	cmp	r3, r0
 800f7ac:	dd02      	ble.n	800f7b4 <__aeabi_d2iz+0x24>
 800f7ae:	4b0f      	ldr	r3, [pc, #60]	; (800f7ec <__aeabi_d2iz+0x5c>)
 800f7b0:	18d0      	adds	r0, r2, r3
 800f7b2:	bd30      	pop	{r4, r5, pc}
 800f7b4:	2080      	movs	r0, #128	; 0x80
 800f7b6:	0340      	lsls	r0, r0, #13
 800f7b8:	4301      	orrs	r1, r0
 800f7ba:	480d      	ldr	r0, [pc, #52]	; (800f7f0 <__aeabi_d2iz+0x60>)
 800f7bc:	1ac0      	subs	r0, r0, r3
 800f7be:	281f      	cmp	r0, #31
 800f7c0:	dd08      	ble.n	800f7d4 <__aeabi_d2iz+0x44>
 800f7c2:	480c      	ldr	r0, [pc, #48]	; (800f7f4 <__aeabi_d2iz+0x64>)
 800f7c4:	1ac3      	subs	r3, r0, r3
 800f7c6:	40d9      	lsrs	r1, r3
 800f7c8:	000b      	movs	r3, r1
 800f7ca:	4258      	negs	r0, r3
 800f7cc:	2a00      	cmp	r2, #0
 800f7ce:	d1f0      	bne.n	800f7b2 <__aeabi_d2iz+0x22>
 800f7d0:	0018      	movs	r0, r3
 800f7d2:	e7ee      	b.n	800f7b2 <__aeabi_d2iz+0x22>
 800f7d4:	4c08      	ldr	r4, [pc, #32]	; (800f7f8 <__aeabi_d2iz+0x68>)
 800f7d6:	40c5      	lsrs	r5, r0
 800f7d8:	46a4      	mov	ip, r4
 800f7da:	4463      	add	r3, ip
 800f7dc:	4099      	lsls	r1, r3
 800f7de:	000b      	movs	r3, r1
 800f7e0:	432b      	orrs	r3, r5
 800f7e2:	e7f2      	b.n	800f7ca <__aeabi_d2iz+0x3a>
 800f7e4:	000003fe 	.word	0x000003fe
 800f7e8:	0000041d 	.word	0x0000041d
 800f7ec:	7fffffff 	.word	0x7fffffff
 800f7f0:	00000433 	.word	0x00000433
 800f7f4:	00000413 	.word	0x00000413
 800f7f8:	fffffbed 	.word	0xfffffbed

0800f7fc <__aeabi_i2d>:
 800f7fc:	b570      	push	{r4, r5, r6, lr}
 800f7fe:	2800      	cmp	r0, #0
 800f800:	d016      	beq.n	800f830 <__aeabi_i2d+0x34>
 800f802:	17c3      	asrs	r3, r0, #31
 800f804:	18c5      	adds	r5, r0, r3
 800f806:	405d      	eors	r5, r3
 800f808:	0fc4      	lsrs	r4, r0, #31
 800f80a:	0028      	movs	r0, r5
 800f80c:	f000 f91a 	bl	800fa44 <__clzsi2>
 800f810:	4b11      	ldr	r3, [pc, #68]	; (800f858 <__aeabi_i2d+0x5c>)
 800f812:	1a1b      	subs	r3, r3, r0
 800f814:	280a      	cmp	r0, #10
 800f816:	dc16      	bgt.n	800f846 <__aeabi_i2d+0x4a>
 800f818:	0002      	movs	r2, r0
 800f81a:	002e      	movs	r6, r5
 800f81c:	3215      	adds	r2, #21
 800f81e:	4096      	lsls	r6, r2
 800f820:	220b      	movs	r2, #11
 800f822:	1a12      	subs	r2, r2, r0
 800f824:	40d5      	lsrs	r5, r2
 800f826:	055b      	lsls	r3, r3, #21
 800f828:	032d      	lsls	r5, r5, #12
 800f82a:	0b2d      	lsrs	r5, r5, #12
 800f82c:	0d5b      	lsrs	r3, r3, #21
 800f82e:	e003      	b.n	800f838 <__aeabi_i2d+0x3c>
 800f830:	2400      	movs	r4, #0
 800f832:	2300      	movs	r3, #0
 800f834:	2500      	movs	r5, #0
 800f836:	2600      	movs	r6, #0
 800f838:	051b      	lsls	r3, r3, #20
 800f83a:	432b      	orrs	r3, r5
 800f83c:	07e4      	lsls	r4, r4, #31
 800f83e:	4323      	orrs	r3, r4
 800f840:	0030      	movs	r0, r6
 800f842:	0019      	movs	r1, r3
 800f844:	bd70      	pop	{r4, r5, r6, pc}
 800f846:	380b      	subs	r0, #11
 800f848:	4085      	lsls	r5, r0
 800f84a:	055b      	lsls	r3, r3, #21
 800f84c:	032d      	lsls	r5, r5, #12
 800f84e:	2600      	movs	r6, #0
 800f850:	0b2d      	lsrs	r5, r5, #12
 800f852:	0d5b      	lsrs	r3, r3, #21
 800f854:	e7f0      	b.n	800f838 <__aeabi_i2d+0x3c>
 800f856:	46c0      	nop			; (mov r8, r8)
 800f858:	0000041e 	.word	0x0000041e

0800f85c <__aeabi_ui2d>:
 800f85c:	b510      	push	{r4, lr}
 800f85e:	1e04      	subs	r4, r0, #0
 800f860:	d010      	beq.n	800f884 <__aeabi_ui2d+0x28>
 800f862:	f000 f8ef 	bl	800fa44 <__clzsi2>
 800f866:	4b0f      	ldr	r3, [pc, #60]	; (800f8a4 <__aeabi_ui2d+0x48>)
 800f868:	1a1b      	subs	r3, r3, r0
 800f86a:	280a      	cmp	r0, #10
 800f86c:	dc11      	bgt.n	800f892 <__aeabi_ui2d+0x36>
 800f86e:	220b      	movs	r2, #11
 800f870:	0021      	movs	r1, r4
 800f872:	1a12      	subs	r2, r2, r0
 800f874:	40d1      	lsrs	r1, r2
 800f876:	3015      	adds	r0, #21
 800f878:	030a      	lsls	r2, r1, #12
 800f87a:	055b      	lsls	r3, r3, #21
 800f87c:	4084      	lsls	r4, r0
 800f87e:	0b12      	lsrs	r2, r2, #12
 800f880:	0d5b      	lsrs	r3, r3, #21
 800f882:	e001      	b.n	800f888 <__aeabi_ui2d+0x2c>
 800f884:	2300      	movs	r3, #0
 800f886:	2200      	movs	r2, #0
 800f888:	051b      	lsls	r3, r3, #20
 800f88a:	4313      	orrs	r3, r2
 800f88c:	0020      	movs	r0, r4
 800f88e:	0019      	movs	r1, r3
 800f890:	bd10      	pop	{r4, pc}
 800f892:	0022      	movs	r2, r4
 800f894:	380b      	subs	r0, #11
 800f896:	4082      	lsls	r2, r0
 800f898:	055b      	lsls	r3, r3, #21
 800f89a:	0312      	lsls	r2, r2, #12
 800f89c:	2400      	movs	r4, #0
 800f89e:	0b12      	lsrs	r2, r2, #12
 800f8a0:	0d5b      	lsrs	r3, r3, #21
 800f8a2:	e7f1      	b.n	800f888 <__aeabi_ui2d+0x2c>
 800f8a4:	0000041e 	.word	0x0000041e

0800f8a8 <__aeabi_f2d>:
 800f8a8:	b570      	push	{r4, r5, r6, lr}
 800f8aa:	0242      	lsls	r2, r0, #9
 800f8ac:	0043      	lsls	r3, r0, #1
 800f8ae:	0fc4      	lsrs	r4, r0, #31
 800f8b0:	20fe      	movs	r0, #254	; 0xfe
 800f8b2:	0e1b      	lsrs	r3, r3, #24
 800f8b4:	1c59      	adds	r1, r3, #1
 800f8b6:	0a55      	lsrs	r5, r2, #9
 800f8b8:	4208      	tst	r0, r1
 800f8ba:	d00c      	beq.n	800f8d6 <__aeabi_f2d+0x2e>
 800f8bc:	21e0      	movs	r1, #224	; 0xe0
 800f8be:	0089      	lsls	r1, r1, #2
 800f8c0:	468c      	mov	ip, r1
 800f8c2:	076d      	lsls	r5, r5, #29
 800f8c4:	0b12      	lsrs	r2, r2, #12
 800f8c6:	4463      	add	r3, ip
 800f8c8:	051b      	lsls	r3, r3, #20
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	07e4      	lsls	r4, r4, #31
 800f8ce:	4323      	orrs	r3, r4
 800f8d0:	0028      	movs	r0, r5
 800f8d2:	0019      	movs	r1, r3
 800f8d4:	bd70      	pop	{r4, r5, r6, pc}
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d114      	bne.n	800f904 <__aeabi_f2d+0x5c>
 800f8da:	2d00      	cmp	r5, #0
 800f8dc:	d01b      	beq.n	800f916 <__aeabi_f2d+0x6e>
 800f8de:	0028      	movs	r0, r5
 800f8e0:	f000 f8b0 	bl	800fa44 <__clzsi2>
 800f8e4:	280a      	cmp	r0, #10
 800f8e6:	dc1c      	bgt.n	800f922 <__aeabi_f2d+0x7a>
 800f8e8:	230b      	movs	r3, #11
 800f8ea:	002a      	movs	r2, r5
 800f8ec:	1a1b      	subs	r3, r3, r0
 800f8ee:	40da      	lsrs	r2, r3
 800f8f0:	0003      	movs	r3, r0
 800f8f2:	3315      	adds	r3, #21
 800f8f4:	409d      	lsls	r5, r3
 800f8f6:	4b0e      	ldr	r3, [pc, #56]	; (800f930 <__aeabi_f2d+0x88>)
 800f8f8:	0312      	lsls	r2, r2, #12
 800f8fa:	1a1b      	subs	r3, r3, r0
 800f8fc:	055b      	lsls	r3, r3, #21
 800f8fe:	0b12      	lsrs	r2, r2, #12
 800f900:	0d5b      	lsrs	r3, r3, #21
 800f902:	e7e1      	b.n	800f8c8 <__aeabi_f2d+0x20>
 800f904:	2d00      	cmp	r5, #0
 800f906:	d009      	beq.n	800f91c <__aeabi_f2d+0x74>
 800f908:	0b13      	lsrs	r3, r2, #12
 800f90a:	2280      	movs	r2, #128	; 0x80
 800f90c:	0312      	lsls	r2, r2, #12
 800f90e:	431a      	orrs	r2, r3
 800f910:	076d      	lsls	r5, r5, #29
 800f912:	4b08      	ldr	r3, [pc, #32]	; (800f934 <__aeabi_f2d+0x8c>)
 800f914:	e7d8      	b.n	800f8c8 <__aeabi_f2d+0x20>
 800f916:	2300      	movs	r3, #0
 800f918:	2200      	movs	r2, #0
 800f91a:	e7d5      	b.n	800f8c8 <__aeabi_f2d+0x20>
 800f91c:	2200      	movs	r2, #0
 800f91e:	4b05      	ldr	r3, [pc, #20]	; (800f934 <__aeabi_f2d+0x8c>)
 800f920:	e7d2      	b.n	800f8c8 <__aeabi_f2d+0x20>
 800f922:	0003      	movs	r3, r0
 800f924:	002a      	movs	r2, r5
 800f926:	3b0b      	subs	r3, #11
 800f928:	409a      	lsls	r2, r3
 800f92a:	2500      	movs	r5, #0
 800f92c:	e7e3      	b.n	800f8f6 <__aeabi_f2d+0x4e>
 800f92e:	46c0      	nop			; (mov r8, r8)
 800f930:	00000389 	.word	0x00000389
 800f934:	000007ff 	.word	0x000007ff

0800f938 <__aeabi_d2f>:
 800f938:	0002      	movs	r2, r0
 800f93a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f93c:	004b      	lsls	r3, r1, #1
 800f93e:	030d      	lsls	r5, r1, #12
 800f940:	0f40      	lsrs	r0, r0, #29
 800f942:	0d5b      	lsrs	r3, r3, #21
 800f944:	0fcc      	lsrs	r4, r1, #31
 800f946:	0a6d      	lsrs	r5, r5, #9
 800f948:	493a      	ldr	r1, [pc, #232]	; (800fa34 <__aeabi_d2f+0xfc>)
 800f94a:	4305      	orrs	r5, r0
 800f94c:	1c58      	adds	r0, r3, #1
 800f94e:	00d7      	lsls	r7, r2, #3
 800f950:	4208      	tst	r0, r1
 800f952:	d00a      	beq.n	800f96a <__aeabi_d2f+0x32>
 800f954:	4938      	ldr	r1, [pc, #224]	; (800fa38 <__aeabi_d2f+0x100>)
 800f956:	1859      	adds	r1, r3, r1
 800f958:	29fe      	cmp	r1, #254	; 0xfe
 800f95a:	dd16      	ble.n	800f98a <__aeabi_d2f+0x52>
 800f95c:	20ff      	movs	r0, #255	; 0xff
 800f95e:	2200      	movs	r2, #0
 800f960:	05c0      	lsls	r0, r0, #23
 800f962:	4310      	orrs	r0, r2
 800f964:	07e4      	lsls	r4, r4, #31
 800f966:	4320      	orrs	r0, r4
 800f968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d106      	bne.n	800f97c <__aeabi_d2f+0x44>
 800f96e:	433d      	orrs	r5, r7
 800f970:	d026      	beq.n	800f9c0 <__aeabi_d2f+0x88>
 800f972:	2205      	movs	r2, #5
 800f974:	0192      	lsls	r2, r2, #6
 800f976:	0a52      	lsrs	r2, r2, #9
 800f978:	b2d8      	uxtb	r0, r3
 800f97a:	e7f1      	b.n	800f960 <__aeabi_d2f+0x28>
 800f97c:	432f      	orrs	r7, r5
 800f97e:	d0ed      	beq.n	800f95c <__aeabi_d2f+0x24>
 800f980:	2280      	movs	r2, #128	; 0x80
 800f982:	03d2      	lsls	r2, r2, #15
 800f984:	20ff      	movs	r0, #255	; 0xff
 800f986:	432a      	orrs	r2, r5
 800f988:	e7ea      	b.n	800f960 <__aeabi_d2f+0x28>
 800f98a:	2900      	cmp	r1, #0
 800f98c:	dd1b      	ble.n	800f9c6 <__aeabi_d2f+0x8e>
 800f98e:	0192      	lsls	r2, r2, #6
 800f990:	1e50      	subs	r0, r2, #1
 800f992:	4182      	sbcs	r2, r0
 800f994:	00ed      	lsls	r5, r5, #3
 800f996:	0f7f      	lsrs	r7, r7, #29
 800f998:	432a      	orrs	r2, r5
 800f99a:	433a      	orrs	r2, r7
 800f99c:	0753      	lsls	r3, r2, #29
 800f99e:	d047      	beq.n	800fa30 <__aeabi_d2f+0xf8>
 800f9a0:	230f      	movs	r3, #15
 800f9a2:	4013      	ands	r3, r2
 800f9a4:	2b04      	cmp	r3, #4
 800f9a6:	d000      	beq.n	800f9aa <__aeabi_d2f+0x72>
 800f9a8:	3204      	adds	r2, #4
 800f9aa:	2380      	movs	r3, #128	; 0x80
 800f9ac:	04db      	lsls	r3, r3, #19
 800f9ae:	4013      	ands	r3, r2
 800f9b0:	d03e      	beq.n	800fa30 <__aeabi_d2f+0xf8>
 800f9b2:	1c48      	adds	r0, r1, #1
 800f9b4:	29fe      	cmp	r1, #254	; 0xfe
 800f9b6:	d0d1      	beq.n	800f95c <__aeabi_d2f+0x24>
 800f9b8:	0192      	lsls	r2, r2, #6
 800f9ba:	0a52      	lsrs	r2, r2, #9
 800f9bc:	b2c0      	uxtb	r0, r0
 800f9be:	e7cf      	b.n	800f960 <__aeabi_d2f+0x28>
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	e7cc      	b.n	800f960 <__aeabi_d2f+0x28>
 800f9c6:	000a      	movs	r2, r1
 800f9c8:	3217      	adds	r2, #23
 800f9ca:	db2f      	blt.n	800fa2c <__aeabi_d2f+0xf4>
 800f9cc:	2680      	movs	r6, #128	; 0x80
 800f9ce:	0436      	lsls	r6, r6, #16
 800f9d0:	432e      	orrs	r6, r5
 800f9d2:	251e      	movs	r5, #30
 800f9d4:	1a6d      	subs	r5, r5, r1
 800f9d6:	2d1f      	cmp	r5, #31
 800f9d8:	dd11      	ble.n	800f9fe <__aeabi_d2f+0xc6>
 800f9da:	2202      	movs	r2, #2
 800f9dc:	4252      	negs	r2, r2
 800f9de:	1a52      	subs	r2, r2, r1
 800f9e0:	0031      	movs	r1, r6
 800f9e2:	40d1      	lsrs	r1, r2
 800f9e4:	2d20      	cmp	r5, #32
 800f9e6:	d004      	beq.n	800f9f2 <__aeabi_d2f+0xba>
 800f9e8:	4a14      	ldr	r2, [pc, #80]	; (800fa3c <__aeabi_d2f+0x104>)
 800f9ea:	4694      	mov	ip, r2
 800f9ec:	4463      	add	r3, ip
 800f9ee:	409e      	lsls	r6, r3
 800f9f0:	4337      	orrs	r7, r6
 800f9f2:	003a      	movs	r2, r7
 800f9f4:	1e53      	subs	r3, r2, #1
 800f9f6:	419a      	sbcs	r2, r3
 800f9f8:	430a      	orrs	r2, r1
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	e7ce      	b.n	800f99c <__aeabi_d2f+0x64>
 800f9fe:	4a10      	ldr	r2, [pc, #64]	; (800fa40 <__aeabi_d2f+0x108>)
 800fa00:	0038      	movs	r0, r7
 800fa02:	4694      	mov	ip, r2
 800fa04:	4463      	add	r3, ip
 800fa06:	4098      	lsls	r0, r3
 800fa08:	003a      	movs	r2, r7
 800fa0a:	1e41      	subs	r1, r0, #1
 800fa0c:	4188      	sbcs	r0, r1
 800fa0e:	409e      	lsls	r6, r3
 800fa10:	40ea      	lsrs	r2, r5
 800fa12:	4330      	orrs	r0, r6
 800fa14:	4302      	orrs	r2, r0
 800fa16:	2100      	movs	r1, #0
 800fa18:	0753      	lsls	r3, r2, #29
 800fa1a:	d1c1      	bne.n	800f9a0 <__aeabi_d2f+0x68>
 800fa1c:	2180      	movs	r1, #128	; 0x80
 800fa1e:	0013      	movs	r3, r2
 800fa20:	04c9      	lsls	r1, r1, #19
 800fa22:	2001      	movs	r0, #1
 800fa24:	400b      	ands	r3, r1
 800fa26:	420a      	tst	r2, r1
 800fa28:	d1c6      	bne.n	800f9b8 <__aeabi_d2f+0x80>
 800fa2a:	e7a3      	b.n	800f974 <__aeabi_d2f+0x3c>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	e7a0      	b.n	800f972 <__aeabi_d2f+0x3a>
 800fa30:	000b      	movs	r3, r1
 800fa32:	e79f      	b.n	800f974 <__aeabi_d2f+0x3c>
 800fa34:	000007fe 	.word	0x000007fe
 800fa38:	fffffc80 	.word	0xfffffc80
 800fa3c:	fffffca2 	.word	0xfffffca2
 800fa40:	fffffc82 	.word	0xfffffc82

0800fa44 <__clzsi2>:
 800fa44:	211c      	movs	r1, #28
 800fa46:	2301      	movs	r3, #1
 800fa48:	041b      	lsls	r3, r3, #16
 800fa4a:	4298      	cmp	r0, r3
 800fa4c:	d301      	bcc.n	800fa52 <__clzsi2+0xe>
 800fa4e:	0c00      	lsrs	r0, r0, #16
 800fa50:	3910      	subs	r1, #16
 800fa52:	0a1b      	lsrs	r3, r3, #8
 800fa54:	4298      	cmp	r0, r3
 800fa56:	d301      	bcc.n	800fa5c <__clzsi2+0x18>
 800fa58:	0a00      	lsrs	r0, r0, #8
 800fa5a:	3908      	subs	r1, #8
 800fa5c:	091b      	lsrs	r3, r3, #4
 800fa5e:	4298      	cmp	r0, r3
 800fa60:	d301      	bcc.n	800fa66 <__clzsi2+0x22>
 800fa62:	0900      	lsrs	r0, r0, #4
 800fa64:	3904      	subs	r1, #4
 800fa66:	a202      	add	r2, pc, #8	; (adr r2, 800fa70 <__clzsi2+0x2c>)
 800fa68:	5c10      	ldrb	r0, [r2, r0]
 800fa6a:	1840      	adds	r0, r0, r1
 800fa6c:	4770      	bx	lr
 800fa6e:	46c0      	nop			; (mov r8, r8)
 800fa70:	02020304 	.word	0x02020304
 800fa74:	01010101 	.word	0x01010101
	...

0800fa80 <Debug_Tx>:



static void Debug_Tx(char _out[]){

	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fa80:	220c      	movs	r2, #12
static void Debug_Tx(char _out[]){
 800fa82:	b530      	push	{r4, r5, lr}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fa84:	4d0b      	ldr	r5, [pc, #44]	; (800fab4 <Debug_Tx+0x34>)
static void Debug_Tx(char _out[]){
 800fa86:	b083      	sub	sp, #12
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fa88:	682b      	ldr	r3, [r5, #0]
static void Debug_Tx(char _out[]){
 800fa8a:	0004      	movs	r4, r0
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fa8c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800fa8e:	f7fc ff37 	bl	800c900 <strlen>
 800fa92:	0021      	movs	r1, r4
 800fa94:	b282      	uxth	r2, r0
 800fa96:	4b08      	ldr	r3, [pc, #32]	; (800fab8 <Debug_Tx+0x38>)
 800fa98:	0028      	movs	r0, r5
 800fa9a:	f007 fabd 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800fa9e:	4b07      	ldr	r3, [pc, #28]	; (800fabc <Debug_Tx+0x3c>)
 800faa0:	a901      	add	r1, sp, #4
 800faa2:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800faa4:	2202      	movs	r2, #2
 800faa6:	230a      	movs	r3, #10
 800faa8:	0028      	movs	r0, r5
 800faaa:	f007 fab5 	bl	8017018 <HAL_UART_Transmit>


}
 800faae:	b003      	add	sp, #12
 800fab0:	bd30      	pop	{r4, r5, pc}
 800fab2:	46c0      	nop			; (mov r8, r8)
 800fab4:	200049d4 	.word	0x200049d4
 800fab8:	00001388 	.word	0x00001388
 800fabc:	00000a0d 	.word	0x00000a0d

0800fac0 <readAcc.isra.0>:





static float* readAcc(){
 800fac0:	b5f0      	push	{r4, r5, r6, r7, lr}

	ACC_GYRO_data[0]=0;
 800fac2:	2300      	movs	r3, #0
static float* readAcc(){
 800fac4:	46de      	mov	lr, fp
 800fac6:	4657      	mov	r7, sl
 800fac8:	464e      	mov	r6, r9
 800faca:	4645      	mov	r5, r8
	ACC_GYRO_data[0]=0;
 800facc:	4c4d      	ldr	r4, [pc, #308]	; (800fc04 <readAcc.isra.0+0x144>)
static float* readAcc(){
 800face:	b5e0      	push	{r5, r6, r7, lr}
	ACC_GYRO_data[0]=0;
 800fad0:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=0;
 800fad2:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=0;
 800fad4:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=0;
 800fad6:	60e3      	str	r3, [r4, #12]
	ACC_GYRO_data[4]=0;
 800fad8:	6123      	str	r3, [r4, #16]
	ACC_GYRO_data[5]=0;
 800fada:	6163      	str	r3, [r4, #20]
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800fadc:	23fa      	movs	r3, #250	; 0xfa
static float* readAcc(){
 800fade:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	469b      	mov	fp, r3
 800fae4:	9302      	str	r3, [sp, #8]
 800fae6:	2306      	movs	r3, #6
 800fae8:	4e47      	ldr	r6, [pc, #284]	; (800fc08 <readAcc.isra.0+0x148>)
 800faea:	ad04      	add	r5, sp, #16
 800faec:	9301      	str	r3, [sp, #4]
 800faee:	9500      	str	r5, [sp, #0]
 800faf0:	223b      	movs	r2, #59	; 0x3b
 800faf2:	21d0      	movs	r1, #208	; 0xd0
 800faf4:	0030      	movs	r0, r6
 800faf6:	3b05      	subs	r3, #5
 800faf8:	f005 fae2 	bl	80150c0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800fafc:	8828      	ldrh	r0, [r5, #0]
 800fafe:	4b43      	ldr	r3, [pc, #268]	; (800fc0c <readAcc.isra.0+0x14c>)
 800fb00:	ba42      	rev16	r2, r0
 800fb02:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800fb04:	886b      	ldrh	r3, [r5, #2]
 800fb06:	bac0      	revsh	r0, r0
 800fb08:	ba5a      	rev16	r2, r3
 800fb0a:	bad9      	revsh	r1, r3
 800fb0c:	4b40      	ldr	r3, [pc, #256]	; (800fc10 <readAcc.isra.0+0x150>)
 800fb0e:	4689      	mov	r9, r1
 800fb10:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800fb12:	88ab      	ldrh	r3, [r5, #4]
 800fb14:	ba5a      	rev16	r2, r3
 800fb16:	bad9      	revsh	r1, r3
 800fb18:	4b3e      	ldr	r3, [pc, #248]	; (800fc14 <readAcc.isra.0+0x154>)
 800fb1a:	468a      	mov	sl, r1
 800fb1c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0;
 800fb1e:	4a3e      	ldr	r2, [pc, #248]	; (800fc18 <readAcc.isra.0+0x158>)
 800fb20:	4690      	mov	r8, r2
 800fb22:	f7ff fe6b 	bl	800f7fc <__aeabi_i2d>
 800fb26:	4b3d      	ldr	r3, [pc, #244]	; (800fc1c <readAcc.isra.0+0x15c>)
 800fb28:	2200      	movs	r2, #0
 800fb2a:	f7fe ffcf 	bl	800eacc <__aeabi_dmul>
 800fb2e:	f7ff ff03 	bl	800f938 <__aeabi_d2f>
 800fb32:	4642      	mov	r2, r8
 800fb34:	6010      	str	r0, [r2, #0]
	Ay = Accel_Y_RAW/16384.0;
 800fb36:	4648      	mov	r0, r9
 800fb38:	f7ff fe60 	bl	800f7fc <__aeabi_i2d>
 800fb3c:	4b37      	ldr	r3, [pc, #220]	; (800fc1c <readAcc.isra.0+0x15c>)
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f7fe ffc4 	bl	800eacc <__aeabi_dmul>
 800fb44:	f7ff fef8 	bl	800f938 <__aeabi_d2f>
	Az = Accel_Z_RAW/16384.0;
 800fb48:	4a35      	ldr	r2, [pc, #212]	; (800fc20 <readAcc.isra.0+0x160>)
	Ay = Accel_Y_RAW/16384.0;
 800fb4a:	4f36      	ldr	r7, [pc, #216]	; (800fc24 <readAcc.isra.0+0x164>)
	Az = Accel_Z_RAW/16384.0;
 800fb4c:	4691      	mov	r9, r2
	Ay = Accel_Y_RAW/16384.0;
 800fb4e:	6038      	str	r0, [r7, #0]
	Az = Accel_Z_RAW/16384.0;
 800fb50:	4650      	mov	r0, sl
 800fb52:	f7ff fe53 	bl	800f7fc <__aeabi_i2d>
 800fb56:	2200      	movs	r2, #0
 800fb58:	4b30      	ldr	r3, [pc, #192]	; (800fc1c <readAcc.isra.0+0x15c>)
 800fb5a:	f7fe ffb7 	bl	800eacc <__aeabi_dmul>
 800fb5e:	f7ff feeb 	bl	800f938 <__aeabi_d2f>
 800fb62:	464a      	mov	r2, r9


	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800fb64:	2306      	movs	r3, #6
	Az = Accel_Z_RAW/16384.0;
 800fb66:	6010      	str	r0, [r2, #0]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800fb68:	465a      	mov	r2, fp
 800fb6a:	9301      	str	r3, [sp, #4]
 800fb6c:	9202      	str	r2, [sp, #8]
 800fb6e:	9500      	str	r5, [sp, #0]
 800fb70:	2243      	movs	r2, #67	; 0x43
 800fb72:	21d0      	movs	r1, #208	; 0xd0
 800fb74:	0030      	movs	r0, r6
 800fb76:	3b05      	subs	r3, #5
 800fb78:	f005 faa2 	bl	80150c0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800fb7c:	8828      	ldrh	r0, [r5, #0]
 800fb7e:	4b2a      	ldr	r3, [pc, #168]	; (800fc28 <readAcc.isra.0+0x168>)
 800fb80:	886e      	ldrh	r6, [r5, #2]
 800fb82:	ba42      	rev16	r2, r0
 800fb84:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800fb86:	4b29      	ldr	r3, [pc, #164]	; (800fc2c <readAcc.isra.0+0x16c>)
 800fb88:	88ad      	ldrh	r5, [r5, #4]
 800fb8a:	ba72      	rev16	r2, r6
 800fb8c:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800fb8e:	4b28      	ldr	r3, [pc, #160]	; (800fc30 <readAcc.isra.0+0x170>)
 800fb90:	ba6a      	rev16	r2, r5
 800fb92:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0;
 800fb94:	bac0      	revsh	r0, r0
 800fb96:	f7ff fe31 	bl	800f7fc <__aeabi_i2d>
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	4b25      	ldr	r3, [pc, #148]	; (800fc34 <readAcc.isra.0+0x174>)
 800fb9e:	f7fe fb9b 	bl	800e2d8 <__aeabi_ddiv>
 800fba2:	f7ff fec9 	bl	800f938 <__aeabi_d2f>
 800fba6:	4b24      	ldr	r3, [pc, #144]	; (800fc38 <readAcc.isra.0+0x178>)
 800fba8:	baf6      	revsh	r6, r6
 800fbaa:	4682      	mov	sl, r0
 800fbac:	6018      	str	r0, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 800fbae:	0030      	movs	r0, r6
 800fbb0:	f7ff fe24 	bl	800f7fc <__aeabi_i2d>
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	4b1f      	ldr	r3, [pc, #124]	; (800fc34 <readAcc.isra.0+0x174>)
 800fbb8:	f7fe fb8e 	bl	800e2d8 <__aeabi_ddiv>
 800fbbc:	f7ff febc 	bl	800f938 <__aeabi_d2f>
 800fbc0:	4b1e      	ldr	r3, [pc, #120]	; (800fc3c <readAcc.isra.0+0x17c>)
 800fbc2:	baed      	revsh	r5, r5
 800fbc4:	1c06      	adds	r6, r0, #0
 800fbc6:	6018      	str	r0, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 800fbc8:	0028      	movs	r0, r5
 800fbca:	f7ff fe17 	bl	800f7fc <__aeabi_i2d>
 800fbce:	2200      	movs	r2, #0
 800fbd0:	4b18      	ldr	r3, [pc, #96]	; (800fc34 <readAcc.isra.0+0x174>)
 800fbd2:	f7fe fb81 	bl	800e2d8 <__aeabi_ddiv>
 800fbd6:	f7ff feaf 	bl	800f938 <__aeabi_d2f>
 800fbda:	4b19      	ldr	r3, [pc, #100]	; (800fc40 <readAcc.isra.0+0x180>)
	ACC_GYRO_data[0]=Ax;
	ACC_GYRO_data[1]=Ay;
	ACC_GYRO_data[2]=Az;
	ACC_GYRO_data[3]=Gx;
	ACC_GYRO_data[4]=Gy;
 800fbdc:	6126      	str	r6, [r4, #16]
	Gz = Gyro_Z_RAW/131.0;
 800fbde:	6018      	str	r0, [r3, #0]
	ACC_GYRO_data[0]=Ax;
 800fbe0:	4643      	mov	r3, r8
 800fbe2:	681b      	ldr	r3, [r3, #0]
	ACC_GYRO_data[5]=Gz;
 800fbe4:	6160      	str	r0, [r4, #20]
	ACC_GYRO_data[0]=Ax;
 800fbe6:	6023      	str	r3, [r4, #0]
	ACC_GYRO_data[1]=Ay;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	6063      	str	r3, [r4, #4]
	ACC_GYRO_data[2]=Az;
 800fbec:	464b      	mov	r3, r9
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	60a3      	str	r3, [r4, #8]
	ACC_GYRO_data[3]=Gx;
 800fbf2:	4653      	mov	r3, sl
 800fbf4:	60e3      	str	r3, [r4, #12]
	return(ACC_GYRO_data);

	//sprintf (buf, "%.2f", Ax);
}
 800fbf6:	b007      	add	sp, #28
 800fbf8:	bcf0      	pop	{r4, r5, r6, r7}
 800fbfa:	46bb      	mov	fp, r7
 800fbfc:	46b2      	mov	sl, r6
 800fbfe:	46a9      	mov	r9, r5
 800fc00:	46a0      	mov	r8, r4
 800fc02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc04:	200002e4 	.word	0x200002e4
 800fc08:	200047a8 	.word	0x200047a8
 800fc0c:	20000318 	.word	0x20000318
 800fc10:	2000031a 	.word	0x2000031a
 800fc14:	2000031c 	.word	0x2000031c
 800fc18:	20000320 	.word	0x20000320
 800fc1c:	3f100000 	.word	0x3f100000
 800fc20:	20000328 	.word	0x20000328
 800fc24:	20000324 	.word	0x20000324
 800fc28:	20001dec 	.word	0x20001dec
 800fc2c:	20001dee 	.word	0x20001dee
 800fc30:	20001df0 	.word	0x20001df0
 800fc34:	40606000 	.word	0x40606000
 800fc38:	20001de4 	.word	0x20001de4
 800fc3c:	20001de8 	.word	0x20001de8
 800fc40:	20001df4 	.word	0x20001df4

0800fc44 <RestartGSM>:
	}
	return 1;
}

void RestartGSM()
{
 800fc44:	b570      	push	{r4, r5, r6, lr}
	SET_GSM_VCC_EN(1);
	SET_PWRKEY(0);
	HAL_Delay(700);
 800fc46:	25af      	movs	r5, #175	; 0xaf
	SET_PWRKEY(1);
	HAL_Delay(500);
 800fc48:	26fa      	movs	r6, #250	; 0xfa
	}
}

static void SET_GSM_VCC_EN(int val){
	if(val==1){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800fc4a:	4c1f      	ldr	r4, [pc, #124]	; (800fcc8 <RestartGSM+0x84>)
 800fc4c:	2201      	movs	r2, #1
 800fc4e:	0020      	movs	r0, r4
 800fc50:	2140      	movs	r1, #64	; 0x40
 800fc52:	f004 ffb5 	bl	8014bc0 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 800fc56:	00ad      	lsls	r5, r5, #2
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800fc58:	2200      	movs	r2, #0
 800fc5a:	2180      	movs	r1, #128	; 0x80
 800fc5c:	0020      	movs	r0, r4
 800fc5e:	f004 ffaf 	bl	8014bc0 <HAL_GPIO_WritePin>
 800fc62:	0028      	movs	r0, r5
 800fc64:	f004 f8e4 	bl	8013e30 <HAL_Delay>
	HAL_Delay(500);
 800fc68:	0076      	lsls	r6, r6, #1
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	2180      	movs	r1, #128	; 0x80
 800fc6e:	0020      	movs	r0, r4
 800fc70:	f004 ffa6 	bl	8014bc0 <HAL_GPIO_WritePin>
 800fc74:	0030      	movs	r0, r6
 800fc76:	f004 f8db 	bl	8013e30 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2180      	movs	r1, #128	; 0x80
 800fc7e:	0020      	movs	r0, r4
 800fc80:	f004 ff9e 	bl	8014bc0 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
	HAL_Delay(700);
 800fc84:	0028      	movs	r0, r5
 800fc86:	f004 f8d3 	bl	8013e30 <HAL_Delay>
	}
	else if(val==0){
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_RESET);
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	2140      	movs	r1, #64	; 0x40
 800fc8e:	0020      	movs	r0, r4
 800fc90:	f004 ff96 	bl	8014bc0 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(0);
	HAL_Delay(700);
 800fc94:	0028      	movs	r0, r5
 800fc96:	f004 f8cb 	bl	8013e30 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	2180      	movs	r1, #128	; 0x80
 800fc9e:	0020      	movs	r0, r4
 800fca0:	f004 ff8e 	bl	8014bc0 <HAL_GPIO_WritePin>
	SET_PWRKEY(1);
	HAL_Delay(500);
 800fca4:	0030      	movs	r0, r6
 800fca6:	f004 f8c3 	bl	8013e30 <HAL_Delay>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 800fcaa:	2201      	movs	r2, #1
 800fcac:	2140      	movs	r1, #64	; 0x40
 800fcae:	0020      	movs	r0, r4
 800fcb0:	f004 ff86 	bl	8014bc0 <HAL_GPIO_WritePin>
	SET_GSM_VCC_EN(1);
	HAL_Delay(200);
 800fcb4:	20c8      	movs	r0, #200	; 0xc8
 800fcb6:	f004 f8bb 	bl	8013e30 <HAL_Delay>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_RESET);
 800fcba:	2200      	movs	r2, #0
 800fcbc:	2180      	movs	r1, #128	; 0x80
 800fcbe:	0020      	movs	r0, r4
 800fcc0:	f004 ff7e 	bl	8014bc0 <HAL_GPIO_WritePin>
	SET_PWRKEY(0);
}
 800fcc4:	bd70      	pop	{r4, r5, r6, pc}
 800fcc6:	46c0      	nop			; (mov r8, r8)
 800fcc8:	50000800 	.word	0x50000800

0800fccc <SendGSMCode>:

void SendGSMCode(const char cmd[])
{
 800fccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcce:	46c6      	mov	lr, r8

	memset(GSMData, 0, 990);
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fcd0:	270c      	movs	r7, #12
{
 800fcd2:	0005      	movs	r5, r0
 800fcd4:	b500      	push	{lr}
	memset(GSMData, 0, 990);
 800fcd6:	2100      	movs	r1, #0
{
 800fcd8:	b082      	sub	sp, #8
	memset(GSMData, 0, 990);
 800fcda:	4a24      	ldr	r2, [pc, #144]	; (800fd6c <SendGSMCode+0xa0>)
 800fcdc:	4824      	ldr	r0, [pc, #144]	; (800fd70 <SendGSMCode+0xa4>)
 800fcde:	f009 fbab 	bl	8019438 <memset>
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fce2:	4b24      	ldr	r3, [pc, #144]	; (800fd74 <SendGSMCode+0xa8>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fce4:	4e24      	ldr	r6, [pc, #144]	; (800fd78 <SendGSMCode+0xac>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fce6:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fce8:	2201      	movs	r2, #1
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fcea:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fcec:	4923      	ldr	r1, [pc, #140]	; (800fd7c <SendGSMCode+0xb0>)
 800fcee:	0030      	movs	r0, r6
 800fcf0:	f007 fb60 	bl	80173b4 <HAL_UART_Receive_DMA>
	memset(GSMTXC, 0, 100);
 800fcf4:	4c22      	ldr	r4, [pc, #136]	; (800fd80 <SendGSMCode+0xb4>)
 800fcf6:	2264      	movs	r2, #100	; 0x64
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	0020      	movs	r0, r4
 800fcfc:	f009 fb9c 	bl	8019438 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 800fd00:	0028      	movs	r0, r5
 800fd02:	f7fc fdfd 	bl	800c900 <strlen>
 800fd06:	4b1f      	ldr	r3, [pc, #124]	; (800fd84 <SendGSMCode+0xb8>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d101      	bne.n	800fd12 <SendGSMCode+0x46>
 800fd0e:	285a      	cmp	r0, #90	; 0x5a
 800fd10:	d818      	bhi.n	800fd44 <SendGSMCode+0x78>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 800fd12:	0029      	movs	r1, r5
 800fd14:	0020      	movs	r0, r4
 800fd16:	f009 fc55 	bl	80195c4 <stpcpy>
	strcat(GSMTXC, "\r\n");
 800fd1a:	491b      	ldr	r1, [pc, #108]	; (800fd88 <SendGSMCode+0xbc>)
 800fd1c:	2203      	movs	r2, #3
 800fd1e:	f009 fcff 	bl	8019720 <memcpy>




static void GSM_Tx(const char _out[]){
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fd22:	220c      	movs	r2, #12
 800fd24:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800fd26:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fd28:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800fd2a:	f7fc fde9 	bl	800c900 <strlen>
 800fd2e:	2396      	movs	r3, #150	; 0x96
 800fd30:	b282      	uxth	r2, r0
 800fd32:	0021      	movs	r1, r4
 800fd34:	0030      	movs	r0, r6
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	f007 f96e 	bl	8017018 <HAL_UART_Transmit>

	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);
	// return GSM_Rx();
}
 800fd3c:	b002      	add	sp, #8
 800fd3e:	bc80      	pop	{r7}
 800fd40:	46b8      	mov	r8, r7
 800fd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fd44:	4b11      	ldr	r3, [pc, #68]	; (800fd8c <SendGSMCode+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800fd46:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fd48:	4698      	mov	r8, r3
 800fd4a:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800fd4c:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fd4e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800fd50:	490f      	ldr	r1, [pc, #60]	; (800fd90 <SendGSMCode+0xc4>)
 800fd52:	4b10      	ldr	r3, [pc, #64]	; (800fd94 <SendGSMCode+0xc8>)
 800fd54:	f007 f960 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800fd58:	4b0f      	ldr	r3, [pc, #60]	; (800fd98 <SendGSMCode+0xcc>)
 800fd5a:	a901      	add	r1, sp, #4
 800fd5c:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800fd5e:	2202      	movs	r2, #2
 800fd60:	230a      	movs	r3, #10
 800fd62:	4640      	mov	r0, r8
 800fd64:	f007 f958 	bl	8017018 <HAL_UART_Transmit>
}
 800fd68:	e7d3      	b.n	800fd12 <SendGSMCode+0x46>
 800fd6a:	46c0      	nop			; (mov r8, r8)
 800fd6c:	000003de 	.word	0x000003de
 800fd70:	20000544 	.word	0x20000544
 800fd74:	20004940 	.word	0x20004940
 800fd78:	200048ac 	.word	0x200048ac
 800fd7c:	20000540 	.word	0x20000540
 800fd80:	20001d80 	.word	0x20001d80
 800fd84:	200000c4 	.word	0x200000c4
 800fd88:	0801d054 	.word	0x0801d054
 800fd8c:	200049d4 	.word	0x200049d4
 800fd90:	0801d034 	.word	0x0801d034
 800fd94:	00001388 	.word	0x00001388
 800fd98:	00000a0d 	.word	0x00000a0d

0800fd9c <SendGSMCodeL>:
	GSM_Tx(cmd);
	// return GSM_Rx();
}

void SendGSMCodeL(const char cmd[])
{
 800fd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd9e:	46c6      	mov	lr, r8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fda0:	270c      	movs	r7, #12
{
 800fda2:	0005      	movs	r5, r0
 800fda4:	b500      	push	{lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fda6:	4b25      	ldr	r3, [pc, #148]	; (800fe3c <SendGSMCodeL+0xa0>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fda8:	4e25      	ldr	r6, [pc, #148]	; (800fe40 <SendGSMCodeL+0xa4>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fdaa:	681b      	ldr	r3, [r3, #0]
{
 800fdac:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fdae:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	4924      	ldr	r1, [pc, #144]	; (800fe44 <SendGSMCodeL+0xa8>)
 800fdb4:	0030      	movs	r0, r6
 800fdb6:	f007 fafd 	bl	80173b4 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 800fdba:	2100      	movs	r1, #0
 800fdbc:	4a22      	ldr	r2, [pc, #136]	; (800fe48 <SendGSMCodeL+0xac>)
 800fdbe:	4823      	ldr	r0, [pc, #140]	; (800fe4c <SendGSMCodeL+0xb0>)
 800fdc0:	f009 fb3a 	bl	8019438 <memset>
	memset(GSMTXC, 0, 100);
 800fdc4:	4c22      	ldr	r4, [pc, #136]	; (800fe50 <SendGSMCodeL+0xb4>)
 800fdc6:	2264      	movs	r2, #100	; 0x64
 800fdc8:	2100      	movs	r1, #0
 800fdca:	0020      	movs	r0, r4
 800fdcc:	f009 fb34 	bl	8019438 <memset>
	if ((strlen(cmd) > 90) & (debug == 1))
 800fdd0:	0028      	movs	r0, r5
 800fdd2:	f7fc fd95 	bl	800c900 <strlen>
 800fdd6:	4b1f      	ldr	r3, [pc, #124]	; (800fe54 <SendGSMCodeL+0xb8>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d101      	bne.n	800fde2 <SendGSMCodeL+0x46>
 800fdde:	285a      	cmp	r0, #90	; 0x5a
 800fde0:	d818      	bhi.n	800fe14 <SendGSMCodeL+0x78>
	{
		Debug_Tx("Error:GSM Code Length Exceed");
	}
	strcpy(GSMTXC, cmd);
 800fde2:	0029      	movs	r1, r5
 800fde4:	0020      	movs	r0, r4
 800fde6:	f009 fbed 	bl	80195c4 <stpcpy>
	strcat(GSMTXC, "\r\n");
 800fdea:	491b      	ldr	r1, [pc, #108]	; (800fe58 <SendGSMCodeL+0xbc>)
 800fdec:	2203      	movs	r2, #3
 800fdee:	f009 fc97 	bl	8019720 <memcpy>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fdf2:	220c      	movs	r2, #12
 800fdf4:	6833      	ldr	r3, [r6, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800fdf6:	0020      	movs	r0, r4
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fdf8:	621a      	str	r2, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800fdfa:	f7fc fd81 	bl	800c900 <strlen>
 800fdfe:	2396      	movs	r3, #150	; 0x96
 800fe00:	b282      	uxth	r2, r0
 800fe02:	0021      	movs	r1, r4
 800fe04:	0030      	movs	r0, r6
 800fe06:	005b      	lsls	r3, r3, #1
 800fe08:	f007 f906 	bl	8017018 <HAL_UART_Transmit>
	// Debug_Tx(GSMTXC);
	GSM_Tx(GSMTXC);

	// return GSM_RxL();
}
 800fe0c:	b002      	add	sp, #8
 800fe0e:	bc80      	pop	{r7}
 800fe10:	46b8      	mov	r8, r7
 800fe12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fe14:	4b11      	ldr	r3, [pc, #68]	; (800fe5c <SendGSMCodeL+0xc0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800fe16:	221c      	movs	r2, #28
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fe18:	4698      	mov	r8, r3
 800fe1a:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800fe1c:	4640      	mov	r0, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fe1e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800fe20:	490f      	ldr	r1, [pc, #60]	; (800fe60 <SendGSMCodeL+0xc4>)
 800fe22:	4b10      	ldr	r3, [pc, #64]	; (800fe64 <SendGSMCodeL+0xc8>)
 800fe24:	f007 f8f8 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800fe28:	4b0f      	ldr	r3, [pc, #60]	; (800fe68 <SendGSMCodeL+0xcc>)
 800fe2a:	a901      	add	r1, sp, #4
 800fe2c:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800fe2e:	2202      	movs	r2, #2
 800fe30:	230a      	movs	r3, #10
 800fe32:	4640      	mov	r0, r8
 800fe34:	f007 f8f0 	bl	8017018 <HAL_UART_Transmit>
}
 800fe38:	e7d3      	b.n	800fde2 <SendGSMCodeL+0x46>
 800fe3a:	46c0      	nop			; (mov r8, r8)
 800fe3c:	20004940 	.word	0x20004940
 800fe40:	200048ac 	.word	0x200048ac
 800fe44:	20000540 	.word	0x20000540
 800fe48:	000003de 	.word	0x000003de
 800fe4c:	20000544 	.word	0x20000544
 800fe50:	20001d80 	.word	0x20001d80
 800fe54:	200000c4 	.word	0x200000c4
 800fe58:	0801d054 	.word	0x0801d054
 800fe5c:	200049d4 	.word	0x200049d4
 800fe60:	0801d034 	.word	0x0801d034
 800fe64:	00001388 	.word	0x00001388
 800fe68:	00000a0d 	.word	0x00000a0d

0800fe6c <SendGSMData>:

void SendGSMData(const char data[])
{
 800fe6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fe6e:	270c      	movs	r7, #12
 800fe70:	4b18      	ldr	r3, [pc, #96]	; (800fed4 <SendGSMData+0x68>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fe72:	4c19      	ldr	r4, [pc, #100]	; (800fed8 <SendGSMData+0x6c>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fe74:	681b      	ldr	r3, [r3, #0]
{
 800fe76:	b083      	sub	sp, #12
 800fe78:	0005      	movs	r5, r0
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fe7a:	621f      	str	r7, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	0020      	movs	r0, r4
 800fe80:	4916      	ldr	r1, [pc, #88]	; (800fedc <SendGSMData+0x70>)
 800fe82:	f007 fa97 	bl	80173b4 <HAL_UART_Receive_DMA>

	memset(GSMData, 0, 990);
 800fe86:	2100      	movs	r1, #0
 800fe88:	4a15      	ldr	r2, [pc, #84]	; (800fee0 <SendGSMData+0x74>)
 800fe8a:	4816      	ldr	r0, [pc, #88]	; (800fee4 <SendGSMData+0x78>)
 800fe8c:	f009 fad4 	bl	8019438 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 800fe90:	466b      	mov	r3, sp
 800fe92:	2202      	movs	r2, #2
 800fe94:	2100      	movs	r1, #0
 800fe96:	1d58      	adds	r0, r3, #5
 800fe98:	f009 face 	bl	8019438 <memset>
	end[0] = 0x1A;
 800fe9c:	231a      	movs	r3, #26
	memset(end, 0, 3);
 800fe9e:	ae01      	add	r6, sp, #4
	end[0] = 0x1A;
 800fea0:	7033      	strb	r3, [r6, #0]
	//memset(_out,0,strlen(_out));
}

static void GSM_TxL(const char _out[]){

	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fea2:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 800fea4:	0028      	movs	r0, r5
	  __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800fea6:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 5000);
 800fea8:	f7fc fd2a 	bl	800c900 <strlen>
 800feac:	0029      	movs	r1, r5
 800feae:	b282      	uxth	r2, r0
 800feb0:	4b0d      	ldr	r3, [pc, #52]	; (800fee8 <SendGSMData+0x7c>)
 800feb2:	0020      	movs	r0, r4
 800feb4:	f007 f8b0 	bl	8017018 <HAL_UART_Transmit>
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800feb8:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800feba:	0030      	movs	r0, r6
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800febc:	621f      	str	r7, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800febe:	f7fc fd1f 	bl	800c900 <strlen>
 800fec2:	2396      	movs	r3, #150	; 0x96
 800fec4:	b282      	uxth	r2, r0
 800fec6:	0031      	movs	r1, r6
 800fec8:	0020      	movs	r0, r4
 800feca:	005b      	lsls	r3, r3, #1
 800fecc:	f007 f8a4 	bl	8017018 <HAL_UART_Transmit>
	// strcat(GSMTXD,(char*)end);
	GSM_TxL(data);
	GSM_Tx((char *)end);

	// return GSM_Rx();
}
 800fed0:	b003      	add	sp, #12
 800fed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed4:	20004940 	.word	0x20004940
 800fed8:	200048ac 	.word	0x200048ac
 800fedc:	20000540 	.word	0x20000540
 800fee0:	000003de 	.word	0x000003de
 800fee4:	20000544 	.word	0x20000544
 800fee8:	00001388 	.word	0x00001388

0800feec <EndTransfer>:

void EndTransfer()
{
 800feec:	b570      	push	{r4, r5, r6, lr}

	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800feee:	260c      	movs	r6, #12
 800fef0:	4b12      	ldr	r3, [pc, #72]	; (800ff3c <EndTransfer+0x50>)
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fef2:	4c13      	ldr	r4, [pc, #76]	; (800ff40 <EndTransfer+0x54>)
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fef4:	681b      	ldr	r3, [r3, #0]
{
 800fef6:	b082      	sub	sp, #8
	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF | UART_CLEAR_OREF);
 800fef8:	621e      	str	r6, [r3, #32]
	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 800fefa:	2201      	movs	r2, #1
 800fefc:	0020      	movs	r0, r4
 800fefe:	4911      	ldr	r1, [pc, #68]	; (800ff44 <EndTransfer+0x58>)
 800ff00:	f007 fa58 	bl	80173b4 <HAL_UART_Receive_DMA>
	memset(GSMData, 0, 990);
 800ff04:	2100      	movs	r1, #0
 800ff06:	4a10      	ldr	r2, [pc, #64]	; (800ff48 <EndTransfer+0x5c>)
 800ff08:	4810      	ldr	r0, [pc, #64]	; (800ff4c <EndTransfer+0x60>)
 800ff0a:	f009 fa95 	bl	8019438 <memset>
	uint8_t end[3];
	memset(end, 0, 3);
 800ff0e:	466b      	mov	r3, sp
 800ff10:	2202      	movs	r2, #2
 800ff12:	2100      	movs	r1, #0
 800ff14:	1d58      	adds	r0, r3, #5
 800ff16:	f009 fa8f 	bl	8019438 <memset>
	end[0] = 0x1A;
 800ff1a:	231a      	movs	r3, #26
	memset(end, 0, 3);
 800ff1c:	ad01      	add	r5, sp, #4
	end[0] = 0x1A;
 800ff1e:	702b      	strb	r3, [r5, #0]
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800ff20:	6823      	ldr	r3, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800ff22:	0028      	movs	r0, r5
	 __HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800ff24:	621e      	str	r6, [r3, #32]
		HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 300);
 800ff26:	f7fc fceb 	bl	800c900 <strlen>
 800ff2a:	2396      	movs	r3, #150	; 0x96
 800ff2c:	b282      	uxth	r2, r0
 800ff2e:	0029      	movs	r1, r5
 800ff30:	0020      	movs	r0, r4
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	f007 f870 	bl	8017018 <HAL_UART_Transmit>
	GSM_Tx((char *)end);
	// return GSM_Rx();
}
 800ff38:	b002      	add	sp, #8
 800ff3a:	bd70      	pop	{r4, r5, r6, pc}
 800ff3c:	20004940 	.word	0x20004940
 800ff40:	200048ac 	.word	0x200048ac
 800ff44:	20000540 	.word	0x20000540
 800ff48:	000003de 	.word	0x000003de
 800ff4c:	20000544 	.word	0x20000544

0800ff50 <waitForResponse>:
int waitForResponse(const char* expectedResponse, int timeout) {
	memset(GSMReply3, 0, 500);
 800ff50:	22fa      	movs	r2, #250	; 0xfa
int waitForResponse(const char* expectedResponse, int timeout) {
 800ff52:	b5f0      	push	{r4, r5, r6, r7, lr}
	memset(GSMReply3, 0, 500);
 800ff54:	0052      	lsls	r2, r2, #1
int waitForResponse(const char* expectedResponse, int timeout) {
 800ff56:	b083      	sub	sp, #12
 800ff58:	0006      	movs	r6, r0
 800ff5a:	000d      	movs	r5, r1
	memset(GSMReply3, 0, 500);
 800ff5c:	481f      	ldr	r0, [pc, #124]	; (800ffdc <waitForResponse+0x8c>)
 800ff5e:	2100      	movs	r1, #0
 800ff60:	f009 fa6a 	bl	8019438 <memset>
    uint16_t rxBufferIndex = 0;
    int ret=0;

	int stT = HAL_GetTick();
 800ff64:	f003 ff5e 	bl	8013e24 <HAL_GetTick>
 800ff68:	4f1d      	ldr	r7, [pc, #116]	; (800ffe0 <waitForResponse+0x90>)
 800ff6a:	0004      	movs	r4, r0
	while (((HAL_GetTick() - stT) <= timeout)){
 800ff6c:	e005      	b.n	800ff7a <waitForResponse+0x2a>
		//HAL_UART_Receive(&huart1, (uint8_t*)(GSMReply3 + rxBufferIndex), 1, HAL_MAX_DELAY);
        //rxBufferIndex++;
		//strlen(GSMData)
        if (strstr(GSMData, expectedResponse) != NULL) {
 800ff6e:	0031      	movs	r1, r6
 800ff70:	0038      	movs	r0, r7
 800ff72:	f009 fb11 	bl	8019598 <strstr>
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d12d      	bne.n	800ffd6 <waitForResponse+0x86>
	while (((HAL_GetTick() - stT) <= timeout)){
 800ff7a:	f003 ff53 	bl	8013e24 <HAL_GetTick>
 800ff7e:	1b00      	subs	r0, r0, r4
 800ff80:	42a8      	cmp	r0, r5
 800ff82:	d9f4      	bls.n	800ff6e <waitForResponse+0x1e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800ff84:	260c      	movs	r6, #12
 800ff86:	4c17      	ldr	r4, [pc, #92]	; (800ffe4 <waitForResponse+0x94>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800ff88:	2216      	movs	r2, #22
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800ff8a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800ff8c:	4916      	ldr	r1, [pc, #88]	; (800ffe8 <waitForResponse+0x98>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800ff8e:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800ff90:	0020      	movs	r0, r4
 800ff92:	4b16      	ldr	r3, [pc, #88]	; (800ffec <waitForResponse+0x9c>)
 800ff94:	f007 f840 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800ff98:	466b      	mov	r3, sp
 800ff9a:	4d15      	ldr	r5, [pc, #84]	; (800fff0 <waitForResponse+0xa0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800ff9c:	2202      	movs	r2, #2
 800ff9e:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 800ffa0:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800ffa2:	0020      	movs	r0, r4
 800ffa4:	230a      	movs	r3, #10
 800ffa6:	f007 f837 	bl	8017018 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800ffaa:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800ffac:	0038      	movs	r0, r7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 800ffae:	621e      	str	r6, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 800ffb0:	f7fc fca6 	bl	800c900 <strlen>
 800ffb4:	0039      	movs	r1, r7
 800ffb6:	b282      	uxth	r2, r0
 800ffb8:	4b0c      	ldr	r3, [pc, #48]	; (800ffec <waitForResponse+0x9c>)
 800ffba:	0020      	movs	r0, r4
 800ffbc:	f007 f82c 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 800ffc0:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800ffc2:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 800ffc4:	809d      	strh	r5, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 800ffc6:	0020      	movs	r0, r4
 800ffc8:	230a      	movs	r3, #10
 800ffca:	a901      	add	r1, sp, #4
 800ffcc:	f007 f824 	bl	8017018 <HAL_UART_Transmit>
    int ret=0;
 800ffd0:	2000      	movs	r0, #0
        }
    }
	if(ret==0){Debug_Tx("gsm no reply timeout>>");Debug_Tx(GSMData);}
	return ret;

}
 800ffd2:	b003      	add	sp, #12
 800ffd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        	ret=1;
 800ffd6:	2001      	movs	r0, #1
	return ret;
 800ffd8:	e7fb      	b.n	800ffd2 <waitForResponse+0x82>
 800ffda:	46c0      	nop			; (mov r8, r8)
 800ffdc:	20001b88 	.word	0x20001b88
 800ffe0:	20000544 	.word	0x20000544
 800ffe4:	200049d4 	.word	0x200049d4
 800ffe8:	0801d160 	.word	0x0801d160
 800ffec:	00001388 	.word	0x00001388
 800fff0:	00000a0d 	.word	0x00000a0d

0800fff4 <GetGSMReply>:

char *GetGSMReply(int extra, const char *find, int gap, const char *LineEnd, const char *ErrorMsg, int timeout, const char *finChar)
{
 800fff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fff6:	46de      	mov	lr, fp
 800fff8:	464e      	mov	r6, r9
 800fffa:	4645      	mov	r5, r8
 800fffc:	4657      	mov	r7, sl
 800fffe:	b5e0      	push	{r5, r6, r7, lr}
 8010000:	b087      	sub	sp, #28
 8010002:	469a      	mov	sl, r3
 8010004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010006:	9202      	str	r2, [sp, #8]
 8010008:	4699      	mov	r9, r3
	memset(GSMReply, 0, 100);
 801000a:	4b78      	ldr	r3, [pc, #480]	; (80101ec <GetGSMReply+0x1f8>)
 801000c:	2264      	movs	r2, #100	; 0x64
 801000e:	0018      	movs	r0, r3
{
 8010010:	468b      	mov	fp, r1
	memset(GSMReply, 0, 100);
 8010012:	2100      	movs	r1, #0
 8010014:	9303      	str	r3, [sp, #12]
 8010016:	f009 fa0f 	bl	8019438 <memset>
	memset(GSMInData, 0, 1000);
 801001a:	22fa      	movs	r2, #250	; 0xfa
 801001c:	4d74      	ldr	r5, [pc, #464]	; (80101f0 <GetGSMReply+0x1fc>)
 801001e:	2100      	movs	r1, #0
 8010020:	0092      	lsls	r2, r2, #2
 8010022:	0028      	movs	r0, r5
 8010024:	f009 fa08 	bl	8019438 <memset>
	int stT = HAL_GetTick();
 8010028:	f003 fefc 	bl	8013e24 <HAL_GetTick>
 801002c:	4680      	mov	r8, r0
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801002e:	4b71      	ldr	r3, [pc, #452]	; (80101f4 <GetGSMReply+0x200>)
	while (((HAL_GetTick() - stT) <= timeout))
	{
		HAL_Delay(70);
		if (strlen(GSMData) > 0)
 8010030:	4e71      	ldr	r6, [pc, #452]	; (80101f8 <GetGSMReply+0x204>)
			}
			gsmER = 0;
		}
		else
		{
			gsmER++;
 8010032:	4c72      	ldr	r4, [pc, #456]	; (80101fc <GetGSMReply+0x208>)
 8010034:	9301      	str	r3, [sp, #4]
	while (((HAL_GetTick() - stT) <= timeout))
 8010036:	f003 fef5 	bl	8013e24 <HAL_GetTick>
 801003a:	4643      	mov	r3, r8
 801003c:	1ac0      	subs	r0, r0, r3
 801003e:	4581      	cmp	r9, r0
 8010040:	d31f      	bcc.n	8010082 <GetGSMReply+0x8e>
		HAL_Delay(70);
 8010042:	2046      	movs	r0, #70	; 0x46
 8010044:	f003 fef4 	bl	8013e30 <HAL_Delay>
		if (strlen(GSMData) > 0)
 8010048:	7837      	ldrb	r7, [r6, #0]
 801004a:	2f00      	cmp	r7, #0
 801004c:	d128      	bne.n	80100a0 <GetGSMReply+0xac>
			gsmER++;
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	3301      	adds	r3, #1
 8010052:	6023      	str	r3, [r4, #0]
			if (gsmER > 9)
 8010054:	2b09      	cmp	r3, #9
 8010056:	ddee      	ble.n	8010036 <GetGSMReply+0x42>
			{
				RestartGSM();
 8010058:	f7ff fdf4 	bl	800fc44 <RestartGSM>
 801005c:	4b68      	ldr	r3, [pc, #416]	; (8010200 <GetGSMReply+0x20c>)
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801005e:	4869      	ldr	r0, [pc, #420]	; (8010204 <GetGSMReply+0x210>)
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010060:	681a      	ldr	r2, [r3, #0]
 8010062:	230c      	movs	r3, #12
 8010064:	9901      	ldr	r1, [sp, #4]
 8010066:	6213      	str	r3, [r2, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010068:	6802      	ldr	r2, [r0, #0]
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801006a:	700f      	strb	r7, [r1, #0]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801006c:	6213      	str	r3, [r2, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 801006e:	2201      	movs	r2, #1
 8010070:	f007 f9a0 	bl	80173b4 <HAL_UART_Receive_DMA>
				restartGSMuart();
				gsmER = 0;
 8010074:	6027      	str	r7, [r4, #0]
	while (((HAL_GetTick() - stT) <= timeout))
 8010076:	f003 fed5 	bl	8013e24 <HAL_GetTick>
 801007a:	4643      	mov	r3, r8
 801007c:	1ac0      	subs	r0, r0, r3
 801007e:	4581      	cmp	r9, r0
 8010080:	d2df      	bcs.n	8010042 <GetGSMReply+0x4e>
			}
		}
	}

	// Debug_Tx(GSMInData);
	if (strlen(GSMReply) < 1)
 8010082:	9b03      	ldr	r3, [sp, #12]
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d05c      	beq.n	8010144 <GetGSMReply+0x150>
		// Debug_Tx(GSMData);
		// Debug_Tx("****");
		// Debug_Tx(GSMReply);
		// Debug_Tx("____returnOK_____");
	}
	HAL_Delay(100);
 801008a:	2064      	movs	r0, #100	; 0x64
 801008c:	f003 fed0 	bl	8013e30 <HAL_Delay>
	// if (strlen(GSMData)<1)restartGSMuart();
	return GSMReply;
}
 8010090:	9803      	ldr	r0, [sp, #12]
 8010092:	b007      	add	sp, #28
 8010094:	bcf0      	pop	{r4, r5, r6, r7}
 8010096:	46bb      	mov	fp, r7
 8010098:	46b2      	mov	sl, r6
 801009a:	46a9      	mov	r9, r5
 801009c:	46a0      	mov	r8, r4
 801009e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(GSMInData, GSMData);
 80100a0:	0031      	movs	r1, r6
 80100a2:	0028      	movs	r0, r5
 80100a4:	f009 fb29 	bl	80196fa <strcpy>
			char *pq = strstr(GSMInData, finChar);
 80100a8:	0028      	movs	r0, r5
 80100aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80100ac:	f009 fa74 	bl	8019598 <strstr>
			if ((pq != NULL))
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d025      	beq.n	8010100 <GetGSMReply+0x10c>
				if ((strlen(find) < 1))
 80100b4:	465b      	mov	r3, fp
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d100      	bne.n	80100be <GetGSMReply+0xca>
 80100bc:	e08c      	b.n	80101d8 <GetGSMReply+0x1e4>
				char *p = strstr(GSMInData, find);
 80100be:	4659      	mov	r1, fp
 80100c0:	0028      	movs	r0, r5
 80100c2:	f009 fa69 	bl	8019598 <strstr>
				if ((strlen(LineEnd) < 1))
 80100c6:	4653      	mov	r3, sl
 80100c8:	781b      	ldrb	r3, [r3, #0]
				char *p = strstr(GSMInData, find);
 80100ca:	0007      	movs	r7, r0
				if ((strlen(LineEnd) < 1))
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d100      	bne.n	80100d2 <GetGSMReply+0xde>
 80100d0:	e087      	b.n	80101e2 <GetGSMReply+0x1ee>
					if ((strstr(GSMInData, LineEnd) != NULL))
 80100d2:	4651      	mov	r1, sl
 80100d4:	0028      	movs	r0, r5
 80100d6:	f009 fa5f 	bl	8019598 <strstr>
 80100da:	2800      	cmp	r0, #0
 80100dc:	d00c      	beq.n	80100f8 <GetGSMReply+0x104>
						if ((strlen(p + gap) > strlen(LineEnd)))
 80100de:	9b02      	ldr	r3, [sp, #8]
 80100e0:	469c      	mov	ip, r3
 80100e2:	4467      	add	r7, ip
 80100e4:	0038      	movs	r0, r7
 80100e6:	f7fc fc0b 	bl	800c900 <strlen>
 80100ea:	9000      	str	r0, [sp, #0]
 80100ec:	4650      	mov	r0, sl
 80100ee:	f7fc fc07 	bl	800c900 <strlen>
 80100f2:	9b00      	ldr	r3, [sp, #0]
 80100f4:	4283      	cmp	r3, r0
 80100f6:	d85f      	bhi.n	80101b8 <GetGSMReply+0x1c4>
			gsmER = 0;
 80100f8:	2200      	movs	r2, #0
 80100fa:	4b40      	ldr	r3, [pc, #256]	; (80101fc <GetGSMReply+0x208>)
 80100fc:	601a      	str	r2, [r3, #0]
 80100fe:	e79a      	b.n	8010036 <GetGSMReply+0x42>
				if ((strstr(GSMInData, "ERROR") != NULL) || (strstr(GSMInData, "FAIL") != NULL))
 8010100:	0028      	movs	r0, r5
 8010102:	4941      	ldr	r1, [pc, #260]	; (8010208 <GetGSMReply+0x214>)
 8010104:	f009 fa48 	bl	8019598 <strstr>
 8010108:	2800      	cmp	r0, #0
 801010a:	d105      	bne.n	8010118 <GetGSMReply+0x124>
 801010c:	0028      	movs	r0, r5
 801010e:	493f      	ldr	r1, [pc, #252]	; (801020c <GetGSMReply+0x218>)
 8010110:	f009 fa42 	bl	8019598 <strstr>
 8010114:	2800      	cmp	r0, #0
 8010116:	d0ef      	beq.n	80100f8 <GetGSMReply+0x104>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010118:	220c      	movs	r2, #12
 801011a:	4c3d      	ldr	r4, [pc, #244]	; (8010210 <GetGSMReply+0x21c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801011c:	493d      	ldr	r1, [pc, #244]	; (8010214 <GetGSMReply+0x220>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801011e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010120:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010122:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010124:	4b3c      	ldr	r3, [pc, #240]	; (8010218 <GetGSMReply+0x224>)
 8010126:	3a03      	subs	r2, #3
 8010128:	f006 ff76 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 801012c:	4b3b      	ldr	r3, [pc, #236]	; (801021c <GetGSMReply+0x228>)
 801012e:	a905      	add	r1, sp, #20
 8010130:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010132:	2202      	movs	r2, #2
 8010134:	230a      	movs	r3, #10
 8010136:	0020      	movs	r0, r4
 8010138:	f006 ff6e 	bl	8017018 <HAL_UART_Transmit>
	if (strlen(GSMReply) < 1)
 801013c:	9b03      	ldr	r3, [sp, #12]
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d1a2      	bne.n	801008a <GetGSMReply+0x96>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010144:	270c      	movs	r7, #12
 8010146:	4c32      	ldr	r4, [pc, #200]	; (8010210 <GetGSMReply+0x21c>)
	char newline[2] = "\r\n";
 8010148:	4e34      	ldr	r6, [pc, #208]	; (801021c <GetGSMReply+0x228>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801014a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801014c:	2204      	movs	r2, #4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801014e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010150:	0020      	movs	r0, r4
 8010152:	4933      	ldr	r1, [pc, #204]	; (8010220 <GetGSMReply+0x22c>)
 8010154:	4b30      	ldr	r3, [pc, #192]	; (8010218 <GetGSMReply+0x224>)
 8010156:	f006 ff5f 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 801015a:	ab04      	add	r3, sp, #16
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 801015c:	a905      	add	r1, sp, #20
 801015e:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8010160:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010162:	0020      	movs	r0, r4
 8010164:	230a      	movs	r3, #10
 8010166:	f006 ff57 	bl	8017018 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801016a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801016c:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801016e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010170:	f7fc fbc6 	bl	800c900 <strlen>
 8010174:	0029      	movs	r1, r5
 8010176:	b282      	uxth	r2, r0
 8010178:	4b27      	ldr	r3, [pc, #156]	; (8010218 <GetGSMReply+0x224>)
 801017a:	0020      	movs	r0, r4
 801017c:	f006 ff4c 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010180:	ab04      	add	r3, sp, #16
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010182:	a905      	add	r1, sp, #20
 8010184:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8010186:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010188:	0020      	movs	r0, r4
 801018a:	230a      	movs	r3, #10
 801018c:	f006 ff44 	bl	8017018 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010190:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010192:	9810      	ldr	r0, [sp, #64]	; 0x40
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010194:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010196:	f7fc fbb3 	bl	800c900 <strlen>
 801019a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801019c:	b282      	uxth	r2, r0
 801019e:	4b1e      	ldr	r3, [pc, #120]	; (8010218 <GetGSMReply+0x224>)
 80101a0:	0020      	movs	r0, r4
 80101a2:	f006 ff39 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80101a6:	ab04      	add	r3, sp, #16
 80101a8:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80101aa:	2202      	movs	r2, #2
 80101ac:	230a      	movs	r3, #10
 80101ae:	0020      	movs	r0, r4
 80101b0:	a905      	add	r1, sp, #20
 80101b2:	f006 ff31 	bl	8017018 <HAL_UART_Transmit>
}
 80101b6:	e768      	b.n	801008a <GetGSMReply+0x96>
							char *p1 = strtok_r(p + gap, LineEnd, NULL); // strtok(GSMData, "\n");strtok(p+gap, );
 80101b8:	0038      	movs	r0, r7
 80101ba:	2200      	movs	r2, #0
 80101bc:	4651      	mov	r1, sl
 80101be:	f009 f9e6 	bl	801958e <strtok_r>
 80101c2:	0007      	movs	r7, r0
							if (strlen(p1) < 88)
 80101c4:	f7fc fb9c 	bl	800c900 <strlen>
 80101c8:	2857      	cmp	r0, #87	; 0x57
 80101ca:	d895      	bhi.n	80100f8 <GetGSMReply+0x104>
								strcpy(GSMReply, p1);
 80101cc:	1c42      	adds	r2, r0, #1
 80101ce:	0039      	movs	r1, r7
 80101d0:	9803      	ldr	r0, [sp, #12]
 80101d2:	f009 faa5 	bl	8019720 <memcpy>
								break;
 80101d6:	e754      	b.n	8010082 <GetGSMReply+0x8e>
					strcpy(GSMReply, pq);
 80101d8:	0001      	movs	r1, r0
 80101da:	9803      	ldr	r0, [sp, #12]
 80101dc:	f009 fa8d 	bl	80196fa <strcpy>
					break;
 80101e0:	e74f      	b.n	8010082 <GetGSMReply+0x8e>
					strcpy(GSMReply, p);
 80101e2:	0001      	movs	r1, r0
 80101e4:	9803      	ldr	r0, [sp, #12]
 80101e6:	f009 fa88 	bl	80196fa <strcpy>
					break;
 80101ea:	e74a      	b.n	8010082 <GetGSMReply+0x8e>
 80101ec:	20001b24 	.word	0x20001b24
 80101f0:	2000173c 	.word	0x2000173c
 80101f4:	20000540 	.word	0x20000540
 80101f8:	20000544 	.word	0x20000544
 80101fc:	20004580 	.word	0x20004580
 8010200:	20004940 	.word	0x20004940
 8010204:	200048ac 	.word	0x200048ac
 8010208:	0801d178 	.word	0x0801d178
 801020c:	0801d180 	.word	0x0801d180
 8010210:	200049d4 	.word	0x200049d4
 8010214:	0801d188 	.word	0x0801d188
 8010218:	00001388 	.word	0x00001388
 801021c:	00000a0d 	.word	0x00000a0d
 8010220:	0801d194 	.word	0x0801d194

08010224 <GSMSigQuality>:

int GSMSigQuality()
{
 8010224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010226:	46c6      	mov	lr, r8
	GSMSignal = 0;
 8010228:	2300      	movs	r3, #0
{
 801022a:	b500      	push	{lr}
	GSMSignal = 0;
 801022c:	4e46      	ldr	r6, [pc, #280]	; (8010348 <GSMSigQuality+0x124>)
{
 801022e:	b086      	sub	sp, #24
	SendGSMCode(" AT+CSQ");
 8010230:	4846      	ldr	r0, [pc, #280]	; (801034c <GSMSigQuality+0x128>)
	GSMSignal = 0;
 8010232:	6033      	str	r3, [r6, #0]
	SendGSMCode(" AT+CSQ");
 8010234:	f7ff fd4a 	bl	800fccc <SendGSMCode>
	HAL_Delay(100);
 8010238:	2064      	movs	r0, #100	; 0x64
 801023a:	f003 fdf9 	bl	8013e30 <HAL_Delay>
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 801023e:	4a44      	ldr	r2, [pc, #272]	; (8010350 <GSMSigQuality+0x12c>)
 8010240:	4b44      	ldr	r3, [pc, #272]	; (8010354 <GSMSigQuality+0x130>)
 8010242:	9202      	str	r2, [sp, #8]
 8010244:	4a44      	ldr	r2, [pc, #272]	; (8010358 <GSMSigQuality+0x134>)
 8010246:	4945      	ldr	r1, [pc, #276]	; (801035c <GSMSigQuality+0x138>)
 8010248:	6812      	ldr	r2, [r2, #0]
 801024a:	2000      	movs	r0, #0
 801024c:	9201      	str	r2, [sp, #4]
 801024e:	4a44      	ldr	r2, [pc, #272]	; (8010360 <GSMSigQuality+0x13c>)
 8010250:	9200      	str	r2, [sp, #0]
 8010252:	2205      	movs	r2, #5
 8010254:	f7ff fece 	bl	800fff4 <GetGSMReply>
 8010258:	2100      	movs	r1, #0
 801025a:	f008 f85f 	bl	801831c <strtod>
 801025e:	f7ff fb6b 	bl	800f938 <__aeabi_d2f>

	if (GSMSignal > 5)
 8010262:	4940      	ldr	r1, [pc, #256]	; (8010364 <GSMSigQuality+0x140>)
	GSMSignal = strtod(GetGSMReply(0, "+CSQ:", 5, ",", "Error: AT+CSQ GSM Sig Quality", gpsto_dev, ",0"), NULL);
 8010264:	6030      	str	r0, [r6, #0]
	if (GSMSignal > 5)
 8010266:	f7fc fd41 	bl	800ccec <__aeabi_fcmpgt>
 801026a:	1e04      	subs	r4, r0, #0
 801026c:	d020      	beq.n	80102b0 <GSMSigQuality+0x8c>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_SET);
 801026e:	2201      	movs	r2, #1
 8010270:	2102      	movs	r1, #2
 8010272:	483d      	ldr	r0, [pc, #244]	; (8010368 <GSMSigQuality+0x144>)
 8010274:	f004 fca4 	bl	8014bc0 <HAL_GPIO_WritePin>
	{
		SET_LED_NET(1);
		ServerConnected = 1;
 8010278:	2201      	movs	r2, #1
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801027a:	4c3c      	ldr	r4, [pc, #240]	; (801036c <GSMSigQuality+0x148>)
 801027c:	4b3c      	ldr	r3, [pc, #240]	; (8010370 <GSMSigQuality+0x14c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801027e:	493d      	ldr	r1, [pc, #244]	; (8010374 <GSMSigQuality+0x150>)
 8010280:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010282:	6823      	ldr	r3, [r4, #0]
 8010284:	320b      	adds	r2, #11
 8010286:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010288:	0020      	movs	r0, r4
 801028a:	4b3b      	ldr	r3, [pc, #236]	; (8010378 <GSMSigQuality+0x154>)
 801028c:	3a04      	subs	r2, #4
 801028e:	f006 fec3 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010292:	4b3a      	ldr	r3, [pc, #232]	; (801037c <GSMSigQuality+0x158>)
 8010294:	a905      	add	r1, sp, #20
 8010296:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010298:	2202      	movs	r2, #2
 801029a:	230a      	movs	r3, #10
 801029c:	0020      	movs	r0, r4
 801029e:	f006 febb 	bl	8017018 <HAL_UART_Transmit>
			RestartGSM();
		restartGSMuart();
		Debug_Tx("GSMTRstarted");
		SET_LED_NET(0);
	}
	return (GSMSignal); // must be higher than 5 ,range 0-33
 80102a2:	6830      	ldr	r0, [r6, #0]
 80102a4:	f7fd fbfe 	bl	800daa4 <__aeabi_f2iz>
}
 80102a8:	b006      	add	sp, #24
 80102aa:	bc80      	pop	{r7}
 80102ac:	46b8      	mov	r8, r7
 80102ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80102b0:	270c      	movs	r7, #12
 80102b2:	4d2e      	ldr	r5, [pc, #184]	; (801036c <GSMSigQuality+0x148>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80102b4:	2207      	movs	r2, #7
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80102b6:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80102b8:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80102ba:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80102bc:	4930      	ldr	r1, [pc, #192]	; (8010380 <GSMSigQuality+0x15c>)
 80102be:	4b2e      	ldr	r3, [pc, #184]	; (8010378 <GSMSigQuality+0x154>)
 80102c0:	f006 feaa 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80102c4:	4b2d      	ldr	r3, [pc, #180]	; (801037c <GSMSigQuality+0x158>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80102c6:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 80102c8:	4698      	mov	r8, r3
 80102ca:	466b      	mov	r3, sp
 80102cc:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80102ce:	0028      	movs	r0, r5
	char newline[2] = "\r\n";
 80102d0:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80102d2:	230a      	movs	r3, #10
 80102d4:	2202      	movs	r2, #2
 80102d6:	f006 fe9f 	bl	8017018 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80102da:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80102dc:	220d      	movs	r2, #13
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80102de:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80102e0:	0028      	movs	r0, r5
 80102e2:	4928      	ldr	r1, [pc, #160]	; (8010384 <GSMSigQuality+0x160>)
 80102e4:	4b24      	ldr	r3, [pc, #144]	; (8010378 <GSMSigQuality+0x154>)
 80102e6:	f006 fe97 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80102ea:	466b      	mov	r3, sp
 80102ec:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80102ee:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 80102f0:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80102f2:	0028      	movs	r0, r5
 80102f4:	230a      	movs	r3, #10
 80102f6:	2202      	movs	r2, #2
 80102f8:	f006 fe8e 	bl	8017018 <HAL_UART_Transmit>
		gprsok = 0;
 80102fc:	4b22      	ldr	r3, [pc, #136]	; (8010388 <GSMSigQuality+0x164>)
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80102fe:	4823      	ldr	r0, [pc, #140]	; (801038c <GSMSigQuality+0x168>)
 8010300:	601c      	str	r4, [r3, #0]
		ServerConnected = 0;
 8010302:	4b1b      	ldr	r3, [pc, #108]	; (8010370 <GSMSigQuality+0x14c>)
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010304:	4922      	ldr	r1, [pc, #136]	; (8010390 <GSMSigQuality+0x16c>)
 8010306:	601c      	str	r4, [r3, #0]
 8010308:	4b22      	ldr	r3, [pc, #136]	; (8010394 <GSMSigQuality+0x170>)
 801030a:	700c      	strb	r4, [r1, #0]
 801030c:	681b      	ldr	r3, [r3, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 801030e:	2201      	movs	r2, #1
void restartGSMuart(){GSMBuff[0]=0;__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010310:	621f      	str	r7, [r3, #32]
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010312:	6803      	ldr	r3, [r0, #0]
 8010314:	621f      	str	r7, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8010316:	f007 f84d 	bl	80173b4 <HAL_UART_Receive_DMA>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801031a:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801031c:	220c      	movs	r2, #12
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801031e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010320:	0028      	movs	r0, r5
 8010322:	491d      	ldr	r1, [pc, #116]	; (8010398 <GSMSigQuality+0x174>)
 8010324:	4b14      	ldr	r3, [pc, #80]	; (8010378 <GSMSigQuality+0x154>)
 8010326:	f006 fe77 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 801032a:	466b      	mov	r3, sp
 801032c:	4642      	mov	r2, r8
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 801032e:	a905      	add	r1, sp, #20
	char newline[2] = "\r\n";
 8010330:	829a      	strh	r2, [r3, #20]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010332:	0028      	movs	r0, r5
 8010334:	230a      	movs	r3, #10
 8010336:	2202      	movs	r2, #2
 8010338:	f006 fe6e 	bl	8017018 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(DO_LED_NET_GPIO_Port, DO_LED_NET_Pin, GPIO_PIN_RESET);
 801033c:	2200      	movs	r2, #0
 801033e:	2102      	movs	r1, #2
 8010340:	4809      	ldr	r0, [pc, #36]	; (8010368 <GSMSigQuality+0x144>)
 8010342:	f004 fc3d 	bl	8014bc0 <HAL_GPIO_WritePin>
 8010346:	e7ac      	b.n	80102a2 <GSMSigQuality+0x7e>
 8010348:	20001d7c 	.word	0x20001d7c
 801034c:	0801d19c 	.word	0x0801d19c
 8010350:	0801d1b0 	.word	0x0801d1b0
 8010354:	0801d1a4 	.word	0x0801d1a4
 8010358:	200000c8 	.word	0x200000c8
 801035c:	0801d1a8 	.word	0x0801d1a8
 8010360:	0801d1b4 	.word	0x0801d1b4
 8010364:	40a00000 	.word	0x40a00000
 8010368:	50000c00 	.word	0x50000c00
 801036c:	200049d4 	.word	0x200049d4
 8010370:	20003f78 	.word	0x20003f78
 8010374:	0801d1d4 	.word	0x0801d1d4
 8010378:	00001388 	.word	0x00001388
 801037c:	00000a0d 	.word	0x00000a0d
 8010380:	0801d1e0 	.word	0x0801d1e0
 8010384:	0801d1e8 	.word	0x0801d1e8
 8010388:	2000414c 	.word	0x2000414c
 801038c:	200048ac 	.word	0x200048ac
 8010390:	20000540 	.word	0x20000540
 8010394:	20004940 	.word	0x20004940
 8010398:	0801d1f8 	.word	0x0801d1f8

0801039c <GSMIMEI>:

	return (0);
}

char *GSMIMEI()
{
 801039c:	b500      	push	{lr}
	SendGSMCode(" AT+QGSN");
 801039e:	4809      	ldr	r0, [pc, #36]	; (80103c4 <GSMIMEI+0x28>)
{
 80103a0:	b085      	sub	sp, #20
	SendGSMCode(" AT+QGSN");
 80103a2:	f7ff fc93 	bl	800fccc <SendGSMCode>
	return (GetGSMReply(0, "+QGSN:", 8, "\"", "Error: AT+QGSN IMEI Read error", gpsto_dev, "OK"));
 80103a6:	4a08      	ldr	r2, [pc, #32]	; (80103c8 <GSMIMEI+0x2c>)
 80103a8:	4b08      	ldr	r3, [pc, #32]	; (80103cc <GSMIMEI+0x30>)
 80103aa:	9202      	str	r2, [sp, #8]
 80103ac:	4a08      	ldr	r2, [pc, #32]	; (80103d0 <GSMIMEI+0x34>)
 80103ae:	4909      	ldr	r1, [pc, #36]	; (80103d4 <GSMIMEI+0x38>)
 80103b0:	6812      	ldr	r2, [r2, #0]
 80103b2:	2000      	movs	r0, #0
 80103b4:	9201      	str	r2, [sp, #4]
 80103b6:	4a08      	ldr	r2, [pc, #32]	; (80103d8 <GSMIMEI+0x3c>)
 80103b8:	9200      	str	r2, [sp, #0]
 80103ba:	2208      	movs	r2, #8
 80103bc:	f7ff fe1a 	bl	800fff4 <GetGSMReply>
}
 80103c0:	b005      	add	sp, #20
 80103c2:	bd00      	pop	{pc}
 80103c4:	0801d244 	.word	0x0801d244
 80103c8:	0801d5e4 	.word	0x0801d5e4
 80103cc:	0801d214 	.word	0x0801d214
 80103d0:	200000c8 	.word	0x200000c8
 80103d4:	0801d250 	.word	0x0801d250
 80103d8:	0801d258 	.word	0x0801d258

080103dc <StopTCPConnection>:
	HAL_Delay(500);
}
void StopTCPConnection()
{
	int ck = 1;
	gprsok = 0;
 80103dc:	2300      	movs	r3, #0
{
 80103de:	b510      	push	{r4, lr}
	gprsok = 0;
 80103e0:	4c0f      	ldr	r4, [pc, #60]	; (8010420 <StopTCPConnection+0x44>)
{
 80103e2:	b084      	sub	sp, #16
	while ((ck > 0) && (gprsok < 1))
	{
		ck = ck - 1;
		if (strlen(ip) > 4)
 80103e4:	480f      	ldr	r0, [pc, #60]	; (8010424 <StopTCPConnection+0x48>)
	gprsok = 0;
 80103e6:	6023      	str	r3, [r4, #0]
		if (strlen(ip) > 4)
 80103e8:	f7fc fa8a 	bl	800c900 <strlen>
 80103ec:	2804      	cmp	r0, #4
 80103ee:	d912      	bls.n	8010416 <StopTCPConnection+0x3a>
		{
			SendGSMCode(" AT+QICLOSE=0");
 80103f0:	480d      	ldr	r0, [pc, #52]	; (8010428 <StopTCPConnection+0x4c>)
 80103f2:	f7ff fc6b 	bl	800fccc <SendGSMCode>
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
 80103f6:	4b0d      	ldr	r3, [pc, #52]	; (801042c <StopTCPConnection+0x50>)
 80103f8:	490d      	ldr	r1, [pc, #52]	; (8010430 <StopTCPConnection+0x54>)
 80103fa:	9302      	str	r3, [sp, #8]
 80103fc:	4b0d      	ldr	r3, [pc, #52]	; (8010434 <StopTCPConnection+0x58>)
 80103fe:	2200      	movs	r2, #0
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	2005      	movs	r0, #5
 8010404:	9301      	str	r3, [sp, #4]
 8010406:	4b0c      	ldr	r3, [pc, #48]	; (8010438 <StopTCPConnection+0x5c>)
 8010408:	9300      	str	r3, [sp, #0]
 801040a:	000b      	movs	r3, r1
 801040c:	f7ff fdf2 	bl	800fff4 <GetGSMReply>
 8010410:	f7fc fa76 	bl	800c900 <strlen>
 8010414:	6020      	str	r0, [r4, #0]
		{
			SendGSMCode(" AT+QICLOSE=1");
			gprsok = strlen(GetGSMReply(5, "", 0, "", "Error: AT+QICLOSE TCP Send Close", gpsto_dev, "CLOSE OK"));
		}
	}
	ServerConnected = 0;
 8010416:	2200      	movs	r2, #0
 8010418:	4b08      	ldr	r3, [pc, #32]	; (801043c <StopTCPConnection+0x60>)
 801041a:	601a      	str	r2, [r3, #0]
}
 801041c:	b004      	add	sp, #16
 801041e:	bd10      	pop	{r4, pc}
 8010420:	2000414c 	.word	0x2000414c
 8010424:	200000d0 	.word	0x200000d0
 8010428:	0801d4d4 	.word	0x0801d4d4
 801042c:	0801d4e4 	.word	0x0801d4e4
 8010430:	0801d468 	.word	0x0801d468
 8010434:	200000c8 	.word	0x200000c8
 8010438:	0801d4f0 	.word	0x0801d4f0
 801043c:	20003f78 	.word	0x20003f78

08010440 <SendTCPdata>:
void SendTCPdata(char *data)
{
 8010440:	b5f0      	push	{r4, r5, r6, r7, lr}
	int ck = 1;
	if (gprsok > 0)
 8010442:	4d52      	ldr	r5, [pc, #328]	; (801058c <SendTCPdata+0x14c>)
{
 8010444:	0004      	movs	r4, r0
	if (gprsok > 0)
 8010446:	682b      	ldr	r3, [r5, #0]
{
 8010448:	b083      	sub	sp, #12
	if (gprsok > 0)
 801044a:	2b00      	cmp	r3, #0
 801044c:	dd46      	ble.n	80104dc <SendTCPdata+0x9c>
	{
		//Debug_Tx("GPRSOK");
		if (strlen(ip) > 4)
 801044e:	4850      	ldr	r0, [pc, #320]	; (8010590 <SendTCPdata+0x150>)
 8010450:	f7fc fa56 	bl	800c900 <strlen>
 8010454:	2804      	cmp	r0, #4
 8010456:	d801      	bhi.n	801045c <SendTCPdata+0x1c>
	else
	{
		Debug_Tx("DISCONNECTED FROM SERVER .resetting connection ");
		ResetTCP();
	}
}
 8010458:	b003      	add	sp, #12
 801045a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			gprsok = 0;
 801045c:	2600      	movs	r6, #0
				SendGSMCode(" AT+QISEND=0");
 801045e:	484d      	ldr	r0, [pc, #308]	; (8010594 <SendTCPdata+0x154>)
			gprsok = 0;
 8010460:	602e      	str	r6, [r5, #0]
				SendGSMCode(" AT+QISEND=0");
 8010462:	f7ff fc33 	bl	800fccc <SendGSMCode>
				gprsok = waitForResponse(">",1000);
 8010466:	21fa      	movs	r1, #250	; 0xfa
 8010468:	484b      	ldr	r0, [pc, #300]	; (8010598 <SendTCPdata+0x158>)
 801046a:	0089      	lsls	r1, r1, #2
 801046c:	f7ff fd70 	bl	800ff50 <waitForResponse>
 8010470:	6028      	str	r0, [r5, #0]
			if (gprsok > 0)
 8010472:	2800      	cmp	r0, #0
 8010474:	dd49      	ble.n	801050a <SendTCPdata+0xca>
					SendGSMData(data); // Debug_Tx(GSMData);
 8010476:	0020      	movs	r0, r4
				gprsok = 0;
 8010478:	602e      	str	r6, [r5, #0]
					SendGSMData(data); // Debug_Tx(GSMData);
 801047a:	f7ff fcf7 	bl	800fe6c <SendGSMData>
					gprsok = waitForResponse("SEND OK",1000);//strlen(GetGSMReply(0, "", 0, "", "Error: AT+QISEND Send TCP data", 10*gpsto_dev, "SEND OK"));
 801047e:	21fa      	movs	r1, #250	; 0xfa
 8010480:	4846      	ldr	r0, [pc, #280]	; (801059c <SendTCPdata+0x15c>)
 8010482:	0089      	lsls	r1, r1, #2
 8010484:	f7ff fd64 	bl	800ff50 <waitForResponse>
 8010488:	6028      	str	r0, [r5, #0]
				if (gprsok<1){//SendGSMData("    ");
 801048a:	2800      	cmp	r0, #0
 801048c:	dd69      	ble.n	8010562 <SendTCPdata+0x122>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801048e:	270c      	movs	r7, #12
 8010490:	4d43      	ldr	r5, [pc, #268]	; (80105a0 <SendTCPdata+0x160>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010492:	2208      	movs	r2, #8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010494:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010496:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010498:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801049a:	4942      	ldr	r1, [pc, #264]	; (80105a4 <SendTCPdata+0x164>)
 801049c:	4b42      	ldr	r3, [pc, #264]	; (80105a8 <SendTCPdata+0x168>)
 801049e:	f006 fdbb 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80104a2:	466b      	mov	r3, sp
 80104a4:	4e41      	ldr	r6, [pc, #260]	; (80105ac <SendTCPdata+0x16c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80104a6:	a901      	add	r1, sp, #4
 80104a8:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80104aa:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80104ac:	0028      	movs	r0, r5
 80104ae:	230a      	movs	r3, #10
 80104b0:	f006 fdb2 	bl	8017018 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80104b4:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80104b6:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80104b8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80104ba:	f7fc fa21 	bl	800c900 <strlen>
 80104be:	0021      	movs	r1, r4
 80104c0:	b282      	uxth	r2, r0
 80104c2:	4b39      	ldr	r3, [pc, #228]	; (80105a8 <SendTCPdata+0x168>)
 80104c4:	0028      	movs	r0, r5
 80104c6:	f006 fda7 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80104ca:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80104cc:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80104ce:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80104d0:	0028      	movs	r0, r5
 80104d2:	230a      	movs	r3, #10
 80104d4:	a901      	add	r1, sp, #4
 80104d6:	f006 fd9f 	bl	8017018 <HAL_UART_Transmit>
}
 80104da:	e7bd      	b.n	8010458 <SendTCPdata+0x18>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80104dc:	220c      	movs	r2, #12
 80104de:	4c30      	ldr	r4, [pc, #192]	; (80105a0 <SendTCPdata+0x160>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80104e0:	4933      	ldr	r1, [pc, #204]	; (80105b0 <SendTCPdata+0x170>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80104e2:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80104e4:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80104e6:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80104e8:	4b2f      	ldr	r3, [pc, #188]	; (80105a8 <SendTCPdata+0x168>)
 80104ea:	3223      	adds	r2, #35	; 0x23
 80104ec:	f006 fd94 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80104f0:	4b2e      	ldr	r3, [pc, #184]	; (80105ac <SendTCPdata+0x16c>)
 80104f2:	a901      	add	r1, sp, #4
 80104f4:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80104f6:	2202      	movs	r2, #2
 80104f8:	230a      	movs	r3, #10
 80104fa:	0020      	movs	r0, r4
 80104fc:	f006 fd8c 	bl	8017018 <HAL_UART_Transmit>
}

void ResetTCP()
{
	//EndTransfer();
	StopTCPConnection();
 8010500:	f7ff ff6c 	bl	80103dc <StopTCPConnection>
	StartTCPConnection();
 8010504:	f000 f85c 	bl	80105c0 <StartTCPConnection>
}
 8010508:	e7a6      	b.n	8010458 <SendTCPdata+0x18>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801050a:	270c      	movs	r7, #12
				SendGSMData("    ");
 801050c:	4829      	ldr	r0, [pc, #164]	; (80105b4 <SendTCPdata+0x174>)
 801050e:	f7ff fcad 	bl	800fe6c <SendGSMData>
 8010512:	4d23      	ldr	r5, [pc, #140]	; (80105a0 <SendTCPdata+0x160>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010514:	2227      	movs	r2, #39	; 0x27
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010516:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010518:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801051a:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801051c:	4926      	ldr	r1, [pc, #152]	; (80105b8 <SendTCPdata+0x178>)
 801051e:	4b22      	ldr	r3, [pc, #136]	; (80105a8 <SendTCPdata+0x168>)
 8010520:	f006 fd7a 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010524:	466b      	mov	r3, sp
 8010526:	4e21      	ldr	r6, [pc, #132]	; (80105ac <SendTCPdata+0x16c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010528:	a901      	add	r1, sp, #4
 801052a:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 801052c:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 801052e:	0028      	movs	r0, r5
 8010530:	230a      	movs	r3, #10
 8010532:	f006 fd71 	bl	8017018 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010536:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010538:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801053a:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801053c:	f7fc f9e0 	bl	800c900 <strlen>
 8010540:	0021      	movs	r1, r4
 8010542:	b282      	uxth	r2, r0
 8010544:	4b18      	ldr	r3, [pc, #96]	; (80105a8 <SendTCPdata+0x168>)
 8010546:	0028      	movs	r0, r5
 8010548:	f006 fd66 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 801054c:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 801054e:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8010550:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010552:	a901      	add	r1, sp, #4
 8010554:	230a      	movs	r3, #10
 8010556:	0028      	movs	r0, r5
 8010558:	f006 fd5e 	bl	8017018 <HAL_UART_Transmit>
				EndTransfer();
 801055c:	f7ff fcc6 	bl	800feec <EndTransfer>
 8010560:	e77a      	b.n	8010458 <SendTCPdata+0x18>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010562:	220c      	movs	r2, #12
 8010564:	4c0e      	ldr	r4, [pc, #56]	; (80105a0 <SendTCPdata+0x160>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010566:	4915      	ldr	r1, [pc, #84]	; (80105bc <SendTCPdata+0x17c>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010568:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801056a:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801056c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801056e:	4b0e      	ldr	r3, [pc, #56]	; (80105a8 <SendTCPdata+0x168>)
 8010570:	321b      	adds	r2, #27
 8010572:	f006 fd51 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010576:	4b0d      	ldr	r3, [pc, #52]	; (80105ac <SendTCPdata+0x16c>)
 8010578:	a901      	add	r1, sp, #4
 801057a:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 801057c:	2202      	movs	r2, #2
 801057e:	230a      	movs	r3, #10
 8010580:	0020      	movs	r0, r4
 8010582:	f006 fd49 	bl	8017018 <HAL_UART_Transmit>
				Debug_Tx("UNABLE TO11 SEND DATA STOPED CONNECTion");EndTransfer();
 8010586:	f7ff fcb1 	bl	800feec <EndTransfer>
 801058a:	e765      	b.n	8010458 <SendTCPdata+0x18>
 801058c:	2000414c 	.word	0x2000414c
 8010590:	200000d0 	.word	0x200000d0
 8010594:	0801d514 	.word	0x0801d514
 8010598:	0801d524 	.word	0x0801d524
 801059c:	0801d528 	.word	0x0801d528
 80105a0:	200049d4 	.word	0x200049d4
 80105a4:	0801d558 	.word	0x0801d558
 80105a8:	00001388 	.word	0x00001388
 80105ac:	00000a0d 	.word	0x00000a0d
 80105b0:	0801d594 	.word	0x0801d594
 80105b4:	0801d564 	.word	0x0801d564
 80105b8:	0801d56c 	.word	0x0801d56c
 80105bc:	0801d530 	.word	0x0801d530

080105c0 <StartTCPConnection>:
{
 80105c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105c2:	46c6      	mov	lr, r8
 80105c4:	b500      	push	{lr}
	if (strlen(ip) > 4)
 80105c6:	4d31      	ldr	r5, [pc, #196]	; (801068c <StartTCPConnection+0xcc>)
{
 80105c8:	b086      	sub	sp, #24
	if (strlen(ip) > 4)
 80105ca:	0028      	movs	r0, r5
 80105cc:	f7fc f998 	bl	800c900 <strlen>
 80105d0:	0004      	movs	r4, r0
 80105d2:	2804      	cmp	r0, #4
 80105d4:	d816      	bhi.n	8010604 <StartTCPConnection+0x44>
 80105d6:	4c2e      	ldr	r4, [pc, #184]	; (8010690 <StartTCPConnection+0xd0>)
	HAL_Delay(1500);
 80105d8:	482e      	ldr	r0, [pc, #184]	; (8010694 <StartTCPConnection+0xd4>)
 80105da:	f003 fc29 	bl	8013e30 <HAL_Delay>
	if (gprsok)
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d13f      	bne.n	8010664 <StartTCPConnection+0xa4>
		ServerConnected = 1;
 80105e4:	4a2c      	ldr	r2, [pc, #176]	; (8010698 <StartTCPConnection+0xd8>)
	HAL_Delay(1500);
 80105e6:	482b      	ldr	r0, [pc, #172]	; (8010694 <StartTCPConnection+0xd4>)
		ServerConnected = 1;
 80105e8:	6013      	str	r3, [r2, #0]
	HAL_Delay(1500);
 80105ea:	f003 fc21 	bl	8013e30 <HAL_Delay>
	SendTCPdata(data_LOGIN);
 80105ee:	482b      	ldr	r0, [pc, #172]	; (801069c <StartTCPConnection+0xdc>)
 80105f0:	f7ff ff26 	bl	8010440 <SendTCPdata>
	HAL_Delay(500);
 80105f4:	20fa      	movs	r0, #250	; 0xfa
 80105f6:	0040      	lsls	r0, r0, #1
 80105f8:	f003 fc1a 	bl	8013e30 <HAL_Delay>
}
 80105fc:	b006      	add	sp, #24
 80105fe:	bc80      	pop	{r7}
 8010600:	46b8      	mov	r8, r7
 8010602:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(GSMDataC, 0, 100);
 8010604:	4e26      	ldr	r6, [pc, #152]	; (80106a0 <StartTCPConnection+0xe0>)
 8010606:	2100      	movs	r1, #0
 8010608:	0037      	movs	r7, r6
 801060a:	3714      	adds	r7, #20
 801060c:	2250      	movs	r2, #80	; 0x50
 801060e:	0038      	movs	r0, r7
 8010610:	f008 ff12 	bl	8019438 <memset>
		strcpy(GSMDataC, (char *)" AT+QIOPEN=0,\"TCP\",\"");
 8010614:	0032      	movs	r2, r6
		memset(GSMDataC, 0, 100);
 8010616:	46b8      	mov	r8, r7
		strcpy(GSMDataC, (char *)" AT+QIOPEN=0,\"TCP\",\"");
 8010618:	4b22      	ldr	r3, [pc, #136]	; (80106a4 <StartTCPConnection+0xe4>)
 801061a:	cb83      	ldmia	r3!, {r0, r1, r7}
 801061c:	c283      	stmia	r2!, {r0, r1, r7}
 801061e:	cb03      	ldmia	r3!, {r0, r1}
 8010620:	c203      	stmia	r2!, {r0, r1}
		strcat(GSMDataC, ip);
 8010622:	1c62      	adds	r2, r4, #1
 8010624:	0029      	movs	r1, r5
 8010626:	4640      	mov	r0, r8
 8010628:	f009 f87a 	bl	8019720 <memcpy>
		gprsok = 0;
 801062c:	2300      	movs	r3, #0
 801062e:	4c18      	ldr	r4, [pc, #96]	; (8010690 <StartTCPConnection+0xd0>)
			SendGSMCode(GSMDataC);
 8010630:	0030      	movs	r0, r6
		gprsok = 0;
 8010632:	6023      	str	r3, [r4, #0]
			SendGSMCode(GSMDataC);
 8010634:	f7ff fb4a 	bl	800fccc <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QIOPEN 0 TCP Connection open ", gpsto_net, "CONNECT OK"));
 8010638:	4b1b      	ldr	r3, [pc, #108]	; (80106a8 <StartTCPConnection+0xe8>)
 801063a:	491c      	ldr	r1, [pc, #112]	; (80106ac <StartTCPConnection+0xec>)
 801063c:	9302      	str	r3, [sp, #8]
 801063e:	4b1c      	ldr	r3, [pc, #112]	; (80106b0 <StartTCPConnection+0xf0>)
 8010640:	2200      	movs	r2, #0
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2000      	movs	r0, #0
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	4b1a      	ldr	r3, [pc, #104]	; (80106b4 <StartTCPConnection+0xf4>)
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	000b      	movs	r3, r1
 801064e:	f7ff fcd1 	bl	800fff4 <GetGSMReply>
 8010652:	f7fc f955 	bl	800c900 <strlen>
 8010656:	6020      	str	r0, [r4, #0]
	HAL_Delay(1500);
 8010658:	480e      	ldr	r0, [pc, #56]	; (8010694 <StartTCPConnection+0xd4>)
 801065a:	f003 fbe9 	bl	8013e30 <HAL_Delay>
	if (gprsok)
 801065e:	6823      	ldr	r3, [r4, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d0bf      	beq.n	80105e4 <StartTCPConnection+0x24>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010664:	220c      	movs	r2, #12
 8010666:	4c14      	ldr	r4, [pc, #80]	; (80106b8 <StartTCPConnection+0xf8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010668:	4914      	ldr	r1, [pc, #80]	; (80106bc <StartTCPConnection+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801066a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801066c:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801066e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010670:	4b13      	ldr	r3, [pc, #76]	; (80106c0 <StartTCPConnection+0x100>)
 8010672:	3202      	adds	r2, #2
 8010674:	f006 fcd0 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010678:	4b12      	ldr	r3, [pc, #72]	; (80106c4 <StartTCPConnection+0x104>)
 801067a:	a905      	add	r1, sp, #20
 801067c:	800b      	strh	r3, [r1, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 801067e:	2202      	movs	r2, #2
 8010680:	230a      	movs	r3, #10
 8010682:	0020      	movs	r0, r4
 8010684:	f006 fcc8 	bl	8017018 <HAL_UART_Transmit>
		ServerConnected = 1;
 8010688:	2301      	movs	r3, #1
 801068a:	e7ab      	b.n	80105e4 <StartTCPConnection+0x24>
 801068c:	200000d0 	.word	0x200000d0
 8010690:	2000414c 	.word	0x2000414c
 8010694:	000005dc 	.word	0x000005dc
 8010698:	20003f78 	.word	0x20003f78
 801069c:	200040d4 	.word	0x200040d4
 80106a0:	200016d8 	.word	0x200016d8
 80106a4:	0801d5c4 	.word	0x0801d5c4
 80106a8:	0801d5dc 	.word	0x0801d5dc
 80106ac:	0801d468 	.word	0x0801d468
 80106b0:	200000cc 	.word	0x200000cc
 80106b4:	0801d5e8 	.word	0x0801d5e8
 80106b8:	200049d4 	.word	0x200049d4
 80106bc:	0801d610 	.word	0x0801d610
 80106c0:	00001388 	.word	0x00001388
 80106c4:	00000a0d 	.word	0x00000a0d

080106c8 <GSMCellInfo>:
{
 80106c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ca:	46de      	mov	lr, fp
 80106cc:	4657      	mov	r7, sl
 80106ce:	464e      	mov	r6, r9
 80106d0:	4645      	mov	r5, r8
	memset(SS0, 0, 4);
 80106d2:	2300      	movs	r3, #0
{
 80106d4:	b5e0      	push	{r5, r6, r7, lr}
	memset(SS0, 0, 4);
 80106d6:	4cc2      	ldr	r4, [pc, #776]	; (80109e0 <GSMCellInfo+0x318>)
	memset(SS1, 0, 4);
 80106d8:	4dc2      	ldr	r5, [pc, #776]	; (80109e4 <GSMCellInfo+0x31c>)
	memset(SS2, 0, 4);
 80106da:	4ec3      	ldr	r6, [pc, #780]	; (80109e8 <GSMCellInfo+0x320>)
	memset(SS3, 0, 4);
 80106dc:	4fc3      	ldr	r7, [pc, #780]	; (80109ec <GSMCellInfo+0x324>)
	memset(SS4, 0, 4);
 80106de:	4ac4      	ldr	r2, [pc, #784]	; (80109f0 <GSMCellInfo+0x328>)
	memset(SS0, 0, 4);
 80106e0:	8063      	strh	r3, [r4, #2]
	memset(SS1, 0, 4);
 80106e2:	806b      	strh	r3, [r5, #2]
	memset(SS4, 0, 4);
 80106e4:	8053      	strh	r3, [r2, #2]
	memset(SS2, 0, 4);
 80106e6:	8073      	strh	r3, [r6, #2]
	memset(SS3, 0, 4);
 80106e8:	807b      	strh	r3, [r7, #2]
	memset(MCC0, 0, 5);
 80106ea:	4bc2      	ldr	r3, [pc, #776]	; (80109f4 <GSMCellInfo+0x32c>)
{
 80106ec:	b0a1      	sub	sp, #132	; 0x84
	memset(MCC0, 0, 5);
 80106ee:	2100      	movs	r1, #0
	memset(SS4, 0, 4);
 80106f0:	9216      	str	r2, [sp, #88]	; 0x58
	memset(MCC0, 0, 5);
 80106f2:	1c98      	adds	r0, r3, #2
 80106f4:	2203      	movs	r2, #3
 80106f6:	4699      	mov	r9, r3
	memset(SS0, 0, 4);
 80106f8:	941d      	str	r4, [sp, #116]	; 0x74
	memset(SS1, 0, 4);
 80106fa:	951a      	str	r5, [sp, #104]	; 0x68
	memset(SS2, 0, 4);
 80106fc:	961b      	str	r6, [sp, #108]	; 0x6c
	memset(SS3, 0, 4);
 80106fe:	971c      	str	r7, [sp, #112]	; 0x70
	memset(MCC0, 0, 5);
 8010700:	f008 fe9a 	bl	8019438 <memset>
	memset(MNC0, 0, 5);
 8010704:	4bbc      	ldr	r3, [pc, #752]	; (80109f8 <GSMCellInfo+0x330>)
 8010706:	2203      	movs	r2, #3
 8010708:	2100      	movs	r1, #0
 801070a:	1c98      	adds	r0, r3, #2
 801070c:	469b      	mov	fp, r3
 801070e:	f008 fe93 	bl	8019438 <memset>
	memset(LAC0, 0, 6);
 8010712:	4bba      	ldr	r3, [pc, #744]	; (80109fc <GSMCellInfo+0x334>)
 8010714:	2204      	movs	r2, #4
 8010716:	1c98      	adds	r0, r3, #2
 8010718:	2100      	movs	r1, #0
 801071a:	9310      	str	r3, [sp, #64]	; 0x40
 801071c:	f008 fe8c 	bl	8019438 <memset>
	memset(LAC1, 0, 6);
 8010720:	48b7      	ldr	r0, [pc, #732]	; (8010a00 <GSMCellInfo+0x338>)
 8010722:	2204      	movs	r2, #4
 8010724:	2100      	movs	r1, #0
 8010726:	9017      	str	r0, [sp, #92]	; 0x5c
 8010728:	3002      	adds	r0, #2
 801072a:	f008 fe85 	bl	8019438 <memset>
	memset(LAC2, 0, 6);
 801072e:	49b5      	ldr	r1, [pc, #724]	; (8010a04 <GSMCellInfo+0x33c>)
 8010730:	2204      	movs	r2, #4
 8010732:	9118      	str	r1, [sp, #96]	; 0x60
 8010734:	1c88      	adds	r0, r1, #2
 8010736:	2100      	movs	r1, #0
 8010738:	f008 fe7e 	bl	8019438 <memset>
	memset(LAC3, 0, 6);
 801073c:	4bb2      	ldr	r3, [pc, #712]	; (8010a08 <GSMCellInfo+0x340>)
 801073e:	2204      	movs	r2, #4
 8010740:	1c98      	adds	r0, r3, #2
 8010742:	2100      	movs	r1, #0
 8010744:	9319      	str	r3, [sp, #100]	; 0x64
 8010746:	f008 fe77 	bl	8019438 <memset>
	memset(LAC4, 0, 6);
 801074a:	4ab0      	ldr	r2, [pc, #704]	; (8010a0c <GSMCellInfo+0x344>)
 801074c:	2100      	movs	r1, #0
 801074e:	9211      	str	r2, [sp, #68]	; 0x44
 8010750:	1c90      	adds	r0, r2, #2
 8010752:	2204      	movs	r2, #4
 8010754:	f008 fe70 	bl	8019438 <memset>
	memset(CID4, 0, 6);
 8010758:	48ad      	ldr	r0, [pc, #692]	; (8010a10 <GSMCellInfo+0x348>)
 801075a:	2204      	movs	r2, #4
 801075c:	2100      	movs	r1, #0
 801075e:	9012      	str	r0, [sp, #72]	; 0x48
 8010760:	3002      	adds	r0, #2
 8010762:	f008 fe69 	bl	8019438 <memset>
	memset(CID3, 0, 6);
 8010766:	4bab      	ldr	r3, [pc, #684]	; (8010a14 <GSMCellInfo+0x34c>)
 8010768:	2204      	movs	r2, #4
 801076a:	1c98      	adds	r0, r3, #2
 801076c:	2100      	movs	r1, #0
 801076e:	9313      	str	r3, [sp, #76]	; 0x4c
 8010770:	f008 fe62 	bl	8019438 <memset>
	memset(CID2, 0, 6);
 8010774:	49a8      	ldr	r1, [pc, #672]	; (8010a18 <GSMCellInfo+0x350>)
 8010776:	2204      	movs	r2, #4
 8010778:	9114      	str	r1, [sp, #80]	; 0x50
 801077a:	1c88      	adds	r0, r1, #2
 801077c:	2100      	movs	r1, #0
 801077e:	f008 fe5b 	bl	8019438 <memset>
	memset(CID1, 0, 6);
 8010782:	4aa6      	ldr	r2, [pc, #664]	; (8010a1c <GSMCellInfo+0x354>)
 8010784:	2100      	movs	r1, #0
 8010786:	9215      	str	r2, [sp, #84]	; 0x54
 8010788:	1c90      	adds	r0, r2, #2
 801078a:	2204      	movs	r2, #4
 801078c:	f008 fe54 	bl	8019438 <memset>
	memset(CID0, 0, 6);
 8010790:	48a3      	ldr	r0, [pc, #652]	; (8010a20 <GSMCellInfo+0x358>)
 8010792:	2204      	movs	r2, #4
 8010794:	4680      	mov	r8, r0
 8010796:	2100      	movs	r1, #0
 8010798:	3002      	adds	r0, #2
 801079a:	f008 fe4d 	bl	8019438 <memset>
	strcpy(MCC0, "x\0");
 801079e:	2378      	movs	r3, #120	; 0x78
 80107a0:	4648      	mov	r0, r9
	strcpy(LAC0, "x\0");
 80107a2:	9910      	ldr	r1, [sp, #64]	; 0x40
	strcpy(MCC0, "x\0");
 80107a4:	8003      	strh	r3, [r0, #0]
	strcpy(LAC0, "x\0");
 80107a6:	800b      	strh	r3, [r1, #0]
	strcpy(MNC0, "x\0");
 80107a8:	4658      	mov	r0, fp
	strcpy(CID0, "x\0");
 80107aa:	4641      	mov	r1, r8
	strcpy(SS4, "x\0");
 80107ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
	strcpy(MNC0, "x\0");
 80107ae:	8003      	strh	r3, [r0, #0]
	strcpy(SS4, "x\0");
 80107b0:	8013      	strh	r3, [r2, #0]
	strcpy(LAC4, "x\0");
 80107b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
	strcpy(CID0, "x\0");
 80107b4:	800b      	strh	r3, [r1, #0]
	strcpy(LAC4, "x\0");
 80107b6:	8013      	strh	r3, [r2, #0]
	memset(GSMData, 0, 800);
 80107b8:	22c8      	movs	r2, #200	; 0xc8
	strcpy(SS0, "x\0");
 80107ba:	8023      	strh	r3, [r4, #0]
	strcpy(LAC1, "x\0");
 80107bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
	strcpy(CID1, "x\0");
 80107be:	9c15      	ldr	r4, [sp, #84]	; 0x54
	strcpy(LAC2, "x\0");
 80107c0:	9918      	ldr	r1, [sp, #96]	; 0x60
	strcpy(SS1, "x\0");
 80107c2:	802b      	strh	r3, [r5, #0]
	strcpy(CID1, "x\0");
 80107c4:	8023      	strh	r3, [r4, #0]
	strcpy(LAC1, "x\0");
 80107c6:	8003      	strh	r3, [r0, #0]
	strcpy(LAC2, "x\0");
 80107c8:	800b      	strh	r3, [r1, #0]
	strcpy(CID2, "x\0");
 80107ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
	strcpy(LAC3, "x\0");
 80107cc:	9919      	ldr	r1, [sp, #100]	; 0x64
	strcpy(CID4, "x\0");
 80107ce:	9812      	ldr	r0, [sp, #72]	; 0x48
	strcpy(CID3, "x\0");
 80107d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	strcpy(CID2, "x\0");
 80107d2:	802b      	strh	r3, [r5, #0]
	strcpy(LAC3, "x\0");
 80107d4:	800b      	strh	r3, [r1, #0]
	strcpy(CID4, "x\0");
 80107d6:	8003      	strh	r3, [r0, #0]
	strcpy(SS2, "x\0");
 80107d8:	8033      	strh	r3, [r6, #0]
	strcpy(SS3, "x\0");
 80107da:	803b      	strh	r3, [r7, #0]
	strcpy(CID3, "x\0");
 80107dc:	8023      	strh	r3, [r4, #0]
	memset(GSMData, 0, 800);
 80107de:	4b91      	ldr	r3, [pc, #580]	; (8010a24 <GSMCellInfo+0x35c>)
 80107e0:	2100      	movs	r1, #0
 80107e2:	0018      	movs	r0, r3
 80107e4:	0092      	lsls	r2, r2, #2
 80107e6:	469a      	mov	sl, r3
 80107e8:	f008 fe26 	bl	8019438 <memset>
	SendGSMCodeL(" AT+QENG?");
 80107ec:	488e      	ldr	r0, [pc, #568]	; (8010a28 <GSMCellInfo+0x360>)
 80107ee:	f7ff fad5 	bl	800fd9c <SendGSMCodeL>
	HAL_Delay(500);
 80107f2:	20fa      	movs	r0, #250	; 0xfa
 80107f4:	0040      	lsls	r0, r0, #1
 80107f6:	f003 fb1b 	bl	8013e30 <HAL_Delay>
	char *m0 = strstr(GSMData, "+QENG: 0");
 80107fa:	4650      	mov	r0, sl
 80107fc:	498b      	ldr	r1, [pc, #556]	; (8010a2c <GSMCellInfo+0x364>)
 80107fe:	f008 fecb 	bl	8019598 <strstr>
 8010802:	0005      	movs	r5, r0
 8010804:	901e      	str	r0, [sp, #120]	; 0x78
	if ((m0 != NULL) & (strlen(m0) > 1))
 8010806:	f7fc f87b 	bl	800c900 <strlen>
 801080a:	2d00      	cmp	r5, #0
 801080c:	d100      	bne.n	8010810 <GSMCellInfo+0x148>
 801080e:	e0d2      	b.n	80109b6 <GSMCellInfo+0x2ee>
 8010810:	2801      	cmp	r0, #1
 8010812:	d800      	bhi.n	8010816 <GSMCellInfo+0x14e>
 8010814:	e0cf      	b.n	80109b6 <GSMCellInfo+0x2ee>
 8010816:	4e86      	ldr	r6, [pc, #536]	; (8010a30 <GSMCellInfo+0x368>)
 8010818:	0028      	movs	r0, r5
		while ((part = strtok_r(m0, ",", &m0)))
 801081a:	0031      	movs	r1, r6
 801081c:	aa1e      	add	r2, sp, #120	; 0x78
 801081e:	4f85      	ldr	r7, [pc, #532]	; (8010a34 <GSMCellInfo+0x36c>)
 8010820:	f008 feb5 	bl	801958e <strtok_r>
		int k = 0;
 8010824:	2400      	movs	r4, #0
 8010826:	4645      	mov	r5, r8
		while ((part = strtok_r(m0, ",", &m0)))
 8010828:	1e01      	subs	r1, r0, #0
 801082a:	d00f      	beq.n	801084c <GSMCellInfo+0x184>
			if (k == 1)
 801082c:	2c07      	cmp	r4, #7
 801082e:	d805      	bhi.n	801083c <GSMCellInfo+0x174>
 8010830:	00a3      	lsls	r3, r4, #2
 8010832:	58fb      	ldr	r3, [r7, r3]
 8010834:	469f      	mov	pc, r3
				strcpy(MCC0, part);
 8010836:	4648      	mov	r0, r9
 8010838:	f008 ff5f 	bl	80196fa <strcpy>
		while ((part = strtok_r(m0, ",", &m0)))
 801083c:	981e      	ldr	r0, [sp, #120]	; 0x78
			k++;
 801083e:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 8010840:	0031      	movs	r1, r6
 8010842:	aa1e      	add	r2, sp, #120	; 0x78
 8010844:	f008 fea3 	bl	801958e <strtok_r>
 8010848:	1e01      	subs	r1, r0, #0
 801084a:	d1ef      	bne.n	801082c <GSMCellInfo+0x164>
 801084c:	46a8      	mov	r8, r5
	char *m1 = strstr(GSMData, "+QENG: 1");
 801084e:	4650      	mov	r0, sl
 8010850:	4979      	ldr	r1, [pc, #484]	; (8010a38 <GSMCellInfo+0x370>)
 8010852:	f008 fea1 	bl	8019598 <strstr>
 8010856:	0004      	movs	r4, r0
 8010858:	901f      	str	r0, [sp, #124]	; 0x7c
	if ((m1 != NULL) & (strlen(m1) > 1))
 801085a:	f7fc f851 	bl	800c900 <strlen>
 801085e:	2c00      	cmp	r4, #0
 8010860:	d02b      	beq.n	80108ba <GSMCellInfo+0x1f2>
 8010862:	2801      	cmp	r0, #1
 8010864:	d929      	bls.n	80108ba <GSMCellInfo+0x1f2>
 8010866:	4b75      	ldr	r3, [pc, #468]	; (8010a3c <GSMCellInfo+0x374>)
 8010868:	0020      	movs	r0, r4
		int k = 0;
 801086a:	2500      	movs	r5, #0
 801086c:	001c      	movs	r4, r3
 801086e:	4e70      	ldr	r6, [pc, #448]	; (8010a30 <GSMCellInfo+0x368>)
 8010870:	af1f      	add	r7, sp, #124	; 0x7c
		while ((part = strtok_r(m1, ",", &m1)))
 8010872:	0031      	movs	r1, r6
 8010874:	003a      	movs	r2, r7
 8010876:	f008 fe8a 	bl	801958e <strtok_r>
 801087a:	1e01      	subs	r1, r0, #0
 801087c:	d01d      	beq.n	80108ba <GSMCellInfo+0x1f2>
			if (k == 3)
 801087e:	1eeb      	subs	r3, r5, #3
 8010880:	2b25      	cmp	r3, #37	; 0x25
 8010882:	d853      	bhi.n	801092c <GSMCellInfo+0x264>
 8010884:	009b      	lsls	r3, r3, #2
 8010886:	58e3      	ldr	r3, [r4, r3]
 8010888:	469f      	mov	pc, r3
				strcpy(SS0, part);
 801088a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801088c:	f008 ff35 	bl	80196fa <strcpy>
			k++;
 8010890:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 8010892:	981e      	ldr	r0, [sp, #120]	; 0x78
 8010894:	e7d4      	b.n	8010840 <GSMCellInfo+0x178>
				strcpy(CID0, part);
 8010896:	0028      	movs	r0, r5
 8010898:	f008 ff2f 	bl	80196fa <strcpy>
			k++;
 801089c:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 801089e:	981e      	ldr	r0, [sp, #120]	; 0x78
 80108a0:	e7ce      	b.n	8010840 <GSMCellInfo+0x178>
				strcpy(LAC0, part);
 80108a2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80108a4:	f008 ff29 	bl	80196fa <strcpy>
			k++;
 80108a8:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80108aa:	981e      	ldr	r0, [sp, #120]	; 0x78
 80108ac:	e7c8      	b.n	8010840 <GSMCellInfo+0x178>
				strcpy(MNC0, part);
 80108ae:	4658      	mov	r0, fp
 80108b0:	f008 ff23 	bl	80196fa <strcpy>
			k++;
 80108b4:	3401      	adds	r4, #1
		while ((part = strtok_r(m0, ",", &m0)))
 80108b6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80108b8:	e7c2      	b.n	8010840 <GSMCellInfo+0x178>
	memset(gsminfo, 0, 80);
 80108ba:	4c61      	ldr	r4, [pc, #388]	; (8010a40 <GSMCellInfo+0x378>)
 80108bc:	2250      	movs	r2, #80	; 0x50
 80108be:	2100      	movs	r1, #0
 80108c0:	0020      	movs	r0, r4
 80108c2:	f008 fdb9 	bl	8019438 <memset>
	sprintf(gsminfo, "%d,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s",
 80108c6:	4b5f      	ldr	r3, [pc, #380]	; (8010a44 <GSMCellInfo+0x37c>)
 80108c8:	6818      	ldr	r0, [r3, #0]
 80108ca:	f7fd f8eb 	bl	800daa4 <__aeabi_f2iz>
 80108ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80108d0:	0002      	movs	r2, r0
 80108d2:	930e      	str	r3, [sp, #56]	; 0x38
 80108d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80108d6:	0020      	movs	r0, r4
 80108d8:	930d      	str	r3, [sp, #52]	; 0x34
 80108da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108dc:	495a      	ldr	r1, [pc, #360]	; (8010a48 <GSMCellInfo+0x380>)
 80108de:	930c      	str	r3, [sp, #48]	; 0x30
 80108e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80108e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80108e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80108e6:	930a      	str	r3, [sp, #40]	; 0x28
 80108e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80108ea:	9309      	str	r3, [sp, #36]	; 0x24
 80108ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80108ee:	9308      	str	r3, [sp, #32]
 80108f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80108f2:	9307      	str	r3, [sp, #28]
 80108f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108f6:	9306      	str	r3, [sp, #24]
 80108f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80108fa:	9305      	str	r3, [sp, #20]
 80108fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108fe:	9304      	str	r3, [sp, #16]
 8010900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010902:	9303      	str	r3, [sp, #12]
 8010904:	4643      	mov	r3, r8
 8010906:	9302      	str	r3, [sp, #8]
 8010908:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801090a:	9301      	str	r3, [sp, #4]
 801090c:	465b      	mov	r3, fp
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	464b      	mov	r3, r9
 8010912:	f008 fd25 	bl	8019360 <siprintf>
}
 8010916:	0020      	movs	r0, r4
 8010918:	b021      	add	sp, #132	; 0x84
 801091a:	bcf0      	pop	{r4, r5, r6, r7}
 801091c:	46bb      	mov	fp, r7
 801091e:	46b2      	mov	sl, r6
 8010920:	46a9      	mov	r9, r5
 8010922:	46a0      	mov	r8, r4
 8010924:	bdf0      	pop	{r4, r5, r6, r7, pc}
				strcpy(SS1, part);
 8010926:	981a      	ldr	r0, [sp, #104]	; 0x68
 8010928:	f008 fee7 	bl	80196fa <strcpy>
		while ((part = strtok_r(m1, ",", &m1)))
 801092c:	981f      	ldr	r0, [sp, #124]	; 0x7c
			k++;
 801092e:	3501      	adds	r5, #1
 8010930:	e79f      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(CID4, part);
 8010932:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010934:	f008 fee1 	bl	80196fa <strcpy>
			k++;
 8010938:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 801093a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801093c:	e799      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(LAC4, part);
 801093e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010940:	f008 fedb 	bl	80196fa <strcpy>
			k++;
 8010944:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8010946:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010948:	e793      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(SS4, part);
 801094a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801094c:	f008 fed5 	bl	80196fa <strcpy>
			k++;
 8010950:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8010952:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010954:	e78d      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(CID3, part);
 8010956:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8010958:	f008 fecf 	bl	80196fa <strcpy>
			k++;
 801095c:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 801095e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010960:	e787      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(LAC3, part);
 8010962:	9819      	ldr	r0, [sp, #100]	; 0x64
 8010964:	f008 fec9 	bl	80196fa <strcpy>
			k++;
 8010968:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 801096a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801096c:	e781      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(SS3, part);
 801096e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010970:	f008 fec3 	bl	80196fa <strcpy>
			k++;
 8010974:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8010976:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010978:	e77b      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(CID2, part);
 801097a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801097c:	f008 febd 	bl	80196fa <strcpy>
			k++;
 8010980:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 8010982:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010984:	e775      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(LAC2, part);
 8010986:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010988:	f008 feb7 	bl	80196fa <strcpy>
			k++;
 801098c:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 801098e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8010990:	e76f      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(SS2, part);
 8010992:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010994:	f008 feb1 	bl	80196fa <strcpy>
			k++;
 8010998:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 801099a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801099c:	e769      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(CID1, part);
 801099e:	9815      	ldr	r0, [sp, #84]	; 0x54
 80109a0:	f008 feab 	bl	80196fa <strcpy>
			k++;
 80109a4:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80109a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80109a8:	e763      	b.n	8010872 <GSMCellInfo+0x1aa>
				strcpy(LAC1, part);
 80109aa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80109ac:	f008 fea5 	bl	80196fa <strcpy>
			k++;
 80109b0:	3501      	adds	r5, #1
		while ((part = strtok_r(m1, ",", &m1)))
 80109b2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80109b4:	e75d      	b.n	8010872 <GSMCellInfo+0x1aa>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80109b6:	220c      	movs	r2, #12
 80109b8:	4c24      	ldr	r4, [pc, #144]	; (8010a4c <GSMCellInfo+0x384>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80109ba:	4925      	ldr	r1, [pc, #148]	; (8010a50 <GSMCellInfo+0x388>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80109bc:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80109be:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80109c0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80109c2:	4b24      	ldr	r3, [pc, #144]	; (8010a54 <GSMCellInfo+0x38c>)
 80109c4:	320a      	adds	r2, #10
 80109c6:	f006 fb27 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80109ca:	4b23      	ldr	r3, [pc, #140]	; (8010a58 <GSMCellInfo+0x390>)
 80109cc:	af1f      	add	r7, sp, #124	; 0x7c
 80109ce:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80109d0:	2202      	movs	r2, #2
 80109d2:	230a      	movs	r3, #10
 80109d4:	0039      	movs	r1, r7
 80109d6:	0020      	movs	r0, r4
 80109d8:	f006 fb1e 	bl	8017018 <HAL_UART_Transmit>
}
 80109dc:	e737      	b.n	801084e <GSMCellInfo+0x186>
 80109de:	46c0      	nop			; (mov r8, r8)
 80109e0:	20003f64 	.word	0x20003f64
 80109e4:	20003f68 	.word	0x20003f68
 80109e8:	20003f6c 	.word	0x20003f6c
 80109ec:	20003f70 	.word	0x20003f70
 80109f0:	20003f74 	.word	0x20003f74
 80109f4:	20001ed8 	.word	0x20001ed8
 80109f8:	20001ee0 	.word	0x20001ee0
 80109fc:	20001eac 	.word	0x20001eac
 8010a00:	20001eb4 	.word	0x20001eb4
 8010a04:	20001ebc 	.word	0x20001ebc
 8010a08:	20001ec4 	.word	0x20001ec4
 8010a0c:	20001ecc 	.word	0x20001ecc
 8010a10:	2000034c 	.word	0x2000034c
 8010a14:	20000344 	.word	0x20000344
 8010a18:	2000033c 	.word	0x2000033c
 8010a1c:	20000334 	.word	0x20000334
 8010a20:	2000032c 	.word	0x2000032c
 8010a24:	20000544 	.word	0x20000544
 8010a28:	0801d620 	.word	0x0801d620
 8010a2c:	0801d62c 	.word	0x0801d62c
 8010a30:	0801d1a4 	.word	0x0801d1a4
 8010a34:	0801d690 	.word	0x0801d690
 8010a38:	0801d650 	.word	0x0801d650
 8010a3c:	0801d6b0 	.word	0x0801d6b0
 8010a40:	20004584 	.word	0x20004584
 8010a44:	20001d7c 	.word	0x20001d7c
 8010a48:	0801d65c 	.word	0x0801d65c
 8010a4c:	200049d4 	.word	0x200049d4
 8010a50:	0801d638 	.word	0x0801d638
 8010a54:	00001388 	.word	0x00001388
 8010a58:	00000a0d 	.word	0x00000a0d

08010a5c <ProcessTCPAll>:
}

void ProcessTCPAll(char *data)
{
 8010a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	0005      	movs	r5, r0
int ticT;
int tocT;
char tocTxt[30];
char time1[10];
int tic(){
	return HAL_GetTick();
 8010a62:	f003 f9df 	bl	8013e24 <HAL_GetTick>
	int tcpSENDDATA = tic();

	if (ServerConnected > 0)
 8010a66:	4b3b      	ldr	r3, [pc, #236]	; (8010b54 <ProcessTCPAll+0xf8>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	dc27      	bgt.n	8010abe <ProcessTCPAll+0x62>
		SendTCPdata(data);
		Debug_Tx("dat send done  ");
	}
	else
	{
		if (debug == 1)
 8010a6e:	4b3a      	ldr	r3, [pc, #232]	; (8010b58 <ProcessTCPAll+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010a70:	4c3a      	ldr	r4, [pc, #232]	; (8010b5c <ProcessTCPAll+0x100>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d059      	beq.n	8010b2c <ProcessTCPAll+0xd0>
 8010a78:	ad01      	add	r5, sp, #4
 8010a7a:	270c      	movs	r7, #12
 8010a7c:	6823      	ldr	r3, [r4, #0]
	char newline[2] = "\r\n";
 8010a7e:	4e38      	ldr	r6, [pc, #224]	; (8010b60 <ProcessTCPAll+0x104>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010a80:	221b      	movs	r2, #27
 8010a82:	4938      	ldr	r1, [pc, #224]	; (8010b64 <ProcessTCPAll+0x108>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010a84:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010a86:	0020      	movs	r0, r4
 8010a88:	4b37      	ldr	r3, [pc, #220]	; (8010b68 <ProcessTCPAll+0x10c>)
 8010a8a:	f006 fac5 	bl	8017018 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010a8e:	230a      	movs	r3, #10
 8010a90:	2202      	movs	r2, #2
 8010a92:	0029      	movs	r1, r5
 8010a94:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 8010a96:	802e      	strh	r6, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010a98:	f006 fabe 	bl	8017018 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010a9c:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	4932      	ldr	r1, [pc, #200]	; (8010b6c <ProcessTCPAll+0x110>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010aa2:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010aa4:	0020      	movs	r0, r4
 8010aa6:	4b30      	ldr	r3, [pc, #192]	; (8010b68 <ProcessTCPAll+0x10c>)
 8010aa8:	f006 fab6 	bl	8017018 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010aac:	230a      	movs	r3, #10
 8010aae:	2202      	movs	r2, #2
 8010ab0:	0029      	movs	r1, r5
 8010ab2:	0020      	movs	r0, r4
	char newline[2] = "\r\n";
 8010ab4:	802e      	strh	r6, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010ab6:	f006 faaf 	bl	8017018 <HAL_UART_Transmit>
		Debug_Tx(ip2);
		//ResetTCP();
	}

	toc(tcpSENDDATA, "_________________________TCP SEND DATA");
}
 8010aba:	b003      	add	sp, #12
 8010abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010abe:	270c      	movs	r7, #12
 8010ac0:	4c26      	ldr	r4, [pc, #152]	; (8010b5c <ProcessTCPAll+0x100>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010ac2:	2213      	movs	r2, #19
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010ac4:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010ac6:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010ac8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010aca:	4929      	ldr	r1, [pc, #164]	; (8010b70 <ProcessTCPAll+0x114>)
 8010acc:	4b26      	ldr	r3, [pc, #152]	; (8010b68 <ProcessTCPAll+0x10c>)
 8010ace:	f006 faa3 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010ad2:	466b      	mov	r3, sp
 8010ad4:	4e22      	ldr	r6, [pc, #136]	; (8010b60 <ProcessTCPAll+0x104>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010ad6:	a901      	add	r1, sp, #4
	char newline[2] = "\r\n";
 8010ad8:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010ada:	2202      	movs	r2, #2
 8010adc:	230a      	movs	r3, #10
 8010ade:	0020      	movs	r0, r4
 8010ae0:	f006 fa9a 	bl	8017018 <HAL_UART_Transmit>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010ae4:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010ae6:	2200      	movs	r2, #0
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010ae8:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010aea:	0020      	movs	r0, r4
 8010aec:	491f      	ldr	r1, [pc, #124]	; (8010b6c <ProcessTCPAll+0x110>)
 8010aee:	4b1e      	ldr	r3, [pc, #120]	; (8010b68 <ProcessTCPAll+0x10c>)
 8010af0:	f006 fa92 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010af4:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010af6:	a901      	add	r1, sp, #4
 8010af8:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8010afa:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010afc:	0020      	movs	r0, r4
 8010afe:	230a      	movs	r3, #10
 8010b00:	f006 fa8a 	bl	8017018 <HAL_UART_Transmit>
		SendTCPdata(data);
 8010b04:	0028      	movs	r0, r5
 8010b06:	f7ff fc9b 	bl	8010440 <SendTCPdata>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010b0a:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010b0c:	220f      	movs	r2, #15
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010b0e:	621f      	str	r7, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010b10:	0020      	movs	r0, r4
 8010b12:	4918      	ldr	r1, [pc, #96]	; (8010b74 <ProcessTCPAll+0x118>)
 8010b14:	4b14      	ldr	r3, [pc, #80]	; (8010b68 <ProcessTCPAll+0x10c>)
 8010b16:	f006 fa7f 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010b1a:	466b      	mov	r3, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010b1c:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8010b1e:	809e      	strh	r6, [r3, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010b20:	0020      	movs	r0, r4
 8010b22:	230a      	movs	r3, #10
 8010b24:	a901      	add	r1, sp, #4
 8010b26:	f006 fa77 	bl	8017018 <HAL_UART_Transmit>
}
 8010b2a:	e7c6      	b.n	8010aba <ProcessTCPAll+0x5e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010b2c:	220c      	movs	r2, #12
 8010b2e:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010b30:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010b32:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010b34:	4910      	ldr	r1, [pc, #64]	; (8010b78 <ProcessTCPAll+0x11c>)
 8010b36:	4b0c      	ldr	r3, [pc, #48]	; (8010b68 <ProcessTCPAll+0x10c>)
 8010b38:	3216      	adds	r2, #22
 8010b3a:	f006 fa6d 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010b3e:	4b08      	ldr	r3, [pc, #32]	; (8010b60 <ProcessTCPAll+0x104>)
 8010b40:	ad01      	add	r5, sp, #4
 8010b42:	802b      	strh	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010b44:	2202      	movs	r2, #2
 8010b46:	230a      	movs	r3, #10
 8010b48:	0029      	movs	r1, r5
 8010b4a:	0020      	movs	r0, r4
 8010b4c:	f006 fa64 	bl	8017018 <HAL_UART_Transmit>
}
 8010b50:	e793      	b.n	8010a7a <ProcessTCPAll+0x1e>
 8010b52:	46c0      	nop			; (mov r8, r8)
 8010b54:	20003f78 	.word	0x20003f78
 8010b58:	200000c4 	.word	0x200000c4
 8010b5c:	200049d4 	.word	0x200049d4
 8010b60:	00000a0d 	.word	0x00000a0d
 8010b64:	0801d7a8 	.word	0x0801d7a8
 8010b68:	00001388 	.word	0x00001388
 8010b6c:	20004a6c 	.word	0x20004a6c
 8010b70:	0801d7b0 	.word	0x0801d7b0
 8010b74:	0801d774 	.word	0x0801d774
 8010b78:	0801d784 	.word	0x0801d784

08010b7c <SetupGPRS>:
	}
	return smsok;
}

void SetupGPRS(char *apn)
{
 8010b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b7e:	4657      	mov	r7, sl
 8010b80:	464e      	mov	r6, r9
 8010b82:	4645      	mov	r5, r8
 8010b84:	46de      	mov	lr, fp

	int ck = 5;

	gprsok = 0;
 8010b86:	2300      	movs	r3, #0
{
 8010b88:	b5e0      	push	{r5, r6, r7, lr}
 8010b8a:	4680      	mov	r8, r0
	gprsok = 0;
 8010b8c:	2505      	movs	r5, #5
 8010b8e:	4f33      	ldr	r7, [pc, #204]	; (8010c5c <SetupGPRS+0xe0>)
{
 8010b90:	b08b      	sub	sp, #44	; 0x2c
	gprsok = 0;
 8010b92:	603b      	str	r3, [r7, #0]
	while ((ck > 0) && (gprsok < 1))
 8010b94:	4b32      	ldr	r3, [pc, #200]	; (8010c60 <SetupGPRS+0xe4>)
 8010b96:	4c33      	ldr	r4, [pc, #204]	; (8010c64 <SetupGPRS+0xe8>)
 8010b98:	9306      	str	r3, [sp, #24]
 8010b9a:	4b33      	ldr	r3, [pc, #204]	; (8010c68 <SetupGPRS+0xec>)
 8010b9c:	4e33      	ldr	r6, [pc, #204]	; (8010c6c <SetupGPRS+0xf0>)
 8010b9e:	469b      	mov	fp, r3
 8010ba0:	4b33      	ldr	r3, [pc, #204]	; (8010c70 <SetupGPRS+0xf4>)
		{
			// gprsok=0;
			// HAL_Delay(4000);

			SendGSMCode(" AT+QIMODE=0");
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8010ba2:	9705      	str	r7, [sp, #20]
 8010ba4:	469a      	mov	sl, r3
 8010ba6:	4b33      	ldr	r3, [pc, #204]	; (8010c74 <SetupGPRS+0xf8>)
 8010ba8:	4699      	mov	r9, r3
 8010baa:	4b33      	ldr	r3, [pc, #204]	; (8010c78 <SetupGPRS+0xfc>)
 8010bac:	9307      	str	r3, [sp, #28]
			SendGSMCode(" AT+QIMODE=0");
 8010bae:	4b33      	ldr	r3, [pc, #204]	; (8010c7c <SetupGPRS+0x100>)
 8010bb0:	9308      	str	r3, [sp, #32]
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8010bb2:	4b33      	ldr	r3, [pc, #204]	; (8010c80 <SetupGPRS+0x104>)
 8010bb4:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_Delay(2000);
 8010bb6:	20fa      	movs	r0, #250	; 0xfa
 8010bb8:	00c0      	lsls	r0, r0, #3
 8010bba:	f003 f939 	bl	8013e30 <HAL_Delay>
		memset(GSMDataC, 0, 100);
 8010bbe:	0020      	movs	r0, r4
 8010bc0:	2100      	movs	r1, #0
 8010bc2:	2258      	movs	r2, #88	; 0x58
 8010bc4:	300c      	adds	r0, #12
 8010bc6:	f008 fc37 	bl	8019438 <memset>
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 8010bca:	0022      	movs	r2, r4
 8010bcc:	9b06      	ldr	r3, [sp, #24]
 8010bce:	cb83      	ldmia	r3!, {r0, r1, r7}
 8010bd0:	c283      	stmia	r2!, {r0, r1, r7}
		strcat(GSMDataC, apn);
 8010bd2:	0020      	movs	r0, r4
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 8010bd4:	881b      	ldrh	r3, [r3, #0]
		strcat(GSMDataC, apn);
 8010bd6:	4641      	mov	r1, r8
		strcpy(GSMDataC, (char *)" AT+QICSGP=1,\"");
 8010bd8:	81a3      	strh	r3, [r4, #12]
		strcat(GSMDataC, apn);
 8010bda:	300e      	adds	r0, #14
 8010bdc:	f008 fcf2 	bl	80195c4 <stpcpy>
		strcat(GSMDataC, "\",\"\",\"\",0");
 8010be0:	220a      	movs	r2, #10
 8010be2:	4659      	mov	r1, fp
 8010be4:	f008 fd9c 	bl	8019720 <memcpy>
		SendGSMCode(GSMDataC);
 8010be8:	0020      	movs	r0, r4
 8010bea:	f7ff f86f 	bl	800fccc <SendGSMCode>
		gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QICSGP=1 APN Setup", gpsto_dev, "OK"));
 8010bee:	4653      	mov	r3, sl
 8010bf0:	9302      	str	r3, [sp, #8]
 8010bf2:	464b      	mov	r3, r9
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	9301      	str	r3, [sp, #4]
 8010bfa:	9b07      	ldr	r3, [sp, #28]
 8010bfc:	0031      	movs	r1, r6
 8010bfe:	9300      	str	r3, [sp, #0]
 8010c00:	2000      	movs	r0, #0
 8010c02:	0033      	movs	r3, r6
 8010c04:	f7ff f9f6 	bl	800fff4 <GetGSMReply>
 8010c08:	f7fb fe7a 	bl	800c900 <strlen>
 8010c0c:	9b05      	ldr	r3, [sp, #20]
 8010c0e:	6018      	str	r0, [r3, #0]
		if (gprsok > 0)
 8010c10:	2800      	cmp	r0, #0
 8010c12:	d109      	bne.n	8010c28 <SetupGPRS+0xac>
	while ((ck > 0) && (gprsok < 1))
 8010c14:	3d01      	subs	r5, #1
 8010c16:	2d00      	cmp	r5, #0
 8010c18:	d1cd      	bne.n	8010bb6 <SetupGPRS+0x3a>
					// HAL_Delay(1000);
				}
			}
		}
	}
}
 8010c1a:	b00b      	add	sp, #44	; 0x2c
 8010c1c:	bcf0      	pop	{r4, r5, r6, r7}
 8010c1e:	46bb      	mov	fp, r7
 8010c20:	46b2      	mov	sl, r6
 8010c22:	46a9      	mov	r9, r5
 8010c24:	46a0      	mov	r8, r4
 8010c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SendGSMCode(" AT+QIMODE=0");
 8010c28:	9808      	ldr	r0, [sp, #32]
 8010c2a:	f7ff f84f 	bl	800fccc <SendGSMCode>
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8010c2e:	4653      	mov	r3, sl
 8010c30:	9302      	str	r3, [sp, #8]
 8010c32:	464b      	mov	r3, r9
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2200      	movs	r2, #0
 8010c38:	9301      	str	r3, [sp, #4]
 8010c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c3c:	0031      	movs	r1, r6
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	2000      	movs	r0, #0
 8010c42:	0033      	movs	r3, r6
 8010c44:	f7ff f9d6 	bl	800fff4 <GetGSMReply>
 8010c48:	f7fb fe5a 	bl	800c900 <strlen>
 8010c4c:	9b05      	ldr	r3, [sp, #20]
	while ((ck > 0) && (gprsok < 1))
 8010c4e:	3d01      	subs	r5, #1
			gprsok = strlen(GetGSMReply(0, "", 0, "", "Error: QIMODE non transperent mode", gpsto_dev, "OK"));
 8010c50:	6018      	str	r0, [r3, #0]
	while ((ck > 0) && (gprsok < 1))
 8010c52:	2d00      	cmp	r5, #0
 8010c54:	d0e1      	beq.n	8010c1a <SetupGPRS+0x9e>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	ddad      	ble.n	8010bb6 <SetupGPRS+0x3a>
 8010c5a:	e7de      	b.n	8010c1a <SetupGPRS+0x9e>
 8010c5c:	2000414c 	.word	0x2000414c
 8010c60:	0801d7c4 	.word	0x0801d7c4
 8010c64:	200016d8 	.word	0x200016d8
 8010c68:	0801d7d4 	.word	0x0801d7d4
 8010c6c:	0801d468 	.word	0x0801d468
 8010c70:	0801d5e4 	.word	0x0801d5e4
 8010c74:	200000c8 	.word	0x200000c8
 8010c78:	0801d7e0 	.word	0x0801d7e0
 8010c7c:	0801d800 	.word	0x0801d800
 8010c80:	0801d810 	.word	0x0801d810

08010c84 <ShiftGSMProfile>:

void ShiftGSMProfile()
{
 8010c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c86:	46de      	mov	lr, fp
 8010c88:	4657      	mov	r7, sl
 8010c8a:	464e      	mov	r6, r9
 8010c8c:	4645      	mov	r5, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010c8e:	220c      	movs	r2, #12
 8010c90:	b5e0      	push	{r5, r6, r7, lr}
 8010c92:	4ea3      	ldr	r6, [pc, #652]	; (8010f20 <ShiftGSMProfile+0x29c>)
 8010c94:	b089      	sub	sp, #36	; 0x24
 8010c96:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010c98:	49a2      	ldr	r1, [pc, #648]	; (8010f24 <ShiftGSMProfile+0x2a0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010c9a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010c9c:	0030      	movs	r0, r6
 8010c9e:	4ba2      	ldr	r3, [pc, #648]	; (8010f28 <ShiftGSMProfile+0x2a4>)
 8010ca0:	3224      	adds	r2, #36	; 0x24
 8010ca2:	f006 f9b9 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010ca6:	4ba1      	ldr	r3, [pc, #644]	; (8010f2c <ShiftGSMProfile+0x2a8>)
 8010ca8:	af07      	add	r7, sp, #28
 8010caa:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010cac:	2202      	movs	r2, #2
 8010cae:	230a      	movs	r3, #10
 8010cb0:	0039      	movs	r1, r7
 8010cb2:	0030      	movs	r0, r6
 8010cb4:	f006 f9b0 	bl	8017018 <HAL_UART_Transmit>
	// Debug_Tx(GSMSimOperator());

	// Debug_Tx("______________setup stk_____________________________");
	int ck = 10;
	ook = 0;
	while ((ck > 0) && (ook < 1))
 8010cb8:	4b9d      	ldr	r3, [pc, #628]	; (8010f30 <ShiftGSMProfile+0x2ac>)
	int ck = 10;
 8010cba:	250a      	movs	r5, #10
 8010cbc:	4699      	mov	r9, r3
 8010cbe:	4b9d      	ldr	r3, [pc, #628]	; (8010f34 <ShiftGSMProfile+0x2b0>)
 8010cc0:	4c9d      	ldr	r4, [pc, #628]	; (8010f38 <ShiftGSMProfile+0x2b4>)
 8010cc2:	469a      	mov	sl, r3
 8010cc4:	4b9d      	ldr	r3, [pc, #628]	; (8010f3c <ShiftGSMProfile+0x2b8>)
 8010cc6:	4698      	mov	r8, r3
 8010cc8:	4b9d      	ldr	r3, [pc, #628]	; (8010f40 <ShiftGSMProfile+0x2bc>)
 8010cca:	469b      	mov	fp, r3
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010ccc:	4b9d      	ldr	r3, [pc, #628]	; (8010f44 <ShiftGSMProfile+0x2c0>)
 8010cce:	9305      	str	r3, [sp, #20]
 8010cd0:	e002      	b.n	8010cd8 <ShiftGSMProfile+0x54>
	while ((ck > 0) && (ook < 1))
 8010cd2:	2d00      	cmp	r5, #0
 8010cd4:	d100      	bne.n	8010cd8 <ShiftGSMProfile+0x54>
 8010cd6:	e093      	b.n	8010e00 <ShiftGSMProfile+0x17c>
	{
		HAL_Delay(3000);
 8010cd8:	489b      	ldr	r0, [pc, #620]	; (8010f48 <ShiftGSMProfile+0x2c4>)
 8010cda:	f003 f8a9 	bl	8013e30 <HAL_Delay>
		ck = ck - 1;
		SendGSMCode(" AT+QSTK=1");
 8010cde:	4648      	mov	r0, r9
 8010ce0:	f7fe fff4 	bl	800fccc <SendGSMCode>
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8010ce4:	4653      	mov	r3, sl
 8010ce6:	9302      	str	r3, [sp, #8]
 8010ce8:	4643      	mov	r3, r8
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	2200      	movs	r2, #0
 8010cee:	9301      	str	r3, [sp, #4]
 8010cf0:	465b      	mov	r3, fp
 8010cf2:	0021      	movs	r1, r4
 8010cf4:	9300      	str	r3, [sp, #0]
 8010cf6:	2000      	movs	r0, #0
 8010cf8:	0023      	movs	r3, r4
		ck = ck - 1;
 8010cfa:	3d01      	subs	r5, #1
		ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+QSTK=1 Setup STK", gpsto_net, "OK"));
 8010cfc:	f7ff f97a 	bl	800fff4 <GetGSMReply>
 8010d00:	f7fb fdfe 	bl	800c900 <strlen>
		if (ook > 0)
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d0e4      	beq.n	8010cd2 <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010d08:	220c      	movs	r2, #12
 8010d0a:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010d0c:	9905      	ldr	r1, [sp, #20]
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010d0e:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010d10:	0030      	movs	r0, r6
 8010d12:	4b85      	ldr	r3, [pc, #532]	; (8010f28 <ShiftGSMProfile+0x2a4>)
 8010d14:	3229      	adds	r2, #41	; 0x29
 8010d16:	f006 f97f 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010d1a:	4b84      	ldr	r3, [pc, #528]	; (8010f2c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010d1c:	2202      	movs	r2, #2
 8010d1e:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8010d20:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010d22:	0030      	movs	r0, r6
 8010d24:	230a      	movs	r3, #10
 8010d26:	f006 f977 	bl	8017018 <HAL_UART_Transmit>
		{
			Debug_Tx("______________Setup Menu_____________________________");
			ook = 0;
			SendGSMCode(" AT+STKTR=\"810301250082028281830100\"");
 8010d2a:	4888      	ldr	r0, [pc, #544]	; (8010f4c <ShiftGSMProfile+0x2c8>)
 8010d2c:	f7fe ffce 	bl	800fccc <SendGSMCode>
			ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKTR= Setup Menue", gpsto_net, "OK"));
 8010d30:	4653      	mov	r3, sl
 8010d32:	9302      	str	r3, [sp, #8]
 8010d34:	4643      	mov	r3, r8
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	9301      	str	r3, [sp, #4]
 8010d3c:	4b84      	ldr	r3, [pc, #528]	; (8010f50 <ShiftGSMProfile+0x2cc>)
 8010d3e:	0021      	movs	r1, r4
 8010d40:	9300      	str	r3, [sp, #0]
 8010d42:	2000      	movs	r0, #0
 8010d44:	0023      	movs	r3, r4
 8010d46:	f7ff f955 	bl	800fff4 <GetGSMReply>
 8010d4a:	f7fb fdd9 	bl	800c900 <strlen>
 8010d4e:	9004      	str	r0, [sp, #16]
			HAL_Delay(3000);
 8010d50:	487d      	ldr	r0, [pc, #500]	; (8010f48 <ShiftGSMProfile+0x2c4>)
 8010d52:	f003 f86d 	bl	8013e30 <HAL_Delay>
			if (ook > 0)
 8010d56:	9b04      	ldr	r3, [sp, #16]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d0ba      	beq.n	8010cd2 <ShiftGSMProfile+0x4e>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010d5c:	220c      	movs	r2, #12
 8010d5e:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010d60:	497c      	ldr	r1, [pc, #496]	; (8010f54 <ShiftGSMProfile+0x2d0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010d62:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010d64:	0030      	movs	r0, r6
 8010d66:	4b70      	ldr	r3, [pc, #448]	; (8010f28 <ShiftGSMProfile+0x2a4>)
 8010d68:	3231      	adds	r2, #49	; 0x31
 8010d6a:	f006 f955 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010d6e:	4b6f      	ldr	r3, [pc, #444]	; (8010f2c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010d70:	2202      	movs	r2, #2
 8010d72:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8010d74:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010d76:	0030      	movs	r0, r6
 8010d78:	230a      	movs	r3, #10
 8010d7a:	f006 f94d 	bl	8017018 <HAL_UART_Transmit>
			{
				Debug_Tx("______________FOR PROFILE CONFIG_____________________________");
				ook = 0;
				SendGSMCode(" AT+STKENV=\"D30782020181900101\"");
 8010d7e:	4876      	ldr	r0, [pc, #472]	; (8010f58 <ShiftGSMProfile+0x2d4>)
 8010d80:	f7fe ffa4 	bl	800fccc <SendGSMCode>
				ook = strlen(GetGSMReply(0, "", 0, "", "Error: AT+STKENV= Profile COnfig", gpsto_net, "OK"));
 8010d84:	4653      	mov	r3, sl
 8010d86:	9302      	str	r3, [sp, #8]
 8010d88:	4643      	mov	r3, r8
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	9301      	str	r3, [sp, #4]
 8010d90:	4b72      	ldr	r3, [pc, #456]	; (8010f5c <ShiftGSMProfile+0x2d8>)
 8010d92:	0021      	movs	r1, r4
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	2000      	movs	r0, #0
 8010d98:	0023      	movs	r3, r4
 8010d9a:	f7ff f92b 	bl	800fff4 <GetGSMReply>
 8010d9e:	f7fb fdaf 	bl	800c900 <strlen>
				if (ook > 0)
 8010da2:	2800      	cmp	r0, #0
 8010da4:	d095      	beq.n	8010cd2 <ShiftGSMProfile+0x4e>
				{

					if (GSMProf == 0)
 8010da6:	4b6e      	ldr	r3, [pc, #440]	; (8010f60 <ShiftGSMProfile+0x2dc>)
 8010da8:	9304      	str	r3, [sp, #16]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d068      	beq.n	8010e82 <ShiftGSMProfile+0x1fe>
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
						GSMProf = 1;
					}
					else if (GSMProf == 1)
 8010db0:	2b01      	cmp	r3, #1
 8010db2:	d100      	bne.n	8010db6 <ShiftGSMProfile+0x132>
 8010db4:	e08f      	b.n	8010ed6 <ShiftGSMProfile+0x252>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010db6:	220c      	movs	r2, #12
 8010db8:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010dba:	496a      	ldr	r1, [pc, #424]	; (8010f64 <ShiftGSMProfile+0x2e0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010dbc:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010dbe:	0030      	movs	r0, r6
 8010dc0:	4b59      	ldr	r3, [pc, #356]	; (8010f28 <ShiftGSMProfile+0x2a4>)
 8010dc2:	3225      	adds	r2, #37	; 0x25
 8010dc4:	f006 f928 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010dc8:	4b58      	ldr	r3, [pc, #352]	; (8010f2c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010dca:	2202      	movs	r2, #2
 8010dcc:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8010dce:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010dd0:	0030      	movs	r0, r6
 8010dd2:	230a      	movs	r3, #10
 8010dd4:	f006 f920 	bl	8017018 <HAL_UART_Transmit>
					}
					if (ook > 0)
					{
						Debug_Tx("_____________Refresh_____________________________");
						ook = 0;
						SendGSMCode(" AT+STKTR=\"810301010482028281830100\"");
 8010dd8:	4863      	ldr	r0, [pc, #396]	; (8010f68 <ShiftGSMProfile+0x2e4>)
 8010dda:	f7fe ff77 	bl	800fccc <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR Refresh", gpsto_net, "OK"));
 8010dde:	4653      	mov	r3, sl
 8010de0:	9302      	str	r3, [sp, #8]
 8010de2:	4643      	mov	r3, r8
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	2200      	movs	r2, #0
 8010de8:	9301      	str	r3, [sp, #4]
 8010dea:	4b60      	ldr	r3, [pc, #384]	; (8010f6c <ShiftGSMProfile+0x2e8>)
 8010dec:	0021      	movs	r1, r4
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	2000      	movs	r0, #0
 8010df2:	0023      	movs	r3, r4
 8010df4:	f7ff f8fe 	bl	800fff4 <GetGSMReply>
 8010df8:	f7fb fd82 	bl	800c900 <strlen>
	while ((ck > 0) && (ook < 1))
 8010dfc:	2d00      	cmp	r5, #0
 8010dfe:	d13d      	bne.n	8010e7c <ShiftGSMProfile+0x1f8>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010e00:	220c      	movs	r2, #12
 8010e02:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010e04:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010e06:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010e08:	4959      	ldr	r1, [pc, #356]	; (8010f70 <ShiftGSMProfile+0x2ec>)
 8010e0a:	4b47      	ldr	r3, [pc, #284]	; (8010f28 <ShiftGSMProfile+0x2a4>)
 8010e0c:	3225      	adds	r2, #37	; 0x25
 8010e0e:	f006 f903 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010e12:	4b46      	ldr	r3, [pc, #280]	; (8010f2c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010e14:	0039      	movs	r1, r7
 8010e16:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8010e18:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010e1a:	0030      	movs	r0, r6
 8010e1c:	230a      	movs	r3, #10
 8010e1e:	f006 f8fb 	bl	8017018 <HAL_UART_Transmit>
	ck = 2;
	ook = 0;
	while ((ck > 0) && (ook < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT+QPOWD=1");
 8010e22:	4b54      	ldr	r3, [pc, #336]	; (8010f74 <ShiftGSMProfile+0x2f0>)
 8010e24:	0018      	movs	r0, r3
 8010e26:	4698      	mov	r8, r3
 8010e28:	f7fe ff50 	bl	800fccc <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 8010e2c:	4f52      	ldr	r7, [pc, #328]	; (8010f78 <ShiftGSMProfile+0x2f4>)
 8010e2e:	4e53      	ldr	r6, [pc, #332]	; (8010f7c <ShiftGSMProfile+0x2f8>)
 8010e30:	9702      	str	r7, [sp, #8]
 8010e32:	6833      	ldr	r3, [r6, #0]
 8010e34:	4d52      	ldr	r5, [pc, #328]	; (8010f80 <ShiftGSMProfile+0x2fc>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	0021      	movs	r1, r4
 8010e3a:	9301      	str	r3, [sp, #4]
 8010e3c:	200f      	movs	r0, #15
 8010e3e:	0023      	movs	r3, r4
 8010e40:	9500      	str	r5, [sp, #0]
 8010e42:	f7ff f8d7 	bl	800fff4 <GetGSMReply>
 8010e46:	f7fb fd5b 	bl	800c900 <strlen>
	while ((ck > 0) && (ook < 1))
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	d10c      	bne.n	8010e68 <ShiftGSMProfile+0x1e4>
		SendGSMCode(" AT+QPOWD=1");
 8010e4e:	4640      	mov	r0, r8
 8010e50:	f7fe ff3c 	bl	800fccc <SendGSMCode>
		ook = strlen(GetGSMReply(15, "", 0, "", "Error:  AT+QPOWD=1 Restart", gpsto_dev, "NORMAL POWER DOWN"));
 8010e54:	9702      	str	r7, [sp, #8]
 8010e56:	6833      	ldr	r3, [r6, #0]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	9301      	str	r3, [sp, #4]
 8010e5c:	0021      	movs	r1, r4
 8010e5e:	0023      	movs	r3, r4
 8010e60:	200f      	movs	r0, #15
 8010e62:	9500      	str	r5, [sp, #0]
 8010e64:	f7ff f8c6 	bl	800fff4 <GetGSMReply>
	}
	HAL_Delay(6000);
 8010e68:	4846      	ldr	r0, [pc, #280]	; (8010f84 <ShiftGSMProfile+0x300>)
 8010e6a:	f002 ffe1 	bl	8013e30 <HAL_Delay>
	if (ook > 0)
	{
	}

	// HAL_Delay(5000);
}
 8010e6e:	b009      	add	sp, #36	; 0x24
 8010e70:	bcf0      	pop	{r4, r5, r6, r7}
 8010e72:	46bb      	mov	fp, r7
 8010e74:	46b2      	mov	sl, r6
 8010e76:	46a9      	mov	r9, r5
 8010e78:	46a0      	mov	r8, r4
 8010e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((ck > 0) && (ook < 1))
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	d1bf      	bne.n	8010e00 <ShiftGSMProfile+0x17c>
 8010e80:	e72a      	b.n	8010cd8 <ShiftGSMProfile+0x54>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010e82:	220c      	movs	r2, #12
 8010e84:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010e86:	4940      	ldr	r1, [pc, #256]	; (8010f88 <ShiftGSMProfile+0x304>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010e88:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010e8a:	0030      	movs	r0, r6
 8010e8c:	4b26      	ldr	r3, [pc, #152]	; (8010f28 <ShiftGSMProfile+0x2a4>)
 8010e8e:	3234      	adds	r2, #52	; 0x34
 8010e90:	f006 f8c2 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010e94:	4b25      	ldr	r3, [pc, #148]	; (8010f2c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010e96:	2202      	movs	r2, #2
 8010e98:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8010e9a:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010e9c:	0030      	movs	r0, r6
 8010e9e:	230a      	movs	r3, #10
 8010ea0:	f006 f8ba 	bl	8017018 <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900102\"");
 8010ea4:	4839      	ldr	r0, [pc, #228]	; (8010f8c <ShiftGSMProfile+0x308>)
 8010ea6:	f7fe ff11 	bl	800fccc <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=BSNL Config", gpsto_net, "OK"));
 8010eaa:	4653      	mov	r3, sl
 8010eac:	9302      	str	r3, [sp, #8]
 8010eae:	4643      	mov	r3, r8
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	9301      	str	r3, [sp, #4]
 8010eb6:	4b36      	ldr	r3, [pc, #216]	; (8010f90 <ShiftGSMProfile+0x30c>)
 8010eb8:	0021      	movs	r1, r4
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	2000      	movs	r0, #0
 8010ebe:	0023      	movs	r3, r4
 8010ec0:	f7ff f898 	bl	800fff4 <GetGSMReply>
 8010ec4:	f7fb fd1c 	bl	800c900 <strlen>
						GSMProf = 1;
 8010ec8:	2301      	movs	r3, #1
 8010eca:	9a04      	ldr	r2, [sp, #16]
 8010ecc:	6013      	str	r3, [r2, #0]
					if (ook > 0)
 8010ece:	2800      	cmp	r0, #0
 8010ed0:	d100      	bne.n	8010ed4 <ShiftGSMProfile+0x250>
 8010ed2:	e6fe      	b.n	8010cd2 <ShiftGSMProfile+0x4e>
 8010ed4:	e76f      	b.n	8010db6 <ShiftGSMProfile+0x132>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010ed6:	220c      	movs	r2, #12
 8010ed8:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010eda:	492e      	ldr	r1, [pc, #184]	; (8010f94 <ShiftGSMProfile+0x310>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8010edc:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8010ede:	0030      	movs	r0, r6
 8010ee0:	4b11      	ldr	r3, [pc, #68]	; (8010f28 <ShiftGSMProfile+0x2a4>)
 8010ee2:	3236      	adds	r2, #54	; 0x36
 8010ee4:	f006 f898 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8010ee8:	4b10      	ldr	r3, [pc, #64]	; (8010f2c <ShiftGSMProfile+0x2a8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010eea:	2202      	movs	r2, #2
 8010eec:	0039      	movs	r1, r7
	char newline[2] = "\r\n";
 8010eee:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8010ef0:	0030      	movs	r0, r6
 8010ef2:	230a      	movs	r3, #10
 8010ef4:	f006 f890 	bl	8017018 <HAL_UART_Transmit>
						SendGSMCode(" AT+STKTR=\"810301240082028281830100900101\"");
 8010ef8:	4827      	ldr	r0, [pc, #156]	; (8010f98 <ShiftGSMProfile+0x314>)
 8010efa:	f7fe fee7 	bl	800fccc <SendGSMCode>
						ook = strlen(GetGSMReply(0, "", 0, "", "Error:  AT+STKTR=AIRTEL Config", gpsto_net, "OK"));
 8010efe:	4653      	mov	r3, sl
 8010f00:	9302      	str	r3, [sp, #8]
 8010f02:	4643      	mov	r3, r8
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	2200      	movs	r2, #0
 8010f08:	9301      	str	r3, [sp, #4]
 8010f0a:	4b24      	ldr	r3, [pc, #144]	; (8010f9c <ShiftGSMProfile+0x318>)
 8010f0c:	0021      	movs	r1, r4
 8010f0e:	9300      	str	r3, [sp, #0]
 8010f10:	2000      	movs	r0, #0
 8010f12:	0023      	movs	r3, r4
 8010f14:	f7ff f86e 	bl	800fff4 <GetGSMReply>
 8010f18:	f7fb fcf2 	bl	800c900 <strlen>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	e7d4      	b.n	8010eca <ShiftGSMProfile+0x246>
 8010f20:	200049d4 	.word	0x200049d4
 8010f24:	0801d834 	.word	0x0801d834
 8010f28:	00001388 	.word	0x00001388
 8010f2c:	00000a0d 	.word	0x00000a0d
 8010f30:	0801d868 	.word	0x0801d868
 8010f34:	0801d5e4 	.word	0x0801d5e4
 8010f38:	0801d468 	.word	0x0801d468
 8010f3c:	200000cc 	.word	0x200000cc
 8010f40:	0801d874 	.word	0x0801d874
 8010f44:	0801d900 	.word	0x0801d900
 8010f48:	00000bb8 	.word	0x00000bb8
 8010f4c:	0801d938 	.word	0x0801d938
 8010f50:	0801d960 	.word	0x0801d960
 8010f54:	0801d980 	.word	0x0801d980
 8010f58:	0801d9c0 	.word	0x0801d9c0
 8010f5c:	0801d9e0 	.word	0x0801d9e0
 8010f60:	2000009c 	.word	0x2000009c
 8010f64:	0801db24 	.word	0x0801db24
 8010f68:	0801db58 	.word	0x0801db58
 8010f6c:	0801db80 	.word	0x0801db80
 8010f70:	0801d890 	.word	0x0801d890
 8010f74:	0801d8c4 	.word	0x0801d8c4
 8010f78:	0801d8d0 	.word	0x0801d8d0
 8010f7c:	200000c8 	.word	0x200000c8
 8010f80:	0801d8e4 	.word	0x0801d8e4
 8010f84:	00001770 	.word	0x00001770
 8010f88:	0801da04 	.word	0x0801da04
 8010f8c:	0801da48 	.word	0x0801da48
 8010f90:	0801da74 	.word	0x0801da74
 8010f94:	0801da94 	.word	0x0801da94
 8010f98:	0801dad8 	.word	0x0801dad8
 8010f9c:	0801db04 	.word	0x0801db04

08010fa0 <InitGSM>:

void InitGSM()
{
 8010fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fa2:	46de      	mov	lr, fp
 8010fa4:	4645      	mov	r5, r8
 8010fa6:	4657      	mov	r7, sl
 8010fa8:	464e      	mov	r6, r9
 8010faa:	b5e0      	push	{r5, r6, r7, lr}
	// RestartGSM();
	HAL_Delay(5000);
 8010fac:	48c6      	ldr	r0, [pc, #792]	; (80112c8 <InitGSM+0x328>)
{
 8010fae:	b087      	sub	sp, #28
	HAL_Delay(5000);
 8010fb0:	f002 ff3e 	bl	8013e30 <HAL_Delay>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 8010fb4:	4bc5      	ldr	r3, [pc, #788]	; (80112cc <InitGSM+0x32c>)
 8010fb6:	0018      	movs	r0, r3
 8010fb8:	4699      	mov	r9, r3
 8010fba:	f7fe fe87 	bl	800fccc <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 8010fbe:	4bc4      	ldr	r3, [pc, #784]	; (80112d0 <InitGSM+0x330>)
 8010fc0:	4fc4      	ldr	r7, [pc, #784]	; (80112d4 <InitGSM+0x334>)
 8010fc2:	9302      	str	r3, [sp, #8]
 8010fc4:	4cc4      	ldr	r4, [pc, #784]	; (80112d8 <InitGSM+0x338>)
 8010fc6:	4698      	mov	r8, r3
 8010fc8:	4dc4      	ldr	r5, [pc, #784]	; (80112dc <InitGSM+0x33c>)
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	0021      	movs	r1, r4
 8010fd0:	9301      	str	r3, [sp, #4]
 8010fd2:	200f      	movs	r0, #15
 8010fd4:	0023      	movs	r3, r4
 8010fd6:	9500      	str	r5, [sp, #0]
 8010fd8:	f7ff f80c 	bl	800fff4 <GetGSMReply>
 8010fdc:	f7fb fc90 	bl	800c900 <strlen>
	while ((ck > 0) && (i < 1))
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d10d      	bne.n	8011000 <InitGSM+0x60>
		SendGSMCode(" ATE0");
 8010fe4:	4648      	mov	r0, r9
 8010fe6:	f7fe fe71 	bl	800fccc <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: ATE no Resp", gpsto_dev, "OK"));
 8010fea:	4643      	mov	r3, r8
 8010fec:	9302      	str	r3, [sp, #8]
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	9301      	str	r3, [sp, #4]
 8010ff4:	0021      	movs	r1, r4
 8010ff6:	0023      	movs	r3, r4
 8010ff8:	200f      	movs	r0, #15
 8010ffa:	9500      	str	r5, [sp, #0]
 8010ffc:	f7fe fffa 	bl	800fff4 <GetGSMReply>
{
 8011000:	2302      	movs	r3, #2
 8011002:	469a      	mov	sl, r3
 8011004:	4eb6      	ldr	r6, [pc, #728]	; (80112e0 <InitGSM+0x340>)
 8011006:	4db7      	ldr	r5, [pc, #732]	; (80112e4 <InitGSM+0x344>)
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8011008:	0030      	movs	r0, r6
 801100a:	f7fe fe5f 	bl	800fccc <SendGSMCode>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 801100e:	4643      	mov	r3, r8
 8011010:	9302      	str	r3, [sp, #8]
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	2200      	movs	r2, #0
 8011016:	9301      	str	r3, [sp, #4]
 8011018:	0021      	movs	r1, r4
 801101a:	0023      	movs	r3, r4
 801101c:	200f      	movs	r0, #15
 801101e:	9500      	str	r5, [sp, #0]
 8011020:	f7fe ffe8 	bl	800fff4 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 8011024:	4653      	mov	r3, sl
 8011026:	2b01      	cmp	r3, #1
 8011028:	d000      	beq.n	801102c <InitGSM+0x8c>
 801102a:	e118      	b.n	801125e <InitGSM+0x2be>
	}

	HAL_Delay(2000);
 801102c:	20fa      	movs	r0, #250	; 0xfa
 801102e:	00c0      	lsls	r0, r0, #3
 8011030:	f002 fefe 	bl	8013e30 <HAL_Delay>
	ShiftGSMProfile();
 8011034:	f7ff fe26 	bl	8010c84 <ShiftGSMProfile>
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" ATE0");
 8011038:	4648      	mov	r0, r9
 801103a:	f7fe fe47 	bl	800fccc <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 801103e:	4643      	mov	r3, r8
 8011040:	9302      	str	r3, [sp, #8]
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	2200      	movs	r2, #0
 8011046:	9301      	str	r3, [sp, #4]
 8011048:	4ba7      	ldr	r3, [pc, #668]	; (80112e8 <InitGSM+0x348>)
 801104a:	0021      	movs	r1, r4
 801104c:	469a      	mov	sl, r3
 801104e:	9300      	str	r3, [sp, #0]
 8011050:	200a      	movs	r0, #10
 8011052:	0023      	movs	r3, r4
 8011054:	f7fe ffce 	bl	800fff4 <GetGSMReply>
 8011058:	f7fb fc52 	bl	800c900 <strlen>
	while ((ck > 0) && (i < 1))
 801105c:	2800      	cmp	r0, #0
 801105e:	d10e      	bne.n	801107e <InitGSM+0xde>
		SendGSMCode(" ATE0");
 8011060:	4648      	mov	r0, r9
 8011062:	f7fe fe33 	bl	800fccc <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: ATe no Resp", gpsto_dev, "OK"));
 8011066:	4643      	mov	r3, r8
 8011068:	9302      	str	r3, [sp, #8]
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	2200      	movs	r2, #0
 801106e:	9301      	str	r3, [sp, #4]
 8011070:	4653      	mov	r3, sl
 8011072:	0021      	movs	r1, r4
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	200a      	movs	r0, #10
 8011078:	0023      	movs	r3, r4
 801107a:	f7fe ffbb 	bl	800fff4 <GetGSMReply>
{
 801107e:	2302      	movs	r3, #2
 8011080:	4699      	mov	r9, r3
	ck = 2;
	i = 0;
	while ((ck > 0) && (i < 1))
	{
		ck = ck - 1;
		SendGSMCode(" AT");
 8011082:	0030      	movs	r0, r6
 8011084:	f7fe fe22 	bl	800fccc <SendGSMCode>
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 8011088:	4643      	mov	r3, r8
 801108a:	9302      	str	r3, [sp, #8]
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	2200      	movs	r2, #0
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	0021      	movs	r1, r4
 8011094:	0023      	movs	r3, r4
 8011096:	200a      	movs	r0, #10
 8011098:	9500      	str	r5, [sp, #0]
 801109a:	f7fe ffab 	bl	800fff4 <GetGSMReply>
	while ((ck > 0) && (i < 1))
 801109e:	464b      	mov	r3, r9
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d000      	beq.n	80110a6 <InitGSM+0x106>
 80110a4:	e0d3      	b.n	801124e <InitGSM+0x2ae>
 80110a6:	4b91      	ldr	r3, [pc, #580]	; (80112ec <InitGSM+0x34c>)
 80110a8:	260a      	movs	r6, #10
 80110aa:	469a      	mov	sl, r3
 80110ac:	4b90      	ldr	r3, [pc, #576]	; (80112f0 <InitGSM+0x350>)
 80110ae:	4699      	mov	r9, r3
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
		// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+IFC=1,1 Software Flow COntrol",50));
		HAL_Delay(1000);
		if (i > 0)
		{
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 80110b0:	4b90      	ldr	r3, [pc, #576]	; (80112f4 <InitGSM+0x354>)
 80110b2:	469b      	mov	fp, r3
 80110b4:	e002      	b.n	80110bc <InitGSM+0x11c>
	while ((ck > 0) && (i < 1))
 80110b6:	2e00      	cmp	r6, #0
 80110b8:	d100      	bne.n	80110bc <InitGSM+0x11c>
 80110ba:	e0c1      	b.n	8011240 <InitGSM+0x2a0>
		SendGSMCode(" AT+IFC=1,1"); // Set TE-TA Control Character Framing
 80110bc:	4650      	mov	r0, sl
 80110be:	f7fe fe05 	bl	800fccc <SendGSMCode>
		i = strlen(GetGSMReply(5, "", 0, "", "Error: AT+IFC=1,1 Software Flow COntrol", gpsto_dev, "OK"));
 80110c2:	4643      	mov	r3, r8
 80110c4:	9302      	str	r3, [sp, #8]
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	2200      	movs	r2, #0
 80110ca:	9301      	str	r3, [sp, #4]
 80110cc:	464b      	mov	r3, r9
 80110ce:	0021      	movs	r1, r4
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	2005      	movs	r0, #5
 80110d4:	0023      	movs	r3, r4
 80110d6:	f7fe ff8d 	bl	800fff4 <GetGSMReply>
 80110da:	f7fb fc11 	bl	800c900 <strlen>
 80110de:	0005      	movs	r5, r0
		HAL_Delay(1000);
 80110e0:	20fa      	movs	r0, #250	; 0xfa
 80110e2:	0080      	lsls	r0, r0, #2
		ck = ck - 1;
 80110e4:	3e01      	subs	r6, #1
		HAL_Delay(1000);
 80110e6:	f002 fea3 	bl	8013e30 <HAL_Delay>
		if (i > 0)
 80110ea:	2d00      	cmp	r5, #0
 80110ec:	d0e3      	beq.n	80110b6 <InitGSM+0x116>
			SendGSMCode(" AT+CFUN=1"); // Select sms format
 80110ee:	4658      	mov	r0, fp
 80110f0:	f7fe fdec 	bl	800fccc <SendGSMCode>
			i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CFUN=1 set gsm full function", gpsto_dev, "OK"));
 80110f4:	4643      	mov	r3, r8
 80110f6:	9302      	str	r3, [sp, #8]
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	2200      	movs	r2, #0
 80110fc:	9301      	str	r3, [sp, #4]
 80110fe:	4b7e      	ldr	r3, [pc, #504]	; (80112f8 <InitGSM+0x358>)
 8011100:	0021      	movs	r1, r4
 8011102:	9300      	str	r3, [sp, #0]
 8011104:	2000      	movs	r0, #0
 8011106:	0023      	movs	r3, r4
 8011108:	f7fe ff74 	bl	800fff4 <GetGSMReply>
 801110c:	f7fb fbf8 	bl	800c900 <strlen>

			if (i > 0)
 8011110:	2800      	cmp	r0, #0
 8011112:	d0d0      	beq.n	80110b6 <InitGSM+0x116>
			{
				SendGSMCode(" AT+CMGF=1"); // Select sms format
 8011114:	4879      	ldr	r0, [pc, #484]	; (80112fc <InitGSM+0x35c>)
 8011116:	f7fe fdd9 	bl	800fccc <SendGSMCode>
				i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CMGF=1 SMS Mode", gpsto_dev, "OK"));
 801111a:	4643      	mov	r3, r8
 801111c:	9302      	str	r3, [sp, #8]
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	2200      	movs	r2, #0
 8011122:	9301      	str	r3, [sp, #4]
 8011124:	4b76      	ldr	r3, [pc, #472]	; (8011300 <InitGSM+0x360>)
 8011126:	0021      	movs	r1, r4
 8011128:	9300      	str	r3, [sp, #0]
 801112a:	2000      	movs	r0, #0
 801112c:	0023      	movs	r3, r4
 801112e:	f7fe ff61 	bl	800fff4 <GetGSMReply>
 8011132:	f7fb fbe5 	bl	800c900 <strlen>

				if (i > 0)
 8011136:	2800      	cmp	r0, #0
 8011138:	d0bd      	beq.n	80110b6 <InitGSM+0x116>
				{
					SendGSMCode(" AT+CLIP=1"); // Calling Line Identification Presantation
 801113a:	4872      	ldr	r0, [pc, #456]	; (8011304 <InitGSM+0x364>)
 801113c:	f7fe fdc6 	bl	800fccc <SendGSMCode>
					i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CLIP=1 Calling Line Identification", gpsto_dev, "OK"));
 8011140:	4643      	mov	r3, r8
 8011142:	9302      	str	r3, [sp, #8]
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	2200      	movs	r2, #0
 8011148:	9301      	str	r3, [sp, #4]
 801114a:	4b6f      	ldr	r3, [pc, #444]	; (8011308 <InitGSM+0x368>)
 801114c:	0021      	movs	r1, r4
 801114e:	9300      	str	r3, [sp, #0]
 8011150:	2000      	movs	r0, #0
 8011152:	0023      	movs	r3, r4
 8011154:	f7fe ff4e 	bl	800fff4 <GetGSMReply>
 8011158:	f7fb fbd2 	bl	800c900 <strlen>
					if (i > 0)
 801115c:	2800      	cmp	r0, #0
 801115e:	d0aa      	beq.n	80110b6 <InitGSM+0x116>
					{
						SendGSMCode(" AT+CSCS=\"GSM\""); // Select TE Character Set
 8011160:	486a      	ldr	r0, [pc, #424]	; (801130c <InitGSM+0x36c>)
 8011162:	f7fe fdb3 	bl	800fccc <SendGSMCode>
						i = strlen(GetGSMReply(0, "", 0, "", "Error: AT+CSCS=\"GSM\"  SMS TE charecter set ", gpsto_dev, "OK"));
 8011166:	4643      	mov	r3, r8
 8011168:	9302      	str	r3, [sp, #8]
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	2200      	movs	r2, #0
 801116e:	9301      	str	r3, [sp, #4]
 8011170:	4b67      	ldr	r3, [pc, #412]	; (8011310 <InitGSM+0x370>)
 8011172:	0021      	movs	r1, r4
 8011174:	9300      	str	r3, [sp, #0]
 8011176:	2000      	movs	r0, #0
 8011178:	0023      	movs	r3, r4
 801117a:	f7fe ff3b 	bl	800fff4 <GetGSMReply>
 801117e:	f7fb fbbf 	bl	800c900 <strlen>
						if (i > 0)
 8011182:	2800      	cmp	r0, #0
 8011184:	d097      	beq.n	80110b6 <InitGSM+0x116>
						{
							HAL_Delay(3000);
 8011186:	4863      	ldr	r0, [pc, #396]	; (8011314 <InitGSM+0x374>)
 8011188:	f002 fe52 	bl	8013e30 <HAL_Delay>
							// SendGSMCode(" AT+CSMP=17,167,0,16");
							// i=strlen(GetGSMReply(0,"OK",0,"","Error: AT+CSMP=17,167,0,16  SMS Text mode parameter ",10));
							if (i > 0)
							{
								SendGSMCode(" AT+QENG=1,4");
 801118c:	4862      	ldr	r0, [pc, #392]	; (8011318 <InitGSM+0x378>)
 801118e:	f7fe fd9d 	bl	800fccc <SendGSMCode>
								i = strlen(GetGSMReply(0, "", 0, "", "Error: QENG=1,4 set eng mode for info ", gpsto_dev, "OK"));
 8011192:	4643      	mov	r3, r8
 8011194:	9302      	str	r3, [sp, #8]
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	2200      	movs	r2, #0
 801119a:	9301      	str	r3, [sp, #4]
 801119c:	4b5f      	ldr	r3, [pc, #380]	; (801131c <InitGSM+0x37c>)
 801119e:	0021      	movs	r1, r4
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	2000      	movs	r0, #0
 80111a4:	0023      	movs	r3, r4
 80111a6:	f7fe ff25 	bl	800fff4 <GetGSMReply>
 80111aa:	f7fb fba9 	bl	800c900 <strlen>

								if (i > 0)
 80111ae:	2800      	cmp	r0, #0
 80111b0:	d081      	beq.n	80110b6 <InitGSM+0x116>
								{

									HAL_Delay(1000);
 80111b2:	20fa      	movs	r0, #250	; 0xfa
 80111b4:	0080      	lsls	r0, r0, #2
 80111b6:	f002 fe3b 	bl	8013e30 <HAL_Delay>
									if (GSMProf == 0)
 80111ba:	4b59      	ldr	r3, [pc, #356]	; (8011320 <InitGSM+0x380>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80111bc:	4d59      	ldr	r5, [pc, #356]	; (8011324 <InitGSM+0x384>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d054      	beq.n	801126e <InitGSM+0x2ce>
									{
										Debug_Tx("_____________AIRTEL APN SET_____________________________");
										SetupGPRS("taisysnet"); // taisysnet");
									}
									else if (GSMProf == 1)
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d068      	beq.n	801129a <InitGSM+0x2fa>
 80111c8:	ae05      	add	r6, sp, #20
									{
										Debug_Tx("_____________BSNL APN SET_____________________________");
										SetupGPRS("bsnlnet"); // taisysnet");
									}
									HAL_Delay(1000);
 80111ca:	20fa      	movs	r0, #250	; 0xfa
 80111cc:	0080      	lsls	r0, r0, #2
 80111ce:	f002 fe2f 	bl	8013e30 <HAL_Delay>
 80111d2:	220c      	movs	r2, #12
 80111d4:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80111d6:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80111d8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80111da:	4953      	ldr	r1, [pc, #332]	; (8011328 <InitGSM+0x388>)
 80111dc:	4b3a      	ldr	r3, [pc, #232]	; (80112c8 <InitGSM+0x328>)
 80111de:	322c      	adds	r2, #44	; 0x2c
 80111e0:	f005 ff1a 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80111e4:	4b51      	ldr	r3, [pc, #324]	; (801132c <InitGSM+0x38c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80111e6:	0031      	movs	r1, r6
 80111e8:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 80111ea:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80111ec:	0028      	movs	r0, r5
 80111ee:	230a      	movs	r3, #10
 80111f0:	f005 ff12 	bl	8017018 <HAL_UART_Transmit>

									Debug_Tx("_____________Operator again_____________________________");
									// Debug_Tx(GSMSimOperator());
									HAL_Delay(1000);
 80111f4:	20fa      	movs	r0, #250	; 0xfa
 80111f6:	0080      	lsls	r0, r0, #2
 80111f8:	f002 fe1a 	bl	8013e30 <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 80111fc:	4e4c      	ldr	r6, [pc, #304]	; (8011330 <InitGSM+0x390>)
 80111fe:	0030      	movs	r0, r6
 8011200:	f7fe fd64 	bl	800fccc <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 8011204:	4643      	mov	r3, r8
 8011206:	9302      	str	r3, [sp, #8]
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	4d4a      	ldr	r5, [pc, #296]	; (8011334 <InitGSM+0x394>)
 801120c:	2200      	movs	r2, #0
 801120e:	0021      	movs	r1, r4
 8011210:	9301      	str	r3, [sp, #4]
 8011212:	2000      	movs	r0, #0
 8011214:	0023      	movs	r3, r4
 8011216:	9500      	str	r5, [sp, #0]
 8011218:	f7fe feec 	bl	800fff4 <GetGSMReply>
									SetTCPMux();
									HAL_Delay(1000);
 801121c:	20fa      	movs	r0, #250	; 0xfa
 801121e:	0080      	lsls	r0, r0, #2
 8011220:	f002 fe06 	bl	8013e30 <HAL_Delay>
	SendGSMCode(" AT+QIMUX=1");
 8011224:	0030      	movs	r0, r6
 8011226:	f7fe fd51 	bl	800fccc <SendGSMCode>
	return (GetGSMReply(0, "", 0, "", "Error: AT+QIMUX=1 set tcpMux", gpsto_dev, "OK"));
 801122a:	4643      	mov	r3, r8
 801122c:	9302      	str	r3, [sp, #8]
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	2200      	movs	r2, #0
 8011232:	9301      	str	r3, [sp, #4]
 8011234:	0021      	movs	r1, r4
 8011236:	0023      	movs	r3, r4
 8011238:	2000      	movs	r0, #0
 801123a:	9500      	str	r5, [sp, #0]
 801123c:	f7fe feda 	bl	800fff4 <GetGSMReply>
					}
				}
			}
		}
	}
}
 8011240:	b007      	add	sp, #28
 8011242:	bcf0      	pop	{r4, r5, r6, r7}
 8011244:	46bb      	mov	fp, r7
 8011246:	46b2      	mov	sl, r6
 8011248:	46a9      	mov	r9, r5
 801124a:	46a0      	mov	r8, r4
 801124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i = strlen(GetGSMReply(10, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 801124e:	f7fb fb57 	bl	800c900 <strlen>
		ck = ck - 1;
 8011252:	2301      	movs	r3, #1
 8011254:	4699      	mov	r9, r3
	while ((ck > 0) && (i < 1))
 8011256:	2800      	cmp	r0, #0
 8011258:	d100      	bne.n	801125c <InitGSM+0x2bc>
 801125a:	e712      	b.n	8011082 <InitGSM+0xe2>
 801125c:	e723      	b.n	80110a6 <InitGSM+0x106>
		i = strlen(GetGSMReply(15, "", 0, "", "Error: AT no Resp", gpsto_dev, "OK"));
 801125e:	f7fb fb4f 	bl	800c900 <strlen>
		ck = ck - 1;
 8011262:	2301      	movs	r3, #1
 8011264:	469a      	mov	sl, r3
	while ((ck > 0) && (i < 1))
 8011266:	2800      	cmp	r0, #0
 8011268:	d100      	bne.n	801126c <InitGSM+0x2cc>
 801126a:	e6cd      	b.n	8011008 <InitGSM+0x68>
 801126c:	e6de      	b.n	801102c <InitGSM+0x8c>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801126e:	220c      	movs	r2, #12
 8011270:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011272:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011274:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011276:	4930      	ldr	r1, [pc, #192]	; (8011338 <InitGSM+0x398>)
 8011278:	4b13      	ldr	r3, [pc, #76]	; (80112c8 <InitGSM+0x328>)
 801127a:	322c      	adds	r2, #44	; 0x2c
 801127c:	f005 fecc 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8011280:	4b2a      	ldr	r3, [pc, #168]	; (801132c <InitGSM+0x38c>)
 8011282:	ae05      	add	r6, sp, #20
 8011284:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011286:	2202      	movs	r2, #2
 8011288:	230a      	movs	r3, #10
 801128a:	0031      	movs	r1, r6
 801128c:	0028      	movs	r0, r5
 801128e:	f005 fec3 	bl	8017018 <HAL_UART_Transmit>
										SetupGPRS("taisysnet"); // taisysnet");
 8011292:	482a      	ldr	r0, [pc, #168]	; (801133c <InitGSM+0x39c>)
 8011294:	f7ff fc72 	bl	8010b7c <SetupGPRS>
 8011298:	e797      	b.n	80111ca <InitGSM+0x22a>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801129a:	220c      	movs	r2, #12
 801129c:	682b      	ldr	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801129e:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80112a0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80112a2:	4927      	ldr	r1, [pc, #156]	; (8011340 <InitGSM+0x3a0>)
 80112a4:	4b08      	ldr	r3, [pc, #32]	; (80112c8 <InitGSM+0x328>)
 80112a6:	322a      	adds	r2, #42	; 0x2a
 80112a8:	f005 feb6 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80112ac:	4b1f      	ldr	r3, [pc, #124]	; (801132c <InitGSM+0x38c>)
 80112ae:	ae05      	add	r6, sp, #20
 80112b0:	8033      	strh	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80112b2:	2202      	movs	r2, #2
 80112b4:	230a      	movs	r3, #10
 80112b6:	0031      	movs	r1, r6
 80112b8:	0028      	movs	r0, r5
 80112ba:	f005 fead 	bl	8017018 <HAL_UART_Transmit>
										SetupGPRS("bsnlnet"); // taisysnet");
 80112be:	4821      	ldr	r0, [pc, #132]	; (8011344 <InitGSM+0x3a4>)
 80112c0:	f7ff fc5c 	bl	8010b7c <SetupGPRS>
 80112c4:	e781      	b.n	80111ca <InitGSM+0x22a>
 80112c6:	46c0      	nop			; (mov r8, r8)
 80112c8:	00001388 	.word	0x00001388
 80112cc:	0801db9c 	.word	0x0801db9c
 80112d0:	0801d5e4 	.word	0x0801d5e4
 80112d4:	200000c8 	.word	0x200000c8
 80112d8:	0801d468 	.word	0x0801d468
 80112dc:	0801dba4 	.word	0x0801dba4
 80112e0:	0801d15c 	.word	0x0801d15c
 80112e4:	0801dbb8 	.word	0x0801dbb8
 80112e8:	0801dbcc 	.word	0x0801dbcc
 80112ec:	0801dbe0 	.word	0x0801dbe0
 80112f0:	0801dbec 	.word	0x0801dbec
 80112f4:	0801dc14 	.word	0x0801dc14
 80112f8:	0801dc20 	.word	0x0801dc20
 80112fc:	0801dc48 	.word	0x0801dc48
 8011300:	0801dc54 	.word	0x0801dc54
 8011304:	0801dc70 	.word	0x0801dc70
 8011308:	0801dc7c 	.word	0x0801dc7c
 801130c:	0801dcac 	.word	0x0801dcac
 8011310:	0801dcbc 	.word	0x0801dcbc
 8011314:	00000bb8 	.word	0x00000bb8
 8011318:	0801dce8 	.word	0x0801dce8
 801131c:	0801dcf8 	.word	0x0801dcf8
 8011320:	2000009c 	.word	0x2000009c
 8011324:	200049d4 	.word	0x200049d4
 8011328:	0801dda8 	.word	0x0801dda8
 801132c:	00000a0d 	.word	0x00000a0d
 8011330:	0801d748 	.word	0x0801d748
 8011334:	0801d754 	.word	0x0801d754
 8011338:	0801dd20 	.word	0x0801dd20
 801133c:	0801dd5c 	.word	0x0801dd5c
 8011340:	0801dd68 	.word	0x0801dd68
 8011344:	0801dda0 	.word	0x0801dda0

08011348 <SPI_flash_get_device_ID>:

void SPI_flash_TransmitReceive (uint8_t *data, uint16_t size){
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
}

void SPI_flash_get_device_ID( ) {
 8011348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801134a:	46de      	mov	lr, fp
 801134c:	4657      	mov	r7, sl
 801134e:	464e      	mov	r6, r9
 8011350:	4645      	mov	r5, r8
    SPI_flash_cs_low;
 8011352:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_get_device_ID( ) {
 8011354:	b5e0      	push	{r5, r6, r7, lr}
    SPI_flash_cs_low;
 8011356:	05db      	lsls	r3, r3, #23
void SPI_flash_get_device_ID( ) {
 8011358:	b0a3      	sub	sp, #140	; 0x8c
    SPI_flash_cs_low;
 801135a:	0018      	movs	r0, r3
 801135c:	2200      	movs	r2, #0
 801135e:	2110      	movs	r1, #16
 8011360:	469a      	mov	sl, r3
 8011362:	f003 fc2d 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Manufacturer);//Manufacturer);
 8011366:	2390      	movs	r3, #144	; 0x90
 8011368:	ad09      	add	r5, sp, #36	; 0x24
 801136a:	702b      	strb	r3, [r5, #0]
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 801136c:	23fa      	movs	r3, #250	; 0xfa
 801136e:	4f62      	ldr	r7, [pc, #392]	; (80114f8 <SPI_flash_get_device_ID+0x1b0>)
 8011370:	0029      	movs	r1, r5
 8011372:	009b      	lsls	r3, r3, #2
 8011374:	2201      	movs	r2, #1
 8011376:	0038      	movs	r0, r7
 8011378:	4699      	mov	r9, r3
 801137a:	f004 fe85 	bl	8016088 <HAL_SPI_Transmit>
    //SPI_flash_sent_address (address);
    uint8_t aa[10];
    aa[0]=0;
 801137e:	2300      	movs	r3, #0
    aa[1]=0;
    aa[2]=0;
    aa[3]=0;
    aa[4]=0;
 8011380:	ac06      	add	r4, sp, #24
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8011382:	0021      	movs	r1, r4
    aa[0]=0;
 8011384:	9306      	str	r3, [sp, #24]
    aa[4]=0;
 8011386:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 8011388:	2203      	movs	r2, #3
 801138a:	464b      	mov	r3, r9
 801138c:	0038      	movs	r0, r7
 801138e:	f004 fe7b 	bl	8016088 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8011392:	464a      	mov	r2, r9
 8011394:	2302      	movs	r3, #2
 8011396:	0021      	movs	r1, r4
 8011398:	9200      	str	r2, [sp, #0]
 801139a:	0038      	movs	r0, r7
 801139c:	0022      	movs	r2, r4
 801139e:	f004 ff3f 	bl	8016220 <HAL_SPI_TransmitReceive>
    aa[5]=0;
    SPI_flash_sent_address (aa);
    SPI_flash_TransmitReceive(aa, 2);
    SPI_flash_cs_high;
 80113a2:	4650      	mov	r0, sl
 80113a4:	2201      	movs	r2, #1
 80113a6:	2110      	movs	r1, #16
 80113a8:	f003 fc0a 	bl	8014bc0 <HAL_GPIO_WritePin>
    char bufd[100];
    sprintf(bufd,"Manufacturer ID[90h]: 0x%X%X \r\n", aa[0],aa[1]);
 80113ac:	7863      	ldrb	r3, [r4, #1]
 80113ae:	7822      	ldrb	r2, [r4, #0]
 80113b0:	4952      	ldr	r1, [pc, #328]	; (80114fc <SPI_flash_get_device_ID+0x1b4>)
 80113b2:	0028      	movs	r0, r5
 80113b4:	f007 ffd4 	bl	8019360 <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80113b8:	4a51      	ldr	r2, [pc, #324]	; (8011500 <SPI_flash_get_device_ID+0x1b8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80113ba:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80113bc:	4690      	mov	r8, r2
 80113be:	6813      	ldr	r3, [r2, #0]
 80113c0:	220c      	movs	r2, #12
 80113c2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80113c4:	f7fb fa9c 	bl	800c900 <strlen>
 80113c8:	494e      	ldr	r1, [pc, #312]	; (8011504 <SPI_flash_get_device_ID+0x1bc>)
 80113ca:	b282      	uxth	r2, r0
 80113cc:	468b      	mov	fp, r1
 80113ce:	000b      	movs	r3, r1
 80113d0:	4640      	mov	r0, r8
 80113d2:	0029      	movs	r1, r5
 80113d4:	f005 fe20 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80113d8:	494b      	ldr	r1, [pc, #300]	; (8011508 <SPI_flash_get_device_ID+0x1c0>)
 80113da:	ae05      	add	r6, sp, #20
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80113dc:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 80113de:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80113e0:	2202      	movs	r2, #2
 80113e2:	0031      	movs	r1, r6
 80113e4:	4640      	mov	r0, r8
 80113e6:	f005 fe17 	bl	8017018 <HAL_UART_Transmit>
    Debug_Tx((char*)bufd);

    SPI_flash_cs_low;
 80113ea:	4650      	mov	r0, sl
 80113ec:	2200      	movs	r2, #0
 80113ee:	2110      	movs	r1, #16
 80113f0:	f003 fbe6 	bl	8014bc0 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x9F);//Manufacturer);
 80113f4:	239f      	movs	r3, #159	; 0x9f
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80113f6:	0031      	movs	r1, r6
 80113f8:	7033      	strb	r3, [r6, #0]
 80113fa:	2201      	movs	r2, #1
 80113fc:	464b      	mov	r3, r9
 80113fe:	0038      	movs	r0, r7
 8011400:	f004 fe42 	bl	8016088 <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8011404:	2300      	movs	r3, #0
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8011406:	4648      	mov	r0, r9
       aa[1]=0;
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
 8011408:	80a3      	strh	r3, [r4, #4]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 801140a:	0022      	movs	r2, r4
 801140c:	0021      	movs	r1, r4
       aa[0]=0;
 801140e:	9306      	str	r3, [sp, #24]
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8011410:	9000      	str	r0, [sp, #0]
 8011412:	3303      	adds	r3, #3
 8011414:	0038      	movs	r0, r7
 8011416:	f004 ff03 	bl	8016220 <HAL_SPI_TransmitReceive>
       aa[5]=0;
      // SPI_flash_sent_address (aa);
       SPI_flash_TransmitReceive(aa, 3);
       SPI_flash_cs_high;
 801141a:	4650      	mov	r0, sl
 801141c:	2201      	movs	r2, #1
 801141e:	2110      	movs	r1, #16
 8011420:	f003 fbce 	bl	8014bc0 <HAL_GPIO_WritePin>
       //char bufd[100];
       sprintf(bufd,"Device ID [9Fh]: 0x%X%X%X\r\n", aa[0],aa[1],aa[2]);
 8011424:	78a0      	ldrb	r0, [r4, #2]
 8011426:	7863      	ldrb	r3, [r4, #1]
 8011428:	7822      	ldrb	r2, [r4, #0]
 801142a:	4938      	ldr	r1, [pc, #224]	; (801150c <SPI_flash_get_device_ID+0x1c4>)
 801142c:	9000      	str	r0, [sp, #0]
 801142e:	0028      	movs	r0, r5
 8011430:	f007 ff96 	bl	8019360 <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011434:	4640      	mov	r0, r8
 8011436:	220c      	movs	r2, #12
 8011438:	6803      	ldr	r3, [r0, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801143a:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801143c:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801143e:	f7fb fa5f 	bl	800c900 <strlen>
 8011442:	465b      	mov	r3, fp
 8011444:	0029      	movs	r1, r5
 8011446:	b282      	uxth	r2, r0
 8011448:	4640      	mov	r0, r8
 801144a:	f005 fde5 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 801144e:	492e      	ldr	r1, [pc, #184]	; (8011508 <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011450:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 8011452:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011454:	2202      	movs	r2, #2
 8011456:	0031      	movs	r1, r6
 8011458:	4640      	mov	r0, r8
 801145a:	f005 fddd 	bl	8017018 <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);



       SPI_flash_cs_low;
 801145e:	4650      	mov	r0, sl
 8011460:	2200      	movs	r2, #0
 8011462:	2110      	movs	r1, #16
 8011464:	f003 fbac 	bl	8014bc0 <HAL_GPIO_WritePin>
       SPI_flash_sent_byte(0x4B);//Manufacturer);
 8011468:	234b      	movs	r3, #75	; 0x4b
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 801146a:	0031      	movs	r1, r6
 801146c:	7033      	strb	r3, [r6, #0]
 801146e:	2201      	movs	r2, #1
 8011470:	464b      	mov	r3, r9
 8011472:	0038      	movs	r0, r7
 8011474:	f004 fe08 	bl	8016088 <HAL_SPI_Transmit>
       //SPI_flash_sent_address (address);
       //uint8_t aa[10];
       aa[0]=0;
 8011478:	2300      	movs	r3, #0
       aa[2]=0;
       aa[3]=0;
       aa[4]=0;
       aa[5]=0;
       //SPI_flash_sent_address (aa);
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 801147a:	0021      	movs	r1, r4
       aa[0]=0;
 801147c:	9306      	str	r3, [sp, #24]
       aa[4]=0;
 801147e:	80a3      	strh	r3, [r4, #4]
       HAL_SPI_Transmit(&hspi1, aa, 4,1000);
 8011480:	2204      	movs	r2, #4
 8011482:	464b      	mov	r3, r9
 8011484:	0038      	movs	r0, r7
 8011486:	f004 fdff 	bl	8016088 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 801148a:	464b      	mov	r3, r9
 801148c:	0022      	movs	r2, r4
 801148e:	0021      	movs	r1, r4
 8011490:	9300      	str	r3, [sp, #0]
 8011492:	0038      	movs	r0, r7
 8011494:	2306      	movs	r3, #6
 8011496:	f004 fec3 	bl	8016220 <HAL_SPI_TransmitReceive>
       SPI_flash_TransmitReceive(aa, 6);
       SPI_flash_cs_high;
 801149a:	4650      	mov	r0, sl
 801149c:	2201      	movs	r2, #1
 801149e:	2110      	movs	r1, #16
 80114a0:	f003 fb8e 	bl	8014bc0 <HAL_GPIO_WritePin>
      // char bufd[100];
       sprintf(bufd,"Unique ID [9Fh]: 0x%X%X%X%X%X%X\r\n", aa[0],aa[1],aa[2],aa[3],aa[4],aa[5] );
 80114a4:	7960      	ldrb	r0, [r4, #5]
 80114a6:	7863      	ldrb	r3, [r4, #1]
 80114a8:	7822      	ldrb	r2, [r4, #0]
 80114aa:	9003      	str	r0, [sp, #12]
 80114ac:	7920      	ldrb	r0, [r4, #4]
 80114ae:	4918      	ldr	r1, [pc, #96]	; (8011510 <SPI_flash_get_device_ID+0x1c8>)
 80114b0:	9002      	str	r0, [sp, #8]
 80114b2:	78e0      	ldrb	r0, [r4, #3]
 80114b4:	9001      	str	r0, [sp, #4]
 80114b6:	78a0      	ldrb	r0, [r4, #2]
 80114b8:	9000      	str	r0, [sp, #0]
 80114ba:	0028      	movs	r0, r5
 80114bc:	f007 ff50 	bl	8019360 <siprintf>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80114c0:	4643      	mov	r3, r8
 80114c2:	220c      	movs	r2, #12
 80114c4:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80114c6:	0028      	movs	r0, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80114c8:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80114ca:	f7fb fa19 	bl	800c900 <strlen>
 80114ce:	465b      	mov	r3, fp
 80114d0:	0029      	movs	r1, r5
 80114d2:	b282      	uxth	r2, r0
 80114d4:	4640      	mov	r0, r8
 80114d6:	f005 fd9f 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80114da:	490b      	ldr	r1, [pc, #44]	; (8011508 <SPI_flash_get_device_ID+0x1c0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80114dc:	230a      	movs	r3, #10
	char newline[2] = "\r\n";
 80114de:	8031      	strh	r1, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 80114e0:	2202      	movs	r2, #2
 80114e2:	0031      	movs	r1, r6
 80114e4:	4640      	mov	r0, r8
 80114e6:	f005 fd97 	bl	8017018 <HAL_UART_Transmit>
       Debug_Tx((char*)bufd);
}
 80114ea:	b023      	add	sp, #140	; 0x8c
 80114ec:	bcf0      	pop	{r4, r5, r6, r7}
 80114ee:	46bb      	mov	fp, r7
 80114f0:	46b2      	mov	sl, r6
 80114f2:	46a9      	mov	r9, r5
 80114f4:	46a0      	mov	r8, r4
 80114f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114f8:	200047fc 	.word	0x200047fc
 80114fc:	0801dde4 	.word	0x0801dde4
 8011500:	200049d4 	.word	0x200049d4
 8011504:	00001388 	.word	0x00001388
 8011508:	00000a0d 	.word	0x00000a0d
 801150c:	0801de04 	.word	0x0801de04
 8011510:	0801de20 	.word	0x0801de20

08011514 <SPI_flash_Sector_Erase>:
    SPI_flash_cs_high;
    SPI_flash_Write_Disable();

}

void SPI_flash_Sector_Erase(uint8_t* address) {
 8011514:	b5f0      	push	{r4, r5, r6, r7, lr}
    SPI_flash_cs_low;
 8011516:	24a0      	movs	r4, #160	; 0xa0
 8011518:	05e4      	lsls	r4, r4, #23
void SPI_flash_Sector_Erase(uint8_t* address) {
 801151a:	b083      	sub	sp, #12
 801151c:	0007      	movs	r7, r0
    SPI_flash_cs_low;
 801151e:	2200      	movs	r2, #0
 8011520:	0020      	movs	r0, r4
 8011522:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8011524:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 8011526:	f003 fb4b 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 801152a:	466a      	mov	r2, sp
 801152c:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 801152e:	4669      	mov	r1, sp
 8011530:	4d23      	ldr	r5, [pc, #140]	; (80115c0 <SPI_flash_Sector_Erase+0xac>)
 8011532:	00b6      	lsls	r6, r6, #2
 8011534:	71d3      	strb	r3, [r2, #7]
 8011536:	0028      	movs	r0, r5
 8011538:	0033      	movs	r3, r6
 801153a:	2201      	movs	r2, #1
 801153c:	3107      	adds	r1, #7
 801153e:	f004 fda3 	bl	8016088 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8011542:	0020      	movs	r0, r4
 8011544:	2201      	movs	r2, #1
 8011546:	2110      	movs	r1, #16
 8011548:	f003 fb3a 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 801154c:	0020      	movs	r0, r4
 801154e:	2200      	movs	r2, #0
 8011550:	2110      	movs	r1, #16
 8011552:	f003 fb35 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Sector_Erase);
 8011556:	466a      	mov	r2, sp
 8011558:	2320      	movs	r3, #32
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 801155a:	4669      	mov	r1, sp
 801155c:	71d3      	strb	r3, [r2, #7]
 801155e:	0028      	movs	r0, r5
 8011560:	0033      	movs	r3, r6
 8011562:	2201      	movs	r2, #1
 8011564:	3107      	adds	r1, #7
 8011566:	f004 fd8f 	bl	8016088 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 801156a:	0033      	movs	r3, r6
 801156c:	0039      	movs	r1, r7
 801156e:	2203      	movs	r2, #3
 8011570:	0028      	movs	r0, r5
 8011572:	f004 fd89 	bl	8016088 <HAL_SPI_Transmit>
    SPI_flash_sent_address (address);
    SPI_flash_cs_high;
 8011576:	0020      	movs	r0, r4
 8011578:	2201      	movs	r2, #1
 801157a:	2110      	movs	r1, #16
 801157c:	f003 fb20 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 8011580:	0020      	movs	r0, r4
 8011582:	2200      	movs	r2, #0
 8011584:	2110      	movs	r1, #16
 8011586:	f003 fb1b 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 801158a:	466a      	mov	r2, sp
 801158c:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 801158e:	4669      	mov	r1, sp
 8011590:	71d3      	strb	r3, [r2, #7]
 8011592:	0028      	movs	r0, r5
 8011594:	0033      	movs	r3, r6
 8011596:	2201      	movs	r2, #1
 8011598:	3107      	adds	r1, #7
 801159a:	f004 fd75 	bl	8016088 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 801159e:	0020      	movs	r0, r4
 80115a0:	2201      	movs	r2, #1
 80115a2:	2110      	movs	r1, #16
 80115a4:	f003 fb0c 	bl	8014bc0 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80115a8:	220c      	movs	r2, #12
 80115aa:	4806      	ldr	r0, [pc, #24]	; (80115c4 <SPI_flash_Sector_Erase+0xb0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 80115ac:	4906      	ldr	r1, [pc, #24]	; (80115c8 <SPI_flash_Sector_Erase+0xb4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80115ae:	6803      	ldr	r3, [r0, #0]
 80115b0:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 80115b2:	2396      	movs	r3, #150	; 0x96
 80115b4:	0032      	movs	r2, r6
 80115b6:	005b      	lsls	r3, r3, #1
 80115b8:	f005 fda0 	bl	80170fc <HAL_UART_Receive>
    SPI_flash_Write_Disable();
    //HAL_Delay(100);
	Debug_Rx();
}
 80115bc:	b003      	add	sp, #12
 80115be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115c0:	200047fc 	.word	0x200047fc
 80115c4:	200049d4 	.word	0x200049d4
 80115c8:	20004a68 	.word	0x20004a68

080115cc <SPI_flash_Chip_Erase>:
void SPI_flash_Chip_Erase(){
 80115cc:	b570      	push	{r4, r5, r6, lr}
    SPI_flash_cs_low;
 80115ce:	24a0      	movs	r4, #160	; 0xa0
 80115d0:	05e4      	lsls	r4, r4, #23
void SPI_flash_Chip_Erase(){
 80115d2:	b082      	sub	sp, #8
    SPI_flash_cs_low;
 80115d4:	0020      	movs	r0, r4
 80115d6:	2200      	movs	r2, #0
 80115d8:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80115da:	26fa      	movs	r6, #250	; 0xfa
    SPI_flash_cs_low;
 80115dc:	f003 faf0 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 80115e0:	466a      	mov	r2, sp
 80115e2:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80115e4:	4669      	mov	r1, sp
 80115e6:	4d1c      	ldr	r5, [pc, #112]	; (8011658 <SPI_flash_Chip_Erase+0x8c>)
 80115e8:	00b6      	lsls	r6, r6, #2
 80115ea:	71d3      	strb	r3, [r2, #7]
 80115ec:	0028      	movs	r0, r5
 80115ee:	0033      	movs	r3, r6
 80115f0:	2201      	movs	r2, #1
 80115f2:	3107      	adds	r1, #7
 80115f4:	f004 fd48 	bl	8016088 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 80115f8:	0020      	movs	r0, r4
 80115fa:	2201      	movs	r2, #1
 80115fc:	2110      	movs	r1, #16
 80115fe:	f003 fadf 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 8011602:	0020      	movs	r0, r4
 8011604:	2200      	movs	r2, #0
 8011606:	2110      	movs	r1, #16
 8011608:	f003 fada 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Chip_Erase);
 801160c:	466a      	mov	r2, sp
 801160e:	23c7      	movs	r3, #199	; 0xc7
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8011610:	4669      	mov	r1, sp
 8011612:	71d3      	strb	r3, [r2, #7]
 8011614:	0028      	movs	r0, r5
 8011616:	0033      	movs	r3, r6
 8011618:	2201      	movs	r2, #1
 801161a:	3107      	adds	r1, #7
 801161c:	f004 fd34 	bl	8016088 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8011620:	0020      	movs	r0, r4
 8011622:	2201      	movs	r2, #1
 8011624:	2110      	movs	r1, #16
 8011626:	f003 facb 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 801162a:	0020      	movs	r0, r4
 801162c:	2200      	movs	r2, #0
 801162e:	2110      	movs	r1, #16
 8011630:	f003 fac6 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 8011634:	466a      	mov	r2, sp
 8011636:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8011638:	4669      	mov	r1, sp
 801163a:	71d3      	strb	r3, [r2, #7]
 801163c:	0028      	movs	r0, r5
 801163e:	0033      	movs	r3, r6
 8011640:	2201      	movs	r2, #1
 8011642:	3107      	adds	r1, #7
 8011644:	f004 fd20 	bl	8016088 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8011648:	2201      	movs	r2, #1
 801164a:	2110      	movs	r1, #16
 801164c:	0020      	movs	r0, r4
 801164e:	f003 fab7 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_Write_Disable();
}
 8011652:	b002      	add	sp, #8
 8011654:	bd70      	pop	{r4, r5, r6, pc}
 8011656:	46c0      	nop			; (mov r8, r8)
 8011658:	200047fc 	.word	0x200047fc

0801165c <SPI_flash_Page_Program>:
}




void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 801165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801165e:	46ce      	mov	lr, r9
 8011660:	4647      	mov	r7, r8
    SPI_flash_cs_low;
 8011662:	26a0      	movs	r6, #160	; 0xa0
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8011664:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 8011666:	05f6      	lsls	r6, r6, #23
void SPI_flash_Page_Program(uint8_t* data_address, uint8_t* data, uint16_t size) {
 8011668:	b085      	sub	sp, #20
 801166a:	000f      	movs	r7, r1
 801166c:	4681      	mov	r9, r0
 801166e:	4690      	mov	r8, r2
    SPI_flash_cs_low;
 8011670:	0030      	movs	r0, r6
 8011672:	2200      	movs	r2, #0
 8011674:	2110      	movs	r1, #16
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8011676:	25fa      	movs	r5, #250	; 0xfa
    SPI_flash_cs_low;
 8011678:	f003 faa2 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Enable);
 801167c:	466a      	mov	r2, sp
 801167e:	2306      	movs	r3, #6
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8011680:	210f      	movs	r1, #15
 8011682:	4c29      	ldr	r4, [pc, #164]	; (8011728 <SPI_flash_Page_Program+0xcc>)
 8011684:	00ad      	lsls	r5, r5, #2
 8011686:	73d3      	strb	r3, [r2, #15]
 8011688:	4469      	add	r1, sp
 801168a:	002b      	movs	r3, r5
 801168c:	2201      	movs	r2, #1
 801168e:	0020      	movs	r0, r4
 8011690:	f004 fcfa 	bl	8016088 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 8011694:	0030      	movs	r0, r6
 8011696:	2201      	movs	r2, #1
 8011698:	2110      	movs	r1, #16
 801169a:	f003 fa91 	bl	8014bc0 <HAL_GPIO_WritePin>
	//Writes Data too address  upto size
    SPI_flash_Write_Enable();
    SPI_flash_cs_low;
 801169e:	0030      	movs	r0, r6
 80116a0:	2200      	movs	r2, #0
 80116a2:	2110      	movs	r1, #16
 80116a4:	f003 fa8c 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Page_Program);
 80116a8:	466a      	mov	r2, sp
 80116aa:	2302      	movs	r3, #2
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80116ac:	210f      	movs	r1, #15
 80116ae:	73d3      	strb	r3, [r2, #15]
 80116b0:	4469      	add	r1, sp
 80116b2:	002b      	movs	r3, r5
 80116b4:	2201      	movs	r2, #1
 80116b6:	0020      	movs	r0, r4
 80116b8:	f004 fce6 	bl	8016088 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 80116bc:	002b      	movs	r3, r5
 80116be:	4649      	mov	r1, r9
 80116c0:	2203      	movs	r2, #3
 80116c2:	0020      	movs	r0, r4
 80116c4:	f004 fce0 	bl	8016088 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 80116c8:	4643      	mov	r3, r8
 80116ca:	003a      	movs	r2, r7
 80116cc:	0039      	movs	r1, r7
 80116ce:	0020      	movs	r0, r4
 80116d0:	9500      	str	r5, [sp, #0]
 80116d2:	f004 fda5 	bl	8016220 <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address (data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 80116d6:	0030      	movs	r0, r6
 80116d8:	2201      	movs	r2, #1
 80116da:	2110      	movs	r1, #16
 80116dc:	f003 fa70 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_cs_low;
 80116e0:	0030      	movs	r0, r6
 80116e2:	2200      	movs	r2, #0
 80116e4:	2110      	movs	r1, #16
 80116e6:	f003 fa6b 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Write_Disable);
 80116ea:	466a      	mov	r2, sp
 80116ec:	2304      	movs	r3, #4
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80116ee:	210f      	movs	r1, #15
 80116f0:	73d3      	strb	r3, [r2, #15]
 80116f2:	4469      	add	r1, sp
 80116f4:	002b      	movs	r3, r5
 80116f6:	2201      	movs	r2, #1
 80116f8:	0020      	movs	r0, r4
 80116fa:	f004 fcc5 	bl	8016088 <HAL_SPI_Transmit>
    SPI_flash_cs_high;
 80116fe:	0030      	movs	r0, r6
 8011700:	2201      	movs	r2, #1
 8011702:	2110      	movs	r1, #16
 8011704:	f003 fa5c 	bl	8014bc0 <HAL_GPIO_WritePin>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011708:	220c      	movs	r2, #12
 801170a:	4808      	ldr	r0, [pc, #32]	; (801172c <SPI_flash_Page_Program+0xd0>)
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 801170c:	4908      	ldr	r1, [pc, #32]	; (8011730 <SPI_flash_Page_Program+0xd4>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801170e:	6803      	ldr	r3, [r0, #0]
 8011710:	621a      	str	r2, [r3, #32]
	HAL_UART_Receive(&huart3, (uint8_t *)inn, 1000, 300);
 8011712:	2396      	movs	r3, #150	; 0x96
 8011714:	002a      	movs	r2, r5
 8011716:	005b      	lsls	r3, r3, #1
 8011718:	f005 fcf0 	bl	80170fc <HAL_UART_Receive>
    SPI_flash_Write_Disable();

	Debug_Rx();
    //HAL_Delay(1);
}
 801171c:	b005      	add	sp, #20
 801171e:	bcc0      	pop	{r6, r7}
 8011720:	46b9      	mov	r9, r7
 8011722:	46b0      	mov	r8, r6
 8011724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011726:	46c0      	nop			; (mov r8, r8)
 8011728:	200047fc 	.word	0x200047fc
 801172c:	200049d4 	.word	0x200049d4
 8011730:	20004a68 	.word	0x20004a68

08011734 <SPI_flash_Read_Data>:

void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8011734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011736:	46ce      	mov	lr, r9
 8011738:	4647      	mov	r7, r8
	//Reads data from MEM starting from given address of size size
	//gets data to Data
    SPI_flash_cs_low;
 801173a:	23a0      	movs	r3, #160	; 0xa0
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 801173c:	b580      	push	{r7, lr}
    SPI_flash_cs_low;
 801173e:	05db      	lsls	r3, r3, #23
void SPI_flash_Read_Data(uint8_t* data_address, uint8_t* data, uint16_t size){
 8011740:	b085      	sub	sp, #20
 8011742:	000d      	movs	r5, r1
 8011744:	4680      	mov	r8, r0
 8011746:	0016      	movs	r6, r2
    SPI_flash_cs_low;
 8011748:	0018      	movs	r0, r3
 801174a:	2200      	movs	r2, #0
 801174c:	2110      	movs	r1, #16
 801174e:	4699      	mov	r9, r3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8011750:	27fa      	movs	r7, #250	; 0xfa
    SPI_flash_cs_low;
 8011752:	f003 fa35 	bl	8014bc0 <HAL_GPIO_WritePin>
    SPI_flash_sent_byte(Read_Data);
 8011756:	210f      	movs	r1, #15
 8011758:	2303      	movs	r3, #3
    HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 801175a:	4c10      	ldr	r4, [pc, #64]	; (801179c <SPI_flash_Read_Data+0x68>)
 801175c:	4469      	add	r1, sp
 801175e:	00bf      	lsls	r7, r7, #2
 8011760:	700b      	strb	r3, [r1, #0]
 8011762:	2201      	movs	r2, #1
 8011764:	003b      	movs	r3, r7
 8011766:	0020      	movs	r0, r4
 8011768:	f004 fc8e 	bl	8016088 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, Sent, 3,1000);
 801176c:	003b      	movs	r3, r7
 801176e:	4641      	mov	r1, r8
 8011770:	2203      	movs	r2, #3
 8011772:	0020      	movs	r0, r4
 8011774:	f004 fc88 	bl	8016088 <HAL_SPI_Transmit>
    HAL_SPI_TransmitReceive (&hspi1, data,data, size, 1000);
 8011778:	0033      	movs	r3, r6
 801177a:	002a      	movs	r2, r5
 801177c:	0029      	movs	r1, r5
 801177e:	0020      	movs	r0, r4
 8011780:	9700      	str	r7, [sp, #0]
 8011782:	f004 fd4d 	bl	8016220 <HAL_SPI_TransmitReceive>
    SPI_flash_sent_address(data_address);
    SPI_flash_TransmitReceive(data, size);
    SPI_flash_cs_high;
 8011786:	2201      	movs	r2, #1
 8011788:	2110      	movs	r1, #16
 801178a:	4648      	mov	r0, r9
 801178c:	f003 fa18 	bl	8014bc0 <HAL_GPIO_WritePin>
    //Debug_Tx((char*)data);
}
 8011790:	b005      	add	sp, #20
 8011792:	bcc0      	pop	{r6, r7}
 8011794:	46b9      	mov	r9, r7
 8011796:	46b0      	mov	r8, r6
 8011798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801179a:	46c0      	nop			; (mov r8, r8)
 801179c:	200047fc 	.word	0x200047fc

080117a0 <ReadQdata>:

}



int ReadQdata() {
 80117a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117a2:	46d6      	mov	lr, sl
 80117a4:	464f      	mov	r7, r9
 80117a6:	4646      	mov	r6, r8
	//Read data from the end of queue
	//printAdd();
	memset(ReadMData,0,4096);
 80117a8:	2280      	movs	r2, #128	; 0x80
int ReadQdata() {
 80117aa:	b5c0      	push	{r6, r7, lr}
	memset(ReadMData,0,4096);
 80117ac:	4c3e      	ldr	r4, [pc, #248]	; (80118a8 <ReadQdata+0x108>)
 80117ae:	2100      	movs	r1, #0
int ReadQdata() {
 80117b0:	b0c0      	sub	sp, #256	; 0x100
	memset(ReadMData,0,4096);
 80117b2:	0152      	lsls	r2, r2, #5
 80117b4:	0020      	movs	r0, r4
 80117b6:	f007 fe3f 	bl	8019438 <memset>
	memset(ReadMDataS,0,4096);
 80117ba:	2280      	movs	r2, #128	; 0x80
 80117bc:	4f3b      	ldr	r7, [pc, #236]	; (80118ac <ReadQdata+0x10c>)
 80117be:	0152      	lsls	r2, r2, #5
 80117c0:	2100      	movs	r1, #0
 80117c2:	0038      	movs	r0, r7
 80117c4:	f007 fe38 	bl	8019438 <memset>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80117c8:	4b39      	ldr	r3, [pc, #228]	; (80118b0 <ReadQdata+0x110>)
 80117ca:	4698      	mov	r8, r3
 80117cc:	4642      	mov	r2, r8
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	7852      	ldrb	r2, [r2, #1]
 80117d2:	021b      	lsls	r3, r3, #8
 80117d4:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 80117d6:	4a37      	ldr	r2, [pc, #220]	; (80118b4 <ReadQdata+0x114>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80117d8:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 80117da:	4293      	cmp	r3, r2
 80117dc:	dd50      	ble.n	8011880 <ReadQdata+0xe0>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 80117de:	4642      	mov	r2, r8
	WrtAdd[0]=addi/(256*256);
 80117e0:	4641      	mov	r1, r8
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 80117e2:	7892      	ldrb	r2, [r2, #2]
 80117e4:	260f      	movs	r6, #15
 80117e6:	18d3      	adds	r3, r2, r3
 80117e8:	3b01      	subs	r3, #1
	WrtAdd[0]=addi/(256*256);
 80117ea:	141a      	asrs	r2, r3, #16
 80117ec:	700a      	strb	r2, [r1, #0]
		return 0;
	}
	incrimentAddress2(-1);
	int len=WrtAdd[1]%16;
	len=len+1;
	WrtAdd[1]=WrtAdd[1]/16;
 80117ee:	22f0      	movs	r2, #240	; 0xf0
	WrtAdd[1]=(addi%(256*256))/256;
 80117f0:	121b      	asrs	r3, r3, #8
	len=len+1;
 80117f2:	401e      	ands	r6, r3
	WrtAdd[1]=WrtAdd[1]*16;
 80117f4:	4013      	ands	r3, r2
 80117f6:	704b      	strb	r3, [r1, #1]
	WrtAdd[2]=0;
 80117f8:	2300      	movs	r3, #0
 80117fa:	3601      	adds	r6, #1
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 80117fc:	0232      	lsls	r2, r6, #8
	WrtAdd[2]=0;
 80117fe:	708b      	strb	r3, [r1, #2]
	SPI_flash_Read_Data(WrtAdd , ReadMData , len*256);
 8011800:	4640      	mov	r0, r8
 8011802:	0021      	movs	r1, r4
 8011804:	b292      	uxth	r2, r2
 8011806:	f7ff ff95 	bl	8011734 <SPI_flash_Read_Data>

	char temp[256];
	for (int i=1;i<=len;i++){
 801180a:	4b2b      	ldr	r3, [pc, #172]	; (80118b8 <ReadQdata+0x118>)
		memset(temp,0,256);
		for (int j=0;j<256;j++){
 801180c:	2580      	movs	r5, #128	; 0x80
 801180e:	469a      	mov	sl, r3
			if (temp[j]==255){
				temp[j]=0;
				break;
			}
		}
		temp[255]=0;
 8011810:	4b2a      	ldr	r3, [pc, #168]	; (80118bc <ReadQdata+0x11c>)
 8011812:	3e01      	subs	r6, #1
 8011814:	4699      	mov	r9, r3
 8011816:	0236      	lsls	r6, r6, #8
 8011818:	1934      	adds	r4, r6, r4
		for (int j=0;j<256;j++){
 801181a:	006d      	lsls	r5, r5, #1
		memset(temp,0,256);
 801181c:	2100      	movs	r1, #0
 801181e:	22ff      	movs	r2, #255	; 0xff
 8011820:	4668      	mov	r0, sp
 8011822:	f007 fe09 	bl	8019438 <memset>
		for (int j=0;j<256;j++){
 8011826:	4669      	mov	r1, sp
 8011828:	2300      	movs	r3, #0
 801182a:	e003      	b.n	8011834 <ReadQdata+0x94>
 801182c:	3301      	adds	r3, #1
 801182e:	3101      	adds	r1, #1
 8011830:	42ab      	cmp	r3, r5
 8011832:	d006      	beq.n	8011842 <ReadQdata+0xa2>
			temp[j]=ReadMData[(len-i)*256+j];
 8011834:	5ce2      	ldrb	r2, [r4, r3]
 8011836:	700a      	strb	r2, [r1, #0]
			if (temp[j]==255){
 8011838:	2aff      	cmp	r2, #255	; 0xff
 801183a:	d1f7      	bne.n	801182c <ReadQdata+0x8c>
				temp[j]=0;
 801183c:	2200      	movs	r2, #0
 801183e:	4669      	mov	r1, sp
 8011840:	54ca      	strb	r2, [r1, r3]
		temp[255]=0;
 8011842:	23ff      	movs	r3, #255	; 0xff
 8011844:	2200      	movs	r2, #0
 8011846:	4669      	mov	r1, sp
 8011848:	0038      	movs	r0, r7
 801184a:	54ca      	strb	r2, [r1, r3]
		strcat(ReadMDataS,temp);
 801184c:	f7fb f858 	bl	800c900 <strlen>
	for (int i=1;i<=len;i++){
 8011850:	3e01      	subs	r6, #1
		strcat(ReadMDataS,temp);
 8011852:	4669      	mov	r1, sp
 8011854:	1838      	adds	r0, r7, r0
 8011856:	f007 feb5 	bl	80195c4 <stpcpy>
	for (int i=1;i<=len;i++){
 801185a:	3c01      	subs	r4, #1
		strcat(ReadMDataS,"\r\n");
 801185c:	2203      	movs	r2, #3
 801185e:	4651      	mov	r1, sl
	for (int i=1;i<=len;i++){
 8011860:	3eff      	subs	r6, #255	; 0xff
		strcat(ReadMDataS,"\r\n");
 8011862:	f007 ff5d 	bl	8019720 <memcpy>
	for (int i=1;i<=len;i++){
 8011866:	3cff      	subs	r4, #255	; 0xff
 8011868:	454e      	cmp	r6, r9
 801186a:	d1d7      	bne.n	801181c <ReadQdata+0x7c>
	}
	SPI_flash_Sector_Erase(WrtAdd);
 801186c:	4640      	mov	r0, r8
 801186e:	f7ff fe51 	bl	8011514 <SPI_flash_Sector_Erase>
	return 1;
 8011872:	2001      	movs	r0, #1
}
 8011874:	b040      	add	sp, #256	; 0x100
 8011876:	bce0      	pop	{r5, r6, r7}
 8011878:	46ba      	mov	sl, r7
 801187a:	46b1      	mov	r9, r6
 801187c:	46a8      	mov	r8, r5
 801187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011880:	220c      	movs	r2, #12
 8011882:	4c0f      	ldr	r4, [pc, #60]	; (80118c0 <ReadQdata+0x120>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011884:	490f      	ldr	r1, [pc, #60]	; (80118c4 <ReadQdata+0x124>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011886:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011888:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801188a:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 801188c:	4b0e      	ldr	r3, [pc, #56]	; (80118c8 <ReadQdata+0x128>)
 801188e:	f005 fbc3 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8011892:	466a      	mov	r2, sp
 8011894:	4b0d      	ldr	r3, [pc, #52]	; (80118cc <ReadQdata+0x12c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011896:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 8011898:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 801189a:	0020      	movs	r0, r4
 801189c:	230a      	movs	r3, #10
 801189e:	2202      	movs	r2, #2
 80118a0:	f005 fbba 	bl	8017018 <HAL_UART_Transmit>
		return 0;
 80118a4:	2000      	movs	r0, #0
}
 80118a6:	e7e5      	b.n	8011874 <ReadQdata+0xd4>
 80118a8:	20001f14 	.word	0x20001f14
 80118ac:	20002f14 	.word	0x20002f14
 80118b0:	200000c0 	.word	0x200000c0
 80118b4:	000300ff 	.word	0x000300ff
 80118b8:	0801d054 	.word	0x0801d054
 80118bc:	ffffff00 	.word	0xffffff00
 80118c0:	200049d4 	.word	0x200049d4
 80118c4:	0801de44 	.word	0x0801de44
 80118c8:	00001388 	.word	0x00001388
 80118cc:	00000a0d 	.word	0x00000a0d

080118d0 <InitMEMQ>:

void InitMEMQ(){
 80118d0:	b570      	push	{r4, r5, r6, lr}
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80118d2:	4d24      	ldr	r5, [pc, #144]	; (8011964 <InitMEMQ+0x94>)
void InitMEMQ(){
 80118d4:	b0c0      	sub	sp, #256	; 0x100
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80118d6:	782b      	ldrb	r3, [r5, #0]
 80118d8:	786a      	ldrb	r2, [r5, #1]
 80118da:	021b      	lsls	r3, r3, #8
 80118dc:	189b      	adds	r3, r3, r2
	if(addi<(256*256*3)+256){
 80118de:	4a22      	ldr	r2, [pc, #136]	; (8011968 <InitMEMQ+0x98>)
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256);
 80118e0:	021b      	lsls	r3, r3, #8
	if(addi<(256*256*3)+256){
 80118e2:	4293      	cmp	r3, r2
 80118e4:	dd01      	ble.n	80118ea <InitMEMQ+0x1a>
		for(i=0;i<2;i++){
			ReadQdata();
		}
	}

}
 80118e6:	b040      	add	sp, #256	; 0x100
 80118e8:	bd70      	pop	{r4, r5, r6, pc}
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80118ea:	220c      	movs	r2, #12
 80118ec:	4c1f      	ldr	r4, [pc, #124]	; (801196c <InitMEMQ+0x9c>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80118ee:	4920      	ldr	r1, [pc, #128]	; (8011970 <InitMEMQ+0xa0>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80118f0:	6823      	ldr	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80118f2:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80118f4:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 80118f6:	4b1f      	ldr	r3, [pc, #124]	; (8011974 <InitMEMQ+0xa4>)
 80118f8:	320f      	adds	r2, #15
 80118fa:	f005 fb8d 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80118fe:	466a      	mov	r2, sp
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011900:	0020      	movs	r0, r4
		for(i=0;i<5;i++){
 8011902:	2400      	movs	r4, #0
	char newline[2] = "\r\n";
 8011904:	4b1c      	ldr	r3, [pc, #112]	; (8011978 <InitMEMQ+0xa8>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011906:	4669      	mov	r1, sp
	char newline[2] = "\r\n";
 8011908:	8013      	strh	r3, [r2, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 801190a:	230a      	movs	r3, #10
 801190c:	2202      	movs	r2, #2
 801190e:	f005 fb83 	bl	8017018 <HAL_UART_Transmit>
 8011912:	4e1a      	ldr	r6, [pc, #104]	; (801197c <InitMEMQ+0xac>)
			sprintf(str, "%d**data********************************************************************************************************************************************************************************************************data*%d", i,i);
 8011914:	0022      	movs	r2, r4
 8011916:	0023      	movs	r3, r4
 8011918:	0031      	movs	r1, r6
 801191a:	4668      	mov	r0, sp
 801191c:	f007 fd20 	bl	8019360 <siprintf>
			WriteQdata((uint8_t*)str, strlen(str)+1);
 8011920:	4668      	mov	r0, sp
 8011922:	f7fa ffed 	bl	800c900 <strlen>
 8011926:	3001      	adds	r0, #1
 8011928:	b282      	uxth	r2, r0
	if (len<255){
 801192a:	2afe      	cmp	r2, #254	; 0xfe
 801192c:	d907      	bls.n	801193e <InitMEMQ+0x6e>
		for(i=0;i<5;i++){
 801192e:	3401      	adds	r4, #1
 8011930:	2c05      	cmp	r4, #5
 8011932:	d1ef      	bne.n	8011914 <InitMEMQ+0x44>
			ReadQdata();
 8011934:	f7ff ff34 	bl	80117a0 <ReadQdata>
 8011938:	f7ff ff32 	bl	80117a0 <ReadQdata>
}
 801193c:	e7d3      	b.n	80118e6 <InitMEMQ+0x16>
		SPI_flash_Page_Program(WrtAdd, data,len);
 801193e:	4669      	mov	r1, sp
 8011940:	0028      	movs	r0, r5
 8011942:	f7ff fe8b 	bl	801165c <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8011946:	782b      	ldrb	r3, [r5, #0]
 8011948:	786a      	ldrb	r2, [r5, #1]
 801194a:	021b      	lsls	r3, r3, #8
 801194c:	189b      	adds	r3, r3, r2
 801194e:	78aa      	ldrb	r2, [r5, #2]
 8011950:	021b      	lsls	r3, r3, #8
 8011952:	189b      	adds	r3, r3, r2
 8011954:	3301      	adds	r3, #1
 8011956:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 8011958:	141a      	asrs	r2, r3, #16
 801195a:	702a      	strb	r2, [r5, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 801195c:	121a      	asrs	r2, r3, #8
 801195e:	706a      	strb	r2, [r5, #1]
	WrtAdd[2]=(addi)%256;
 8011960:	70ab      	strb	r3, [r5, #2]
}
 8011962:	e7e4      	b.n	801192e <InitMEMQ+0x5e>
 8011964:	200000c0 	.word	0x200000c0
 8011968:	000300ff 	.word	0x000300ff
 801196c:	200049d4 	.word	0x200049d4
 8011970:	0801de54 	.word	0x0801de54
 8011974:	00001388 	.word	0x00001388
 8011978:	00000a0d 	.word	0x00000a0d
 801197c:	0801de70 	.word	0x0801de70

08011980 <writeConfig>:





int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 8011980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011982:	46de      	mov	lr, fp
 8011984:	4657      	mov	r7, sl
 8011986:	464e      	mov	r6, r9
 8011988:	4645      	mov	r5, r8
 801198a:	b5e0      	push	{r5, r6, r7, lr}
 801198c:	4c60      	ldr	r4, [pc, #384]	; (8011b10 <writeConfig+0x190>)
 801198e:	4699      	mov	r9, r3
 8011990:	44a5      	add	sp, r4
 8011992:	9bd0      	ldr	r3, [sp, #832]	; 0x340
 8011994:	4692      	mov	sl, r2
 8011996:	4698      	mov	r8, r3
	uint8_t data1[256];
	uint8_t data2[256];
	uint8_t data3[256];
	uint8_t add[]={0x00,0x00,0x00};
 8011998:	4b5e      	ldr	r3, [pc, #376]	; (8011b14 <writeConfig+0x194>)
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 801199a:	000f      	movs	r7, r1
	uint8_t add[]={0x00,0x00,0x00};
 801199c:	881a      	ldrh	r2, [r3, #0]
 801199e:	a902      	add	r1, sp, #8
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80119a0:	9ece      	ldr	r6, [sp, #824]	; 0x338
 80119a2:	9dcf      	ldr	r5, [sp, #828]	; 0x33c
	uint8_t add[]={0x00,0x00,0x00};
 80119a4:	808a      	strh	r2, [r1, #4]

	SPI_flash_Read_Data(add , data1 , 256);
 80119a6:	2280      	movs	r2, #128	; 0x80
	uint8_t add[]={0x00,0x00,0x00};
 80119a8:	789b      	ldrb	r3, [r3, #2]
int writeConfig(char* RegNo,char* INSMS,char* OUTSMS,char* EmgIP,char* RegIP,char* TrackIP,char* OtherData){
 80119aa:	4683      	mov	fp, r0
	uint8_t add[]={0x00,0x00,0x00};
 80119ac:	718b      	strb	r3, [r1, #6]
	SPI_flash_Read_Data(add , data1 , 256);
 80119ae:	0052      	lsls	r2, r2, #1
 80119b0:	a904      	add	r1, sp, #16
 80119b2:	a803      	add	r0, sp, #12
 80119b4:	f7ff febe 	bl	8011734 <SPI_flash_Read_Data>
	add[1]=0x01;
 80119b8:	2301      	movs	r3, #1
 80119ba:	aa02      	add	r2, sp, #8
 80119bc:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data2 , 256);
 80119be:	2280      	movs	r2, #128	; 0x80
 80119c0:	a944      	add	r1, sp, #272	; 0x110
 80119c2:	0052      	lsls	r2, r2, #1
 80119c4:	a803      	add	r0, sp, #12
 80119c6:	f7ff feb5 	bl	8011734 <SPI_flash_Read_Data>
	add[1]=0x02;
 80119ca:	2302      	movs	r3, #2
 80119cc:	aa02      	add	r2, sp, #8
 80119ce:	7153      	strb	r3, [r2, #5]
	SPI_flash_Read_Data(add , data3 , 256);
 80119d0:	2280      	movs	r2, #128	; 0x80
 80119d2:	a984      	add	r1, sp, #528	; 0x210
 80119d4:	0052      	lsls	r2, r2, #1
 80119d6:	a803      	add	r0, sp, #12
 80119d8:	f7ff feac 	bl	8011734 <SPI_flash_Read_Data>



	int i=0;
	int j=0;
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80119dc:	465b      	mov	r3, fp
	SPI_flash_Read_Data(add , data3 , 256);
 80119de:	2401      	movs	r4, #1
 80119e0:	3b01      	subs	r3, #1
 80119e2:	9301      	str	r3, [sp, #4]
		data1[j+i]=RegNo[i];
 80119e4:	9b01      	ldr	r3, [sp, #4]
 80119e6:	aa02      	add	r2, sp, #8
 80119e8:	5d1b      	ldrb	r3, [r3, r4]
 80119ea:	3207      	adds	r2, #7
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80119ec:	4658      	mov	r0, fp
		data1[j+i]=RegNo[i];
 80119ee:	5513      	strb	r3, [r2, r4]
	for(i=0;i<=strlen(RegNo)&&i<RegNoLen;i++){
 80119f0:	f7fa ff86 	bl	800c900 <strlen>
 80119f4:	42a0      	cmp	r0, r4
 80119f6:	d302      	bcc.n	80119fe <writeConfig+0x7e>
 80119f8:	3401      	adds	r4, #1
 80119fa:	2c11      	cmp	r4, #17
 80119fc:	d1f2      	bne.n	80119e4 <writeConfig+0x64>
 80119fe:	2400      	movs	r4, #0
 8011a00:	e001      	b.n	8011a06 <writeConfig+0x86>
	}
	j=j+RegNoLen;

	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8011a02:	2c64      	cmp	r4, #100	; 0x64
 8011a04:	d009      	beq.n	8011a1a <writeConfig+0x9a>
		data1[j+i]=INSMS[i];
 8011a06:	5d3a      	ldrb	r2, [r7, r4]
 8011a08:	ab04      	add	r3, sp, #16
 8011a0a:	191b      	adds	r3, r3, r4
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8011a0c:	0038      	movs	r0, r7
		data1[j+i]=INSMS[i];
 8011a0e:	741a      	strb	r2, [r3, #16]
	for(i=0;i<=strlen(INSMS)&&i<INSMSLen;i++){
 8011a10:	3401      	adds	r4, #1
 8011a12:	f7fa ff75 	bl	800c900 <strlen>
 8011a16:	42a0      	cmp	r0, r4
 8011a18:	d2f3      	bcs.n	8011a02 <writeConfig+0x82>
 8011a1a:	2700      	movs	r7, #0
 8011a1c:	ac21      	add	r4, sp, #132	; 0x84
 8011a1e:	e001      	b.n	8011a24 <writeConfig+0xa4>
	}
	j=j+INSMSLen;

	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8011a20:	2f3c      	cmp	r7, #60	; 0x3c
 8011a22:	d008      	beq.n	8011a36 <writeConfig+0xb6>
		data1[j+i]=OUTSMS[i];
 8011a24:	4653      	mov	r3, sl
 8011a26:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8011a28:	4650      	mov	r0, sl
		data1[j+i]=OUTSMS[i];
 8011a2a:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(OUTSMS)&&i<OUTSMSLen;i++){
 8011a2c:	3701      	adds	r7, #1
 8011a2e:	f7fa ff67 	bl	800c900 <strlen>
 8011a32:	42b8      	cmp	r0, r7
 8011a34:	d2f4      	bcs.n	8011a20 <writeConfig+0xa0>
 8011a36:	ab02      	add	r3, sp, #8
 8011a38:	469c      	mov	ip, r3
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	2408      	movs	r4, #8
 8011a3e:	425b      	negs	r3, r3
 8011a40:	34ff      	adds	r4, #255	; 0xff
 8011a42:	444b      	add	r3, r9
 8011a44:	2701      	movs	r7, #1
 8011a46:	469a      	mov	sl, r3
 8011a48:	4464      	add	r4, ip
 8011a4a:	e002      	b.n	8011a52 <writeConfig+0xd2>
	}
	j=0;
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8011a4c:	3701      	adds	r7, #1
 8011a4e:	2f29      	cmp	r7, #41	; 0x29
 8011a50:	d007      	beq.n	8011a62 <writeConfig+0xe2>
		data2[j+i]=EmgIP[i];
 8011a52:	4653      	mov	r3, sl
 8011a54:	5ddb      	ldrb	r3, [r3, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8011a56:	4648      	mov	r0, r9
		data2[j+i]=EmgIP[i];
 8011a58:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(EmgIP)&&i<EmgIPLen;i++){
 8011a5a:	f7fa ff51 	bl	800c900 <strlen>
 8011a5e:	42b8      	cmp	r0, r7
 8011a60:	d2f4      	bcs.n	8011a4c <writeConfig+0xcc>
 8011a62:	2700      	movs	r7, #0
 8011a64:	ac4e      	add	r4, sp, #312	; 0x138
 8011a66:	e001      	b.n	8011a6c <writeConfig+0xec>
	}
	j=j+EmgIPLen;

	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8011a68:	2f28      	cmp	r7, #40	; 0x28
 8011a6a:	d007      	beq.n	8011a7c <writeConfig+0xfc>
		data2[j+i]=RegIP[i];
 8011a6c:	5df3      	ldrb	r3, [r6, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8011a6e:	0030      	movs	r0, r6
		data2[j+i]=RegIP[i];
 8011a70:	55e3      	strb	r3, [r4, r7]
	for(i=0;i<=strlen(RegIP)&&i<RegIPLen;i++){
 8011a72:	3701      	adds	r7, #1
 8011a74:	f7fa ff44 	bl	800c900 <strlen>
 8011a78:	4287      	cmp	r7, r0
 8011a7a:	d9f5      	bls.n	8011a68 <writeConfig+0xe8>
 8011a7c:	2600      	movs	r6, #0
 8011a7e:	ac58      	add	r4, sp, #352	; 0x160
 8011a80:	e001      	b.n	8011a86 <writeConfig+0x106>
	}
	j=j+RegIPLen;


	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8011a82:	2e28      	cmp	r6, #40	; 0x28
 8011a84:	d007      	beq.n	8011a96 <writeConfig+0x116>
		data2[j+i]=TrackIP[i];
 8011a86:	5dab      	ldrb	r3, [r5, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8011a88:	0028      	movs	r0, r5
		data2[j+i]=TrackIP[i];
 8011a8a:	55a3      	strb	r3, [r4, r6]
	for(i=0;i<=strlen(TrackIP)&&i<TrackIPLen;i++){
 8011a8c:	3601      	adds	r6, #1
 8011a8e:	f7fa ff37 	bl	800c900 <strlen>
 8011a92:	42b0      	cmp	r0, r6
 8011a94:	d2f5      	bcs.n	8011a82 <writeConfig+0x102>
 8011a96:	ab02      	add	r3, sp, #8
 8011a98:	469c      	mov	ip, r3
	}
	j=0;


	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 8011a9a:	2702      	movs	r7, #2
 8011a9c:	4643      	mov	r3, r8
 8011a9e:	4d1e      	ldr	r5, [pc, #120]	; (8011b18 <writeConfig+0x198>)
 8011aa0:	2401      	movs	r4, #1
 8011aa2:	4465      	add	r5, ip
 8011aa4:	1e5e      	subs	r6, r3, #1
 8011aa6:	37ff      	adds	r7, #255	; 0xff
 8011aa8:	e002      	b.n	8011ab0 <writeConfig+0x130>
 8011aaa:	3401      	adds	r4, #1
 8011aac:	42bc      	cmp	r4, r7
 8011aae:	d006      	beq.n	8011abe <writeConfig+0x13e>
		data3[j+i]=OtherData[i];
 8011ab0:	5d33      	ldrb	r3, [r6, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 8011ab2:	4640      	mov	r0, r8
		data3[j+i]=OtherData[i];
 8011ab4:	552b      	strb	r3, [r5, r4]
	for(i=0;i<=strlen(OtherData)&&i<OtherDataLen;i++){
 8011ab6:	f7fa ff23 	bl	800c900 <strlen>
 8011aba:	42a0      	cmp	r0, r4
 8011abc:	d2f5      	bcs.n	8011aaa <writeConfig+0x12a>
	}
	j=j+OtherDataLen;


	add[1]=0x00;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	aa02      	add	r2, sp, #8
 8011ac2:	7153      	strb	r3, [r2, #5]

	SPI_flash_Sector_Erase(add);
 8011ac4:	a803      	add	r0, sp, #12
 8011ac6:	f7ff fd25 	bl	8011514 <SPI_flash_Sector_Erase>

	SPI_flash_Page_Program(add, data1,256);
 8011aca:	2280      	movs	r2, #128	; 0x80
 8011acc:	a904      	add	r1, sp, #16
 8011ace:	a803      	add	r0, sp, #12
 8011ad0:	0052      	lsls	r2, r2, #1
 8011ad2:	f7ff fdc3 	bl	801165c <SPI_flash_Page_Program>
	add[1]=0x01;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	aa02      	add	r2, sp, #8
 8011ada:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data2,256);
 8011adc:	2280      	movs	r2, #128	; 0x80
 8011ade:	a944      	add	r1, sp, #272	; 0x110
 8011ae0:	a803      	add	r0, sp, #12
 8011ae2:	0052      	lsls	r2, r2, #1
 8011ae4:	f7ff fdba 	bl	801165c <SPI_flash_Page_Program>
	add[1]=0x02;
 8011ae8:	2302      	movs	r3, #2
 8011aea:	aa02      	add	r2, sp, #8
 8011aec:	7153      	strb	r3, [r2, #5]
	SPI_flash_Page_Program(add, data3,256);
 8011aee:	2280      	movs	r2, #128	; 0x80
 8011af0:	a803      	add	r0, sp, #12
 8011af2:	0052      	lsls	r2, r2, #1
 8011af4:	a984      	add	r1, sp, #528	; 0x210
 8011af6:	f7ff fdb1 	bl	801165c <SPI_flash_Page_Program>
	return 1;

}
 8011afa:	2001      	movs	r0, #1
 8011afc:	23c5      	movs	r3, #197	; 0xc5
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	449d      	add	sp, r3
 8011b02:	bcf0      	pop	{r4, r5, r6, r7}
 8011b04:	46bb      	mov	fp, r7
 8011b06:	46b2      	mov	sl, r6
 8011b08:	46a9      	mov	r9, r5
 8011b0a:	46a0      	mov	r8, r4
 8011b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b0e:	46c0      	nop			; (mov r8, r8)
 8011b10:	fffffcec 	.word	0xfffffcec
 8011b14:	0801ceb8 	.word	0x0801ceb8
 8011b18:	00000207 	.word	0x00000207

08011b1c <readRegNo>:



char* readRegNo(){
 8011b1c:	b510      	push	{r4, lr}
 8011b1e:	b082      	sub	sp, #8
	uint8_t add4[]={0x00, 0x00,0x00};
 8011b20:	4669      	mov	r1, sp
 8011b22:	4b0d      	ldr	r3, [pc, #52]	; (8011b58 <readRegNo+0x3c>)

    memset(dataR,0,256);
 8011b24:	4c0d      	ldr	r4, [pc, #52]	; (8011b5c <readRegNo+0x40>)
	uint8_t add4[]={0x00, 0x00,0x00};
 8011b26:	881a      	ldrh	r2, [r3, #0]
    memset(dataR,0,256);
 8011b28:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 8011b2a:	808a      	strh	r2, [r1, #4]
    memset(dataR,0,256);
 8011b2c:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 8011b2e:	789b      	ldrb	r3, [r3, #2]
    memset(dataR,0,256);
 8011b30:	0052      	lsls	r2, r2, #1
	uint8_t add4[]={0x00, 0x00,0x00};
 8011b32:	718b      	strb	r3, [r1, #6]
    memset(dataR,0,256);
 8011b34:	2100      	movs	r1, #0
 8011b36:	f007 fc7f 	bl	8019438 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 8011b3a:	a801      	add	r0, sp, #4
 8011b3c:	2210      	movs	r2, #16
 8011b3e:	0021      	movs	r1, r4
 8011b40:	f7ff fdf8 	bl	8011734 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8011b44:	0020      	movs	r0, r4
 8011b46:	f7fa fedb 	bl	800c900 <strlen>
 8011b4a:	2801      	cmp	r0, #1
 8011b4c:	d800      	bhi.n	8011b50 <readRegNo+0x34>

		//Debug_Tx((char*) dataR);
		return (char*) dataR;
	}
	else{
		return "--Err RegNo--";
 8011b4e:	4c04      	ldr	r4, [pc, #16]	; (8011b60 <readRegNo+0x44>)
	}

}
 8011b50:	0020      	movs	r0, r4
 8011b52:	b002      	add	sp, #8
 8011b54:	bd10      	pop	{r4, pc}
 8011b56:	46c0      	nop			; (mov r8, r8)
 8011b58:	0801ceb8 	.word	0x0801ceb8
 8011b5c:	20003fd4 	.word	0x20003fd4
 8011b60:	0801df48 	.word	0x0801df48

08011b64 <detectAcc>:


int detectAcc(){
 8011b64:	b570      	push	{r4, r5, r6, lr}
	readAcc();
 8011b66:	f7fd ffab 	bl	800fac0 <readAcc.isra.0>
	}
	else if(AccGyroStatus==3){
		strcat(Head,AlartStr_RashTurning);
	}*/

	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8011b6a:	4c14      	ldr	r4, [pc, #80]	; (8011bbc <detectAcc+0x58>)
 8011b6c:	6861      	ldr	r1, [r4, #4]
 8011b6e:	6820      	ldr	r0, [r4, #0]
 8011b70:	f7fb f940 	bl	800cdf4 <__aeabi_fadd>
 8011b74:	68a1      	ldr	r1, [r4, #8]
 8011b76:	f7fb f93d 	bl	800cdf4 <__aeabi_fadd>
 8011b7a:	4911      	ldr	r1, [pc, #68]	; (8011bc0 <detectAcc+0x5c>)
 8011b7c:	1c05      	adds	r5, r0, #0
 8011b7e:	f7fb f8b5 	bl	800ccec <__aeabi_fcmpgt>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d115      	bne.n	8011bb2 <detectAcc+0x4e>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 8011b86:	490f      	ldr	r1, [pc, #60]	; (8011bc4 <detectAcc+0x60>)
 8011b88:	1c28      	adds	r0, r5, #0
 8011b8a:	f7fb f89b 	bl	800ccc4 <__aeabi_fcmplt>
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	d111      	bne.n	8011bb6 <detectAcc+0x52>
	if((ACC_GYRO_data[3]+ACC_GYRO_data[4]+ACC_GYRO_data[5])>2000){return 3;}
 8011b92:	6921      	ldr	r1, [r4, #16]
 8011b94:	68e0      	ldr	r0, [r4, #12]
 8011b96:	f7fb f92d 	bl	800cdf4 <__aeabi_fadd>
 8011b9a:	6961      	ldr	r1, [r4, #20]
 8011b9c:	f7fb f92a 	bl	800cdf4 <__aeabi_fadd>
 8011ba0:	4907      	ldr	r1, [pc, #28]	; (8011bc0 <detectAcc+0x5c>)
 8011ba2:	f7fb f8a3 	bl	800ccec <__aeabi_fcmpgt>


	return 0;
 8011ba6:	1e43      	subs	r3, r0, #1
 8011ba8:	4198      	sbcs	r0, r3
 8011baa:	4243      	negs	r3, r0
 8011bac:	2003      	movs	r0, #3
 8011bae:	4018      	ands	r0, r3
}
 8011bb0:	bd70      	pop	{r4, r5, r6, pc}
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])>2000){return 1;}
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	e7fc      	b.n	8011bb0 <detectAcc+0x4c>
	if((ACC_GYRO_data[0]+ACC_GYRO_data[1]+ACC_GYRO_data[2])<-2000){return 2;}
 8011bb6:	2002      	movs	r0, #2
 8011bb8:	e7fa      	b.n	8011bb0 <detectAcc+0x4c>
 8011bba:	46c0      	nop			; (mov r8, r8)
 8011bbc:	200002e4 	.word	0x200002e4
 8011bc0:	44fa0000 	.word	0x44fa0000
 8011bc4:	c4fa0000 	.word	0xc4fa0000

08011bc8 <initGPS>:
	//GPS_Tx("$PSTMSAVEPAR\r\n\0");

	//GPS_Tx("$PSTMSRR\r\n\0");


	GPSInfo.lat=0.0;
 8011bc8:	2300      	movs	r3, #0
void initGPS(){
 8011bca:	b570      	push	{r4, r5, r6, lr}
	GPSInfo.lat=0.0;
 8011bcc:	4c0d      	ldr	r4, [pc, #52]	; (8011c04 <initGPS+0x3c>)
	GPSInfo.pdop=0.0;
	GPSInfo.head=0.0;
	GPSInfo.speed=0.0;
	GPSInfo.fix=0;
	GPSInfo.sat=0;
	strcpy(GPSInfo.latD,"x");
 8011bce:	2678      	movs	r6, #120	; 0x78
	strcpy(GPSInfo.lonD,"x");
 8011bd0:	0020      	movs	r0, r4
	GPSInfo.lat=0.0;
 8011bd2:	6023      	str	r3, [r4, #0]
	GPSInfo.lon=0.0;
 8011bd4:	6063      	str	r3, [r4, #4]
	GPSInfo.alt=0.0;
 8011bd6:	60a3      	str	r3, [r4, #8]
	GPSInfo.hdop=0.0;
 8011bd8:	60e3      	str	r3, [r4, #12]
	GPSInfo.pdop=0.0;
 8011bda:	6123      	str	r3, [r4, #16]
	GPSInfo.head=0.0;
 8011bdc:	6163      	str	r3, [r4, #20]
	GPSInfo.speed=0.0;
 8011bde:	61a3      	str	r3, [r4, #24]
	GPSInfo.fix=0;
 8011be0:	2300      	movs	r3, #0
	strcpy(GPSInfo.lonD,"x");
 8011be2:	4d09      	ldr	r5, [pc, #36]	; (8011c08 <initGPS+0x40>)
	strcpy(GPSInfo.latD,"x");
 8011be4:	8526      	strh	r6, [r4, #40]	; 0x28
	strcpy(GPSInfo.lonD,"x");
 8011be6:	0029      	movs	r1, r5
 8011be8:	2202      	movs	r2, #2
 8011bea:	302b      	adds	r0, #43	; 0x2b
	GPSInfo.fix=0;
 8011bec:	61e3      	str	r3, [r4, #28]
	GPSInfo.sat=0;
 8011bee:	6223      	str	r3, [r4, #32]
	strcpy(GPSInfo.lonD,"x");
 8011bf0:	f007 fd96 	bl	8019720 <memcpy>
	strcpy(GPSInfo.time,"x");
	strcpy(GPSInfo.date,"x");
 8011bf4:	0020      	movs	r0, r4
 8011bf6:	0029      	movs	r1, r5
	strcpy(GPSInfo.time,"x");
 8011bf8:	85e6      	strh	r6, [r4, #46]	; 0x2e
	strcpy(GPSInfo.date,"x");
 8011bfa:	2202      	movs	r2, #2
 8011bfc:	303d      	adds	r0, #61	; 0x3d
 8011bfe:	f007 fd8f 	bl	8019720 <memcpy>
}
 8011c02:	bd70      	pop	{r4, r5, r6, pc}
 8011c04:	200004f4 	.word	0x200004f4
 8011c08:	0801df58 	.word	0x0801df58

08011c0c <getGPSString>:
void getGPSString(){
 8011c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c0e:	46c6      	mov	lr, r8
 8011c10:	b500      	push	{lr}
	memset(gpsDataRet,0,70);
 8011c12:	4e29      	ldr	r6, [pc, #164]	; (8011cb8 <getGPSString+0xac>)
 8011c14:	2246      	movs	r2, #70	; 0x46
 8011c16:	2100      	movs	r1, #0
 8011c18:	0030      	movs	r0, r6
void getGPSString(){
 8011c1a:	b096      	sub	sp, #88	; 0x58
	memset(gpsDataRet,0,70);
 8011c1c:	f007 fc0c 	bl	8019438 <memset>

	if(GPSInfo.fix==1){
 8011c20:	4c26      	ldr	r4, [pc, #152]	; (8011cbc <getGPSString+0xb0>)
 8011c22:	69e3      	ldr	r3, [r4, #28]
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	d040      	beq.n	8011caa <getGPSString+0x9e>
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_RESET);
 8011c28:	2200      	movs	r2, #0
 8011c2a:	2104      	movs	r1, #4
 8011c2c:	4824      	ldr	r0, [pc, #144]	; (8011cc0 <getGPSString+0xb4>)
 8011c2e:	f002 ffc7 	bl	8014bc0 <HAL_GPIO_WritePin>
	}




	sprintf(gpsDataRet, "%1d,%s,%s,%0.6f,%1s,%0.6f,%s,%0.1f,%0.2f,%d,%0.1f,%0.1f,%0.1f",
 8011c32:	233d      	movs	r3, #61	; 0x3d
 8011c34:	68e0      	ldr	r0, [r4, #12]
 8011c36:	4698      	mov	r8, r3
 8011c38:	f7fd fe36 	bl	800f8a8 <__aeabi_f2d>
 8011c3c:	69e7      	ldr	r7, [r4, #28]
 8011c3e:	9014      	str	r0, [sp, #80]	; 0x50
 8011c40:	9115      	str	r1, [sp, #84]	; 0x54
 8011c42:	6920      	ldr	r0, [r4, #16]
 8011c44:	f7fd fe30 	bl	800f8a8 <__aeabi_f2d>
 8011c48:	9012      	str	r0, [sp, #72]	; 0x48
 8011c4a:	9113      	str	r1, [sp, #76]	; 0x4c
 8011c4c:	68a0      	ldr	r0, [r4, #8]
 8011c4e:	f7fd fe2b 	bl	800f8a8 <__aeabi_f2d>
 8011c52:	9010      	str	r0, [sp, #64]	; 0x40
 8011c54:	9111      	str	r1, [sp, #68]	; 0x44
 8011c56:	6a23      	ldr	r3, [r4, #32]
 8011c58:	4d1a      	ldr	r5, [pc, #104]	; (8011cc4 <getGPSString+0xb8>)
 8011c5a:	930e      	str	r3, [sp, #56]	; 0x38
 8011c5c:	6960      	ldr	r0, [r4, #20]
 8011c5e:	f7fd fe23 	bl	800f8a8 <__aeabi_f2d>
 8011c62:	900c      	str	r0, [sp, #48]	; 0x30
 8011c64:	910d      	str	r1, [sp, #52]	; 0x34
 8011c66:	69a0      	ldr	r0, [r4, #24]
 8011c68:	f7fd fe1e 	bl	800f8a8 <__aeabi_f2d>
 8011c6c:	0023      	movs	r3, r4
 8011c6e:	900a      	str	r0, [sp, #40]	; 0x28
 8011c70:	910b      	str	r1, [sp, #44]	; 0x2c
 8011c72:	332b      	adds	r3, #43	; 0x2b
 8011c74:	9308      	str	r3, [sp, #32]
 8011c76:	6860      	ldr	r0, [r4, #4]
 8011c78:	f7fd fe16 	bl	800f8a8 <__aeabi_f2d>
 8011c7c:	0023      	movs	r3, r4
 8011c7e:	9006      	str	r0, [sp, #24]
 8011c80:	9107      	str	r1, [sp, #28]
 8011c82:	3328      	adds	r3, #40	; 0x28
 8011c84:	9304      	str	r3, [sp, #16]
 8011c86:	6820      	ldr	r0, [r4, #0]
 8011c88:	f7fd fe0e 	bl	800f8a8 <__aeabi_f2d>
 8011c8c:	44a0      	add	r8, r4
 8011c8e:	342e      	adds	r4, #46	; 0x2e
 8011c90:	9002      	str	r0, [sp, #8]
 8011c92:	9103      	str	r1, [sp, #12]
 8011c94:	4643      	mov	r3, r8
 8011c96:	003a      	movs	r2, r7
 8011c98:	0029      	movs	r1, r5
 8011c9a:	0030      	movs	r0, r6
 8011c9c:	9400      	str	r4, [sp, #0]
 8011c9e:	f007 fb5f 	bl	8019360 <siprintf>
	    			GPSInfo.fix,GPSInfo.date,GPSInfo.time,GPSInfo.lat,GPSInfo.latD,GPSInfo.lon,GPSInfo.lonD,GPSInfo.speed,GPSInfo.head,GPSInfo.sat,GPSInfo.alt,GPSInfo.pdop,GPSInfo.hdop);
}
 8011ca2:	b016      	add	sp, #88	; 0x58
 8011ca4:	bc80      	pop	{r7}
 8011ca6:	46b8      	mov	r8, r7
 8011ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_GPS_GPIO_Port, DO_LED_GPS_Pin, GPIO_PIN_SET);
 8011caa:	2201      	movs	r2, #1
 8011cac:	2104      	movs	r1, #4
 8011cae:	4804      	ldr	r0, [pc, #16]	; (8011cc0 <getGPSString+0xb4>)
 8011cb0:	f002 ff86 	bl	8014bc0 <HAL_GPIO_WritePin>
}
 8011cb4:	e7bd      	b.n	8011c32 <getGPSString+0x26>
 8011cb6:	46c0      	nop			; (mov r8, r8)
 8011cb8:	20004538 	.word	0x20004538
 8011cbc:	200004f4 	.word	0x200004f4
 8011cc0:	50000c00 	.word	0x50000c00
 8011cc4:	0801df5c 	.word	0x0801df5c

08011cc8 <nmea_valid_checksum>:
	    }

    }
}
*/
uint8_t nmea_valid_checksum(const char *message) {
 8011cc8:	b510      	push	{r4, lr}
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8011cca:	212a      	movs	r1, #42	; 0x2a
uint8_t nmea_valid_checksum(const char *message) {
 8011ccc:	0004      	movs	r4, r0
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8011cce:	f007 fbc8 	bl	8019462 <strchr>
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	2210      	movs	r2, #16
 8011cd6:	3001      	adds	r0, #1
 8011cd8:	f006 fbb8 	bl	801844c <strtol>

    char p;
    uint8_t sum = 0;
    ++message;
    while ((p = *message++) != '*') {
 8011cdc:	7863      	ldrb	r3, [r4, #1]
    uint8_t checksum= (uint8_t)strtol(strchr(message, '*')+1, NULL, 16);
 8011cde:	b2c1      	uxtb	r1, r0
    while ((p = *message++) != '*') {
 8011ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8011ce2:	d00c      	beq.n	8011cfe <nmea_valid_checksum+0x36>
    uint8_t sum = 0;
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	3402      	adds	r4, #2
    while ((p = *message++) != '*') {
 8011ce8:	3401      	adds	r4, #1
        sum ^= p;
 8011cea:	405a      	eors	r2, r3
    while ((p = *message++) != '*') {
 8011cec:	1e63      	subs	r3, r4, #1
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8011cf2:	d1f9      	bne.n	8011ce8 <nmea_valid_checksum+0x20>
    }

    if (sum != checksum) {
 8011cf4:	1a88      	subs	r0, r1, r2
 8011cf6:	4243      	negs	r3, r0
 8011cf8:	4158      	adcs	r0, r3
        return 0;
    }

    return 1;
}
 8011cfa:	b2c0      	uxtb	r0, r0
 8011cfc:	bd10      	pop	{r4, pc}
    uint8_t sum = 0;
 8011cfe:	2200      	movs	r2, #0
 8011d00:	e7f8      	b.n	8011cf4 <nmea_valid_checksum+0x2c>
 8011d02:	46c0      	nop			; (mov r8, r8)

08011d04 <TestMEM>:
		Debug_Tx(detectAccStr());
		HAL_Delay(1000);
	}
}

void TestMEM(){
 8011d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d06:	46ce      	mov	lr, r9
 8011d08:	4647      	mov	r7, r8
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011d0a:	220c      	movs	r2, #12
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	4e36      	ldr	r6, [pc, #216]	; (8011de8 <TestMEM+0xe4>)
 8011d10:	b087      	sub	sp, #28
 8011d12:	6833      	ldr	r3, [r6, #0]
	char newline[2] = "\r\n";
 8011d14:	ad05      	add	r5, sp, #20
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011d16:	621a      	str	r2, [r3, #32]
 8011d18:	4690      	mov	r8, r2
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011d1a:	4934      	ldr	r1, [pc, #208]	; (8011dec <TestMEM+0xe8>)
 8011d1c:	4b34      	ldr	r3, [pc, #208]	; (8011df0 <TestMEM+0xec>)
	char newline[2] = "\r\n";
 8011d1e:	4f35      	ldr	r7, [pc, #212]	; (8011df4 <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011d20:	3215      	adds	r2, #21
 8011d22:	0030      	movs	r0, r6
 8011d24:	f005 f978 	bl	8017018 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011d28:	230a      	movs	r3, #10
 8011d2a:	2202      	movs	r2, #2
 8011d2c:	0029      	movs	r1, r5
 8011d2e:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 8011d30:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011d32:	f005 f971 	bl	8017018 <HAL_UART_Transmit>
	int i=0;
	Debug_Tx("------------------Testing Memory:");
	for(i=0;i<1;i++){
		SPI_flash_get_device_ID( );
 8011d36:	f7ff fb07 	bl	8011348 <SPI_flash_get_device_ID>
		//SPI_flash_get_device_ID(JEDEC_ID);
		//ClearQueue();
		writeConfig("AS-o1-A-9000\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 8011d3a:	4c2f      	ldr	r4, [pc, #188]	; (8011df8 <TestMEM+0xf4>)
 8011d3c:	4b2f      	ldr	r3, [pc, #188]	; (8011dfc <TestMEM+0xf8>)
 8011d3e:	0022      	movs	r2, r4
 8011d40:	320c      	adds	r2, #12
 8011d42:	4691      	mov	r9, r2
 8011d44:	2268      	movs	r2, #104	; 0x68
 8011d46:	4694      	mov	ip, r2
 8011d48:	44a4      	add	ip, r4
 8011d4a:	4662      	mov	r2, ip
 8011d4c:	0021      	movs	r1, r4
 8011d4e:	0020      	movs	r0, r4
 8011d50:	3134      	adds	r1, #52	; 0x34
 8011d52:	9202      	str	r2, [sp, #8]
 8011d54:	9301      	str	r3, [sp, #4]
 8011d56:	464a      	mov	r2, r9
 8011d58:	9300      	str	r3, [sp, #0]
 8011d5a:	3058      	adds	r0, #88	; 0x58
 8011d5c:	f7ff fe10 	bl	8011980 <writeConfig>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011d60:	4642      	mov	r2, r8
 8011d62:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011d64:	4926      	ldr	r1, [pc, #152]	; (8011e00 <TestMEM+0xfc>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011d66:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011d68:	0030      	movs	r0, r6
 8011d6a:	4b21      	ldr	r3, [pc, #132]	; (8011df0 <TestMEM+0xec>)
 8011d6c:	3203      	adds	r2, #3
 8011d6e:	f005 f953 	bl	8017018 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011d72:	230a      	movs	r3, #10
 8011d74:	2202      	movs	r2, #2
 8011d76:	0029      	movs	r1, r5
 8011d78:	0030      	movs	r0, r6
	char newline[2] = "\r\n";
 8011d7a:	802f      	strh	r7, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011d7c:	f005 f94c 	bl	8017018 <HAL_UART_Transmit>
    memset(dataR,0,256);
 8011d80:	2280      	movs	r2, #128	; 0x80
	uint8_t add4[]={0x00, 0x00,0x00};
 8011d82:	8823      	ldrh	r3, [r4, #0]
    memset(dataR,0,256);
 8011d84:	2100      	movs	r1, #0
	uint8_t add4[]={0x00, 0x00,0x00};
 8011d86:	802b      	strh	r3, [r5, #0]
 8011d88:	78a3      	ldrb	r3, [r4, #2]
    memset(dataR,0,256);
 8011d8a:	4c1e      	ldr	r4, [pc, #120]	; (8011e04 <TestMEM+0x100>)
 8011d8c:	0052      	lsls	r2, r2, #1
 8011d8e:	0020      	movs	r0, r4
	uint8_t add4[]={0x00, 0x00,0x00};
 8011d90:	70ab      	strb	r3, [r5, #2]
    memset(dataR,0,256);
 8011d92:	f007 fb51 	bl	8019438 <memset>
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegNoLen);
 8011d96:	0028      	movs	r0, r5
 8011d98:	2210      	movs	r2, #16
 8011d9a:	0021      	movs	r1, r4
 8011d9c:	f7ff fcca 	bl	8011734 <SPI_flash_Read_Data>
	if (strlen((char*) dataR)>1){
 8011da0:	0020      	movs	r0, r4
 8011da2:	f7fa fdad 	bl	800c900 <strlen>
 8011da6:	2801      	cmp	r0, #1
 8011da8:	d800      	bhi.n	8011dac <TestMEM+0xa8>
		return "--Err RegNo--";
 8011daa:	4c17      	ldr	r4, [pc, #92]	; (8011e08 <TestMEM+0x104>)
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011dac:	220c      	movs	r2, #12
 8011dae:	6833      	ldr	r3, [r6, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011db0:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8011db2:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8011db4:	f7fa fda4 	bl	800c900 <strlen>
 8011db8:	0021      	movs	r1, r4
 8011dba:	b282      	uxth	r2, r0
 8011dbc:	4b0c      	ldr	r3, [pc, #48]	; (8011df0 <TestMEM+0xec>)
 8011dbe:	0030      	movs	r0, r6
 8011dc0:	f005 f92a 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8011dc4:	4b0b      	ldr	r3, [pc, #44]	; (8011df4 <TestMEM+0xf0>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011dc6:	2202      	movs	r2, #2
 8011dc8:	0029      	movs	r1, r5
	char newline[2] = "\r\n";
 8011dca:	802b      	strh	r3, [r5, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8011dcc:	0030      	movs	r0, r6
 8011dce:	230a      	movs	r3, #10
 8011dd0:	f005 f922 	bl	8017018 <HAL_UART_Transmit>
		   	  				  "http://192.168.10.0/aaEmergenncy ip\0","http://192.168.10.0/Reg ip\0","http://192.168.10.0/Track ID\0",
		  	  				  "oooooooootttttthheerrrrrrOtherdatadddaaatttttttttaaaaaaaaa\0");
		Debug_Tx("Reading RegNo--");
		Debug_Tx(readRegNo());
		*/
		HAL_Delay(2000);
 8011dd4:	20fa      	movs	r0, #250	; 0xfa
 8011dd6:	00c0      	lsls	r0, r0, #3
 8011dd8:	f002 f82a 	bl	8013e30 <HAL_Delay>

	}


}
 8011ddc:	b007      	add	sp, #28
 8011dde:	bcc0      	pop	{r6, r7}
 8011de0:	46b9      	mov	r9, r7
 8011de2:	46b0      	mov	r8, r6
 8011de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011de6:	46c0      	nop			; (mov r8, r8)
 8011de8:	200049d4 	.word	0x200049d4
 8011dec:	0801df9c 	.word	0x0801df9c
 8011df0:	00001388 	.word	0x00001388
 8011df4:	00000a0d 	.word	0x00000a0d
 8011df8:	0801ceb8 	.word	0x0801ceb8
 8011dfc:	0801dfc0 	.word	0x0801dfc0
 8011e00:	0801dfd0 	.word	0x0801dfd0
 8011e04:	20003fd4 	.word	0x20003fd4
 8011e08:	0801df48 	.word	0x0801df48

08011e0c <stor>:
float stor(const char* str) {
 8011e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e0e:	46c6      	mov	lr, r8
 8011e10:	b500      	push	{lr}
    float sign = *str == '-' ? str++, -1 : 1;
 8011e12:	7803      	ldrb	r3, [r0, #0]
float stor(const char* str) {
 8011e14:	0005      	movs	r5, r0
 8011e16:	b082      	sub	sp, #8
    float sign = *str == '-' ? str++, -1 : 1;
 8011e18:	2b2d      	cmp	r3, #45	; 0x2d
 8011e1a:	d100      	bne.n	8011e1e <stor+0x12>
 8011e1c:	e080      	b.n	8011f20 <stor+0x114>
 8011e1e:	22fe      	movs	r2, #254	; 0xfe
 8011e20:	0592      	lsls	r2, r2, #22
 8011e22:	4690      	mov	r8, r2
    while (*str >= '0' && *str <= '9') {
 8011e24:	001e      	movs	r6, r3
 8011e26:	3e30      	subs	r6, #48	; 0x30
 8011e28:	b2f2      	uxtb	r2, r6
    float result = 0;
 8011e2a:	2400      	movs	r4, #0
    while (*str >= '0' && *str <= '9') {
 8011e2c:	2a09      	cmp	r2, #9
 8011e2e:	d812      	bhi.n	8011e56 <stor+0x4a>
        result *= 10;
 8011e30:	4943      	ldr	r1, [pc, #268]	; (8011f40 <stor+0x134>)
 8011e32:	1c20      	adds	r0, r4, #0
 8011e34:	f7fb fb48 	bl	800d4c8 <__aeabi_fmul>
 8011e38:	1c04      	adds	r4, r0, #0
        result += *str - '0';
 8011e3a:	0030      	movs	r0, r6
 8011e3c:	f7fb fe52 	bl	800dae4 <__aeabi_i2f>
        str++;
 8011e40:	3501      	adds	r5, #1
        result += *str - '0';
 8011e42:	1c21      	adds	r1, r4, #0
 8011e44:	f7fa ffd6 	bl	800cdf4 <__aeabi_fadd>
    while (*str >= '0' && *str <= '9') {
 8011e48:	782b      	ldrb	r3, [r5, #0]
        result += *str - '0';
 8011e4a:	1c04      	adds	r4, r0, #0
    while (*str >= '0' && *str <= '9') {
 8011e4c:	001e      	movs	r6, r3
 8011e4e:	3e30      	subs	r6, #48	; 0x30
 8011e50:	b2f2      	uxtb	r2, r6
 8011e52:	2a09      	cmp	r2, #9
 8011e54:	d9ec      	bls.n	8011e30 <stor+0x24>
    if (*str == ',' || *str == '.') {
 8011e56:	2202      	movs	r2, #2
 8011e58:	4393      	bics	r3, r2
 8011e5a:	2b2c      	cmp	r3, #44	; 0x2c
 8011e5c:	d00f      	beq.n	8011e7e <stor+0x72>
    if (*str == 'e' || *str == 'E') {
 8011e5e:	002e      	movs	r6, r5
 8011e60:	782f      	ldrb	r7, [r5, #0]
    result *= sign;
 8011e62:	4641      	mov	r1, r8
 8011e64:	1c20      	adds	r0, r4, #0
 8011e66:	f7fb fb2f 	bl	800d4c8 <__aeabi_fmul>
    if (*str == 'e' || *str == 'E') {
 8011e6a:	2320      	movs	r3, #32
    result *= sign;
 8011e6c:	4680      	mov	r8, r0
    if (*str == 'e' || *str == 'E') {
 8011e6e:	439f      	bics	r7, r3
 8011e70:	2f45      	cmp	r7, #69	; 0x45
 8011e72:	d023      	beq.n	8011ebc <stor+0xb0>
}
 8011e74:	4640      	mov	r0, r8
 8011e76:	b002      	add	sp, #8
 8011e78:	bc80      	pop	{r7}
 8011e7a:	46b8      	mov	r8, r7
 8011e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while (*str >= '0' && *str <= '9') {
 8011e7e:	786f      	ldrb	r7, [r5, #1]
        str++;
 8011e80:	1c6e      	adds	r6, r5, #1
        while (*str >= '0' && *str <= '9') {
 8011e82:	0038      	movs	r0, r7
 8011e84:	3830      	subs	r0, #48	; 0x30
 8011e86:	b2c3      	uxtb	r3, r0
 8011e88:	2b09      	cmp	r3, #9
 8011e8a:	d8ea      	bhi.n	8011e62 <stor+0x56>
        float multiplier = 0.1;
 8011e8c:	4d2d      	ldr	r5, [pc, #180]	; (8011f44 <stor+0x138>)
            result += (*str - '0') * multiplier;
 8011e8e:	f7fb fe29 	bl	800dae4 <__aeabi_i2f>
 8011e92:	1c29      	adds	r1, r5, #0
 8011e94:	f7fb fb18 	bl	800d4c8 <__aeabi_fmul>
 8011e98:	1c01      	adds	r1, r0, #0
 8011e9a:	1c20      	adds	r0, r4, #0
 8011e9c:	f7fa ffaa 	bl	800cdf4 <__aeabi_fadd>
            multiplier /= 10;
 8011ea0:	4927      	ldr	r1, [pc, #156]	; (8011f40 <stor+0x134>)
            result += (*str - '0') * multiplier;
 8011ea2:	1c04      	adds	r4, r0, #0
            multiplier /= 10;
 8011ea4:	1c28      	adds	r0, r5, #0
 8011ea6:	f7fb f945 	bl	800d134 <__aeabi_fdiv>
        while (*str >= '0' && *str <= '9') {
 8011eaa:	7877      	ldrb	r7, [r6, #1]
            multiplier /= 10;
 8011eac:	1c05      	adds	r5, r0, #0
        while (*str >= '0' && *str <= '9') {
 8011eae:	0038      	movs	r0, r7
 8011eb0:	3830      	subs	r0, #48	; 0x30
 8011eb2:	b2c3      	uxtb	r3, r0
            str++;
 8011eb4:	3601      	adds	r6, #1
        while (*str >= '0' && *str <= '9') {
 8011eb6:	2b09      	cmp	r3, #9
 8011eb8:	d9e9      	bls.n	8011e8e <stor+0x82>
 8011eba:	e7d2      	b.n	8011e62 <stor+0x56>
        float powerer = *str == '-'? str++, 0.1 : 10;
 8011ebc:	7874      	ldrb	r4, [r6, #1]
 8011ebe:	2c2d      	cmp	r4, #45	; 0x2d
 8011ec0:	d033      	beq.n	8011f2a <stor+0x11e>
        str++;
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	4b20      	ldr	r3, [pc, #128]	; (8011f48 <stor+0x13c>)
 8011ec6:	1c75      	adds	r5, r6, #1
 8011ec8:	9200      	str	r2, [sp, #0]
 8011eca:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8011ecc:	3c30      	subs	r4, #48	; 0x30
 8011ece:	b2e3      	uxtb	r3, r4
 8011ed0:	2b09      	cmp	r3, #9
 8011ed2:	d832      	bhi.n	8011f3a <stor+0x12e>
        float power = 0;
 8011ed4:	2000      	movs	r0, #0
            power *= 10;
 8011ed6:	491a      	ldr	r1, [pc, #104]	; (8011f40 <stor+0x134>)
 8011ed8:	f7fb faf6 	bl	800d4c8 <__aeabi_fmul>
 8011edc:	1c06      	adds	r6, r0, #0
            power += *str - '0';
 8011ede:	0020      	movs	r0, r4
 8011ee0:	f7fb fe00 	bl	800dae4 <__aeabi_i2f>
            str++;
 8011ee4:	3501      	adds	r5, #1
            power += *str - '0';
 8011ee6:	1c31      	adds	r1, r6, #0
 8011ee8:	f7fa ff84 	bl	800cdf4 <__aeabi_fadd>
        while (*str >= '0' && *str <= '9') {
 8011eec:	782c      	ldrb	r4, [r5, #0]
 8011eee:	3c30      	subs	r4, #48	; 0x30
 8011ef0:	b2e3      	uxtb	r3, r4
 8011ef2:	2b09      	cmp	r3, #9
 8011ef4:	d9ef      	bls.n	8011ed6 <stor+0xca>
        result *= pow(powerer, power);
 8011ef6:	f7fd fcd7 	bl	800f8a8 <__aeabi_f2d>
 8011efa:	0002      	movs	r2, r0
 8011efc:	000b      	movs	r3, r1
 8011efe:	9800      	ldr	r0, [sp, #0]
 8011f00:	9901      	ldr	r1, [sp, #4]
 8011f02:	f00a f8c1 	bl	801c088 <pow>
 8011f06:	0004      	movs	r4, r0
 8011f08:	000d      	movs	r5, r1
 8011f0a:	4640      	mov	r0, r8
 8011f0c:	f7fd fccc 	bl	800f8a8 <__aeabi_f2d>
 8011f10:	0022      	movs	r2, r4
 8011f12:	002b      	movs	r3, r5
 8011f14:	f7fc fdda 	bl	800eacc <__aeabi_dmul>
 8011f18:	f7fd fd0e 	bl	800f938 <__aeabi_d2f>
 8011f1c:	4680      	mov	r8, r0
    return result;
 8011f1e:	e7a9      	b.n	8011e74 <stor+0x68>
    float sign = *str == '-' ? str++, -1 : 1;
 8011f20:	4a0a      	ldr	r2, [pc, #40]	; (8011f4c <stor+0x140>)
    while (*str >= '0' && *str <= '9') {
 8011f22:	7843      	ldrb	r3, [r0, #1]
    float sign = *str == '-' ? str++, -1 : 1;
 8011f24:	4690      	mov	r8, r2
 8011f26:	3501      	adds	r5, #1
 8011f28:	e77c      	b.n	8011e24 <stor+0x18>
 8011f2a:	22a0      	movs	r2, #160	; 0xa0
 8011f2c:	4b08      	ldr	r3, [pc, #32]	; (8011f50 <stor+0x144>)
 8011f2e:	0612      	lsls	r2, r2, #24
 8011f30:	9200      	str	r2, [sp, #0]
 8011f32:	9301      	str	r3, [sp, #4]
        while (*str >= '0' && *str <= '9') {
 8011f34:	78b4      	ldrb	r4, [r6, #2]
        float powerer = *str == '-'? str++, 0.1 : 10;
 8011f36:	1cb5      	adds	r5, r6, #2
 8011f38:	e7c8      	b.n	8011ecc <stor+0xc0>
        while (*str >= '0' && *str <= '9') {
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	e7de      	b.n	8011efe <stor+0xf2>
 8011f40:	41200000 	.word	0x41200000
 8011f44:	3dcccccd 	.word	0x3dcccccd
 8011f48:	40240000 	.word	0x40240000
 8011f4c:	bf800000 	.word	0xbf800000
 8011f50:	3fb99999 	.word	0x3fb99999

08011f54 <getGNRMC>:
void getGNRMC(const char * ptra){
 8011f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f56:	46d6      	mov	lr, sl
 8011f58:	4646      	mov	r6, r8
 8011f5a:	464f      	mov	r7, r9
 8011f5c:	b5c0      	push	{r6, r7, lr}
    char *token = strtok((char *)ptra, ",");
 8011f5e:	4e56      	ldr	r6, [pc, #344]	; (80120b8 <getGNRMC+0x164>)
 8011f60:	0031      	movs	r1, r6
 8011f62:	f007 fab1 	bl	80194c8 <strtok>
 8011f66:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8011f68:	d026      	beq.n	8011fb8 <getGNRMC+0x64>
  	        strcpy(GPSInfo.latD,token);
 8011f6a:	2328      	movs	r3, #40	; 0x28
 8011f6c:	4698      	mov	r8, r3
 8011f6e:	4f53      	ldr	r7, [pc, #332]	; (80120bc <getGNRMC+0x168>)
	int i=0;
 8011f70:	2500      	movs	r5, #0
  	        strcpy(GPSInfo.latD,token);
 8011f72:	44b8      	add	r8, r7
 8011f74:	e00e      	b.n	8011f94 <getGNRMC+0x40>
  	    if(i==3){ //Getting Latitude
 8011f76:	2d03      	cmp	r5, #3
 8011f78:	d061      	beq.n	801203e <getGNRMC+0xea>
  	    if(i==4){ //Getting Latitude ind
 8011f7a:	2d04      	cmp	r5, #4
 8011f7c:	d128      	bne.n	8011fd0 <getGNRMC+0x7c>
  	        strcpy(GPSInfo.latD,token);
 8011f7e:	0021      	movs	r1, r4
 8011f80:	4640      	mov	r0, r8
 8011f82:	f007 fbba 	bl	80196fa <strcpy>
  	    token = strtok(NULL,",");
 8011f86:	0031      	movs	r1, r6
 8011f88:	2000      	movs	r0, #0
 8011f8a:	f007 fa9d 	bl	80194c8 <strtok>
        i++;
 8011f8e:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8011f90:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8011f92:	d011      	beq.n	8011fb8 <getGNRMC+0x64>
  	    if(i==1){ //Getting time
 8011f94:	2d01      	cmp	r5, #1
 8011f96:	d014      	beq.n	8011fc2 <getGNRMC+0x6e>
  	    if(i==10){ //Getting GPS status
 8011f98:	2d0a      	cmp	r5, #10
 8011f9a:	d1ec      	bne.n	8011f76 <getGNRMC+0x22>
  	        if(strstr(token,"N") != NULL){GPSInfo.fix=0;}
 8011f9c:	214e      	movs	r1, #78	; 0x4e
 8011f9e:	0020      	movs	r0, r4
 8011fa0:	f007 fa5f 	bl	8019462 <strchr>
 8011fa4:	4243      	negs	r3, r0
 8011fa6:	4158      	adcs	r0, r3
  	    token = strtok(NULL,",");
 8011fa8:	0031      	movs	r1, r6
 8011faa:	61f8      	str	r0, [r7, #28]
 8011fac:	2000      	movs	r0, #0
 8011fae:	f007 fa8b 	bl	80194c8 <strtok>
        i++;
 8011fb2:	3501      	adds	r5, #1
  	    token = strtok(NULL,",");
 8011fb4:	1e04      	subs	r4, r0, #0
    while( token != NULL ) {
 8011fb6:	d1ed      	bne.n	8011f94 <getGNRMC+0x40>
}
 8011fb8:	bce0      	pop	{r5, r6, r7}
 8011fba:	46ba      	mov	sl, r7
 8011fbc:	46b1      	mov	r9, r6
 8011fbe:	46a8      	mov	r8, r5
 8011fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	    	strncpy(GPSInfo.time,token,6);
 8011fc2:	483e      	ldr	r0, [pc, #248]	; (80120bc <getGNRMC+0x168>)
 8011fc4:	2206      	movs	r2, #6
 8011fc6:	0021      	movs	r1, r4
 8011fc8:	302e      	adds	r0, #46	; 0x2e
 8011fca:	f007 fa69 	bl	80194a0 <strncpy>
  	    if(i==5){ //Getting Longitude
 8011fce:	e7da      	b.n	8011f86 <getGNRMC+0x32>
 8011fd0:	2d05      	cmp	r5, #5
 8011fd2:	d120      	bne.n	8012016 <getGNRMC+0xc2>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8011fd4:	0020      	movs	r0, r4
 8011fd6:	f7ff ff19 	bl	8011e0c <stor>
    int dd1= ddmmmm/100;
 8011fda:	4939      	ldr	r1, [pc, #228]	; (80120c0 <getGNRMC+0x16c>)
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8011fdc:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8011fde:	f7fb f8a9 	bl	800d134 <__aeabi_fdiv>
 8011fe2:	f7fb fd5f 	bl	800daa4 <__aeabi_f2iz>
 8011fe6:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 8011fe8:	2064      	movs	r0, #100	; 0x64
 8011fea:	4360      	muls	r0, r4
 8011fec:	f7fb fd7a 	bl	800dae4 <__aeabi_i2f>
 8011ff0:	1c01      	adds	r1, r0, #0
 8011ff2:	4648      	mov	r0, r9
 8011ff4:	f7fb fbb6 	bl	800d764 <__aeabi_fsub>
    mm=mm/60;
 8011ff8:	4932      	ldr	r1, [pc, #200]	; (80120c4 <getGNRMC+0x170>)
 8011ffa:	f7fb f89b 	bl	800d134 <__aeabi_fdiv>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8011ffe:	4b2f      	ldr	r3, [pc, #188]	; (80120bc <getGNRMC+0x168>)
    mm=mm/60;
 8012000:	4681      	mov	r9, r0
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8012002:	469a      	mov	sl, r3
    mm=(float)dd1+mm;
 8012004:	0020      	movs	r0, r4
 8012006:	f7fb fd6d 	bl	800dae4 <__aeabi_i2f>
 801200a:	4649      	mov	r1, r9
 801200c:	f7fa fef2 	bl	800cdf4 <__aeabi_fadd>
	        GPSInfo.lon=DegreeDecimalConvert(stor(token));
 8012010:	4653      	mov	r3, sl
 8012012:	6058      	str	r0, [r3, #4]
  	    if(i==8){ //Getting Course
 8012014:	e7b7      	b.n	8011f86 <getGNRMC+0x32>
  	    if(i==6){ //Getting Longitude ind
 8012016:	2d06      	cmp	r5, #6
 8012018:	d105      	bne.n	8012026 <getGNRMC+0xd2>
  	    	strcpy(GPSInfo.lonD,token);
 801201a:	4828      	ldr	r0, [pc, #160]	; (80120bc <getGNRMC+0x168>)
 801201c:	0021      	movs	r1, r4
 801201e:	302b      	adds	r0, #43	; 0x2b
 8012020:	f007 fb6b 	bl	80196fa <strcpy>
  	    if(i==8){ //Getting Course
 8012024:	e7af      	b.n	8011f86 <getGNRMC+0x32>
  	    if(i==9){ //Getting Date
 8012026:	2d09      	cmp	r5, #9
 8012028:	d02d      	beq.n	8012086 <getGNRMC+0x132>
  	    if(i==7){ //Getting Speed
 801202a:	2d07      	cmp	r5, #7
 801202c:	d025      	beq.n	801207a <getGNRMC+0x126>
  	    if(i==8){ //Getting Course
 801202e:	2d08      	cmp	r5, #8
 8012030:	d1a9      	bne.n	8011f86 <getGNRMC+0x32>
  	        GPSInfo.head=stor(token);
 8012032:	0020      	movs	r0, r4
 8012034:	f7ff feea 	bl	8011e0c <stor>
 8012038:	4b20      	ldr	r3, [pc, #128]	; (80120bc <getGNRMC+0x168>)
 801203a:	6158      	str	r0, [r3, #20]
 801203c:	e7a3      	b.n	8011f86 <getGNRMC+0x32>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 801203e:	0020      	movs	r0, r4
 8012040:	f7ff fee4 	bl	8011e0c <stor>
    int dd1= ddmmmm/100;
 8012044:	491e      	ldr	r1, [pc, #120]	; (80120c0 <getGNRMC+0x16c>)
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8012046:	4681      	mov	r9, r0
    int dd1= ddmmmm/100;
 8012048:	f7fb f874 	bl	800d134 <__aeabi_fdiv>
 801204c:	f7fb fd2a 	bl	800daa4 <__aeabi_f2iz>
 8012050:	0004      	movs	r4, r0
    float mm=ddmmmm -(dd1*100);
 8012052:	2064      	movs	r0, #100	; 0x64
 8012054:	4360      	muls	r0, r4
 8012056:	f7fb fd45 	bl	800dae4 <__aeabi_i2f>
 801205a:	1c01      	adds	r1, r0, #0
 801205c:	4648      	mov	r0, r9
 801205e:	f7fb fb81 	bl	800d764 <__aeabi_fsub>
    mm=mm/60;
 8012062:	4918      	ldr	r1, [pc, #96]	; (80120c4 <getGNRMC+0x170>)
 8012064:	f7fb f866 	bl	800d134 <__aeabi_fdiv>
 8012068:	4681      	mov	r9, r0
    mm=(float)dd1+mm;
 801206a:	0020      	movs	r0, r4
 801206c:	f7fb fd3a 	bl	800dae4 <__aeabi_i2f>
 8012070:	4649      	mov	r1, r9
 8012072:	f7fa febf 	bl	800cdf4 <__aeabi_fadd>
  	    	 GPSInfo.lat=DegreeDecimalConvert(stor(token));
 8012076:	6038      	str	r0, [r7, #0]
  	    if(i==6){ //Getting Longitude ind
 8012078:	e785      	b.n	8011f86 <getGNRMC+0x32>
  	        GPSInfo.speed=stor(token);
 801207a:	0020      	movs	r0, r4
 801207c:	f7ff fec6 	bl	8011e0c <stor>
 8012080:	4b0e      	ldr	r3, [pc, #56]	; (80120bc <getGNRMC+0x168>)
 8012082:	6198      	str	r0, [r3, #24]
  	    if(i==8){ //Getting Course
 8012084:	e77f      	b.n	8011f86 <getGNRMC+0x32>
  			memset(dd,0,10);
 8012086:	4b10      	ldr	r3, [pc, #64]	; (80120c8 <getGNRMC+0x174>)
 8012088:	220a      	movs	r2, #10
 801208a:	0018      	movs	r0, r3
 801208c:	2100      	movs	r1, #0
 801208e:	4699      	mov	r9, r3
 8012090:	f007 f9d2 	bl	8019438 <memset>
  	        for(int l=0;l<4;l++){dd[l]=token[l];}
 8012094:	2300      	movs	r3, #0
 8012096:	4649      	mov	r1, r9
 8012098:	5ce2      	ldrb	r2, [r4, r3]
 801209a:	54ca      	strb	r2, [r1, r3]
 801209c:	3301      	adds	r3, #1
 801209e:	2b04      	cmp	r3, #4
 80120a0:	d1f9      	bne.n	8012096 <getGNRMC+0x142>
  	        dd[4]='2';
 80120a2:	4b0a      	ldr	r3, [pc, #40]	; (80120cc <getGNRMC+0x178>)
  	        strcpy(GPSInfo.date,dd);
 80120a4:	4805      	ldr	r0, [pc, #20]	; (80120bc <getGNRMC+0x168>)
  	        dd[4]='2';
 80120a6:	808b      	strh	r3, [r1, #4]
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 80120a8:	7923      	ldrb	r3, [r4, #4]
  	        strcpy(GPSInfo.date,dd);
 80120aa:	303d      	adds	r0, #61	; 0x3d
  	        for(int l=6;l<8;l++){dd[l]=token[l-2];}
 80120ac:	718b      	strb	r3, [r1, #6]
 80120ae:	7963      	ldrb	r3, [r4, #5]
 80120b0:	71cb      	strb	r3, [r1, #7]
  	        strcpy(GPSInfo.date,dd);
 80120b2:	f007 fb22 	bl	80196fa <strcpy>
  	    if(i==8){ //Getting Course
 80120b6:	e766      	b.n	8011f86 <getGNRMC+0x32>
 80120b8:	0801d1a4 	.word	0x0801d1a4
 80120bc:	200004f4 	.word	0x200004f4
 80120c0:	42c80000 	.word	0x42c80000
 80120c4:	42700000 	.word	0x42700000
 80120c8:	20004138 	.word	0x20004138
 80120cc:	00003032 	.word	0x00003032

080120d0 <getGNGSA>:
void getGNGSA(const  char * ptra){
 80120d0:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 80120d2:	4d11      	ldr	r5, [pc, #68]	; (8012118 <getGNGSA+0x48>)
 80120d4:	0029      	movs	r1, r5
 80120d6:	f007 f9f7 	bl	80194c8 <strtok>
    while( token != NULL ) {
 80120da:	2800      	cmp	r0, #0
 80120dc:	d017      	beq.n	801210e <getGNGSA+0x3e>
	int i=0;
 80120de:	2400      	movs	r4, #0
    	    GPSInfo.hdop=stor(token);
 80120e0:	4e0e      	ldr	r6, [pc, #56]	; (801211c <getGNGSA+0x4c>)
 80120e2:	e006      	b.n	80120f2 <getGNGSA+0x22>
  	    token = strtok(NULL,",");
 80120e4:	0029      	movs	r1, r5
 80120e6:	2000      	movs	r0, #0
 80120e8:	f007 f9ee 	bl	80194c8 <strtok>
        i++;
 80120ec:	3401      	adds	r4, #1
    while( token != NULL ) {
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d00d      	beq.n	801210e <getGNGSA+0x3e>
        if(i==15){ //Getting PDOP
 80120f2:	2c0f      	cmp	r4, #15
 80120f4:	d00c      	beq.n	8012110 <getGNGSA+0x40>
    	if(i==16){ //Getting HDOP
 80120f6:	2c10      	cmp	r4, #16
 80120f8:	d1f4      	bne.n	80120e4 <getGNGSA+0x14>
    	    GPSInfo.hdop=stor(token);
 80120fa:	f7ff fe87 	bl	8011e0c <stor>
  	    token = strtok(NULL,",");
 80120fe:	0029      	movs	r1, r5
    	    GPSInfo.hdop=stor(token);
 8012100:	60f0      	str	r0, [r6, #12]
  	    token = strtok(NULL,",");
 8012102:	2000      	movs	r0, #0
 8012104:	f007 f9e0 	bl	80194c8 <strtok>
        i++;
 8012108:	3401      	adds	r4, #1
    while( token != NULL ) {
 801210a:	2800      	cmp	r0, #0
 801210c:	d1f1      	bne.n	80120f2 <getGNGSA+0x22>
}
 801210e:	bd70      	pop	{r4, r5, r6, pc}
    	    GPSInfo.pdop=stor(token);
 8012110:	f7ff fe7c 	bl	8011e0c <stor>
 8012114:	6130      	str	r0, [r6, #16]
    	if(i==16){ //Getting HDOP
 8012116:	e7e5      	b.n	80120e4 <getGNGSA+0x14>
 8012118:	0801d1a4 	.word	0x0801d1a4
 801211c:	200004f4 	.word	0x200004f4

08012120 <getGNGGA>:
void getGNGGA(const  char * ptra){
 8012120:	b570      	push	{r4, r5, r6, lr}
    char *token = strtok((char *)ptra, ",");
 8012122:	4d11      	ldr	r5, [pc, #68]	; (8012168 <getGNGGA+0x48>)
 8012124:	0029      	movs	r1, r5
 8012126:	f007 f9cf 	bl	80194c8 <strtok>
    while( token != NULL ) {
 801212a:	2800      	cmp	r0, #0
 801212c:	d017      	beq.n	801215e <getGNGGA+0x3e>
	int i=0;
 801212e:	2400      	movs	r4, #0
            GPSInfo.alt = stor(token);
 8012130:	4e0e      	ldr	r6, [pc, #56]	; (801216c <getGNGGA+0x4c>)
 8012132:	e006      	b.n	8012142 <getGNGGA+0x22>
  	    token = strtok(NULL,",");
 8012134:	0029      	movs	r1, r5
 8012136:	2000      	movs	r0, #0
 8012138:	f007 f9c6 	bl	80194c8 <strtok>
        i++;
 801213c:	3401      	adds	r4, #1
    while( token != NULL ) {
 801213e:	2800      	cmp	r0, #0
 8012140:	d00d      	beq.n	801215e <getGNGGA+0x3e>
    	if(i==7){ //Getting Satellites no
 8012142:	2c07      	cmp	r4, #7
 8012144:	d00c      	beq.n	8012160 <getGNGGA+0x40>
    	if(i==9){ //Getting Saltitute
 8012146:	2c09      	cmp	r4, #9
 8012148:	d1f4      	bne.n	8012134 <getGNGGA+0x14>
            GPSInfo.alt = stor(token);
 801214a:	f7ff fe5f 	bl	8011e0c <stor>
  	    token = strtok(NULL,",");
 801214e:	0029      	movs	r1, r5
            GPSInfo.alt = stor(token);
 8012150:	60b0      	str	r0, [r6, #8]
  	    token = strtok(NULL,",");
 8012152:	2000      	movs	r0, #0
 8012154:	f007 f9b8 	bl	80194c8 <strtok>
        i++;
 8012158:	3401      	adds	r4, #1
    while( token != NULL ) {
 801215a:	2800      	cmp	r0, #0
 801215c:	d1f1      	bne.n	8012142 <getGNGGA+0x22>
}
 801215e:	bd70      	pop	{r4, r5, r6, pc}
            GPSInfo.sat = atoi(token);
 8012160:	f005 f9ee 	bl	8017540 <atoi>
 8012164:	6230      	str	r0, [r6, #32]
    	if(i==9){ //Getting Saltitute
 8012166:	e7e5      	b.n	8012134 <getGNGGA+0x14>
 8012168:	0801d1a4 	.word	0x0801d1a4
 801216c:	200004f4 	.word	0x200004f4

08012170 <validateGPS>:
int validateGPS(const char * str){
 8012170:	b570      	push	{r4, r5, r6, lr}
 8012172:	0004      	movs	r4, r0
	int GPStyp=0;

	uint8_t checksum = 0;
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 8012174:	f7ff fda8 	bl	8011cc8 <nmea_valid_checksum>
	        return 0;
 8012178:	2500      	movs	r5, #0
	    if ((checksum = nmea_valid_checksum(str)) != 1) {
 801217a:	2801      	cmp	r0, #1
 801217c:	d10e      	bne.n	801219c <validateGPS+0x2c>
	    }
	    if(strlen(str)<4){return 0;}
 801217e:	0020      	movs	r0, r4
 8012180:	f7fa fbbe 	bl	800c900 <strlen>
 8012184:	2803      	cmp	r0, #3
 8012186:	d909      	bls.n	801219c <validateGPS+0x2c>

	    if (strstr(str, "GNRMC") != NULL) {
 8012188:	0020      	movs	r0, r4
 801218a:	491d      	ldr	r1, [pc, #116]	; (8012200 <validateGPS+0x90>)
 801218c:	f007 fa04 	bl	8019598 <strstr>
 8012190:	2800      	cmp	r0, #0
 8012192:	d005      	beq.n	80121a0 <validateGPS+0x30>
	    	//Debug_Tx(str);
	    	GPStyp=1;getGNRMC(str);
 8012194:	0020      	movs	r0, r4
 8012196:	f7ff fedd 	bl	8011f54 <getGNRMC>
 801219a:	3501      	adds	r5, #1
	    }
	    else if (strstr(str, "GNVTG") != NULL) {
	    	GPStyp=6;
	    }
    return(GPStyp);
}
 801219c:	0028      	movs	r0, r5
 801219e:	bd70      	pop	{r4, r5, r6, pc}
	    else if (strstr(str, "GNGGA") != NULL) {
 80121a0:	0020      	movs	r0, r4
 80121a2:	4918      	ldr	r1, [pc, #96]	; (8012204 <validateGPS+0x94>)
 80121a4:	f007 f9f8 	bl	8019598 <strstr>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	d11e      	bne.n	80121ea <validateGPS+0x7a>
	    else if (strstr(str, "GNGSA") != NULL) {
 80121ac:	0020      	movs	r0, r4
 80121ae:	4916      	ldr	r1, [pc, #88]	; (8012208 <validateGPS+0x98>)
 80121b0:	f007 f9f2 	bl	8019598 <strstr>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d11d      	bne.n	80121f4 <validateGPS+0x84>
	    else if (strstr(str, "GNGSV") != NULL) {
 80121b8:	0020      	movs	r0, r4
 80121ba:	4914      	ldr	r1, [pc, #80]	; (801220c <validateGPS+0x9c>)
 80121bc:	f007 f9ec 	bl	8019598 <strstr>
	    	GPStyp=4;
 80121c0:	2504      	movs	r5, #4
	    else if (strstr(str, "GNGSV") != NULL) {
 80121c2:	2800      	cmp	r0, #0
 80121c4:	d1ea      	bne.n	801219c <validateGPS+0x2c>
	    else if (strstr(str, "GNGLL") != NULL) {
 80121c6:	0020      	movs	r0, r4
 80121c8:	4911      	ldr	r1, [pc, #68]	; (8012210 <validateGPS+0xa0>)
 80121ca:	f007 f9e5 	bl	8019598 <strstr>
	    	GPStyp=5;
 80121ce:	3501      	adds	r5, #1
	    else if (strstr(str, "GNGLL") != NULL) {
 80121d0:	2800      	cmp	r0, #0
 80121d2:	d1e3      	bne.n	801219c <validateGPS+0x2c>
	    else if (strstr(str, "GNVTG") != NULL) {
 80121d4:	0020      	movs	r0, r4
 80121d6:	490f      	ldr	r1, [pc, #60]	; (8012214 <validateGPS+0xa4>)
 80121d8:	f007 f9de 	bl	8019598 <strstr>
	    	GPStyp=6;
 80121dc:	4243      	negs	r3, r0
 80121de:	4158      	adcs	r0, r3
 80121e0:	4240      	negs	r0, r0
 80121e2:	43a8      	bics	r0, r5
 80121e4:	0005      	movs	r5, r0
 80121e6:	3506      	adds	r5, #6
 80121e8:	e7d8      	b.n	801219c <validateGPS+0x2c>
	    	GPStyp=2; getGNGGA(str);
 80121ea:	0020      	movs	r0, r4
 80121ec:	f7ff ff98 	bl	8012120 <getGNGGA>
 80121f0:	2502      	movs	r5, #2
 80121f2:	e7d3      	b.n	801219c <validateGPS+0x2c>
	    	GPStyp=3;getGNGSA(str);
 80121f4:	0020      	movs	r0, r4
 80121f6:	f7ff ff6b 	bl	80120d0 <getGNGSA>
 80121fa:	2503      	movs	r5, #3
 80121fc:	e7ce      	b.n	801219c <validateGPS+0x2c>
 80121fe:	46c0      	nop			; (mov r8, r8)
 8012200:	0801dfe0 	.word	0x0801dfe0
 8012204:	0801dfe8 	.word	0x0801dfe8
 8012208:	0801dff0 	.word	0x0801dff0
 801220c:	0801dff8 	.word	0x0801dff8
 8012210:	0801e000 	.word	0x0801e000
 8012214:	0801e008 	.word	0x0801e008

08012218 <ProcessGPS>:
	memset(gpsData,0,1000);
    HAL_UART_Receive_IT(&huart2, (uint8_t *)gpsData,900);
}


void ProcessGPS(){
 8012218:	b530      	push	{r4, r5, lr}
	    //Debug_Tx(gpsData);
		int valid=0 ;
		if(strlen((char*)gpsData)>5){
 801221a:	4d0e      	ldr	r5, [pc, #56]	; (8012254 <ProcessGPS+0x3c>)
void ProcessGPS(){
 801221c:	b083      	sub	sp, #12
		if(strlen((char*)gpsData)>5){
 801221e:	0028      	movs	r0, r5
 8012220:	f7fa fb6e 	bl	800c900 <strlen>
 8012224:	2805      	cmp	r0, #5
 8012226:	d801      	bhi.n	801222c <ProcessGPS+0x14>
				valid=valid+validateGPS(token);
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
			}
			//free(token);
		}
}
 8012228:	b003      	add	sp, #12
 801222a:	bd30      	pop	{r4, r5, pc}
			char *tk= NULL;
 801222c:	2300      	movs	r3, #0
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 801222e:	4c0a      	ldr	r4, [pc, #40]	; (8012258 <ProcessGPS+0x40>)
 8012230:	0028      	movs	r0, r5
 8012232:	0021      	movs	r1, r4
 8012234:	aa01      	add	r2, sp, #4
			char *tk= NULL;
 8012236:	9301      	str	r3, [sp, #4]
			char* token = strtok_r((char*)gpsData, "\r\n", &tk);//strtok(gpsData, "\r\n");//
 8012238:	f007 f9a9 	bl	801958e <strtok_r>
			while( token != NULL ) {
 801223c:	2800      	cmp	r0, #0
 801223e:	d0f3      	beq.n	8012228 <ProcessGPS+0x10>
				valid=valid+validateGPS(token);
 8012240:	f7ff ff96 	bl	8012170 <validateGPS>
				token = strtok_r(NULL, "\r\n", &tk);//strtok(NULL, "\r\n"); //
 8012244:	0021      	movs	r1, r4
 8012246:	2000      	movs	r0, #0
 8012248:	aa01      	add	r2, sp, #4
 801224a:	f007 f9a0 	bl	801958e <strtok_r>
			while( token != NULL ) {
 801224e:	2800      	cmp	r0, #0
 8012250:	d1f6      	bne.n	8012240 <ProcessGPS+0x28>
 8012252:	e7e9      	b.n	8012228 <ProcessGPS+0x10>
 8012254:	20004150 	.word	0x20004150
 8012258:	0801d054 	.word	0x0801d054

0801225c <HAL_UART_TxCpltCallback>:
}
 801225c:	4770      	bx	lr
 801225e:	46c0      	nop			; (mov r8, r8)

08012260 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8012260:	b570      	push	{r4, r5, r6, lr}
	if(huart==&huart2){
 8012262:	4c19      	ldr	r4, [pc, #100]	; (80122c8 <HAL_UART_ErrorCallback+0x68>)
 8012264:	42a0      	cmp	r0, r4
 8012266:	d013      	beq.n	8012290 <HAL_UART_ErrorCallback+0x30>
	if(huart==&huart1){
 8012268:	4b18      	ldr	r3, [pc, #96]	; (80122cc <HAL_UART_ErrorCallback+0x6c>)
 801226a:	4298      	cmp	r0, r3
 801226c:	d000      	beq.n	8012270 <HAL_UART_ErrorCallback+0x10>
}
 801226e:	bd70      	pop	{r4, r5, r6, pc}
		if(DMAon==1){
 8012270:	4b17      	ldr	r3, [pc, #92]	; (80122d0 <HAL_UART_ErrorCallback+0x70>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	2b01      	cmp	r3, #1
 8012276:	d1fa      	bne.n	801226e <HAL_UART_ErrorCallback+0xe>
		GSMBuff[0]=0;
 8012278:	2300      	movs	r3, #0
 801227a:	4916      	ldr	r1, [pc, #88]	; (80122d4 <HAL_UART_ErrorCallback+0x74>)
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801227c:	6802      	ldr	r2, [r0, #0]
		GSMBuff[0]=0;
 801227e:	700b      	strb	r3, [r1, #0]
		__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8012280:	330c      	adds	r3, #12
 8012282:	6213      	str	r3, [r2, #32]
		__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8012284:	6822      	ldr	r2, [r4, #0]
 8012286:	6213      	str	r3, [r2, #32]
			    	HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8012288:	2201      	movs	r2, #1
 801228a:	f005 f893 	bl	80173b4 <HAL_UART_Receive_DMA>
}
 801228e:	e7ee      	b.n	801226e <HAL_UART_ErrorCallback+0xe>
		if(dnlfile==0){
 8012290:	4b11      	ldr	r3, [pc, #68]	; (80122d8 <HAL_UART_ErrorCallback+0x78>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1ea      	bne.n	801226e <HAL_UART_ErrorCallback+0xe>
		if(DMAon==1){
 8012298:	4b0d      	ldr	r3, [pc, #52]	; (80122d0 <HAL_UART_ErrorCallback+0x70>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d1e6      	bne.n	801226e <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80122a0:	4d0e      	ldr	r5, [pc, #56]	; (80122dc <HAL_UART_ErrorCallback+0x7c>)
 80122a2:	782b      	ldrb	r3, [r5, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d109      	bne.n	80122bc <HAL_UART_ErrorCallback+0x5c>
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80122a8:	220c      	movs	r2, #12
 80122aa:	6823      	ldr	r3, [r4, #0]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80122ac:	0029      	movs	r1, r5
    	__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 80122ae:	621a      	str	r2, [r3, #32]
    	HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 80122b0:	22e1      	movs	r2, #225	; 0xe1
 80122b2:	0020      	movs	r0, r4
 80122b4:	0092      	lsls	r2, r2, #2
 80122b6:	f005 f87d 	bl	80173b4 <HAL_UART_Receive_DMA>
 80122ba:	e7d8      	b.n	801226e <HAL_UART_ErrorCallback+0xe>
    	if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 80122bc:	2100      	movs	r1, #0
 80122be:	0028      	movs	r0, r5
 80122c0:	4a07      	ldr	r2, [pc, #28]	; (80122e0 <HAL_UART_ErrorCallback+0x80>)
 80122c2:	f007 f8b9 	bl	8019438 <memset>
 80122c6:	e7ef      	b.n	80122a8 <HAL_UART_ErrorCallback+0x48>
 80122c8:	20004940 	.word	0x20004940
 80122cc:	200048ac 	.word	0x200048ac
 80122d0:	20000094 	.word	0x20000094
 80122d4:	20000540 	.word	0x20000540
 80122d8:	20004144 	.word	0x20004144
 80122dc:	20004150 	.word	0x20004150
 80122e0:	000003e7 	.word	0x000003e7

080122e4 <initFirstRun>:
void initFirstRun(){//20.210.207.21\",5001
 80122e4:	b510      	push	{r4, lr}
 80122e6:	b084      	sub	sp, #16
	SPI_flash_Chip_Erase();
 80122e8:	f7ff f970 	bl	80115cc <SPI_flash_Chip_Erase>
	HAL_Delay(30000);
 80122ec:	4809      	ldr	r0, [pc, #36]	; (8012314 <initFirstRun+0x30>)
 80122ee:	f001 fd9f 	bl	8013e30 <HAL_Delay>
	writeConfig("AS-o1-A-9222\0","in sim no1234567891234in sim no\0","out sim no 123456789123456out sim no\0",
 80122f2:	4c09      	ldr	r4, [pc, #36]	; (8012318 <initFirstRun+0x34>)
 80122f4:	4b09      	ldr	r3, [pc, #36]	; (801231c <initFirstRun+0x38>)
 80122f6:	0022      	movs	r2, r4
 80122f8:	0021      	movs	r1, r4
 80122fa:	4809      	ldr	r0, [pc, #36]	; (8012320 <initFirstRun+0x3c>)
 80122fc:	3468      	adds	r4, #104	; 0x68
 80122fe:	320c      	adds	r2, #12
 8012300:	3134      	adds	r1, #52	; 0x34
 8012302:	9402      	str	r4, [sp, #8]
 8012304:	9301      	str	r3, [sp, #4]
 8012306:	9300      	str	r3, [sp, #0]
 8012308:	3024      	adds	r0, #36	; 0x24
 801230a:	f7ff fb39 	bl	8011980 <writeConfig>
}
 801230e:	b004      	add	sp, #16
 8012310:	bd10      	pop	{r4, pc}
 8012312:	46c0      	nop			; (mov r8, r8)
 8012314:	00007530 	.word	0x00007530
 8012318:	0801ceb8 	.word	0x0801ceb8
 801231c:	0801e010 	.word	0x0801e010
 8012320:	0801cf38 	.word	0x0801cf38

08012324 <ReadAllGPIO>:
void ReadAllGPIO(){
 8012324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012326:	46de      	mov	lr, fp
 8012328:	4657      	mov	r7, sl
 801232a:	464e      	mov	r6, r9
 801232c:	4645      	mov	r5, r8
 801232e:	b5e0      	push	{r5, r6, r7, lr}
	memset(StatusStrng,0,20);
 8012330:	4d60      	ldr	r5, [pc, #384]	; (80124b4 <ReadAllGPIO+0x190>)
void ReadAllGPIO(){
 8012332:	b08b      	sub	sp, #44	; 0x2c
	memset(StatusStrng,0,20);
 8012334:	2214      	movs	r2, #20
 8012336:	2100      	movs	r1, #0
 8012338:	0028      	movs	r0, r5
 801233a:	f007 f87d 	bl	8019438 <memset>
	memset(Dig_io,0,30);
 801233e:	4e5e      	ldr	r6, [pc, #376]	; (80124b8 <ReadAllGPIO+0x194>)
 8012340:	221e      	movs	r2, #30
 8012342:	2100      	movs	r1, #0
 8012344:	0030      	movs	r0, r6
 8012346:	f007 f877 	bl	8019438 <memset>
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 801234a:	2180      	movs	r1, #128	; 0x80
 801234c:	20a0      	movs	r0, #160	; 0xa0
 801234e:	0149      	lsls	r1, r1, #5
 8012350:	05c0      	lsls	r0, r0, #23
 8012352:	f002 fc2f 	bl	8014bb4 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 8012356:	2180      	movs	r1, #128	; 0x80
	Dig_in[0]=Read_DI_IN1();
 8012358:	4c58      	ldr	r4, [pc, #352]	; (80124bc <ReadAllGPIO+0x198>)
 801235a:	0109      	lsls	r1, r1, #4
	int val=HAL_GPIO_ReadPin (DI_IN1_GPIO_Port, DI_IN1_Pin);
 801235c:	6020      	str	r0, [r4, #0]
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 801235e:	4858      	ldr	r0, [pc, #352]	; (80124c0 <ReadAllGPIO+0x19c>)
 8012360:	f002 fc28 	bl	8014bb4 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 8012364:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN2_GPIO_Port, DI_IN2_Pin);
 8012366:	6060      	str	r0, [r4, #4]
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 8012368:	0149      	lsls	r1, r1, #5
 801236a:	4855      	ldr	r0, [pc, #340]	; (80124c0 <ReadAllGPIO+0x19c>)
 801236c:	f002 fc22 	bl	8014bb4 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8012370:	2180      	movs	r1, #128	; 0x80
	int val=HAL_GPIO_ReadPin (DI_IN3_GPIO_Port, DI_IN3_Pin);
 8012372:	60a0      	str	r0, [r4, #8]
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8012374:	0189      	lsls	r1, r1, #6
 8012376:	4852      	ldr	r0, [pc, #328]	; (80124c0 <ReadAllGPIO+0x19c>)
 8012378:	f002 fc1c 	bl	8014bb4 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 801237c:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 801237e:	4b51      	ldr	r3, [pc, #324]	; (80124c4 <ReadAllGPIO+0x1a0>)
 8012380:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8012382:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8012384:	484e      	ldr	r0, [pc, #312]	; (80124c0 <ReadAllGPIO+0x19c>)
 8012386:	469a      	mov	sl, r3
 8012388:	f002 fc14 	bl	8014bb4 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 801238c:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 801238e:	4b4e      	ldr	r3, [pc, #312]	; (80124c8 <ReadAllGPIO+0x1a4>)
 8012390:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8012392:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8012394:	484a      	ldr	r0, [pc, #296]	; (80124c0 <ReadAllGPIO+0x19c>)
 8012396:	4699      	mov	r9, r3
 8012398:	f002 fc0c 	bl	8014bb4 <HAL_GPIO_ReadPin>
		else box='C';
 801239c:	3801      	subs	r0, #1
 801239e:	4243      	negs	r3, r0
 80123a0:	4158      	adcs	r0, r3
 80123a2:	230c      	movs	r3, #12
 80123a4:	4240      	negs	r0, r0
 80123a6:	4003      	ands	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80123a8:	2180      	movs	r1, #128	; 0x80
 80123aa:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 80123ac:	4a47      	ldr	r2, [pc, #284]	; (80124cc <ReadAllGPIO+0x1a8>)
		else box='C';
 80123ae:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 80123b0:	0049      	lsls	r1, r1, #1
 80123b2:	05c0      	lsls	r0, r0, #23
 80123b4:	9208      	str	r2, [sp, #32]
 80123b6:	7013      	strb	r3, [r2, #0]
 80123b8:	f002 fbfc 	bl	8014bb4 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 80123bc:	4b44      	ldr	r3, [pc, #272]	; (80124d0 <ReadAllGPIO+0x1ac>)
	EXT_B=Read_EXT_B_SENSE();
 80123be:	4945      	ldr	r1, [pc, #276]	; (80124d4 <ReadAllGPIO+0x1b0>)
 80123c0:	6018      	str	r0, [r3, #0]
 80123c2:	9309      	str	r3, [sp, #36]	; 0x24
	return (ADCvalue[2]*VSENSE*16);
 80123c4:	4b44      	ldr	r3, [pc, #272]	; (80124d8 <ReadAllGPIO+0x1b4>)
 80123c6:	4845      	ldr	r0, [pc, #276]	; (80124dc <ReadAllGPIO+0x1b8>)
 80123c8:	681f      	ldr	r7, [r3, #0]
 80123ca:	4680      	mov	r8, r0
 80123cc:	6880      	ldr	r0, [r0, #8]
 80123ce:	9106      	str	r1, [sp, #24]
 80123d0:	f7fb fbda 	bl	800db88 <__aeabi_ui2f>
 80123d4:	1c39      	adds	r1, r7, #0
 80123d6:	f7fb f877 	bl	800d4c8 <__aeabi_fmul>
 80123da:	2183      	movs	r1, #131	; 0x83
 80123dc:	05c9      	lsls	r1, r1, #23
 80123de:	f7fb f873 	bl	800d4c8 <__aeabi_fmul>
 80123e2:	9906      	ldr	r1, [sp, #24]
 80123e4:	6008      	str	r0, [r1, #0]
	INT_B=Read_INT_B_SENSE();
 80123e6:	483e      	ldr	r0, [pc, #248]	; (80124e0 <ReadAllGPIO+0x1bc>)
 80123e8:	9007      	str	r0, [sp, #28]
	return (ADCvalue[3]*VSENSE*2);
 80123ea:	4640      	mov	r0, r8
 80123ec:	68c0      	ldr	r0, [r0, #12]
 80123ee:	f7fb fbcb 	bl	800db88 <__aeabi_ui2f>
 80123f2:	1c39      	adds	r1, r7, #0
 80123f4:	f7fb f868 	bl	800d4c8 <__aeabi_fmul>
 80123f8:	1c01      	adds	r1, r0, #0
 80123fa:	f7fa fcfb 	bl	800cdf4 <__aeabi_fadd>
 80123fe:	9907      	ldr	r1, [sp, #28]
 8012400:	6008      	str	r0, [r1, #0]
	adc[0]=Read_ADC1();
 8012402:	4838      	ldr	r0, [pc, #224]	; (80124e4 <ReadAllGPIO+0x1c0>)
 8012404:	4683      	mov	fp, r0
	float val=(float)ADCvalue[0];
 8012406:	4640      	mov	r0, r8
 8012408:	6800      	ldr	r0, [r0, #0]
 801240a:	f7fb fbbd 	bl	800db88 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 801240e:	1c39      	adds	r1, r7, #0
 8012410:	f7fb f85a 	bl	800d4c8 <__aeabi_fmul>
 8012414:	4934      	ldr	r1, [pc, #208]	; (80124e8 <ReadAllGPIO+0x1c4>)
 8012416:	f7fb f857 	bl	800d4c8 <__aeabi_fmul>
 801241a:	465b      	mov	r3, fp
 801241c:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 801241e:	4640      	mov	r0, r8
 8012420:	6840      	ldr	r0, [r0, #4]
 8012422:	f7fb fbb1 	bl	800db88 <__aeabi_ui2f>
 8012426:	1c39      	adds	r1, r7, #0
 8012428:	f7fb f84e 	bl	800d4c8 <__aeabi_fmul>
 801242c:	492e      	ldr	r1, [pc, #184]	; (80124e8 <ReadAllGPIO+0x1c4>)
 801242e:	f7fb f84b 	bl	800d4c8 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 8012432:	465f      	mov	r7, fp
	memset(StatusStrng,0,20);
 8012434:	2214      	movs	r2, #20
	adc[1]=Read_ADC2();
 8012436:	6078      	str	r0, [r7, #4]
	memset(StatusStrng,0,20);
 8012438:	2100      	movs	r1, #0
 801243a:	0028      	movs	r0, r5
 801243c:	f006 fffc 	bl	8019438 <memset>
	memset(Dig_io,0,30);
 8012440:	221e      	movs	r2, #30
 8012442:	2100      	movs	r1, #0
 8012444:	0030      	movs	r0, r6
 8012446:	f006 fff7 	bl	8019438 <memset>
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 801244a:	4828      	ldr	r0, [pc, #160]	; (80124ec <ReadAllGPIO+0x1c8>)
 801244c:	6863      	ldr	r3, [r4, #4]
 801244e:	6800      	ldr	r0, [r0, #0]
 8012450:	6822      	ldr	r2, [r4, #0]
 8012452:	9003      	str	r0, [sp, #12]
 8012454:	4826      	ldr	r0, [pc, #152]	; (80124f0 <ReadAllGPIO+0x1cc>)
 8012456:	4927      	ldr	r1, [pc, #156]	; (80124f4 <ReadAllGPIO+0x1d0>)
 8012458:	6800      	ldr	r0, [r0, #0]
 801245a:	9002      	str	r0, [sp, #8]
 801245c:	4826      	ldr	r0, [pc, #152]	; (80124f8 <ReadAllGPIO+0x1d4>)
 801245e:	6800      	ldr	r0, [r0, #0]
 8012460:	9001      	str	r0, [sp, #4]
 8012462:	68a0      	ldr	r0, [r4, #8]
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 8012464:	4654      	mov	r4, sl
    sprintf(Dig_io, "%d%d%d0,%d%d,%d,0.0,",Dig_in[0],Dig_in[1],Dig_in[2],Digout1,Digout2,seqNo);//Dig_io
 8012466:	9000      	str	r0, [sp, #0]
 8012468:	0030      	movs	r0, r6
 801246a:	f006 ff79 	bl	8019360 <siprintf>
	sprintf(StatusStrng, "%d,%d,%.1f,%.1f,%d,%c",ACC_STATE,MAINS_STATE,EXT_B,INT_B,SOS_STATE,BOX_STATE);
 801246e:	6826      	ldr	r6, [r4, #0]
 8012470:	464c      	mov	r4, r9
 8012472:	9a08      	ldr	r2, [sp, #32]
 8012474:	6827      	ldr	r7, [r4, #0]
 8012476:	7813      	ldrb	r3, [r2, #0]
 8012478:	9807      	ldr	r0, [sp, #28]
 801247a:	9305      	str	r3, [sp, #20]
 801247c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801247e:	4c1f      	ldr	r4, [pc, #124]	; (80124fc <ReadAllGPIO+0x1d8>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	9304      	str	r3, [sp, #16]
 8012484:	6800      	ldr	r0, [r0, #0]
 8012486:	f7fd fa0f 	bl	800f8a8 <__aeabi_f2d>
 801248a:	9002      	str	r0, [sp, #8]
 801248c:	9103      	str	r1, [sp, #12]
 801248e:	9906      	ldr	r1, [sp, #24]
 8012490:	6808      	ldr	r0, [r1, #0]
 8012492:	f7fd fa09 	bl	800f8a8 <__aeabi_f2d>
 8012496:	0033      	movs	r3, r6
 8012498:	9000      	str	r0, [sp, #0]
 801249a:	9101      	str	r1, [sp, #4]
 801249c:	003a      	movs	r2, r7
 801249e:	0021      	movs	r1, r4
 80124a0:	0028      	movs	r0, r5
 80124a2:	f006 ff5d 	bl	8019360 <siprintf>
}
 80124a6:	b00b      	add	sp, #44	; 0x2c
 80124a8:	bcf0      	pop	{r4, r5, r6, r7}
 80124aa:	46bb      	mov	fp, r7
 80124ac:	46b2      	mov	sl, r6
 80124ae:	46a9      	mov	r9, r5
 80124b0:	46a0      	mov	r8, r4
 80124b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124b4:	20003f7c 	.word	0x20003f7c
 80124b8:	2000048c 	.word	0x2000048c
 80124bc:	20000480 	.word	0x20000480
 80124c0:	50000400 	.word	0x50000400
 80124c4:	20001ed4 	.word	0x20001ed4
 80124c8:	200002fc 	.word	0x200002fc
 80124cc:	20000090 	.word	0x20000090
 80124d0:	20003f60 	.word	0x20003f60
 80124d4:	200004b4 	.word	0x200004b4
 80124d8:	200000b4 	.word	0x200000b4
 80124dc:	20000300 	.word	0x20000300
 80124e0:	20001e98 	.word	0x20001e98
 80124e4:	20003fc8 	.word	0x20003fc8
 80124e8:	41300000 	.word	0x41300000
 80124ec:	20004aa4 	.word	0x20004aa4
 80124f0:	200004b0 	.word	0x200004b0
 80124f4:	0801e020 	.word	0x0801e020
 80124f8:	200004ac 	.word	0x200004ac
 80124fc:	0801e038 	.word	0x0801e038

08012500 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8012500:	b570      	push	{r4, r5, r6, lr}
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8012502:	2104      	movs	r1, #4
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8012504:	0004      	movs	r4, r0
	  HAL_GPIO_TogglePin (GPIOD, DO_LED_GPS_Pin);
 8012506:	482e      	ldr	r0, [pc, #184]	; (80125c0 <HAL_UART_RxCpltCallback+0xc0>)
 8012508:	f002 fb60 	bl	8014bcc <HAL_GPIO_TogglePin>
	if(huart==&huart2){
 801250c:	4d2d      	ldr	r5, [pc, #180]	; (80125c4 <HAL_UART_RxCpltCallback+0xc4>)
 801250e:	42ac      	cmp	r4, r5
 8012510:	d01a      	beq.n	8012548 <HAL_UART_RxCpltCallback+0x48>
	if(huart==&huart1){
 8012512:	4d2d      	ldr	r5, [pc, #180]	; (80125c8 <HAL_UART_RxCpltCallback+0xc8>)
 8012514:	42ac      	cmp	r4, r5
 8012516:	d000      	beq.n	801251a <HAL_UART_RxCpltCallback+0x1a>
}
 8012518:	bd70      	pop	{r4, r5, r6, pc}
		if(strlen((char*)GSMData)<1900){
 801251a:	4c2c      	ldr	r4, [pc, #176]	; (80125cc <HAL_UART_RxCpltCallback+0xcc>)
 801251c:	0020      	movs	r0, r4
 801251e:	f7fa f9ef 	bl	800c900 <strlen>
 8012522:	4b2b      	ldr	r3, [pc, #172]	; (80125d0 <HAL_UART_RxCpltCallback+0xd0>)
 8012524:	4298      	cmp	r0, r3
 8012526:	d803      	bhi.n	8012530 <HAL_UART_RxCpltCallback+0x30>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8012528:	492a      	ldr	r1, [pc, #168]	; (80125d4 <HAL_UART_RxCpltCallback+0xd4>)
 801252a:	780b      	ldrb	r3, [r1, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d123      	bne.n	8012578 <HAL_UART_RxCpltCallback+0x78>
		if(DMAon==1){
 8012530:	4b29      	ldr	r3, [pc, #164]	; (80125d8 <HAL_UART_RxCpltCallback+0xd8>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2b01      	cmp	r3, #1
 8012536:	d1ef      	bne.n	8012518 <HAL_UART_RxCpltCallback+0x18>
		GSMBuff[0]=0;
 8012538:	2300      	movs	r3, #0
 801253a:	4926      	ldr	r1, [pc, #152]	; (80125d4 <HAL_UART_RxCpltCallback+0xd4>)
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 801253c:	2201      	movs	r2, #1
 801253e:	0028      	movs	r0, r5
		GSMBuff[0]=0;
 8012540:	700b      	strb	r3, [r1, #0]
		HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8012542:	f004 ff37 	bl	80173b4 <HAL_UART_Receive_DMA>
}
 8012546:	e7e7      	b.n	8012518 <HAL_UART_RxCpltCallback+0x18>
		if(dnlfile==0){
 8012548:	4b24      	ldr	r3, [pc, #144]	; (80125dc <HAL_UART_RxCpltCallback+0xdc>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1e3      	bne.n	8012518 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>10){
 8012550:	4c23      	ldr	r4, [pc, #140]	; (80125e0 <HAL_UART_RxCpltCallback+0xe0>)
 8012552:	0020      	movs	r0, r4
 8012554:	f7fa f9d4 	bl	800c900 <strlen>
 8012558:	280a      	cmp	r0, #10
 801255a:	d817      	bhi.n	801258c <HAL_UART_RxCpltCallback+0x8c>
		if(DMAon==1){
 801255c:	4b1e      	ldr	r3, [pc, #120]	; (80125d8 <HAL_UART_RxCpltCallback+0xd8>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b01      	cmp	r3, #1
 8012562:	d1d9      	bne.n	8012518 <HAL_UART_RxCpltCallback+0x18>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8012564:	7823      	ldrb	r3, [r4, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d10a      	bne.n	8012580 <HAL_UART_RxCpltCallback+0x80>
		HAL_UART_Receive_DMA(&huart2, gpsData, 900);}
 801256a:	22e1      	movs	r2, #225	; 0xe1
 801256c:	0021      	movs	r1, r4
 801256e:	0028      	movs	r0, r5
 8012570:	0092      	lsls	r2, r2, #2
 8012572:	f004 ff1f 	bl	80173b4 <HAL_UART_Receive_DMA>
 8012576:	e7cf      	b.n	8012518 <HAL_UART_RxCpltCallback+0x18>
		    if(GSMBuff[0]!=0)	strcat(GSMData,(char*)GSMBuff);
 8012578:	1900      	adds	r0, r0, r4
 801257a:	f007 f8be 	bl	80196fa <strcpy>
 801257e:	e7d7      	b.n	8012530 <HAL_UART_RxCpltCallback+0x30>
		if(strlen((char*)gpsData)>0) memset((char*)gpsData,0,999);
 8012580:	2100      	movs	r1, #0
 8012582:	0020      	movs	r0, r4
 8012584:	4a17      	ldr	r2, [pc, #92]	; (80125e4 <HAL_UART_RxCpltCallback+0xe4>)
 8012586:	f006 ff57 	bl	8019438 <memset>
 801258a:	e7ee      	b.n	801256a <HAL_UART_RxCpltCallback+0x6a>
			ProcessGPS((char*)gpsData);
 801258c:	0020      	movs	r0, r4
 801258e:	f7ff fe43 	bl	8012218 <ProcessGPS>
			getGPSString();
 8012592:	f7ff fb3b 	bl	8011c0c <getGPSString>
	HAL_GPIO_TogglePin(GPIOD, DO_LED_GPS_Pin);
 8012596:	2104      	movs	r1, #4
 8012598:	4809      	ldr	r0, [pc, #36]	; (80125c0 <HAL_UART_RxCpltCallback+0xc0>)
 801259a:	f002 fb17 	bl	8014bcc <HAL_GPIO_TogglePin>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 801259e:	4e12      	ldr	r6, [pc, #72]	; (80125e8 <HAL_UART_RxCpltCallback+0xe8>)
 80125a0:	6833      	ldr	r3, [r6, #0]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d007      	beq.n	80125b6 <HAL_UART_RxCpltCallback+0xb6>
	    if (AccGyroStatus>0){AccGyroStatus1=AccGyroStatus;}
 80125a6:	4b11      	ldr	r3, [pc, #68]	; (80125ec <HAL_UART_RxCpltCallback+0xec>)
 80125a8:	6818      	ldr	r0, [r3, #0]
 80125aa:	2800      	cmp	r0, #0
 80125ac:	dd00      	ble.n	80125b0 <HAL_UART_RxCpltCallback+0xb0>
 80125ae:	6030      	str	r0, [r6, #0]
			ReadAllGPIO();
 80125b0:	f7ff feb8 	bl	8012324 <ReadAllGPIO>
 80125b4:	e7d2      	b.n	801255c <HAL_UART_RxCpltCallback+0x5c>
	    if (AccGyroStatus1==0){AccGyroStatus=detectAcc();}
 80125b6:	f7ff fad5 	bl	8011b64 <detectAcc>
 80125ba:	4b0c      	ldr	r3, [pc, #48]	; (80125ec <HAL_UART_RxCpltCallback+0xec>)
 80125bc:	6018      	str	r0, [r3, #0]
 80125be:	e7f4      	b.n	80125aa <HAL_UART_RxCpltCallback+0xaa>
 80125c0:	50000c00 	.word	0x50000c00
 80125c4:	20004940 	.word	0x20004940
 80125c8:	200048ac 	.word	0x200048ac
 80125cc:	20000544 	.word	0x20000544
 80125d0:	0000076b 	.word	0x0000076b
 80125d4:	20000540 	.word	0x20000540
 80125d8:	20000094 	.word	0x20000094
 80125dc:	20004144 	.word	0x20004144
 80125e0:	20004150 	.word	0x20004150
 80125e4:	000003e7 	.word	0x000003e7
 80125e8:	20000314 	.word	0x20000314
 80125ec:	20000310 	.word	0x20000310

080125f0 <GetHead>:
void GetHead(){
 80125f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125f2:	46de      	mov	lr, fp
 80125f4:	464e      	mov	r6, r9
 80125f6:	4645      	mov	r5, r8
 80125f8:	4657      	mov	r7, sl
 80125fa:	b5e0      	push	{r5, r6, r7, lr}
	memset(Head,0,100);
 80125fc:	4dca      	ldr	r5, [pc, #808]	; (8012928 <GetHead+0x338>)
 80125fe:	2264      	movs	r2, #100	; 0x64
void GetHead(){
 8012600:	b085      	sub	sp, #20
	memset(Head,0,100);
 8012602:	2100      	movs	r1, #0
 8012604:	0028      	movs	r0, r5
 8012606:	f006 ff17 	bl	8019438 <memset>
	strcpy(Head,InitStr);
 801260a:	49c8      	ldr	r1, [pc, #800]	; (801292c <GetHead+0x33c>)
 801260c:	0028      	movs	r0, r5
 801260e:	f006 ffd9 	bl	80195c4 <stpcpy>
	strcat(Head,",");
 8012612:	232c      	movs	r3, #44	; 0x2c
	strcat(Head,VerStr);
 8012614:	49c6      	ldr	r1, [pc, #792]	; (8012930 <GetHead+0x340>)
	strcat(Head,",");
 8012616:	7003      	strb	r3, [r0, #0]
	strcat(Head,VerStr);
 8012618:	3001      	adds	r0, #1
 801261a:	f006 ffd3 	bl	80195c4 <stpcpy>
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 801261e:	4bc5      	ldr	r3, [pc, #788]	; (8012934 <GetHead+0x344>)
 8012620:	4ec5      	ldr	r6, [pc, #788]	; (8012938 <GetHead+0x348>)
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	6833      	ldr	r3, [r6, #0]
	strcat(Head,VerStr);
 8012626:	9000      	str	r0, [sp, #0]
	if((EmergencyStateON==-1 )& (SOS_STATE==1 )){EmergencyStateON=1;EmergencyStateOFF=-1;}
 8012628:	3301      	adds	r3, #1
 801262a:	d000      	beq.n	801262e <GetHead+0x3e>
 801262c:	e0dd      	b.n	80127ea <GetHead+0x1fa>
 801262e:	2a01      	cmp	r2, #1
 8012630:	d000      	beq.n	8012634 <GetHead+0x44>
 8012632:	e0da      	b.n	80127ea <GetHead+0x1fa>
 8012634:	2301      	movs	r3, #1
 8012636:	6033      	str	r3, [r6, #0]
 8012638:	4bc0      	ldr	r3, [pc, #768]	; (801293c <GetHead+0x34c>)
 801263a:	469a      	mov	sl, r3
 801263c:	2301      	movs	r3, #1
 801263e:	4652      	mov	r2, sl
 8012640:	425b      	negs	r3, r3
 8012642:	6013      	str	r3, [r2, #0]
	if((IgnitionTurnedON==-1 )&( MAINS_STATE==1 )){IgnitionTurnedON=1;IgnitionTurnedOFF=-1;}
 8012644:	4bbe      	ldr	r3, [pc, #760]	; (8012940 <GetHead+0x350>)
 8012646:	4fbf      	ldr	r7, [pc, #764]	; (8012944 <GetHead+0x354>)
 8012648:	681a      	ldr	r2, [r3, #0]
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	3301      	adds	r3, #1
 801264e:	d000      	beq.n	8012652 <GetHead+0x62>
 8012650:	e0bc      	b.n	80127cc <GetHead+0x1dc>
 8012652:	2a01      	cmp	r2, #1
 8012654:	d000      	beq.n	8012658 <GetHead+0x68>
 8012656:	e0b9      	b.n	80127cc <GetHead+0x1dc>
 8012658:	2301      	movs	r3, #1
 801265a:	603b      	str	r3, [r7, #0]
 801265c:	4bba      	ldr	r3, [pc, #744]	; (8012948 <GetHead+0x358>)
 801265e:	469b      	mov	fp, r3
 8012660:	2301      	movs	r3, #1
 8012662:	465a      	mov	r2, fp
 8012664:	425b      	negs	r3, r3
 8012666:	6013      	str	r3, [r2, #0]
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8012668:	4bb8      	ldr	r3, [pc, #736]	; (801294c <GetHead+0x35c>)
 801266a:	49b9      	ldr	r1, [pc, #740]	; (8012950 <GetHead+0x360>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	1c18      	adds	r0, r3, #0
 8012670:	4699      	mov	r9, r3
 8012672:	f7fa fb27 	bl	800ccc4 <__aeabi_fcmplt>
 8012676:	0001      	movs	r1, r0
 8012678:	1e4b      	subs	r3, r1, #1
 801267a:	4199      	sbcs	r1, r3
 801267c:	4bb5      	ldr	r3, [pc, #724]	; (8012954 <GetHead+0x364>)
 801267e:	9102      	str	r1, [sp, #8]
 8012680:	4698      	mov	r8, r3
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	3301      	adds	r3, #1
 8012686:	425a      	negs	r2, r3
 8012688:	4153      	adcs	r3, r2
 801268a:	000a      	movs	r2, r1
 801268c:	401a      	ands	r2, r3
 801268e:	9201      	str	r2, [sp, #4]
 8012690:	420b      	tst	r3, r1
 8012692:	d000      	beq.n	8012696 <GetHead+0xa6>
 8012694:	e0b8      	b.n	8012808 <GetHead+0x218>
	if((InternalBatteryChargedAgain==-1 )& (INT_B>=3.0)){InternalBatteryChargedAgain=1;InternalBatterLow=-1;}
 8012696:	4cb0      	ldr	r4, [pc, #704]	; (8012958 <GetHead+0x368>)
 8012698:	6823      	ldr	r3, [r4, #0]
 801269a:	3301      	adds	r3, #1
 801269c:	425a      	negs	r2, r3
 801269e:	4153      	adcs	r3, r2
 80126a0:	b2db      	uxtb	r3, r3
 80126a2:	9301      	str	r3, [sp, #4]
 80126a4:	4648      	mov	r0, r9
 80126a6:	49aa      	ldr	r1, [pc, #680]	; (8012950 <GetHead+0x360>)
 80126a8:	f7fa fb2a 	bl	800cd00 <__aeabi_fcmpge>
 80126ac:	2300      	movs	r3, #0
 80126ae:	2800      	cmp	r0, #0
 80126b0:	d008      	beq.n	80126c4 <GetHead+0xd4>
 80126b2:	9a01      	ldr	r2, [sp, #4]
 80126b4:	2301      	movs	r3, #1
 80126b6:	2a00      	cmp	r2, #0
 80126b8:	d004      	beq.n	80126c4 <GetHead+0xd4>
 80126ba:	2201      	movs	r2, #1
 80126bc:	4641      	mov	r1, r8
 80126be:	4252      	negs	r2, r2
 80126c0:	6023      	str	r3, [r4, #0]
 80126c2:	600a      	str	r2, [r1, #0]
	if((MainBatteryDisconnect==-1 )& (INT_B<3.0 )){MainBatteryDisconnect=1;MainBatteryReconnect=-1;}
 80126c4:	4aa5      	ldr	r2, [pc, #660]	; (801295c <GetHead+0x36c>)
 80126c6:	4691      	mov	r9, r2
 80126c8:	6812      	ldr	r2, [r2, #0]
 80126ca:	3201      	adds	r2, #1
 80126cc:	d176      	bne.n	80127bc <GetHead+0x1cc>
 80126ce:	9a02      	ldr	r2, [sp, #8]
 80126d0:	2a00      	cmp	r2, #0
 80126d2:	d073      	beq.n	80127bc <GetHead+0x1cc>
 80126d4:	2201      	movs	r2, #1
 80126d6:	4649      	mov	r1, r9
 80126d8:	600a      	str	r2, [r1, #0]
 80126da:	4aa1      	ldr	r2, [pc, #644]	; (8012960 <GetHead+0x370>)
 80126dc:	0011      	movs	r1, r2
 80126de:	9201      	str	r2, [sp, #4]
 80126e0:	2201      	movs	r2, #1
 80126e2:	4252      	negs	r2, r2
 80126e4:	600a      	str	r2, [r1, #0]
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d005      	beq.n	80126f6 <GetHead+0x106>
 80126ea:	2301      	movs	r3, #1
 80126ec:	9a01      	ldr	r2, [sp, #4]
 80126ee:	6013      	str	r3, [r2, #0]
 80126f0:	464a      	mov	r2, r9
 80126f2:	3b02      	subs	r3, #2
 80126f4:	6013      	str	r3, [r2, #0]
	if(GSMSignal<=10){
 80126f6:	4b9b      	ldr	r3, [pc, #620]	; (8012964 <GetHead+0x374>)
 80126f8:	499b      	ldr	r1, [pc, #620]	; (8012968 <GetHead+0x378>)
 80126fa:	6818      	ldr	r0, [r3, #0]
 80126fc:	f7fa faec 	bl	800ccd8 <__aeabi_fcmple>
 8012700:	2800      	cmp	r0, #0
 8012702:	d000      	beq.n	8012706 <GetHead+0x116>
 8012704:	e087      	b.n	8012816 <GetHead+0x226>
	else if(getSpeed()>SpeedThr){
 8012706:	4b99      	ldr	r3, [pc, #612]	; (801296c <GetHead+0x37c>)
	return GPSInfo.speed;
 8012708:	4a99      	ldr	r2, [pc, #612]	; (8012970 <GetHead+0x380>)
 801270a:	6818      	ldr	r0, [r3, #0]
 801270c:	6991      	ldr	r1, [r2, #24]
 801270e:	f7fa fad9 	bl	800ccc4 <__aeabi_fcmplt>
 8012712:	9002      	str	r0, [sp, #8]
 8012714:	2800      	cmp	r0, #0
 8012716:	d000      	beq.n	801271a <GetHead+0x12a>
 8012718:	e092      	b.n	8012840 <GetHead+0x250>
	else if(EmergencyWireBreak>0){
 801271a:	4b96      	ldr	r3, [pc, #600]	; (8012974 <GetHead+0x384>)
 801271c:	9303      	str	r3, [sp, #12]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	dd00      	ble.n	8012726 <GetHead+0x136>
 8012724:	e095      	b.n	8012852 <GetHead+0x262>
	else if(AccGyroStatus==1){
 8012726:	4b94      	ldr	r3, [pc, #592]	; (8012978 <GetHead+0x388>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	2b01      	cmp	r3, #1
 801272c:	d100      	bne.n	8012730 <GetHead+0x140>
 801272e:	e09f      	b.n	8012870 <GetHead+0x280>
	else if(AccGyroStatus==2){
 8012730:	2b02      	cmp	r3, #2
 8012732:	d100      	bne.n	8012736 <GetHead+0x146>
 8012734:	e0a1      	b.n	801287a <GetHead+0x28a>
	else if(AccGyroStatus==3){
 8012736:	2b03      	cmp	r3, #3
 8012738:	d100      	bne.n	801273c <GetHead+0x14c>
 801273a:	e0ab      	b.n	8012894 <GetHead+0x2a4>
	else if(EmergencyStateON>0){
 801273c:	6833      	ldr	r3, [r6, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	dd00      	ble.n	8012744 <GetHead+0x154>
 8012742:	e08e      	b.n	8012862 <GetHead+0x272>
	else if(EmergencyStateOFF>0){
 8012744:	4653      	mov	r3, sl
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	2b00      	cmp	r3, #0
 801274a:	dd00      	ble.n	801274e <GetHead+0x15e>
 801274c:	e09a      	b.n	8012884 <GetHead+0x294>
	else if(IgnitionTurnedON>0){
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	dd00      	ble.n	8012756 <GetHead+0x166>
 8012754:	e0a3      	b.n	801289e <GetHead+0x2ae>
	else if(IgnitionTurnedOFF>0){
 8012756:	465b      	mov	r3, fp
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	dd00      	ble.n	8012760 <GetHead+0x170>
 801275e:	e0a5      	b.n	80128ac <GetHead+0x2bc>
	else if(BOX_STATE=='C'){
 8012760:	4b86      	ldr	r3, [pc, #536]	; (801297c <GetHead+0x38c>)
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	2b43      	cmp	r3, #67	; 0x43
 8012766:	d100      	bne.n	801276a <GetHead+0x17a>
 8012768:	e0b0      	b.n	80128cc <GetHead+0x2dc>
	else if(InternalBatterLow>0){
 801276a:	4643      	mov	r3, r8
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	dd00      	ble.n	8012774 <GetHead+0x184>
 8012772:	e0a3      	b.n	80128bc <GetHead+0x2cc>
	else if(InternalBatteryChargedAgain>0){
 8012774:	6823      	ldr	r3, [r4, #0]
 8012776:	2b00      	cmp	r3, #0
 8012778:	dd00      	ble.n	801277c <GetHead+0x18c>
 801277a:	e0ac      	b.n	80128d6 <GetHead+0x2e6>
	else if(MainBatteryDisconnect>0){
 801277c:	464b      	mov	r3, r9
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	dd00      	ble.n	8012786 <GetHead+0x196>
 8012784:	e0ae      	b.n	80128e4 <GetHead+0x2f4>
	else if(MainBatteryReconnect>0){
 8012786:	9c01      	ldr	r4, [sp, #4]
 8012788:	6823      	ldr	r3, [r4, #0]
 801278a:	2b00      	cmp	r3, #0
 801278c:	dd00      	ble.n	8012790 <GetHead+0x1a0>
 801278e:	e0b1      	b.n	80128f4 <GetHead+0x304>
	else if(HistoryPVTData>0){
 8012790:	4e7b      	ldr	r6, [pc, #492]	; (8012980 <GetHead+0x390>)
 8012792:	6833      	ldr	r3, [r6, #0]
 8012794:	2b00      	cmp	r3, #0
 8012796:	dd00      	ble.n	801279a <GetHead+0x1aa>
 8012798:	e0b3      	b.n	8012902 <GetHead+0x312>
	else if(HealthPacket>0){
 801279a:	4e7a      	ldr	r6, [pc, #488]	; (8012984 <GetHead+0x394>)
 801279c:	6833      	ldr	r3, [r6, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	dd00      	ble.n	80127a4 <GetHead+0x1b4>
 80127a2:	e0b5      	b.n	8012910 <GetHead+0x320>
	else if(OTAParameterChange>0){
 80127a4:	4e78      	ldr	r6, [pc, #480]	; (8012988 <GetHead+0x398>)
 80127a6:	6833      	ldr	r3, [r6, #0]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	dc00      	bgt.n	80127ae <GetHead+0x1be>
 80127ac:	e0b7      	b.n	801291e <GetHead+0x32e>
		strcat(Head,AlartStr_OTAParameterChange);
 80127ae:	4977      	ldr	r1, [pc, #476]	; (801298c <GetHead+0x39c>)
 80127b0:	9800      	ldr	r0, [sp, #0]
 80127b2:	f006 ffa2 	bl	80196fa <strcpy>
		OTAParameterChange=0;
 80127b6:	2300      	movs	r3, #0
 80127b8:	6033      	str	r3, [r6, #0]
 80127ba:	e045      	b.n	8012848 <GetHead+0x258>
	if((MainBatteryReconnect==-1 )& (INT_B>=3.0)){MainBatteryReconnect=1;MainBatteryDisconnect=-1;}
 80127bc:	4a68      	ldr	r2, [pc, #416]	; (8012960 <GetHead+0x370>)
 80127be:	9201      	str	r2, [sp, #4]
 80127c0:	6812      	ldr	r2, [r2, #0]
 80127c2:	3201      	adds	r2, #1
 80127c4:	4251      	negs	r1, r2
 80127c6:	414a      	adcs	r2, r1
 80127c8:	4013      	ands	r3, r2
 80127ca:	e78c      	b.n	80126e6 <GetHead+0xf6>
	if((IgnitionTurnedOFF==-1) &( MAINS_STATE==0 )){IgnitionTurnedOFF=1;IgnitionTurnedON=-1;}
 80127cc:	4b5e      	ldr	r3, [pc, #376]	; (8012948 <GetHead+0x358>)
 80127ce:	469b      	mov	fp, r3
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	3301      	adds	r3, #1
 80127d4:	d000      	beq.n	80127d8 <GetHead+0x1e8>
 80127d6:	e747      	b.n	8012668 <GetHead+0x78>
 80127d8:	2a00      	cmp	r2, #0
 80127da:	d000      	beq.n	80127de <GetHead+0x1ee>
 80127dc:	e744      	b.n	8012668 <GetHead+0x78>
 80127de:	2301      	movs	r3, #1
 80127e0:	465a      	mov	r2, fp
 80127e2:	6013      	str	r3, [r2, #0]
 80127e4:	3b02      	subs	r3, #2
 80127e6:	603b      	str	r3, [r7, #0]
 80127e8:	e73e      	b.n	8012668 <GetHead+0x78>
	if((EmergencyStateOFF==-1 )& (SOS_STATE==0) ){EmergencyStateOFF=1;EmergencyStateON=-1;}
 80127ea:	4b54      	ldr	r3, [pc, #336]	; (801293c <GetHead+0x34c>)
 80127ec:	469a      	mov	sl, r3
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	3301      	adds	r3, #1
 80127f2:	d000      	beq.n	80127f6 <GetHead+0x206>
 80127f4:	e726      	b.n	8012644 <GetHead+0x54>
 80127f6:	2a00      	cmp	r2, #0
 80127f8:	d000      	beq.n	80127fc <GetHead+0x20c>
 80127fa:	e723      	b.n	8012644 <GetHead+0x54>
 80127fc:	2301      	movs	r3, #1
 80127fe:	4652      	mov	r2, sl
 8012800:	6013      	str	r3, [r2, #0]
 8012802:	3b02      	subs	r3, #2
 8012804:	6033      	str	r3, [r6, #0]
 8012806:	e71d      	b.n	8012644 <GetHead+0x54>
	if((InternalBatterLow==-1) & (INT_B<3.0 )){InternalBatterLow=1;InternalBatteryChargedAgain=-1;}
 8012808:	2301      	movs	r3, #1
 801280a:	4642      	mov	r2, r8
 801280c:	4c52      	ldr	r4, [pc, #328]	; (8012958 <GetHead+0x368>)
 801280e:	6013      	str	r3, [r2, #0]
 8012810:	3b02      	subs	r3, #2
 8012812:	6023      	str	r3, [r4, #0]
 8012814:	e746      	b.n	80126a4 <GetHead+0xb4>
		strcat(Head,AlartStr_HistoryPVTData);
 8012816:	495e      	ldr	r1, [pc, #376]	; (8012990 <GetHead+0x3a0>)
 8012818:	9800      	ldr	r0, [sp, #0]
 801281a:	f006 fed3 	bl	80195c4 <stpcpy>
			strcat(Head,PacketStatusStrHist);
 801281e:	2203      	movs	r2, #3
 8012820:	495c      	ldr	r1, [pc, #368]	; (8012994 <GetHead+0x3a4>)
 8012822:	f006 ff7d 	bl	8019720 <memcpy>
    if (AccGyroStatus1>0){AccGyroStatus1=0;}
 8012826:	4b5c      	ldr	r3, [pc, #368]	; (8012998 <GetHead+0x3a8>)
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	2a00      	cmp	r2, #0
 801282c:	dd01      	ble.n	8012832 <GetHead+0x242>
 801282e:	2200      	movs	r2, #0
 8012830:	601a      	str	r2, [r3, #0]
}
 8012832:	b005      	add	sp, #20
 8012834:	bcf0      	pop	{r4, r5, r6, r7}
 8012836:	46bb      	mov	fp, r7
 8012838:	46b2      	mov	sl, r6
 801283a:	46a9      	mov	r9, r5
 801283c:	46a0      	mov	r8, r4
 801283e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(Head,AlartStr_OverSpeed);
 8012840:	4956      	ldr	r1, [pc, #344]	; (801299c <GetHead+0x3ac>)
 8012842:	9800      	ldr	r0, [sp, #0]
 8012844:	f006 ff59 	bl	80196fa <strcpy>
		strcat(Head,PacketStatusStrLive);
 8012848:	0028      	movs	r0, r5
 801284a:	4955      	ldr	r1, [pc, #340]	; (80129a0 <GetHead+0x3b0>)
 801284c:	f006 fdfc 	bl	8019448 <strcat>
 8012850:	e7e9      	b.n	8012826 <GetHead+0x236>
		strcat(Head,AlartStr_EmergencyWireBreak);
 8012852:	4954      	ldr	r1, [pc, #336]	; (80129a4 <GetHead+0x3b4>)
 8012854:	9800      	ldr	r0, [sp, #0]
 8012856:	f006 ff50 	bl	80196fa <strcpy>
		EmergencyWireBreak=0;
 801285a:	9b03      	ldr	r3, [sp, #12]
 801285c:	9a02      	ldr	r2, [sp, #8]
 801285e:	601a      	str	r2, [r3, #0]
 8012860:	e7f2      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateON);
 8012862:	4951      	ldr	r1, [pc, #324]	; (80129a8 <GetHead+0x3b8>)
 8012864:	9800      	ldr	r0, [sp, #0]
 8012866:	f006 ff48 	bl	80196fa <strcpy>
		EmergencyStateON=0;
 801286a:	9b02      	ldr	r3, [sp, #8]
 801286c:	6033      	str	r3, [r6, #0]
 801286e:	e7eb      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_HarshAcceleration);
 8012870:	494e      	ldr	r1, [pc, #312]	; (80129ac <GetHead+0x3bc>)
 8012872:	9800      	ldr	r0, [sp, #0]
 8012874:	f006 ff41 	bl	80196fa <strcpy>
 8012878:	e7e6      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_HarshBreaking);
 801287a:	494d      	ldr	r1, [pc, #308]	; (80129b0 <GetHead+0x3c0>)
 801287c:	9800      	ldr	r0, [sp, #0]
 801287e:	f006 ff3c 	bl	80196fa <strcpy>
 8012882:	e7e1      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_EmergencyStateOFF);
 8012884:	494b      	ldr	r1, [pc, #300]	; (80129b4 <GetHead+0x3c4>)
 8012886:	9800      	ldr	r0, [sp, #0]
 8012888:	f006 ff37 	bl	80196fa <strcpy>
		EmergencyStateOFF=0;
 801288c:	4653      	mov	r3, sl
 801288e:	9a02      	ldr	r2, [sp, #8]
 8012890:	601a      	str	r2, [r3, #0]
 8012892:	e7d9      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_RashTurning);
 8012894:	4948      	ldr	r1, [pc, #288]	; (80129b8 <GetHead+0x3c8>)
 8012896:	9800      	ldr	r0, [sp, #0]
 8012898:	f006 ff2f 	bl	80196fa <strcpy>
 801289c:	e7d4      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedON);
 801289e:	4947      	ldr	r1, [pc, #284]	; (80129bc <GetHead+0x3cc>)
 80128a0:	9800      	ldr	r0, [sp, #0]
 80128a2:	f006 ff2a 	bl	80196fa <strcpy>
		IgnitionTurnedON=0;
 80128a6:	9b02      	ldr	r3, [sp, #8]
 80128a8:	603b      	str	r3, [r7, #0]
 80128aa:	e7cd      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_IgnitionTurnedOFF);
 80128ac:	4944      	ldr	r1, [pc, #272]	; (80129c0 <GetHead+0x3d0>)
 80128ae:	9800      	ldr	r0, [sp, #0]
 80128b0:	f006 ff23 	bl	80196fa <strcpy>
		IgnitionTurnedOFF=0;
 80128b4:	2300      	movs	r3, #0
 80128b6:	465a      	mov	r2, fp
 80128b8:	6013      	str	r3, [r2, #0]
 80128ba:	e7c5      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatterLow);
 80128bc:	4941      	ldr	r1, [pc, #260]	; (80129c4 <GetHead+0x3d4>)
 80128be:	9800      	ldr	r0, [sp, #0]
 80128c0:	f006 ff1b 	bl	80196fa <strcpy>
		InternalBatterLow=0;
 80128c4:	2300      	movs	r3, #0
 80128c6:	4642      	mov	r2, r8
 80128c8:	6013      	str	r3, [r2, #0]
 80128ca:	e7bd      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_BoxTemper);
 80128cc:	493e      	ldr	r1, [pc, #248]	; (80129c8 <GetHead+0x3d8>)
 80128ce:	9800      	ldr	r0, [sp, #0]
 80128d0:	f006 ff13 	bl	80196fa <strcpy>
 80128d4:	e7b8      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_InternalBatteryChargedAgain);
 80128d6:	493d      	ldr	r1, [pc, #244]	; (80129cc <GetHead+0x3dc>)
 80128d8:	9800      	ldr	r0, [sp, #0]
 80128da:	f006 ff0e 	bl	80196fa <strcpy>
		InternalBatteryChargedAgain=0;
 80128de:	2300      	movs	r3, #0
 80128e0:	6023      	str	r3, [r4, #0]
 80128e2:	e7b1      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryDisconnect);
 80128e4:	493a      	ldr	r1, [pc, #232]	; (80129d0 <GetHead+0x3e0>)
 80128e6:	9800      	ldr	r0, [sp, #0]
 80128e8:	f006 ff07 	bl	80196fa <strcpy>
		MainBatteryDisconnect=0;
 80128ec:	2300      	movs	r3, #0
 80128ee:	464a      	mov	r2, r9
 80128f0:	6013      	str	r3, [r2, #0]
 80128f2:	e7a9      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_MainBatteryReconnect);
 80128f4:	4937      	ldr	r1, [pc, #220]	; (80129d4 <GetHead+0x3e4>)
 80128f6:	9800      	ldr	r0, [sp, #0]
 80128f8:	f006 feff 	bl	80196fa <strcpy>
		MainBatteryReconnect=0;
 80128fc:	2300      	movs	r3, #0
 80128fe:	6023      	str	r3, [r4, #0]
 8012900:	e7a2      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_HistoryPVTData);
 8012902:	4923      	ldr	r1, [pc, #140]	; (8012990 <GetHead+0x3a0>)
 8012904:	9800      	ldr	r0, [sp, #0]
 8012906:	f006 fef8 	bl	80196fa <strcpy>
		HistoryPVTData=0;
 801290a:	2300      	movs	r3, #0
 801290c:	6033      	str	r3, [r6, #0]
 801290e:	e79b      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_HealthPacket);
 8012910:	4931      	ldr	r1, [pc, #196]	; (80129d8 <GetHead+0x3e8>)
 8012912:	9800      	ldr	r0, [sp, #0]
 8012914:	f006 fef1 	bl	80196fa <strcpy>
		HealthPacket=0;
 8012918:	2300      	movs	r3, #0
 801291a:	6033      	str	r3, [r6, #0]
 801291c:	e794      	b.n	8012848 <GetHead+0x258>
		strcat(Head,AlartStr_NormalPkt);
 801291e:	492f      	ldr	r1, [pc, #188]	; (80129dc <GetHead+0x3ec>)
 8012920:	9800      	ldr	r0, [sp, #0]
 8012922:	f006 feea 	bl	80196fa <strcpy>
 8012926:	e78f      	b.n	8012848 <GetHead+0x258>
 8012928:	20001df8 	.word	0x20001df8
 801292c:	200000a0 	.word	0x200000a0
 8012930:	200000b8 	.word	0x200000b8
 8012934:	20003f60 	.word	0x20003f60
 8012938:	20000098 	.word	0x20000098
 801293c:	200004b8 	.word	0x200004b8
 8012940:	20001ed4 	.word	0x20001ed4
 8012944:	20001ea0 	.word	0x20001ea0
 8012948:	20001e9c 	.word	0x20001e9c
 801294c:	20001e98 	.word	0x20001e98
 8012950:	40400000 	.word	0x40400000
 8012954:	20001ea4 	.word	0x20001ea4
 8012958:	20001ea8 	.word	0x20001ea8
 801295c:	20001ee8 	.word	0x20001ee8
 8012960:	20001eec 	.word	0x20001eec
 8012964:	20001d7c 	.word	0x20001d7c
 8012968:	41200000 	.word	0x41200000
 801296c:	200000b0 	.word	0x200000b0
 8012970:	200004f4 	.word	0x200004f4
 8012974:	200004bc 	.word	0x200004bc
 8012978:	20000310 	.word	0x20000310
 801297c:	20000090 	.word	0x20000090
 8012980:	20001e60 	.word	0x20001e60
 8012984:	20001e5c 	.word	0x20001e5c
 8012988:	20001ef0 	.word	0x20001ef0
 801298c:	20000078 	.word	0x20000078
 8012990:	20000038 	.word	0x20000038
 8012994:	0801e120 	.word	0x0801e120
 8012998:	20000314 	.word	0x20000314
 801299c:	20000080 	.word	0x20000080
 80129a0:	200000ac 	.word	0x200000ac
 80129a4:	20000018 	.word	0x20000018
 80129a8:	20000010 	.word	0x20000010
 80129ac:	20000020 	.word	0x20000020
 80129b0:	20000028 	.word	0x20000028
 80129b4:	20000008 	.word	0x20000008
 80129b8:	20000088 	.word	0x20000088
 80129bc:	20000048 	.word	0x20000048
 80129c0:	20000040 	.word	0x20000040
 80129c4:	20000050 	.word	0x20000050
 80129c8:	20000000 	.word	0x20000000
 80129cc:	20000058 	.word	0x20000058
 80129d0:	20000060 	.word	0x20000060
 80129d4:	20000068 	.word	0x20000068
 80129d8:	20000030 	.word	0x20000030
 80129dc:	20000070 	.word	0x20000070

080129e0 <TestRun>:
void TestRun(){
 80129e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129e2:	46de      	mov	lr, fp
 80129e4:	4657      	mov	r7, sl
 80129e6:	464e      	mov	r6, r9
 80129e8:	4645      	mov	r5, r8
 80129ea:	b5e0      	push	{r5, r6, r7, lr}
	if(errorlen>10){
 80129ec:	4bf3      	ldr	r3, [pc, #972]	; (8012dbc <TestRun+0x3dc>)
void TestRun(){
 80129ee:	b091      	sub	sp, #68	; 0x44
	if(errorlen>10){
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2b0a      	cmp	r3, #10
 80129f4:	dd00      	ble.n	80129f8 <TestRun+0x18>
 80129f6:	e308      	b.n	801300a <TestRun+0x62a>
	printInt(seqNo);
 80129f8:	4bf1      	ldr	r3, [pc, #964]	; (8012dc0 <TestRun+0x3e0>)
	memset(printBuf,0,50);
 80129fa:	4cf2      	ldr	r4, [pc, #968]	; (8012dc4 <TestRun+0x3e4>)
 80129fc:	681d      	ldr	r5, [r3, #0]
 80129fe:	2232      	movs	r2, #50	; 0x32
 8012a00:	2100      	movs	r1, #0
 8012a02:	0020      	movs	r0, r4
 8012a04:	9308      	str	r3, [sp, #32]
 8012a06:	f006 fd17 	bl	8019438 <memset>
	snprintf(printBuf, 6, "%d", x);
 8012a0a:	002b      	movs	r3, r5
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8012a0c:	250c      	movs	r5, #12
 8012a0e:	2106      	movs	r1, #6
 8012a10:	4aed      	ldr	r2, [pc, #948]	; (8012dc8 <TestRun+0x3e8>)
 8012a12:	0020      	movs	r0, r4
 8012a14:	f006 fc70 	bl	80192f8 <sniprintf>
 8012a18:	4bec      	ldr	r3, [pc, #944]	; (8012dcc <TestRun+0x3ec>)
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8012a1a:	0020      	movs	r0, r4
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8012a1c:	4699      	mov	r9, r3
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	621d      	str	r5, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8012a22:	f7f9 ff6d 	bl	800c900 <strlen>
 8012a26:	0021      	movs	r1, r4
 8012a28:	b282      	uxth	r2, r0
 8012a2a:	4be9      	ldr	r3, [pc, #932]	; (8012dd0 <TestRun+0x3f0>)
 8012a2c:	4648      	mov	r0, r9
 8012a2e:	f004 faf3 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8012a32:	4be8      	ldr	r3, [pc, #928]	; (8012dd4 <TestRun+0x3f4>)
 8012a34:	ac0f      	add	r4, sp, #60	; 0x3c
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8012a36:	2202      	movs	r2, #2
 8012a38:	0021      	movs	r1, r4
	char newline[2] = "\r\n";
 8012a3a:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8012a3c:	4648      	mov	r0, r9
 8012a3e:	230a      	movs	r3, #10
 8012a40:	f004 faea 	bl	8017018 <HAL_UART_Transmit>
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8012a44:	2180      	movs	r1, #128	; 0x80
 8012a46:	48e4      	ldr	r0, [pc, #912]	; (8012dd8 <TestRun+0x3f8>)
 8012a48:	0189      	lsls	r1, r1, #6
 8012a4a:	f002 f8b3 	bl	8014bb4 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8012a4e:	2180      	movs	r1, #128	; 0x80
	MAINS_STATE=Read_DI_MAINS_STATE();
 8012a50:	4be2      	ldr	r3, [pc, #904]	; (8012ddc <TestRun+0x3fc>)
 8012a52:	01c9      	lsls	r1, r1, #7
	int val=HAL_GPIO_ReadPin (DI_MAINS_STATE_GPIO_Port, DI_MAINS_STATE_Pin);
 8012a54:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8012a56:	48e0      	ldr	r0, [pc, #896]	; (8012dd8 <TestRun+0x3f8>)
 8012a58:	f002 f8ac 	bl	8014bb4 <HAL_GPIO_ReadPin>
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8012a5c:	2180      	movs	r1, #128	; 0x80
	ACC_STATE=Read_DI_ACC_STATE();
 8012a5e:	4be0      	ldr	r3, [pc, #896]	; (8012de0 <TestRun+0x400>)
 8012a60:	0209      	lsls	r1, r1, #8
	int val=HAL_GPIO_ReadPin (DI_ACC_STATE_GPIO_Port, DI_ACC_STATE_Pin);
 8012a62:	6018      	str	r0, [r3, #0]
	int val=HAL_GPIO_ReadPin (DI_BOX_STATE_GPIO_Port, DI_BOX_STATE_Pin);
 8012a64:	48dc      	ldr	r0, [pc, #880]	; (8012dd8 <TestRun+0x3f8>)
 8012a66:	f002 f8a5 	bl	8014bb4 <HAL_GPIO_ReadPin>
		else box='C';
 8012a6a:	3801      	subs	r0, #1
 8012a6c:	4243      	negs	r3, r0
 8012a6e:	4158      	adcs	r0, r3
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8012a70:	2180      	movs	r1, #128	; 0x80
		else box='C';
 8012a72:	4243      	negs	r3, r0
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8012a74:	20a0      	movs	r0, #160	; 0xa0
	BOX_STATE=Read_DI_BOX_STATE();
 8012a76:	4adb      	ldr	r2, [pc, #876]	; (8012de4 <TestRun+0x404>)
		else box='C';
 8012a78:	402b      	ands	r3, r5
 8012a7a:	3343      	adds	r3, #67	; 0x43
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8012a7c:	0049      	lsls	r1, r1, #1
 8012a7e:	05c0      	lsls	r0, r0, #23
 8012a80:	7013      	strb	r3, [r2, #0]
 8012a82:	f002 f897 	bl	8014bb4 <HAL_GPIO_ReadPin>
	SOS_STATE=Read_DI_SOS_STATE();
 8012a86:	4bd8      	ldr	r3, [pc, #864]	; (8012de8 <TestRun+0x408>)
	return (ADCvalue[2]*VSENSE*16);
 8012a88:	4fd8      	ldr	r7, [pc, #864]	; (8012dec <TestRun+0x40c>)
	int val=HAL_GPIO_ReadPin (DI_SOS_STATE_GPIO_Port, DI_SOS_STATE_Pin);
 8012a8a:	6018      	str	r0, [r3, #0]
	return (ADCvalue[2]*VSENSE*16);
 8012a8c:	4bd8      	ldr	r3, [pc, #864]	; (8012df0 <TestRun+0x410>)
 8012a8e:	68b8      	ldr	r0, [r7, #8]
 8012a90:	681e      	ldr	r6, [r3, #0]
 8012a92:	f7fb f879 	bl	800db88 <__aeabi_ui2f>
 8012a96:	1c31      	adds	r1, r6, #0
 8012a98:	f7fa fd16 	bl	800d4c8 <__aeabi_fmul>
 8012a9c:	2183      	movs	r1, #131	; 0x83
 8012a9e:	05c9      	lsls	r1, r1, #23
 8012aa0:	f7fa fd12 	bl	800d4c8 <__aeabi_fmul>
	EXT_B=Read_EXT_B_SENSE();
 8012aa4:	4bd3      	ldr	r3, [pc, #844]	; (8012df4 <TestRun+0x414>)
 8012aa6:	1c05      	adds	r5, r0, #0
 8012aa8:	6018      	str	r0, [r3, #0]
	INT_B=Read_INT_B_SENSE();
 8012aaa:	4bd3      	ldr	r3, [pc, #844]	; (8012df8 <TestRun+0x418>)
	return (ADCvalue[3]*VSENSE*2);
 8012aac:	68f8      	ldr	r0, [r7, #12]
 8012aae:	4698      	mov	r8, r3
 8012ab0:	f7fb f86a 	bl	800db88 <__aeabi_ui2f>
 8012ab4:	1c31      	adds	r1, r6, #0
 8012ab6:	f7fa fd07 	bl	800d4c8 <__aeabi_fmul>
 8012aba:	1c01      	adds	r1, r0, #0
 8012abc:	f7fa f99a 	bl	800cdf4 <__aeabi_fadd>
 8012ac0:	4643      	mov	r3, r8
 8012ac2:	6018      	str	r0, [r3, #0]
	adc[0]=Read_ADC1();
 8012ac4:	4bcd      	ldr	r3, [pc, #820]	; (8012dfc <TestRun+0x41c>)
	float val=(float)ADCvalue[0];
 8012ac6:	6838      	ldr	r0, [r7, #0]
 8012ac8:	4698      	mov	r8, r3
 8012aca:	f7fb f85d 	bl	800db88 <__aeabi_ui2f>
	return ((float)(val*VSENSE*11));
 8012ace:	1c31      	adds	r1, r6, #0
 8012ad0:	f7fa fcfa 	bl	800d4c8 <__aeabi_fmul>
 8012ad4:	49ca      	ldr	r1, [pc, #808]	; (8012e00 <TestRun+0x420>)
 8012ad6:	f7fa fcf7 	bl	800d4c8 <__aeabi_fmul>
 8012ada:	4643      	mov	r3, r8
 8012adc:	6018      	str	r0, [r3, #0]
	return (ADCvalue[1]*VSENSE*11);
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f7fb f852 	bl	800db88 <__aeabi_ui2f>
 8012ae4:	1c31      	adds	r1, r6, #0
 8012ae6:	f7fa fcef 	bl	800d4c8 <__aeabi_fmul>
 8012aea:	49c5      	ldr	r1, [pc, #788]	; (8012e00 <TestRun+0x420>)
 8012aec:	f7fa fcec 	bl	800d4c8 <__aeabi_fmul>
	adc[1]=Read_ADC2();
 8012af0:	4643      	mov	r3, r8
	if(EXT_B>7){
 8012af2:	49c4      	ldr	r1, [pc, #784]	; (8012e04 <TestRun+0x424>)
	adc[1]=Read_ADC2();
 8012af4:	6058      	str	r0, [r3, #4]
	if(EXT_B>7){
 8012af6:	1c28      	adds	r0, r5, #0
 8012af8:	f7fa f8f8 	bl	800ccec <__aeabi_fcmpgt>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d000      	beq.n	8012b02 <TestRun+0x122>
 8012b00:	e1c9      	b.n	8012e96 <TestRun+0x4b6>
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_RESET);
 8012b02:	2200      	movs	r2, #0
 8012b04:	2101      	movs	r1, #1
 8012b06:	48c0      	ldr	r0, [pc, #768]	; (8012e08 <TestRun+0x428>)
 8012b08:	f002 f85a 	bl	8014bc0 <HAL_GPIO_WritePin>
memset(INSMSno,0,30);
 8012b0c:	4bbf      	ldr	r3, [pc, #764]	; (8012e0c <TestRun+0x42c>)
 8012b0e:	221e      	movs	r2, #30
 8012b10:	2100      	movs	r1, #0
 8012b12:	0018      	movs	r0, r3
 8012b14:	469b      	mov	fp, r3
 8012b16:	f006 fc8f 	bl	8019438 <memset>
memset(OUTSMSno,0,30);
 8012b1a:	4bbd      	ldr	r3, [pc, #756]	; (8012e10 <TestRun+0x430>)
 8012b1c:	221e      	movs	r2, #30
 8012b1e:	2100      	movs	r1, #0
 8012b20:	0018      	movs	r0, r3
 8012b22:	469a      	mov	sl, r3
 8012b24:	f006 fc88 	bl	8019438 <memset>
memset(EmgIP,0,50);
 8012b28:	4bba      	ldr	r3, [pc, #744]	; (8012e14 <TestRun+0x434>)
 8012b2a:	2232      	movs	r2, #50	; 0x32
 8012b2c:	2100      	movs	r1, #0
 8012b2e:	0018      	movs	r0, r3
 8012b30:	9306      	str	r3, [sp, #24]
 8012b32:	f006 fc81 	bl	8019438 <memset>
memset(RegIP,0,50);
 8012b36:	4bb8      	ldr	r3, [pc, #736]	; (8012e18 <TestRun+0x438>)
 8012b38:	2232      	movs	r2, #50	; 0x32
 8012b3a:	0018      	movs	r0, r3
 8012b3c:	2100      	movs	r1, #0
 8012b3e:	4698      	mov	r8, r3
 8012b40:	f006 fc7a 	bl	8019438 <memset>
memset(TracIP,0,50);
 8012b44:	4fb5      	ldr	r7, [pc, #724]	; (8012e1c <TestRun+0x43c>)
 8012b46:	2232      	movs	r2, #50	; 0x32
 8012b48:	2100      	movs	r1, #0
 8012b4a:	0038      	movs	r0, r7
 8012b4c:	f006 fc74 	bl	8019438 <memset>
memset(simop,0,25);
 8012b50:	4bb3      	ldr	r3, [pc, #716]	; (8012e20 <TestRun+0x440>)
 8012b52:	2219      	movs	r2, #25
 8012b54:	2100      	movs	r1, #0
 8012b56:	0018      	movs	r0, r3
 8012b58:	9305      	str	r3, [sp, #20]
 8012b5a:	f006 fc6d 	bl	8019438 <memset>

char* readINSMSno(){
	uint8_t add4[]={0x00, 0x00,0x00};
 8012b5e:	4eb1      	ldr	r6, [pc, #708]	; (8012e24 <TestRun+0x444>)
	add4[2]=RegNoLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8012b60:	4db1      	ldr	r5, [pc, #708]	; (8012e28 <TestRun+0x448>)
	uint8_t add4[]={0x00, 0x00,0x00};
 8012b62:	8833      	ldrh	r3, [r6, #0]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8012b64:	2264      	movs	r2, #100	; 0x64
	uint8_t add4[]={0x00, 0x00,0x00};
 8012b66:	8023      	strh	r3, [r4, #0]
	add4[2]=RegNoLen;
 8012b68:	2310      	movs	r3, #16
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8012b6a:	0029      	movs	r1, r5
	add4[2]=RegNoLen;
 8012b6c:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , INSMSLen);
 8012b6e:	0020      	movs	r0, r4
 8012b70:	f7fe fde0 	bl	8011734 <SPI_flash_Read_Data>
strcpy(INSMSno,readINSMSno());
 8012b74:	0029      	movs	r1, r5
 8012b76:	4658      	mov	r0, fp
 8012b78:	f006 fdbf 	bl	80196fa <strcpy>
	return (char*) dataR;
}

char* readOUTSMSno(){

	uint8_t  add4[]={0x00, 0x00,0x00};
 8012b7c:	8833      	ldrh	r3, [r6, #0]
	add4[2]=RegNoLen+INSMSLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8012b7e:	223c      	movs	r2, #60	; 0x3c
	uint8_t  add4[]={0x00, 0x00,0x00};
 8012b80:	8023      	strh	r3, [r4, #0]
	add4[2]=RegNoLen+INSMSLen;
 8012b82:	2374      	movs	r3, #116	; 0x74
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8012b84:	0029      	movs	r1, r5
	add4[2]=RegNoLen+INSMSLen;
 8012b86:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , OUTSMSLen);
 8012b88:	0020      	movs	r0, r4
 8012b8a:	f7fe fdd3 	bl	8011734 <SPI_flash_Read_Data>
strcpy(OUTSMSno,readOUTSMSno());
 8012b8e:	0029      	movs	r1, r5
 8012b90:	4650      	mov	r0, sl
 8012b92:	f006 fdb2 	bl	80196fa <strcpy>
	return (char*) dataR;
}

char* readEmgIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8012b96:	88b3      	ldrh	r3, [r6, #4]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8012b98:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8012b9a:	8023      	strh	r3, [r4, #0]
 8012b9c:	79b3      	ldrb	r3, [r6, #6]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8012b9e:	0029      	movs	r1, r5
	uint8_t  add4[]={0x00, 0x01,0x00};
 8012ba0:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , EmgIPLen);
 8012ba2:	0020      	movs	r0, r4
 8012ba4:	f7fe fdc6 	bl	8011734 <SPI_flash_Read_Data>
strcpy(EmgIP,readEmgIP());
 8012ba8:	0029      	movs	r1, r5
 8012baa:	9806      	ldr	r0, [sp, #24]
 8012bac:	f006 fda5 	bl	80196fa <strcpy>
	return (char*) dataR;
}

char* readRegIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8012bb0:	88b3      	ldrh	r3, [r6, #4]
	add4[2]=EmgIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8012bb2:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8012bb4:	8023      	strh	r3, [r4, #0]
	add4[2]=EmgIPLen;
 8012bb6:	2328      	movs	r3, #40	; 0x28
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8012bb8:	0029      	movs	r1, r5
	add4[2]=EmgIPLen;
 8012bba:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , RegIPLen);
 8012bbc:	0020      	movs	r0, r4
 8012bbe:	f7fe fdb9 	bl	8011734 <SPI_flash_Read_Data>
strcpy(RegIP,readRegIP());
 8012bc2:	0029      	movs	r1, r5
 8012bc4:	4640      	mov	r0, r8
 8012bc6:	f006 fd98 	bl	80196fa <strcpy>
	return (char*) dataR;
}

char* readTracIP(){
	uint8_t  add4[]={0x00, 0x01,0x00};
 8012bca:	88b3      	ldrh	r3, [r6, #4]
	add4[2]=EmgIPLen+RegIPLen;
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8012bcc:	2228      	movs	r2, #40	; 0x28
	uint8_t  add4[]={0x00, 0x01,0x00};
 8012bce:	8023      	strh	r3, [r4, #0]
	add4[2]=EmgIPLen+RegIPLen;
 8012bd0:	2350      	movs	r3, #80	; 0x50
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8012bd2:	0029      	movs	r1, r5
	add4[2]=EmgIPLen+RegIPLen;
 8012bd4:	70a3      	strb	r3, [r4, #2]
	SPI_flash_Read_Data(add4 , (uint8_t*)dataR , TrackIPLen);
 8012bd6:	0020      	movs	r0, r4
 8012bd8:	f7fe fdac 	bl	8011734 <SPI_flash_Read_Data>
strcpy(TracIP,readTracIP());
 8012bdc:	0029      	movs	r1, r5
 8012bde:	0038      	movs	r0, r7
 8012be0:	f006 fd8b 	bl	80196fa <strcpy>
	SendGSMCode("  AT+COPS?");
 8012be4:	4891      	ldr	r0, [pc, #580]	; (8012e2c <TestRun+0x44c>)
 8012be6:	f7fd f871 	bl	800fccc <SendGSMCode>
	return (GetGSMReply(0, "+COPS:", 12, "\"", "Error: AT+COPS? sim operator error", 5000, "OK"));
 8012bea:	4a91      	ldr	r2, [pc, #580]	; (8012e30 <TestRun+0x450>)
 8012bec:	4d78      	ldr	r5, [pc, #480]	; (8012dd0 <TestRun+0x3f0>)
 8012bee:	9202      	str	r2, [sp, #8]
 8012bf0:	4a90      	ldr	r2, [pc, #576]	; (8012e34 <TestRun+0x454>)
 8012bf2:	4b91      	ldr	r3, [pc, #580]	; (8012e38 <TestRun+0x458>)
 8012bf4:	4991      	ldr	r1, [pc, #580]	; (8012e3c <TestRun+0x45c>)
 8012bf6:	9200      	str	r2, [sp, #0]
 8012bf8:	2000      	movs	r0, #0
 8012bfa:	220c      	movs	r2, #12
 8012bfc:	9501      	str	r5, [sp, #4]
 8012bfe:	f7fd f9f9 	bl	800fff4 <GetGSMReply>
 8012c02:	0001      	movs	r1, r0
strcpy(simop, GSMSimOperator());
 8012c04:	9805      	ldr	r0, [sp, #20]
 8012c06:	f006 fd78 	bl	80196fa <strcpy>
	return HAL_GetTick();
 8012c0a:	f001 f90b 	bl	8013e24 <HAL_GetTick>
	GSMCellInfo();
 8012c0e:	f7fd fd5b 	bl	80106c8 <GSMCellInfo>
	GetHead();
 8012c12:	f7ff fced 	bl	80125f0 <GetHead>
	if (debug==122){
 8012c16:	4b8a      	ldr	r3, [pc, #552]	; (8012e40 <TestRun+0x460>)
		memset(DataString,0,300);
 8012c18:	4e8a      	ldr	r6, [pc, #552]	; (8012e44 <TestRun+0x464>)
	if (debug==122){
 8012c1a:	469a      	mov	sl, r3
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	2b7a      	cmp	r3, #122	; 0x7a
 8012c20:	d100      	bne.n	8012c24 <TestRun+0x244>
 8012c22:	e164      	b.n	8012eee <TestRun+0x50e>
 8012c24:	4b88      	ldr	r3, [pc, #544]	; (8012e48 <TestRun+0x468>)
 8012c26:	9309      	str	r3, [sp, #36]	; 0x24
 8012c28:	4b88      	ldr	r3, [pc, #544]	; (8012e4c <TestRun+0x46c>)
 8012c2a:	469b      	mov	fp, r3
 8012c2c:	4b88      	ldr	r3, [pc, #544]	; (8012e50 <TestRun+0x470>)
 8012c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8012c30:	4b88      	ldr	r3, [pc, #544]	; (8012e54 <TestRun+0x474>)
 8012c32:	9306      	str	r3, [sp, #24]
 8012c34:	4b88      	ldr	r3, [pc, #544]	; (8012e58 <TestRun+0x478>)
 8012c36:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c38:	4b88      	ldr	r3, [pc, #544]	; (8012e5c <TestRun+0x47c>)
 8012c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8012c3c:	4b88      	ldr	r3, [pc, #544]	; (8012e60 <TestRun+0x480>)
 8012c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8012c40:	4b88      	ldr	r3, [pc, #544]	; (8012e64 <TestRun+0x484>)
 8012c42:	9307      	str	r3, [sp, #28]
	memset(data_LOGIN,0,100);
 8012c44:	4d88      	ldr	r5, [pc, #544]	; (8012e68 <TestRun+0x488>)
 8012c46:	2264      	movs	r2, #100	; 0x64
 8012c48:	2100      	movs	r1, #0
 8012c4a:	0028      	movs	r0, r5
 8012c4c:	f006 fbf4 	bl	8019438 <memset>
	strcat(data_LOGIN,"$");
 8012c50:	0028      	movs	r0, r5
 8012c52:	f7f9 fe55 	bl	800c900 <strlen>
 8012c56:	2324      	movs	r3, #36	; 0x24
 8012c58:	4698      	mov	r8, r3
 8012c5a:	542b      	strb	r3, [r5, r0]
 8012c5c:	3001      	adds	r0, #1
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8012c5e:	4659      	mov	r1, fp
 8012c60:	1828      	adds	r0, r5, r0
 8012c62:	f006 fcaf 	bl	80195c4 <stpcpy>
 8012c66:	272c      	movs	r7, #44	; 0x2c
	strcat(data_LOGIN,"$");
 8012c68:	4643      	mov	r3, r8
	strcat(data_LOGIN,Regno);strcat(data_LOGIN,",");
 8012c6a:	7007      	strb	r7, [r0, #0]
	strcat(data_LOGIN,"$");
 8012c6c:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8012c6e:	9906      	ldr	r1, [sp, #24]
 8012c70:	3002      	adds	r0, #2
 8012c72:	f006 fca7 	bl	80195c4 <stpcpy>
	strcat(data_LOGIN,"$");
 8012c76:	4642      	mov	r2, r8
	strcat(data_LOGIN,IMEI);strcat(data_LOGIN,",");
 8012c78:	7007      	strb	r7, [r0, #0]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8012c7a:	4f7c      	ldr	r7, [pc, #496]	; (8012e6c <TestRun+0x48c>)
	strcat(data_LOGIN,"$");
 8012c7c:	7042      	strb	r2, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",");
 8012c7e:	0039      	movs	r1, r7
 8012c80:	3002      	adds	r0, #2
 8012c82:	f006 fc9f 	bl	80195c4 <stpcpy>
 8012c86:	232c      	movs	r3, #44	; 0x2c
 8012c88:	7003      	strb	r3, [r0, #0]
	strcat(data_LOGIN,"$");
 8012c8a:	4643      	mov	r3, r8
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",0.0E0.0N,");
 8012c8c:	0039      	movs	r1, r7
	strcat(data_LOGIN,"$");
 8012c8e:	7043      	strb	r3, [r0, #1]
	strcat(data_LOGIN,VerStr);strcat(data_LOGIN,",0.0E0.0N,");
 8012c90:	3002      	adds	r0, #2
 8012c92:	f006 fc97 	bl	80195c4 <stpcpy>
 8012c96:	220b      	movs	r2, #11
 8012c98:	4975      	ldr	r1, [pc, #468]	; (8012e70 <TestRun+0x490>)
 8012c9a:	f006 fd41 	bl	8019720 <memcpy>
    while (*s)
 8012c9e:	782b      	ldrb	r3, [r5, #0]
    int c = 0;
 8012ca0:	2200      	movs	r2, #0
    while (*s)
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d005      	beq.n	8012cb2 <TestRun+0x2d2>
 8012ca6:	0029      	movs	r1, r5
        c ^= *s++;
 8012ca8:	3101      	adds	r1, #1
 8012caa:	405a      	eors	r2, r3
    while (*s)
 8012cac:	780b      	ldrb	r3, [r1, #0]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d1fa      	bne.n	8012ca8 <TestRun+0x2c8>
	sprintf(checksum, "%02x",nmea0183_checksum(data_LOGIN));
 8012cb2:	4b70      	ldr	r3, [pc, #448]	; (8012e74 <TestRun+0x494>)
 8012cb4:	4f70      	ldr	r7, [pc, #448]	; (8012e78 <TestRun+0x498>)
 8012cb6:	0019      	movs	r1, r3
 8012cb8:	0038      	movs	r0, r7
 8012cba:	4698      	mov	r8, r3
 8012cbc:	f006 fb50 	bl	8019360 <siprintf>
	strcat(data_LOGIN,checksum);
 8012cc0:	0028      	movs	r0, r5
 8012cc2:	f7f9 fe1d 	bl	800c900 <strlen>
 8012cc6:	0039      	movs	r1, r7
 8012cc8:	1828      	adds	r0, r5, r0
 8012cca:	f006 fc7b 	bl	80195c4 <stpcpy>
	strcat(data_LOGIN,",*\0");
 8012cce:	9907      	ldr	r1, [sp, #28]
 8012cd0:	2203      	movs	r2, #3
 8012cd2:	3138      	adds	r1, #56	; 0x38
 8012cd4:	f006 fd24 	bl	8019720 <memcpy>
    memset(checksum,0,3);
 8012cd8:	2203      	movs	r2, #3
 8012cda:	2100      	movs	r1, #0
 8012cdc:	0038      	movs	r0, r7
 8012cde:	f006 fbab 	bl	8019438 <memset>
    memset(DataString,0,300);
 8012ce2:	2296      	movs	r2, #150	; 0x96
 8012ce4:	2100      	movs	r1, #0
 8012ce6:	0052      	lsls	r2, r2, #1
 8012ce8:	0030      	movs	r0, r6
 8012cea:	f006 fba5 	bl	8019438 <memset>
	strcat(DataString,Head);strcat(DataString,",");
 8012cee:	0030      	movs	r0, r6
 8012cf0:	f7f9 fe06 	bl	800c900 <strlen>
 8012cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012cf6:	1830      	adds	r0, r6, r0
 8012cf8:	252c      	movs	r5, #44	; 0x2c
 8012cfa:	f006 fc63 	bl	80195c4 <stpcpy>
	strcat(DataString,IMEI);strcat(DataString,",");
 8012cfe:	9906      	ldr	r1, [sp, #24]
	strcat(DataString,Head);strcat(DataString,",");
 8012d00:	7005      	strb	r5, [r0, #0]
	strcat(DataString,IMEI);strcat(DataString,",");
 8012d02:	3001      	adds	r0, #1
 8012d04:	f006 fc5e 	bl	80195c4 <stpcpy>
	strcat(DataString,Regno);strcat(DataString,",");
 8012d08:	4659      	mov	r1, fp
	strcat(DataString,IMEI);strcat(DataString,",");
 8012d0a:	7005      	strb	r5, [r0, #0]
	strcat(DataString,Regno);strcat(DataString,",");
 8012d0c:	3001      	adds	r0, #1
 8012d0e:	f006 fc59 	bl	80195c4 <stpcpy>
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8012d12:	990a      	ldr	r1, [sp, #40]	; 0x28
	strcat(DataString,Regno);strcat(DataString,",");
 8012d14:	7005      	strb	r5, [r0, #0]
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8012d16:	3001      	adds	r0, #1
 8012d18:	f006 fc54 	bl	80195c4 <stpcpy>
	strcat(DataString,simop);strcat(DataString,",");
 8012d1c:	9905      	ldr	r1, [sp, #20]
	strcat(DataString,gpsDataRet);strcat(DataString,",");
 8012d1e:	7005      	strb	r5, [r0, #0]
	strcat(DataString,simop);strcat(DataString,",");
 8012d20:	3001      	adds	r0, #1
 8012d22:	f006 fc4f 	bl	80195c4 <stpcpy>
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8012d26:	990b      	ldr	r1, [sp, #44]	; 0x2c
	strcat(DataString,simop);strcat(DataString,",");
 8012d28:	7005      	strb	r5, [r0, #0]
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8012d2a:	3001      	adds	r0, #1
 8012d2c:	f006 fc4a 	bl	80195c4 <stpcpy>
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8012d30:	990c      	ldr	r1, [sp, #48]	; 0x30
 	strcat(DataString,StatusStrng);strcat(DataString,",");
 8012d32:	7005      	strb	r5, [r0, #0]
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8012d34:	3001      	adds	r0, #1
 8012d36:	f006 fc45 	bl	80195c4 <stpcpy>
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8012d3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 	strcat(DataString,gsminfo);strcat(DataString,",");
 8012d3c:	7005      	strb	r5, [r0, #0]
 	strcat(DataString,Dig_io);//strcat(DataString,"\0");
 8012d3e:	3001      	adds	r0, #1
 8012d40:	f006 fcdb 	bl	80196fa <strcpy>
 8012d44:	7833      	ldrb	r3, [r6, #0]
    int c = 0;
 8012d46:	2200      	movs	r2, #0
    while (*s)
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d005      	beq.n	8012d58 <TestRun+0x378>
 8012d4c:	0031      	movs	r1, r6
        c ^= *s++;
 8012d4e:	3101      	adds	r1, #1
 8012d50:	405a      	eors	r2, r3
    while (*s)
 8012d52:	780b      	ldrb	r3, [r1, #0]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d1fa      	bne.n	8012d4e <TestRun+0x36e>
    sprintf(checksum, "%02x",nmea0183_checksum(DataString));
 8012d58:	4641      	mov	r1, r8
 8012d5a:	0038      	movs	r0, r7
 8012d5c:	f006 fb00 	bl	8019360 <siprintf>
    strcat(DataString,checksum);
 8012d60:	0030      	movs	r0, r6
 8012d62:	f7f9 fdcd 	bl	800c900 <strlen>
 8012d66:	0039      	movs	r1, r7
 8012d68:	1830      	adds	r0, r6, r0
 8012d6a:	f006 fc2b 	bl	80195c4 <stpcpy>
    strcat(DataString,",*\0");
 8012d6e:	9907      	ldr	r1, [sp, #28]
 8012d70:	2203      	movs	r2, #3
 8012d72:	3138      	adds	r1, #56	; 0x38
 8012d74:	f006 fcd4 	bl	8019720 <memcpy>
    if (debug==1){
 8012d78:	4653      	mov	r3, sl
 8012d7a:	681a      	ldr	r2, [r3, #0]
    if(ServerConnected==1){
 8012d7c:	4b3f      	ldr	r3, [pc, #252]	; (8012e7c <TestRun+0x49c>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d100      	bne.n	8012d86 <TestRun+0x3a6>
 8012d84:	e08d      	b.n	8012ea2 <TestRun+0x4c2>
    	if (debug==1){
 8012d86:	2a01      	cmp	r2, #1
 8012d88:	d100      	bne.n	8012d8c <TestRun+0x3ac>
 8012d8a:	e12b      	b.n	8012fe4 <TestRun+0x604>
    	WriteQdata((uint8_t*)DataString, strlen(DataString)+1);
 8012d8c:	0030      	movs	r0, r6
 8012d8e:	f7f9 fdb7 	bl	800c900 <strlen>
 8012d92:	3001      	adds	r0, #1
 8012d94:	b282      	uxth	r2, r0
	if (len<255){
 8012d96:	2afe      	cmp	r2, #254	; 0xfe
 8012d98:	d800      	bhi.n	8012d9c <TestRun+0x3bc>
 8012d9a:	e094      	b.n	8012ec6 <TestRun+0x4e6>
    	RunCnt++;
 8012d9c:	4a38      	ldr	r2, [pc, #224]	; (8012e80 <TestRun+0x4a0>)
 8012d9e:	6813      	ldr	r3, [r2, #0]
 8012da0:	3301      	adds	r3, #1
    	if(RunCnt>10){
 8012da2:	2b0a      	cmp	r3, #10
 8012da4:	dd00      	ble.n	8012da8 <TestRun+0x3c8>
    		RunCnt=0;
 8012da6:	2300      	movs	r3, #0
 8012da8:	6013      	str	r3, [r2, #0]
 8012daa:	f001 f83b 	bl	8013e24 <HAL_GetTick>
	TimeCount=tic();
 8012dae:	4b35      	ldr	r3, [pc, #212]	; (8012e84 <TestRun+0x4a4>)
 	seqNo=seqNo+1;
 8012db0:	9a08      	ldr	r2, [sp, #32]
	TimeCount=tic();
 8012db2:	6018      	str	r0, [r3, #0]
 	seqNo=seqNo+1;
 8012db4:	6813      	ldr	r3, [r2, #0]
 8012db6:	3301      	adds	r3, #1
 8012db8:	6013      	str	r3, [r2, #0]
}
 8012dba:	e065      	b.n	8012e88 <TestRun+0x4a8>
 8012dbc:	20004148 	.word	0x20004148
 8012dc0:	20004aa4 	.word	0x20004aa4
 8012dc4:	20004a70 	.word	0x20004a70
 8012dc8:	0801d158 	.word	0x0801d158
 8012dcc:	200049d4 	.word	0x200049d4
 8012dd0:	00001388 	.word	0x00001388
 8012dd4:	00000a0d 	.word	0x00000a0d
 8012dd8:	50000400 	.word	0x50000400
 8012ddc:	20001ed4 	.word	0x20001ed4
 8012de0:	200002fc 	.word	0x200002fc
 8012de4:	20000090 	.word	0x20000090
 8012de8:	20003f60 	.word	0x20003f60
 8012dec:	20000300 	.word	0x20000300
 8012df0:	200000b4 	.word	0x200000b4
 8012df4:	200004b4 	.word	0x200004b4
 8012df8:	20001e98 	.word	0x20001e98
 8012dfc:	20003fc8 	.word	0x20003fc8
 8012e00:	41300000 	.word	0x41300000
 8012e04:	40e00000 	.word	0x40e00000
 8012e08:	50000c00 	.word	0x50000c00
 8012e0c:	20001e78 	.word	0x20001e78
 8012e10:	20001ef4 	.word	0x20001ef4
 8012e14:	200004c0 	.word	0x200004c0
 8012e18:	20003f14 	.word	0x20003f14
 8012e1c:	20003f94 	.word	0x20003f94
 8012e20:	20004aa8 	.word	0x20004aa8
 8012e24:	0801ceb8 	.word	0x0801ceb8
 8012e28:	20003fd4 	.word	0x20003fd4
 8012e2c:	0801d208 	.word	0x0801d208
 8012e30:	0801d5e4 	.word	0x0801d5e4
 8012e34:	0801d220 	.word	0x0801d220
 8012e38:	0801d214 	.word	0x0801d214
 8012e3c:	0801d218 	.word	0x0801d218
 8012e40:	200000c4 	.word	0x200000c4
 8012e44:	20000354 	.word	0x20000354
 8012e48:	20001df8 	.word	0x20001df8
 8012e4c:	20003f48 	.word	0x20003f48
 8012e50:	20004538 	.word	0x20004538
 8012e54:	20001e64 	.word	0x20001e64
 8012e58:	20003f7c 	.word	0x20003f7c
 8012e5c:	20004584 	.word	0x20004584
 8012e60:	2000048c 	.word	0x2000048c
 8012e64:	0801cf38 	.word	0x0801cf38
 8012e68:	200040d4 	.word	0x200040d4
 8012e6c:	200000b8 	.word	0x200000b8
 8012e70:	0801e0c0 	.word	0x0801e0c0
 8012e74:	0801e0cc 	.word	0x0801e0cc
 8012e78:	20003fd0 	.word	0x20003fd0
 8012e7c:	20003f78 	.word	0x20003f78
 8012e80:	20003f5c 	.word	0x20003f5c
 8012e84:	20003f90 	.word	0x20003f90
 8012e88:	b011      	add	sp, #68	; 0x44
 8012e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8012e8c:	46bb      	mov	fp, r7
 8012e8e:	46b2      	mov	sl, r6
 8012e90:	46a9      	mov	r9, r5
 8012e92:	46a0      	mov	r8, r4
 8012e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(DO_LED_PWR_GPIO_Port, DO_LED_PWR_Pin, GPIO_PIN_SET);
 8012e96:	2201      	movs	r2, #1
 8012e98:	2101      	movs	r1, #1
 8012e9a:	4862      	ldr	r0, [pc, #392]	; (8013024 <TestRun+0x644>)
 8012e9c:	f001 fe90 	bl	8014bc0 <HAL_GPIO_WritePin>
}
 8012ea0:	e634      	b.n	8012b0c <TestRun+0x12c>
    		ProcessTCPAll( ReadMDataS);
 8012ea2:	4c61      	ldr	r4, [pc, #388]	; (8013028 <TestRun+0x648>)
 8012ea4:	e002      	b.n	8012eac <TestRun+0x4cc>
 8012ea6:	0020      	movs	r0, r4
 8012ea8:	f7fd fdd8 	bl	8010a5c <ProcessTCPAll>
    	while(ReadQdata()>0){
 8012eac:	f7fe fc78 	bl	80117a0 <ReadQdata>
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	dcf8      	bgt.n	8012ea6 <TestRun+0x4c6>
 8012eb4:	f000 ffb6 	bl	8013e24 <HAL_GetTick>
     	ProcessTCPAll(DataString);
 8012eb8:	0030      	movs	r0, r6
 8012eba:	f7fd fdcf 	bl	8010a5c <ProcessTCPAll>
     	RunCnt=0;
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	4b5a      	ldr	r3, [pc, #360]	; (801302c <TestRun+0x64c>)
 8012ec2:	601a      	str	r2, [r3, #0]
 8012ec4:	e771      	b.n	8012daa <TestRun+0x3ca>
		SPI_flash_Page_Program(WrtAdd, data,len);
 8012ec6:	4c5a      	ldr	r4, [pc, #360]	; (8013030 <TestRun+0x650>)
 8012ec8:	0031      	movs	r1, r6
 8012eca:	0020      	movs	r0, r4
 8012ecc:	f7fe fbc6 	bl	801165c <SPI_flash_Page_Program>
	int addi=(WrtAdd[0]*256*256)+(WrtAdd[1]*256)+(WrtAdd[2])+inc;
 8012ed0:	7823      	ldrb	r3, [r4, #0]
 8012ed2:	7862      	ldrb	r2, [r4, #1]
 8012ed4:	021b      	lsls	r3, r3, #8
 8012ed6:	189b      	adds	r3, r3, r2
 8012ed8:	78a2      	ldrb	r2, [r4, #2]
 8012eda:	021b      	lsls	r3, r3, #8
 8012edc:	189b      	adds	r3, r3, r2
 8012ede:	3301      	adds	r3, #1
 8012ee0:	33ff      	adds	r3, #255	; 0xff
	WrtAdd[0]=addi/(256*256);
 8012ee2:	141a      	asrs	r2, r3, #16
 8012ee4:	7022      	strb	r2, [r4, #0]
	WrtAdd[1]=(addi%(256*256))/256;
 8012ee6:	121a      	asrs	r2, r3, #8
 8012ee8:	7062      	strb	r2, [r4, #1]
	WrtAdd[2]=(addi)%256;
 8012eea:	70a3      	strb	r3, [r4, #2]
}
 8012eec:	e756      	b.n	8012d9c <TestRun+0x3bc>
		memset(DataString,0,300);
 8012eee:	2296      	movs	r2, #150	; 0x96
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	0052      	lsls	r2, r2, #1
 8012ef4:	0030      	movs	r0, r6
 8012ef6:	f006 fa9f 	bl	8019438 <memset>
		strcat(DataString,"Head:");
 8012efa:	0030      	movs	r0, r6
 8012efc:	f7f9 fd00 	bl	800c900 <strlen>
 8012f00:	0007      	movs	r7, r0
 8012f02:	2205      	movs	r2, #5
 8012f04:	494b      	ldr	r1, [pc, #300]	; (8013034 <TestRun+0x654>)
 8012f06:	1830      	adds	r0, r6, r0
 8012f08:	f006 fc0a 	bl	8019720 <memcpy>
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 8012f0c:	494a      	ldr	r1, [pc, #296]	; (8013038 <TestRun+0x658>)
		strcat(DataString,"Head:");
 8012f0e:	1d78      	adds	r0, r7, #5
		strcat(DataString,Head);strcat(DataString,"\nRegno:");
 8012f10:	1830      	adds	r0, r6, r0
 8012f12:	9109      	str	r1, [sp, #36]	; 0x24
 8012f14:	f006 fb56 	bl	80195c4 <stpcpy>
 8012f18:	0007      	movs	r7, r0
 8012f1a:	2208      	movs	r2, #8
 8012f1c:	4947      	ldr	r1, [pc, #284]	; (801303c <TestRun+0x65c>)
 8012f1e:	f006 fbff 	bl	8019720 <memcpy>
		strcat(DataString,Regno);strcat(DataString,"\nGPSDS:");
 8012f22:	4b47      	ldr	r3, [pc, #284]	; (8013040 <TestRun+0x660>)
 8012f24:	1df8      	adds	r0, r7, #7
 8012f26:	0019      	movs	r1, r3
 8012f28:	469b      	mov	fp, r3
 8012f2a:	f006 fb4b 	bl	80195c4 <stpcpy>
 8012f2e:	0007      	movs	r7, r0
 8012f30:	2208      	movs	r2, #8
 8012f32:	4944      	ldr	r1, [pc, #272]	; (8013044 <TestRun+0x664>)
 8012f34:	f006 fbf4 	bl	8019720 <memcpy>
		strcat(DataString,gpsDataRet);strcat(DataString,"\nIMEI:");
 8012f38:	4943      	ldr	r1, [pc, #268]	; (8013048 <TestRun+0x668>)
 8012f3a:	1df8      	adds	r0, r7, #7
 8012f3c:	910a      	str	r1, [sp, #40]	; 0x28
 8012f3e:	f006 fb41 	bl	80195c4 <stpcpy>
 8012f42:	0007      	movs	r7, r0
 8012f44:	2206      	movs	r2, #6
 8012f46:	4941      	ldr	r1, [pc, #260]	; (801304c <TestRun+0x66c>)
 8012f48:	f006 fbea 	bl	8019720 <memcpy>
		strcat(DataString,IMEI);strcat(DataString,"\nSIMOP:");
 8012f4c:	4940      	ldr	r1, [pc, #256]	; (8013050 <TestRun+0x670>)
 8012f4e:	1db8      	adds	r0, r7, #6
 8012f50:	9106      	str	r1, [sp, #24]
 8012f52:	f006 fb37 	bl	80195c4 <stpcpy>
 8012f56:	0007      	movs	r7, r0
 8012f58:	2208      	movs	r2, #8
 8012f5a:	493e      	ldr	r1, [pc, #248]	; (8013054 <TestRun+0x674>)
 8012f5c:	f006 fbe0 	bl	8019720 <memcpy>
		strcat(DataString,simop);strcat(DataString,"\nStratusString:");
 8012f60:	9905      	ldr	r1, [sp, #20]
 8012f62:	1df8      	adds	r0, r7, #7
 8012f64:	f006 fb2e 	bl	80195c4 <stpcpy>
 8012f68:	0007      	movs	r7, r0
 8012f6a:	2210      	movs	r2, #16
 8012f6c:	493a      	ldr	r1, [pc, #232]	; (8013058 <TestRun+0x678>)
 8012f6e:	f006 fbd7 	bl	8019720 <memcpy>
		strcat(DataString,StatusStrng);strcat(DataString,"\nGsminfo:");
 8012f72:	0038      	movs	r0, r7
 8012f74:	4939      	ldr	r1, [pc, #228]	; (801305c <TestRun+0x67c>)
 8012f76:	300f      	adds	r0, #15
 8012f78:	910b      	str	r1, [sp, #44]	; 0x2c
 8012f7a:	f006 fb23 	bl	80195c4 <stpcpy>
 8012f7e:	0007      	movs	r7, r0
 8012f80:	2209      	movs	r2, #9
 8012f82:	4937      	ldr	r1, [pc, #220]	; (8013060 <TestRun+0x680>)
 8012f84:	f006 fbcc 	bl	8019720 <memcpy>
		strcat(DataString,gsminfo);strcat(DataString,"\nDig_io:");
 8012f88:	0038      	movs	r0, r7
 8012f8a:	4936      	ldr	r1, [pc, #216]	; (8013064 <TestRun+0x684>)
 8012f8c:	3009      	adds	r0, #9
 8012f8e:	910c      	str	r1, [sp, #48]	; 0x30
 8012f90:	f006 fb18 	bl	80195c4 <stpcpy>
 8012f94:	0007      	movs	r7, r0
 8012f96:	2208      	movs	r2, #8
 8012f98:	4933      	ldr	r1, [pc, #204]	; (8013068 <TestRun+0x688>)
 8012f9a:	f006 fbc1 	bl	8019720 <memcpy>
		strcat(DataString,Dig_io);strcat(DataString,",\n\0");
 8012f9e:	0038      	movs	r0, r7
 8012fa0:	4932      	ldr	r1, [pc, #200]	; (801306c <TestRun+0x68c>)
 8012fa2:	3008      	adds	r0, #8
 8012fa4:	910d      	str	r1, [sp, #52]	; 0x34
 8012fa6:	f006 fb0d 	bl	80195c4 <stpcpy>
 8012faa:	4b31      	ldr	r3, [pc, #196]	; (8013070 <TestRun+0x690>)
 8012fac:	2203      	movs	r2, #3
 8012fae:	0019      	movs	r1, r3
 8012fb0:	3134      	adds	r1, #52	; 0x34
 8012fb2:	9307      	str	r3, [sp, #28]
 8012fb4:	f006 fbb4 	bl	8019720 <memcpy>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8012fb8:	464b      	mov	r3, r9
 8012fba:	220c      	movs	r2, #12
 8012fbc:	681b      	ldr	r3, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8012fbe:	0030      	movs	r0, r6
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8012fc0:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8012fc2:	f7f9 fc9d 	bl	800c900 <strlen>
 8012fc6:	002b      	movs	r3, r5
 8012fc8:	0031      	movs	r1, r6
 8012fca:	b282      	uxth	r2, r0
 8012fcc:	4648      	mov	r0, r9
 8012fce:	f004 f823 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8012fd2:	4b28      	ldr	r3, [pc, #160]	; (8013074 <TestRun+0x694>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8012fd4:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8012fd6:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8012fd8:	0021      	movs	r1, r4
 8012fda:	230a      	movs	r3, #10
 8012fdc:	4648      	mov	r0, r9
 8012fde:	f004 f81b 	bl	8017018 <HAL_UART_Transmit>
}
 8012fe2:	e62f      	b.n	8012c44 <TestRun+0x264>
	__HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8012fe4:	464b      	mov	r3, r9
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	320b      	adds	r2, #11
 8012fea:	621a      	str	r2, [r3, #32]
	HAL_UART_Transmit(&huart3, (uint8_t *) _out, strlen(_out), 5000);
 8012fec:	4648      	mov	r0, r9
 8012fee:	4922      	ldr	r1, [pc, #136]	; (8013078 <TestRun+0x698>)
 8012ff0:	4b22      	ldr	r3, [pc, #136]	; (801307c <TestRun+0x69c>)
 8012ff2:	321b      	adds	r2, #27
 8012ff4:	f004 f810 	bl	8017018 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8012ff8:	4b1e      	ldr	r3, [pc, #120]	; (8013074 <TestRun+0x694>)
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8012ffa:	2202      	movs	r2, #2
	char newline[2] = "\r\n";
 8012ffc:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) newline, 2, 10);
 8012ffe:	0021      	movs	r1, r4
 8013000:	230a      	movs	r3, #10
 8013002:	4648      	mov	r0, r9
 8013004:	f004 f808 	bl	8017018 <HAL_UART_Transmit>
}
 8013008:	e6c0      	b.n	8012d8c <TestRun+0x3ac>
		Debug_Tx("GSMUART error rebooting device");
 801300a:	481d      	ldr	r0, [pc, #116]	; (8013080 <TestRun+0x6a0>)
 801300c:	f7fc fd38 	bl	800fa80 <Debug_Tx>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013010:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8013014:	4b1b      	ldr	r3, [pc, #108]	; (8013084 <TestRun+0x6a4>)
 8013016:	4a1c      	ldr	r2, [pc, #112]	; (8013088 <TestRun+0x6a8>)
 8013018:	60da      	str	r2, [r3, #12]
 801301a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801301e:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8013020:	e7fd      	b.n	801301e <TestRun+0x63e>
 8013022:	46c0      	nop			; (mov r8, r8)
 8013024:	50000c00 	.word	0x50000c00
 8013028:	20002f14 	.word	0x20002f14
 801302c:	20003f5c 	.word	0x20003f5c
 8013030:	200000c0 	.word	0x200000c0
 8013034:	0801e070 	.word	0x0801e070
 8013038:	20001df8 	.word	0x20001df8
 801303c:	0801e078 	.word	0x0801e078
 8013040:	20003f48 	.word	0x20003f48
 8013044:	0801e080 	.word	0x0801e080
 8013048:	20004538 	.word	0x20004538
 801304c:	0801e088 	.word	0x0801e088
 8013050:	20001e64 	.word	0x20001e64
 8013054:	0801e090 	.word	0x0801e090
 8013058:	0801e098 	.word	0x0801e098
 801305c:	20003f7c 	.word	0x20003f7c
 8013060:	0801e0a8 	.word	0x0801e0a8
 8013064:	20004584 	.word	0x20004584
 8013068:	0801e0b4 	.word	0x0801e0b4
 801306c:	2000048c 	.word	0x2000048c
 8013070:	0801cf38 	.word	0x0801cf38
 8013074:	00000a0d 	.word	0x00000a0d
 8013078:	0801e0d4 	.word	0x0801e0d4
 801307c:	00001388 	.word	0x00001388
 8013080:	0801e050 	.word	0x0801e050
 8013084:	e000ed00 	.word	0xe000ed00
 8013088:	05fa0004 	.word	0x05fa0004

0801308c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801308c:	b500      	push	{lr}
 801308e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013090:	2234      	movs	r2, #52	; 0x34
 8013092:	2100      	movs	r1, #0
 8013094:	a805      	add	r0, sp, #20
 8013096:	f006 f9cf 	bl	8019438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801309a:	2210      	movs	r2, #16
 801309c:	2100      	movs	r1, #0
 801309e:	a801      	add	r0, sp, #4
 80130a0:	f006 f9ca 	bl	8019438 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80130a4:	2080      	movs	r0, #128	; 0x80
 80130a6:	0080      	lsls	r0, r0, #2
 80130a8:	f002 f9a0 	bl	80153ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80130ac:	2302      	movs	r3, #2
 80130ae:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80130b0:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80130b2:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80130b4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80130b6:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80130b8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80130ba:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80130bc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80130be:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80130c0:	f002 f9c4 	bl	801544c <HAL_RCC_OscConfig>
 80130c4:	2800      	cmp	r0, #0
 80130c6:	d001      	beq.n	80130cc <SystemClock_Config+0x40>
  __ASM volatile ("cpsid i" : : : "memory");
 80130c8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80130ca:	e7fe      	b.n	80130ca <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80130cc:	2307      	movs	r3, #7
 80130ce:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80130d0:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80130d2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80130d4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80130d6:	01db      	lsls	r3, r3, #7
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80130d8:	2100      	movs	r1, #0
 80130da:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80130dc:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80130de:	f002 fc65 	bl	80159ac <HAL_RCC_ClockConfig>
 80130e2:	2800      	cmp	r0, #0
 80130e4:	d001      	beq.n	80130ea <SystemClock_Config+0x5e>
 80130e6:	b672      	cpsid	i
  while (1)
 80130e8:	e7fe      	b.n	80130e8 <SystemClock_Config+0x5c>
}
 80130ea:	b013      	add	sp, #76	; 0x4c
 80130ec:	bd00      	pop	{pc}
 80130ee:	46c0      	nop			; (mov r8, r8)

080130f0 <main>:
{
 80130f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130f2:	46de      	mov	lr, fp
 80130f4:	4657      	mov	r7, sl
 80130f6:	464e      	mov	r6, r9
 80130f8:	4645      	mov	r5, r8
 80130fa:	b5e0      	push	{r5, r6, r7, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80130fc:	2704      	movs	r7, #4
{
 80130fe:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8013100:	f000 fe70 	bl	8013de4 <HAL_Init>
  SystemClock_Config();
 8013104:	f7ff ffc2 	bl	801308c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013108:	2214      	movs	r2, #20
 801310a:	2100      	movs	r1, #0
 801310c:	a80b      	add	r0, sp, #44	; 0x2c
 801310e:	f006 f993 	bl	8019438 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013112:	2220      	movs	r2, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013114:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013116:	4dd0      	ldr	r5, [pc, #832]	; (8013458 <main+0x368>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013118:	4690      	mov	r8, r2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801311a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 801311c:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801311e:	433b      	orrs	r3, r7
 8013120:	636b      	str	r3, [r5, #52]	; 0x34
 8013122:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8013124:	4ccd      	ldr	r4, [pc, #820]	; (801345c <main+0x36c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013126:	403b      	ands	r3, r7
 8013128:	9306      	str	r3, [sp, #24]
 801312a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801312c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 801312e:	0021      	movs	r1, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013130:	4313      	orrs	r3, r2
 8013132:	636b      	str	r3, [r5, #52]	; 0x34
 8013134:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8013136:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013138:	4013      	ands	r3, r2
 801313a:	9307      	str	r3, [sp, #28]
 801313c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801313e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013140:	4333      	orrs	r3, r6
 8013142:	636b      	str	r3, [r5, #52]	; 0x34
 8013144:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013146:	4033      	ands	r3, r6
 8013148:	9308      	str	r3, [sp, #32]
 801314a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801314c:	2302      	movs	r3, #2
 801314e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8013150:	431a      	orrs	r2, r3
 8013152:	636a      	str	r2, [r5, #52]	; 0x34
 8013154:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8013156:	4013      	ands	r3, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013158:	2208      	movs	r2, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801315a:	9309      	str	r3, [sp, #36]	; 0x24
 801315c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801315e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013160:	4691      	mov	r9, r2
 8013162:	4313      	orrs	r3, r2
 8013164:	636b      	str	r3, [r5, #52]	; 0x34
 8013166:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8013168:	4013      	ands	r3, r2
 801316a:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 801316c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801316e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOA, SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin, GPIO_PIN_RESET);
 8013170:	f001 fd26 	bl	8014bc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin, GPIO_PIN_RESET);
 8013174:	2200      	movs	r2, #0
 8013176:	21c0      	movs	r1, #192	; 0xc0
 8013178:	48b9      	ldr	r0, [pc, #740]	; (8013460 <main+0x370>)
 801317a:	f001 fd21 	bl	8014bc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin, GPIO_PIN_RESET);
 801317e:	2200      	movs	r2, #0
 8013180:	2107      	movs	r1, #7
 8013182:	48b8      	ldr	r0, [pc, #736]	; (8013464 <main+0x374>)
 8013184:	f001 fd1c 	bl	8014bc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin, GPIO_PIN_RESET);
 8013188:	238e      	movs	r3, #142	; 0x8e
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	2200      	movs	r2, #0
 801318e:	0019      	movs	r1, r3
 8013190:	48b5      	ldr	r0, [pc, #724]	; (8013468 <main+0x378>)
 8013192:	469b      	mov	fp, r3
 8013194:	f001 fd14 	bl	8014bc0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013198:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = SPI_CS_MEM_Pin|DO_GPS_VCC_EN_Pin;
 801319a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801319c:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801319e:	a90b      	add	r1, sp, #44	; 0x2c
 80131a0:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80131a2:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131a4:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131a6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131a8:	f001 fbfe 	bl	80149a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80131ac:	23f9      	movs	r3, #249	; 0xf9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80131ae:	48ae      	ldr	r0, [pc, #696]	; (8013468 <main+0x378>)
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80131b0:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80131b2:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = DI_IN2_Pin|DI_IN3_Pin|DI_MAINS_STATE_Pin|DI_ACC_STATE_Pin
 80131b4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80131b6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131b8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80131ba:	f001 fbf5 	bl	80149a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin|DI_IN1_Pin;
 80131be:	2388      	movs	r3, #136	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131c0:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin|DI_IN1_Pin;
 80131c2:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131c4:	a90b      	add	r1, sp, #44	; 0x2c
 80131c6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = DI_SOS_STATE_Pin|DI_IN1_Pin;
 80131c8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80131ca:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131cc:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80131ce:	f001 fbeb 	bl	80149a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 80131d2:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80131d4:	48a2      	ldr	r0, [pc, #648]	; (8013460 <main+0x370>)
 80131d6:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = DO_GSM_VCC_EN_Pin|DO_PWRKEY_Pin;
 80131d8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80131da:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131dc:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131de:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80131e0:	f001 fbe2 	bl	80149a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 80131e4:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80131e6:	489f      	ldr	r0, [pc, #636]	; (8013464 <main+0x374>)
 80131e8:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = DO_LED_PWR_Pin|DO_LED_NET_Pin|DO_LED_GPS_Pin;
 80131ea:	469a      	mov	sl, r3
 80131ec:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80131ee:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131f0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131f2:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80131f4:	f001 fbd8 	bl	80149a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 80131f8:	465b      	mov	r3, fp
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80131fa:	489b      	ldr	r0, [pc, #620]	; (8013468 <main+0x378>)
 80131fc:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = DO_OUT1_Pin|DO_OUT2_Pin|DO_5V_OUT_EN_Pin|DO_OUT3_P_LED_Pin;
 80131fe:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013200:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013202:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013204:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013206:	f001 fbcf 	bl	80149a8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 801320a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801320c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 801320e:	4333      	orrs	r3, r6
 8013210:	63ab      	str	r3, [r5, #56]	; 0x38
 8013212:	6bab      	ldr	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8013214:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8013216:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8013218:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 801321a:	9305      	str	r3, [sp, #20]
 801321c:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801321e:	f001 f99b 	bl	8014558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8013222:	2009      	movs	r0, #9
 8013224:	f001 f9ca 	bl	80145bc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8013228:	2200      	movs	r2, #0
 801322a:	2100      	movs	r1, #0
 801322c:	200a      	movs	r0, #10
 801322e:	f001 f993 	bl	8014558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8013232:	200a      	movs	r0, #10
 8013234:	f001 f9c2 	bl	80145bc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8013238:	2200      	movs	r2, #0
 801323a:	2100      	movs	r1, #0
 801323c:	200b      	movs	r0, #11
 801323e:	f001 f98b 	bl	8014558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8013242:	200b      	movs	r0, #11
 8013244:	f001 f9ba 	bl	80145bc <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8013248:	220c      	movs	r2, #12
 801324a:	2100      	movs	r1, #0
 801324c:	a80b      	add	r0, sp, #44	; 0x2c
 801324e:	f006 f8f3 	bl	8019438 <memset>
  hadc1.Instance = ADC1;
 8013252:	4d86      	ldr	r5, [pc, #536]	; (801346c <main+0x37c>)
 8013254:	4b86      	ldr	r3, [pc, #536]	; (8013470 <main+0x380>)
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8013256:	4642      	mov	r2, r8
  hadc1.Instance = ADC1;
 8013258:	602b      	str	r3, [r5, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 801325a:	2380      	movs	r3, #128	; 0x80
 801325c:	05db      	lsls	r3, r3, #23
 801325e:	606b      	str	r3, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8013260:	2380      	movs	r3, #128	; 0x80
 8013262:	039b      	lsls	r3, r3, #14
 8013264:	612b      	str	r3, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8013266:	2300      	movs	r3, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8013268:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801326a:	320c      	adds	r2, #12
 801326c:	54ab      	strb	r3, [r5, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801326e:	0028      	movs	r0, r5
  hadc1.Init.OversamplingMode = DISABLE;
 8013270:	3210      	adds	r2, #16
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8013272:	832c      	strh	r4, [r5, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8013274:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8013276:	60ec      	str	r4, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8013278:	616f      	str	r7, [r5, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 801327a:	76ab      	strb	r3, [r5, #26]
  hadc1.Init.NbrOfConversion = 4;
 801327c:	61ef      	str	r7, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801327e:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8013280:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8013282:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8013284:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8013286:	63ac      	str	r4, [r5, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8013288:	54ab      	strb	r3, [r5, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 801328a:	64ec      	str	r4, [r5, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801328c:	f000 fdee 	bl	8013e6c <HAL_ADC_Init>
 8013290:	2800      	cmp	r0, #0
 8013292:	d001      	beq.n	8013298 <main+0x1a8>
 8013294:	b672      	cpsid	i
  while (1)
 8013296:	e7fe      	b.n	8013296 <main+0x1a6>
  sConfig.Channel = ADC_CHANNEL_1;
 8013298:	4b76      	ldr	r3, [pc, #472]	; (8013474 <main+0x384>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 801329a:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801329c:	a90b      	add	r1, sp, #44	; 0x2c
 801329e:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80132a0:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80132a2:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80132a4:	f000 ff5e 	bl	8014164 <HAL_ADC_ConfigChannel>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	d001      	beq.n	80132b0 <main+0x1c0>
 80132ac:	b672      	cpsid	i
  while (1)
 80132ae:	e7fe      	b.n	80132ae <main+0x1be>
  sConfig.Channel = ADC_CHANNEL_9;
 80132b0:	4b71      	ldr	r3, [pc, #452]	; (8013478 <main+0x388>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80132b2:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_9;
 80132b4:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80132b6:	464b      	mov	r3, r9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80132b8:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80132ba:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80132bc:	f000 ff52 	bl	8014164 <HAL_ADC_ConfigChannel>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d001      	beq.n	80132c8 <main+0x1d8>
 80132c4:	b672      	cpsid	i
  while (1)
 80132c6:	e7fe      	b.n	80132c6 <main+0x1d6>
  sConfig.Channel = ADC_CHANNEL_11;
 80132c8:	4b6c      	ldr	r3, [pc, #432]	; (801347c <main+0x38c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80132ca:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_11;
 80132cc:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80132ce:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80132d0:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80132d2:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80132d4:	f000 ff46 	bl	8014164 <HAL_ADC_ConfigChannel>
 80132d8:	2800      	cmp	r0, #0
 80132da:	d001      	beq.n	80132e0 <main+0x1f0>
 80132dc:	b672      	cpsid	i
  while (1)
 80132de:	e7fe      	b.n	80132de <main+0x1ee>
  hi2c1.Instance = I2C1;
 80132e0:	4c67      	ldr	r4, [pc, #412]	; (8013480 <main+0x390>)
 80132e2:	4b68      	ldr	r3, [pc, #416]	; (8013484 <main+0x394>)
  hi2c1.Init.OwnAddress1 = 0;
 80132e4:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 80132e6:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80132e8:	4b67      	ldr	r3, [pc, #412]	; (8013488 <main+0x398>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80132ea:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80132ec:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80132ee:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80132f0:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80132f2:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80132f4:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00000E14;
 80132f6:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80132f8:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80132fa:	f001 fd4d 	bl	8014d98 <HAL_I2C_Init>
 80132fe:	1e01      	subs	r1, r0, #0
 8013300:	d001      	beq.n	8013306 <main+0x216>
 8013302:	b672      	cpsid	i
  while (1)
 8013304:	e7fe      	b.n	8013304 <main+0x214>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013306:	0020      	movs	r0, r4
 8013308:	f002 f81c 	bl	8015344 <HAL_I2CEx_ConfigAnalogFilter>
 801330c:	1e01      	subs	r1, r0, #0
 801330e:	d001      	beq.n	8013314 <main+0x224>
 8013310:	b672      	cpsid	i
  while (1)
 8013312:	e7fe      	b.n	8013312 <main+0x222>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8013314:	0020      	movs	r0, r4
 8013316:	f002 f83b 	bl	8015390 <HAL_I2CEx_ConfigDigitalFilter>
 801331a:	1e02      	subs	r2, r0, #0
 801331c:	d001      	beq.n	8013322 <main+0x232>
 801331e:	b672      	cpsid	i
  while (1)
 8013320:	e7fe      	b.n	8013320 <main+0x230>
  hspi1.Instance = SPI1;
 8013322:	4b5a      	ldr	r3, [pc, #360]	; (801348c <main+0x39c>)
 8013324:	495a      	ldr	r1, [pc, #360]	; (8013490 <main+0x3a0>)
 8013326:	0018      	movs	r0, r3
 8013328:	6019      	str	r1, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801332a:	2382      	movs	r3, #130	; 0x82
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	6043      	str	r3, [r0, #4]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013330:	23e0      	movs	r3, #224	; 0xe0
 8013332:	00db      	lsls	r3, r3, #3
 8013334:	60c3      	str	r3, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013336:	2380      	movs	r3, #128	; 0x80
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	6183      	str	r3, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801333c:	464b      	mov	r3, r9
 801333e:	61c3      	str	r3, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8013340:	4653      	mov	r3, sl
 8013342:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013344:	464b      	mov	r3, r9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8013346:	6082      	str	r2, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013348:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801334a:	6142      	str	r2, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801334c:	6202      	str	r2, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801334e:	6242      	str	r2, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013350:	6282      	str	r2, [r0, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013352:	6302      	str	r2, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013354:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013356:	f002 fdf1 	bl	8015f3c <HAL_SPI_Init>
 801335a:	1e07      	subs	r7, r0, #0
 801335c:	d001      	beq.n	8013362 <main+0x272>
 801335e:	b672      	cpsid	i
  while (1)
 8013360:	e7fe      	b.n	8013360 <main+0x270>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013362:	0001      	movs	r1, r0
 8013364:	220c      	movs	r2, #12
 8013366:	a80b      	add	r0, sp, #44	; 0x2c
 8013368:	f006 f866 	bl	8019438 <memset>
  htim6.Instance = TIM6;
 801336c:	4e49      	ldr	r6, [pc, #292]	; (8013494 <main+0x3a4>)
 801336e:	4b4a      	ldr	r3, [pc, #296]	; (8013498 <main+0x3a8>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8013370:	0030      	movs	r0, r6
  htim6.Instance = TIM6;
 8013372:	6033      	str	r3, [r6, #0]
  htim6.Init.Prescaler = 8000-1;
 8013374:	4b49      	ldr	r3, [pc, #292]	; (801349c <main+0x3ac>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013376:	60b7      	str	r7, [r6, #8]
  htim6.Init.Prescaler = 8000-1;
 8013378:	6073      	str	r3, [r6, #4]
  htim6.Init.Period = 500-1;
 801337a:	23f4      	movs	r3, #244	; 0xf4
 801337c:	33ff      	adds	r3, #255	; 0xff
 801337e:	60f3      	str	r3, [r6, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013380:	61b7      	str	r7, [r6, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8013382:	f003 f9a3 	bl	80166cc <HAL_TIM_Base_Init>
 8013386:	2800      	cmp	r0, #0
 8013388:	d001      	beq.n	801338e <main+0x29e>
 801338a:	b672      	cpsid	i
  while (1)
 801338c:	e7fe      	b.n	801338c <main+0x29c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801338e:	900b      	str	r0, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013390:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8013392:	a90b      	add	r1, sp, #44	; 0x2c
 8013394:	0030      	movs	r0, r6
 8013396:	f003 f9c9 	bl	801672c <HAL_TIMEx_MasterConfigSynchronization>
 801339a:	2800      	cmp	r0, #0
 801339c:	d001      	beq.n	80133a2 <main+0x2b2>
 801339e:	b672      	cpsid	i
  while (1)
 80133a0:	e7fe      	b.n	80133a0 <main+0x2b0>
  huart1.Instance = USART1;
 80133a2:	4e3f      	ldr	r6, [pc, #252]	; (80134a0 <main+0x3b0>)
 80133a4:	4b3f      	ldr	r3, [pc, #252]	; (80134a4 <main+0x3b4>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80133a6:	270c      	movs	r7, #12
  huart1.Instance = USART1;
 80133a8:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 9600;
 80133aa:	2396      	movs	r3, #150	; 0x96
 80133ac:	019b      	lsls	r3, r3, #6
 80133ae:	6073      	str	r3, [r6, #4]
 80133b0:	4699      	mov	r9, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80133b2:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80133b4:	0030      	movs	r0, r6
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80133b6:	60b3      	str	r3, [r6, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80133b8:	60f3      	str	r3, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80133ba:	6133      	str	r3, [r6, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80133bc:	6177      	str	r7, [r6, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80133be:	61b3      	str	r3, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80133c0:	61f3      	str	r3, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80133c2:	6233      	str	r3, [r6, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80133c4:	6273      	str	r3, [r6, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80133c6:	62b3      	str	r3, [r6, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80133c8:	f003 ff6a 	bl	80172a0 <HAL_UART_Init>
 80133cc:	1e01      	subs	r1, r0, #0
 80133ce:	d001      	beq.n	80133d4 <main+0x2e4>
 80133d0:	b672      	cpsid	i
  while (1)
 80133d2:	e7fe      	b.n	80133d2 <main+0x2e2>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80133d4:	0030      	movs	r0, r6
 80133d6:	f004 f85d 	bl	8017494 <HAL_UARTEx_SetTxFifoThreshold>
 80133da:	1e01      	subs	r1, r0, #0
 80133dc:	d001      	beq.n	80133e2 <main+0x2f2>
 80133de:	b672      	cpsid	i
  while (1)
 80133e0:	e7fe      	b.n	80133e0 <main+0x2f0>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80133e2:	0030      	movs	r0, r6
 80133e4:	f004 f880 	bl	80174e8 <HAL_UARTEx_SetRxFifoThreshold>
 80133e8:	2800      	cmp	r0, #0
 80133ea:	d001      	beq.n	80133f0 <main+0x300>
 80133ec:	b672      	cpsid	i
  while (1)
 80133ee:	e7fe      	b.n	80133ee <main+0x2fe>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80133f0:	0030      	movs	r0, r6
 80133f2:	f004 f833 	bl	801745c <HAL_UARTEx_DisableFifoMode>
 80133f6:	2800      	cmp	r0, #0
 80133f8:	d001      	beq.n	80133fe <main+0x30e>
 80133fa:	b672      	cpsid	i
  while (1)
 80133fc:	e7fe      	b.n	80133fc <main+0x30c>
  huart2.Instance = USART2;
 80133fe:	4b2a      	ldr	r3, [pc, #168]	; (80134a8 <main+0x3b8>)
 8013400:	4698      	mov	r8, r3
 8013402:	4642      	mov	r2, r8
 8013404:	4b29      	ldr	r3, [pc, #164]	; (80134ac <main+0x3bc>)
 8013406:	6013      	str	r3, [r2, #0]
  huart2.Init.BaudRate = 9600;
 8013408:	4643      	mov	r3, r8
 801340a:	464a      	mov	r2, r9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801340c:	6098      	str	r0, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801340e:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8013410:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013412:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8013414:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013416:	6218      	str	r0, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8013418:	6258      	str	r0, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801341a:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801341c:	4640      	mov	r0, r8
  huart2.Init.BaudRate = 9600;
 801341e:	605a      	str	r2, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8013420:	615f      	str	r7, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8013422:	f003 ff3d 	bl	80172a0 <HAL_UART_Init>
 8013426:	1e01      	subs	r1, r0, #0
 8013428:	d001      	beq.n	801342e <main+0x33e>
 801342a:	b672      	cpsid	i
  while (1)
 801342c:	e7fe      	b.n	801342c <main+0x33c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801342e:	4640      	mov	r0, r8
 8013430:	f004 f830 	bl	8017494 <HAL_UARTEx_SetTxFifoThreshold>
 8013434:	1e01      	subs	r1, r0, #0
 8013436:	d001      	beq.n	801343c <main+0x34c>
 8013438:	b672      	cpsid	i
  while (1)
 801343a:	e7fe      	b.n	801343a <main+0x34a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801343c:	4640      	mov	r0, r8
 801343e:	f004 f853 	bl	80174e8 <HAL_UARTEx_SetRxFifoThreshold>
 8013442:	2800      	cmp	r0, #0
 8013444:	d001      	beq.n	801344a <main+0x35a>
 8013446:	b672      	cpsid	i
  while (1)
 8013448:	e7fe      	b.n	8013448 <main+0x358>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 801344a:	4640      	mov	r0, r8
 801344c:	f004 f806 	bl	801745c <HAL_UARTEx_DisableFifoMode>
 8013450:	1e02      	subs	r2, r0, #0
 8013452:	d02d      	beq.n	80134b0 <main+0x3c0>
 8013454:	b672      	cpsid	i
  while (1)
 8013456:	e7fe      	b.n	8013456 <main+0x366>
 8013458:	40021000 	.word	0x40021000
 801345c:	00008010 	.word	0x00008010
 8013460:	50000800 	.word	0x50000800
 8013464:	50000c00 	.word	0x50000c00
 8013468:	50000400 	.word	0x50000400
 801346c:	200045d4 	.word	0x200045d4
 8013470:	40012400 	.word	0x40012400
 8013474:	04000002 	.word	0x04000002
 8013478:	24000200 	.word	0x24000200
 801347c:	2c000800 	.word	0x2c000800
 8013480:	200047a8 	.word	0x200047a8
 8013484:	40005400 	.word	0x40005400
 8013488:	00000e14 	.word	0x00000e14
 801348c:	200047fc 	.word	0x200047fc
 8013490:	40013000 	.word	0x40013000
 8013494:	20004860 	.word	0x20004860
 8013498:	40001000 	.word	0x40001000
 801349c:	00001f3f 	.word	0x00001f3f
 80134a0:	200048ac 	.word	0x200048ac
 80134a4:	40013800 	.word	0x40013800
 80134a8:	20004940 	.word	0x20004940
 80134ac:	40004400 	.word	0x40004400
  huart3.Instance = USART3;
 80134b0:	4b9a      	ldr	r3, [pc, #616]	; (801371c <main+0x62c>)
 80134b2:	499b      	ldr	r1, [pc, #620]	; (8013720 <main+0x630>)
 80134b4:	0018      	movs	r0, r3
 80134b6:	6019      	str	r1, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80134b8:	464b      	mov	r3, r9
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80134ba:	6082      	str	r2, [r0, #8]
  huart3.Init.BaudRate = 9600;
 80134bc:	6043      	str	r3, [r0, #4]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80134be:	60c2      	str	r2, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80134c0:	6102      	str	r2, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80134c2:	6147      	str	r7, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80134c4:	6182      	str	r2, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80134c6:	61c2      	str	r2, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80134c8:	6202      	str	r2, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80134ca:	6242      	str	r2, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80134cc:	6282      	str	r2, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80134ce:	f003 fee7 	bl	80172a0 <HAL_UART_Init>
 80134d2:	2800      	cmp	r0, #0
 80134d4:	d001      	beq.n	80134da <main+0x3ea>
 80134d6:	b672      	cpsid	i
  while (1)
 80134d8:	e7fe      	b.n	80134d8 <main+0x3e8>
  __ASM volatile ("cpsie i" : : : "memory");
 80134da:	b662      	cpsie	i
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 80134dc:	23fa      	movs	r3, #250	; 0xfa
 80134de:	2713      	movs	r7, #19
 80134e0:	009b      	lsls	r3, r3, #2
 80134e2:	9302      	str	r3, [sp, #8]
 80134e4:	2301      	movs	r3, #1
 80134e6:	446f      	add	r7, sp
 80134e8:	9301      	str	r3, [sp, #4]
 80134ea:	2275      	movs	r2, #117	; 0x75
 80134ec:	21d0      	movs	r1, #208	; 0xd0
 80134ee:	0020      	movs	r0, r4
 80134f0:	9700      	str	r7, [sp, #0]
 80134f2:	f001 fde5 	bl	80150c0 <HAL_I2C_Mem_Read>
	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80134f6:	783b      	ldrb	r3, [r7, #0]
 80134f8:	2b68      	cmp	r3, #104	; 0x68
 80134fa:	d100      	bne.n	80134fe <main+0x40e>
 80134fc:	e0c4      	b.n	8013688 <main+0x598>
		Data = 0;
 80134fe:	2300      	movs	r3, #0
 8013500:	469a      	mov	sl, r3
 8013502:	4669      	mov	r1, sp
 8013504:	4650      	mov	r0, sl
 8013506:	332c      	adds	r3, #44	; 0x2c
 8013508:	18c9      	adds	r1, r1, r3
 801350a:	7008      	strb	r0, [r1, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 801350c:	21fa      	movs	r1, #250	; 0xfa
 801350e:	2701      	movs	r7, #1
 8013510:	0089      	lsls	r1, r1, #2
 8013512:	4689      	mov	r9, r1
 8013514:	9102      	str	r1, [sp, #8]
 8013516:	a90b      	add	r1, sp, #44	; 0x2c
 8013518:	003b      	movs	r3, r7
 801351a:	226b      	movs	r2, #107	; 0x6b
 801351c:	9100      	str	r1, [sp, #0]
 801351e:	0020      	movs	r0, r4
 8013520:	21d0      	movs	r1, #208	; 0xd0
 8013522:	9701      	str	r7, [sp, #4]
 8013524:	f001 fc92 	bl	8014e4c <HAL_I2C_Mem_Write>
				Data = 0x07;
 8013528:	222c      	movs	r2, #44	; 0x2c
 801352a:	4669      	mov	r1, sp
 801352c:	2307      	movs	r3, #7
 801352e:	1889      	adds	r1, r1, r2
 8013530:	700b      	strb	r3, [r1, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8013532:	4649      	mov	r1, r9
 8013534:	9102      	str	r1, [sp, #8]
 8013536:	a90b      	add	r1, sp, #44	; 0x2c
 8013538:	003b      	movs	r3, r7
 801353a:	9100      	str	r1, [sp, #0]
 801353c:	3a13      	subs	r2, #19
 801353e:	21d0      	movs	r1, #208	; 0xd0
 8013540:	0020      	movs	r0, r4
 8013542:	9701      	str	r7, [sp, #4]
 8013544:	f001 fc82 	bl	8014e4c <HAL_I2C_Mem_Write>
				Data = 0x00;
 8013548:	232c      	movs	r3, #44	; 0x2c
 801354a:	4669      	mov	r1, sp
 801354c:	4650      	mov	r0, sl
 801354e:	18c9      	adds	r1, r1, r3
 8013550:	7008      	strb	r0, [r1, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8013552:	4649      	mov	r1, r9
 8013554:	9102      	str	r1, [sp, #8]
 8013556:	a90b      	add	r1, sp, #44	; 0x2c
 8013558:	003b      	movs	r3, r7
 801355a:	221c      	movs	r2, #28
 801355c:	9100      	str	r1, [sp, #0]
 801355e:	0020      	movs	r0, r4
 8013560:	21d0      	movs	r1, #208	; 0xd0
 8013562:	9701      	str	r7, [sp, #4]
 8013564:	f001 fc72 	bl	8014e4c <HAL_I2C_Mem_Write>
				Data = 0x00;
 8013568:	4669      	mov	r1, sp
 801356a:	232c      	movs	r3, #44	; 0x2c
 801356c:	4652      	mov	r2, sl
 801356e:	18cb      	adds	r3, r1, r3
 8013570:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8013572:	464b      	mov	r3, r9
 8013574:	9302      	str	r3, [sp, #8]
 8013576:	ab0b      	add	r3, sp, #44	; 0x2c
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	21d0      	movs	r1, #208	; 0xd0
 801357c:	003b      	movs	r3, r7
 801357e:	0020      	movs	r0, r4
 8013580:	9701      	str	r7, [sp, #4]
 8013582:	321b      	adds	r2, #27
 8013584:	f001 fc62 	bl	8014e4c <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface ");
 8013588:	4866      	ldr	r0, [pc, #408]	; (8013724 <main+0x634>)
 801358a:	f7fc fa79 	bl	800fa80 <Debug_Tx>
	ACC_GYRO_data[0]=0;
 801358e:	2200      	movs	r2, #0
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 8013590:	2180      	movs	r1, #128	; 0x80
 8013592:	20a0      	movs	r0, #160	; 0xa0
 8013594:	4b64      	ldr	r3, [pc, #400]	; (8013728 <main+0x638>)
 8013596:	0209      	lsls	r1, r1, #8
 8013598:	601a      	str	r2, [r3, #0]
	ACC_GYRO_data[1]=0;
 801359a:	605a      	str	r2, [r3, #4]
	ACC_GYRO_data[2]=0;
 801359c:	609a      	str	r2, [r3, #8]
	ACC_GYRO_data[3]=0;
 801359e:	60da      	str	r2, [r3, #12]
	ACC_GYRO_data[4]=0;
 80135a0:	611a      	str	r2, [r3, #16]
	ACC_GYRO_data[5]=0;
 80135a2:	615a      	str	r2, [r3, #20]
 80135a4:	05c0      	lsls	r0, r0, #23
 80135a6:	2201      	movs	r2, #1
 80135a8:	f001 fb0a 	bl	8014bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80135ac:	2201      	movs	r2, #1
 80135ae:	2140      	movs	r1, #64	; 0x40
 80135b0:	485e      	ldr	r0, [pc, #376]	; (801372c <main+0x63c>)
 80135b2:	f001 fb05 	bl	8014bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80135b6:	2201      	movs	r2, #1
 80135b8:	2180      	movs	r1, #128	; 0x80
 80135ba:	485c      	ldr	r0, [pc, #368]	; (801372c <main+0x63c>)
 80135bc:	f001 fb00 	bl	8014bc0 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, ADCvalue, 4);
 80135c0:	2204      	movs	r2, #4
 80135c2:	0028      	movs	r0, r5
 80135c4:	495a      	ldr	r1, [pc, #360]	; (8013730 <main+0x640>)
 80135c6:	f000 ff6d 	bl	80144a4 <HAL_ADC_Start_DMA>
		HAL_GPIO_WritePin(DO_5V_OUT_EN_GPIO_Port, DO_5V_OUT_EN_Pin, GPIO_PIN_SET);
 80135ca:	2201      	movs	r2, #1
 80135cc:	2120      	movs	r1, #32
 80135ce:	4859      	ldr	r0, [pc, #356]	; (8013734 <main+0x644>)
 80135d0:	f001 faf6 	bl	8014bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GPS_VCC_EN_GPIO_Port, DO_GPS_VCC_EN_Pin, GPIO_PIN_SET);
 80135d4:	2180      	movs	r1, #128	; 0x80
 80135d6:	20a0      	movs	r0, #160	; 0xa0
 80135d8:	2201      	movs	r2, #1
 80135da:	0209      	lsls	r1, r1, #8
 80135dc:	05c0      	lsls	r0, r0, #23
 80135de:	f001 faef 	bl	8014bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_GSM_VCC_EN_GPIO_Port, DO_GSM_VCC_EN_Pin, GPIO_PIN_SET);
 80135e2:	2201      	movs	r2, #1
 80135e4:	2140      	movs	r1, #64	; 0x40
 80135e6:	4851      	ldr	r0, [pc, #324]	; (801372c <main+0x63c>)
 80135e8:	f001 faea 	bl	8014bc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DO_PWRKEY_GPIO_Port, DO_PWRKEY_Pin, GPIO_PIN_SET);
 80135ec:	2201      	movs	r2, #1
 80135ee:	2180      	movs	r1, #128	; 0x80
 80135f0:	484e      	ldr	r0, [pc, #312]	; (801372c <main+0x63c>)
 80135f2:	f001 fae5 	bl	8014bc0 <HAL_GPIO_WritePin>
GSMBuff[0]=0;
 80135f6:	2700      	movs	r7, #0
memset((char*)gpsData,0,1000);
 80135f8:	22fa      	movs	r2, #250	; 0xfa
GSMBuff[0]=0;
 80135fa:	4c4f      	ldr	r4, [pc, #316]	; (8013738 <main+0x648>)
memset((char*)gpsData,0,1000);
 80135fc:	4d4f      	ldr	r5, [pc, #316]	; (801373c <main+0x64c>)
 80135fe:	0039      	movs	r1, r7
 8013600:	0028      	movs	r0, r5
GSMBuff[0]=0;
 8013602:	7027      	strb	r7, [r4, #0]
memset((char*)gpsData,0,1000);
 8013604:	0092      	lsls	r2, r2, #2
 8013606:	f005 ff17 	bl	8019438 <memset>
__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_NEF|UART_CLEAR_OREF);
 801360a:	4643      	mov	r3, r8
 801360c:	220c      	movs	r2, #12
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	4691      	mov	r9, r2
 8013612:	621a      	str	r2, [r3, #32]
HAL_UART_Receive_DMA(&huart2, gpsData, 900);
 8013614:	22e1      	movs	r2, #225	; 0xe1
 8013616:	0029      	movs	r1, r5
 8013618:	0092      	lsls	r2, r2, #2
 801361a:	4640      	mov	r0, r8
 801361c:	f003 feca 	bl	80173b4 <HAL_UART_Receive_DMA>
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8013620:	464a      	mov	r2, r9
 8013622:	6833      	ldr	r3, [r6, #0]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8013624:	0021      	movs	r1, r4
__HAL_UART_CLEAR_IT(&huart1, UART_CLEAR_NEF|UART_CLEAR_OREF);
 8013626:	621a      	str	r2, [r3, #32]
HAL_UART_Receive_DMA(&huart1, GSMBuff, 1);
 8013628:	0030      	movs	r0, r6
 801362a:	3a0b      	subs	r2, #11
 801362c:	f003 fec2 	bl	80173b4 <HAL_UART_Receive_DMA>
initGPS();
 8013630:	f7fe faca 	bl	8011bc8 <initGPS>
initFirstRun();
 8013634:	f7fe fe56 	bl	80122e4 <initFirstRun>
InitMEMQ();
 8013638:	f7fe f94a 	bl	80118d0 <InitMEMQ>
HAL_Delay(10000);
 801363c:	4840      	ldr	r0, [pc, #256]	; (8013740 <main+0x650>)
 801363e:	f000 fbf7 	bl	8013e30 <HAL_Delay>
InitGSM();
 8013642:	f7fd fcad 	bl	8010fa0 <InitGSM>
TestMEM();
 8013646:	f7fe fb5d 	bl	8011d04 <TestMEM>
memset(IMEI,0,20);
 801364a:	4d3e      	ldr	r5, [pc, #248]	; (8013744 <main+0x654>)
 801364c:	2214      	movs	r2, #20
 801364e:	0039      	movs	r1, r7
 8013650:	0028      	movs	r0, r5
 8013652:	f005 fef1 	bl	8019438 <memset>
memset(Regno,0,20);
 8013656:	4c3c      	ldr	r4, [pc, #240]	; (8013748 <main+0x658>)
 8013658:	2214      	movs	r2, #20
 801365a:	0039      	movs	r1, r7
 801365c:	0020      	movs	r0, r4
 801365e:	f005 feeb 	bl	8019438 <memset>
strcpy(IMEI,GSMIMEI());
 8013662:	f7fc fe9b 	bl	801039c <GSMIMEI>
 8013666:	0001      	movs	r1, r0
 8013668:	0028      	movs	r0, r5
 801366a:	f006 f846 	bl	80196fa <strcpy>
strcpy(Regno,readRegNo());
 801366e:	f7fe fa55 	bl	8011b1c <readRegNo>
 8013672:	0001      	movs	r1, r0
 8013674:	0020      	movs	r0, r4
 8013676:	f006 f840 	bl	80196fa <strcpy>
StartTCPConnection();
 801367a:	f7fc ffa1 	bl	80105c0 <StartTCPConnection>
GSMSigQuality();
 801367e:	f7fc fdd1 	bl	8010224 <GSMSigQuality>
TestRun();
 8013682:	f7ff f9ad 	bl	80129e0 <TestRun>
while (1){//DownloadFile();
 8013686:	e7fa      	b.n	801367e <main+0x58e>
		Data = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	469a      	mov	sl, r3
 801368c:	4669      	mov	r1, sp
 801368e:	4650      	mov	r0, sl
 8013690:	332c      	adds	r3, #44	; 0x2c
 8013692:	18c9      	adds	r1, r1, r3
 8013694:	7008      	strb	r0, [r1, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8013696:	21fa      	movs	r1, #250	; 0xfa
 8013698:	2701      	movs	r7, #1
 801369a:	0089      	lsls	r1, r1, #2
 801369c:	4689      	mov	r9, r1
 801369e:	9102      	str	r1, [sp, #8]
 80136a0:	a90b      	add	r1, sp, #44	; 0x2c
 80136a2:	003b      	movs	r3, r7
 80136a4:	9100      	str	r1, [sp, #0]
 80136a6:	226b      	movs	r2, #107	; 0x6b
 80136a8:	21d0      	movs	r1, #208	; 0xd0
 80136aa:	0020      	movs	r0, r4
 80136ac:	9701      	str	r7, [sp, #4]
 80136ae:	f001 fbcd 	bl	8014e4c <HAL_I2C_Mem_Write>
		Data = 0x07;
 80136b2:	4669      	mov	r1, sp
 80136b4:	222c      	movs	r2, #44	; 0x2c
 80136b6:	2307      	movs	r3, #7
 80136b8:	1889      	adds	r1, r1, r2
 80136ba:	700b      	strb	r3, [r1, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80136bc:	4649      	mov	r1, r9
 80136be:	9102      	str	r1, [sp, #8]
 80136c0:	a90b      	add	r1, sp, #44	; 0x2c
 80136c2:	003b      	movs	r3, r7
 80136c4:	9100      	str	r1, [sp, #0]
 80136c6:	0020      	movs	r0, r4
 80136c8:	21d0      	movs	r1, #208	; 0xd0
 80136ca:	9701      	str	r7, [sp, #4]
 80136cc:	3a13      	subs	r2, #19
 80136ce:	f001 fbbd 	bl	8014e4c <HAL_I2C_Mem_Write>
		Data = 0x00;
 80136d2:	4669      	mov	r1, sp
 80136d4:	232c      	movs	r3, #44	; 0x2c
 80136d6:	4650      	mov	r0, sl
 80136d8:	18c9      	adds	r1, r1, r3
 80136da:	7008      	strb	r0, [r1, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80136dc:	4649      	mov	r1, r9
 80136de:	9102      	str	r1, [sp, #8]
 80136e0:	a90b      	add	r1, sp, #44	; 0x2c
 80136e2:	003b      	movs	r3, r7
 80136e4:	9100      	str	r1, [sp, #0]
 80136e6:	221c      	movs	r2, #28
 80136e8:	21d0      	movs	r1, #208	; 0xd0
 80136ea:	0020      	movs	r0, r4
 80136ec:	9701      	str	r7, [sp, #4]
 80136ee:	f001 fbad 	bl	8014e4c <HAL_I2C_Mem_Write>
		Data = 0x00;
 80136f2:	4669      	mov	r1, sp
 80136f4:	232c      	movs	r3, #44	; 0x2c
 80136f6:	4652      	mov	r2, sl
 80136f8:	18cb      	adds	r3, r1, r3
 80136fa:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80136fc:	464b      	mov	r3, r9
 80136fe:	9302      	str	r3, [sp, #8]
 8013700:	ab0b      	add	r3, sp, #44	; 0x2c
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	21d0      	movs	r1, #208	; 0xd0
 8013706:	003b      	movs	r3, r7
 8013708:	0020      	movs	r0, r4
 801370a:	9701      	str	r7, [sp, #4]
 801370c:	321b      	adds	r2, #27
 801370e:	f001 fb9d 	bl	8014e4c <HAL_I2C_Mem_Write>
		Debug_Tx("ACC Interface OK");
 8013712:	480e      	ldr	r0, [pc, #56]	; (801374c <main+0x65c>)
 8013714:	f7fc f9b4 	bl	800fa80 <Debug_Tx>
 8013718:	e739      	b.n	801358e <main+0x49e>
 801371a:	46c0      	nop			; (mov r8, r8)
 801371c:	200049d4 	.word	0x200049d4
 8013720:	40004800 	.word	0x40004800
 8013724:	0801e110 	.word	0x0801e110
 8013728:	200002e4 	.word	0x200002e4
 801372c:	50000800 	.word	0x50000800
 8013730:	20000300 	.word	0x20000300
 8013734:	50000400 	.word	0x50000400
 8013738:	20000540 	.word	0x20000540
 801373c:	20004150 	.word	0x20004150
 8013740:	00002710 	.word	0x00002710
 8013744:	20001e64 	.word	0x20001e64
 8013748:	20003f48 	.word	0x20003f48
 801374c:	0801e0fc 	.word	0x0801e0fc

08013750 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8013750:	4b04      	ldr	r3, [pc, #16]	; (8013764 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8013752:	6802      	ldr	r2, [r0, #0]
{
 8013754:	b510      	push	{r4, lr}
  if (htim->Instance == TIM1) {
 8013756:	429a      	cmp	r2, r3
 8013758:	d000      	beq.n	801375c <HAL_TIM_PeriodElapsedCallback+0xc>
}
 801375a:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 801375c:	f000 fb56 	bl	8013e0c <HAL_IncTick>
}
 8013760:	e7fb      	b.n	801375a <HAL_TIM_PeriodElapsedCallback+0xa>
 8013762:	46c0      	nop			; (mov r8, r8)
 8013764:	40012c00 	.word	0x40012c00

08013768 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8013768:	b672      	cpsid	i
  while (1)
 801376a:	e7fe      	b.n	801376a <Error_Handler+0x2>

0801376c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801376c:	2201      	movs	r2, #1
 801376e:	4b0c      	ldr	r3, [pc, #48]	; (80137a0 <HAL_MspInit+0x34>)
{
 8013770:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013772:	6c19      	ldr	r1, [r3, #64]	; 0x40

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8013774:	20c0      	movs	r0, #192	; 0xc0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013776:	4311      	orrs	r1, r2
 8013778:	6419      	str	r1, [r3, #64]	; 0x40
 801377a:	6c19      	ldr	r1, [r3, #64]	; 0x40
{
 801377c:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801377e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8013780:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013782:	9200      	str	r2, [sp, #0]
 8013784:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8013786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013788:	0549      	lsls	r1, r1, #21
 801378a:	430a      	orrs	r2, r1
 801378c:	63da      	str	r2, [r3, #60]	; 0x3c
 801378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8013790:	00c0      	lsls	r0, r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8013792:	400b      	ands	r3, r1
 8013794:	9301      	str	r3, [sp, #4]
 8013796:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8013798:	f000 fb5c 	bl	8013e54 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801379c:	b003      	add	sp, #12
 801379e:	bd00      	pop	{pc}
 80137a0:	40021000 	.word	0x40021000

080137a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80137a4:	b570      	push	{r4, r5, r6, lr}
 80137a6:	0004      	movs	r4, r0
 80137a8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80137aa:	2214      	movs	r2, #20
 80137ac:	2100      	movs	r1, #0
 80137ae:	a803      	add	r0, sp, #12
 80137b0:	f005 fe42 	bl	8019438 <memset>
  if(hadc->Instance==ADC1)
 80137b4:	4b26      	ldr	r3, [pc, #152]	; (8013850 <HAL_ADC_MspInit+0xac>)
 80137b6:	6822      	ldr	r2, [r4, #0]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d001      	beq.n	80137c0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80137bc:	b008      	add	sp, #32
 80137be:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80137c0:	2180      	movs	r1, #128	; 0x80
 80137c2:	4b24      	ldr	r3, [pc, #144]	; (8013854 <HAL_ADC_MspInit+0xb0>)
 80137c4:	0349      	lsls	r1, r1, #13
 80137c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80137c8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80137ca:	430a      	orrs	r2, r1
 80137cc:	641a      	str	r2, [r3, #64]	; 0x40
 80137ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 80137d0:	2503      	movs	r5, #3
    __HAL_RCC_ADC_CLK_ENABLE();
 80137d2:	400a      	ands	r2, r1
 80137d4:	9200      	str	r2, [sp, #0]
 80137d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80137d8:	2201      	movs	r2, #1
 80137da:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137dc:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80137de:	4311      	orrs	r1, r2
 80137e0:	6359      	str	r1, [r3, #52]	; 0x34
 80137e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80137e4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80137e6:	400a      	ands	r2, r1
 80137e8:	9201      	str	r2, [sp, #4]
 80137ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80137ec:	2202      	movs	r2, #2
 80137ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80137f0:	4311      	orrs	r1, r2
 80137f2:	6359      	str	r1, [r3, #52]	; 0x34
 80137f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80137f6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80137f8:	401a      	ands	r2, r3
 80137fa:	9202      	str	r2, [sp, #8]
 80137fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = AI_ADC1_Pin|AI_ADC2_Pin;
 80137fe:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8013800:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013802:	f001 f8d1 	bl	80149a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 8013806:	4b14      	ldr	r3, [pc, #80]	; (8013858 <HAL_ADC_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013808:	4814      	ldr	r0, [pc, #80]	; (801385c <HAL_ADC_MspInit+0xb8>)
 801380a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = EXT_B_SENSE_Pin|INT_B_SENSE_Pin;
 801380c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801380e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013810:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013812:	f001 f8c9 	bl	80149a8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8013816:	4d12      	ldr	r5, [pc, #72]	; (8013860 <HAL_ADC_MspInit+0xbc>)
 8013818:	4b12      	ldr	r3, [pc, #72]	; (8013864 <HAL_ADC_MspInit+0xc0>)
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 801381a:	0028      	movs	r0, r5
    hdma_adc1.Instance = DMA1_Channel1;
 801381c:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801381e:	2305      	movs	r3, #5
 8013820:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8013822:	337b      	adds	r3, #123	; 0x7b
 8013824:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8013826:	3381      	adds	r3, #129	; 0x81
 8013828:	33ff      	adds	r3, #255	; 0xff
 801382a:	616b      	str	r3, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801382c:	2380      	movs	r3, #128	; 0x80
 801382e:	011b      	lsls	r3, r3, #4
 8013830:	61ab      	str	r3, [r5, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8013832:	2320      	movs	r3, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013834:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8013836:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8013838:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801383a:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 801383c:	f000 feea 	bl	8014614 <HAL_DMA_Init>
 8013840:	2800      	cmp	r0, #0
 8013842:	d102      	bne.n	801384a <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8013844:	6525      	str	r5, [r4, #80]	; 0x50
 8013846:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8013848:	e7b8      	b.n	80137bc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 801384a:	f7ff ff8d 	bl	8013768 <Error_Handler>
 801384e:	e7f9      	b.n	8013844 <HAL_ADC_MspInit+0xa0>
 8013850:	40012400 	.word	0x40012400
 8013854:	40021000 	.word	0x40021000
 8013858:	00000402 	.word	0x00000402
 801385c:	50000400 	.word	0x50000400
 8013860:	20004638 	.word	0x20004638
 8013864:	40020008 	.word	0x40020008

08013868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8013868:	b510      	push	{r4, lr}
 801386a:	0004      	movs	r4, r0
 801386c:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801386e:	2214      	movs	r2, #20
 8013870:	2100      	movs	r1, #0
 8013872:	a802      	add	r0, sp, #8
 8013874:	f005 fde0 	bl	8019438 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013878:	221c      	movs	r2, #28
 801387a:	2100      	movs	r1, #0
 801387c:	a807      	add	r0, sp, #28
 801387e:	f005 fddb 	bl	8019438 <memset>
  if(hi2c->Instance==I2C1)
 8013882:	4b18      	ldr	r3, [pc, #96]	; (80138e4 <HAL_I2C_MspInit+0x7c>)
 8013884:	6822      	ldr	r2, [r4, #0]
 8013886:	429a      	cmp	r2, r3
 8013888:	d001      	beq.n	801388e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801388a:	b00e      	add	sp, #56	; 0x38
 801388c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 801388e:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013890:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8013892:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013894:	f002 f980 	bl	8015b98 <HAL_RCCEx_PeriphCLKConfig>
 8013898:	2800      	cmp	r0, #0
 801389a:	d120      	bne.n	80138de <HAL_I2C_MspInit+0x76>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801389c:	2302      	movs	r3, #2
 801389e:	4c12      	ldr	r4, [pc, #72]	; (80138e8 <HAL_I2C_MspInit+0x80>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80138a0:	4812      	ldr	r0, [pc, #72]	; (80138ec <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80138a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80138a4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80138a6:	431a      	orrs	r2, r3
 80138a8:	6362      	str	r2, [r4, #52]	; 0x34
 80138aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80138ac:	4013      	ands	r3, r2
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80138b2:	23c0      	movs	r3, #192	; 0xc0
 80138b4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80138b6:	3bae      	subs	r3, #174	; 0xae
 80138b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80138ba:	3b11      	subs	r3, #17
 80138bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80138be:	2300      	movs	r3, #0
 80138c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80138c2:	3306      	adds	r3, #6
 80138c4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80138c6:	f001 f86f 	bl	80149a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80138ca:	2280      	movs	r2, #128	; 0x80
 80138cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80138ce:	0392      	lsls	r2, r2, #14
 80138d0:	4313      	orrs	r3, r2
 80138d2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80138d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80138d6:	4013      	ands	r3, r2
 80138d8:	9301      	str	r3, [sp, #4]
 80138da:	9b01      	ldr	r3, [sp, #4]
}
 80138dc:	e7d5      	b.n	801388a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80138de:	f7ff ff43 	bl	8013768 <Error_Handler>
 80138e2:	e7db      	b.n	801389c <HAL_I2C_MspInit+0x34>
 80138e4:	40005400 	.word	0x40005400
 80138e8:	40021000 	.word	0x40021000
 80138ec:	50000400 	.word	0x50000400

080138f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80138f0:	b510      	push	{r4, lr}
 80138f2:	0004      	movs	r4, r0
 80138f4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80138f6:	2214      	movs	r2, #20
 80138f8:	2100      	movs	r1, #0
 80138fa:	a803      	add	r0, sp, #12
 80138fc:	f005 fd9c 	bl	8019438 <memset>
  if(hspi->Instance==SPI1)
 8013900:	4b10      	ldr	r3, [pc, #64]	; (8013944 <HAL_SPI_MspInit+0x54>)
 8013902:	6822      	ldr	r2, [r4, #0]
 8013904:	429a      	cmp	r2, r3
 8013906:	d001      	beq.n	801390c <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8013908:	b008      	add	sp, #32
 801390a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 801390c:	2180      	movs	r1, #128	; 0x80
 801390e:	4b0e      	ldr	r3, [pc, #56]	; (8013948 <HAL_SPI_MspInit+0x58>)
 8013910:	0149      	lsls	r1, r1, #5
 8013912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013914:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013916:	430a      	orrs	r2, r1
 8013918:	641a      	str	r2, [r3, #64]	; 0x40
 801391a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801391c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_ENABLE();
 801391e:	400a      	ands	r2, r1
 8013920:	9201      	str	r2, [sp, #4]
 8013922:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013924:	2201      	movs	r2, #1
 8013926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013928:	4311      	orrs	r1, r2
 801392a:	6359      	str	r1, [r3, #52]	; 0x34
 801392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801392e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013930:	401a      	ands	r2, r3
 8013932:	9202      	str	r2, [sp, #8]
 8013934:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI_CLK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8013936:	23e0      	movs	r3, #224	; 0xe0
 8013938:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801393a:	3bde      	subs	r3, #222	; 0xde
 801393c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801393e:	f001 f833 	bl	80149a8 <HAL_GPIO_Init>
}
 8013942:	e7e1      	b.n	8013908 <HAL_SPI_MspInit+0x18>
 8013944:	40013000 	.word	0x40013000
 8013948:	40021000 	.word	0x40021000

0801394c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801394c:	b500      	push	{lr}
  if(htim_base->Instance==TIM6)
 801394e:	4b0c      	ldr	r3, [pc, #48]	; (8013980 <HAL_TIM_Base_MspInit+0x34>)
 8013950:	6802      	ldr	r2, [r0, #0]
{
 8013952:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 8013954:	429a      	cmp	r2, r3
 8013956:	d001      	beq.n	801395c <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8013958:	b003      	add	sp, #12
 801395a:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 801395c:	2310      	movs	r3, #16
 801395e:	4a09      	ldr	r2, [pc, #36]	; (8013984 <HAL_TIM_Base_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8013960:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013962:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8013964:	4319      	orrs	r1, r3
 8013966:	63d1      	str	r1, [r2, #60]	; 0x3c
 8013968:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 801396a:	2100      	movs	r1, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 801396c:	4013      	ands	r3, r2
 801396e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8013970:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8013972:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8013974:	f000 fdf0 	bl	8014558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8013978:	2011      	movs	r0, #17
 801397a:	f000 fe1f 	bl	80145bc <HAL_NVIC_EnableIRQ>
}
 801397e:	e7eb      	b.n	8013958 <HAL_TIM_Base_MspInit+0xc>
 8013980:	40001000 	.word	0x40001000
 8013984:	40021000 	.word	0x40021000

08013988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8013988:	b570      	push	{r4, r5, r6, lr}
 801398a:	0004      	movs	r4, r0
 801398c:	b092      	sub	sp, #72	; 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801398e:	2214      	movs	r2, #20
 8013990:	2100      	movs	r1, #0
 8013992:	a806      	add	r0, sp, #24
 8013994:	f005 fd50 	bl	8019438 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8013998:	221c      	movs	r2, #28
 801399a:	2100      	movs	r1, #0
 801399c:	a80b      	add	r0, sp, #44	; 0x2c
 801399e:	f005 fd4b 	bl	8019438 <memset>
  if(huart->Instance==USART1)
 80139a2:	6823      	ldr	r3, [r4, #0]
 80139a4:	4a6f      	ldr	r2, [pc, #444]	; (8013b64 <HAL_UART_MspInit+0x1dc>)
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d008      	beq.n	80139bc <HAL_UART_MspInit+0x34>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80139aa:	4a6f      	ldr	r2, [pc, #444]	; (8013b68 <HAL_UART_MspInit+0x1e0>)
 80139ac:	4293      	cmp	r3, r2
 80139ae:	d04c      	beq.n	8013a4a <HAL_UART_MspInit+0xc2>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80139b0:	4a6e      	ldr	r2, [pc, #440]	; (8013b6c <HAL_UART_MspInit+0x1e4>)
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d100      	bne.n	80139b8 <HAL_UART_MspInit+0x30>
 80139b6:	e08c      	b.n	8013ad2 <HAL_UART_MspInit+0x14a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80139b8:	b012      	add	sp, #72	; 0x48
 80139ba:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80139bc:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80139be:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80139c0:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80139c2:	f002 f8e9 	bl	8015b98 <HAL_RCCEx_PeriphCLKConfig>
 80139c6:	2800      	cmp	r0, #0
 80139c8:	d000      	beq.n	80139cc <HAL_UART_MspInit+0x44>
 80139ca:	e0bf      	b.n	8013b4c <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART1_CLK_ENABLE();
 80139cc:	2180      	movs	r1, #128	; 0x80
 80139ce:	4b68      	ldr	r3, [pc, #416]	; (8013b70 <HAL_UART_MspInit+0x1e8>)
 80139d0:	01c9      	lsls	r1, r1, #7
 80139d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139d4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 80139d6:	430a      	orrs	r2, r1
 80139d8:	641a      	str	r2, [r3, #64]	; 0x40
 80139da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80139dc:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80139de:	400a      	ands	r2, r1
 80139e0:	9200      	str	r2, [sp, #0]
 80139e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80139e4:	2201      	movs	r2, #1
 80139e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139e8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80139ea:	4311      	orrs	r1, r2
 80139ec:	6359      	str	r1, [r3, #52]	; 0x34
 80139ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80139f0:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80139f2:	4013      	ands	r3, r2
 80139f4:	9301      	str	r3, [sp, #4]
 80139f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = mcu_TXD_GSM_Pin|mcu_RXD_GSM_Pin;
 80139f8:	23c0      	movs	r3, #192	; 0xc0
 80139fa:	00db      	lsls	r3, r3, #3
 80139fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80139fe:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a00:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a02:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013a04:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8013a06:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a08:	f000 ffce 	bl	80149a8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8013a0c:	4d59      	ldr	r5, [pc, #356]	; (8013b74 <HAL_UART_MspInit+0x1ec>)
 8013a0e:	4b5a      	ldr	r3, [pc, #360]	; (8013b78 <HAL_UART_MspInit+0x1f0>)
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8013a10:	0028      	movs	r0, r5
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8013a12:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8013a14:	2332      	movs	r3, #50	; 0x32
 8013a16:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013a18:	334e      	adds	r3, #78	; 0x4e
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013a1a:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013a1c:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013a1e:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013a20:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013a22:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8013a24:	61ee      	str	r6, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013a26:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8013a28:	f000 fdf4 	bl	8014614 <HAL_DMA_Init>
 8013a2c:	2800      	cmp	r0, #0
 8013a2e:	d000      	beq.n	8013a32 <HAL_UART_MspInit+0xaa>
 8013a30:	e089      	b.n	8013b46 <HAL_UART_MspInit+0x1be>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8013a32:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013a34:	2200      	movs	r2, #0
 8013a36:	2100      	movs	r1, #0
 8013a38:	201b      	movs	r0, #27
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8013a3a:	50e5      	str	r5, [r4, r3]
 8013a3c:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8013a3e:	f000 fd8b 	bl	8014558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8013a42:	201b      	movs	r0, #27
 8013a44:	f000 fdba 	bl	80145bc <HAL_NVIC_EnableIRQ>
 8013a48:	e7b6      	b.n	80139b8 <HAL_UART_MspInit+0x30>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8013a4a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013a4c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8013a4e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8013a50:	f002 f8a2 	bl	8015b98 <HAL_RCCEx_PeriphCLKConfig>
 8013a54:	2800      	cmp	r0, #0
 8013a56:	d17c      	bne.n	8013b52 <HAL_UART_MspInit+0x1ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8013a58:	2180      	movs	r1, #128	; 0x80
 8013a5a:	4b45      	ldr	r3, [pc, #276]	; (8013b70 <HAL_UART_MspInit+0x1e8>)
 8013a5c:	0289      	lsls	r1, r1, #10
 8013a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a60:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8013a62:	430a      	orrs	r2, r1
 8013a64:	63da      	str	r2, [r3, #60]	; 0x3c
 8013a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a68:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8013a6a:	400a      	ands	r2, r1
 8013a6c:	9202      	str	r2, [sp, #8]
 8013a6e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a70:	2201      	movs	r2, #1
 8013a72:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a74:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a76:	4311      	orrs	r1, r2
 8013a78:	6359      	str	r1, [r3, #52]	; 0x34
 8013a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a7c:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a7e:	4013      	ands	r3, r2
 8013a80:	9303      	str	r3, [sp, #12]
 8013a82:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = mcu_TXD_GPS_Pin|mcu_RXD_GPS_Pin;
 8013a84:	230c      	movs	r3, #12
 8013a86:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a88:	3b0a      	subs	r3, #10
 8013a8a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a8c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013a8e:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8013a90:	920a      	str	r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a92:	f000 ff89 	bl	80149a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8013a96:	4d39      	ldr	r5, [pc, #228]	; (8013b7c <HAL_UART_MspInit+0x1f4>)
 8013a98:	4b39      	ldr	r3, [pc, #228]	; (8013b80 <HAL_UART_MspInit+0x1f8>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8013a9a:	0028      	movs	r0, r5
    hdma_usart2_rx.Instance = DMA1_Channel3;
 8013a9c:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8013a9e:	2334      	movs	r3, #52	; 0x34
 8013aa0:	606b      	str	r3, [r5, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013aa2:	334c      	adds	r3, #76	; 0x4c
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8013aa4:	60ae      	str	r6, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013aa6:	60ee      	str	r6, [r5, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8013aa8:	612b      	str	r3, [r5, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013aaa:	616e      	str	r6, [r5, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013aac:	61ae      	str	r6, [r5, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8013aae:	61ee      	str	r6, [r5, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8013ab0:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8013ab2:	f000 fdaf 	bl	8014614 <HAL_DMA_Init>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d14e      	bne.n	8013b58 <HAL_UART_MspInit+0x1d0>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8013aba:	2380      	movs	r3, #128	; 0x80
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8013abc:	2200      	movs	r2, #0
 8013abe:	2100      	movs	r1, #0
 8013ac0:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8013ac2:	50e5      	str	r5, [r4, r3]
 8013ac4:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8013ac6:	f000 fd47 	bl	8014558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8013aca:	201c      	movs	r0, #28
 8013acc:	f000 fd76 	bl	80145bc <HAL_NVIC_EnableIRQ>
 8013ad0:	e772      	b.n	80139b8 <HAL_UART_MspInit+0x30>
    __HAL_RCC_USART3_CLK_ENABLE();
 8013ad2:	2180      	movs	r1, #128	; 0x80
 8013ad4:	4b26      	ldr	r3, [pc, #152]	; (8013b70 <HAL_UART_MspInit+0x1e8>)
 8013ad6:	02c9      	lsls	r1, r1, #11
 8013ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013ada:	482a      	ldr	r0, [pc, #168]	; (8013b84 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8013adc:	430a      	orrs	r2, r1
 8013ade:	63da      	str	r2, [r3, #60]	; 0x3c
 8013ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ae2:	400a      	ands	r2, r1
 8013ae4:	9204      	str	r2, [sp, #16]
 8013ae6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013ae8:	2202      	movs	r2, #2
 8013aea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8013aec:	4311      	orrs	r1, r2
 8013aee:	6359      	str	r1, [r3, #52]	; 0x34
 8013af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013af2:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013af4:	4013      	ands	r3, r2
 8013af6:	9305      	str	r3, [sp, #20]
 8013af8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = mcu_RXD_232_Pin|MCU_TXD_232_Pin;
 8013afa:	2305      	movs	r3, #5
 8013afc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8013afe:	3b01      	subs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013b00:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8013b02:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013b04:	f000 ff50 	bl	80149a8 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8013b08:	4d1f      	ldr	r5, [pc, #124]	; (8013b88 <HAL_UART_MspInit+0x200>)
 8013b0a:	4b20      	ldr	r3, [pc, #128]	; (8013b8c <HAL_UART_MspInit+0x204>)
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013b0c:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8013b0e:	602b      	str	r3, [r5, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8013b10:	2337      	movs	r3, #55	; 0x37
 8013b12:	606b      	str	r3, [r5, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8013b14:	3b27      	subs	r3, #39	; 0x27
 8013b16:	60ab      	str	r3, [r5, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013b18:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8013b1a:	0028      	movs	r0, r5
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8013b1c:	60eb      	str	r3, [r5, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8013b1e:	612a      	str	r2, [r5, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8013b20:	616b      	str	r3, [r5, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8013b22:	61ab      	str	r3, [r5, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8013b24:	61eb      	str	r3, [r5, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8013b26:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8013b28:	f000 fd74 	bl	8014614 <HAL_DMA_Init>
 8013b2c:	2800      	cmp	r0, #0
 8013b2e:	d116      	bne.n	8013b5e <HAL_UART_MspInit+0x1d6>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8013b30:	2200      	movs	r2, #0
 8013b32:	2100      	movs	r1, #0
 8013b34:	201d      	movs	r0, #29
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8013b36:	67e5      	str	r5, [r4, #124]	; 0x7c
 8013b38:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8013b3a:	f000 fd0d 	bl	8014558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8013b3e:	201d      	movs	r0, #29
 8013b40:	f000 fd3c 	bl	80145bc <HAL_NVIC_EnableIRQ>
}
 8013b44:	e738      	b.n	80139b8 <HAL_UART_MspInit+0x30>
      Error_Handler();
 8013b46:	f7ff fe0f 	bl	8013768 <Error_Handler>
 8013b4a:	e772      	b.n	8013a32 <HAL_UART_MspInit+0xaa>
      Error_Handler();
 8013b4c:	f7ff fe0c 	bl	8013768 <Error_Handler>
 8013b50:	e73c      	b.n	80139cc <HAL_UART_MspInit+0x44>
      Error_Handler();
 8013b52:	f7ff fe09 	bl	8013768 <Error_Handler>
 8013b56:	e77f      	b.n	8013a58 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8013b58:	f7ff fe06 	bl	8013768 <Error_Handler>
 8013b5c:	e7ad      	b.n	8013aba <HAL_UART_MspInit+0x132>
      Error_Handler();
 8013b5e:	f7ff fe03 	bl	8013768 <Error_Handler>
 8013b62:	e7e5      	b.n	8013b30 <HAL_UART_MspInit+0x1a8>
 8013b64:	40013800 	.word	0x40013800
 8013b68:	40004400 	.word	0x40004400
 8013b6c:	40004800 	.word	0x40004800
 8013b70:	40021000 	.word	0x40021000
 8013b74:	20004694 	.word	0x20004694
 8013b78:	4002001c 	.word	0x4002001c
 8013b7c:	200046f0 	.word	0x200046f0
 8013b80:	40020030 	.word	0x40020030
 8013b84:	50000400 	.word	0x50000400
 8013b88:	2000474c 	.word	0x2000474c
 8013b8c:	40020044 	.word	0x40020044

08013b90 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8013b90:	2180      	movs	r1, #128	; 0x80
 8013b92:	4b21      	ldr	r3, [pc, #132]	; (8013c18 <HAL_InitTick+0x88>)
{
 8013b94:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8013b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013b98:	0109      	lsls	r1, r1, #4
 8013b9a:	430a      	orrs	r2, r1
 8013b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8013b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
{
 8013ba0:	b086      	sub	sp, #24
  __HAL_RCC_TIM1_CLK_ENABLE();
 8013ba2:	400b      	ands	r3, r1
 8013ba4:	9301      	str	r3, [sp, #4]
{
 8013ba6:	0006      	movs	r6, r0

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013ba8:	4669      	mov	r1, sp
 8013baa:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8013bac:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8013bae:	f001 ffd9 	bl	8015b64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8013bb2:	9b05      	ldr	r3, [sp, #20]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d117      	bne.n	8013be8 <HAL_InitTick+0x58>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8013bb8:	f001 ffc0 	bl	8015b3c <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8013bbc:	4c17      	ldr	r4, [pc, #92]	; (8013c1c <HAL_InitTick+0x8c>)
 8013bbe:	4b18      	ldr	r3, [pc, #96]	; (8013c20 <HAL_InitTick+0x90>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013bc0:	4918      	ldr	r1, [pc, #96]	; (8013c24 <HAL_InitTick+0x94>)
  htim1.Instance = TIM1;
 8013bc2:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8013bc4:	4b18      	ldr	r3, [pc, #96]	; (8013c28 <HAL_InitTick+0x98>)
 8013bc6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013bc8:	f7f8 feb6 	bl	800c938 <__udivsi3>
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8013bcc:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8013bce:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8013bd0:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8013bd2:	0020      	movs	r0, r4
  htim1.Init.ClockDivision = 0;
 8013bd4:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013bd6:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013bd8:	61a3      	str	r3, [r4, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8013bda:	f002 fd77 	bl	80166cc <HAL_TIM_Base_Init>
 8013bde:	1e05      	subs	r5, r0, #0
  if (status == HAL_OK)
 8013be0:	d006      	beq.n	8013bf0 <HAL_InitTick+0x60>
    }
  }

 /* Return function status */
  return status;
}
 8013be2:	0028      	movs	r0, r5
 8013be4:	b006      	add	sp, #24
 8013be6:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8013be8:	f001 ffa8 	bl	8015b3c <HAL_RCC_GetPCLK1Freq>
 8013bec:	0040      	lsls	r0, r0, #1
 8013bee:	e7e5      	b.n	8013bbc <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim1);
 8013bf0:	0020      	movs	r0, r4
 8013bf2:	f002 fc2b 	bl	801644c <HAL_TIM_Base_Start_IT>
 8013bf6:	1e05      	subs	r5, r0, #0
    if (status == HAL_OK)
 8013bf8:	d1f3      	bne.n	8013be2 <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8013bfa:	200d      	movs	r0, #13
 8013bfc:	f000 fcde 	bl	80145bc <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8013c00:	2e03      	cmp	r6, #3
 8013c02:	d901      	bls.n	8013c08 <HAL_InitTick+0x78>
        status = HAL_ERROR;
 8013c04:	2501      	movs	r5, #1
 8013c06:	e7ec      	b.n	8013be2 <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8013c08:	2200      	movs	r2, #0
 8013c0a:	0031      	movs	r1, r6
 8013c0c:	200d      	movs	r0, #13
 8013c0e:	f000 fca3 	bl	8014558 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8013c12:	4b06      	ldr	r3, [pc, #24]	; (8013c2c <HAL_InitTick+0x9c>)
 8013c14:	601e      	str	r6, [r3, #0]
 8013c16:	e7e4      	b.n	8013be2 <HAL_InitTick+0x52>
 8013c18:	40021000 	.word	0x40021000
 8013c1c:	20004ac4 	.word	0x20004ac4
 8013c20:	40012c00 	.word	0x40012c00
 8013c24:	000f4240 	.word	0x000f4240
 8013c28:	000003e7 	.word	0x000003e7
 8013c2c:	200000ec 	.word	0x200000ec

08013c30 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8013c30:	e7fe      	b.n	8013c30 <NMI_Handler>
 8013c32:	46c0      	nop			; (mov r8, r8)

08013c34 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8013c34:	e7fe      	b.n	8013c34 <HardFault_Handler>
 8013c36:	46c0      	nop			; (mov r8, r8)

08013c38 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8013c38:	4770      	bx	lr
 8013c3a:	46c0      	nop			; (mov r8, r8)

08013c3c <PendSV_Handler>:
 8013c3c:	4770      	bx	lr
 8013c3e:	46c0      	nop			; (mov r8, r8)

08013c40 <SysTick_Handler>:
 8013c40:	4770      	bx	lr
 8013c42:	46c0      	nop			; (mov r8, r8)

08013c44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8013c44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8013c46:	4802      	ldr	r0, [pc, #8]	; (8013c50 <DMA1_Channel1_IRQHandler+0xc>)
 8013c48:	f000 fe20 	bl	801488c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8013c4c:	bd10      	pop	{r4, pc}
 8013c4e:	46c0      	nop			; (mov r8, r8)
 8013c50:	20004638 	.word	0x20004638

08013c54 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8013c54:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8013c56:	4803      	ldr	r0, [pc, #12]	; (8013c64 <DMA1_Channel2_3_IRQHandler+0x10>)
 8013c58:	f000 fe18 	bl	801488c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8013c5c:	4802      	ldr	r0, [pc, #8]	; (8013c68 <DMA1_Channel2_3_IRQHandler+0x14>)
 8013c5e:	f000 fe15 	bl	801488c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8013c62:	bd10      	pop	{r4, pc}
 8013c64:	20004694 	.word	0x20004694
 8013c68:	200046f0 	.word	0x200046f0

08013c6c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8013c6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8013c6e:	4803      	ldr	r0, [pc, #12]	; (8013c7c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x10>)
 8013c70:	f000 fe0c 	bl	801488c <HAL_DMA_IRQHandler>
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 8013c74:	4802      	ldr	r0, [pc, #8]	; (8013c80 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8013c76:	f000 fe65 	bl	8014944 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8013c7a:	bd10      	pop	{r4, pc}
 8013c7c:	2000474c 	.word	0x2000474c
 8013c80:	20004638 	.word	0x20004638

08013c84 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8013c84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8013c86:	4802      	ldr	r0, [pc, #8]	; (8013c90 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8013c88:	f002 fc1a 	bl	80164c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8013c8c:	bd10      	pop	{r4, pc}
 8013c8e:	46c0      	nop			; (mov r8, r8)
 8013c90:	20004ac4 	.word	0x20004ac4

08013c94 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8013c94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8013c96:	4802      	ldr	r0, [pc, #8]	; (8013ca0 <TIM6_IRQHandler+0xc>)
 8013c98:	f002 fc12 	bl	80164c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8013c9c:	bd10      	pop	{r4, pc}
 8013c9e:	46c0      	nop			; (mov r8, r8)
 8013ca0:	20004860 	.word	0x20004860

08013ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8013ca4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8013ca6:	4802      	ldr	r0, [pc, #8]	; (8013cb0 <USART1_IRQHandler+0xc>)
 8013ca8:	f002 fe02 	bl	80168b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8013cac:	bd10      	pop	{r4, pc}
 8013cae:	46c0      	nop			; (mov r8, r8)
 8013cb0:	200048ac 	.word	0x200048ac

08013cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8013cb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8013cb6:	4802      	ldr	r0, [pc, #8]	; (8013cc0 <USART2_IRQHandler+0xc>)
 8013cb8:	f002 fdfa 	bl	80168b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8013cbc:	bd10      	pop	{r4, pc}
 8013cbe:	46c0      	nop			; (mov r8, r8)
 8013cc0:	20004940 	.word	0x20004940

08013cc4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8013cc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8013cc6:	4802      	ldr	r0, [pc, #8]	; (8013cd0 <USART3_4_IRQHandler+0xc>)
 8013cc8:	f002 fdf2 	bl	80168b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8013ccc:	bd10      	pop	{r4, pc}
 8013cce:	46c0      	nop			; (mov r8, r8)
 8013cd0:	200049d4 	.word	0x200049d4

08013cd4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8013cd4:	2001      	movs	r0, #1
 8013cd6:	4770      	bx	lr

08013cd8 <_kill>:

int _kill(int pid, int sig)
{
 8013cd8:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8013cda:	f005 fce1 	bl	80196a0 <__errno>
 8013cde:	2316      	movs	r3, #22
 8013ce0:	6003      	str	r3, [r0, #0]
  return -1;
 8013ce2:	2001      	movs	r0, #1
}
 8013ce4:	4240      	negs	r0, r0
 8013ce6:	bd10      	pop	{r4, pc}

08013ce8 <_exit>:

void _exit (int status)
{
 8013ce8:	b510      	push	{r4, lr}
  errno = EINVAL;
 8013cea:	f005 fcd9 	bl	80196a0 <__errno>
 8013cee:	2316      	movs	r3, #22
 8013cf0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8013cf2:	e7fe      	b.n	8013cf2 <_exit+0xa>

08013cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8013cf4:	b570      	push	{r4, r5, r6, lr}
 8013cf6:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013cf8:	dd07      	ble.n	8013d0a <_read+0x16>
 8013cfa:	000c      	movs	r4, r1
 8013cfc:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8013cfe:	e000      	b.n	8013d02 <_read+0xe>
 8013d00:	bf00      	nop
 8013d02:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013d04:	3401      	adds	r4, #1
 8013d06:	42ac      	cmp	r4, r5
 8013d08:	d1f9      	bne.n	8013cfe <_read+0xa>
  }

  return len;
}
 8013d0a:	0030      	movs	r0, r6
 8013d0c:	bd70      	pop	{r4, r5, r6, pc}
 8013d0e:	46c0      	nop			; (mov r8, r8)

08013d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8013d10:	b570      	push	{r4, r5, r6, lr}
 8013d12:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013d14:	dd07      	ble.n	8013d26 <_write+0x16>
 8013d16:	000c      	movs	r4, r1
 8013d18:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8013d1a:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013d1c:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8013d1e:	e000      	b.n	8013d22 <_write+0x12>
 8013d20:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8013d22:	42ac      	cmp	r4, r5
 8013d24:	d1f9      	bne.n	8013d1a <_write+0xa>
  }
  return len;
}
 8013d26:	0030      	movs	r0, r6
 8013d28:	bd70      	pop	{r4, r5, r6, pc}
 8013d2a:	46c0      	nop			; (mov r8, r8)

08013d2c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8013d2c:	2001      	movs	r0, #1
}
 8013d2e:	4240      	negs	r0, r0
 8013d30:	4770      	bx	lr
 8013d32:	46c0      	nop			; (mov r8, r8)

08013d34 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8013d34:	2380      	movs	r3, #128	; 0x80
 8013d36:	019b      	lsls	r3, r3, #6
  return 0;
}
 8013d38:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8013d3a:	604b      	str	r3, [r1, #4]
}
 8013d3c:	4770      	bx	lr
 8013d3e:	46c0      	nop			; (mov r8, r8)

08013d40 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8013d40:	2001      	movs	r0, #1
 8013d42:	4770      	bx	lr

08013d44 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8013d44:	2000      	movs	r0, #0
 8013d46:	4770      	bx	lr

08013d48 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013d48:	490c      	ldr	r1, [pc, #48]	; (8013d7c <_sbrk+0x34>)
 8013d4a:	4a0d      	ldr	r2, [pc, #52]	; (8013d80 <_sbrk+0x38>)
{
 8013d4c:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8013d4e:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8013d50:	490c      	ldr	r1, [pc, #48]	; (8013d84 <_sbrk+0x3c>)
{
 8013d52:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8013d54:	6808      	ldr	r0, [r1, #0]
 8013d56:	2800      	cmp	r0, #0
 8013d58:	d004      	beq.n	8013d64 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8013d5a:	18c3      	adds	r3, r0, r3
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	d806      	bhi.n	8013d6e <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8013d60:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8013d62:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8013d64:	4808      	ldr	r0, [pc, #32]	; (8013d88 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8013d66:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8013d68:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	d9f8      	bls.n	8013d60 <_sbrk+0x18>
    errno = ENOMEM;
 8013d6e:	f005 fc97 	bl	80196a0 <__errno>
 8013d72:	230c      	movs	r3, #12
 8013d74:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8013d76:	2001      	movs	r0, #1
 8013d78:	4240      	negs	r0, r0
 8013d7a:	e7f2      	b.n	8013d62 <_sbrk+0x1a>
 8013d7c:	00000400 	.word	0x00000400
 8013d80:	20009000 	.word	0x20009000
 8013d84:	20004b10 	.word	0x20004b10
 8013d88:	20004c68 	.word	0x20004c68

08013d8c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8013d8c:	4770      	bx	lr
 8013d8e:	46c0      	nop			; (mov r8, r8)

08013d90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8013d90:	480d      	ldr	r0, [pc, #52]	; (8013dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8013d92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8013d94:	f7ff fffa 	bl	8013d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8013d98:	480c      	ldr	r0, [pc, #48]	; (8013dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8013d9a:	490d      	ldr	r1, [pc, #52]	; (8013dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8013d9c:	4a0d      	ldr	r2, [pc, #52]	; (8013dd4 <LoopForever+0xe>)
  movs r3, #0
 8013d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8013da0:	e002      	b.n	8013da8 <LoopCopyDataInit>

08013da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8013da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8013da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8013da6:	3304      	adds	r3, #4

08013da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8013da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8013daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8013dac:	d3f9      	bcc.n	8013da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8013dae:	4a0a      	ldr	r2, [pc, #40]	; (8013dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8013db0:	4c0a      	ldr	r4, [pc, #40]	; (8013ddc <LoopForever+0x16>)
  movs r3, #0
 8013db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8013db4:	e001      	b.n	8013dba <LoopFillZerobss>

08013db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8013db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8013db8:	3204      	adds	r2, #4

08013dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8013dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8013dbc:	d3fb      	bcc.n	8013db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8013dbe:	f005 fc75 	bl	80196ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8013dc2:	f7ff f995 	bl	80130f0 <main>

08013dc6 <LoopForever>:

LoopForever:
  b LoopForever
 8013dc6:	e7fe      	b.n	8013dc6 <LoopForever>
  ldr   r0, =_estack
 8013dc8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8013dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8013dd0:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8013dd4:	0801e680 	.word	0x0801e680
  ldr r2, =_sbss
 8013dd8:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8013ddc:	20004c64 	.word	0x20004c64

08013de0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8013de0:	e7fe      	b.n	8013de0 <ADC1_IRQHandler>
	...

08013de4 <HAL_Init>:
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013de4:	2380      	movs	r3, #128	; 0x80
 8013de6:	4a08      	ldr	r2, [pc, #32]	; (8013e08 <HAL_Init+0x24>)
 8013de8:	005b      	lsls	r3, r3, #1
 8013dea:	6811      	ldr	r1, [r2, #0]
{
 8013dec:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013dee:	430b      	orrs	r3, r1
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013df0:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8013df2:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8013df4:	f7ff fecc 	bl	8013b90 <HAL_InitTick>
 8013df8:	1e04      	subs	r4, r0, #0
 8013dfa:	d002      	beq.n	8013e02 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8013dfc:	2401      	movs	r4, #1
  HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8013dfe:	0020      	movs	r0, r4
 8013e00:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8013e02:	f7ff fcb3 	bl	801376c <HAL_MspInit>
 8013e06:	e7fa      	b.n	8013dfe <HAL_Init+0x1a>
 8013e08:	40022000 	.word	0x40022000

08013e0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8013e0c:	4a03      	ldr	r2, [pc, #12]	; (8013e1c <HAL_IncTick+0x10>)
 8013e0e:	4b04      	ldr	r3, [pc, #16]	; (8013e20 <HAL_IncTick+0x14>)
 8013e10:	6811      	ldr	r1, [r2, #0]
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	185b      	adds	r3, r3, r1
 8013e16:	6013      	str	r3, [r2, #0]
}
 8013e18:	4770      	bx	lr
 8013e1a:	46c0      	nop			; (mov r8, r8)
 8013e1c:	20004b14 	.word	0x20004b14
 8013e20:	200000e8 	.word	0x200000e8

08013e24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8013e24:	4b01      	ldr	r3, [pc, #4]	; (8013e2c <HAL_GetTick+0x8>)
 8013e26:	6818      	ldr	r0, [r3, #0]
}
 8013e28:	4770      	bx	lr
 8013e2a:	46c0      	nop			; (mov r8, r8)
 8013e2c:	20004b14 	.word	0x20004b14

08013e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8013e30:	b570      	push	{r4, r5, r6, lr}
 8013e32:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8013e34:	f7ff fff6 	bl	8013e24 <HAL_GetTick>
 8013e38:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8013e3a:	1c63      	adds	r3, r4, #1
 8013e3c:	d002      	beq.n	8013e44 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8013e3e:	4b04      	ldr	r3, [pc, #16]	; (8013e50 <HAL_Delay+0x20>)
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8013e44:	f7ff ffee 	bl	8013e24 <HAL_GetTick>
 8013e48:	1b40      	subs	r0, r0, r5
 8013e4a:	42a0      	cmp	r0, r4
 8013e4c:	d3fa      	bcc.n	8013e44 <HAL_Delay+0x14>
  {
  }
}
 8013e4e:	bd70      	pop	{r4, r5, r6, pc}
 8013e50:	200000e8 	.word	0x200000e8

08013e54 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8013e54:	4a03      	ldr	r2, [pc, #12]	; (8013e64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 8013e56:	4904      	ldr	r1, [pc, #16]	; (8013e68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 8013e58:	6813      	ldr	r3, [r2, #0]
 8013e5a:	400b      	ands	r3, r1
 8013e5c:	4303      	orrs	r3, r0
 8013e5e:	6013      	str	r3, [r2, #0]
}
 8013e60:	4770      	bx	lr
 8013e62:	46c0      	nop			; (mov r8, r8)
 8013e64:	40010000 	.word	0x40010000
 8013e68:	fffff9ff 	.word	0xfffff9ff

08013e6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8013e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e6e:	46d6      	mov	lr, sl
 8013e70:	464f      	mov	r7, r9
 8013e72:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8013e74:	2300      	movs	r3, #0
{
 8013e76:	b5c0      	push	{r6, r7, lr}
 8013e78:	b082      	sub	sp, #8
 8013e7a:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8013e7c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8013e7e:	d100      	bne.n	8013e82 <HAL_ADC_Init+0x16>
 8013e80:	e0d8      	b.n	8014034 <HAL_ADC_Init+0x1c8>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8013e82:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8013e84:	2d00      	cmp	r5, #0
 8013e86:	d100      	bne.n	8013e8a <HAL_ADC_Init+0x1e>
 8013e88:	e0a8      	b.n	8013fdc <HAL_ADC_Init+0x170>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8013e8a:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8013e8c:	6825      	ldr	r5, [r4, #0]
 8013e8e:	055b      	lsls	r3, r3, #21
 8013e90:	68aa      	ldr	r2, [r5, #8]
 8013e92:	421a      	tst	r2, r3
 8013e94:	d115      	bne.n	8013ec2 <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8013e96:	68aa      	ldr	r2, [r5, #8]
 8013e98:	497d      	ldr	r1, [pc, #500]	; (8014090 <HAL_ADC_Init+0x224>)
 8013e9a:	400a      	ands	r2, r1
 8013e9c:	4313      	orrs	r3, r2
 8013e9e:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8013ea0:	4b7c      	ldr	r3, [pc, #496]	; (8014094 <HAL_ADC_Init+0x228>)
 8013ea2:	497d      	ldr	r1, [pc, #500]	; (8014098 <HAL_ADC_Init+0x22c>)
 8013ea4:	6818      	ldr	r0, [r3, #0]
 8013ea6:	f7f8 fd47 	bl	800c938 <__udivsi3>
 8013eaa:	3001      	adds	r0, #1
 8013eac:	0040      	lsls	r0, r0, #1
 8013eae:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8013eb0:	9b01      	ldr	r3, [sp, #4]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d005      	beq.n	8013ec2 <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 8013eb6:	9b01      	ldr	r3, [sp, #4]
 8013eb8:	3b01      	subs	r3, #1
 8013eba:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8013ebc:	9b01      	ldr	r3, [sp, #4]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d1f9      	bne.n	8013eb6 <HAL_ADC_Init+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8013ec2:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	00db      	lsls	r3, r3, #3
 8013ec8:	d400      	bmi.n	8013ecc <HAL_ADC_Init+0x60>
 8013eca:	e07a      	b.n	8013fc2 <HAL_ADC_Init+0x156>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8013ecc:	68ab      	ldr	r3, [r5, #8]
 8013ece:	075b      	lsls	r3, r3, #29
 8013ed0:	d50b      	bpl.n	8013eea <HAL_ADC_Init+0x7e>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013ed4:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8013ed6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013ed8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013eda:	4313      	orrs	r3, r2
 8013edc:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8013ede:	b002      	add	sp, #8
 8013ee0:	bce0      	pop	{r5, r6, r7}
 8013ee2:	46ba      	mov	sl, r7
 8013ee4:	46b1      	mov	r9, r6
 8013ee6:	46a8      	mov	r8, r5
 8013ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013eea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013eec:	06db      	lsls	r3, r3, #27
 8013eee:	d4f1      	bmi.n	8013ed4 <HAL_ADC_Init+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8013ef0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ef2:	4a6a      	ldr	r2, [pc, #424]	; (801409c <HAL_ADC_Init+0x230>)
 8013ef4:	4013      	ands	r3, r2
 8013ef6:	3206      	adds	r2, #6
 8013ef8:	32ff      	adds	r2, #255	; 0xff
 8013efa:	4313      	orrs	r3, r2
 8013efc:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8013efe:	68ab      	ldr	r3, [r5, #8]
 8013f00:	07db      	lsls	r3, r3, #31
 8013f02:	d471      	bmi.n	8013fe8 <HAL_ADC_Init+0x17c>
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8013f04:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8013f06:	68a2      	ldr	r2, [r4, #8]
 8013f08:	1e7b      	subs	r3, r7, #1
 8013f0a:	419f      	sbcs	r7, r3
 8013f0c:	68e3      	ldr	r3, [r4, #12]
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8013f0e:	7ea6      	ldrb	r6, [r4, #26]
 8013f10:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8013f12:	7e23      	ldrb	r3, [r4, #24]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8013f14:	6921      	ldr	r1, [r4, #16]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8013f16:	039b      	lsls	r3, r3, #14
 8013f18:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8013f1a:	7e63      	ldrb	r3, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8013f1c:	033f      	lsls	r7, r7, #12
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8013f1e:	03db      	lsls	r3, r3, #15
 8013f20:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8013f22:	0373      	lsls	r3, r6, #13
 8013f24:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8013f26:	2900      	cmp	r1, #0
 8013f28:	da00      	bge.n	8013f2c <HAL_ADC_Init+0xc0>
 8013f2a:	e09f      	b.n	801406c <HAL_ADC_Init+0x200>
 8013f2c:	2380      	movs	r3, #128	; 0x80
 8013f2e:	039b      	lsls	r3, r3, #14
 8013f30:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8013f32:	232c      	movs	r3, #44	; 0x2c
 8013f34:	5ce3      	ldrb	r3, [r4, r3]
 8013f36:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	433b      	orrs	r3, r7
 8013f3c:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013f3e:	2720      	movs	r7, #32
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8013f40:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8013f42:	5de2      	ldrb	r2, [r4, r7]
 8013f44:	2a01      	cmp	r2, #1
 8013f46:	d100      	bne.n	8013f4a <HAL_ADC_Init+0xde>
 8013f48:	e094      	b.n	8014074 <HAL_ADC_Init+0x208>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013f4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8013f4c:	2a00      	cmp	r2, #0
 8013f4e:	d005      	beq.n	8013f5c <HAL_ADC_Init+0xf0>
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8013f50:	26e0      	movs	r6, #224	; 0xe0
 8013f52:	0076      	lsls	r6, r6, #1
 8013f54:	4032      	ands	r2, r6
 8013f56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013f58:	4332      	orrs	r2, r6
 8013f5a:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 8013f5c:	273c      	movs	r7, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8013f5e:	68ea      	ldr	r2, [r5, #12]
 8013f60:	4e4f      	ldr	r6, [pc, #316]	; (80140a0 <HAL_ADC_Init+0x234>)
 8013f62:	4032      	ands	r2, r6
 8013f64:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8013f66:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8013f68:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8013f6a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8013f6c:	5de7      	ldrb	r7, [r4, r7]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8013f6e:	0fb3      	lsrs	r3, r6, #30
 8013f70:	079b      	lsls	r3, r3, #30
 8013f72:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8013f74:	46bc      	mov	ip, r7
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8013f76:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8013f78:	2f01      	cmp	r7, #1
 8013f7a:	d109      	bne.n	8013f90 <HAL_ADC_Init+0x124>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8013f7c:	6c67      	ldr	r7, [r4, #68]	; 0x44
 8013f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f80:	433b      	orrs	r3, r7
 8013f82:	431a      	orrs	r2, r3
 8013f84:	4653      	mov	r3, sl
 8013f86:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8013f88:	433a      	orrs	r2, r7
 8013f8a:	431a      	orrs	r2, r3
 8013f8c:	4663      	mov	r3, ip
 8013f8e:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 8013f90:	692b      	ldr	r3, [r5, #16]
 8013f92:	4f44      	ldr	r7, [pc, #272]	; (80140a4 <HAL_ADC_Init+0x238>)
 8013f94:	403b      	ands	r3, r7
 8013f96:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8013f98:	2280      	movs	r2, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8013f9a:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8013f9c:	0073      	lsls	r3, r6, #1
 8013f9e:	085b      	lsrs	r3, r3, #1
 8013fa0:	05d2      	lsls	r2, r2, #23
 8013fa2:	4293      	cmp	r3, r2
 8013fa4:	d021      	beq.n	8013fea <HAL_ADC_Init+0x17e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8013fa6:	2380      	movs	r3, #128	; 0x80
 8013fa8:	061b      	lsls	r3, r3, #24
 8013faa:	429e      	cmp	r6, r3
 8013fac:	d01d      	beq.n	8013fea <HAL_ADC_Init+0x17e>
        MODIFY_REG(ADC1_COMMON->CCR,
 8013fae:	4a3e      	ldr	r2, [pc, #248]	; (80140a8 <HAL_ADC_Init+0x23c>)
 8013fb0:	4f3e      	ldr	r7, [pc, #248]	; (80140ac <HAL_ADC_Init+0x240>)
 8013fb2:	6813      	ldr	r3, [r2, #0]
 8013fb4:	403b      	ands	r3, r7
 8013fb6:	27f0      	movs	r7, #240	; 0xf0
 8013fb8:	03bf      	lsls	r7, r7, #14
 8013fba:	403e      	ands	r6, r7
 8013fbc:	4333      	orrs	r3, r6
 8013fbe:	6013      	str	r3, [r2, #0]
 8013fc0:	e013      	b.n	8013fea <HAL_ADC_Init+0x17e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013fc2:	2210      	movs	r2, #16
 8013fc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8013fc6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013fc8:	4313      	orrs	r3, r2
 8013fca:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013fcc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8013fce:	3a0f      	subs	r2, #15
 8013fd0:	4313      	orrs	r3, r2
 8013fd2:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8013fd4:	68ab      	ldr	r3, [r5, #8]
 8013fd6:	075b      	lsls	r3, r3, #29
 8013fd8:	d587      	bpl.n	8013eea <HAL_ADC_Init+0x7e>
 8013fda:	e77a      	b.n	8013ed2 <HAL_ADC_Init+0x66>
    HAL_ADC_MspInit(hadc);
 8013fdc:	f7ff fbe2 	bl	80137a4 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8013fe0:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8013fe2:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8013fe4:	54e5      	strb	r5, [r4, r3]
 8013fe6:	e750      	b.n	8013e8a <HAL_ADC_Init+0x1e>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8013fe8:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(ADCx->SMPR,
 8013fea:	2607      	movs	r6, #7
 8013fec:	2770      	movs	r7, #112	; 0x70
 8013fee:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8013ff0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8013ff2:	43b3      	bics	r3, r6
 8013ff4:	4313      	orrs	r3, r2
 8013ff6:	616b      	str	r3, [r5, #20]
 8013ff8:	696e      	ldr	r6, [r5, #20]
 8013ffa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013ffc:	43be      	bics	r6, r7
 8013ffe:	011b      	lsls	r3, r3, #4
 8014000:	4333      	orrs	r3, r6
 8014002:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8014004:	2900      	cmp	r1, #0
 8014006:	d117      	bne.n	8014038 <HAL_ADC_Init+0x1cc>
      SET_BIT(hadc->Instance->CHSELR,
 8014008:	2310      	movs	r3, #16
 801400a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 801400c:	425b      	negs	r3, r3
 801400e:	430b      	orrs	r3, r1
 8014010:	62ab      	str	r3, [r5, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8014012:	2307      	movs	r3, #7
 8014014:	6969      	ldr	r1, [r5, #20]
 8014016:	400b      	ands	r3, r1
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8014018:	429a      	cmp	r2, r3
 801401a:	d01e      	beq.n	801405a <HAL_ADC_Init+0x1ee>
      ADC_STATE_CLR_SET(hadc->State,
 801401c:	2212      	movs	r2, #18
 801401e:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8014020:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8014022:	4393      	bics	r3, r2
 8014024:	3a02      	subs	r2, #2
 8014026:	4313      	orrs	r3, r2
 8014028:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801402a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801402c:	3a0f      	subs	r2, #15
 801402e:	4313      	orrs	r3, r2
 8014030:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8014032:	e754      	b.n	8013ede <HAL_ADC_Init+0x72>
    return HAL_ERROR;
 8014034:	2001      	movs	r0, #1
 8014036:	e752      	b.n	8013ede <HAL_ADC_Init+0x72>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8014038:	2380      	movs	r3, #128	; 0x80
 801403a:	039b      	lsls	r3, r3, #14
 801403c:	4299      	cmp	r1, r3
 801403e:	d1e8      	bne.n	8014012 <HAL_ADC_Init+0x1a6>
      MODIFY_REG(hadc->Instance->CHSELR,
 8014040:	211c      	movs	r1, #28
 8014042:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8014044:	69e3      	ldr	r3, [r4, #28]
 8014046:	3b01      	subs	r3, #1
 8014048:	009b      	lsls	r3, r3, #2
 801404a:	4019      	ands	r1, r3
 801404c:	2310      	movs	r3, #16
 801404e:	425b      	negs	r3, r3
 8014050:	408b      	lsls	r3, r1
 8014052:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014054:	430b      	orrs	r3, r1
 8014056:	62ab      	str	r3, [r5, #40]	; 0x28
 8014058:	e7db      	b.n	8014012 <HAL_ADC_Init+0x1a6>
      ADC_CLEAR_ERRORCODE(hadc);
 801405a:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 801405c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 801405e:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8014060:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014062:	4393      	bics	r3, r2
 8014064:	3a02      	subs	r2, #2
 8014066:	4313      	orrs	r3, r2
 8014068:	65a3      	str	r3, [r4, #88]	; 0x58
 801406a:	e738      	b.n	8013ede <HAL_ADC_Init+0x72>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 801406c:	004b      	lsls	r3, r1, #1
 801406e:	085b      	lsrs	r3, r3, #1
 8014070:	469c      	mov	ip, r3
 8014072:	e75e      	b.n	8013f32 <HAL_ADC_Init+0xc6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8014074:	2e00      	cmp	r6, #0
 8014076:	d103      	bne.n	8014080 <HAL_ADC_Init+0x214>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8014078:	2280      	movs	r2, #128	; 0x80
 801407a:	0252      	lsls	r2, r2, #9
 801407c:	4313      	orrs	r3, r2
 801407e:	e764      	b.n	8013f4a <HAL_ADC_Init+0xde>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014080:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8014082:	433e      	orrs	r6, r7
 8014084:	65a6      	str	r6, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014086:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8014088:	4332      	orrs	r2, r6
 801408a:	65e2      	str	r2, [r4, #92]	; 0x5c
 801408c:	e75d      	b.n	8013f4a <HAL_ADC_Init+0xde>
 801408e:	46c0      	nop			; (mov r8, r8)
 8014090:	6fffffe8 	.word	0x6fffffe8
 8014094:	200000e4 	.word	0x200000e4
 8014098:	00030d40 	.word	0x00030d40
 801409c:	fffffefd 	.word	0xfffffefd
 80140a0:	fffe0201 	.word	0xfffe0201
 80140a4:	1ffffc02 	.word	0x1ffffc02
 80140a8:	40012708 	.word	0x40012708
 80140ac:	ffc3ffff 	.word	0xffc3ffff

080140b0 <HAL_ADC_ConvCpltCallback>:
 80140b0:	4770      	bx	lr
 80140b2:	46c0      	nop			; (mov r8, r8)

080140b4 <HAL_ADC_ConvHalfCpltCallback>:
 80140b4:	4770      	bx	lr
 80140b6:	46c0      	nop			; (mov r8, r8)

080140b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80140b8:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80140ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80140bc:	f7ff fffa 	bl	80140b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80140c0:	bd10      	pop	{r4, pc}
 80140c2:	46c0      	nop			; (mov r8, r8)

080140c4 <HAL_ADC_ErrorCallback>:
 80140c4:	4770      	bx	lr
 80140c6:	46c0      	nop			; (mov r8, r8)

080140c8 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80140c8:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80140ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80140cc:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80140ce:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80140d0:	4313      	orrs	r3, r2
 80140d2:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80140d4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80140d6:	3a3c      	subs	r2, #60	; 0x3c
 80140d8:	4313      	orrs	r3, r2
 80140da:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80140dc:	f7ff fff2 	bl	80140c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80140e0:	bd10      	pop	{r4, pc}
 80140e2:	46c0      	nop			; (mov r8, r8)

080140e4 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80140e4:	2150      	movs	r1, #80	; 0x50
{
 80140e6:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80140e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80140ea:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80140ec:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80140ee:	4211      	tst	r1, r2
 80140f0:	d10d      	bne.n	801410e <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80140f2:	2380      	movs	r3, #128	; 0x80
 80140f4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80140f6:	009b      	lsls	r3, r3, #2
 80140f8:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80140fa:	22c0      	movs	r2, #192	; 0xc0
 80140fc:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80140fe:	6803      	ldr	r3, [r0, #0]
 8014100:	0112      	lsls	r2, r2, #4
 8014102:	68d9      	ldr	r1, [r3, #12]
 8014104:	4211      	tst	r1, r2
 8014106:	d00a      	beq.n	801411e <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8014108:	f7ff ffd2 	bl	80140b0 <HAL_ADC_ConvCpltCallback>
}
 801410c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801410e:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8014110:	06d2      	lsls	r2, r2, #27
 8014112:	d416      	bmi.n	8014142 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8014114:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8014116:	0018      	movs	r0, r3
 8014118:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801411a:	4790      	blx	r2
}
 801411c:	e7f6      	b.n	801410c <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 801411e:	7e82      	ldrb	r2, [r0, #26]
 8014120:	2a00      	cmp	r2, #0
 8014122:	d1f1      	bne.n	8014108 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	0712      	lsls	r2, r2, #28
 8014128:	d5ee      	bpl.n	8014108 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801412a:	689a      	ldr	r2, [r3, #8]
 801412c:	0752      	lsls	r2, r2, #29
 801412e:	d50b      	bpl.n	8014148 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014130:	2220      	movs	r2, #32
 8014132:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8014134:	4313      	orrs	r3, r2
 8014136:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014138:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 801413a:	3a1f      	subs	r2, #31
 801413c:	4313      	orrs	r3, r2
 801413e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8014140:	e7e2      	b.n	8014108 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 8014142:	f7ff ffbf 	bl	80140c4 <HAL_ADC_ErrorCallback>
 8014146:	e7e1      	b.n	801410c <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8014148:	210c      	movs	r1, #12
 801414a:	685a      	ldr	r2, [r3, #4]
 801414c:	438a      	bics	r2, r1
 801414e:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8014150:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8014152:	4a03      	ldr	r2, [pc, #12]	; (8014160 <ADC_DMAConvCplt+0x7c>)
 8014154:	4013      	ands	r3, r2
 8014156:	3204      	adds	r2, #4
 8014158:	32ff      	adds	r2, #255	; 0xff
 801415a:	4313      	orrs	r3, r2
 801415c:	6583      	str	r3, [r0, #88]	; 0x58
 801415e:	e7d3      	b.n	8014108 <ADC_DMAConvCplt+0x24>
 8014160:	fffffefe 	.word	0xfffffefe

08014164 <HAL_ADC_ConfigChannel>:
{
 8014164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014166:	4645      	mov	r5, r8
 8014168:	46de      	mov	lr, fp
 801416a:	4657      	mov	r7, sl
 801416c:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 801416e:	2300      	movs	r3, #0
{
 8014170:	b5e0      	push	{r5, r6, r7, lr}
 8014172:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8014174:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8014176:	3354      	adds	r3, #84	; 0x54
 8014178:	5cc2      	ldrb	r2, [r0, r3]
{
 801417a:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 801417c:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 801417e:	2a01      	cmp	r2, #1
 8014180:	d100      	bne.n	8014184 <HAL_ADC_ConfigChannel+0x20>
 8014182:	e091      	b.n	80142a8 <HAL_ADC_ConfigChannel+0x144>
 8014184:	2001      	movs	r0, #1
 8014186:	2204      	movs	r2, #4
 8014188:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801418a:	6823      	ldr	r3, [r4, #0]
 801418c:	689e      	ldr	r6, [r3, #8]
 801418e:	4232      	tst	r2, r6
 8014190:	d00d      	beq.n	80141ae <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014194:	321c      	adds	r2, #28
 8014196:	4313      	orrs	r3, r2
 8014198:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 801419a:	2354      	movs	r3, #84	; 0x54
 801419c:	2200      	movs	r2, #0
 801419e:	54e2      	strb	r2, [r4, r3]
}
 80141a0:	b005      	add	sp, #20
 80141a2:	bcf0      	pop	{r4, r5, r6, r7}
 80141a4:	46bb      	mov	fp, r7
 80141a6:	46b2      	mov	sl, r6
 80141a8:	46a9      	mov	r9, r5
 80141aa:	46a0      	mov	r8, r4
 80141ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80141ae:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80141b0:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 80141b2:	2e02      	cmp	r6, #2
 80141b4:	d05c      	beq.n	8014270 <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80141b6:	2780      	movs	r7, #128	; 0x80
 80141b8:	063f      	lsls	r7, r7, #24
 80141ba:	42bd      	cmp	r5, r7
 80141bc:	d051      	beq.n	8014262 <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80141be:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80141c0:	270f      	movs	r7, #15
 80141c2:	46aa      	mov	sl, r5
 80141c4:	251f      	movs	r5, #31
 80141c6:	46ac      	mov	ip, r5
 80141c8:	4035      	ands	r5, r6
 80141ca:	40af      	lsls	r7, r5
 80141cc:	46a9      	mov	r9, r5
 80141ce:	43fd      	mvns	r5, r7
 80141d0:	9500      	str	r5, [sp, #0]
 80141d2:	4655      	mov	r5, sl
 80141d4:	43bd      	bics	r5, r7
 80141d6:	46a8      	mov	r8, r5
 80141d8:	680d      	ldr	r5, [r1, #0]
 80141da:	9701      	str	r7, [sp, #4]
 80141dc:	036f      	lsls	r7, r5, #13
 80141de:	d16c      	bne.n	80142ba <HAL_ADC_ConfigChannel+0x156>
 80141e0:	4660      	mov	r0, ip
 80141e2:	0eaa      	lsrs	r2, r5, #26
 80141e4:	4010      	ands	r0, r2
 80141e6:	0002      	movs	r2, r0
 80141e8:	4648      	mov	r0, r9
 80141ea:	4082      	lsls	r2, r0
 80141ec:	4640      	mov	r0, r8
 80141ee:	4310      	orrs	r0, r2
 80141f0:	4680      	mov	r8, r0
 80141f2:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80141f4:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80141f6:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80141f8:	69e2      	ldr	r2, [r4, #28]
 80141fa:	3601      	adds	r6, #1
 80141fc:	4296      	cmp	r6, r2
 80141fe:	d808      	bhi.n	8014212 <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 8014200:	464e      	mov	r6, r9
 8014202:	00aa      	lsls	r2, r5, #2
 8014204:	0f12      	lsrs	r2, r2, #28
 8014206:	40b2      	lsls	r2, r6
 8014208:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801420a:	9e00      	ldr	r6, [sp, #0]
 801420c:	4030      	ands	r0, r6
 801420e:	4302      	orrs	r2, r0
 8014210:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8014212:	0228      	lsls	r0, r5, #8
 8014214:	688a      	ldr	r2, [r1, #8]
 8014216:	0001      	movs	r1, r0
 8014218:	695e      	ldr	r6, [r3, #20]
 801421a:	4002      	ands	r2, r0
 801421c:	4866      	ldr	r0, [pc, #408]	; (80143b8 <HAL_ADC_ConfigChannel+0x254>)
 801421e:	438e      	bics	r6, r1
 8014220:	4002      	ands	r2, r0
 8014222:	4332      	orrs	r2, r6
 8014224:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8014226:	2d00      	cmp	r5, #0
 8014228:	db01      	blt.n	801422e <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801422a:	2000      	movs	r0, #0
}
 801422c:	e7b5      	b.n	801419a <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801422e:	21e0      	movs	r1, #224	; 0xe0
 8014230:	4862      	ldr	r0, [pc, #392]	; (80143bc <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8014232:	4a63      	ldr	r2, [pc, #396]	; (80143c0 <HAL_ADC_ConfigChannel+0x25c>)
 8014234:	6803      	ldr	r3, [r0, #0]
 8014236:	0449      	lsls	r1, r1, #17
 8014238:	4019      	ands	r1, r3
 801423a:	4295      	cmp	r5, r2
 801423c:	d051      	beq.n	80142e2 <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 801423e:	4a61      	ldr	r2, [pc, #388]	; (80143c4 <HAL_ADC_ConfigChannel+0x260>)
 8014240:	4295      	cmp	r5, r2
 8014242:	d045      	beq.n	80142d0 <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8014244:	4a60      	ldr	r2, [pc, #384]	; (80143c8 <HAL_ADC_ConfigChannel+0x264>)
 8014246:	4295      	cmp	r5, r2
 8014248:	d1ef      	bne.n	801422a <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801424a:	2280      	movs	r2, #128	; 0x80
 801424c:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 801424e:	4213      	tst	r3, r2
 8014250:	d1eb      	bne.n	801422a <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8014252:	6803      	ldr	r3, [r0, #0]
 8014254:	4d5d      	ldr	r5, [pc, #372]	; (80143cc <HAL_ADC_ConfigChannel+0x268>)
 8014256:	402b      	ands	r3, r5
 8014258:	430b      	orrs	r3, r1
 801425a:	431a      	orrs	r2, r3
 801425c:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801425e:	2000      	movs	r0, #0
}
 8014260:	e79b      	b.n	801419a <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8014262:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8014264:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8014266:	036a      	lsls	r2, r5, #13
 8014268:	0b52      	lsrs	r2, r2, #13
 801426a:	4302      	orrs	r2, r0
 801426c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801426e:	e7d0      	b.n	8014212 <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8014270:	2280      	movs	r2, #128	; 0x80
 8014272:	0612      	lsls	r2, r2, #24
 8014274:	4295      	cmp	r5, r2
 8014276:	d019      	beq.n	80142ac <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8014278:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 801427a:	2a00      	cmp	r2, #0
 801427c:	dad5      	bge.n	801422a <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 801427e:	494f      	ldr	r1, [pc, #316]	; (80143bc <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8014280:	484f      	ldr	r0, [pc, #316]	; (80143c0 <HAL_ADC_ConfigChannel+0x25c>)
 8014282:	680b      	ldr	r3, [r1, #0]
 8014284:	4282      	cmp	r2, r0
 8014286:	d029      	beq.n	80142dc <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8014288:	484e      	ldr	r0, [pc, #312]	; (80143c4 <HAL_ADC_ConfigChannel+0x260>)
 801428a:	4282      	cmp	r2, r0
 801428c:	d04c      	beq.n	8014328 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 801428e:	484e      	ldr	r0, [pc, #312]	; (80143c8 <HAL_ADC_ConfigChannel+0x264>)
 8014290:	4282      	cmp	r2, r0
 8014292:	d1ca      	bne.n	801422a <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014294:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8014296:	680a      	ldr	r2, [r1, #0]
 8014298:	0440      	lsls	r0, r0, #17
 801429a:	4003      	ands	r3, r0
 801429c:	484b      	ldr	r0, [pc, #300]	; (80143cc <HAL_ADC_ConfigChannel+0x268>)
 801429e:	4002      	ands	r2, r0
 80142a0:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80142a2:	2000      	movs	r0, #0
 80142a4:	600b      	str	r3, [r1, #0]
 80142a6:	e778      	b.n	801419a <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 80142a8:	2002      	movs	r0, #2
 80142aa:	e779      	b.n	80141a0 <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80142ac:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80142ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80142b0:	0350      	lsls	r0, r2, #13
 80142b2:	0b40      	lsrs	r0, r0, #13
 80142b4:	4381      	bics	r1, r0
 80142b6:	6299      	str	r1, [r3, #40]	; 0x28
}
 80142b8:	e7df      	b.n	801427a <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80142ba:	4228      	tst	r0, r5
 80142bc:	d199      	bne.n	80141f2 <HAL_ADC_ConfigChannel+0x8e>
 80142be:	2702      	movs	r7, #2
 80142c0:	422f      	tst	r7, r5
 80142c2:	d02d      	beq.n	8014320 <HAL_ADC_ConfigChannel+0x1bc>
 80142c4:	464a      	mov	r2, r9
 80142c6:	4090      	lsls	r0, r2
 80142c8:	4642      	mov	r2, r8
 80142ca:	4302      	orrs	r2, r0
 80142cc:	4690      	mov	r8, r2
 80142ce:	e790      	b.n	80141f2 <HAL_ADC_ConfigChannel+0x8e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80142d0:	2280      	movs	r2, #128	; 0x80
 80142d2:	0452      	lsls	r2, r2, #17
 80142d4:	4213      	tst	r3, r2
 80142d6:	d0bc      	beq.n	8014252 <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80142d8:	2000      	movs	r0, #0
 80142da:	e75e      	b.n	801419a <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80142dc:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80142de:	680a      	ldr	r2, [r1, #0]
 80142e0:	e7da      	b.n	8014298 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80142e2:	2280      	movs	r2, #128	; 0x80
 80142e4:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80142e6:	4213      	tst	r3, r2
 80142e8:	d19f      	bne.n	801422a <HAL_ADC_ConfigChannel+0xc6>
 80142ea:	6803      	ldr	r3, [r0, #0]
 80142ec:	4d37      	ldr	r5, [pc, #220]	; (80143cc <HAL_ADC_ConfigChannel+0x268>)
 80142ee:	402b      	ands	r3, r5
 80142f0:	430b      	orrs	r3, r1
 80142f2:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80142f4:	4b36      	ldr	r3, [pc, #216]	; (80143d0 <HAL_ADC_ConfigChannel+0x26c>)
 80142f6:	6002      	str	r2, [r0, #0]
 80142f8:	6818      	ldr	r0, [r3, #0]
 80142fa:	4936      	ldr	r1, [pc, #216]	; (80143d4 <HAL_ADC_ConfigChannel+0x270>)
 80142fc:	f7f8 fb1c 	bl	800c938 <__udivsi3>
 8014300:	3001      	adds	r0, #1
 8014302:	0043      	lsls	r3, r0, #1
 8014304:	181b      	adds	r3, r3, r0
 8014306:	009b      	lsls	r3, r3, #2
 8014308:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 801430a:	9b03      	ldr	r3, [sp, #12]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d08c      	beq.n	801422a <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 8014310:	9b03      	ldr	r3, [sp, #12]
 8014312:	3b01      	subs	r3, #1
 8014314:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8014316:	9b03      	ldr	r3, [sp, #12]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1f9      	bne.n	8014310 <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801431c:	2000      	movs	r0, #0
 801431e:	e73c      	b.n	801419a <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8014320:	422a      	tst	r2, r5
 8014322:	d005      	beq.n	8014330 <HAL_ADC_ConfigChannel+0x1cc>
 8014324:	003a      	movs	r2, r7
 8014326:	e75f      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014328:	20c0      	movs	r0, #192	; 0xc0
 801432a:	680a      	ldr	r2, [r1, #0]
 801432c:	0400      	lsls	r0, r0, #16
 801432e:	e7b4      	b.n	801429a <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8014330:	072a      	lsls	r2, r5, #28
 8014332:	d501      	bpl.n	8014338 <HAL_ADC_ConfigChannel+0x1d4>
 8014334:	2203      	movs	r2, #3
 8014336:	e757      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014338:	06ea      	lsls	r2, r5, #27
 801433a:	d501      	bpl.n	8014340 <HAL_ADC_ConfigChannel+0x1dc>
 801433c:	2204      	movs	r2, #4
 801433e:	e753      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014340:	06aa      	lsls	r2, r5, #26
 8014342:	d501      	bpl.n	8014348 <HAL_ADC_ConfigChannel+0x1e4>
 8014344:	2205      	movs	r2, #5
 8014346:	e74f      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014348:	066a      	lsls	r2, r5, #25
 801434a:	d501      	bpl.n	8014350 <HAL_ADC_ConfigChannel+0x1ec>
 801434c:	2206      	movs	r2, #6
 801434e:	e74b      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014350:	062a      	lsls	r2, r5, #24
 8014352:	d501      	bpl.n	8014358 <HAL_ADC_ConfigChannel+0x1f4>
 8014354:	2207      	movs	r2, #7
 8014356:	e747      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014358:	05ea      	lsls	r2, r5, #23
 801435a:	d501      	bpl.n	8014360 <HAL_ADC_ConfigChannel+0x1fc>
 801435c:	2208      	movs	r2, #8
 801435e:	e743      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014360:	05aa      	lsls	r2, r5, #22
 8014362:	d501      	bpl.n	8014368 <HAL_ADC_ConfigChannel+0x204>
 8014364:	2209      	movs	r2, #9
 8014366:	e73f      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014368:	056a      	lsls	r2, r5, #21
 801436a:	d501      	bpl.n	8014370 <HAL_ADC_ConfigChannel+0x20c>
 801436c:	220a      	movs	r2, #10
 801436e:	e73b      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014370:	052a      	lsls	r2, r5, #20
 8014372:	d501      	bpl.n	8014378 <HAL_ADC_ConfigChannel+0x214>
 8014374:	220b      	movs	r2, #11
 8014376:	e737      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014378:	04ea      	lsls	r2, r5, #19
 801437a:	d501      	bpl.n	8014380 <HAL_ADC_ConfigChannel+0x21c>
 801437c:	220c      	movs	r2, #12
 801437e:	e733      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014380:	04aa      	lsls	r2, r5, #18
 8014382:	d501      	bpl.n	8014388 <HAL_ADC_ConfigChannel+0x224>
 8014384:	220d      	movs	r2, #13
 8014386:	e72f      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014388:	046a      	lsls	r2, r5, #17
 801438a:	d501      	bpl.n	8014390 <HAL_ADC_ConfigChannel+0x22c>
 801438c:	220e      	movs	r2, #14
 801438e:	e72b      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 8014390:	042a      	lsls	r2, r5, #16
 8014392:	d504      	bpl.n	801439e <HAL_ADC_ConfigChannel+0x23a>
 8014394:	4652      	mov	r2, sl
 8014396:	9801      	ldr	r0, [sp, #4]
 8014398:	4302      	orrs	r2, r0
 801439a:	4690      	mov	r8, r2
 801439c:	e729      	b.n	80141f2 <HAL_ADC_ConfigChannel+0x8e>
 801439e:	03ea      	lsls	r2, r5, #15
 80143a0:	d501      	bpl.n	80143a6 <HAL_ADC_ConfigChannel+0x242>
 80143a2:	2210      	movs	r2, #16
 80143a4:	e720      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 80143a6:	03aa      	lsls	r2, r5, #14
 80143a8:	d501      	bpl.n	80143ae <HAL_ADC_ConfigChannel+0x24a>
 80143aa:	2211      	movs	r2, #17
 80143ac:	e71c      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 80143ae:	036a      	lsls	r2, r5, #13
 80143b0:	d400      	bmi.n	80143b4 <HAL_ADC_ConfigChannel+0x250>
 80143b2:	e71e      	b.n	80141f2 <HAL_ADC_ConfigChannel+0x8e>
 80143b4:	2212      	movs	r2, #18
 80143b6:	e717      	b.n	80141e8 <HAL_ADC_ConfigChannel+0x84>
 80143b8:	07ffff00 	.word	0x07ffff00
 80143bc:	40012708 	.word	0x40012708
 80143c0:	b0001000 	.word	0xb0001000
 80143c4:	b8004000 	.word	0xb8004000
 80143c8:	b4002000 	.word	0xb4002000
 80143cc:	fe3fffff 	.word	0xfe3fffff
 80143d0:	200000e4 	.word	0x200000e4
 80143d4:	00030d40 	.word	0x00030d40

080143d8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 80143d8:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80143da:	2201      	movs	r2, #1
{
 80143dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143de:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80143e0:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80143e2:	6803      	ldr	r3, [r0, #0]
{
 80143e4:	0004      	movs	r4, r0
 80143e6:	6899      	ldr	r1, [r3, #8]
 80143e8:	420a      	tst	r2, r1
 80143ea:	d11f      	bne.n	801442c <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80143ec:	6898      	ldr	r0, [r3, #8]
 80143ee:	4928      	ldr	r1, [pc, #160]	; (8014490 <ADC_Enable+0xb8>)
 80143f0:	4208      	tst	r0, r1
 80143f2:	d11e      	bne.n	8014432 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 80143f4:	6899      	ldr	r1, [r3, #8]
 80143f6:	4827      	ldr	r0, [pc, #156]	; (8014494 <ADC_Enable+0xbc>)
 80143f8:	4001      	ands	r1, r0
 80143fa:	430a      	orrs	r2, r1
 80143fc:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80143fe:	4b26      	ldr	r3, [pc, #152]	; (8014498 <ADC_Enable+0xc0>)
 8014400:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8014402:	021b      	lsls	r3, r3, #8
 8014404:	d50f      	bpl.n	8014426 <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8014406:	4b25      	ldr	r3, [pc, #148]	; (801449c <ADC_Enable+0xc4>)
 8014408:	4925      	ldr	r1, [pc, #148]	; (80144a0 <ADC_Enable+0xc8>)
 801440a:	6818      	ldr	r0, [r3, #0]
 801440c:	f7f8 fa94 	bl	800c938 <__udivsi3>
 8014410:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8014412:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8014414:	9b01      	ldr	r3, [sp, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d005      	beq.n	8014426 <ADC_Enable+0x4e>
        wait_loop_index--;
 801441a:	9b01      	ldr	r3, [sp, #4]
 801441c:	3b01      	subs	r3, #1
 801441e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8014420:	9b01      	ldr	r3, [sp, #4]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d1f9      	bne.n	801441a <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8014426:	7e63      	ldrb	r3, [r4, #25]
 8014428:	2b01      	cmp	r3, #1
 801442a:	d10b      	bne.n	8014444 <ADC_Enable+0x6c>
  return HAL_OK;
 801442c:	2000      	movs	r0, #0
}
 801442e:	b003      	add	sp, #12
 8014430:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014432:	2110      	movs	r1, #16
 8014434:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8014436:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014438:	430b      	orrs	r3, r1
 801443a:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801443c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801443e:	4313      	orrs	r3, r2
 8014440:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8014442:	e7f4      	b.n	801442e <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 8014444:	f7ff fcee 	bl	8013e24 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014448:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 801444a:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801444c:	681a      	ldr	r2, [r3, #0]
 801444e:	07d2      	lsls	r2, r2, #31
 8014450:	d4ec      	bmi.n	801442c <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014452:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8014454:	4f0f      	ldr	r7, [pc, #60]	; (8014494 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8014456:	689a      	ldr	r2, [r3, #8]
 8014458:	4215      	tst	r5, r2
 801445a:	d103      	bne.n	8014464 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 801445c:	689a      	ldr	r2, [r3, #8]
 801445e:	403a      	ands	r2, r7
 8014460:	432a      	orrs	r2, r5
 8014462:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8014464:	f7ff fcde 	bl	8013e24 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014468:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801446a:	1b80      	subs	r0, r0, r6
 801446c:	2802      	cmp	r0, #2
 801446e:	d902      	bls.n	8014476 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	4215      	tst	r5, r2
 8014474:	d003      	beq.n	801447e <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	4215      	tst	r5, r2
 801447a:	d0ec      	beq.n	8014456 <ADC_Enable+0x7e>
 801447c:	e7d6      	b.n	801442c <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801447e:	2210      	movs	r2, #16
 8014480:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 8014482:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8014484:	4313      	orrs	r3, r2
 8014486:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8014488:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801448a:	432b      	orrs	r3, r5
 801448c:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 801448e:	e7ce      	b.n	801442e <ADC_Enable+0x56>
 8014490:	80000017 	.word	0x80000017
 8014494:	7fffffe8 	.word	0x7fffffe8
 8014498:	40012708 	.word	0x40012708
 801449c:	200000e4 	.word	0x200000e4
 80144a0:	00030d40 	.word	0x00030d40

080144a4 <HAL_ADC_Start_DMA>:
{
 80144a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144a6:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80144a8:	6805      	ldr	r5, [r0, #0]
{
 80144aa:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80144ac:	68ae      	ldr	r6, [r5, #8]
 80144ae:	4688      	mov	r8, r1
 80144b0:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 80144b2:	2002      	movs	r0, #2
{
 80144b4:	b500      	push	{lr}
 80144b6:	0776      	lsls	r6, r6, #29
 80144b8:	d414      	bmi.n	80144e4 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 80144ba:	2254      	movs	r2, #84	; 0x54
 80144bc:	5ca3      	ldrb	r3, [r4, r2]
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d010      	beq.n	80144e4 <HAL_ADC_Start_DMA+0x40>
 80144c2:	2301      	movs	r3, #1
 80144c4:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80144c6:	68ea      	ldr	r2, [r5, #12]
 80144c8:	4213      	tst	r3, r2
 80144ca:	d106      	bne.n	80144da <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80144cc:	68aa      	ldr	r2, [r5, #8]
 80144ce:	4213      	tst	r3, r2
 80144d0:	d131      	bne.n	8014536 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80144d2:	2201      	movs	r2, #1
 80144d4:	68eb      	ldr	r3, [r5, #12]
 80144d6:	4313      	orrs	r3, r2
 80144d8:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 80144da:	0020      	movs	r0, r4
 80144dc:	f7ff ff7c 	bl	80143d8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d002      	beq.n	80144ea <HAL_ADC_Start_DMA+0x46>
}
 80144e4:	bc80      	pop	{r7}
 80144e6:	46b8      	mov	r8, r7
 80144e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80144ea:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80144ec:	4b15      	ldr	r3, [pc, #84]	; (8014544 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80144ee:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80144f0:	401a      	ands	r2, r3
 80144f2:	2380      	movs	r3, #128	; 0x80
 80144f4:	005b      	lsls	r3, r3, #1
 80144f6:	4313      	orrs	r3, r2
 80144f8:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80144fa:	4b13      	ldr	r3, [pc, #76]	; (8014548 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 80144fc:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80144fe:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8014500:	4b12      	ldr	r3, [pc, #72]	; (801454c <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8014502:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8014504:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8014506:	4b12      	ldr	r3, [pc, #72]	; (8014550 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8014508:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801450a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801450c:	231c      	movs	r3, #28
 801450e:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 8014510:	3338      	adds	r3, #56	; 0x38
 8014512:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8014514:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8014516:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8014518:	4313      	orrs	r3, r2
 801451a:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801451c:	4642      	mov	r2, r8
 801451e:	003b      	movs	r3, r7
 8014520:	3140      	adds	r1, #64	; 0x40
 8014522:	f000 f8ef 	bl	8014704 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8014526:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8014528:	490a      	ldr	r1, [pc, #40]	; (8014554 <HAL_ADC_Start_DMA+0xb0>)
 801452a:	6893      	ldr	r3, [r2, #8]
 801452c:	400b      	ands	r3, r1
 801452e:	2104      	movs	r1, #4
 8014530:	430b      	orrs	r3, r1
 8014532:	6093      	str	r3, [r2, #8]
}
 8014534:	e7d6      	b.n	80144e4 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 8014536:	68ab      	ldr	r3, [r5, #8]
 8014538:	4a06      	ldr	r2, [pc, #24]	; (8014554 <HAL_ADC_Start_DMA+0xb0>)
 801453a:	4013      	ands	r3, r2
 801453c:	4303      	orrs	r3, r0
 801453e:	60ab      	str	r3, [r5, #8]
}
 8014540:	e7c7      	b.n	80144d2 <HAL_ADC_Start_DMA+0x2e>
 8014542:	46c0      	nop			; (mov r8, r8)
 8014544:	fffff0fe 	.word	0xfffff0fe
 8014548:	080140e5 	.word	0x080140e5
 801454c:	080140b9 	.word	0x080140b9
 8014550:	080140c9 	.word	0x080140c9
 8014554:	7fffffe8 	.word	0x7fffffe8

08014558 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014558:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 801455a:	2800      	cmp	r0, #0
 801455c:	db14      	blt.n	8014588 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801455e:	4b15      	ldr	r3, [pc, #84]	; (80145b4 <HAL_NVIC_SetPriority+0x5c>)
 8014560:	2203      	movs	r2, #3
 8014562:	469c      	mov	ip, r3
 8014564:	23ff      	movs	r3, #255	; 0xff
 8014566:	0884      	lsrs	r4, r0, #2
 8014568:	4002      	ands	r2, r0
 801456a:	0018      	movs	r0, r3
 801456c:	26c0      	movs	r6, #192	; 0xc0
 801456e:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8014570:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014572:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8014574:	400b      	ands	r3, r1
 8014576:	4093      	lsls	r3, r2
 8014578:	00a4      	lsls	r4, r4, #2
 801457a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801457c:	00b6      	lsls	r6, r6, #2
 801457e:	59a5      	ldr	r5, [r4, r6]
 8014580:	4385      	bics	r5, r0
 8014582:	432b      	orrs	r3, r5
 8014584:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8014586:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8014588:	4a0b      	ldr	r2, [pc, #44]	; (80145b8 <HAL_NVIC_SetPriority+0x60>)
 801458a:	230f      	movs	r3, #15
 801458c:	4694      	mov	ip, r2
 801458e:	2203      	movs	r2, #3
 8014590:	4003      	ands	r3, r0
 8014592:	4010      	ands	r0, r2
 8014594:	32fc      	adds	r2, #252	; 0xfc
 8014596:	0015      	movs	r5, r2
 8014598:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801459a:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801459c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801459e:	400a      	ands	r2, r1
 80145a0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80145a2:	3b08      	subs	r3, #8
 80145a4:	089b      	lsrs	r3, r3, #2
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	4463      	add	r3, ip
 80145aa:	69dc      	ldr	r4, [r3, #28]
 80145ac:	43ac      	bics	r4, r5
 80145ae:	4322      	orrs	r2, r4
 80145b0:	61da      	str	r2, [r3, #28]
 80145b2:	e7e8      	b.n	8014586 <HAL_NVIC_SetPriority+0x2e>
 80145b4:	e000e100 	.word	0xe000e100
 80145b8:	e000ed00 	.word	0xe000ed00

080145bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80145bc:	2800      	cmp	r0, #0
 80145be:	db05      	blt.n	80145cc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80145c0:	221f      	movs	r2, #31
 80145c2:	2301      	movs	r3, #1
 80145c4:	4002      	ands	r2, r0
 80145c6:	4093      	lsls	r3, r2
 80145c8:	4a01      	ldr	r2, [pc, #4]	; (80145d0 <HAL_NVIC_EnableIRQ+0x14>)
 80145ca:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80145cc:	4770      	bx	lr
 80145ce:	46c0      	nop			; (mov r8, r8)
 80145d0:	e000e100 	.word	0xe000e100

080145d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80145d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80145d6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80145d8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80145da:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80145dc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80145de:	2c00      	cmp	r4, #0
 80145e0:	d002      	beq.n	80145e8 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80145e2:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80145e4:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80145e6:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80145e8:	241c      	movs	r4, #28
 80145ea:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80145ec:	4e08      	ldr	r6, [pc, #32]	; (8014610 <DMA_SetConfig+0x3c>)
 80145ee:	4025      	ands	r5, r4
 80145f0:	3c1b      	subs	r4, #27
 80145f2:	40ac      	lsls	r4, r5
 80145f4:	6877      	ldr	r7, [r6, #4]
 80145f6:	433c      	orrs	r4, r7
 80145f8:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80145fa:	6804      	ldr	r4, [r0, #0]
 80145fc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80145fe:	6883      	ldr	r3, [r0, #8]
 8014600:	2b10      	cmp	r3, #16
 8014602:	d002      	beq.n	801460a <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8014604:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8014606:	60e2      	str	r2, [r4, #12]
  }
}
 8014608:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 801460a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 801460c:	60e1      	str	r1, [r4, #12]
 801460e:	e7fb      	b.n	8014608 <DMA_SetConfig+0x34>
 8014610:	40020000 	.word	0x40020000

08014614 <HAL_DMA_Init>:
{
 8014614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014616:	46c6      	mov	lr, r8
 8014618:	0004      	movs	r4, r0
 801461a:	b500      	push	{lr}
  if (hdma == NULL)
 801461c:	2800      	cmp	r0, #0
 801461e:	d062      	beq.n	80146e6 <HAL_DMA_Init+0xd2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8014620:	6805      	ldr	r5, [r0, #0]
 8014622:	4b32      	ldr	r3, [pc, #200]	; (80146ec <HAL_DMA_Init+0xd8>)
 8014624:	2114      	movs	r1, #20
 8014626:	18e8      	adds	r0, r5, r3
 8014628:	f7f8 f986 	bl	800c938 <__udivsi3>
 801462c:	0083      	lsls	r3, r0, #2
 801462e:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8014630:	2202      	movs	r2, #2
 8014632:	2325      	movs	r3, #37	; 0x25
 8014634:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8014636:	682b      	ldr	r3, [r5, #0]
 8014638:	4a2d      	ldr	r2, [pc, #180]	; (80146f0 <HAL_DMA_Init+0xdc>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 801463a:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 801463c:	4013      	ands	r3, r2
 801463e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8014640:	68e3      	ldr	r3, [r4, #12]
 8014642:	6921      	ldr	r1, [r4, #16]
 8014644:	4333      	orrs	r3, r6
 8014646:	430b      	orrs	r3, r1
 8014648:	6961      	ldr	r1, [r4, #20]
 801464a:	682a      	ldr	r2, [r5, #0]
 801464c:	430b      	orrs	r3, r1
 801464e:	69a1      	ldr	r1, [r4, #24]
 8014650:	430b      	orrs	r3, r1
 8014652:	69e1      	ldr	r1, [r4, #28]
 8014654:	430b      	orrs	r3, r1
 8014656:	6a21      	ldr	r1, [r4, #32]
 8014658:	430b      	orrs	r3, r1
 801465a:	4313      	orrs	r3, r2
 801465c:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801465e:	4b25      	ldr	r3, [pc, #148]	; (80146f4 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8014660:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8014662:	469c      	mov	ip, r3
 8014664:	4460      	add	r0, ip
 8014666:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8014668:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801466a:	4b23      	ldr	r3, [pc, #140]	; (80146f8 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801466c:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801466e:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8014670:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8014672:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8014674:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8014676:	f7f8 f95f 	bl	800c938 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801467a:	231f      	movs	r3, #31
 801467c:	2201      	movs	r2, #1
 801467e:	4003      	ands	r3, r0
 8014680:	0010      	movs	r0, r2
 8014682:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8014684:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8014686:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8014688:	01db      	lsls	r3, r3, #7
 801468a:	429e      	cmp	r6, r3
 801468c:	d021      	beq.n	80146d2 <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801468e:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014690:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8014692:	6861      	ldr	r1, [r4, #4]
 8014694:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8014696:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8014698:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801469a:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801469c:	2903      	cmp	r1, #3
 801469e:	d81d      	bhi.n	80146dc <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80146a0:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80146a2:	4916      	ldr	r1, [pc, #88]	; (80146fc <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80146a4:	4d16      	ldr	r5, [pc, #88]	; (8014700 <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80146a6:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80146a8:	3b01      	subs	r3, #1
 80146aa:	4003      	ands	r3, r0
 80146ac:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80146ae:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80146b0:	0089      	lsls	r1, r1, #2
 80146b2:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80146b4:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80146b6:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80146b8:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80146ba:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80146bc:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80146be:	2225      	movs	r2, #37	; 0x25
 80146c0:	2101      	movs	r1, #1
  return HAL_OK;
 80146c2:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80146c4:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80146c6:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80146c8:	3a01      	subs	r2, #1
 80146ca:	54a3      	strb	r3, [r4, r2]
}
 80146cc:	bc80      	pop	{r7}
 80146ce:	46b8      	mov	r8, r7
 80146d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80146d2:	2300      	movs	r3, #0
 80146d4:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80146d6:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80146d8:	4643      	mov	r3, r8
 80146da:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80146dc:	2300      	movs	r3, #0
 80146de:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80146e0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80146e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80146e4:	e7ea      	b.n	80146bc <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 80146e6:	2001      	movs	r0, #1
 80146e8:	e7f0      	b.n	80146cc <HAL_DMA_Init+0xb8>
 80146ea:	46c0      	nop			; (mov r8, r8)
 80146ec:	bffdfff8 	.word	0xbffdfff8
 80146f0:	ffff800f 	.word	0xffff800f
 80146f4:	10008200 	.word	0x10008200
 80146f8:	40020880 	.word	0x40020880
 80146fc:	1000823f 	.word	0x1000823f
 8014700:	40020940 	.word	0x40020940

08014704 <HAL_DMA_Start_IT>:
{
 8014704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014706:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8014708:	2024      	movs	r0, #36	; 0x24
 801470a:	5c25      	ldrb	r5, [r4, r0]
 801470c:	2d01      	cmp	r5, #1
 801470e:	d035      	beq.n	801477c <HAL_DMA_Start_IT+0x78>
 8014710:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8014712:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 8014714:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8014716:	5da5      	ldrb	r5, [r4, r6]
 8014718:	b2ef      	uxtb	r7, r5
 801471a:	2d01      	cmp	r5, #1
 801471c:	d005      	beq.n	801472a <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801471e:	2380      	movs	r3, #128	; 0x80
 8014720:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8014722:	2300      	movs	r3, #0
 8014724:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 8014726:	2001      	movs	r0, #1
}
 8014728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 801472a:	3822      	subs	r0, #34	; 0x22
 801472c:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801472e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8014730:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8014732:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8014734:	6828      	ldr	r0, [r5, #0]
 8014736:	43b8      	bics	r0, r7
 8014738:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801473a:	0020      	movs	r0, r4
 801473c:	f7ff ff4a 	bl	80145d4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8014740:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014742:	2b00      	cmp	r3, #0
 8014744:	d01c      	beq.n	8014780 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014746:	220e      	movs	r2, #14
 8014748:	682b      	ldr	r3, [r5, #0]
 801474a:	4313      	orrs	r3, r2
 801474c:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801474e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8014750:	6813      	ldr	r3, [r2, #0]
 8014752:	03db      	lsls	r3, r3, #15
 8014754:	d504      	bpl.n	8014760 <HAL_DMA_Start_IT+0x5c>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8014756:	2380      	movs	r3, #128	; 0x80
 8014758:	6811      	ldr	r1, [r2, #0]
 801475a:	005b      	lsls	r3, r3, #1
 801475c:	430b      	orrs	r3, r1
 801475e:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8014760:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014762:	2b00      	cmp	r3, #0
 8014764:	d004      	beq.n	8014770 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8014766:	2280      	movs	r2, #128	; 0x80
 8014768:	6819      	ldr	r1, [r3, #0]
 801476a:	0052      	lsls	r2, r2, #1
 801476c:	430a      	orrs	r2, r1
 801476e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8014770:	2201      	movs	r2, #1
 8014772:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8014774:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8014776:	4313      	orrs	r3, r2
 8014778:	602b      	str	r3, [r5, #0]
 801477a:	e7d5      	b.n	8014728 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 801477c:	2002      	movs	r0, #2
 801477e:	e7d3      	b.n	8014728 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8014780:	2204      	movs	r2, #4
 8014782:	682b      	ldr	r3, [r5, #0]
 8014784:	4393      	bics	r3, r2
 8014786:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8014788:	682b      	ldr	r3, [r5, #0]
 801478a:	3206      	adds	r2, #6
 801478c:	4313      	orrs	r3, r2
 801478e:	602b      	str	r3, [r5, #0]
 8014790:	e7dd      	b.n	801474e <HAL_DMA_Start_IT+0x4a>
 8014792:	46c0      	nop			; (mov r8, r8)

08014794 <HAL_DMA_Abort>:
{
 8014794:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8014796:	2800      	cmp	r0, #0
 8014798:	d034      	beq.n	8014804 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 801479a:	2325      	movs	r3, #37	; 0x25
 801479c:	5cc3      	ldrb	r3, [r0, r3]
 801479e:	2b02      	cmp	r3, #2
 80147a0:	d129      	bne.n	80147f6 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80147a2:	210e      	movs	r1, #14
 80147a4:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80147a6:	4c18      	ldr	r4, [pc, #96]	; (8014808 <HAL_DMA_Abort+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80147a8:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80147aa:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80147ac:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80147ae:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80147b0:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80147b2:	680b      	ldr	r3, [r1, #0]
 80147b4:	4023      	ands	r3, r4
 80147b6:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80147b8:	2301      	movs	r3, #1
 80147ba:	6811      	ldr	r1, [r2, #0]
 80147bc:	4399      	bics	r1, r3
 80147be:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80147c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80147c2:	4912      	ldr	r1, [pc, #72]	; (801480c <HAL_DMA_Abort+0x78>)
 80147c4:	4032      	ands	r2, r6
 80147c6:	4093      	lsls	r3, r2
 80147c8:	684d      	ldr	r5, [r1, #4]
 80147ca:	432b      	orrs	r3, r5
 80147cc:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80147ce:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80147d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80147d2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80147d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d005      	beq.n	80147e6 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80147da:	681a      	ldr	r2, [r3, #0]
 80147dc:	4022      	ands	r2, r4
 80147de:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80147e0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80147e2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80147e4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80147e6:	2325      	movs	r3, #37	; 0x25
 80147e8:	2201      	movs	r2, #1
 80147ea:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80147ec:	2200      	movs	r2, #0
 80147ee:	3b01      	subs	r3, #1
 80147f0:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80147f2:	2000      	movs	r0, #0
}
 80147f4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80147f6:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80147f8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80147fa:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80147fc:	3320      	adds	r3, #32
 80147fe:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8014800:	2001      	movs	r0, #1
 8014802:	e7f7      	b.n	80147f4 <HAL_DMA_Abort+0x60>
    return HAL_ERROR;
 8014804:	2001      	movs	r0, #1
 8014806:	e7f5      	b.n	80147f4 <HAL_DMA_Abort+0x60>
 8014808:	fffffeff 	.word	0xfffffeff
 801480c:	40020000 	.word	0x40020000

08014810 <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8014810:	2325      	movs	r3, #37	; 0x25
{
 8014812:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8014814:	5cc3      	ldrb	r3, [r0, r3]
 8014816:	2b02      	cmp	r3, #2
 8014818:	d003      	beq.n	8014822 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801481a:	2304      	movs	r3, #4
 801481c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 801481e:	2001      	movs	r0, #1
}
 8014820:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014822:	210e      	movs	r1, #14
 8014824:	6802      	ldr	r2, [r0, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8014826:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014828:	6813      	ldr	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801482a:	4c16      	ldr	r4, [pc, #88]	; (8014884 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801482c:	438b      	bics	r3, r1
 801482e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8014830:	2301      	movs	r3, #1
 8014832:	6811      	ldr	r1, [r2, #0]
 8014834:	4399      	bics	r1, r3
 8014836:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8014838:	6c41      	ldr	r1, [r0, #68]	; 0x44
 801483a:	680a      	ldr	r2, [r1, #0]
 801483c:	4022      	ands	r2, r4
 801483e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8014840:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014842:	4911      	ldr	r1, [pc, #68]	; (8014888 <HAL_DMA_Abort_IT+0x78>)
 8014844:	4032      	ands	r2, r6
 8014846:	4093      	lsls	r3, r2
 8014848:	684d      	ldr	r5, [r1, #4]
 801484a:	432b      	orrs	r3, r5
 801484c:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801484e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8014850:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8014852:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8014854:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8014856:	2b00      	cmp	r3, #0
 8014858:	d005      	beq.n	8014866 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801485a:	681a      	ldr	r2, [r3, #0]
 801485c:	4022      	ands	r2, r4
 801485e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8014860:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014862:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8014864:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8014866:	2325      	movs	r3, #37	; 0x25
 8014868:	2201      	movs	r2, #1
 801486a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 801486c:	2200      	movs	r2, #0
 801486e:	3b01      	subs	r3, #1
 8014870:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8014872:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014874:	2b00      	cmp	r3, #0
 8014876:	d002      	beq.n	801487e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8014878:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 801487a:	2000      	movs	r0, #0
 801487c:	e7d0      	b.n	8014820 <HAL_DMA_Abort_IT+0x10>
 801487e:	2000      	movs	r0, #0
 8014880:	e7ce      	b.n	8014820 <HAL_DMA_Abort_IT+0x10>
 8014882:	46c0      	nop			; (mov r8, r8)
 8014884:	fffffeff 	.word	0xfffffeff
 8014888:	40020000 	.word	0x40020000

0801488c <HAL_DMA_IRQHandler>:
{
 801488c:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801488e:	211c      	movs	r1, #28
 8014890:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8014892:	4b2b      	ldr	r3, [pc, #172]	; (8014940 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8014894:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8014896:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8014898:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 801489a:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 801489c:	400b      	ands	r3, r1
 801489e:	0021      	movs	r1, r4
 80148a0:	4099      	lsls	r1, r3
 80148a2:	420a      	tst	r2, r1
 80148a4:	d010      	beq.n	80148c8 <HAL_DMA_IRQHandler+0x3c>
 80148a6:	422c      	tst	r4, r5
 80148a8:	d00e      	beq.n	80148c8 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80148aa:	6833      	ldr	r3, [r6, #0]
 80148ac:	069b      	lsls	r3, r3, #26
 80148ae:	d402      	bmi.n	80148b6 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80148b0:	6833      	ldr	r3, [r6, #0]
 80148b2:	43a3      	bics	r3, r4
 80148b4:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80148b6:	4b22      	ldr	r3, [pc, #136]	; (8014940 <HAL_DMA_IRQHandler+0xb4>)
 80148b8:	685a      	ldr	r2, [r3, #4]
 80148ba:	4311      	orrs	r1, r2
 80148bc:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80148be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d000      	beq.n	80148c6 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80148c4:	4798      	blx	r3
}
 80148c6:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80148c8:	2402      	movs	r4, #2
 80148ca:	0021      	movs	r1, r4
 80148cc:	4099      	lsls	r1, r3
 80148ce:	420a      	tst	r2, r1
 80148d0:	d017      	beq.n	8014902 <HAL_DMA_IRQHandler+0x76>
 80148d2:	422c      	tst	r4, r5
 80148d4:	d015      	beq.n	8014902 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80148d6:	6833      	ldr	r3, [r6, #0]
 80148d8:	069b      	lsls	r3, r3, #26
 80148da:	d406      	bmi.n	80148ea <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80148dc:	220a      	movs	r2, #10
 80148de:	6833      	ldr	r3, [r6, #0]
 80148e0:	4393      	bics	r3, r2
 80148e2:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80148e4:	2325      	movs	r3, #37	; 0x25
 80148e6:	3a09      	subs	r2, #9
 80148e8:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80148ea:	4b15      	ldr	r3, [pc, #84]	; (8014940 <HAL_DMA_IRQHandler+0xb4>)
 80148ec:	685a      	ldr	r2, [r3, #4]
 80148ee:	4311      	orrs	r1, r2
 80148f0:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80148f2:	2200      	movs	r2, #0
 80148f4:	2324      	movs	r3, #36	; 0x24
 80148f6:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80148f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d0e3      	beq.n	80148c6 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80148fe:	4798      	blx	r3
  return;
 8014900:	e7e1      	b.n	80148c6 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8014902:	2108      	movs	r1, #8
 8014904:	000c      	movs	r4, r1
 8014906:	409c      	lsls	r4, r3
 8014908:	4222      	tst	r2, r4
 801490a:	d0dc      	beq.n	80148c6 <HAL_DMA_IRQHandler+0x3a>
 801490c:	4229      	tst	r1, r5
 801490e:	d0da      	beq.n	80148c6 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8014910:	6832      	ldr	r2, [r6, #0]
 8014912:	3106      	adds	r1, #6
 8014914:	438a      	bics	r2, r1
 8014916:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8014918:	2201      	movs	r2, #1
 801491a:	0015      	movs	r5, r2
 801491c:	409d      	lsls	r5, r3
 801491e:	002b      	movs	r3, r5
 8014920:	4907      	ldr	r1, [pc, #28]	; (8014940 <HAL_DMA_IRQHandler+0xb4>)
 8014922:	684c      	ldr	r4, [r1, #4]
 8014924:	4323      	orrs	r3, r4
 8014926:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8014928:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801492a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 801492c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 801492e:	2200      	movs	r2, #0
 8014930:	3b01      	subs	r3, #1
 8014932:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8014934:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014936:	2b00      	cmp	r3, #0
 8014938:	d0c5      	beq.n	80148c6 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 801493a:	4798      	blx	r3
  return;
 801493c:	e7c3      	b.n	80148c6 <HAL_DMA_IRQHandler+0x3a>
 801493e:	46c0      	nop			; (mov r8, r8)
 8014940:	40020000 	.word	0x40020000

08014944 <HAL_DMAEx_MUX_IRQHandler>:
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8014944:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8014946:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8014948:	6819      	ldr	r1, [r3, #0]
{
 801494a:	b570      	push	{r4, r5, r6, lr}
 801494c:	0004      	movs	r4, r0
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 801494e:	420a      	tst	r2, r1
 8014950:	d00f      	beq.n	8014972 <HAL_DMAEx_MUX_IRQHandler+0x2e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8014952:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014954:	4d13      	ldr	r5, [pc, #76]	; (80149a4 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 8014956:	6801      	ldr	r1, [r0, #0]
 8014958:	4029      	ands	r1, r5
 801495a:	6001      	str	r1, [r0, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801495c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 801495e:	2380      	movs	r3, #128	; 0x80
 8014960:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014962:	009b      	lsls	r3, r3, #2
 8014964:	4313      	orrs	r3, r2
 8014966:	63e3      	str	r3, [r4, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8014968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801496a:	2b00      	cmp	r3, #0
 801496c:	d001      	beq.n	8014972 <HAL_DMAEx_MUX_IRQHandler+0x2e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801496e:	0020      	movs	r0, r4
 8014970:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8014972:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8014974:	2b00      	cmp	r3, #0
 8014976:	d013      	beq.n	80149a0 <HAL_DMAEx_MUX_IRQHandler+0x5c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8014978:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801497a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801497c:	6810      	ldr	r0, [r2, #0]
 801497e:	4201      	tst	r1, r0
 8014980:	d00e      	beq.n	80149a0 <HAL_DMAEx_MUX_IRQHandler+0x5c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8014982:	6818      	ldr	r0, [r3, #0]
 8014984:	4d07      	ldr	r5, [pc, #28]	; (80149a4 <HAL_DMAEx_MUX_IRQHandler+0x60>)
 8014986:	4028      	ands	r0, r5
 8014988:	6018      	str	r0, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 801498a:	2380      	movs	r3, #128	; 0x80
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801498c:	6051      	str	r1, [r2, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 801498e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8014990:	00db      	lsls	r3, r3, #3
 8014992:	4313      	orrs	r3, r2
 8014994:	63e3      	str	r3, [r4, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8014996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014998:	2b00      	cmp	r3, #0
 801499a:	d001      	beq.n	80149a0 <HAL_DMAEx_MUX_IRQHandler+0x5c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801499c:	0020      	movs	r0, r4
 801499e:	4798      	blx	r3
      }
    }
  }
}
 80149a0:	bd70      	pop	{r4, r5, r6, pc}
 80149a2:	46c0      	nop			; (mov r8, r8)
 80149a4:	fffffeff 	.word	0xfffffeff

080149a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80149a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149aa:	46de      	mov	lr, fp
 80149ac:	4657      	mov	r7, sl
 80149ae:	464e      	mov	r6, r9
 80149b0:	4645      	mov	r5, r8
 80149b2:	b5e0      	push	{r5, r6, r7, lr}
 80149b4:	468b      	mov	fp, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80149b6:	6809      	ldr	r1, [r1, #0]
 80149b8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80149ba:	2300      	movs	r3, #0
{
 80149bc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80149be:	2900      	cmp	r1, #0
 80149c0:	d07a      	beq.n	8014ab8 <HAL_GPIO_Init+0x110>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80149c2:	2601      	movs	r6, #1
 80149c4:	000c      	movs	r4, r1
 80149c6:	409e      	lsls	r6, r3
 80149c8:	4034      	ands	r4, r6
 80149ca:	46a2      	mov	sl, r4

    if (iocurrent != 0x00u)
 80149cc:	4231      	tst	r1, r6
 80149ce:	d06d      	beq.n	8014aac <HAL_GPIO_Init+0x104>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80149d0:	465c      	mov	r4, fp
 80149d2:	2503      	movs	r5, #3
 80149d4:	6864      	ldr	r4, [r4, #4]
 80149d6:	4025      	ands	r5, r4
 80149d8:	46ac      	mov	ip, r5
 80149da:	3d01      	subs	r5, #1
 80149dc:	2d01      	cmp	r5, #1
 80149de:	d800      	bhi.n	80149e2 <HAL_GPIO_Init+0x3a>
 80149e0:	e071      	b.n	8014ac6 <HAL_GPIO_Init+0x11e>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80149e2:	4665      	mov	r5, ip
 80149e4:	2d03      	cmp	r5, #3
 80149e6:	d000      	beq.n	80149ea <HAL_GPIO_Init+0x42>
 80149e8:	e0b4      	b.n	8014b54 <HAL_GPIO_Init+0x1ac>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80149ea:	4666      	mov	r6, ip
 80149ec:	4096      	lsls	r6, r2
 80149ee:	43f5      	mvns	r5, r6
 80149f0:	9500      	str	r5, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80149f2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80149f4:	9d00      	ldr	r5, [sp, #0]
 80149f6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80149f8:	432e      	orrs	r6, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80149fa:	25c0      	movs	r5, #192	; 0xc0
 80149fc:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 80149fe:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8014a00:	422c      	tst	r4, r5
 8014a02:	d053      	beq.n	8014aac <HAL_GPIO_Init+0x104>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8014a04:	4e67      	ldr	r6, [pc, #412]	; (8014ba4 <HAL_GPIO_Init+0x1fc>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8014a06:	2703      	movs	r7, #3
 8014a08:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 8014a0a:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8014a0c:	401f      	ands	r7, r3
 8014a0e:	00ff      	lsls	r7, r7, #3
 8014a10:	00ad      	lsls	r5, r5, #2
 8014a12:	4465      	add	r5, ip
 8014a14:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 8014a16:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8014a18:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 8014a1a:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8014a1c:	4666      	mov	r6, ip
 8014a1e:	40b7      	lsls	r7, r6
 8014a20:	003e      	movs	r6, r7
 8014a22:	464f      	mov	r7, r9
 8014a24:	43b7      	bics	r7, r6
 8014a26:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8014a28:	27a0      	movs	r7, #160	; 0xa0
 8014a2a:	05ff      	lsls	r7, r7, #23
 8014a2c:	42b8      	cmp	r0, r7
 8014a2e:	d012      	beq.n	8014a56 <HAL_GPIO_Init+0xae>
 8014a30:	4f5d      	ldr	r7, [pc, #372]	; (8014ba8 <HAL_GPIO_Init+0x200>)
 8014a32:	42b8      	cmp	r0, r7
 8014a34:	d100      	bne.n	8014a38 <HAL_GPIO_Init+0x90>
 8014a36:	e0a5      	b.n	8014b84 <HAL_GPIO_Init+0x1dc>
 8014a38:	4f5c      	ldr	r7, [pc, #368]	; (8014bac <HAL_GPIO_Init+0x204>)
 8014a3a:	42b8      	cmp	r0, r7
 8014a3c:	d100      	bne.n	8014a40 <HAL_GPIO_Init+0x98>
 8014a3e:	e0a9      	b.n	8014b94 <HAL_GPIO_Init+0x1ec>
 8014a40:	4f5b      	ldr	r7, [pc, #364]	; (8014bb0 <HAL_GPIO_Init+0x208>)
 8014a42:	42b8      	cmp	r0, r7
 8014a44:	d100      	bne.n	8014a48 <HAL_GPIO_Init+0xa0>
 8014a46:	e096      	b.n	8014b76 <HAL_GPIO_Init+0x1ce>
 8014a48:	4666      	mov	r6, ip
 8014a4a:	2705      	movs	r7, #5
 8014a4c:	40b7      	lsls	r7, r6
 8014a4e:	003e      	movs	r6, r7
 8014a50:	464f      	mov	r7, r9
 8014a52:	4337      	orrs	r7, r6
 8014a54:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8014a56:	464e      	mov	r6, r9
 8014a58:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
 8014a5a:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8014a5c:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 8014a5e:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR1;
 8014a60:	4d50      	ldr	r5, [pc, #320]	; (8014ba4 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8014a62:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8014a64:	46b0      	mov	r8, r6
        temp = EXTI->RTSR1;
 8014a66:	682d      	ldr	r5, [r5, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8014a68:	423c      	tst	r4, r7
 8014a6a:	d000      	beq.n	8014a6e <HAL_GPIO_Init+0xc6>
 8014a6c:	e080      	b.n	8014b70 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 8014a6e:	4035      	ands	r5, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8014a70:	2780      	movs	r7, #128	; 0x80
        EXTI->RTSR1 = temp;
 8014a72:	4e4c      	ldr	r6, [pc, #304]	; (8014ba4 <HAL_GPIO_Init+0x1fc>)
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8014a74:	03bf      	lsls	r7, r7, #14
        EXTI->RTSR1 = temp;
 8014a76:	6035      	str	r5, [r6, #0]
        temp = EXTI->FTSR1;
 8014a78:	6875      	ldr	r5, [r6, #4]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8014a7a:	423c      	tst	r4, r7
 8014a7c:	d000      	beq.n	8014a80 <HAL_GPIO_Init+0xd8>
 8014a7e:	e074      	b.n	8014b6a <HAL_GPIO_Init+0x1c2>
        temp &= ~(iocurrent);
 8014a80:	4646      	mov	r6, r8
 8014a82:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8014a84:	4e47      	ldr	r6, [pc, #284]	; (8014ba4 <HAL_GPIO_Init+0x1fc>)
 8014a86:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8014a88:	2584      	movs	r5, #132	; 0x84
 8014a8a:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8014a8c:	03a7      	lsls	r7, r4, #14
 8014a8e:	d469      	bmi.n	8014b64 <HAL_GPIO_Init+0x1bc>
        temp &= ~(iocurrent);
 8014a90:	4646      	mov	r6, r8
 8014a92:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8014a94:	2784      	movs	r7, #132	; 0x84
 8014a96:	4e43      	ldr	r6, [pc, #268]	; (8014ba4 <HAL_GPIO_Init+0x1fc>)
 8014a98:	51f5      	str	r5, [r6, r7]

        temp = EXTI->IMR1;
 8014a9a:	2580      	movs	r5, #128	; 0x80
 8014a9c:	5975      	ldr	r5, [r6, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8014a9e:	03e4      	lsls	r4, r4, #15
 8014aa0:	d45d      	bmi.n	8014b5e <HAL_GPIO_Init+0x1b6>
        temp &= ~(iocurrent);
 8014aa2:	4646      	mov	r6, r8
 8014aa4:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8014aa6:	2580      	movs	r5, #128	; 0x80
 8014aa8:	4c3e      	ldr	r4, [pc, #248]	; (8014ba4 <HAL_GPIO_Init+0x1fc>)
 8014aaa:	5166      	str	r6, [r4, r5]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014aac:	000c      	movs	r4, r1
      }
    }

    position++;
 8014aae:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8014ab0:	40dc      	lsrs	r4, r3
 8014ab2:	3202      	adds	r2, #2
 8014ab4:	2c00      	cmp	r4, #0
 8014ab6:	d184      	bne.n	80149c2 <HAL_GPIO_Init+0x1a>
  }
}
 8014ab8:	b003      	add	sp, #12
 8014aba:	bcf0      	pop	{r4, r5, r6, r7}
 8014abc:	46bb      	mov	fp, r7
 8014abe:	46b2      	mov	sl, r6
 8014ac0:	46a9      	mov	r9, r5
 8014ac2:	46a0      	mov	r8, r4
 8014ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8014ac6:	6885      	ldr	r5, [r0, #8]
 8014ac8:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8014aca:	2503      	movs	r5, #3
 8014acc:	4095      	lsls	r5, r2
 8014ace:	46a8      	mov	r8, r5
 8014ad0:	43ed      	mvns	r5, r5
 8014ad2:	464f      	mov	r7, r9
 8014ad4:	9500      	str	r5, [sp, #0]
 8014ad6:	4645      	mov	r5, r8
 8014ad8:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8014ada:	465d      	mov	r5, fp
 8014adc:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8014ade:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8014ae0:	002f      	movs	r7, r5
 8014ae2:	4097      	lsls	r7, r2
 8014ae4:	46b8      	mov	r8, r7
 8014ae6:	464f      	mov	r7, r9
 8014ae8:	4645      	mov	r5, r8
 8014aea:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8014aec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8014aee:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8014af0:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014af2:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8014af4:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8014af6:	0926      	lsrs	r6, r4, #4
 8014af8:	402e      	ands	r6, r5
 8014afa:	409e      	lsls	r6, r3
 8014afc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8014afe:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8014b00:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8014b02:	9d00      	ldr	r5, [sp, #0]
 8014b04:	402e      	ands	r6, r5
 8014b06:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8014b08:	465e      	mov	r6, fp
 8014b0a:	68b6      	ldr	r6, [r6, #8]
 8014b0c:	4647      	mov	r7, r8
 8014b0e:	4096      	lsls	r6, r2
 8014b10:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 8014b12:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8014b14:	4667      	mov	r7, ip
 8014b16:	4666      	mov	r6, ip
 8014b18:	4096      	lsls	r6, r2
 8014b1a:	2f02      	cmp	r7, #2
 8014b1c:	d000      	beq.n	8014b20 <HAL_GPIO_Init+0x178>
 8014b1e:	e768      	b.n	80149f2 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3u];
 8014b20:	08dd      	lsrs	r5, r3, #3
 8014b22:	00ad      	lsls	r5, r5, #2
 8014b24:	46ac      	mov	ip, r5
 8014b26:	4484      	add	ip, r0
 8014b28:	4665      	mov	r5, ip
 8014b2a:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8014b2c:	2507      	movs	r5, #7
 8014b2e:	401d      	ands	r5, r3
 8014b30:	00ad      	lsls	r5, r5, #2
 8014b32:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 8014b34:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8014b36:	250f      	movs	r5, #15
 8014b38:	4647      	mov	r7, r8
 8014b3a:	40bd      	lsls	r5, r7
 8014b3c:	9f01      	ldr	r7, [sp, #4]
 8014b3e:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8014b40:	465d      	mov	r5, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8014b42:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8014b44:	4647      	mov	r7, r8
 8014b46:	692d      	ldr	r5, [r5, #16]
 8014b48:	40bd      	lsls	r5, r7
 8014b4a:	9f01      	ldr	r7, [sp, #4]
 8014b4c:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 8014b4e:	4665      	mov	r5, ip
 8014b50:	622f      	str	r7, [r5, #32]
 8014b52:	e74e      	b.n	80149f2 <HAL_GPIO_Init+0x4a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8014b54:	2503      	movs	r5, #3
 8014b56:	4095      	lsls	r5, r2
 8014b58:	43ed      	mvns	r5, r5
 8014b5a:	9500      	str	r5, [sp, #0]
 8014b5c:	e7d0      	b.n	8014b00 <HAL_GPIO_Init+0x158>
          temp |= iocurrent;
 8014b5e:	4656      	mov	r6, sl
 8014b60:	432e      	orrs	r6, r5
 8014b62:	e7a0      	b.n	8014aa6 <HAL_GPIO_Init+0xfe>
          temp |= iocurrent;
 8014b64:	4657      	mov	r7, sl
 8014b66:	433d      	orrs	r5, r7
 8014b68:	e794      	b.n	8014a94 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 8014b6a:	4657      	mov	r7, sl
 8014b6c:	433d      	orrs	r5, r7
 8014b6e:	e789      	b.n	8014a84 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8014b70:	4657      	mov	r7, sl
 8014b72:	433d      	orrs	r5, r7
 8014b74:	e77c      	b.n	8014a70 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8014b76:	4667      	mov	r7, ip
 8014b78:	2603      	movs	r6, #3
 8014b7a:	40be      	lsls	r6, r7
 8014b7c:	464f      	mov	r7, r9
 8014b7e:	4337      	orrs	r7, r6
 8014b80:	46b9      	mov	r9, r7
 8014b82:	e768      	b.n	8014a56 <HAL_GPIO_Init+0xae>
 8014b84:	4666      	mov	r6, ip
 8014b86:	2701      	movs	r7, #1
 8014b88:	40b7      	lsls	r7, r6
 8014b8a:	003e      	movs	r6, r7
 8014b8c:	464f      	mov	r7, r9
 8014b8e:	4337      	orrs	r7, r6
 8014b90:	46b9      	mov	r9, r7
 8014b92:	e760      	b.n	8014a56 <HAL_GPIO_Init+0xae>
 8014b94:	4667      	mov	r7, ip
 8014b96:	2602      	movs	r6, #2
 8014b98:	40be      	lsls	r6, r7
 8014b9a:	464f      	mov	r7, r9
 8014b9c:	4337      	orrs	r7, r6
 8014b9e:	46b9      	mov	r9, r7
 8014ba0:	e759      	b.n	8014a56 <HAL_GPIO_Init+0xae>
 8014ba2:	46c0      	nop			; (mov r8, r8)
 8014ba4:	40021800 	.word	0x40021800
 8014ba8:	50000400 	.word	0x50000400
 8014bac:	50000800 	.word	0x50000800
 8014bb0:	50000c00 	.word	0x50000c00

08014bb4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8014bb4:	6900      	ldr	r0, [r0, #16]
 8014bb6:	4008      	ands	r0, r1
 8014bb8:	1e43      	subs	r3, r0, #1
 8014bba:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8014bbc:	b2c0      	uxtb	r0, r0
}
 8014bbe:	4770      	bx	lr

08014bc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8014bc0:	2a00      	cmp	r2, #0
 8014bc2:	d001      	beq.n	8014bc8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8014bc4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8014bc6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8014bc8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8014bca:	e7fc      	b.n	8014bc6 <HAL_GPIO_WritePin+0x6>

08014bcc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8014bcc:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8014bce:	0013      	movs	r3, r2
 8014bd0:	400b      	ands	r3, r1
 8014bd2:	041b      	lsls	r3, r3, #16
 8014bd4:	4391      	bics	r1, r2
 8014bd6:	430b      	orrs	r3, r1
 8014bd8:	6183      	str	r3, [r0, #24]
}
 8014bda:	4770      	bx	lr

08014bdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8014bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bde:	0017      	movs	r7, r2
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8014be0:	2210      	movs	r2, #16
{
 8014be2:	46c6      	mov	lr, r8
 8014be4:	000c      	movs	r4, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8014be6:	0011      	movs	r1, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8014be8:	6803      	ldr	r3, [r0, #0]
{
 8014bea:	0005      	movs	r5, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8014bec:	699e      	ldr	r6, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8014bee:	2000      	movs	r0, #0
{
 8014bf0:	b500      	push	{lr}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8014bf2:	4031      	ands	r1, r6
 8014bf4:	4232      	tst	r2, r6
 8014bf6:	d011      	beq.n	8014c1c <I2C_IsErrorOccurred+0x40>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8014bf8:	61da      	str	r2, [r3, #28]
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 8014bfa:	3232      	adds	r2, #50	; 0x32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014bfc:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 8014bfe:	4690      	mov	r8, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014c00:	699a      	ldr	r2, [r3, #24]
 8014c02:	4216      	tst	r6, r2
 8014c04:	d104      	bne.n	8014c10 <I2C_IsErrorOccurred+0x34>
      if (Timeout != HAL_MAX_DELAY)
 8014c06:	1c61      	adds	r1, r4, #1
 8014c08:	d145      	bne.n	8014c96 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014c0a:	699a      	ldr	r2, [r3, #24]
 8014c0c:	4216      	tst	r6, r2
 8014c0e:	d0fc      	beq.n	8014c0a <I2C_IsErrorOccurred+0x2e>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8014c10:	2220      	movs	r2, #32
 8014c12:	2100      	movs	r1, #0
 8014c14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8014c16:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8014c18:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8014c1a:	4311      	orrs	r1, r2
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8014c1c:	2480      	movs	r4, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8014c1e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8014c20:	0064      	lsls	r4, r4, #1
 8014c22:	4222      	tst	r2, r4
 8014c24:	d02c      	beq.n	8014c80 <I2C_IsErrorOccurred+0xa4>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8014c26:	2001      	movs	r0, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8014c28:	61dc      	str	r4, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8014c2a:	4301      	orrs	r1, r0

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8014c2c:	0550      	lsls	r0, r2, #21
 8014c2e:	d504      	bpl.n	8014c3a <I2C_IsErrorOccurred+0x5e>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8014c30:	2008      	movs	r0, #8
 8014c32:	4301      	orrs	r1, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8014c34:	2080      	movs	r0, #128	; 0x80
 8014c36:	00c0      	lsls	r0, r0, #3
 8014c38:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8014c3a:	0592      	lsls	r2, r2, #22
 8014c3c:	d504      	bpl.n	8014c48 <I2C_IsErrorOccurred+0x6c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8014c3e:	2202      	movs	r2, #2
 8014c40:	4311      	orrs	r1, r2

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8014c42:	32ff      	adds	r2, #255	; 0xff
 8014c44:	32ff      	adds	r2, #255	; 0xff
 8014c46:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8014c48:	699a      	ldr	r2, [r3, #24]
 8014c4a:	0792      	lsls	r2, r2, #30
 8014c4c:	d501      	bpl.n	8014c52 <I2C_IsErrorOccurred+0x76>
    hi2c->Instance->TXDR = 0x00U;
 8014c4e:	2200      	movs	r2, #0
 8014c50:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8014c52:	2201      	movs	r2, #1
 8014c54:	6998      	ldr	r0, [r3, #24]
 8014c56:	4202      	tst	r2, r0
 8014c58:	d019      	beq.n	8014c8e <I2C_IsErrorOccurred+0xb2>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8014c5a:	685a      	ldr	r2, [r3, #4]
 8014c5c:	4822      	ldr	r0, [pc, #136]	; (8014ce8 <I2C_IsErrorOccurred+0x10c>)
 8014c5e:	4002      	ands	r2, r0
 8014c60:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8014c62:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8014c64:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8014c66:	430b      	orrs	r3, r1
 8014c68:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8014c6a:	2341      	movs	r3, #65	; 0x41
 8014c6c:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014c6e:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8014c70:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014c72:	3222      	adds	r2, #34	; 0x22
 8014c74:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 8014c76:	3a02      	subs	r2, #2
 8014c78:	54ab      	strb	r3, [r5, r2]
  }

  return status;
}
 8014c7a:	bc80      	pop	{r7}
 8014c7c:	46b8      	mov	r8, r7
 8014c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8014c80:	0554      	lsls	r4, r2, #21
 8014c82:	d4d5      	bmi.n	8014c30 <I2C_IsErrorOccurred+0x54>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8014c84:	0592      	lsls	r2, r2, #22
 8014c86:	d4da      	bmi.n	8014c3e <I2C_IsErrorOccurred+0x62>
  if (status != HAL_OK)
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	d0f6      	beq.n	8014c7a <I2C_IsErrorOccurred+0x9e>
 8014c8c:	e7dc      	b.n	8014c48 <I2C_IsErrorOccurred+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8014c8e:	6998      	ldr	r0, [r3, #24]
 8014c90:	4302      	orrs	r2, r0
 8014c92:	619a      	str	r2, [r3, #24]
 8014c94:	e7e1      	b.n	8014c5a <I2C_IsErrorOccurred+0x7e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8014c96:	f7ff f8c5 	bl	8013e24 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8014c9a:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8014c9c:	1bc0      	subs	r0, r0, r7
 8014c9e:	42a0      	cmp	r0, r4
 8014ca0:	d801      	bhi.n	8014ca6 <I2C_IsErrorOccurred+0xca>
 8014ca2:	2c00      	cmp	r4, #0
 8014ca4:	d1ac      	bne.n	8014c00 <I2C_IsErrorOccurred+0x24>
          tmp2 = hi2c->Mode;
 8014ca6:	4642      	mov	r2, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8014ca8:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8014caa:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8014cac:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8014cae:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8014cb0:	0409      	lsls	r1, r1, #16
 8014cb2:	d50c      	bpl.n	8014cce <I2C_IsErrorOccurred+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8014cb4:	2180      	movs	r1, #128	; 0x80
 8014cb6:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8014cb8:	4208      	tst	r0, r1
 8014cba:	d108      	bne.n	8014cce <I2C_IsErrorOccurred+0xf2>
              (tmp1 != I2C_CR2_STOP) && \
 8014cbc:	2a20      	cmp	r2, #32
 8014cbe:	d006      	beq.n	8014cce <I2C_IsErrorOccurred+0xf2>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8014cc0:	685a      	ldr	r2, [r3, #4]
 8014cc2:	4311      	orrs	r1, r2
 8014cc4:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8014cc6:	f7ff f8ad 	bl	8013e24 <HAL_GetTick>
 8014cca:	0007      	movs	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014ccc:	682b      	ldr	r3, [r5, #0]
 8014cce:	699a      	ldr	r2, [r3, #24]
 8014cd0:	4216      	tst	r6, r2
 8014cd2:	d195      	bne.n	8014c00 <I2C_IsErrorOccurred+0x24>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8014cd4:	f7ff f8a6 	bl	8013e24 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014cd8:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8014cda:	1bc0      	subs	r0, r0, r7
 8014cdc:	2819      	cmp	r0, #25
 8014cde:	d9f6      	bls.n	8014cce <I2C_IsErrorOccurred+0xf2>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8014ce0:	2120      	movs	r1, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8014ce2:	699a      	ldr	r2, [r3, #24]
 8014ce4:	e797      	b.n	8014c16 <I2C_IsErrorOccurred+0x3a>
 8014ce6:	46c0      	nop			; (mov r8, r8)
 8014ce8:	fe00e800 	.word	0xfe00e800

08014cec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8014cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cee:	0004      	movs	r4, r0
 8014cf0:	000d      	movs	r5, r1
 8014cf2:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014cf4:	2702      	movs	r7, #2
 8014cf6:	e008      	b.n	8014d0a <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014cf8:	0032      	movs	r2, r6
 8014cfa:	0029      	movs	r1, r5
 8014cfc:	0020      	movs	r0, r4
 8014cfe:	f7ff ff6d 	bl	8014bdc <I2C_IsErrorOccurred>
 8014d02:	2800      	cmp	r0, #0
 8014d04:	d107      	bne.n	8014d16 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8014d06:	1c6b      	adds	r3, r5, #1
 8014d08:	d107      	bne.n	8014d1a <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8014d0a:	6823      	ldr	r3, [r4, #0]
 8014d0c:	699b      	ldr	r3, [r3, #24]
 8014d0e:	421f      	tst	r7, r3
 8014d10:	d0f2      	beq.n	8014cf8 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 8014d12:	2000      	movs	r0, #0
}
 8014d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8014d16:	2001      	movs	r0, #1
 8014d18:	e7fc      	b.n	8014d14 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d1a:	f7ff f883 	bl	8013e24 <HAL_GetTick>
 8014d1e:	1b80      	subs	r0, r0, r6
 8014d20:	42a8      	cmp	r0, r5
 8014d22:	d801      	bhi.n	8014d28 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8014d24:	2d00      	cmp	r5, #0
 8014d26:	d1f0      	bne.n	8014d0a <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014d28:	2220      	movs	r2, #32
 8014d2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8014d2c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014d2e:	4313      	orrs	r3, r2
 8014d30:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014d32:	2341      	movs	r3, #65	; 0x41
 8014d34:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d36:	2300      	movs	r3, #0
 8014d38:	3222      	adds	r2, #34	; 0x22
 8014d3a:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8014d3c:	3a02      	subs	r2, #2
 8014d3e:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8014d40:	e7e8      	b.n	8014d14 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8014d42:	46c0      	nop			; (mov r8, r8)

08014d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8014d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d46:	0005      	movs	r5, r0
 8014d48:	000c      	movs	r4, r1
 8014d4a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014d4c:	2720      	movs	r7, #32
 8014d4e:	e00d      	b.n	8014d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8014d50:	0032      	movs	r2, r6
 8014d52:	0021      	movs	r1, r4
 8014d54:	0028      	movs	r0, r5
 8014d56:	f7ff ff41 	bl	8014bdc <I2C_IsErrorOccurred>
 8014d5a:	2800      	cmp	r0, #0
 8014d5c:	d119      	bne.n	8014d92 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014d5e:	f7ff f861 	bl	8013e24 <HAL_GetTick>
 8014d62:	1b80      	subs	r0, r0, r6
 8014d64:	42a0      	cmp	r0, r4
 8014d66:	d807      	bhi.n	8014d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8014d68:	2c00      	cmp	r4, #0
 8014d6a:	d005      	beq.n	8014d78 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8014d6c:	682b      	ldr	r3, [r5, #0]
 8014d6e:	699b      	ldr	r3, [r3, #24]
 8014d70:	421f      	tst	r7, r3
 8014d72:	d0ed      	beq.n	8014d50 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
  return HAL_OK;
 8014d74:	2000      	movs	r0, #0
}
 8014d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014d78:	2220      	movs	r2, #32
 8014d7a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8014d7c:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014d7e:	4313      	orrs	r3, r2
 8014d80:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014d82:	2341      	movs	r3, #65	; 0x41
 8014d84:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014d86:	2300      	movs	r3, #0
 8014d88:	3222      	adds	r2, #34	; 0x22
 8014d8a:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8014d8c:	3a02      	subs	r2, #2
 8014d8e:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8014d90:	e7f1      	b.n	8014d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
      return HAL_ERROR;
 8014d92:	2001      	movs	r0, #1
 8014d94:	e7ef      	b.n	8014d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8014d96:	46c0      	nop			; (mov r8, r8)

08014d98 <HAL_I2C_Init>:
{
 8014d98:	b510      	push	{r4, lr}
 8014d9a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8014d9c:	d04d      	beq.n	8014e3a <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014d9e:	2341      	movs	r3, #65	; 0x41
 8014da0:	5cc3      	ldrb	r3, [r0, r3]
 8014da2:	b2da      	uxtb	r2, r3
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d043      	beq.n	8014e30 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8014da8:	2341      	movs	r3, #65	; 0x41
 8014daa:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8014dac:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8014dae:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8014db0:	6823      	ldr	r3, [r4, #0]
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	438a      	bics	r2, r1
 8014db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8014db8:	4921      	ldr	r1, [pc, #132]	; (8014e40 <HAL_I2C_Init+0xa8>)
 8014dba:	6862      	ldr	r2, [r4, #4]
 8014dbc:	400a      	ands	r2, r1
 8014dbe:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8014dc0:	689a      	ldr	r2, [r3, #8]
 8014dc2:	4920      	ldr	r1, [pc, #128]	; (8014e44 <HAL_I2C_Init+0xac>)
 8014dc4:	400a      	ands	r2, r1
 8014dc6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014dc8:	68e2      	ldr	r2, [r4, #12]
 8014dca:	2a01      	cmp	r2, #1
 8014dcc:	d02a      	beq.n	8014e24 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8014dce:	2184      	movs	r1, #132	; 0x84
 8014dd0:	68a0      	ldr	r0, [r4, #8]
 8014dd2:	0209      	lsls	r1, r1, #8
 8014dd4:	4301      	orrs	r1, r0
 8014dd6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014dd8:	2a02      	cmp	r2, #2
 8014dda:	d102      	bne.n	8014de2 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8014ddc:	2280      	movs	r2, #128	; 0x80
 8014dde:	0112      	lsls	r2, r2, #4
 8014de0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8014de2:	6859      	ldr	r1, [r3, #4]
 8014de4:	4a18      	ldr	r2, [pc, #96]	; (8014e48 <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 8014de6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8014de8:	430a      	orrs	r2, r1
 8014dea:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8014dec:	68da      	ldr	r2, [r3, #12]
 8014dee:	4915      	ldr	r1, [pc, #84]	; (8014e44 <HAL_I2C_Init+0xac>)
 8014df0:	400a      	ands	r2, r1
 8014df2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014df4:	6961      	ldr	r1, [r4, #20]
 8014df6:	6922      	ldr	r2, [r4, #16]
 8014df8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8014dfa:	69a1      	ldr	r1, [r4, #24]
 8014dfc:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8014dfe:	430a      	orrs	r2, r1
 8014e00:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014e02:	6a21      	ldr	r1, [r4, #32]
 8014e04:	69e2      	ldr	r2, [r4, #28]
 8014e06:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8014e08:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8014e0a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8014e0c:	681a      	ldr	r2, [r3, #0]
 8014e0e:	430a      	orrs	r2, r1
 8014e10:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014e12:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8014e14:	2241      	movs	r2, #65	; 0x41
 8014e16:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014e18:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8014e1a:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e1c:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8014e1e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e20:	54a3      	strb	r3, [r4, r2]
}
 8014e22:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8014e24:	2280      	movs	r2, #128	; 0x80
 8014e26:	68a1      	ldr	r1, [r4, #8]
 8014e28:	0212      	lsls	r2, r2, #8
 8014e2a:	430a      	orrs	r2, r1
 8014e2c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8014e2e:	e7d8      	b.n	8014de2 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8014e30:	3340      	adds	r3, #64	; 0x40
 8014e32:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8014e34:	f7fe fd18 	bl	8013868 <HAL_I2C_MspInit>
 8014e38:	e7b6      	b.n	8014da8 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8014e3a:	2001      	movs	r0, #1
 8014e3c:	e7f1      	b.n	8014e22 <HAL_I2C_Init+0x8a>
 8014e3e:	46c0      	nop			; (mov r8, r8)
 8014e40:	f0ffffff 	.word	0xf0ffffff
 8014e44:	ffff7fff 	.word	0xffff7fff
 8014e48:	02008000 	.word	0x02008000

08014e4c <HAL_I2C_Mem_Write>:
{
 8014e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e4e:	4645      	mov	r5, r8
 8014e50:	46de      	mov	lr, fp
 8014e52:	4657      	mov	r7, sl
 8014e54:	464e      	mov	r6, r9
 8014e56:	b5e0      	push	{r5, r6, r7, lr}
 8014e58:	b083      	sub	sp, #12
 8014e5a:	4699      	mov	r9, r3
 8014e5c:	ab0c      	add	r3, sp, #48	; 0x30
 8014e5e:	9201      	str	r2, [sp, #4]
 8014e60:	cb04      	ldmia	r3!, {r2}
 8014e62:	0004      	movs	r4, r0
 8014e64:	881b      	ldrh	r3, [r3, #0]
 8014e66:	4688      	mov	r8, r1
 8014e68:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8014e6a:	2341      	movs	r3, #65	; 0x41
 8014e6c:	5cc3      	ldrb	r3, [r0, r3]
{
 8014e6e:	4692      	mov	sl, r2
 8014e70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8014e72:	2b20      	cmp	r3, #32
 8014e74:	d000      	beq.n	8014e78 <HAL_I2C_Mem_Write+0x2c>
 8014e76:	e0a7      	b.n	8014fc8 <HAL_I2C_Mem_Write+0x17c>
    if ((pData == NULL) || (Size == 0U))
 8014e78:	2a00      	cmp	r2, #0
 8014e7a:	d100      	bne.n	8014e7e <HAL_I2C_Mem_Write+0x32>
 8014e7c:	e099      	b.n	8014fb2 <HAL_I2C_Mem_Write+0x166>
 8014e7e:	465b      	mov	r3, fp
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d100      	bne.n	8014e86 <HAL_I2C_Mem_Write+0x3a>
 8014e84:	e095      	b.n	8014fb2 <HAL_I2C_Mem_Write+0x166>
    __HAL_LOCK(hi2c);
 8014e86:	2340      	movs	r3, #64	; 0x40
 8014e88:	5cc2      	ldrb	r2, [r0, r3]
 8014e8a:	2a01      	cmp	r2, #1
 8014e8c:	d100      	bne.n	8014e90 <HAL_I2C_Mem_Write+0x44>
 8014e8e:	e09b      	b.n	8014fc8 <HAL_I2C_Mem_Write+0x17c>
 8014e90:	2201      	movs	r2, #1
 8014e92:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8014e94:	f7fe ffc6 	bl	8013e24 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014e98:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 8014e9a:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014e9c:	0236      	lsls	r6, r6, #8
 8014e9e:	e005      	b.n	8014eac <HAL_I2C_Mem_Write+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014ea0:	f7fe ffc0 	bl	8013e24 <HAL_GetTick>
 8014ea4:	1bc0      	subs	r0, r0, r7
 8014ea6:	2819      	cmp	r0, #25
 8014ea8:	d900      	bls.n	8014eac <HAL_I2C_Mem_Write+0x60>
 8014eaa:	e08f      	b.n	8014fcc <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014eac:	6822      	ldr	r2, [r4, #0]
 8014eae:	6993      	ldr	r3, [r2, #24]
 8014eb0:	0019      	movs	r1, r3
 8014eb2:	4031      	ands	r1, r6
 8014eb4:	4233      	tst	r3, r6
 8014eb6:	d1f3      	bne.n	8014ea0 <HAL_I2C_Mem_Write+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014eb8:	2341      	movs	r3, #65	; 0x41
 8014eba:	2021      	movs	r0, #33	; 0x21
 8014ebc:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8014ebe:	3301      	adds	r3, #1
 8014ec0:	301f      	adds	r0, #31
 8014ec2:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8014ec4:	4653      	mov	r3, sl
 8014ec6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8014ec8:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014eca:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8014ecc:	8563      	strh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8014ece:	4643      	mov	r3, r8
 8014ed0:	059b      	lsls	r3, r3, #22
 8014ed2:	0d9b      	lsrs	r3, r3, #22
 8014ed4:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8014ed6:	464b      	mov	r3, r9
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8014ed8:	4874      	ldr	r0, [pc, #464]	; (80150ac <HAL_I2C_Mem_Write+0x260>)
    hi2c->XferISR   = NULL;
 8014eda:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8014edc:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8014ede:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8014ee0:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8014ee2:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8014ee4:	430b      	orrs	r3, r1
 8014ee6:	4641      	mov	r1, r8
 8014ee8:	430b      	orrs	r3, r1
 8014eea:	4971      	ldr	r1, [pc, #452]	; (80150b0 <HAL_I2C_Mem_Write+0x264>)
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014eec:	0020      	movs	r0, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 8014eee:	430b      	orrs	r3, r1
 8014ef0:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014ef2:	0029      	movs	r1, r5
 8014ef4:	003a      	movs	r2, r7
 8014ef6:	f7ff fef9 	bl	8014cec <I2C_WaitOnTXISFlagUntilTimeout>
 8014efa:	2800      	cmp	r0, #0
 8014efc:	d000      	beq.n	8014f00 <HAL_I2C_Mem_Write+0xb4>
 8014efe:	e0ab      	b.n	8015058 <HAL_I2C_Mem_Write+0x20c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8014f00:	464b      	mov	r3, r9
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d000      	beq.n	8014f08 <HAL_I2C_Mem_Write+0xbc>
 8014f06:	e06e      	b.n	8014fe6 <HAL_I2C_Mem_Write+0x19a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014f08:	466b      	mov	r3, sp
 8014f0a:	6822      	ldr	r2, [r4, #0]
 8014f0c:	791b      	ldrb	r3, [r3, #4]
 8014f0e:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014f10:	2680      	movs	r6, #128	; 0x80
 8014f12:	e002      	b.n	8014f1a <HAL_I2C_Mem_Write+0xce>
    if (Timeout != HAL_MAX_DELAY)
 8014f14:	1c6b      	adds	r3, r5, #1
 8014f16:	d000      	beq.n	8014f1a <HAL_I2C_Mem_Write+0xce>
 8014f18:	e08c      	b.n	8015034 <HAL_I2C_Mem_Write+0x1e8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014f1a:	6993      	ldr	r3, [r2, #24]
 8014f1c:	421e      	tst	r6, r3
 8014f1e:	d0f9      	beq.n	8014f14 <HAL_I2C_Mem_Write+0xc8>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014f20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014f22:	2bff      	cmp	r3, #255	; 0xff
 8014f24:	d800      	bhi.n	8014f28 <HAL_I2C_Mem_Write+0xdc>
 8014f26:	e09c      	b.n	8015062 <HAL_I2C_Mem_Write+0x216>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014f28:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8014f2a:	4962      	ldr	r1, [pc, #392]	; (80150b4 <HAL_I2C_Mem_Write+0x268>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8014f2c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8014f2e:	6853      	ldr	r3, [r2, #4]
 8014f30:	400b      	ands	r3, r1
 8014f32:	4641      	mov	r1, r8
 8014f34:	430b      	orrs	r3, r1
 8014f36:	4960      	ldr	r1, [pc, #384]	; (80150b8 <HAL_I2C_Mem_Write+0x26c>)
 8014f38:	430b      	orrs	r3, r1
 8014f3a:	6053      	str	r3, [r2, #4]
 8014f3c:	4b5d      	ldr	r3, [pc, #372]	; (80150b4 <HAL_I2C_Mem_Write+0x268>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014f3e:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2, \
 8014f40:	4699      	mov	r9, r3
 8014f42:	2380      	movs	r3, #128	; 0x80
 8014f44:	049b      	lsls	r3, r3, #18
 8014f46:	469a      	mov	sl, r3
 8014f48:	e003      	b.n	8014f52 <HAL_I2C_Mem_Write+0x106>
    } while (hi2c->XferCount > 0U);
 8014f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d100      	bne.n	8014f52 <HAL_I2C_Mem_Write+0x106>
 8014f50:	e097      	b.n	8015082 <HAL_I2C_Mem_Write+0x236>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014f52:	003a      	movs	r2, r7
 8014f54:	0029      	movs	r1, r5
 8014f56:	0020      	movs	r0, r4
 8014f58:	f7ff fec8 	bl	8014cec <I2C_WaitOnTXISFlagUntilTimeout>
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d140      	bne.n	8014fe2 <HAL_I2C_Mem_Write+0x196>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014f62:	6822      	ldr	r2, [r4, #0]
 8014f64:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8014f66:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8014f68:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8014f6a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8014f6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014f6e:	3b01      	subs	r3, #1
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8014f74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014f76:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8014f78:	3b01      	subs	r3, #1
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8014f7e:	2900      	cmp	r1, #0
 8014f80:	d0e3      	beq.n	8014f4a <HAL_I2C_Mem_Write+0xfe>
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d1e1      	bne.n	8014f4a <HAL_I2C_Mem_Write+0xfe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014f86:	6993      	ldr	r3, [r2, #24]
 8014f88:	421e      	tst	r6, r3
 8014f8a:	d104      	bne.n	8014f96 <HAL_I2C_Mem_Write+0x14a>
    if (Timeout != HAL_MAX_DELAY)
 8014f8c:	1c6b      	adds	r3, r5, #1
 8014f8e:	d139      	bne.n	8015004 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8014f90:	6993      	ldr	r3, [r2, #24]
 8014f92:	421e      	tst	r6, r3
 8014f94:	d0fa      	beq.n	8014f8c <HAL_I2C_Mem_Write+0x140>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8014f96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014f98:	2bff      	cmp	r3, #255	; 0xff
 8014f9a:	d93c      	bls.n	8015016 <HAL_I2C_Mem_Write+0x1ca>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014f9c:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8014f9e:	4649      	mov	r1, r9
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8014fa0:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8014fa2:	6853      	ldr	r3, [r2, #4]
 8014fa4:	400b      	ands	r3, r1
 8014fa6:	4641      	mov	r1, r8
 8014fa8:	430b      	orrs	r3, r1
 8014faa:	4943      	ldr	r1, [pc, #268]	; (80150b8 <HAL_I2C_Mem_Write+0x26c>)
 8014fac:	430b      	orrs	r3, r1
 8014fae:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8014fb0:	e7cb      	b.n	8014f4a <HAL_I2C_Mem_Write+0xfe>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014fb2:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8014fb4:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8014fb6:	009b      	lsls	r3, r3, #2
 8014fb8:	6463      	str	r3, [r4, #68]	; 0x44
}
 8014fba:	b003      	add	sp, #12
 8014fbc:	bcf0      	pop	{r4, r5, r6, r7}
 8014fbe:	46bb      	mov	fp, r7
 8014fc0:	46b2      	mov	sl, r6
 8014fc2:	46a9      	mov	r9, r5
 8014fc4:	46a0      	mov	r8, r4
 8014fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8014fc8:	2002      	movs	r0, #2
 8014fca:	e7f6      	b.n	8014fba <HAL_I2C_Mem_Write+0x16e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8014fcc:	2220      	movs	r2, #32
 8014fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8014fd0:	4313      	orrs	r3, r2
 8014fd2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8014fd4:	2341      	movs	r3, #65	; 0x41
 8014fd6:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8014fd8:	2300      	movs	r3, #0
 8014fda:	3222      	adds	r2, #34	; 0x22
 8014fdc:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8014fde:	3a02      	subs	r2, #2
 8014fe0:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8014fe2:	2001      	movs	r0, #1
 8014fe4:	e7e9      	b.n	8014fba <HAL_I2C_Mem_Write+0x16e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8014fe6:	9e01      	ldr	r6, [sp, #4]
 8014fe8:	6823      	ldr	r3, [r4, #0]
 8014fea:	0a32      	lsrs	r2, r6, #8
 8014fec:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014fee:	0029      	movs	r1, r5
 8014ff0:	003a      	movs	r2, r7
 8014ff2:	0020      	movs	r0, r4
 8014ff4:	f7ff fe7a 	bl	8014cec <I2C_WaitOnTXISFlagUntilTimeout>
 8014ff8:	2800      	cmp	r0, #0
 8014ffa:	d12d      	bne.n	8015058 <HAL_I2C_Mem_Write+0x20c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8014ffc:	6822      	ldr	r2, [r4, #0]
 8014ffe:	b2f3      	uxtb	r3, r6
 8015000:	6293      	str	r3, [r2, #40]	; 0x28
 8015002:	e785      	b.n	8014f10 <HAL_I2C_Mem_Write+0xc4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015004:	f7fe ff0e 	bl	8013e24 <HAL_GetTick>
 8015008:	1bc0      	subs	r0, r0, r7
 801500a:	4285      	cmp	r5, r0
 801500c:	d3de      	bcc.n	8014fcc <HAL_I2C_Mem_Write+0x180>
 801500e:	2d00      	cmp	r5, #0
 8015010:	d0dc      	beq.n	8014fcc <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015012:	6822      	ldr	r2, [r4, #0]
 8015014:	e7bc      	b.n	8014f90 <HAL_I2C_Mem_Write+0x144>
  MODIFY_REG(hi2c->Instance->CR2, \
 8015016:	4648      	mov	r0, r9
          hi2c->XferSize = hi2c->XferCount;
 8015018:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 801501a:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 801501c:	b289      	uxth	r1, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 801501e:	4003      	ands	r3, r0
 8015020:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8015022:	8521      	strh	r1, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015024:	b2c9      	uxtb	r1, r1
 8015026:	0409      	lsls	r1, r1, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8015028:	4303      	orrs	r3, r0
 801502a:	430b      	orrs	r3, r1
 801502c:	4651      	mov	r1, sl
 801502e:	430b      	orrs	r3, r1
 8015030:	6053      	str	r3, [r2, #4]
}
 8015032:	e78a      	b.n	8014f4a <HAL_I2C_Mem_Write+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015034:	f7fe fef6 	bl	8013e24 <HAL_GetTick>
 8015038:	1bc0      	subs	r0, r0, r7
 801503a:	4285      	cmp	r5, r0
 801503c:	d303      	bcc.n	8015046 <HAL_I2C_Mem_Write+0x1fa>
 801503e:	2d00      	cmp	r5, #0
 8015040:	d001      	beq.n	8015046 <HAL_I2C_Mem_Write+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015042:	6822      	ldr	r2, [r4, #0]
 8015044:	e769      	b.n	8014f1a <HAL_I2C_Mem_Write+0xce>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015046:	2220      	movs	r2, #32
 8015048:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801504a:	4313      	orrs	r3, r2
 801504c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801504e:	2341      	movs	r3, #65	; 0x41
 8015050:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015052:	2200      	movs	r2, #0
 8015054:	3301      	adds	r3, #1
 8015056:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8015058:	2340      	movs	r3, #64	; 0x40
 801505a:	2200      	movs	r2, #0
      return HAL_ERROR;
 801505c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 801505e:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8015060:	e7ab      	b.n	8014fba <HAL_I2C_Mem_Write+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 8015062:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8015064:	4813      	ldr	r0, [pc, #76]	; (80150b4 <HAL_I2C_Mem_Write+0x268>)
 8015066:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8015068:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 801506a:	4001      	ands	r1, r0
 801506c:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 801506e:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015070:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8015072:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015074:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8015076:	430b      	orrs	r3, r1
 8015078:	2180      	movs	r1, #128	; 0x80
 801507a:	0489      	lsls	r1, r1, #18
 801507c:	430b      	orrs	r3, r1
 801507e:	6053      	str	r3, [r2, #4]
}
 8015080:	e75c      	b.n	8014f3c <HAL_I2C_Mem_Write+0xf0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015082:	003a      	movs	r2, r7
 8015084:	0029      	movs	r1, r5
 8015086:	0020      	movs	r0, r4
 8015088:	f7ff fe5c 	bl	8014d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 801508c:	2800      	cmp	r0, #0
 801508e:	d1a8      	bne.n	8014fe2 <HAL_I2C_Mem_Write+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015090:	2120      	movs	r1, #32
 8015092:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8015094:	4d09      	ldr	r5, [pc, #36]	; (80150bc <HAL_I2C_Mem_Write+0x270>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015096:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8015098:	685a      	ldr	r2, [r3, #4]
 801509a:	402a      	ands	r2, r5
 801509c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 801509e:	2341      	movs	r3, #65	; 0x41
 80150a0:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80150a2:	3301      	adds	r3, #1
 80150a4:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80150a6:	3b02      	subs	r3, #2
 80150a8:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 80150aa:	e786      	b.n	8014fba <HAL_I2C_Mem_Write+0x16e>
 80150ac:	fc009800 	.word	0xfc009800
 80150b0:	01002000 	.word	0x01002000
 80150b4:	fc009c00 	.word	0xfc009c00
 80150b8:	01ff0000 	.word	0x01ff0000
 80150bc:	fe00e800 	.word	0xfe00e800

080150c0 <HAL_I2C_Mem_Read>:
{
 80150c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150c2:	4645      	mov	r5, r8
 80150c4:	46de      	mov	lr, fp
 80150c6:	4657      	mov	r7, sl
 80150c8:	464e      	mov	r6, r9
 80150ca:	b5e0      	push	{r5, r6, r7, lr}
 80150cc:	b083      	sub	sp, #12
 80150ce:	4699      	mov	r9, r3
 80150d0:	ab0c      	add	r3, sp, #48	; 0x30
 80150d2:	9201      	str	r2, [sp, #4]
 80150d4:	cb04      	ldmia	r3!, {r2}
 80150d6:	0005      	movs	r5, r0
 80150d8:	881b      	ldrh	r3, [r3, #0]
 80150da:	4688      	mov	r8, r1
 80150dc:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80150de:	2341      	movs	r3, #65	; 0x41
 80150e0:	5cc3      	ldrb	r3, [r0, r3]
{
 80150e2:	4692      	mov	sl, r2
 80150e4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80150e6:	2b20      	cmp	r3, #32
 80150e8:	d000      	beq.n	80150ec <HAL_I2C_Mem_Read+0x2c>
 80150ea:	e090      	b.n	801520e <HAL_I2C_Mem_Read+0x14e>
    if ((pData == NULL) || (Size == 0U))
 80150ec:	2a00      	cmp	r2, #0
 80150ee:	d100      	bne.n	80150f2 <HAL_I2C_Mem_Read+0x32>
 80150f0:	e082      	b.n	80151f8 <HAL_I2C_Mem_Read+0x138>
 80150f2:	465b      	mov	r3, fp
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d100      	bne.n	80150fa <HAL_I2C_Mem_Read+0x3a>
 80150f8:	e07e      	b.n	80151f8 <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 80150fa:	2340      	movs	r3, #64	; 0x40
 80150fc:	5cc2      	ldrb	r2, [r0, r3]
 80150fe:	2a01      	cmp	r2, #1
 8015100:	d100      	bne.n	8015104 <HAL_I2C_Mem_Read+0x44>
 8015102:	e084      	b.n	801520e <HAL_I2C_Mem_Read+0x14e>
 8015104:	2201      	movs	r2, #1
 8015106:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8015108:	f7fe fe8c 	bl	8013e24 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801510c:	2680      	movs	r6, #128	; 0x80
    tickstart = HAL_GetTick();
 801510e:	0007      	movs	r7, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015110:	0236      	lsls	r6, r6, #8
 8015112:	e005      	b.n	8015120 <HAL_I2C_Mem_Read+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015114:	f7fe fe86 	bl	8013e24 <HAL_GetTick>
 8015118:	1bc0      	subs	r0, r0, r7
 801511a:	2819      	cmp	r0, #25
 801511c:	d900      	bls.n	8015120 <HAL_I2C_Mem_Read+0x60>
 801511e:	e07f      	b.n	8015220 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015120:	682a      	ldr	r2, [r5, #0]
 8015122:	6993      	ldr	r3, [r2, #24]
 8015124:	0019      	movs	r1, r3
 8015126:	4031      	ands	r1, r6
 8015128:	4233      	tst	r3, r6
 801512a:	d1f3      	bne.n	8015114 <HAL_I2C_Mem_Read+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801512c:	2341      	movs	r3, #65	; 0x41
 801512e:	2022      	movs	r0, #34	; 0x22
 8015130:	54e8      	strb	r0, [r5, r3]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8015132:	3301      	adds	r3, #1
 8015134:	301e      	adds	r0, #30
 8015136:	54e8      	strb	r0, [r5, r3]
    hi2c->pBuffPtr  = pData;
 8015138:	4653      	mov	r3, sl
 801513a:	626b      	str	r3, [r5, #36]	; 0x24
    hi2c->XferCount = Size;
 801513c:	465b      	mov	r3, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801513e:	6469      	str	r1, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 8015140:	856b      	strh	r3, [r5, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8015142:	4643      	mov	r3, r8
 8015144:	059b      	lsls	r3, r3, #22
 8015146:	0d9b      	lsrs	r3, r3, #22
 8015148:	4698      	mov	r8, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801514a:	464b      	mov	r3, r9
  MODIFY_REG(hi2c->Instance->CR2, \
 801514c:	4877      	ldr	r0, [pc, #476]	; (801532c <HAL_I2C_Mem_Read+0x26c>)
    hi2c->XferISR   = NULL;
 801514e:	6369      	str	r1, [r5, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8015150:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015152:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8015154:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015156:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8015158:	430b      	orrs	r3, r1
 801515a:	4641      	mov	r1, r8
 801515c:	430b      	orrs	r3, r1
 801515e:	2180      	movs	r1, #128	; 0x80
 8015160:	0189      	lsls	r1, r1, #6
 8015162:	430b      	orrs	r3, r1
 8015164:	6053      	str	r3, [r2, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8015166:	0021      	movs	r1, r4
 8015168:	003a      	movs	r2, r7
 801516a:	0028      	movs	r0, r5
 801516c:	f7ff fdbe 	bl	8014cec <I2C_WaitOnTXISFlagUntilTimeout>
 8015170:	2800      	cmp	r0, #0
 8015172:	d000      	beq.n	8015176 <HAL_I2C_Mem_Read+0xb6>
 8015174:	e0d3      	b.n	801531e <HAL_I2C_Mem_Read+0x25e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8015176:	464b      	mov	r3, r9
 8015178:	2b01      	cmp	r3, #1
 801517a:	d000      	beq.n	801517e <HAL_I2C_Mem_Read+0xbe>
 801517c:	e07a      	b.n	8015274 <HAL_I2C_Mem_Read+0x1b4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801517e:	466b      	mov	r3, sp
 8015180:	682a      	ldr	r2, [r5, #0]
 8015182:	791b      	ldrb	r3, [r3, #4]
 8015184:	6293      	str	r3, [r2, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015186:	2640      	movs	r6, #64	; 0x40
 8015188:	e002      	b.n	8015190 <HAL_I2C_Mem_Read+0xd0>
    if (Timeout != HAL_MAX_DELAY)
 801518a:	1c63      	adds	r3, r4, #1
 801518c:	d000      	beq.n	8015190 <HAL_I2C_Mem_Read+0xd0>
 801518e:	e0a5      	b.n	80152dc <HAL_I2C_Mem_Read+0x21c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015190:	6993      	ldr	r3, [r2, #24]
 8015192:	421e      	tst	r6, r3
 8015194:	d0f9      	beq.n	801518a <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015196:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8015198:	2bff      	cmp	r3, #255	; 0xff
 801519a:	d800      	bhi.n	801519e <HAL_I2C_Mem_Read+0xde>
 801519c:	e0a7      	b.n	80152ee <HAL_I2C_Mem_Read+0x22e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801519e:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80151a0:	4962      	ldr	r1, [pc, #392]	; (801532c <HAL_I2C_Mem_Read+0x26c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80151a2:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80151a4:	6853      	ldr	r3, [r2, #4]
 80151a6:	400b      	ands	r3, r1
 80151a8:	4641      	mov	r1, r8
 80151aa:	430b      	orrs	r3, r1
 80151ac:	4960      	ldr	r1, [pc, #384]	; (8015330 <HAL_I2C_Mem_Read+0x270>)
 80151ae:	430b      	orrs	r3, r1
 80151b0:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80151b2:	2380      	movs	r3, #128	; 0x80
 80151b4:	4699      	mov	r9, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80151b6:	4b5f      	ldr	r3, [pc, #380]	; (8015334 <HAL_I2C_Mem_Read+0x274>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80151b8:	2604      	movs	r6, #4
  MODIFY_REG(hi2c->Instance->CR2, \
 80151ba:	469a      	mov	sl, r3
 80151bc:	e001      	b.n	80151c2 <HAL_I2C_Mem_Read+0x102>
    if (Timeout != HAL_MAX_DELAY)
 80151be:	1c63      	adds	r3, r4, #1
 80151c0:	d127      	bne.n	8015212 <HAL_I2C_Mem_Read+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80151c2:	6993      	ldr	r3, [r2, #24]
 80151c4:	421e      	tst	r6, r3
 80151c6:	d0fa      	beq.n	80151be <HAL_I2C_Mem_Read+0xfe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80151c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80151ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80151cc:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80151ce:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80151d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hi2c->XferCount--;
 80151d2:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80151d4:	3301      	adds	r3, #1
      hi2c->XferCount--;
 80151d6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80151d8:	626b      	str	r3, [r5, #36]	; 0x24
      hi2c->XferSize--;
 80151da:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 80151dc:	856a      	strh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80151de:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80151e0:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80151e6:	2a00      	cmp	r2, #0
 80151e8:	d001      	beq.n	80151ee <HAL_I2C_Mem_Read+0x12e>
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d02c      	beq.n	8015248 <HAL_I2C_Mem_Read+0x188>
    } while (hi2c->XferCount > 0U);
 80151ee:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d04e      	beq.n	8015292 <HAL_I2C_Mem_Read+0x1d2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80151f4:	682a      	ldr	r2, [r5, #0]
 80151f6:	e7e4      	b.n	80151c2 <HAL_I2C_Mem_Read+0x102>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80151f8:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 80151fa:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80151fc:	009b      	lsls	r3, r3, #2
 80151fe:	646b      	str	r3, [r5, #68]	; 0x44
}
 8015200:	b003      	add	sp, #12
 8015202:	bcf0      	pop	{r4, r5, r6, r7}
 8015204:	46bb      	mov	fp, r7
 8015206:	46b2      	mov	sl, r6
 8015208:	46a9      	mov	r9, r5
 801520a:	46a0      	mov	r8, r4
 801520c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 801520e:	2002      	movs	r0, #2
 8015210:	e7f6      	b.n	8015200 <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015212:	f7fe fe07 	bl	8013e24 <HAL_GetTick>
 8015216:	1bc0      	subs	r0, r0, r7
 8015218:	4284      	cmp	r4, r0
 801521a:	d301      	bcc.n	8015220 <HAL_I2C_Mem_Read+0x160>
 801521c:	2c00      	cmp	r4, #0
 801521e:	d1e9      	bne.n	80151f4 <HAL_I2C_Mem_Read+0x134>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015220:	2220      	movs	r2, #32
 8015222:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          return HAL_ERROR;
 8015224:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015226:	4313      	orrs	r3, r2
 8015228:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801522a:	2341      	movs	r3, #65	; 0x41
 801522c:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801522e:	2300      	movs	r3, #0
 8015230:	3222      	adds	r2, #34	; 0x22
 8015232:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8015234:	3a02      	subs	r2, #2
 8015236:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8015238:	e7e2      	b.n	8015200 <HAL_I2C_Mem_Read+0x140>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801523a:	f7fe fdf3 	bl	8013e24 <HAL_GetTick>
 801523e:	1bc0      	subs	r0, r0, r7
 8015240:	4284      	cmp	r4, r0
 8015242:	d3ed      	bcc.n	8015220 <HAL_I2C_Mem_Read+0x160>
 8015244:	2c00      	cmp	r4, #0
 8015246:	d0eb      	beq.n	8015220 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015248:	682a      	ldr	r2, [r5, #0]
 801524a:	e001      	b.n	8015250 <HAL_I2C_Mem_Read+0x190>
    if (Timeout != HAL_MAX_DELAY)
 801524c:	1c63      	adds	r3, r4, #1
 801524e:	d1f4      	bne.n	801523a <HAL_I2C_Mem_Read+0x17a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015250:	4649      	mov	r1, r9
 8015252:	6993      	ldr	r3, [r2, #24]
 8015254:	4219      	tst	r1, r3
 8015256:	d0f9      	beq.n	801524c <HAL_I2C_Mem_Read+0x18c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015258:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801525a:	2bff      	cmp	r3, #255	; 0xff
 801525c:	d92e      	bls.n	80152bc <HAL_I2C_Mem_Read+0x1fc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801525e:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8015260:	4651      	mov	r1, sl
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015262:	852b      	strh	r3, [r5, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8015264:	6853      	ldr	r3, [r2, #4]
 8015266:	400b      	ands	r3, r1
 8015268:	4641      	mov	r1, r8
 801526a:	430b      	orrs	r3, r1
 801526c:	4932      	ldr	r1, [pc, #200]	; (8015338 <HAL_I2C_Mem_Read+0x278>)
 801526e:	430b      	orrs	r3, r1
 8015270:	6053      	str	r3, [r2, #4]
}
 8015272:	e7bc      	b.n	80151ee <HAL_I2C_Mem_Read+0x12e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8015274:	9e01      	ldr	r6, [sp, #4]
 8015276:	682b      	ldr	r3, [r5, #0]
 8015278:	0a32      	lsrs	r2, r6, #8
 801527a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801527c:	0021      	movs	r1, r4
 801527e:	003a      	movs	r2, r7
 8015280:	0028      	movs	r0, r5
 8015282:	f7ff fd33 	bl	8014cec <I2C_WaitOnTXISFlagUntilTimeout>
 8015286:	2800      	cmp	r0, #0
 8015288:	d149      	bne.n	801531e <HAL_I2C_Mem_Read+0x25e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801528a:	682a      	ldr	r2, [r5, #0]
 801528c:	b2f3      	uxtb	r3, r6
 801528e:	6293      	str	r3, [r2, #40]	; 0x28
 8015290:	e779      	b.n	8015186 <HAL_I2C_Mem_Read+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015292:	003a      	movs	r2, r7
 8015294:	0021      	movs	r1, r4
 8015296:	0028      	movs	r0, r5
 8015298:	f7ff fd54 	bl	8014d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 801529c:	2800      	cmp	r0, #0
 801529e:	d143      	bne.n	8015328 <HAL_I2C_Mem_Read+0x268>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80152a0:	2120      	movs	r1, #32
 80152a2:	682b      	ldr	r3, [r5, #0]
    I2C_RESET_CR2(hi2c);
 80152a4:	4c25      	ldr	r4, [pc, #148]	; (801533c <HAL_I2C_Mem_Read+0x27c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80152a6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80152a8:	685a      	ldr	r2, [r3, #4]
 80152aa:	4022      	ands	r2, r4
 80152ac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80152ae:	2341      	movs	r3, #65	; 0x41
 80152b0:	54e9      	strb	r1, [r5, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80152b2:	3301      	adds	r3, #1
 80152b4:	54e8      	strb	r0, [r5, r3]
    __HAL_UNLOCK(hi2c);
 80152b6:	3b02      	subs	r3, #2
 80152b8:	54e8      	strb	r0, [r5, r3]
    return HAL_OK;
 80152ba:	e7a1      	b.n	8015200 <HAL_I2C_Mem_Read+0x140>
  MODIFY_REG(hi2c->Instance->CR2, \
 80152bc:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 80152be:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80152c0:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80152c2:	b29b      	uxth	r3, r3
 80152c4:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80152c6:	b2db      	uxtb	r3, r3
 80152c8:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80152ca:	4303      	orrs	r3, r0
 80152cc:	4650      	mov	r0, sl
 80152ce:	4001      	ands	r1, r0
 80152d0:	430b      	orrs	r3, r1
 80152d2:	2180      	movs	r1, #128	; 0x80
 80152d4:	0489      	lsls	r1, r1, #18
 80152d6:	430b      	orrs	r3, r1
 80152d8:	6053      	str	r3, [r2, #4]
}
 80152da:	e788      	b.n	80151ee <HAL_I2C_Mem_Read+0x12e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80152dc:	f7fe fda2 	bl	8013e24 <HAL_GetTick>
 80152e0:	1bc0      	subs	r0, r0, r7
 80152e2:	4284      	cmp	r4, r0
 80152e4:	d312      	bcc.n	801530c <HAL_I2C_Mem_Read+0x24c>
 80152e6:	2c00      	cmp	r4, #0
 80152e8:	d010      	beq.n	801530c <HAL_I2C_Mem_Read+0x24c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80152ea:	682a      	ldr	r2, [r5, #0]
 80152ec:	e750      	b.n	8015190 <HAL_I2C_Mem_Read+0xd0>
      hi2c->XferSize = hi2c->XferCount;
 80152ee:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80152f0:	480e      	ldr	r0, [pc, #56]	; (801532c <HAL_I2C_Mem_Read+0x26c>)
 80152f2:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80152f4:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80152f6:	4001      	ands	r1, r0
 80152f8:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 80152fa:	852b      	strh	r3, [r5, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80152fc:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80152fe:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8015300:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8015302:	430b      	orrs	r3, r1
 8015304:	490e      	ldr	r1, [pc, #56]	; (8015340 <HAL_I2C_Mem_Read+0x280>)
 8015306:	430b      	orrs	r3, r1
 8015308:	6053      	str	r3, [r2, #4]
}
 801530a:	e752      	b.n	80151b2 <HAL_I2C_Mem_Read+0xf2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801530c:	2220      	movs	r2, #32
 801530e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015310:	4313      	orrs	r3, r2
 8015312:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8015314:	2341      	movs	r3, #65	; 0x41
 8015316:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8015318:	2200      	movs	r2, #0
 801531a:	3301      	adds	r3, #1
 801531c:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 801531e:	2340      	movs	r3, #64	; 0x40
 8015320:	2200      	movs	r2, #0
      return HAL_ERROR;
 8015322:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8015324:	54ea      	strb	r2, [r5, r3]
      return HAL_ERROR;
 8015326:	e76b      	b.n	8015200 <HAL_I2C_Mem_Read+0x140>
      return HAL_ERROR;
 8015328:	2001      	movs	r0, #1
 801532a:	e769      	b.n	8015200 <HAL_I2C_Mem_Read+0x140>
 801532c:	fc009800 	.word	0xfc009800
 8015330:	01ff2400 	.word	0x01ff2400
 8015334:	fc009c00 	.word	0xfc009c00
 8015338:	01ff0000 	.word	0x01ff0000
 801533c:	fe00e800 	.word	0xfe00e800
 8015340:	02002400 	.word	0x02002400

08015344 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8015344:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015346:	2441      	movs	r4, #65	; 0x41
 8015348:	5d03      	ldrb	r3, [r0, r4]
{
 801534a:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 801534c:	b2dd      	uxtb	r5, r3
 801534e:	2b20      	cmp	r3, #32
 8015350:	d11a      	bne.n	8015388 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015352:	2640      	movs	r6, #64	; 0x40
 8015354:	5d83      	ldrb	r3, [r0, r6]
 8015356:	2b01      	cmp	r3, #1
 8015358:	d016      	beq.n	8015388 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 801535a:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801535c:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 801535e:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8015360:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8015362:	490a      	ldr	r1, [pc, #40]	; (801538c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8015364:	681a      	ldr	r2, [r3, #0]
 8015366:	43ba      	bics	r2, r7
 8015368:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	400a      	ands	r2, r1
 801536e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8015370:	4662      	mov	r2, ip
 8015372:	6819      	ldr	r1, [r3, #0]
 8015374:	4311      	orrs	r1, r2
 8015376:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	433a      	orrs	r2, r7
 801537c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801537e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8015380:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8015382:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8015384:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8015386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8015388:	2002      	movs	r0, #2
 801538a:	e7fc      	b.n	8015386 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 801538c:	ffffefff 	.word	0xffffefff

08015390 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8015390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015392:	46ce      	mov	lr, r9
 8015394:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015396:	2441      	movs	r4, #65	; 0x41
{
 8015398:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 801539a:	5d03      	ldrb	r3, [r0, r4]
 801539c:	b2dd      	uxtb	r5, r3
 801539e:	2b20      	cmp	r3, #32
 80153a0:	d11f      	bne.n	80153e2 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80153a2:	2640      	movs	r6, #64	; 0x40
 80153a4:	5d83      	ldrb	r3, [r0, r6]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d01b      	beq.n	80153e2 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80153aa:	2324      	movs	r3, #36	; 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80153ac:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80153ae:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80153b0:	6802      	ldr	r2, [r0, #0]
 80153b2:	46b9      	mov	r9, r7
 80153b4:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80153b6:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 80153b8:	43bb      	bics	r3, r7
 80153ba:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80153bc:	6813      	ldr	r3, [r2, #0]
 80153be:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 80153c0:	4647      	mov	r7, r8
 80153c2:	4b09      	ldr	r3, [pc, #36]	; (80153e8 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 80153c4:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 80153c6:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80153c8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80153ca:	4649      	mov	r1, r9
 80153cc:	6813      	ldr	r3, [r2, #0]
 80153ce:	430b      	orrs	r3, r1
 80153d0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80153d2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80153d4:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80153d6:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80153d8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80153da:	bcc0      	pop	{r6, r7}
 80153dc:	46b9      	mov	r9, r7
 80153de:	46b0      	mov	r8, r6
 80153e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80153e2:	2002      	movs	r0, #2
 80153e4:	e7f9      	b.n	80153da <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 80153e6:	46c0      	nop			; (mov r8, r8)
 80153e8:	fffff0ff 	.word	0xfffff0ff

080153ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80153ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80153ee:	4c13      	ldr	r4, [pc, #76]	; (801543c <HAL_PWREx_ControlVoltageScaling+0x50>)
 80153f0:	4a13      	ldr	r2, [pc, #76]	; (8015440 <HAL_PWREx_ControlVoltageScaling+0x54>)
 80153f2:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80153f4:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80153f6:	4013      	ands	r3, r2
 80153f8:	4303      	orrs	r3, r0
 80153fa:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80153fc:	2380      	movs	r3, #128	; 0x80
 80153fe:	009b      	lsls	r3, r3, #2
 8015400:	4298      	cmp	r0, r3
 8015402:	d001      	beq.n	8015408 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8015404:	0028      	movs	r0, r5
 8015406:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8015408:	4b0e      	ldr	r3, [pc, #56]	; (8015444 <HAL_PWREx_ControlVoltageScaling+0x58>)
 801540a:	490f      	ldr	r1, [pc, #60]	; (8015448 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	0058      	lsls	r0, r3, #1
 8015410:	18c0      	adds	r0, r0, r3
 8015412:	0040      	lsls	r0, r0, #1
 8015414:	f7f7 fa90 	bl	800c938 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8015418:	2280      	movs	r2, #128	; 0x80
 801541a:	6963      	ldr	r3, [r4, #20]
 801541c:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 801541e:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8015420:	4213      	tst	r3, r2
 8015422:	d102      	bne.n	801542a <HAL_PWREx_ControlVoltageScaling+0x3e>
 8015424:	e7ee      	b.n	8015404 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8015426:	2800      	cmp	r0, #0
 8015428:	d005      	beq.n	8015436 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801542a:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 801542c:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801542e:	4213      	tst	r3, r2
 8015430:	d1f9      	bne.n	8015426 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8015432:	2500      	movs	r5, #0
 8015434:	e7e6      	b.n	8015404 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8015436:	2503      	movs	r5, #3
 8015438:	e7e4      	b.n	8015404 <HAL_PWREx_ControlVoltageScaling+0x18>
 801543a:	46c0      	nop			; (mov r8, r8)
 801543c:	40007000 	.word	0x40007000
 8015440:	fffff9ff 	.word	0xfffff9ff
 8015444:	200000e4 	.word	0x200000e4
 8015448:	000f4240 	.word	0x000f4240

0801544c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801544e:	46ce      	mov	lr, r9
 8015450:	4647      	mov	r7, r8
 8015452:	b580      	push	{r7, lr}
 8015454:	0004      	movs	r4, r0
 8015456:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8015458:	2800      	cmp	r0, #0
 801545a:	d100      	bne.n	801545e <HAL_RCC_OscConfig+0x12>
 801545c:	e0f4      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801545e:	6803      	ldr	r3, [r0, #0]
 8015460:	07da      	lsls	r2, r3, #31
 8015462:	d531      	bpl.n	80154c8 <HAL_RCC_OscConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8015464:	2238      	movs	r2, #56	; 0x38
 8015466:	49c7      	ldr	r1, [pc, #796]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 8015468:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801546a:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801546c:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 801546e:	2a10      	cmp	r2, #16
 8015470:	d100      	bne.n	8015474 <HAL_RCC_OscConfig+0x28>
 8015472:	e0ef      	b.n	8015654 <HAL_RCC_OscConfig+0x208>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8015474:	2a08      	cmp	r2, #8
 8015476:	d100      	bne.n	801547a <HAL_RCC_OscConfig+0x2e>
 8015478:	e0f0      	b.n	801565c <HAL_RCC_OscConfig+0x210>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801547a:	2280      	movs	r2, #128	; 0x80
 801547c:	6863      	ldr	r3, [r4, #4]
 801547e:	0252      	lsls	r2, r2, #9
 8015480:	4293      	cmp	r3, r2
 8015482:	d100      	bne.n	8015486 <HAL_RCC_OscConfig+0x3a>
 8015484:	e0fd      	b.n	8015682 <HAL_RCC_OscConfig+0x236>
 8015486:	21a0      	movs	r1, #160	; 0xa0
 8015488:	02c9      	lsls	r1, r1, #11
 801548a:	428b      	cmp	r3, r1
 801548c:	d100      	bne.n	8015490 <HAL_RCC_OscConfig+0x44>
 801548e:	e1d0      	b.n	8015832 <HAL_RCC_OscConfig+0x3e6>
 8015490:	4dbc      	ldr	r5, [pc, #752]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 8015492:	49bd      	ldr	r1, [pc, #756]	; (8015788 <HAL_RCC_OscConfig+0x33c>)
 8015494:	682a      	ldr	r2, [r5, #0]
 8015496:	400a      	ands	r2, r1
 8015498:	602a      	str	r2, [r5, #0]
 801549a:	682a      	ldr	r2, [r5, #0]
 801549c:	49bb      	ldr	r1, [pc, #748]	; (801578c <HAL_RCC_OscConfig+0x340>)
 801549e:	400a      	ands	r2, r1
 80154a0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d000      	beq.n	80154a8 <HAL_RCC_OscConfig+0x5c>
 80154a6:	e0f0      	b.n	801568a <HAL_RCC_OscConfig+0x23e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80154a8:	f7fe fcbc 	bl	8013e24 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80154ac:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80154ae:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80154b0:	02bf      	lsls	r7, r7, #10
 80154b2:	e005      	b.n	80154c0 <HAL_RCC_OscConfig+0x74>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80154b4:	f7fe fcb6 	bl	8013e24 <HAL_GetTick>
 80154b8:	1b80      	subs	r0, r0, r6
 80154ba:	2864      	cmp	r0, #100	; 0x64
 80154bc:	d900      	bls.n	80154c0 <HAL_RCC_OscConfig+0x74>
 80154be:	e138      	b.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80154c0:	682b      	ldr	r3, [r5, #0]
 80154c2:	423b      	tst	r3, r7
 80154c4:	d1f6      	bne.n	80154b4 <HAL_RCC_OscConfig+0x68>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80154c6:	6823      	ldr	r3, [r4, #0]
 80154c8:	079a      	lsls	r2, r3, #30
 80154ca:	d52b      	bpl.n	8015524 <HAL_RCC_OscConfig+0xd8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80154cc:	2338      	movs	r3, #56	; 0x38
 80154ce:	4aad      	ldr	r2, [pc, #692]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 80154d0:	6891      	ldr	r1, [r2, #8]
 80154d2:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80154d4:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80154d6:	2b10      	cmp	r3, #16
 80154d8:	d100      	bne.n	80154dc <HAL_RCC_OscConfig+0x90>
 80154da:	e0e7      	b.n	80156ac <HAL_RCC_OscConfig+0x260>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d000      	beq.n	80154e2 <HAL_RCC_OscConfig+0x96>
 80154e0:	e0e9      	b.n	80156b6 <HAL_RCC_OscConfig+0x26a>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80154e2:	6813      	ldr	r3, [r2, #0]
 80154e4:	055b      	lsls	r3, r3, #21
 80154e6:	d500      	bpl.n	80154ea <HAL_RCC_OscConfig+0x9e>
 80154e8:	e0aa      	b.n	8015640 <HAL_RCC_OscConfig+0x1f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80154ea:	6851      	ldr	r1, [r2, #4]
 80154ec:	6963      	ldr	r3, [r4, #20]
 80154ee:	48a8      	ldr	r0, [pc, #672]	; (8015790 <HAL_RCC_OscConfig+0x344>)
 80154f0:	021b      	lsls	r3, r3, #8
 80154f2:	4001      	ands	r1, r0
 80154f4:	430b      	orrs	r3, r1
 80154f6:	6053      	str	r3, [r2, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80154f8:	4aa2      	ldr	r2, [pc, #648]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 80154fa:	49a6      	ldr	r1, [pc, #664]	; (8015794 <HAL_RCC_OscConfig+0x348>)
 80154fc:	6813      	ldr	r3, [r2, #0]
 80154fe:	400b      	ands	r3, r1
 8015500:	6921      	ldr	r1, [r4, #16]
 8015502:	430b      	orrs	r3, r1
 8015504:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8015506:	6813      	ldr	r3, [r2, #0]
 8015508:	4aa3      	ldr	r2, [pc, #652]	; (8015798 <HAL_RCC_OscConfig+0x34c>)
 801550a:	049b      	lsls	r3, r3, #18
 801550c:	0f5b      	lsrs	r3, r3, #29
 801550e:	40da      	lsrs	r2, r3
 8015510:	49a2      	ldr	r1, [pc, #648]	; (801579c <HAL_RCC_OscConfig+0x350>)
 8015512:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8015514:	4ba2      	ldr	r3, [pc, #648]	; (80157a0 <HAL_RCC_OscConfig+0x354>)
 8015516:	6818      	ldr	r0, [r3, #0]
 8015518:	f7fe fb3a 	bl	8013b90 <HAL_InitTick>
 801551c:	2800      	cmp	r0, #0
 801551e:	d000      	beq.n	8015522 <HAL_RCC_OscConfig+0xd6>
 8015520:	e092      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015522:	6823      	ldr	r3, [r4, #0]
 8015524:	071a      	lsls	r2, r3, #28
 8015526:	d46d      	bmi.n	8015604 <HAL_RCC_OscConfig+0x1b8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015528:	075b      	lsls	r3, r3, #29
 801552a:	d545      	bpl.n	80155b8 <HAL_RCC_OscConfig+0x16c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 801552c:	2338      	movs	r3, #56	; 0x38
 801552e:	4a95      	ldr	r2, [pc, #596]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 8015530:	6891      	ldr	r1, [r2, #8]
 8015532:	400b      	ands	r3, r1
 8015534:	2b20      	cmp	r3, #32
 8015536:	d100      	bne.n	801553a <HAL_RCC_OscConfig+0xee>
 8015538:	e0e3      	b.n	8015702 <HAL_RCC_OscConfig+0x2b6>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801553a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 801553c:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801553e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8015540:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8015542:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8015544:	4219      	tst	r1, r3
 8015546:	d108      	bne.n	801555a <HAL_RCC_OscConfig+0x10e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8015548:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 801554a:	4319      	orrs	r1, r3
 801554c:	63d1      	str	r1, [r2, #60]	; 0x3c
 801554e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8015550:	4013      	ands	r3, r2
 8015552:	9301      	str	r3, [sp, #4]
 8015554:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8015556:	2301      	movs	r3, #1
 8015558:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801555a:	2780      	movs	r7, #128	; 0x80
 801555c:	4e91      	ldr	r6, [pc, #580]	; (80157a4 <HAL_RCC_OscConfig+0x358>)
 801555e:	007f      	lsls	r7, r7, #1
 8015560:	6833      	ldr	r3, [r6, #0]
 8015562:	423b      	tst	r3, r7
 8015564:	d100      	bne.n	8015568 <HAL_RCC_OscConfig+0x11c>
 8015566:	e0d5      	b.n	8015714 <HAL_RCC_OscConfig+0x2c8>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015568:	68a3      	ldr	r3, [r4, #8]
 801556a:	2b01      	cmp	r3, #1
 801556c:	d100      	bne.n	8015570 <HAL_RCC_OscConfig+0x124>
 801556e:	e123      	b.n	80157b8 <HAL_RCC_OscConfig+0x36c>
 8015570:	2b05      	cmp	r3, #5
 8015572:	d100      	bne.n	8015576 <HAL_RCC_OscConfig+0x12a>
 8015574:	e1ba      	b.n	80158ec <HAL_RCC_OscConfig+0x4a0>
 8015576:	2101      	movs	r1, #1
 8015578:	4e82      	ldr	r6, [pc, #520]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 801557a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 801557c:	438a      	bics	r2, r1
 801557e:	65f2      	str	r2, [r6, #92]	; 0x5c
 8015580:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8015582:	3103      	adds	r1, #3
 8015584:	438a      	bics	r2, r1
 8015586:	65f2      	str	r2, [r6, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015588:	2b00      	cmp	r3, #0
 801558a:	d000      	beq.n	801558e <HAL_RCC_OscConfig+0x142>
 801558c:	e118      	b.n	80157c0 <HAL_RCC_OscConfig+0x374>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801558e:	f7fe fc49 	bl	8013e24 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015592:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8015594:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8015596:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015598:	4d83      	ldr	r5, [pc, #524]	; (80157a8 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801559a:	e005      	b.n	80155a8 <HAL_RCC_OscConfig+0x15c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801559c:	f7fe fc42 	bl	8013e24 <HAL_GetTick>
 80155a0:	1bc0      	subs	r0, r0, r7
 80155a2:	42a8      	cmp	r0, r5
 80155a4:	d900      	bls.n	80155a8 <HAL_RCC_OscConfig+0x15c>
 80155a6:	e0c4      	b.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80155a8:	4642      	mov	r2, r8
 80155aa:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 80155ac:	421a      	tst	r2, r3
 80155ae:	d1f5      	bne.n	801559c <HAL_RCC_OscConfig+0x150>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80155b0:	464b      	mov	r3, r9
 80155b2:	2b01      	cmp	r3, #1
 80155b4:	d100      	bne.n	80155b8 <HAL_RCC_OscConfig+0x16c>
 80155b6:	e155      	b.n	8015864 <HAL_RCC_OscConfig+0x418>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80155b8:	69e3      	ldr	r3, [r4, #28]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d020      	beq.n	8015600 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80155be:	2238      	movs	r2, #56	; 0x38
 80155c0:	4d70      	ldr	r5, [pc, #448]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 80155c2:	68a9      	ldr	r1, [r5, #8]
 80155c4:	400a      	ands	r2, r1
 80155c6:	2a10      	cmp	r2, #16
 80155c8:	d100      	bne.n	80155cc <HAL_RCC_OscConfig+0x180>
 80155ca:	e10b      	b.n	80157e4 <HAL_RCC_OscConfig+0x398>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80155cc:	2b02      	cmp	r3, #2
 80155ce:	d100      	bne.n	80155d2 <HAL_RCC_OscConfig+0x186>
 80155d0:	e14e      	b.n	8015870 <HAL_RCC_OscConfig+0x424>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80155d2:	682b      	ldr	r3, [r5, #0]
 80155d4:	4a75      	ldr	r2, [pc, #468]	; (80157ac <HAL_RCC_OscConfig+0x360>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80155d6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80155d8:	4013      	ands	r3, r2
 80155da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80155dc:	f7fe fc22 	bl	8013e24 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80155e0:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80155e2:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80155e4:	e005      	b.n	80155f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80155e6:	f7fe fc1d 	bl	8013e24 <HAL_GetTick>
 80155ea:	1b00      	subs	r0, r0, r4
 80155ec:	2802      	cmp	r0, #2
 80155ee:	d900      	bls.n	80155f2 <HAL_RCC_OscConfig+0x1a6>
 80155f0:	e09f      	b.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80155f2:	682b      	ldr	r3, [r5, #0]
 80155f4:	4233      	tst	r3, r6
 80155f6:	d1f6      	bne.n	80155e6 <HAL_RCC_OscConfig+0x19a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80155f8:	68eb      	ldr	r3, [r5, #12]
 80155fa:	4a6d      	ldr	r2, [pc, #436]	; (80157b0 <HAL_RCC_OscConfig+0x364>)
 80155fc:	4013      	ands	r3, r2
 80155fe:	60eb      	str	r3, [r5, #12]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8015600:	2000      	movs	r0, #0
 8015602:	e022      	b.n	801564a <HAL_RCC_OscConfig+0x1fe>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8015604:	2238      	movs	r2, #56	; 0x38
 8015606:	4d5f      	ldr	r5, [pc, #380]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 8015608:	68a9      	ldr	r1, [r5, #8]
 801560a:	400a      	ands	r2, r1
 801560c:	2a18      	cmp	r2, #24
 801560e:	d02f      	beq.n	8015670 <HAL_RCC_OscConfig+0x224>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015610:	69a3      	ldr	r3, [r4, #24]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d100      	bne.n	8015618 <HAL_RCC_OscConfig+0x1cc>
 8015616:	e08e      	b.n	8015736 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_LSI_ENABLE();
 8015618:	2201      	movs	r2, #1
 801561a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801561c:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 801561e:	4313      	orrs	r3, r2
 8015620:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8015622:	f7fe fbff 	bl	8013e24 <HAL_GetTick>
 8015626:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8015628:	e005      	b.n	8015636 <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801562a:	f7fe fbfb 	bl	8013e24 <HAL_GetTick>
 801562e:	1b80      	subs	r0, r0, r6
 8015630:	2802      	cmp	r0, #2
 8015632:	d900      	bls.n	8015636 <HAL_RCC_OscConfig+0x1ea>
 8015634:	e07d      	b.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8015636:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8015638:	421f      	tst	r7, r3
 801563a:	d0f6      	beq.n	801562a <HAL_RCC_OscConfig+0x1de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801563c:	6823      	ldr	r3, [r4, #0]
 801563e:	e773      	b.n	8015528 <HAL_RCC_OscConfig+0xdc>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015640:	68e3      	ldr	r3, [r4, #12]
 8015642:	2b00      	cmp	r3, #0
 8015644:	d000      	beq.n	8015648 <HAL_RCC_OscConfig+0x1fc>
 8015646:	e750      	b.n	80154ea <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 8015648:	2001      	movs	r0, #1
}
 801564a:	b003      	add	sp, #12
 801564c:	bcc0      	pop	{r6, r7}
 801564e:	46b9      	mov	r9, r7
 8015650:	46b0      	mov	r8, r6
 8015652:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8015654:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8015656:	0789      	lsls	r1, r1, #30
 8015658:	d000      	beq.n	801565c <HAL_RCC_OscConfig+0x210>
 801565a:	e70e      	b.n	801547a <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801565c:	4a49      	ldr	r2, [pc, #292]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 801565e:	6812      	ldr	r2, [r2, #0]
 8015660:	0392      	lsls	r2, r2, #14
 8015662:	d400      	bmi.n	8015666 <HAL_RCC_OscConfig+0x21a>
 8015664:	e730      	b.n	80154c8 <HAL_RCC_OscConfig+0x7c>
 8015666:	6862      	ldr	r2, [r4, #4]
 8015668:	2a00      	cmp	r2, #0
 801566a:	d000      	beq.n	801566e <HAL_RCC_OscConfig+0x222>
 801566c:	e72c      	b.n	80154c8 <HAL_RCC_OscConfig+0x7c>
 801566e:	e7eb      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8015670:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8015672:	0792      	lsls	r2, r2, #30
 8015674:	d400      	bmi.n	8015678 <HAL_RCC_OscConfig+0x22c>
 8015676:	e757      	b.n	8015528 <HAL_RCC_OscConfig+0xdc>
 8015678:	69a2      	ldr	r2, [r4, #24]
 801567a:	2a00      	cmp	r2, #0
 801567c:	d000      	beq.n	8015680 <HAL_RCC_OscConfig+0x234>
 801567e:	e753      	b.n	8015528 <HAL_RCC_OscConfig+0xdc>
 8015680:	e7e2      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015682:	4a40      	ldr	r2, [pc, #256]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 8015684:	6811      	ldr	r1, [r2, #0]
 8015686:	430b      	orrs	r3, r1
 8015688:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801568a:	f7fe fbcb 	bl	8013e24 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801568e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8015690:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015692:	4f3c      	ldr	r7, [pc, #240]	; (8015784 <HAL_RCC_OscConfig+0x338>)
 8015694:	02b6      	lsls	r6, r6, #10
 8015696:	e004      	b.n	80156a2 <HAL_RCC_OscConfig+0x256>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015698:	f7fe fbc4 	bl	8013e24 <HAL_GetTick>
 801569c:	1b40      	subs	r0, r0, r5
 801569e:	2864      	cmp	r0, #100	; 0x64
 80156a0:	d847      	bhi.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	4233      	tst	r3, r6
 80156a6:	d0f7      	beq.n	8015698 <HAL_RCC_OscConfig+0x24c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80156a8:	6823      	ldr	r3, [r4, #0]
 80156aa:	e70d      	b.n	80154c8 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80156ac:	3b0d      	subs	r3, #13
 80156ae:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80156b0:	2b02      	cmp	r3, #2
 80156b2:	d100      	bne.n	80156b6 <HAL_RCC_OscConfig+0x26a>
 80156b4:	e0c7      	b.n	8015846 <HAL_RCC_OscConfig+0x3fa>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80156b6:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80156b8:	4d32      	ldr	r5, [pc, #200]	; (8015784 <HAL_RCC_OscConfig+0x338>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d04e      	beq.n	801575c <HAL_RCC_OscConfig+0x310>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80156be:	682b      	ldr	r3, [r5, #0]
 80156c0:	4a34      	ldr	r2, [pc, #208]	; (8015794 <HAL_RCC_OscConfig+0x348>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80156c2:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80156c4:	4013      	ands	r3, r2
 80156c6:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80156c8:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80156ca:	4313      	orrs	r3, r2
 80156cc:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80156ce:	2380      	movs	r3, #128	; 0x80
 80156d0:	682a      	ldr	r2, [r5, #0]
 80156d2:	005b      	lsls	r3, r3, #1
 80156d4:	4313      	orrs	r3, r2
 80156d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80156d8:	f7fe fba4 	bl	8013e24 <HAL_GetTick>
 80156dc:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80156de:	e004      	b.n	80156ea <HAL_RCC_OscConfig+0x29e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80156e0:	f7fe fba0 	bl	8013e24 <HAL_GetTick>
 80156e4:	1b80      	subs	r0, r0, r6
 80156e6:	2802      	cmp	r0, #2
 80156e8:	d823      	bhi.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80156ea:	682b      	ldr	r3, [r5, #0]
 80156ec:	423b      	tst	r3, r7
 80156ee:	d0f7      	beq.n	80156e0 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80156f0:	686a      	ldr	r2, [r5, #4]
 80156f2:	6963      	ldr	r3, [r4, #20]
 80156f4:	4926      	ldr	r1, [pc, #152]	; (8015790 <HAL_RCC_OscConfig+0x344>)
 80156f6:	021b      	lsls	r3, r3, #8
 80156f8:	400a      	ands	r2, r1
 80156fa:	4313      	orrs	r3, r2
 80156fc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80156fe:	6823      	ldr	r3, [r4, #0]
 8015700:	e710      	b.n	8015524 <HAL_RCC_OscConfig+0xd8>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8015702:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8015704:	079b      	lsls	r3, r3, #30
 8015706:	d400      	bmi.n	801570a <HAL_RCC_OscConfig+0x2be>
 8015708:	e756      	b.n	80155b8 <HAL_RCC_OscConfig+0x16c>
 801570a:	68a3      	ldr	r3, [r4, #8]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d000      	beq.n	8015712 <HAL_RCC_OscConfig+0x2c6>
 8015710:	e752      	b.n	80155b8 <HAL_RCC_OscConfig+0x16c>
 8015712:	e799      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015714:	6833      	ldr	r3, [r6, #0]
 8015716:	433b      	orrs	r3, r7
 8015718:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 801571a:	f7fe fb83 	bl	8013e24 <HAL_GetTick>
 801571e:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8015720:	6833      	ldr	r3, [r6, #0]
 8015722:	423b      	tst	r3, r7
 8015724:	d000      	beq.n	8015728 <HAL_RCC_OscConfig+0x2dc>
 8015726:	e71f      	b.n	8015568 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015728:	f7fe fb7c 	bl	8013e24 <HAL_GetTick>
 801572c:	1b40      	subs	r0, r0, r5
 801572e:	2802      	cmp	r0, #2
 8015730:	d9f6      	bls.n	8015720 <HAL_RCC_OscConfig+0x2d4>
            return HAL_TIMEOUT;
 8015732:	2003      	movs	r0, #3
 8015734:	e789      	b.n	801564a <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_LSI_DISABLE();
 8015736:	2201      	movs	r2, #1
 8015738:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801573a:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 801573c:	4393      	bics	r3, r2
 801573e:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8015740:	f7fe fb70 	bl	8013e24 <HAL_GetTick>
 8015744:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8015746:	e004      	b.n	8015752 <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015748:	f7fe fb6c 	bl	8013e24 <HAL_GetTick>
 801574c:	1b80      	subs	r0, r0, r6
 801574e:	2802      	cmp	r0, #2
 8015750:	d8ef      	bhi.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8015752:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8015754:	421f      	tst	r7, r3
 8015756:	d1f7      	bne.n	8015748 <HAL_RCC_OscConfig+0x2fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015758:	6823      	ldr	r3, [r4, #0]
 801575a:	e6e5      	b.n	8015528 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 801575c:	682b      	ldr	r3, [r5, #0]
 801575e:	4a15      	ldr	r2, [pc, #84]	; (80157b4 <HAL_RCC_OscConfig+0x368>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8015760:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8015762:	4013      	ands	r3, r2
 8015764:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8015766:	f7fe fb5d 	bl	8013e24 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801576a:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 801576c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801576e:	e004      	b.n	801577a <HAL_RCC_OscConfig+0x32e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8015770:	f7fe fb58 	bl	8013e24 <HAL_GetTick>
 8015774:	1b80      	subs	r0, r0, r6
 8015776:	2802      	cmp	r0, #2
 8015778:	d8db      	bhi.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801577a:	682b      	ldr	r3, [r5, #0]
 801577c:	423b      	tst	r3, r7
 801577e:	d1f7      	bne.n	8015770 <HAL_RCC_OscConfig+0x324>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015780:	6823      	ldr	r3, [r4, #0]
 8015782:	e6cf      	b.n	8015524 <HAL_RCC_OscConfig+0xd8>
 8015784:	40021000 	.word	0x40021000
 8015788:	fffeffff 	.word	0xfffeffff
 801578c:	fffbffff 	.word	0xfffbffff
 8015790:	ffff80ff 	.word	0xffff80ff
 8015794:	ffffc7ff 	.word	0xffffc7ff
 8015798:	00f42400 	.word	0x00f42400
 801579c:	200000e4 	.word	0x200000e4
 80157a0:	200000ec 	.word	0x200000ec
 80157a4:	40007000 	.word	0x40007000
 80157a8:	00001388 	.word	0x00001388
 80157ac:	feffffff 	.word	0xfeffffff
 80157b0:	effefffc 	.word	0xeffefffc
 80157b4:	fffffeff 	.word	0xfffffeff
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80157b8:	4951      	ldr	r1, [pc, #324]	; (8015900 <HAL_RCC_OscConfig+0x4b4>)
 80157ba:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80157bc:	4313      	orrs	r3, r2
 80157be:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80157c0:	f7fe fb30 	bl	8013e24 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80157c4:	4b4e      	ldr	r3, [pc, #312]	; (8015900 <HAL_RCC_OscConfig+0x4b4>)
        tickstart = HAL_GetTick();
 80157c6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80157c8:	4698      	mov	r8, r3
 80157ca:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80157cc:	4d4d      	ldr	r5, [pc, #308]	; (8015904 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80157ce:	e004      	b.n	80157da <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80157d0:	f7fe fb28 	bl	8013e24 <HAL_GetTick>
 80157d4:	1b80      	subs	r0, r0, r6
 80157d6:	42a8      	cmp	r0, r5
 80157d8:	d8ab      	bhi.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80157da:	4643      	mov	r3, r8
 80157dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157de:	421f      	tst	r7, r3
 80157e0:	d0f6      	beq.n	80157d0 <HAL_RCC_OscConfig+0x384>
 80157e2:	e6e5      	b.n	80155b0 <HAL_RCC_OscConfig+0x164>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	d100      	bne.n	80157ea <HAL_RCC_OscConfig+0x39e>
 80157e8:	e72e      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80157ea:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80157ec:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80157ee:	6a21      	ldr	r1, [r4, #32]
 80157f0:	4013      	ands	r3, r2
 80157f2:	428b      	cmp	r3, r1
 80157f4:	d000      	beq.n	80157f8 <HAL_RCC_OscConfig+0x3ac>
 80157f6:	e727      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80157f8:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80157fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80157fc:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80157fe:	428b      	cmp	r3, r1
 8015800:	d000      	beq.n	8015804 <HAL_RCC_OscConfig+0x3b8>
 8015802:	e721      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8015804:	21fe      	movs	r1, #254	; 0xfe
 8015806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015808:	01c9      	lsls	r1, r1, #7
 801580a:	4011      	ands	r1, r2
 801580c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801580e:	4299      	cmp	r1, r3
 8015810:	d000      	beq.n	8015814 <HAL_RCC_OscConfig+0x3c8>
 8015812:	e719      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8015814:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8015816:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8015818:	039b      	lsls	r3, r3, #14
 801581a:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801581c:	428b      	cmp	r3, r1
 801581e:	d000      	beq.n	8015822 <HAL_RCC_OscConfig+0x3d6>
 8015820:	e712      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8015822:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8015824:	0f52      	lsrs	r2, r2, #29
 8015826:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8015828:	429a      	cmp	r2, r3
 801582a:	d000      	beq.n	801582e <HAL_RCC_OscConfig+0x3e2>
 801582c:	e70c      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
  return HAL_OK;
 801582e:	2000      	movs	r0, #0
 8015830:	e70b      	b.n	801564a <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015832:	2180      	movs	r1, #128	; 0x80
 8015834:	4b32      	ldr	r3, [pc, #200]	; (8015900 <HAL_RCC_OscConfig+0x4b4>)
 8015836:	02c9      	lsls	r1, r1, #11
 8015838:	6818      	ldr	r0, [r3, #0]
 801583a:	4301      	orrs	r1, r0
 801583c:	6019      	str	r1, [r3, #0]
 801583e:	6819      	ldr	r1, [r3, #0]
 8015840:	430a      	orrs	r2, r1
 8015842:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8015844:	e721      	b.n	801568a <HAL_RCC_OscConfig+0x23e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8015846:	6813      	ldr	r3, [r2, #0]
 8015848:	055b      	lsls	r3, r3, #21
 801584a:	d503      	bpl.n	8015854 <HAL_RCC_OscConfig+0x408>
 801584c:	68e3      	ldr	r3, [r4, #12]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d100      	bne.n	8015854 <HAL_RCC_OscConfig+0x408>
 8015852:	e6f9      	b.n	8015648 <HAL_RCC_OscConfig+0x1fc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015854:	6851      	ldr	r1, [r2, #4]
 8015856:	6963      	ldr	r3, [r4, #20]
 8015858:	482b      	ldr	r0, [pc, #172]	; (8015908 <HAL_RCC_OscConfig+0x4bc>)
 801585a:	021b      	lsls	r3, r3, #8
 801585c:	4001      	ands	r1, r0
 801585e:	430b      	orrs	r3, r1
 8015860:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015862:	e657      	b.n	8015514 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_PWR_CLK_DISABLE();
 8015864:	4a26      	ldr	r2, [pc, #152]	; (8015900 <HAL_RCC_OscConfig+0x4b4>)
 8015866:	4929      	ldr	r1, [pc, #164]	; (801590c <HAL_RCC_OscConfig+0x4c0>)
 8015868:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801586a:	400b      	ands	r3, r1
 801586c:	63d3      	str	r3, [r2, #60]	; 0x3c
 801586e:	e6a3      	b.n	80155b8 <HAL_RCC_OscConfig+0x16c>
        __HAL_RCC_PLL_DISABLE();
 8015870:	682b      	ldr	r3, [r5, #0]
 8015872:	4a27      	ldr	r2, [pc, #156]	; (8015910 <HAL_RCC_OscConfig+0x4c4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015874:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8015876:	4013      	ands	r3, r2
 8015878:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 801587a:	f7fe fad3 	bl	8013e24 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801587e:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8015880:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015882:	e005      	b.n	8015890 <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8015884:	f7fe face 	bl	8013e24 <HAL_GetTick>
 8015888:	1b80      	subs	r0, r0, r6
 801588a:	2802      	cmp	r0, #2
 801588c:	d900      	bls.n	8015890 <HAL_RCC_OscConfig+0x444>
 801588e:	e750      	b.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8015890:	682b      	ldr	r3, [r5, #0]
 8015892:	423b      	tst	r3, r7
 8015894:	d1f6      	bne.n	8015884 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015896:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015898:	6a23      	ldr	r3, [r4, #32]
 801589a:	68ea      	ldr	r2, [r5, #12]
 801589c:	430b      	orrs	r3, r1
 801589e:	491d      	ldr	r1, [pc, #116]	; (8015914 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80158a0:	4e17      	ldr	r6, [pc, #92]	; (8015900 <HAL_RCC_OscConfig+0x4b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80158a2:	400a      	ands	r2, r1
 80158a4:	4313      	orrs	r3, r2
 80158a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80158a8:	4313      	orrs	r3, r2
 80158aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80158ac:	4313      	orrs	r3, r2
 80158ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80158b0:	0212      	lsls	r2, r2, #8
 80158b2:	4313      	orrs	r3, r2
 80158b4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80158b6:	2380      	movs	r3, #128	; 0x80
 80158b8:	682a      	ldr	r2, [r5, #0]
 80158ba:	045b      	lsls	r3, r3, #17
 80158bc:	4313      	orrs	r3, r2
 80158be:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80158c0:	2380      	movs	r3, #128	; 0x80
 80158c2:	68ea      	ldr	r2, [r5, #12]
 80158c4:	055b      	lsls	r3, r3, #21
 80158c6:	4313      	orrs	r3, r2
 80158c8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80158ca:	f7fe faab 	bl	8013e24 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80158ce:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80158d0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80158d2:	04ad      	lsls	r5, r5, #18
 80158d4:	e005      	b.n	80158e2 <HAL_RCC_OscConfig+0x496>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80158d6:	f7fe faa5 	bl	8013e24 <HAL_GetTick>
 80158da:	1b00      	subs	r0, r0, r4
 80158dc:	2802      	cmp	r0, #2
 80158de:	d900      	bls.n	80158e2 <HAL_RCC_OscConfig+0x496>
 80158e0:	e727      	b.n	8015732 <HAL_RCC_OscConfig+0x2e6>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80158e2:	6833      	ldr	r3, [r6, #0]
 80158e4:	422b      	tst	r3, r5
 80158e6:	d0f6      	beq.n	80158d6 <HAL_RCC_OscConfig+0x48a>
  return HAL_OK;
 80158e8:	2000      	movs	r0, #0
 80158ea:	e6ae      	b.n	801564a <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80158ec:	2104      	movs	r1, #4
 80158ee:	4b04      	ldr	r3, [pc, #16]	; (8015900 <HAL_RCC_OscConfig+0x4b4>)
 80158f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80158f2:	430a      	orrs	r2, r1
 80158f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80158f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80158f8:	3903      	subs	r1, #3
 80158fa:	430a      	orrs	r2, r1
 80158fc:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80158fe:	e75f      	b.n	80157c0 <HAL_RCC_OscConfig+0x374>
 8015900:	40021000 	.word	0x40021000
 8015904:	00001388 	.word	0x00001388
 8015908:	ffff80ff 	.word	0xffff80ff
 801590c:	efffffff 	.word	0xefffffff
 8015910:	feffffff 	.word	0xfeffffff
 8015914:	1fc1808c 	.word	0x1fc1808c

08015918 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015918:	2338      	movs	r3, #56	; 0x38
 801591a:	4a21      	ldr	r2, [pc, #132]	; (80159a0 <HAL_RCC_GetSysClockFreq+0x88>)
{
 801591c:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801591e:	6891      	ldr	r1, [r2, #8]
 8015920:	420b      	tst	r3, r1
 8015922:	d105      	bne.n	8015930 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8015924:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8015926:	481f      	ldr	r0, [pc, #124]	; (80159a4 <HAL_RCC_GetSysClockFreq+0x8c>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8015928:	049b      	lsls	r3, r3, #18
 801592a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 801592c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 801592e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8015930:	6891      	ldr	r1, [r2, #8]
 8015932:	4019      	ands	r1, r3
 8015934:	2908      	cmp	r1, #8
 8015936:	d012      	beq.n	801595e <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015938:	6891      	ldr	r1, [r2, #8]
 801593a:	4019      	ands	r1, r3
 801593c:	2910      	cmp	r1, #16
 801593e:	d010      	beq.n	8015962 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8015940:	6891      	ldr	r1, [r2, #8]
 8015942:	4019      	ands	r1, r3
 8015944:	2920      	cmp	r1, #32
 8015946:	d022      	beq.n	801598e <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8015948:	6892      	ldr	r2, [r2, #8]
 801594a:	4013      	ands	r3, r2
    sysclockfreq = 0U;
 801594c:	3b18      	subs	r3, #24
 801594e:	0018      	movs	r0, r3
 8015950:	4243      	negs	r3, r0
 8015952:	4158      	adcs	r0, r3
 8015954:	23fa      	movs	r3, #250	; 0xfa
 8015956:	4240      	negs	r0, r0
 8015958:	01db      	lsls	r3, r3, #7
 801595a:	4018      	ands	r0, r3
 801595c:	e7e7      	b.n	801592e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 801595e:	4812      	ldr	r0, [pc, #72]	; (80159a8 <HAL_RCC_GetSysClockFreq+0x90>)
 8015960:	e7e5      	b.n	801592e <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8015962:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8015964:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8015966:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8015968:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801596a:	0649      	lsls	r1, r1, #25
 801596c:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 801596e:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8015970:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8015972:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8015974:	079b      	lsls	r3, r3, #30
 8015976:	d00d      	beq.n	8015994 <HAL_RCC_GetSysClockFreq+0x7c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8015978:	480a      	ldr	r0, [pc, #40]	; (80159a4 <HAL_RCC_GetSysClockFreq+0x8c>)
 801597a:	f7f6 ffdd 	bl	800c938 <__udivsi3>
 801597e:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8015980:	4b07      	ldr	r3, [pc, #28]	; (80159a0 <HAL_RCC_GetSysClockFreq+0x88>)
 8015982:	68d9      	ldr	r1, [r3, #12]
 8015984:	0f49      	lsrs	r1, r1, #29
 8015986:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8015988:	f7f6 ffd6 	bl	800c938 <__udivsi3>
 801598c:	e7cf      	b.n	801592e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 801598e:	2080      	movs	r0, #128	; 0x80
 8015990:	0200      	lsls	r0, r0, #8
 8015992:	e7cc      	b.n	801592e <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8015994:	4804      	ldr	r0, [pc, #16]	; (80159a8 <HAL_RCC_GetSysClockFreq+0x90>)
 8015996:	f7f6 ffcf 	bl	800c938 <__udivsi3>
 801599a:	4360      	muls	r0, r4
        break;
 801599c:	e7f0      	b.n	8015980 <HAL_RCC_GetSysClockFreq+0x68>
 801599e:	46c0      	nop			; (mov r8, r8)
 80159a0:	40021000 	.word	0x40021000
 80159a4:	00f42400 	.word	0x00f42400
 80159a8:	007a1200 	.word	0x007a1200

080159ac <HAL_RCC_ClockConfig>:
{
 80159ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ae:	46ce      	mov	lr, r9
 80159b0:	4647      	mov	r7, r8
 80159b2:	0005      	movs	r5, r0
 80159b4:	000c      	movs	r4, r1
 80159b6:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80159b8:	2800      	cmp	r0, #0
 80159ba:	d026      	beq.n	8015a0a <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80159bc:	2207      	movs	r2, #7
 80159be:	4e57      	ldr	r6, [pc, #348]	; (8015b1c <HAL_RCC_ClockConfig+0x170>)
 80159c0:	6833      	ldr	r3, [r6, #0]
 80159c2:	4013      	ands	r3, r2
 80159c4:	428b      	cmp	r3, r1
 80159c6:	d35e      	bcc.n	8015a86 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80159c8:	682b      	ldr	r3, [r5, #0]
 80159ca:	079a      	lsls	r2, r3, #30
 80159cc:	d50e      	bpl.n	80159ec <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80159ce:	075a      	lsls	r2, r3, #29
 80159d0:	d505      	bpl.n	80159de <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80159d2:	22e0      	movs	r2, #224	; 0xe0
 80159d4:	4952      	ldr	r1, [pc, #328]	; (8015b20 <HAL_RCC_ClockConfig+0x174>)
 80159d6:	01d2      	lsls	r2, r2, #7
 80159d8:	6888      	ldr	r0, [r1, #8]
 80159da:	4302      	orrs	r2, r0
 80159dc:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80159de:	4950      	ldr	r1, [pc, #320]	; (8015b20 <HAL_RCC_ClockConfig+0x174>)
 80159e0:	4850      	ldr	r0, [pc, #320]	; (8015b24 <HAL_RCC_ClockConfig+0x178>)
 80159e2:	688a      	ldr	r2, [r1, #8]
 80159e4:	4002      	ands	r2, r0
 80159e6:	68a8      	ldr	r0, [r5, #8]
 80159e8:	4302      	orrs	r2, r0
 80159ea:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80159ec:	07db      	lsls	r3, r3, #31
 80159ee:	d52b      	bpl.n	8015a48 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80159f0:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80159f2:	4a4b      	ldr	r2, [pc, #300]	; (8015b20 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80159f4:	2b01      	cmp	r3, #1
 80159f6:	d100      	bne.n	80159fa <HAL_RCC_ClockConfig+0x4e>
 80159f8:	e07c      	b.n	8015af4 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80159fa:	2b02      	cmp	r3, #2
 80159fc:	d007      	beq.n	8015a0e <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d000      	beq.n	8015a04 <HAL_RCC_ClockConfig+0x58>
 8015a02:	e07d      	b.n	8015b00 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8015a04:	6812      	ldr	r2, [r2, #0]
 8015a06:	0552      	lsls	r2, r2, #21
 8015a08:	d404      	bmi.n	8015a14 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8015a0a:	2001      	movs	r0, #1
 8015a0c:	e037      	b.n	8015a7e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8015a0e:	6812      	ldr	r2, [r2, #0]
 8015a10:	0192      	lsls	r2, r2, #6
 8015a12:	d5fa      	bpl.n	8015a0a <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015a14:	2107      	movs	r1, #7
 8015a16:	4e42      	ldr	r6, [pc, #264]	; (8015b20 <HAL_RCC_ClockConfig+0x174>)
 8015a18:	68b2      	ldr	r2, [r6, #8]
 8015a1a:	438a      	bics	r2, r1
 8015a1c:	4313      	orrs	r3, r2
 8015a1e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8015a20:	f7fe fa00 	bl	8013e24 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015a24:	2338      	movs	r3, #56	; 0x38
 8015a26:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a28:	4b3f      	ldr	r3, [pc, #252]	; (8015b28 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8015a2a:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a2c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015a2e:	e004      	b.n	8015a3a <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a30:	f7fe f9f8 	bl	8013e24 <HAL_GetTick>
 8015a34:	1bc0      	subs	r0, r0, r7
 8015a36:	4548      	cmp	r0, r9
 8015a38:	d83b      	bhi.n	8015ab2 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015a3a:	4643      	mov	r3, r8
 8015a3c:	68b2      	ldr	r2, [r6, #8]
 8015a3e:	401a      	ands	r2, r3
 8015a40:	686b      	ldr	r3, [r5, #4]
 8015a42:	00db      	lsls	r3, r3, #3
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d1f3      	bne.n	8015a30 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015a48:	2207      	movs	r2, #7
 8015a4a:	4e34      	ldr	r6, [pc, #208]	; (8015b1c <HAL_RCC_ClockConfig+0x170>)
 8015a4c:	6833      	ldr	r3, [r6, #0]
 8015a4e:	4013      	ands	r3, r2
 8015a50:	42a3      	cmp	r3, r4
 8015a52:	d838      	bhi.n	8015ac6 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015a54:	682b      	ldr	r3, [r5, #0]
 8015a56:	075b      	lsls	r3, r3, #29
 8015a58:	d42d      	bmi.n	8015ab6 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8015a5a:	f7ff ff5d 	bl	8015918 <HAL_RCC_GetSysClockFreq>
 8015a5e:	4b30      	ldr	r3, [pc, #192]	; (8015b20 <HAL_RCC_ClockConfig+0x174>)
 8015a60:	4a32      	ldr	r2, [pc, #200]	; (8015b2c <HAL_RCC_ClockConfig+0x180>)
 8015a62:	689b      	ldr	r3, [r3, #8]
 8015a64:	4932      	ldr	r1, [pc, #200]	; (8015b30 <HAL_RCC_ClockConfig+0x184>)
 8015a66:	051b      	lsls	r3, r3, #20
 8015a68:	0f1b      	lsrs	r3, r3, #28
 8015a6a:	009b      	lsls	r3, r3, #2
 8015a6c:	589b      	ldr	r3, [r3, r2]
 8015a6e:	221f      	movs	r2, #31
 8015a70:	4013      	ands	r3, r2
 8015a72:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8015a74:	4b2f      	ldr	r3, [pc, #188]	; (8015b34 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8015a76:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8015a78:	6818      	ldr	r0, [r3, #0]
 8015a7a:	f7fe f889 	bl	8013b90 <HAL_InitTick>
}
 8015a7e:	bcc0      	pop	{r6, r7}
 8015a80:	46b9      	mov	r9, r7
 8015a82:	46b0      	mov	r8, r6
 8015a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015a86:	6833      	ldr	r3, [r6, #0]
 8015a88:	4393      	bics	r3, r2
 8015a8a:	430b      	orrs	r3, r1
 8015a8c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8015a8e:	f7fe f9c9 	bl	8013e24 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8015a92:	2307      	movs	r3, #7
 8015a94:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a96:	4b24      	ldr	r3, [pc, #144]	; (8015b28 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8015a98:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a9a:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8015a9c:	4642      	mov	r2, r8
 8015a9e:	6833      	ldr	r3, [r6, #0]
 8015aa0:	4013      	ands	r3, r2
 8015aa2:	42a3      	cmp	r3, r4
 8015aa4:	d100      	bne.n	8015aa8 <HAL_RCC_ClockConfig+0xfc>
 8015aa6:	e78f      	b.n	80159c8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015aa8:	f7fe f9bc 	bl	8013e24 <HAL_GetTick>
 8015aac:	1bc0      	subs	r0, r0, r7
 8015aae:	4548      	cmp	r0, r9
 8015ab0:	d9f4      	bls.n	8015a9c <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8015ab2:	2003      	movs	r0, #3
 8015ab4:	e7e3      	b.n	8015a7e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8015ab6:	4a1a      	ldr	r2, [pc, #104]	; (8015b20 <HAL_RCC_ClockConfig+0x174>)
 8015ab8:	491f      	ldr	r1, [pc, #124]	; (8015b38 <HAL_RCC_ClockConfig+0x18c>)
 8015aba:	6893      	ldr	r3, [r2, #8]
 8015abc:	400b      	ands	r3, r1
 8015abe:	68e9      	ldr	r1, [r5, #12]
 8015ac0:	430b      	orrs	r3, r1
 8015ac2:	6093      	str	r3, [r2, #8]
 8015ac4:	e7c9      	b.n	8015a5a <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015ac6:	6833      	ldr	r3, [r6, #0]
 8015ac8:	4393      	bics	r3, r2
 8015aca:	4323      	orrs	r3, r4
 8015acc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8015ace:	f7fe f9a9 	bl	8013e24 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8015ad2:	2307      	movs	r3, #7
 8015ad4:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015ad6:	4b14      	ldr	r3, [pc, #80]	; (8015b28 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8015ad8:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015ada:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8015adc:	4642      	mov	r2, r8
 8015ade:	6833      	ldr	r3, [r6, #0]
 8015ae0:	4013      	ands	r3, r2
 8015ae2:	42a3      	cmp	r3, r4
 8015ae4:	d0b6      	beq.n	8015a54 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015ae6:	f7fe f99d 	bl	8013e24 <HAL_GetTick>
 8015aea:	1bc0      	subs	r0, r0, r7
 8015aec:	4548      	cmp	r0, r9
 8015aee:	d9f5      	bls.n	8015adc <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8015af0:	2003      	movs	r0, #3
 8015af2:	e7c4      	b.n	8015a7e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8015af4:	6812      	ldr	r2, [r2, #0]
 8015af6:	0392      	lsls	r2, r2, #14
 8015af8:	d500      	bpl.n	8015afc <HAL_RCC_ClockConfig+0x150>
 8015afa:	e78b      	b.n	8015a14 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8015afc:	2001      	movs	r0, #1
 8015afe:	e7be      	b.n	8015a7e <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8015b00:	2b03      	cmp	r3, #3
 8015b02:	d005      	beq.n	8015b10 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015b04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8015b06:	0792      	lsls	r2, r2, #30
 8015b08:	d500      	bpl.n	8015b0c <HAL_RCC_ClockConfig+0x160>
 8015b0a:	e783      	b.n	8015a14 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8015b0c:	2001      	movs	r0, #1
 8015b0e:	e7b6      	b.n	8015a7e <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8015b10:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8015b12:	0792      	lsls	r2, r2, #30
 8015b14:	d500      	bpl.n	8015b18 <HAL_RCC_ClockConfig+0x16c>
 8015b16:	e77d      	b.n	8015a14 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8015b18:	2001      	movs	r0, #1
 8015b1a:	e7b0      	b.n	8015a7e <HAL_RCC_ClockConfig+0xd2>
 8015b1c:	40022000 	.word	0x40022000
 8015b20:	40021000 	.word	0x40021000
 8015b24:	fffff0ff 	.word	0xfffff0ff
 8015b28:	00001388 	.word	0x00001388
 8015b2c:	0801e124 	.word	0x0801e124
 8015b30:	200000e4 	.word	0x200000e4
 8015b34:	200000ec 	.word	0x200000ec
 8015b38:	ffff8fff 	.word	0xffff8fff

08015b3c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8015b3c:	4b06      	ldr	r3, [pc, #24]	; (8015b58 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8015b3e:	4907      	ldr	r1, [pc, #28]	; (8015b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8015b40:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8015b42:	4a07      	ldr	r2, [pc, #28]	; (8015b60 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8015b44:	045b      	lsls	r3, r3, #17
 8015b46:	0f5b      	lsrs	r3, r3, #29
 8015b48:	009b      	lsls	r3, r3, #2
 8015b4a:	585b      	ldr	r3, [r3, r1]
 8015b4c:	211f      	movs	r1, #31
 8015b4e:	6810      	ldr	r0, [r2, #0]
 8015b50:	400b      	ands	r3, r1
 8015b52:	40d8      	lsrs	r0, r3
}
 8015b54:	4770      	bx	lr
 8015b56:	46c0      	nop			; (mov r8, r8)
 8015b58:	40021000 	.word	0x40021000
 8015b5c:	0801e164 	.word	0x0801e164
 8015b60:	200000e4 	.word	0x200000e4

08015b64 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8015b64:	2307      	movs	r3, #7
{
 8015b66:	b530      	push	{r4, r5, lr}

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8015b68:	25f0      	movs	r5, #240	; 0xf0
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015b6a:	4a09      	ldr	r2, [pc, #36]	; (8015b90 <HAL_RCC_GetClockConfig+0x2c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8015b6c:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015b6e:	6894      	ldr	r4, [r2, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8015b70:	012d      	lsls	r5, r5, #4
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8015b72:	401c      	ands	r4, r3
 8015b74:	6044      	str	r4, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8015b76:	6894      	ldr	r4, [r2, #8]
 8015b78:	402c      	ands	r4, r5
 8015b7a:	6084      	str	r4, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8015b7c:	24e0      	movs	r4, #224	; 0xe0
 8015b7e:	6892      	ldr	r2, [r2, #8]
 8015b80:	01e4      	lsls	r4, r4, #7
 8015b82:	4022      	ands	r2, r4
 8015b84:	60c2      	str	r2, [r0, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8015b86:	4a03      	ldr	r2, [pc, #12]	; (8015b94 <HAL_RCC_GetClockConfig+0x30>)
 8015b88:	6812      	ldr	r2, [r2, #0]
 8015b8a:	4013      	ands	r3, r2
 8015b8c:	600b      	str	r3, [r1, #0]
}
 8015b8e:	bd30      	pop	{r4, r5, pc}
 8015b90:	40021000 	.word	0x40021000
 8015b94:	40022000 	.word	0x40022000

08015b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b9a:	46ce      	mov	lr, r9
 8015b9c:	4647      	mov	r7, r8
 8015b9e:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015ba0:	6803      	ldr	r3, [r0, #0]
{
 8015ba2:	0004      	movs	r4, r0
 8015ba4:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015ba6:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015ba8:	039a      	lsls	r2, r3, #14
 8015baa:	d550      	bpl.n	8015c4e <HAL_RCCEx_PeriphCLKConfig+0xb6>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015bac:	2280      	movs	r2, #128	; 0x80
 8015bae:	4b56      	ldr	r3, [pc, #344]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015bb0:	0552      	lsls	r2, r2, #21
 8015bb2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8015bb4:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015bb6:	4211      	tst	r1, r2
 8015bb8:	d100      	bne.n	8015bbc <HAL_RCCEx_PeriphCLKConfig+0x24>
 8015bba:	e082      	b.n	8015cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015bbc:	2780      	movs	r7, #128	; 0x80
 8015bbe:	4d53      	ldr	r5, [pc, #332]	; (8015d0c <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8015bc0:	007f      	lsls	r7, r7, #1
 8015bc2:	682b      	ldr	r3, [r5, #0]
 8015bc4:	433b      	orrs	r3, r7
 8015bc6:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015bc8:	f7fe f92c 	bl	8013e24 <HAL_GetTick>
 8015bcc:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015bce:	e005      	b.n	8015bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015bd0:	f7fe f928 	bl	8013e24 <HAL_GetTick>
 8015bd4:	1b80      	subs	r0, r0, r6
 8015bd6:	2802      	cmp	r0, #2
 8015bd8:	d900      	bls.n	8015bdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8015bda:	e07c      	b.n	8015cd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015bdc:	682b      	ldr	r3, [r5, #0]
 8015bde:	423b      	tst	r3, r7
 8015be0:	d0f6      	beq.n	8015bd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8015be2:	4d49      	ldr	r5, [pc, #292]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015be4:	23c0      	movs	r3, #192	; 0xc0
 8015be6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8015be8:	009b      	lsls	r3, r3, #2
 8015bea:	0011      	movs	r1, r2
 8015bec:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8015bee:	421a      	tst	r2, r3
 8015bf0:	d021      	beq.n	8015c36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8015bf2:	69a0      	ldr	r0, [r4, #24]
 8015bf4:	4288      	cmp	r0, r1
 8015bf6:	d01f      	beq.n	8015c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015bf8:	2180      	movs	r1, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8015bfa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8015bfc:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 8015bfe:	0249      	lsls	r1, r1, #9
 8015c00:	4331      	orrs	r1, r6
 8015c02:	65e9      	str	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015c04:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8015c06:	4a42      	ldr	r2, [pc, #264]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0x178>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015c08:	4e42      	ldr	r6, [pc, #264]	; (8015d14 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8015c0a:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015c0c:	4031      	ands	r1, r6
 8015c0e:	65e9      	str	r1, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8015c10:	65ea      	str	r2, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8015c12:	07db      	lsls	r3, r3, #31
 8015c14:	d400      	bmi.n	8015c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8015c16:	e075      	b.n	8015d04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015c18:	f7fe f904 	bl	8013e24 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015c1c:	4b3e      	ldr	r3, [pc, #248]	; (8015d18 <HAL_RCCEx_PeriphCLKConfig+0x180>)
        tickstart = HAL_GetTick();
 8015c1e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015c20:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015c22:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015c24:	e004      	b.n	8015c30 <HAL_RCCEx_PeriphCLKConfig+0x98>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015c26:	f7fe f8fd 	bl	8013e24 <HAL_GetTick>
 8015c2a:	1b80      	subs	r0, r0, r6
 8015c2c:	4548      	cmp	r0, r9
 8015c2e:	d852      	bhi.n	8015cd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8015c30:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8015c32:	421f      	tst	r7, r3
 8015c34:	d0f7      	beq.n	8015c26 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8015c36:	69a1      	ldr	r1, [r4, #24]
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015c38:	4a33      	ldr	r2, [pc, #204]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015c3a:	4835      	ldr	r0, [pc, #212]	; (8015d10 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8015c3c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8015c3e:	4003      	ands	r3, r0
 8015c40:	430b      	orrs	r3, r1
 8015c42:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8015c44:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015c46:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	d048      	beq.n	8015cde <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015c4c:	6823      	ldr	r3, [r4, #0]
 8015c4e:	07da      	lsls	r2, r3, #31
 8015c50:	d506      	bpl.n	8015c60 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015c52:	2503      	movs	r5, #3
 8015c54:	492c      	ldr	r1, [pc, #176]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015c56:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8015c58:	43aa      	bics	r2, r5
 8015c5a:	6865      	ldr	r5, [r4, #4]
 8015c5c:	432a      	orrs	r2, r5
 8015c5e:	654a      	str	r2, [r1, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015c60:	079a      	lsls	r2, r3, #30
 8015c62:	d506      	bpl.n	8015c72 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015c64:	250c      	movs	r5, #12
 8015c66:	4928      	ldr	r1, [pc, #160]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015c68:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8015c6a:	43aa      	bics	r2, r5
 8015c6c:	68a5      	ldr	r5, [r4, #8]
 8015c6e:	432a      	orrs	r2, r5
 8015c70:	654a      	str	r2, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015c72:	069a      	lsls	r2, r3, #26
 8015c74:	d506      	bpl.n	8015c84 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015c76:	4924      	ldr	r1, [pc, #144]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015c78:	4d28      	ldr	r5, [pc, #160]	; (8015d1c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8015c7a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8015c7c:	402a      	ands	r2, r5
 8015c7e:	68e5      	ldr	r5, [r4, #12]
 8015c80:	432a      	orrs	r2, r5
 8015c82:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015c84:	045a      	lsls	r2, r3, #17
 8015c86:	d50a      	bpl.n	8015c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8015c88:	491f      	ldr	r1, [pc, #124]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015c8a:	6965      	ldr	r5, [r4, #20]
 8015c8c:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8015c8e:	0092      	lsls	r2, r2, #2
 8015c90:	0892      	lsrs	r2, r2, #2
 8015c92:	432a      	orrs	r2, r5
 8015c94:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8015c96:	2280      	movs	r2, #128	; 0x80
 8015c98:	05d2      	lsls	r2, r2, #23
 8015c9a:	4295      	cmp	r5, r2
 8015c9c:	d026      	beq.n	8015cec <HAL_RCCEx_PeriphCLKConfig+0x154>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8015c9e:	051b      	lsls	r3, r3, #20
 8015ca0:	d50a      	bpl.n	8015cb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8015ca2:	4a19      	ldr	r2, [pc, #100]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015ca4:	6921      	ldr	r1, [r4, #16]
 8015ca6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8015ca8:	4c1d      	ldr	r4, [pc, #116]	; (8015d20 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8015caa:	4023      	ands	r3, r4
 8015cac:	430b      	orrs	r3, r1
 8015cae:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8015cb0:	2380      	movs	r3, #128	; 0x80
 8015cb2:	01db      	lsls	r3, r3, #7
 8015cb4:	4299      	cmp	r1, r3
 8015cb6:	d01f      	beq.n	8015cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8015cb8:	b003      	add	sp, #12
 8015cba:	bcc0      	pop	{r6, r7}
 8015cbc:	46b9      	mov	r9, r7
 8015cbe:	46b0      	mov	r8, r6
 8015cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8015cc2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8015cc4:	4311      	orrs	r1, r2
 8015cc6:	63d9      	str	r1, [r3, #60]	; 0x3c
 8015cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cca:	4013      	ands	r3, r2
 8015ccc:	9301      	str	r3, [sp, #4]
 8015cce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	4698      	mov	r8, r3
 8015cd4:	e772      	b.n	8015bbc <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 8015cd6:	4643      	mov	r3, r8
      status = ret;
 8015cd8:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 8015cda:	2b01      	cmp	r3, #1
 8015cdc:	d1b6      	bne.n	8015c4c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8015cde:	4a0a      	ldr	r2, [pc, #40]	; (8015d08 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8015ce0:	4910      	ldr	r1, [pc, #64]	; (8015d24 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8015ce2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8015ce4:	400b      	ands	r3, r1
 8015ce6:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015ce8:	6823      	ldr	r3, [r4, #0]
 8015cea:	e7b0      	b.n	8015c4e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8015cec:	2280      	movs	r2, #128	; 0x80
 8015cee:	68cd      	ldr	r5, [r1, #12]
 8015cf0:	0252      	lsls	r2, r2, #9
 8015cf2:	432a      	orrs	r2, r5
 8015cf4:	60ca      	str	r2, [r1, #12]
 8015cf6:	e7d2      	b.n	8015c9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8015cf8:	2380      	movs	r3, #128	; 0x80
 8015cfa:	68d1      	ldr	r1, [r2, #12]
 8015cfc:	025b      	lsls	r3, r3, #9
 8015cfe:	430b      	orrs	r3, r1
 8015d00:	60d3      	str	r3, [r2, #12]
  return status;
 8015d02:	e7d9      	b.n	8015cb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8015d04:	0001      	movs	r1, r0
 8015d06:	e797      	b.n	8015c38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8015d08:	40021000 	.word	0x40021000
 8015d0c:	40007000 	.word	0x40007000
 8015d10:	fffffcff 	.word	0xfffffcff
 8015d14:	fffeffff 	.word	0xfffeffff
 8015d18:	00001388 	.word	0x00001388
 8015d1c:	ffffcfff 	.word	0xffffcfff
 8015d20:	ffff3fff 	.word	0xffff3fff
 8015d24:	efffffff 	.word	0xefffffff

08015d28 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8015d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d2a:	46de      	mov	lr, fp
 8015d2c:	4657      	mov	r7, sl
 8015d2e:	464e      	mov	r6, r9
 8015d30:	4645      	mov	r5, r8
 8015d32:	b5e0      	push	{r5, r6, r7, lr}
 8015d34:	b083      	sub	sp, #12
 8015d36:	001e      	movs	r6, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8015d38:	466b      	mov	r3, sp
 8015d3a:	1cdf      	adds	r7, r3, #3
 8015d3c:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8015d3e:	0015      	movs	r5, r2
 8015d40:	4681      	mov	r9, r0
 8015d42:	000c      	movs	r4, r1
  __IO uint8_t  tmpreg8 = 0;
 8015d44:	703b      	strb	r3, [r7, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8015d46:	f7fe f86d 	bl	8013e24 <HAL_GetTick>
 8015d4a:	1976      	adds	r6, r6, r5
 8015d4c:	1a33      	subs	r3, r6, r0
 8015d4e:	4698      	mov	r8, r3
  tmp_tickstart = HAL_GetTick();
 8015d50:	f7fe f868 	bl	8013e24 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8015d54:	464b      	mov	r3, r9
 8015d56:	681b      	ldr	r3, [r3, #0]
  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);

  while ((hspi->Instance->SR & Fifo) != State)
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8015d58:	26c0      	movs	r6, #192	; 0xc0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8015d5a:	469a      	mov	sl, r3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8015d5c:	4b34      	ldr	r3, [pc, #208]	; (8015e30 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x108>)
  tmp_tickstart = HAL_GetTick();
 8015d5e:	4683      	mov	fp, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8015d60:	681b      	ldr	r3, [r3, #0]
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8015d62:	00f6      	lsls	r6, r6, #3
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8015d64:	009a      	lsls	r2, r3, #2
 8015d66:	18d2      	adds	r2, r2, r3
 8015d68:	00d3      	lsls	r3, r2, #3
 8015d6a:	1a9b      	subs	r3, r3, r2
 8015d6c:	4642      	mov	r2, r8
 8015d6e:	0d1b      	lsrs	r3, r3, #20
 8015d70:	4353      	muls	r3, r2
  while ((hspi->Instance->SR & Fifo) != State)
 8015d72:	4652      	mov	r2, sl
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8015d74:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8015d76:	e001      	b.n	8015d7c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8015d78:	1c6b      	adds	r3, r5, #1
 8015d7a:	d10b      	bne.n	8015d94 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8015d7c:	6893      	ldr	r3, [r2, #8]
 8015d7e:	4223      	tst	r3, r4
 8015d80:	d01d      	beq.n	8015dbe <SPI_WaitFifoStateUntilTimeout.constprop.0+0x96>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8015d82:	42b4      	cmp	r4, r6
 8015d84:	d1f8      	bne.n	8015d78 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x50>
      tmpreg8 = *ptmpreg8;
 8015d86:	4653      	mov	r3, sl
 8015d88:	7b1b      	ldrb	r3, [r3, #12]
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	703b      	strb	r3, [r7, #0]
      UNUSED(tmpreg8);
 8015d8e:	783b      	ldrb	r3, [r7, #0]
    if (Timeout != HAL_MAX_DELAY)
 8015d90:	1c6b      	adds	r3, r5, #1
 8015d92:	d0f3      	beq.n	8015d7c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015d94:	f7fe f846 	bl	8013e24 <HAL_GetTick>
 8015d98:	465b      	mov	r3, fp
 8015d9a:	1ac0      	subs	r0, r0, r3
 8015d9c:	4540      	cmp	r0, r8
 8015d9e:	d216      	bcs.n	8015dce <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8015da0:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8015da2:	1e5a      	subs	r2, r3, #1
 8015da4:	4193      	sbcs	r3, r2
 8015da6:	4642      	mov	r2, r8
 8015da8:	425b      	negs	r3, r3
 8015daa:	401a      	ands	r2, r3
      }
      count--;
 8015dac:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8015dae:	4690      	mov	r8, r2
      count--;
 8015db0:	3b01      	subs	r3, #1
 8015db2:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015db4:	464b      	mov	r3, r9
 8015db6:	681a      	ldr	r2, [r3, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8015db8:	6893      	ldr	r3, [r2, #8]
 8015dba:	4223      	tst	r3, r4
 8015dbc:	d1e1      	bne.n	8015d82 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5a>
    }
  }

  return HAL_OK;
 8015dbe:	2000      	movs	r0, #0
}
 8015dc0:	b003      	add	sp, #12
 8015dc2:	bcf0      	pop	{r4, r5, r6, r7}
 8015dc4:	46bb      	mov	fp, r7
 8015dc6:	46b2      	mov	sl, r6
 8015dc8:	46a9      	mov	r9, r5
 8015dca:	46a0      	mov	r8, r4
 8015dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015dce:	464b      	mov	r3, r9
 8015dd0:	21e0      	movs	r1, #224	; 0xe0
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	685a      	ldr	r2, [r3, #4]
 8015dd6:	438a      	bics	r2, r1
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015dd8:	4649      	mov	r1, r9
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015dda:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015ddc:	2282      	movs	r2, #130	; 0x82
 8015dde:	6849      	ldr	r1, [r1, #4]
 8015de0:	0052      	lsls	r2, r2, #1
 8015de2:	4291      	cmp	r1, r2
 8015de4:	d015      	beq.n	8015e12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xea>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015de6:	464a      	mov	r2, r9
 8015de8:	2180      	movs	r1, #128	; 0x80
 8015dea:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8015dec:	0189      	lsls	r1, r1, #6
 8015dee:	428a      	cmp	r2, r1
 8015df0:	d106      	bne.n	8015e00 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd8>
          SPI_RESET_CRC(hspi);
 8015df2:	6819      	ldr	r1, [r3, #0]
 8015df4:	480f      	ldr	r0, [pc, #60]	; (8015e34 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10c>)
 8015df6:	4001      	ands	r1, r0
 8015df8:	6019      	str	r1, [r3, #0]
 8015dfa:	6819      	ldr	r1, [r3, #0]
 8015dfc:	430a      	orrs	r2, r1
 8015dfe:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8015e00:	235d      	movs	r3, #93	; 0x5d
 8015e02:	2201      	movs	r2, #1
 8015e04:	4649      	mov	r1, r9
 8015e06:	54ca      	strb	r2, [r1, r3]
        __HAL_UNLOCK(hspi);
 8015e08:	2200      	movs	r2, #0
 8015e0a:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8015e0c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8015e0e:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8015e10:	e7d6      	b.n	8015dc0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015e12:	464a      	mov	r2, r9
 8015e14:	2180      	movs	r1, #128	; 0x80
 8015e16:	6892      	ldr	r2, [r2, #8]
 8015e18:	0209      	lsls	r1, r1, #8
 8015e1a:	428a      	cmp	r2, r1
 8015e1c:	d003      	beq.n	8015e26 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xfe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015e1e:	2180      	movs	r1, #128	; 0x80
 8015e20:	00c9      	lsls	r1, r1, #3
 8015e22:	428a      	cmp	r2, r1
 8015e24:	d1df      	bne.n	8015de6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          __HAL_SPI_DISABLE(hspi);
 8015e26:	2140      	movs	r1, #64	; 0x40
 8015e28:	681a      	ldr	r2, [r3, #0]
 8015e2a:	438a      	bics	r2, r1
 8015e2c:	601a      	str	r2, [r3, #0]
 8015e2e:	e7da      	b.n	8015de6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
 8015e30:	200000e4 	.word	0x200000e4
 8015e34:	ffffdfff 	.word	0xffffdfff

08015e38 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8015e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e3a:	46c6      	mov	lr, r8
 8015e3c:	b500      	push	{lr}
 8015e3e:	000c      	movs	r4, r1
 8015e40:	0016      	movs	r6, r2
 8015e42:	b082      	sub	sp, #8
 8015e44:	0007      	movs	r7, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8015e46:	f7fd ffed 	bl	8013e24 <HAL_GetTick>
 8015e4a:	1936      	adds	r6, r6, r4
 8015e4c:	1a36      	subs	r6, r6, r0
  tmp_tickstart = HAL_GetTick();
 8015e4e:	f7fd ffe9 	bl	8013e24 <HAL_GetTick>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015e52:	2580      	movs	r5, #128	; 0x80
  tmp_tickstart = HAL_GetTick();
 8015e54:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8015e56:	4b26      	ldr	r3, [pc, #152]	; (8015ef0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>)
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	015b      	lsls	r3, r3, #5
 8015e5c:	0d1b      	lsrs	r3, r3, #20
 8015e5e:	4373      	muls	r3, r6
 8015e60:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015e62:	683a      	ldr	r2, [r7, #0]
 8015e64:	e001      	b.n	8015e6a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x32>
    if (Timeout != HAL_MAX_DELAY)
 8015e66:	1c63      	adds	r3, r4, #1
 8015e68:	d107      	bne.n	8015e7a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015e6a:	6893      	ldr	r3, [r2, #8]
 8015e6c:	421d      	tst	r5, r3
 8015e6e:	d1fa      	bne.n	8015e66 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  return HAL_OK;
 8015e70:	2000      	movs	r0, #0
}
 8015e72:	b002      	add	sp, #8
 8015e74:	bc80      	pop	{r7}
 8015e76:	46b8      	mov	r8, r7
 8015e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8015e7a:	f7fd ffd3 	bl	8013e24 <HAL_GetTick>
 8015e7e:	4643      	mov	r3, r8
 8015e80:	1ac0      	subs	r0, r0, r3
 8015e82:	42b0      	cmp	r0, r6
 8015e84:	d208      	bcs.n	8015e98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x60>
      if (count == 0U)
 8015e86:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8015e88:	1e5a      	subs	r2, r3, #1
 8015e8a:	4193      	sbcs	r3, r2
 8015e8c:	425b      	negs	r3, r3
 8015e8e:	401e      	ands	r6, r3
      count--;
 8015e90:	9b01      	ldr	r3, [sp, #4]
 8015e92:	3b01      	subs	r3, #1
 8015e94:	9301      	str	r3, [sp, #4]
 8015e96:	e7e4      	b.n	8015e62 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015e98:	21e0      	movs	r1, #224	; 0xe0
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	685a      	ldr	r2, [r3, #4]
 8015e9e:	438a      	bics	r2, r1
 8015ea0:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015ea2:	2282      	movs	r2, #130	; 0x82
 8015ea4:	6879      	ldr	r1, [r7, #4]
 8015ea6:	0052      	lsls	r2, r2, #1
 8015ea8:	4291      	cmp	r1, r2
 8015eaa:	d013      	beq.n	8015ed4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015eac:	2180      	movs	r1, #128	; 0x80
 8015eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015eb0:	0189      	lsls	r1, r1, #6
 8015eb2:	428a      	cmp	r2, r1
 8015eb4:	d106      	bne.n	8015ec4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
          SPI_RESET_CRC(hspi);
 8015eb6:	6819      	ldr	r1, [r3, #0]
 8015eb8:	480e      	ldr	r0, [pc, #56]	; (8015ef4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8015eba:	4001      	ands	r1, r0
 8015ebc:	6019      	str	r1, [r3, #0]
 8015ebe:	6819      	ldr	r1, [r3, #0]
 8015ec0:	430a      	orrs	r2, r1
 8015ec2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8015ec4:	235d      	movs	r3, #93	; 0x5d
 8015ec6:	2201      	movs	r2, #1
 8015ec8:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8015eca:	2200      	movs	r2, #0
 8015ecc:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
 8015ece:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8015ed0:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8015ed2:	e7ce      	b.n	8015e72 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015ed4:	2180      	movs	r1, #128	; 0x80
 8015ed6:	68ba      	ldr	r2, [r7, #8]
 8015ed8:	0209      	lsls	r1, r1, #8
 8015eda:	428a      	cmp	r2, r1
 8015edc:	d003      	beq.n	8015ee6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015ede:	2180      	movs	r1, #128	; 0x80
 8015ee0:	00c9      	lsls	r1, r1, #3
 8015ee2:	428a      	cmp	r2, r1
 8015ee4:	d1e2      	bne.n	8015eac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
          __HAL_SPI_DISABLE(hspi);
 8015ee6:	2140      	movs	r1, #64	; 0x40
 8015ee8:	681a      	ldr	r2, [r3, #0]
 8015eea:	438a      	bics	r2, r1
 8015eec:	601a      	str	r2, [r3, #0]
 8015eee:	e7dd      	b.n	8015eac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
 8015ef0:	200000e4 	.word	0x200000e4
 8015ef4:	ffffdfff 	.word	0xffffdfff

08015ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8015ef8:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015efa:	0013      	movs	r3, r2
{
 8015efc:	000d      	movs	r5, r1
 8015efe:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015f00:	000a      	movs	r2, r1
 8015f02:	21c0      	movs	r1, #192	; 0xc0
 8015f04:	0149      	lsls	r1, r1, #5
{
 8015f06:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015f08:	f7ff ff0e 	bl	8015d28 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	d10f      	bne.n	8015f30 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8015f10:	0032      	movs	r2, r6
 8015f12:	0029      	movs	r1, r5
 8015f14:	0020      	movs	r0, r4
 8015f16:	f7ff ff8f 	bl	8015e38 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8015f1a:	2800      	cmp	r0, #0
 8015f1c:	d108      	bne.n	8015f30 <SPI_EndRxTxTransaction+0x38>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8015f1e:	21c0      	movs	r1, #192	; 0xc0
 8015f20:	0033      	movs	r3, r6
 8015f22:	002a      	movs	r2, r5
 8015f24:	0020      	movs	r0, r4
 8015f26:	00c9      	lsls	r1, r1, #3
 8015f28:	f7ff fefe 	bl	8015d28 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d004      	beq.n	8015f3a <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015f30:	2220      	movs	r2, #32
    return HAL_TIMEOUT;
 8015f32:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015f34:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015f36:	4313      	orrs	r3, r2
 8015f38:	6623      	str	r3, [r4, #96]	; 0x60
  }

  return HAL_OK;
}
 8015f3a:	bd70      	pop	{r4, r5, r6, pc}

08015f3c <HAL_SPI_Init>:
{
 8015f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f3e:	46de      	mov	lr, fp
 8015f40:	4657      	mov	r7, sl
 8015f42:	464e      	mov	r6, r9
 8015f44:	4645      	mov	r5, r8
 8015f46:	0004      	movs	r4, r0
 8015f48:	b5e0      	push	{r5, r6, r7, lr}
  if (hspi == NULL)
 8015f4a:	2800      	cmp	r0, #0
 8015f4c:	d100      	bne.n	8015f50 <HAL_SPI_Init+0x14>
 8015f4e:	e094      	b.n	801607a <HAL_SPI_Init+0x13e>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8015f50:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015f52:	2d00      	cmp	r5, #0
 8015f54:	d06b      	beq.n	801602e <HAL_SPI_Init+0xf2>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8015f56:	2300      	movs	r3, #0
 8015f58:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8015f5a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8015f60:	335d      	adds	r3, #93	; 0x5d
 8015f62:	5ce3      	ldrb	r3, [r4, r3]
 8015f64:	b2da      	uxtb	r2, r3
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d06e      	beq.n	8016048 <HAL_SPI_Init+0x10c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8015f6a:	235d      	movs	r3, #93	; 0x5d
 8015f6c:	2202      	movs	r2, #2
  __HAL_SPI_DISABLE(hspi);
 8015f6e:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8015f70:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8015f72:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015f74:	68e0      	ldr	r0, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8015f76:	6813      	ldr	r3, [r2, #0]
 8015f78:	438b      	bics	r3, r1
 8015f7a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8015f7c:	23e0      	movs	r3, #224	; 0xe0
 8015f7e:	00db      	lsls	r3, r3, #3
 8015f80:	4298      	cmp	r0, r3
 8015f82:	d968      	bls.n	8016056 <HAL_SPI_Init+0x11a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8015f84:	23f0      	movs	r3, #240	; 0xf0
 8015f86:	011b      	lsls	r3, r3, #4
 8015f88:	4298      	cmp	r0, r3
 8015f8a:	d000      	beq.n	8015f8e <HAL_SPI_Init+0x52>
 8015f8c:	e077      	b.n	801607e <HAL_SPI_Init+0x142>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015f8e:	2380      	movs	r3, #128	; 0x80
 8015f90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015f92:	019b      	lsls	r3, r3, #6
 8015f94:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8015f96:	2300      	movs	r3, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015f98:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8015f9a:	469b      	mov	fp, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015f9c:	2682      	movs	r6, #130	; 0x82
 8015f9e:	2784      	movs	r7, #132	; 0x84
 8015fa0:	6863      	ldr	r3, [r4, #4]
 8015fa2:	0076      	lsls	r6, r6, #1
 8015fa4:	4033      	ands	r3, r6
 8015fa6:	68a6      	ldr	r6, [r4, #8]
 8015fa8:	023f      	lsls	r7, r7, #8
 8015faa:	403e      	ands	r6, r7
 8015fac:	2702      	movs	r7, #2
 8015fae:	4333      	orrs	r3, r6
 8015fb0:	6926      	ldr	r6, [r4, #16]
 8015fb2:	69a1      	ldr	r1, [r4, #24]
 8015fb4:	403e      	ands	r6, r7
 8015fb6:	4333      	orrs	r3, r6
 8015fb8:	2601      	movs	r6, #1
 8015fba:	6967      	ldr	r7, [r4, #20]
 8015fbc:	46b2      	mov	sl, r6
 8015fbe:	4037      	ands	r7, r6
 8015fc0:	433b      	orrs	r3, r7
 8015fc2:	2780      	movs	r7, #128	; 0x80
 8015fc4:	00bf      	lsls	r7, r7, #2
 8015fc6:	400f      	ands	r7, r1
 8015fc8:	433b      	orrs	r3, r7
 8015fca:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8015fcc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015fce:	46b8      	mov	r8, r7
 8015fd0:	2738      	movs	r7, #56	; 0x38
 8015fd2:	46b9      	mov	r9, r7
 8015fd4:	4647      	mov	r7, r8
 8015fd6:	464e      	mov	r6, r9
 8015fd8:	4037      	ands	r7, r6
 8015fda:	6a26      	ldr	r6, [r4, #32]
 8015fdc:	433b      	orrs	r3, r7
 8015fde:	46b0      	mov	r8, r6
 8015fe0:	2680      	movs	r6, #128	; 0x80
 8015fe2:	4647      	mov	r7, r8
 8015fe4:	4037      	ands	r7, r6
 8015fe6:	4666      	mov	r6, ip
 8015fe8:	433b      	orrs	r3, r7
 8015fea:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8015fec:	2608      	movs	r6, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8015fee:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8015ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ff2:	4033      	ands	r3, r6
 8015ff4:	26f0      	movs	r6, #240	; 0xf0
 8015ff6:	0136      	lsls	r6, r6, #4
 8015ff8:	4030      	ands	r0, r6
 8015ffa:	4303      	orrs	r3, r0
 8015ffc:	2004      	movs	r0, #4
 8015ffe:	4001      	ands	r1, r0
 8016000:	430b      	orrs	r3, r1
 8016002:	2110      	movs	r1, #16
 8016004:	4029      	ands	r1, r5
 8016006:	430b      	orrs	r3, r1
 8016008:	4659      	mov	r1, fp
 801600a:	430b      	orrs	r3, r1
 801600c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801600e:	69d3      	ldr	r3, [r2, #28]
 8016010:	491c      	ldr	r1, [pc, #112]	; (8016084 <HAL_SPI_Init+0x148>)
  return HAL_OK;
 8016012:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8016014:	400b      	ands	r3, r1
 8016016:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8016018:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 801601a:	4652      	mov	r2, sl
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801601c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801601e:	335d      	adds	r3, #93	; 0x5d
 8016020:	54e2      	strb	r2, [r4, r3]
}
 8016022:	bcf0      	pop	{r4, r5, r6, r7}
 8016024:	46bb      	mov	fp, r7
 8016026:	46b2      	mov	sl, r6
 8016028:	46a9      	mov	r9, r5
 801602a:	46a0      	mov	r8, r4
 801602c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801602e:	2382      	movs	r3, #130	; 0x82
 8016030:	6842      	ldr	r2, [r0, #4]
 8016032:	005b      	lsls	r3, r3, #1
 8016034:	429a      	cmp	r2, r3
 8016036:	d091      	beq.n	8015f5c <HAL_SPI_Init+0x20>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016038:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801603a:	61c5      	str	r5, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801603c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 801603e:	335d      	adds	r3, #93	; 0x5d
 8016040:	5ce3      	ldrb	r3, [r4, r3]
 8016042:	b2da      	uxtb	r2, r3
 8016044:	2b00      	cmp	r3, #0
 8016046:	d190      	bne.n	8015f6a <HAL_SPI_Init+0x2e>
    hspi->Lock = HAL_UNLOCKED;
 8016048:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 801604a:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 801604c:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 801604e:	f7fd fc4f 	bl	80138f0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8016052:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016054:	e789      	b.n	8015f6a <HAL_SPI_Init+0x2e>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8016056:	4298      	cmp	r0, r3
 8016058:	d006      	beq.n	8016068 <HAL_SPI_Init+0x12c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801605a:	2380      	movs	r3, #128	; 0x80
 801605c:	015b      	lsls	r3, r3, #5
 801605e:	469b      	mov	fp, r3
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016060:	2300      	movs	r3, #0
 8016062:	469c      	mov	ip, r3
 8016064:	62a3      	str	r3, [r4, #40]	; 0x28
 8016066:	e799      	b.n	8015f9c <HAL_SPI_Init+0x60>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8016068:	2380      	movs	r3, #128	; 0x80
 801606a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801606c:	019b      	lsls	r3, r3, #6
 801606e:	4019      	ands	r1, r3
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8016070:	2380      	movs	r3, #128	; 0x80
 8016072:	015b      	lsls	r3, r3, #5
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8016074:	468c      	mov	ip, r1
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8016076:	469b      	mov	fp, r3
 8016078:	e790      	b.n	8015f9c <HAL_SPI_Init+0x60>
    return HAL_ERROR;
 801607a:	2001      	movs	r0, #1
 801607c:	e7d1      	b.n	8016022 <HAL_SPI_Init+0xe6>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801607e:	2300      	movs	r3, #0
 8016080:	469b      	mov	fp, r3
 8016082:	e7ed      	b.n	8016060 <HAL_SPI_Init+0x124>
 8016084:	fffff7ff 	.word	0xfffff7ff

08016088 <HAL_SPI_Transmit>:
{
 8016088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801608a:	46c6      	mov	lr, r8
 801608c:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 801608e:	235c      	movs	r3, #92	; 0x5c
{
 8016090:	b500      	push	{lr}
 8016092:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8016094:	5cc2      	ldrb	r2, [r0, r3]
{
 8016096:	0004      	movs	r4, r0
 8016098:	000d      	movs	r5, r1
 801609a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 801609c:	2a01      	cmp	r2, #1
 801609e:	d060      	beq.n	8016162 <HAL_SPI_Transmit+0xda>
 80160a0:	2201      	movs	r2, #1
 80160a2:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80160a4:	f7fd febe 	bl	8013e24 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80160a8:	225d      	movs	r2, #93	; 0x5d
 80160aa:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 80160ac:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80160ae:	b2d8      	uxtb	r0, r3
 80160b0:	2b01      	cmp	r3, #1
 80160b2:	d00a      	beq.n	80160ca <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80160b4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80160b6:	235d      	movs	r3, #93	; 0x5d
 80160b8:	2201      	movs	r2, #1
 80160ba:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80160bc:	2200      	movs	r2, #0
 80160be:	3b01      	subs	r3, #1
 80160c0:	54e2      	strb	r2, [r4, r3]
}
 80160c2:	b002      	add	sp, #8
 80160c4:	bc80      	pop	{r7}
 80160c6:	46b8      	mov	r8, r7
 80160c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80160ca:	2d00      	cmp	r5, #0
 80160cc:	d0f3      	beq.n	80160b6 <HAL_SPI_Transmit+0x2e>
 80160ce:	4643      	mov	r3, r8
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d0f0      	beq.n	80160b6 <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80160d4:	2303      	movs	r3, #3
 80160d6:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80160d8:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 80160da:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80160dc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferSize  = Size;
 80160de:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80160e0:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 80160e2:	2244      	movs	r2, #68	; 0x44
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80160e4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80160e6:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80160e8:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80160ea:	3202      	adds	r2, #2
 80160ec:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80160ee:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80160f0:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80160f2:	2380      	movs	r3, #128	; 0x80
 80160f4:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80160f6:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80160f8:	021b      	lsls	r3, r3, #8
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d05a      	beq.n	80161b4 <HAL_SPI_Transmit+0x12c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80160fe:	2340      	movs	r3, #64	; 0x40
 8016100:	6802      	ldr	r2, [r0, #0]
 8016102:	4213      	tst	r3, r2
 8016104:	d102      	bne.n	801610c <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8016106:	6802      	ldr	r2, [r0, #0]
 8016108:	4313      	orrs	r3, r2
 801610a:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801610c:	23e0      	movs	r3, #224	; 0xe0
 801610e:	68e2      	ldr	r2, [r4, #12]
 8016110:	00db      	lsls	r3, r3, #3
 8016112:	429a      	cmp	r2, r3
 8016114:	d927      	bls.n	8016166 <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016116:	6863      	ldr	r3, [r4, #4]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d055      	beq.n	80161c8 <HAL_SPI_Transmit+0x140>
 801611c:	4643      	mov	r3, r8
 801611e:	2b01      	cmp	r3, #1
 8016120:	d052      	beq.n	80161c8 <HAL_SPI_Transmit+0x140>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016122:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8016124:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016126:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8016128:	2b00      	cmp	r3, #0
 801612a:	d10d      	bne.n	8016148 <HAL_SPI_Transmit+0xc0>
 801612c:	e05f      	b.n	80161ee <HAL_SPI_Transmit+0x166>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801612e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016130:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016132:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016134:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 8016136:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016138:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 801613a:	3d01      	subs	r5, #1
 801613c:	b2ad      	uxth	r5, r5
 801613e:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8016140:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8016142:	2b00      	cmp	r3, #0
 8016144:	d053      	beq.n	80161ee <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016146:	6820      	ldr	r0, [r4, #0]
 8016148:	4642      	mov	r2, r8
 801614a:	6883      	ldr	r3, [r0, #8]
 801614c:	421a      	tst	r2, r3
 801614e:	d1ee      	bne.n	801612e <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016150:	f7fd fe68 	bl	8013e24 <HAL_GetTick>
 8016154:	1bc0      	subs	r0, r0, r7
 8016156:	42b0      	cmp	r0, r6
 8016158:	d3f2      	bcc.n	8016140 <HAL_SPI_Transmit+0xb8>
 801615a:	1c73      	adds	r3, r6, #1
 801615c:	d0f0      	beq.n	8016140 <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 801615e:	2003      	movs	r0, #3
 8016160:	e7a9      	b.n	80160b6 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8016162:	2002      	movs	r0, #2
 8016164:	e7ad      	b.n	80160c2 <HAL_SPI_Transmit+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016166:	6863      	ldr	r3, [r4, #4]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d036      	beq.n	80161da <HAL_SPI_Transmit+0x152>
 801616c:	4643      	mov	r3, r8
 801616e:	2b01      	cmp	r3, #1
 8016170:	d033      	beq.n	80161da <HAL_SPI_Transmit+0x152>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016172:	2202      	movs	r2, #2
    while (hspi->TxXferCount > 0U)
 8016174:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016176:	4690      	mov	r8, r2
    while (hspi->TxXferCount > 0U)
 8016178:	2b00      	cmp	r3, #0
 801617a:	d10d      	bne.n	8016198 <HAL_SPI_Transmit+0x110>
 801617c:	e037      	b.n	80161ee <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801617e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016180:	7812      	ldrb	r2, [r2, #0]
 8016182:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8016184:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016186:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8016188:	3d01      	subs	r5, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801618a:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 801618c:	b2ad      	uxth	r5, r5
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801618e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8016190:	87e5      	strh	r5, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8016192:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8016194:	2b00      	cmp	r3, #0
 8016196:	d02a      	beq.n	80161ee <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016198:	4641      	mov	r1, r8
 801619a:	6823      	ldr	r3, [r4, #0]
 801619c:	689a      	ldr	r2, [r3, #8]
 801619e:	4211      	tst	r1, r2
 80161a0:	d1ed      	bne.n	801617e <HAL_SPI_Transmit+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80161a2:	f7fd fe3f 	bl	8013e24 <HAL_GetTick>
 80161a6:	1bc0      	subs	r0, r0, r7
 80161a8:	42b0      	cmp	r0, r6
 80161aa:	d3f2      	bcc.n	8016192 <HAL_SPI_Transmit+0x10a>
 80161ac:	1c73      	adds	r3, r6, #1
 80161ae:	d0f0      	beq.n	8016192 <HAL_SPI_Transmit+0x10a>
          errorcode = HAL_TIMEOUT;
 80161b0:	2003      	movs	r0, #3
 80161b2:	e780      	b.n	80160b6 <HAL_SPI_Transmit+0x2e>
    __HAL_SPI_DISABLE(hspi);
 80161b4:	2240      	movs	r2, #64	; 0x40
 80161b6:	6803      	ldr	r3, [r0, #0]
 80161b8:	4393      	bics	r3, r2
 80161ba:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 80161bc:	2380      	movs	r3, #128	; 0x80
 80161be:	6802      	ldr	r2, [r0, #0]
 80161c0:	01db      	lsls	r3, r3, #7
 80161c2:	4313      	orrs	r3, r2
 80161c4:	6003      	str	r3, [r0, #0]
 80161c6:	e79a      	b.n	80160fe <HAL_SPI_Transmit+0x76>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80161c8:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80161ca:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80161cc:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80161ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80161d0:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80161d2:	3b01      	subs	r3, #1
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80161d8:	e7a3      	b.n	8016122 <HAL_SPI_Transmit+0x9a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80161da:	782b      	ldrb	r3, [r5, #0]
 80161dc:	7303      	strb	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80161de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80161e0:	3301      	adds	r3, #1
 80161e2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80161e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80161e6:	3b01      	subs	r3, #1
 80161e8:	b29b      	uxth	r3, r3
 80161ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80161ec:	e7c1      	b.n	8016172 <HAL_SPI_Transmit+0xea>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80161ee:	003a      	movs	r2, r7
 80161f0:	0031      	movs	r1, r6
 80161f2:	0020      	movs	r0, r4
 80161f4:	f7ff fe80 	bl	8015ef8 <SPI_EndRxTxTransaction>
 80161f8:	2800      	cmp	r0, #0
 80161fa:	d001      	beq.n	8016200 <HAL_SPI_Transmit+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80161fc:	2320      	movs	r3, #32
 80161fe:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016200:	68a3      	ldr	r3, [r4, #8]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d106      	bne.n	8016214 <HAL_SPI_Transmit+0x18c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016206:	9301      	str	r3, [sp, #4]
 8016208:	6823      	ldr	r3, [r4, #0]
 801620a:	68da      	ldr	r2, [r3, #12]
 801620c:	9201      	str	r2, [sp, #4]
 801620e:	689b      	ldr	r3, [r3, #8]
 8016210:	9301      	str	r3, [sp, #4]
 8016212:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016214:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8016216:	1e43      	subs	r3, r0, #1
 8016218:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 801621a:	b2c0      	uxtb	r0, r0
error:
 801621c:	e74b      	b.n	80160b6 <HAL_SPI_Transmit+0x2e>
 801621e:	46c0      	nop			; (mov r8, r8)

08016220 <HAL_SPI_TransmitReceive>:
{
 8016220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016222:	4647      	mov	r7, r8
 8016224:	46ce      	mov	lr, r9
 8016226:	b580      	push	{r7, lr}
 8016228:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 801622a:	235c      	movs	r3, #92	; 0x5c
{
 801622c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 801622e:	5cc2      	ldrb	r2, [r0, r3]
{
 8016230:	0004      	movs	r4, r0
 8016232:	4688      	mov	r8, r1
 8016234:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8016236:	2a01      	cmp	r2, #1
 8016238:	d100      	bne.n	801623c <HAL_SPI_TransmitReceive+0x1c>
 801623a:	e095      	b.n	8016368 <HAL_SPI_TransmitReceive+0x148>
 801623c:	2201      	movs	r2, #1
 801623e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8016240:	f7fd fdf0 	bl	8013e24 <HAL_GetTick>
  tmp_state           = hspi->State;
 8016244:	235d      	movs	r3, #93	; 0x5d
 8016246:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8016248:	0006      	movs	r6, r0
  tmp_mode            = hspi->Init.Mode;
 801624a:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 801624c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801624e:	2b01      	cmp	r3, #1
 8016250:	d013      	beq.n	801627a <HAL_SPI_TransmitReceive+0x5a>
 8016252:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8016254:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016256:	005b      	lsls	r3, r3, #1
 8016258:	429a      	cmp	r2, r3
 801625a:	d009      	beq.n	8016270 <HAL_SPI_TransmitReceive+0x50>
  hspi->State = HAL_SPI_STATE_READY;
 801625c:	235d      	movs	r3, #93	; 0x5d
 801625e:	2201      	movs	r2, #1
 8016260:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8016262:	2200      	movs	r2, #0
 8016264:	3b01      	subs	r3, #1
 8016266:	54e2      	strb	r2, [r4, r3]
}
 8016268:	bcc0      	pop	{r6, r7}
 801626a:	46b9      	mov	r9, r7
 801626c:	46b0      	mov	r8, r6
 801626e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016270:	68a3      	ldr	r3, [r4, #8]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d1f2      	bne.n	801625c <HAL_SPI_TransmitReceive+0x3c>
 8016276:	2904      	cmp	r1, #4
 8016278:	d1f0      	bne.n	801625c <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801627a:	4643      	mov	r3, r8
 801627c:	2b00      	cmp	r3, #0
 801627e:	d075      	beq.n	801636c <HAL_SPI_TransmitReceive+0x14c>
 8016280:	464b      	mov	r3, r9
 8016282:	2b00      	cmp	r3, #0
 8016284:	d072      	beq.n	801636c <HAL_SPI_TransmitReceive+0x14c>
 8016286:	2f00      	cmp	r7, #0
 8016288:	d070      	beq.n	801636c <HAL_SPI_TransmitReceive+0x14c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801628a:	235d      	movs	r3, #93	; 0x5d
 801628c:	5ce1      	ldrb	r1, [r4, r3]
 801628e:	2904      	cmp	r1, #4
 8016290:	d001      	beq.n	8016296 <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016292:	2105      	movs	r1, #5
 8016294:	54e1      	strb	r1, [r4, r3]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016296:	4649      	mov	r1, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016298:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801629a:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 801629c:	2146      	movs	r1, #70	; 0x46
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801629e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80162a0:	5267      	strh	r7, [r4, r1]
  hspi->RxXferSize  = Size;
 80162a2:	3902      	subs	r1, #2
 80162a4:	5267      	strh	r7, [r4, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80162a6:	4641      	mov	r1, r8
  hspi->RxISR       = NULL;
 80162a8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80162aa:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80162ac:	23e0      	movs	r3, #224	; 0xe0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80162ae:	63a1      	str	r1, [r4, #56]	; 0x38
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80162b0:	68e1      	ldr	r1, [r4, #12]
  hspi->TxXferCount = Size;
 80162b2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80162b4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80162b6:	00db      	lsls	r3, r3, #3
 80162b8:	4299      	cmp	r1, r3
 80162ba:	d965      	bls.n	8016388 <HAL_SPI_TransmitReceive+0x168>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80162bc:	6823      	ldr	r3, [r4, #0]
 80162be:	4862      	ldr	r0, [pc, #392]	; (8016448 <HAL_SPI_TransmitReceive+0x228>)
 80162c0:	6859      	ldr	r1, [r3, #4]
 80162c2:	4001      	ands	r1, r0
 80162c4:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80162c6:	2140      	movs	r1, #64	; 0x40
 80162c8:	6818      	ldr	r0, [r3, #0]
 80162ca:	4201      	tst	r1, r0
 80162cc:	d102      	bne.n	80162d4 <HAL_SPI_TransmitReceive+0xb4>
    __HAL_SPI_ENABLE(hspi);
 80162ce:	6818      	ldr	r0, [r3, #0]
 80162d0:	4301      	orrs	r1, r0
 80162d2:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80162d4:	2a00      	cmp	r2, #0
 80162d6:	d000      	beq.n	80162da <HAL_SPI_TransmitReceive+0xba>
 80162d8:	e0af      	b.n	801643a <HAL_SPI_TransmitReceive+0x21a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80162da:	4642      	mov	r2, r8
 80162dc:	8812      	ldrh	r2, [r2, #0]
 80162de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80162e0:	4643      	mov	r3, r8
 80162e2:	3302      	adds	r3, #2
 80162e4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80162e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80162e8:	3b01      	subs	r3, #1
 80162ea:	b29b      	uxth	r3, r3
 80162ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80162ee:	2301      	movs	r3, #1
 80162f0:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80162f2:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80162f4:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80162f6:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80162f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d102      	bne.n	8016304 <HAL_SPI_TransmitReceive+0xe4>
 80162fe:	5be3      	ldrh	r3, [r4, r7]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d035      	beq.n	8016370 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016304:	4641      	mov	r1, r8
 8016306:	6823      	ldr	r3, [r4, #0]
 8016308:	689a      	ldr	r2, [r3, #8]
 801630a:	4211      	tst	r1, r2
 801630c:	d010      	beq.n	8016330 <HAL_SPI_TransmitReceive+0x110>
 801630e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8016310:	2a00      	cmp	r2, #0
 8016312:	d00d      	beq.n	8016330 <HAL_SPI_TransmitReceive+0x110>
 8016314:	464a      	mov	r2, r9
 8016316:	2a01      	cmp	r2, #1
 8016318:	d10a      	bne.n	8016330 <HAL_SPI_TransmitReceive+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801631a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801631c:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801631e:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016320:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016322:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8016324:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8016326:	3a01      	subs	r2, #1
 8016328:	b292      	uxth	r2, r2
 801632a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        txallowed = 0U;
 801632c:	2200      	movs	r2, #0
 801632e:	4691      	mov	r9, r2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016330:	2101      	movs	r1, #1
 8016332:	0008      	movs	r0, r1
 8016334:	689a      	ldr	r2, [r3, #8]
 8016336:	4010      	ands	r0, r2
 8016338:	4211      	tst	r1, r2
 801633a:	d00c      	beq.n	8016356 <HAL_SPI_TransmitReceive+0x136>
 801633c:	5be2      	ldrh	r2, [r4, r7]
 801633e:	2a00      	cmp	r2, #0
 8016340:	d009      	beq.n	8016356 <HAL_SPI_TransmitReceive+0x136>
        txallowed = 1U;
 8016342:	4681      	mov	r9, r0
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016344:	68da      	ldr	r2, [r3, #12]
 8016346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016348:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801634a:	3302      	adds	r3, #2
 801634c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 801634e:	5be3      	ldrh	r3, [r4, r7]
 8016350:	3b01      	subs	r3, #1
 8016352:	b29b      	uxth	r3, r3
 8016354:	53e3      	strh	r3, [r4, r7]
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8016356:	f7fd fd65 	bl	8013e24 <HAL_GetTick>
 801635a:	1b80      	subs	r0, r0, r6
 801635c:	42a8      	cmp	r0, r5
 801635e:	d3cb      	bcc.n	80162f8 <HAL_SPI_TransmitReceive+0xd8>
 8016360:	1c6b      	adds	r3, r5, #1
 8016362:	d0c9      	beq.n	80162f8 <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 8016364:	2003      	movs	r0, #3
 8016366:	e779      	b.n	801625c <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8016368:	2002      	movs	r0, #2
 801636a:	e77d      	b.n	8016268 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_ERROR;
 801636c:	2001      	movs	r0, #1
 801636e:	e775      	b.n	801625c <HAL_SPI_TransmitReceive+0x3c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016370:	0032      	movs	r2, r6
 8016372:	0029      	movs	r1, r5
 8016374:	0020      	movs	r0, r4
 8016376:	f7ff fdbf 	bl	8015ef8 <SPI_EndRxTxTransaction>
 801637a:	2800      	cmp	r0, #0
 801637c:	d100      	bne.n	8016380 <HAL_SPI_TransmitReceive+0x160>
 801637e:	e76d      	b.n	801625c <HAL_SPI_TransmitReceive+0x3c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016380:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8016382:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016384:	6623      	str	r3, [r4, #96]	; 0x60
 8016386:	e769      	b.n	801625c <HAL_SPI_TransmitReceive+0x3c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8016388:	2180      	movs	r1, #128	; 0x80
 801638a:	6823      	ldr	r3, [r4, #0]
 801638c:	0149      	lsls	r1, r1, #5
 801638e:	6858      	ldr	r0, [r3, #4]
 8016390:	4301      	orrs	r1, r0
 8016392:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016394:	2140      	movs	r1, #64	; 0x40
 8016396:	6818      	ldr	r0, [r3, #0]
 8016398:	4201      	tst	r1, r0
 801639a:	d102      	bne.n	80163a2 <HAL_SPI_TransmitReceive+0x182>
    __HAL_SPI_ENABLE(hspi);
 801639c:	6818      	ldr	r0, [r3, #0]
 801639e:	4301      	orrs	r1, r0
 80163a0:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80163a2:	2a00      	cmp	r2, #0
 80163a4:	d14d      	bne.n	8016442 <HAL_SPI_TransmitReceive+0x222>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80163a6:	4642      	mov	r2, r8
 80163a8:	7812      	ldrb	r2, [r2, #0]
 80163aa:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80163ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80163ae:	3301      	adds	r3, #1
 80163b0:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80163b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80163b4:	3b01      	subs	r3, #1
 80163b6:	b29b      	uxth	r3, r3
 80163b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80163ba:	2301      	movs	r3, #1
 80163bc:	4699      	mov	r9, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80163be:	3301      	adds	r3, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80163c0:	2746      	movs	r7, #70	; 0x46
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80163c2:	4698      	mov	r8, r3
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80163c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d102      	bne.n	80163d0 <HAL_SPI_TransmitReceive+0x1b0>
 80163ca:	5be3      	ldrh	r3, [r4, r7]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d0cf      	beq.n	8016370 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80163d0:	4641      	mov	r1, r8
 80163d2:	6823      	ldr	r3, [r4, #0]
 80163d4:	689a      	ldr	r2, [r3, #8]
 80163d6:	4211      	tst	r1, r2
 80163d8:	d012      	beq.n	8016400 <HAL_SPI_TransmitReceive+0x1e0>
 80163da:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80163dc:	2a00      	cmp	r2, #0
 80163de:	d00f      	beq.n	8016400 <HAL_SPI_TransmitReceive+0x1e0>
 80163e0:	464a      	mov	r2, r9
 80163e2:	2a01      	cmp	r2, #1
 80163e4:	d10c      	bne.n	8016400 <HAL_SPI_TransmitReceive+0x1e0>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80163e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80163e8:	7812      	ldrb	r2, [r2, #0]
 80163ea:	731a      	strb	r2, [r3, #12]
        txallowed = 0U;
 80163ec:	2200      	movs	r2, #0
 80163ee:	4691      	mov	r9, r2
        hspi->pTxBuffPtr++;
 80163f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80163f2:	3301      	adds	r3, #1
 80163f4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80163f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80163f8:	3b01      	subs	r3, #1
 80163fa:	b29b      	uxth	r3, r3
 80163fc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80163fe:	6823      	ldr	r3, [r4, #0]
 8016400:	2101      	movs	r1, #1
 8016402:	0008      	movs	r0, r1
 8016404:	689a      	ldr	r2, [r3, #8]
 8016406:	4010      	ands	r0, r2
 8016408:	4211      	tst	r1, r2
 801640a:	d00d      	beq.n	8016428 <HAL_SPI_TransmitReceive+0x208>
 801640c:	5be2      	ldrh	r2, [r4, r7]
 801640e:	2a00      	cmp	r2, #0
 8016410:	d00a      	beq.n	8016428 <HAL_SPI_TransmitReceive+0x208>
        txallowed = 1U;
 8016412:	4681      	mov	r9, r0
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016414:	7b1b      	ldrb	r3, [r3, #12]
 8016416:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8016418:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 801641a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801641c:	3301      	adds	r3, #1
 801641e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8016420:	5be3      	ldrh	r3, [r4, r7]
 8016422:	3b01      	subs	r3, #1
 8016424:	b29b      	uxth	r3, r3
 8016426:	53e3      	strh	r3, [r4, r7]
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8016428:	f7fd fcfc 	bl	8013e24 <HAL_GetTick>
 801642c:	1b80      	subs	r0, r0, r6
 801642e:	42a8      	cmp	r0, r5
 8016430:	d3c8      	bcc.n	80163c4 <HAL_SPI_TransmitReceive+0x1a4>
 8016432:	1c6b      	adds	r3, r5, #1
 8016434:	d0c6      	beq.n	80163c4 <HAL_SPI_TransmitReceive+0x1a4>
        errorcode = HAL_TIMEOUT;
 8016436:	2003      	movs	r0, #3
 8016438:	e710      	b.n	801625c <HAL_SPI_TransmitReceive+0x3c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801643a:	2f01      	cmp	r7, #1
 801643c:	d000      	beq.n	8016440 <HAL_SPI_TransmitReceive+0x220>
 801643e:	e756      	b.n	80162ee <HAL_SPI_TransmitReceive+0xce>
 8016440:	e74b      	b.n	80162da <HAL_SPI_TransmitReceive+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016442:	2f01      	cmp	r7, #1
 8016444:	d1b9      	bne.n	80163ba <HAL_SPI_TransmitReceive+0x19a>
 8016446:	e7ae      	b.n	80163a6 <HAL_SPI_TransmitReceive+0x186>
 8016448:	ffffefff 	.word	0xffffefff

0801644c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801644c:	223d      	movs	r2, #61	; 0x3d
 801644e:	5c81      	ldrb	r1, [r0, r2]
{
 8016450:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8016452:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8016454:	2901      	cmp	r1, #1
 8016456:	d112      	bne.n	801647e <HAL_TIM_Base_Start_IT+0x32>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016458:	3101      	adds	r1, #1
 801645a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	68da      	ldr	r2, [r3, #12]
 8016460:	4302      	orrs	r2, r0
 8016462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016464:	4a0e      	ldr	r2, [pc, #56]	; (80164a0 <HAL_TIM_Base_Start_IT+0x54>)
 8016466:	4293      	cmp	r3, r2
 8016468:	d00a      	beq.n	8016480 <HAL_TIM_Base_Start_IT+0x34>
 801646a:	4a0e      	ldr	r2, [pc, #56]	; (80164a4 <HAL_TIM_Base_Start_IT+0x58>)
 801646c:	4293      	cmp	r3, r2
 801646e:	d007      	beq.n	8016480 <HAL_TIM_Base_Start_IT+0x34>
 8016470:	4a0d      	ldr	r2, [pc, #52]	; (80164a8 <HAL_TIM_Base_Start_IT+0x5c>)
 8016472:	4293      	cmp	r3, r2
 8016474:	d004      	beq.n	8016480 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016476:	681a      	ldr	r2, [r3, #0]
 8016478:	4302      	orrs	r2, r0
  }

  /* Return function status */
  return HAL_OK;
 801647a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 801647c:	601a      	str	r2, [r3, #0]
}
 801647e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016480:	689a      	ldr	r2, [r3, #8]
 8016482:	490a      	ldr	r1, [pc, #40]	; (80164ac <HAL_TIM_Base_Start_IT+0x60>)
 8016484:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016486:	2a06      	cmp	r2, #6
 8016488:	d008      	beq.n	801649c <HAL_TIM_Base_Start_IT+0x50>
 801648a:	3907      	subs	r1, #7
 801648c:	428a      	cmp	r2, r1
 801648e:	d005      	beq.n	801649c <HAL_TIM_Base_Start_IT+0x50>
      __HAL_TIM_ENABLE(htim);
 8016490:	2101      	movs	r1, #1
 8016492:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8016494:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8016496:	430a      	orrs	r2, r1
 8016498:	601a      	str	r2, [r3, #0]
 801649a:	e7f0      	b.n	801647e <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 801649c:	2000      	movs	r0, #0
 801649e:	e7ee      	b.n	801647e <HAL_TIM_Base_Start_IT+0x32>
 80164a0:	40012c00 	.word	0x40012c00
 80164a4:	40000400 	.word	0x40000400
 80164a8:	40014000 	.word	0x40014000
 80164ac:	00010007 	.word	0x00010007

080164b0 <HAL_TIM_OC_DelayElapsedCallback>:
 80164b0:	4770      	bx	lr
 80164b2:	46c0      	nop			; (mov r8, r8)

080164b4 <HAL_TIM_IC_CaptureCallback>:
 80164b4:	4770      	bx	lr
 80164b6:	46c0      	nop			; (mov r8, r8)

080164b8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80164b8:	4770      	bx	lr
 80164ba:	46c0      	nop			; (mov r8, r8)

080164bc <HAL_TIM_TriggerCallback>:
 80164bc:	4770      	bx	lr
 80164be:	46c0      	nop			; (mov r8, r8)

080164c0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80164c0:	2202      	movs	r2, #2
 80164c2:	6803      	ldr	r3, [r0, #0]
{
 80164c4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80164c6:	6919      	ldr	r1, [r3, #16]
{
 80164c8:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80164ca:	420a      	tst	r2, r1
 80164cc:	d003      	beq.n	80164d6 <HAL_TIM_IRQHandler+0x16>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80164ce:	68d9      	ldr	r1, [r3, #12]
 80164d0:	420a      	tst	r2, r1
 80164d2:	d000      	beq.n	80164d6 <HAL_TIM_IRQHandler+0x16>
 80164d4:	e06e      	b.n	80165b4 <HAL_TIM_IRQHandler+0xf4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80164d6:	2204      	movs	r2, #4
 80164d8:	6919      	ldr	r1, [r3, #16]
 80164da:	420a      	tst	r2, r1
 80164dc:	d002      	beq.n	80164e4 <HAL_TIM_IRQHandler+0x24>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80164de:	68d9      	ldr	r1, [r3, #12]
 80164e0:	420a      	tst	r2, r1
 80164e2:	d154      	bne.n	801658e <HAL_TIM_IRQHandler+0xce>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80164e4:	2208      	movs	r2, #8
 80164e6:	6919      	ldr	r1, [r3, #16]
 80164e8:	420a      	tst	r2, r1
 80164ea:	d002      	beq.n	80164f2 <HAL_TIM_IRQHandler+0x32>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80164ec:	68d9      	ldr	r1, [r3, #12]
 80164ee:	420a      	tst	r2, r1
 80164f0:	d13c      	bne.n	801656c <HAL_TIM_IRQHandler+0xac>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80164f2:	2210      	movs	r2, #16
 80164f4:	6919      	ldr	r1, [r3, #16]
 80164f6:	420a      	tst	r2, r1
 80164f8:	d002      	beq.n	8016500 <HAL_TIM_IRQHandler+0x40>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80164fa:	68d9      	ldr	r1, [r3, #12]
 80164fc:	420a      	tst	r2, r1
 80164fe:	d122      	bne.n	8016546 <HAL_TIM_IRQHandler+0x86>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016500:	2201      	movs	r2, #1
 8016502:	6919      	ldr	r1, [r3, #16]
 8016504:	420a      	tst	r2, r1
 8016506:	d002      	beq.n	801650e <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016508:	68d9      	ldr	r1, [r3, #12]
 801650a:	420a      	tst	r2, r1
 801650c:	d168      	bne.n	80165e0 <HAL_TIM_IRQHandler+0x120>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801650e:	2280      	movs	r2, #128	; 0x80
 8016510:	6919      	ldr	r1, [r3, #16]
 8016512:	420a      	tst	r2, r1
 8016514:	d002      	beq.n	801651c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016516:	68d9      	ldr	r1, [r3, #12]
 8016518:	420a      	tst	r2, r1
 801651a:	d168      	bne.n	80165ee <HAL_TIM_IRQHandler+0x12e>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801651c:	691a      	ldr	r2, [r3, #16]
 801651e:	05d2      	lsls	r2, r2, #23
 8016520:	d502      	bpl.n	8016528 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016522:	68da      	ldr	r2, [r3, #12]
 8016524:	0612      	lsls	r2, r2, #24
 8016526:	d46a      	bmi.n	80165fe <HAL_TIM_IRQHandler+0x13e>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016528:	2240      	movs	r2, #64	; 0x40
 801652a:	6919      	ldr	r1, [r3, #16]
 801652c:	420a      	tst	r2, r1
 801652e:	d002      	beq.n	8016536 <HAL_TIM_IRQHandler+0x76>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016530:	68d9      	ldr	r1, [r3, #12]
 8016532:	420a      	tst	r2, r1
 8016534:	d16a      	bne.n	801660c <HAL_TIM_IRQHandler+0x14c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016536:	2220      	movs	r2, #32
 8016538:	6919      	ldr	r1, [r3, #16]
 801653a:	420a      	tst	r2, r1
 801653c:	d002      	beq.n	8016544 <HAL_TIM_IRQHandler+0x84>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801653e:	68d9      	ldr	r1, [r3, #12]
 8016540:	420a      	tst	r2, r1
 8016542:	d147      	bne.n	80165d4 <HAL_TIM_IRQHandler+0x114>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016544:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016546:	3a21      	subs	r2, #33	; 0x21
 8016548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801654a:	3219      	adds	r2, #25
 801654c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801654e:	69da      	ldr	r2, [r3, #28]
 8016550:	23c0      	movs	r3, #192	; 0xc0
 8016552:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8016554:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016556:	421a      	tst	r2, r3
 8016558:	d168      	bne.n	801662c <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801655a:	f7ff ffa9 	bl	80164b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801655e:	0020      	movs	r0, r4
 8016560:	f7ff ffaa 	bl	80164b8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016564:	2300      	movs	r3, #0
 8016566:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016568:	6823      	ldr	r3, [r4, #0]
 801656a:	e7c9      	b.n	8016500 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801656c:	3a11      	subs	r2, #17
 801656e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016570:	320d      	adds	r2, #13
 8016572:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016574:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8016576:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016578:	079b      	lsls	r3, r3, #30
 801657a:	d154      	bne.n	8016626 <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801657c:	f7ff ff98 	bl	80164b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016580:	0020      	movs	r0, r4
 8016582:	f7ff ff99 	bl	80164b8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016586:	2300      	movs	r3, #0
 8016588:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801658a:	6823      	ldr	r3, [r4, #0]
 801658c:	e7b1      	b.n	80164f2 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801658e:	3a09      	subs	r2, #9
 8016590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016592:	3207      	adds	r2, #7
 8016594:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016596:	699a      	ldr	r2, [r3, #24]
 8016598:	23c0      	movs	r3, #192	; 0xc0
 801659a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 801659c:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801659e:	421a      	tst	r2, r3
 80165a0:	d13e      	bne.n	8016620 <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80165a2:	f7ff ff85 	bl	80164b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80165a6:	0020      	movs	r0, r4
 80165a8:	f7ff ff86 	bl	80164b8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80165ac:	2300      	movs	r3, #0
 80165ae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80165b0:	6823      	ldr	r3, [r4, #0]
 80165b2:	e797      	b.n	80164e4 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80165b4:	3a05      	subs	r2, #5
 80165b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80165b8:	3204      	adds	r2, #4
 80165ba:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80165bc:	699b      	ldr	r3, [r3, #24]
 80165be:	079b      	lsls	r3, r3, #30
 80165c0:	d12b      	bne.n	801661a <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80165c2:	f7ff ff75 	bl	80164b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80165c6:	0020      	movs	r0, r4
 80165c8:	f7ff ff76 	bl	80164b8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80165cc:	2300      	movs	r3, #0
 80165ce:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80165d0:	6823      	ldr	r3, [r4, #0]
 80165d2:	e780      	b.n	80164d6 <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80165d4:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 80165d6:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80165d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80165da:	f000 f8e1 	bl	80167a0 <HAL_TIMEx_CommutCallback>
}
 80165de:	e7b1      	b.n	8016544 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80165e0:	3a03      	subs	r2, #3
 80165e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80165e4:	0020      	movs	r0, r4
 80165e6:	f7fd f8b3 	bl	8013750 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80165ea:	6823      	ldr	r3, [r4, #0]
 80165ec:	e78f      	b.n	801650e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80165ee:	3a02      	subs	r2, #2
 80165f0:	3aff      	subs	r2, #255	; 0xff
 80165f2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80165f4:	0020      	movs	r0, r4
 80165f6:	f000 f8d5 	bl	80167a4 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80165fa:	6823      	ldr	r3, [r4, #0]
 80165fc:	e78e      	b.n	801651c <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80165fe:	4a0d      	ldr	r2, [pc, #52]	; (8016634 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 8016600:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016602:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8016604:	f000 f8d0 	bl	80167a8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016608:	6823      	ldr	r3, [r4, #0]
 801660a:	e78d      	b.n	8016528 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801660c:	3a81      	subs	r2, #129	; 0x81
 801660e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8016610:	0020      	movs	r0, r4
 8016612:	f7ff ff53 	bl	80164bc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	e78d      	b.n	8016536 <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 801661a:	f7ff ff4b 	bl	80164b4 <HAL_TIM_IC_CaptureCallback>
 801661e:	e7d5      	b.n	80165cc <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 8016620:	f7ff ff48 	bl	80164b4 <HAL_TIM_IC_CaptureCallback>
 8016624:	e7c2      	b.n	80165ac <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8016626:	f7ff ff45 	bl	80164b4 <HAL_TIM_IC_CaptureCallback>
 801662a:	e7ac      	b.n	8016586 <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 801662c:	f7ff ff42 	bl	80164b4 <HAL_TIM_IC_CaptureCallback>
 8016630:	e798      	b.n	8016564 <HAL_TIM_IRQHandler+0xa4>
 8016632:	46c0      	nop			; (mov r8, r8)
 8016634:	fffffeff 	.word	0xfffffeff

08016638 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016638:	4a1d      	ldr	r2, [pc, #116]	; (80166b0 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 801663a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801663c:	4290      	cmp	r0, r2
 801663e:	d023      	beq.n	8016688 <TIM_Base_SetConfig+0x50>
 8016640:	4a1c      	ldr	r2, [pc, #112]	; (80166b4 <TIM_Base_SetConfig+0x7c>)
 8016642:	4290      	cmp	r0, r2
 8016644:	d017      	beq.n	8016676 <TIM_Base_SetConfig+0x3e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016646:	4a1c      	ldr	r2, [pc, #112]	; (80166b8 <TIM_Base_SetConfig+0x80>)
 8016648:	4290      	cmp	r0, r2
 801664a:	d018      	beq.n	801667e <TIM_Base_SetConfig+0x46>
 801664c:	4a1b      	ldr	r2, [pc, #108]	; (80166bc <TIM_Base_SetConfig+0x84>)
 801664e:	4290      	cmp	r0, r2
 8016650:	d01e      	beq.n	8016690 <TIM_Base_SetConfig+0x58>
 8016652:	4a1b      	ldr	r2, [pc, #108]	; (80166c0 <TIM_Base_SetConfig+0x88>)
 8016654:	4290      	cmp	r0, r2
 8016656:	d01b      	beq.n	8016690 <TIM_Base_SetConfig+0x58>
 8016658:	4a1a      	ldr	r2, [pc, #104]	; (80166c4 <TIM_Base_SetConfig+0x8c>)
 801665a:	4290      	cmp	r0, r2
 801665c:	d018      	beq.n	8016690 <TIM_Base_SetConfig+0x58>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801665e:	2280      	movs	r2, #128	; 0x80
 8016660:	4393      	bics	r3, r2
 8016662:	694a      	ldr	r2, [r1, #20]
 8016664:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8016666:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016668:	688b      	ldr	r3, [r1, #8]
 801666a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801666c:	680b      	ldr	r3, [r1, #0]
 801666e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016670:	2301      	movs	r3, #1
 8016672:	6143      	str	r3, [r0, #20]
}
 8016674:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016676:	2270      	movs	r2, #112	; 0x70
 8016678:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801667a:	684a      	ldr	r2, [r1, #4]
 801667c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 801667e:	4a12      	ldr	r2, [pc, #72]	; (80166c8 <TIM_Base_SetConfig+0x90>)
 8016680:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016682:	68ca      	ldr	r2, [r1, #12]
 8016684:	4313      	orrs	r3, r2
 8016686:	e7ea      	b.n	801665e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016688:	2270      	movs	r2, #112	; 0x70
 801668a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801668c:	684a      	ldr	r2, [r1, #4]
 801668e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8016690:	4a0d      	ldr	r2, [pc, #52]	; (80166c8 <TIM_Base_SetConfig+0x90>)
 8016692:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016694:	68ca      	ldr	r2, [r1, #12]
 8016696:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016698:	2280      	movs	r2, #128	; 0x80
 801669a:	4393      	bics	r3, r2
 801669c:	694a      	ldr	r2, [r1, #20]
 801669e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80166a0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80166a2:	688b      	ldr	r3, [r1, #8]
 80166a4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80166a6:	680b      	ldr	r3, [r1, #0]
 80166a8:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80166aa:	690b      	ldr	r3, [r1, #16]
 80166ac:	6303      	str	r3, [r0, #48]	; 0x30
 80166ae:	e7df      	b.n	8016670 <TIM_Base_SetConfig+0x38>
 80166b0:	40012c00 	.word	0x40012c00
 80166b4:	40000400 	.word	0x40000400
 80166b8:	40002000 	.word	0x40002000
 80166bc:	40014000 	.word	0x40014000
 80166c0:	40014400 	.word	0x40014400
 80166c4:	40014800 	.word	0x40014800
 80166c8:	fffffcff 	.word	0xfffffcff

080166cc <HAL_TIM_Base_Init>:
{
 80166cc:	b570      	push	{r4, r5, r6, lr}
 80166ce:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80166d0:	d02a      	beq.n	8016728 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80166d2:	233d      	movs	r3, #61	; 0x3d
 80166d4:	5cc3      	ldrb	r3, [r0, r3]
 80166d6:	b2da      	uxtb	r2, r3
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d020      	beq.n	801671e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80166dc:	2302      	movs	r3, #2
 80166de:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80166e0:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80166e2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80166e4:	c901      	ldmia	r1!, {r0}
 80166e6:	f7ff ffa7 	bl	8016638 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80166ea:	2301      	movs	r3, #1
 80166ec:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 80166ee:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80166f0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80166f2:	3a0a      	subs	r2, #10
 80166f4:	54a3      	strb	r3, [r4, r2]
 80166f6:	3201      	adds	r2, #1
 80166f8:	54a3      	strb	r3, [r4, r2]
 80166fa:	3201      	adds	r2, #1
 80166fc:	54a3      	strb	r3, [r4, r2]
 80166fe:	3201      	adds	r2, #1
 8016700:	54a3      	strb	r3, [r4, r2]
 8016702:	3201      	adds	r2, #1
 8016704:	54a3      	strb	r3, [r4, r2]
 8016706:	3201      	adds	r2, #1
 8016708:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801670a:	3201      	adds	r2, #1
 801670c:	54a3      	strb	r3, [r4, r2]
 801670e:	3201      	adds	r2, #1
 8016710:	54a3      	strb	r3, [r4, r2]
 8016712:	3201      	adds	r2, #1
 8016714:	54a3      	strb	r3, [r4, r2]
 8016716:	3201      	adds	r2, #1
 8016718:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 801671a:	5563      	strb	r3, [r4, r5]
}
 801671c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 801671e:	333c      	adds	r3, #60	; 0x3c
 8016720:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8016722:	f7fd f913 	bl	801394c <HAL_TIM_Base_MspInit>
 8016726:	e7d9      	b.n	80166dc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8016728:	2001      	movs	r0, #1
 801672a:	e7f7      	b.n	801671c <HAL_TIM_Base_Init+0x50>

0801672c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801672c:	233c      	movs	r3, #60	; 0x3c
{
 801672e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8016730:	5cc3      	ldrb	r3, [r0, r3]
 8016732:	2b01      	cmp	r3, #1
 8016734:	d02a      	beq.n	801678c <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016736:	233d      	movs	r3, #61	; 0x3d
 8016738:	2202      	movs	r2, #2
 801673a:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801673c:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801673e:	4d14      	ldr	r5, [pc, #80]	; (8016790 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8016740:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8016742:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8016744:	42aa      	cmp	r2, r5
 8016746:	d017      	beq.n	8016778 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016748:	2570      	movs	r5, #112	; 0x70
 801674a:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801674c:	680d      	ldr	r5, [r1, #0]
 801674e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016750:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016752:	4b10      	ldr	r3, [pc, #64]	; (8016794 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8016754:	429a      	cmp	r2, r3
 8016756:	d002      	beq.n	801675e <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8016758:	4b0f      	ldr	r3, [pc, #60]	; (8016798 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 801675a:	429a      	cmp	r2, r3
 801675c:	d104      	bne.n	8016768 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801675e:	2380      	movs	r3, #128	; 0x80
 8016760:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016762:	688b      	ldr	r3, [r1, #8]
 8016764:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016766:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016768:	233d      	movs	r3, #61	; 0x3d
 801676a:	2201      	movs	r2, #1
 801676c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 801676e:	2200      	movs	r2, #0
 8016770:	3b01      	subs	r3, #1
 8016772:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8016774:	2000      	movs	r0, #0
}
 8016776:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8016778:	4d08      	ldr	r5, [pc, #32]	; (801679c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 801677a:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801677c:	684d      	ldr	r5, [r1, #4]
 801677e:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8016780:	2570      	movs	r5, #112	; 0x70
 8016782:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016784:	680d      	ldr	r5, [r1, #0]
 8016786:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8016788:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801678a:	e7e8      	b.n	801675e <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 801678c:	2002      	movs	r0, #2
 801678e:	e7f2      	b.n	8016776 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8016790:	40012c00 	.word	0x40012c00
 8016794:	40000400 	.word	0x40000400
 8016798:	40014000 	.word	0x40014000
 801679c:	ff0fffff 	.word	0xff0fffff

080167a0 <HAL_TIMEx_CommutCallback>:
 80167a0:	4770      	bx	lr
 80167a2:	46c0      	nop			; (mov r8, r8)

080167a4 <HAL_TIMEx_BreakCallback>:
 80167a4:	4770      	bx	lr
 80167a6:	46c0      	nop			; (mov r8, r8)

080167a8 <HAL_TIMEx_Break2Callback>:
 80167a8:	4770      	bx	lr
 80167aa:	46c0      	nop			; (mov r8, r8)

080167ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80167ac:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167ae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167b2:	2201      	movs	r2, #1
 80167b4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80167b8:	6801      	ldr	r1, [r0, #0]
 80167ba:	4d13      	ldr	r5, [pc, #76]	; (8016808 <UART_EndRxTransfer+0x5c>)
 80167bc:	680b      	ldr	r3, [r1, #0]
 80167be:	402b      	ands	r3, r5
 80167c0:	600b      	str	r3, [r1, #0]
 80167c2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167c6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167ca:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80167ce:	6802      	ldr	r2, [r0, #0]
 80167d0:	4c0e      	ldr	r4, [pc, #56]	; (801680c <UART_EndRxTransfer+0x60>)
 80167d2:	6893      	ldr	r3, [r2, #8]
 80167d4:	4023      	ands	r3, r4
 80167d6:	6093      	str	r3, [r2, #8]
 80167d8:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80167dc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80167de:	2b01      	cmp	r3, #1
 80167e0:	d10a      	bne.n	80167f8 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167e2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167e6:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80167ea:	2410      	movs	r4, #16
 80167ec:	6802      	ldr	r2, [r0, #0]
 80167ee:	6813      	ldr	r3, [r2, #0]
 80167f0:	43a3      	bics	r3, r4
 80167f2:	6013      	str	r3, [r2, #0]
 80167f4:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80167f8:	238c      	movs	r3, #140	; 0x8c
 80167fa:	2220      	movs	r2, #32
 80167fc:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167fe:	2300      	movs	r3, #0
 8016800:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016802:	6743      	str	r3, [r0, #116]	; 0x74
}
 8016804:	bd30      	pop	{r4, r5, pc}
 8016806:	46c0      	nop			; (mov r8, r8)
 8016808:	fffffedf 	.word	0xfffffedf
 801680c:	effffffe 	.word	0xeffffffe

08016810 <HAL_UART_RxHalfCpltCallback>:
 8016810:	4770      	bx	lr
 8016812:	46c0      	nop			; (mov r8, r8)

08016814 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8016814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8016816:	2188      	movs	r1, #136	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8016818:	238c      	movs	r3, #140	; 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801681a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 801681c:	5865      	ldr	r5, [r4, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801681e:	58e0      	ldr	r0, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8016820:	6823      	ldr	r3, [r4, #0]
 8016822:	689a      	ldr	r2, [r3, #8]
 8016824:	0612      	lsls	r2, r2, #24
 8016826:	d501      	bpl.n	801682c <UART_DMAError+0x18>
 8016828:	2d21      	cmp	r5, #33	; 0x21
 801682a:	d014      	beq.n	8016856 <UART_DMAError+0x42>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801682c:	689b      	ldr	r3, [r3, #8]
 801682e:	065b      	lsls	r3, r3, #25
 8016830:	d501      	bpl.n	8016836 <UART_DMAError+0x22>
 8016832:	2822      	cmp	r0, #34	; 0x22
 8016834:	d008      	beq.n	8016848 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8016836:	2290      	movs	r2, #144	; 0x90
 8016838:	2110      	movs	r1, #16
 801683a:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801683c:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801683e:	430b      	orrs	r3, r1
 8016840:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 8016842:	f7fb fd0d 	bl	8012260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->RxXferCount = 0U;
 8016848:	235e      	movs	r3, #94	; 0x5e
 801684a:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 801684c:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 801684e:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8016850:	f7ff ffac 	bl	80167ac <UART_EndRxTransfer>
 8016854:	e7ef      	b.n	8016836 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 8016856:	2356      	movs	r3, #86	; 0x56
 8016858:	2200      	movs	r2, #0
 801685a:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801685c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016860:	3201      	adds	r2, #1
 8016862:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8016866:	27c0      	movs	r7, #192	; 0xc0
 8016868:	6825      	ldr	r5, [r4, #0]
 801686a:	682b      	ldr	r3, [r5, #0]
 801686c:	43bb      	bics	r3, r7
 801686e:	602b      	str	r3, [r5, #0]
 8016870:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016874:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016878:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801687c:	6822      	ldr	r2, [r4, #0]
 801687e:	4e05      	ldr	r6, [pc, #20]	; (8016894 <UART_DMAError+0x80>)
 8016880:	6893      	ldr	r3, [r2, #8]
 8016882:	4033      	ands	r3, r6
 8016884:	6093      	str	r3, [r2, #8]
 8016886:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 801688a:	2320      	movs	r3, #32
 801688c:	5063      	str	r3, [r4, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801688e:	6823      	ldr	r3, [r4, #0]
}
 8016890:	e7cc      	b.n	801682c <UART_DMAError+0x18>
 8016892:	46c0      	nop			; (mov r8, r8)
 8016894:	ff7fffff 	.word	0xff7fffff

08016898 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8016898:	2300      	movs	r3, #0
 801689a:	225e      	movs	r2, #94	; 0x5e
{
 801689c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801689e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80168a0:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80168a2:	3a08      	subs	r2, #8
 80168a4:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80168a6:	f7fb fcdb 	bl	8012260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80168aa:	bd10      	pop	{r4, pc}

080168ac <HAL_UARTEx_RxEventCallback>:
}
 80168ac:	4770      	bx	lr
 80168ae:	46c0      	nop			; (mov r8, r8)

080168b0 <HAL_UART_IRQHandler>:
{
 80168b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168b2:	4645      	mov	r5, r8
 80168b4:	46de      	mov	lr, fp
 80168b6:	4657      	mov	r7, sl
 80168b8:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80168ba:	6802      	ldr	r2, [r0, #0]
{
 80168bc:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80168be:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80168c0:	4db3      	ldr	r5, [pc, #716]	; (8016b90 <HAL_UART_IRQHandler+0x2e0>)
{
 80168c2:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80168c4:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80168c6:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80168c8:	422b      	tst	r3, r5
 80168ca:	d100      	bne.n	80168ce <HAL_UART_IRQHandler+0x1e>
 80168cc:	e0cb      	b.n	8016a66 <HAL_UART_IRQHandler+0x1b6>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80168ce:	4eb1      	ldr	r6, [pc, #708]	; (8016b94 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80168d0:	4db1      	ldr	r5, [pc, #708]	; (8016b98 <HAL_UART_IRQHandler+0x2e8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80168d2:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80168d4:	4005      	ands	r5, r0
 80168d6:	4335      	orrs	r5, r6
 80168d8:	d157      	bne.n	801698a <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168da:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80168dc:	2d01      	cmp	r5, #1
 80168de:	d026      	beq.n	801692e <HAL_UART_IRQHandler+0x7e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80168e0:	2580      	movs	r5, #128	; 0x80
 80168e2:	036d      	lsls	r5, r5, #13
 80168e4:	422b      	tst	r3, r5
 80168e6:	d002      	beq.n	80168ee <HAL_UART_IRQHandler+0x3e>
 80168e8:	024e      	lsls	r6, r1, #9
 80168ea:	d500      	bpl.n	80168ee <HAL_UART_IRQHandler+0x3e>
 80168ec:	e0e2      	b.n	8016ab4 <HAL_UART_IRQHandler+0x204>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80168ee:	2280      	movs	r2, #128	; 0x80
 80168f0:	421a      	tst	r2, r3
 80168f2:	d006      	beq.n	8016902 <HAL_UART_IRQHandler+0x52>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80168f4:	2580      	movs	r5, #128	; 0x80
 80168f6:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80168f8:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80168fa:	4029      	ands	r1, r5
 80168fc:	430a      	orrs	r2, r1
 80168fe:	d000      	beq.n	8016902 <HAL_UART_IRQHandler+0x52>
 8016900:	e0d1      	b.n	8016aa6 <HAL_UART_IRQHandler+0x1f6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016902:	2240      	movs	r2, #64	; 0x40
 8016904:	421a      	tst	r2, r3
 8016906:	d002      	beq.n	801690e <HAL_UART_IRQHandler+0x5e>
 8016908:	4202      	tst	r2, r0
 801690a:	d000      	beq.n	801690e <HAL_UART_IRQHandler+0x5e>
 801690c:	e0db      	b.n	8016ac6 <HAL_UART_IRQHandler+0x216>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801690e:	021a      	lsls	r2, r3, #8
 8016910:	d502      	bpl.n	8016918 <HAL_UART_IRQHandler+0x68>
 8016912:	0042      	lsls	r2, r0, #1
 8016914:	d500      	bpl.n	8016918 <HAL_UART_IRQHandler+0x68>
 8016916:	e0ea      	b.n	8016aee <HAL_UART_IRQHandler+0x23e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016918:	01db      	lsls	r3, r3, #7
 801691a:	d502      	bpl.n	8016922 <HAL_UART_IRQHandler+0x72>
 801691c:	2800      	cmp	r0, #0
 801691e:	da00      	bge.n	8016922 <HAL_UART_IRQHandler+0x72>
 8016920:	e12d      	b.n	8016b7e <HAL_UART_IRQHandler+0x2ce>
}
 8016922:	bcf0      	pop	{r4, r5, r6, r7}
 8016924:	46bb      	mov	fp, r7
 8016926:	46b2      	mov	sl, r6
 8016928:	46a9      	mov	r9, r5
 801692a:	46a0      	mov	r8, r4
 801692c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801692e:	2610      	movs	r6, #16
 8016930:	421e      	tst	r6, r3
 8016932:	d0d5      	beq.n	80168e0 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8016934:	4206      	tst	r6, r0
 8016936:	d0d3      	beq.n	80168e0 <HAL_UART_IRQHandler+0x30>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016938:	2340      	movs	r3, #64	; 0x40
 801693a:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801693c:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801693e:	6892      	ldr	r2, [r2, #8]
 8016940:	4010      	ands	r0, r2
 8016942:	4213      	tst	r3, r2
 8016944:	d100      	bne.n	8016948 <HAL_UART_IRQHandler+0x98>
 8016946:	e0dd      	b.n	8016b04 <HAL_UART_IRQHandler+0x254>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016948:	2280      	movs	r2, #128	; 0x80
 801694a:	4694      	mov	ip, r2
 801694c:	58a2      	ldr	r2, [r4, r2]
 801694e:	6810      	ldr	r0, [r2, #0]
 8016950:	6842      	ldr	r2, [r0, #4]
 8016952:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8016954:	2a00      	cmp	r2, #0
 8016956:	d0e4      	beq.n	8016922 <HAL_UART_IRQHandler+0x72>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016958:	215c      	movs	r1, #92	; 0x5c
 801695a:	468b      	mov	fp, r1
 801695c:	5a61      	ldrh	r1, [r4, r1]
 801695e:	4291      	cmp	r1, r2
 8016960:	d9df      	bls.n	8016922 <HAL_UART_IRQHandler+0x72>
        huart->RxXferCount = nb_remaining_rx_data;
 8016962:	275e      	movs	r7, #94	; 0x5e
 8016964:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016966:	2220      	movs	r2, #32
 8016968:	0017      	movs	r7, r2
 801696a:	6800      	ldr	r0, [r0, #0]
 801696c:	4007      	ands	r7, r0
 801696e:	46b8      	mov	r8, r7
 8016970:	4202      	tst	r2, r0
 8016972:	d100      	bne.n	8016976 <HAL_UART_IRQHandler+0xc6>
 8016974:	e118      	b.n	8016ba8 <HAL_UART_IRQHandler+0x2f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016976:	2302      	movs	r3, #2
 8016978:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801697a:	335c      	adds	r3, #92	; 0x5c
 801697c:	5ae3      	ldrh	r3, [r4, r3]
 801697e:	0020      	movs	r0, r4
 8016980:	1ac9      	subs	r1, r1, r3
 8016982:	b289      	uxth	r1, r1
 8016984:	f7ff ff92 	bl	80168ac <HAL_UARTEx_RxEventCallback>
 8016988:	e7cb      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801698a:	2501      	movs	r5, #1
 801698c:	421d      	tst	r5, r3
 801698e:	d008      	beq.n	80169a2 <HAL_UART_IRQHandler+0xf2>
 8016990:	05c7      	lsls	r7, r0, #23
 8016992:	d506      	bpl.n	80169a2 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016994:	2790      	movs	r7, #144	; 0x90
 8016996:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016998:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801699a:	59e7      	ldr	r7, [r4, r7]
 801699c:	433d      	orrs	r5, r7
 801699e:	4667      	mov	r7, ip
 80169a0:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80169a2:	2502      	movs	r5, #2
 80169a4:	421d      	tst	r5, r3
 80169a6:	d06d      	beq.n	8016a84 <HAL_UART_IRQHandler+0x1d4>
 80169a8:	07cf      	lsls	r7, r1, #31
 80169aa:	d50b      	bpl.n	80169c4 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80169ac:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80169ae:	358e      	adds	r5, #142	; 0x8e
 80169b0:	2704      	movs	r7, #4
 80169b2:	46ac      	mov	ip, r5
 80169b4:	5965      	ldr	r5, [r4, r5]
 80169b6:	46b8      	mov	r8, r7
 80169b8:	433d      	orrs	r5, r7
 80169ba:	4667      	mov	r7, ip
 80169bc:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80169be:	4645      	mov	r5, r8
 80169c0:	421d      	tst	r5, r3
 80169c2:	d163      	bne.n	8016a8c <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80169c4:	2708      	movs	r7, #8
 80169c6:	421f      	tst	r7, r3
 80169c8:	d008      	beq.n	80169dc <HAL_UART_IRQHandler+0x12c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80169ca:	2520      	movs	r5, #32
 80169cc:	4005      	ands	r5, r0
 80169ce:	4335      	orrs	r5, r6
 80169d0:	d004      	beq.n	80169dc <HAL_UART_IRQHandler+0x12c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80169d2:	2690      	movs	r6, #144	; 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80169d4:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80169d6:	59a5      	ldr	r5, [r4, r6]
 80169d8:	433d      	orrs	r5, r7
 80169da:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80169dc:	2580      	movs	r5, #128	; 0x80
 80169de:	012d      	lsls	r5, r5, #4
 80169e0:	422b      	tst	r3, r5
 80169e2:	d007      	beq.n	80169f4 <HAL_UART_IRQHandler+0x144>
 80169e4:	0146      	lsls	r6, r0, #5
 80169e6:	d505      	bpl.n	80169f4 <HAL_UART_IRQHandler+0x144>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80169e8:	2690      	movs	r6, #144	; 0x90
 80169ea:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80169ec:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80169ee:	59a5      	ldr	r5, [r4, r6]
 80169f0:	433d      	orrs	r5, r7
 80169f2:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80169f4:	2590      	movs	r5, #144	; 0x90
 80169f6:	5965      	ldr	r5, [r4, r5]
 80169f8:	2d00      	cmp	r5, #0
 80169fa:	d100      	bne.n	80169fe <HAL_UART_IRQHandler+0x14e>
 80169fc:	e791      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80169fe:	2520      	movs	r5, #32
 8016a00:	421d      	tst	r5, r3
 8016a02:	d005      	beq.n	8016a10 <HAL_UART_IRQHandler+0x160>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016a04:	2380      	movs	r3, #128	; 0x80
 8016a06:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016a08:	4005      	ands	r5, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016a0a:	400b      	ands	r3, r1
 8016a0c:	431d      	orrs	r5, r3
 8016a0e:	d172      	bne.n	8016af6 <HAL_UART_IRQHandler+0x246>
      errorcode = huart->ErrorCode;
 8016a10:	2690      	movs	r6, #144	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016a12:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016a14:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 8016a16:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016a18:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016a1a:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016a1c:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 8016a1e:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016a20:	431d      	orrs	r5, r3
 8016a22:	d100      	bne.n	8016a26 <HAL_UART_IRQHandler+0x176>
 8016a24:	e0af      	b.n	8016b86 <HAL_UART_IRQHandler+0x2d6>
        UART_EndRxTransfer(huart);
 8016a26:	f7ff fec1 	bl	80167ac <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016a2a:	6823      	ldr	r3, [r4, #0]
 8016a2c:	689b      	ldr	r3, [r3, #8]
 8016a2e:	421f      	tst	r7, r3
 8016a30:	d045      	beq.n	8016abe <HAL_UART_IRQHandler+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a32:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a36:	2301      	movs	r3, #1
 8016a38:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016a3c:	6822      	ldr	r2, [r4, #0]
 8016a3e:	6893      	ldr	r3, [r2, #8]
 8016a40:	43bb      	bics	r3, r7
 8016a42:	6093      	str	r3, [r2, #8]
 8016a44:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8016a48:	2580      	movs	r5, #128	; 0x80
 8016a4a:	5960      	ldr	r0, [r4, r5]
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	d036      	beq.n	8016abe <HAL_UART_IRQHandler+0x20e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016a50:	4b52      	ldr	r3, [pc, #328]	; (8016b9c <HAL_UART_IRQHandler+0x2ec>)
 8016a52:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016a54:	f7fd fedc 	bl	8014810 <HAL_DMA_Abort_IT>
 8016a58:	2800      	cmp	r0, #0
 8016a5a:	d100      	bne.n	8016a5e <HAL_UART_IRQHandler+0x1ae>
 8016a5c:	e761      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016a5e:	5960      	ldr	r0, [r4, r5]
 8016a60:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016a62:	4798      	blx	r3
 8016a64:	e75d      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016a66:	2520      	movs	r5, #32
 8016a68:	421d      	tst	r5, r3
 8016a6a:	d100      	bne.n	8016a6e <HAL_UART_IRQHandler+0x1be>
 8016a6c:	e735      	b.n	80168da <HAL_UART_IRQHandler+0x2a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016a6e:	2680      	movs	r6, #128	; 0x80
 8016a70:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8016a72:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8016a74:	400e      	ands	r6, r1
 8016a76:	4335      	orrs	r5, r6
 8016a78:	d100      	bne.n	8016a7c <HAL_UART_IRQHandler+0x1cc>
 8016a7a:	e72e      	b.n	80168da <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 8016a7c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d115      	bne.n	8016aae <HAL_UART_IRQHandler+0x1fe>
 8016a82:	e74e      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016a84:	075d      	lsls	r5, r3, #29
 8016a86:	d59d      	bpl.n	80169c4 <HAL_UART_IRQHandler+0x114>
 8016a88:	07cd      	lsls	r5, r1, #31
 8016a8a:	d59b      	bpl.n	80169c4 <HAL_UART_IRQHandler+0x114>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016a8c:	2504      	movs	r5, #4
 8016a8e:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016a90:	358c      	adds	r5, #140	; 0x8c
 8016a92:	46a9      	mov	r9, r5
 8016a94:	5965      	ldr	r5, [r4, r5]
 8016a96:	46a8      	mov	r8, r5
 8016a98:	2502      	movs	r5, #2
 8016a9a:	4647      	mov	r7, r8
 8016a9c:	432f      	orrs	r7, r5
 8016a9e:	003d      	movs	r5, r7
 8016aa0:	464f      	mov	r7, r9
 8016aa2:	51e5      	str	r5, [r4, r7]
 8016aa4:	e78e      	b.n	80169c4 <HAL_UART_IRQHandler+0x114>
    if (huart->TxISR != NULL)
 8016aa6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d100      	bne.n	8016aae <HAL_UART_IRQHandler+0x1fe>
 8016aac:	e739      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
      huart->TxISR(huart);
 8016aae:	0020      	movs	r0, r4
 8016ab0:	4798      	blx	r3
 8016ab2:	e736      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_WakeupCallback(huart);
 8016ab4:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016ab6:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8016ab8:	f000 fcca 	bl	8017450 <HAL_UARTEx_WakeupCallback>
    return;
 8016abc:	e731      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
            HAL_UART_ErrorCallback(huart);
 8016abe:	0020      	movs	r0, r4
 8016ac0:	f7fb fbce 	bl	8012260 <HAL_UART_ErrorCallback>
 8016ac4:	e72d      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ac6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016aca:	2301      	movs	r3, #1
 8016acc:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016ad0:	6821      	ldr	r1, [r4, #0]
 8016ad2:	680b      	ldr	r3, [r1, #0]
 8016ad4:	4393      	bics	r3, r2
 8016ad6:	600b      	str	r3, [r1, #0]
 8016ad8:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016adc:	2388      	movs	r3, #136	; 0x88
 8016ade:	3a20      	subs	r2, #32
 8016ae0:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8016ae2:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8016ae4:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8016ae6:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8016ae8:	f7fb fbb8 	bl	801225c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016aec:	e719      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8016aee:	0020      	movs	r0, r4
 8016af0:	f000 fcb2 	bl	8017458 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8016af4:	e715      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
        if (huart->RxISR != NULL)
 8016af6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d089      	beq.n	8016a10 <HAL_UART_IRQHandler+0x160>
          huart->RxISR(huart);
 8016afc:	0020      	movs	r0, r4
 8016afe:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016b00:	6822      	ldr	r2, [r4, #0]
 8016b02:	e785      	b.n	8016a10 <HAL_UART_IRQHandler+0x160>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016b04:	235c      	movs	r3, #92	; 0x5c
 8016b06:	225e      	movs	r2, #94	; 0x5e
 8016b08:	5ae1      	ldrh	r1, [r4, r3]
 8016b0a:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 8016b0c:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016b0e:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8016b10:	2a00      	cmp	r2, #0
 8016b12:	d100      	bne.n	8016b16 <HAL_UART_IRQHandler+0x266>
 8016b14:	e705      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016b16:	1ac9      	subs	r1, r1, r3
 8016b18:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8016b1a:	2900      	cmp	r1, #0
 8016b1c:	d100      	bne.n	8016b20 <HAL_UART_IRQHandler+0x270>
 8016b1e:	e700      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b20:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b24:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016b28:	6822      	ldr	r2, [r4, #0]
 8016b2a:	6813      	ldr	r3, [r2, #0]
 8016b2c:	4698      	mov	r8, r3
 8016b2e:	4647      	mov	r7, r8
 8016b30:	4b1b      	ldr	r3, [pc, #108]	; (8016ba0 <HAL_UART_IRQHandler+0x2f0>)
 8016b32:	401f      	ands	r7, r3
 8016b34:	6017      	str	r7, [r2, #0]
 8016b36:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b3a:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b3e:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016b42:	6822      	ldr	r2, [r4, #0]
 8016b44:	6893      	ldr	r3, [r2, #8]
 8016b46:	4698      	mov	r8, r3
 8016b48:	4647      	mov	r7, r8
 8016b4a:	4b16      	ldr	r3, [pc, #88]	; (8016ba4 <HAL_UART_IRQHandler+0x2f4>)
 8016b4c:	401f      	ands	r7, r3
 8016b4e:	6097      	str	r7, [r2, #8]
 8016b50:	f389 8810 	msr	PRIMASK, r9
        huart->RxState = HAL_UART_STATE_READY;
 8016b54:	238c      	movs	r3, #140	; 0x8c
 8016b56:	2220      	movs	r2, #32
 8016b58:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b5a:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8016b5c:	6760      	str	r0, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b5e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b62:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016b66:	6822      	ldr	r2, [r4, #0]
 8016b68:	6813      	ldr	r3, [r2, #0]
 8016b6a:	43b3      	bics	r3, r6
 8016b6c:	6013      	str	r3, [r2, #0]
 8016b6e:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016b72:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016b74:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8016b76:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016b78:	f7ff fe98 	bl	80168ac <HAL_UARTEx_RxEventCallback>
 8016b7c:	e6d1      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016b7e:	0020      	movs	r0, r4
 8016b80:	f000 fc68 	bl	8017454 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8016b84:	e6cd      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
        HAL_UART_ErrorCallback(huart);
 8016b86:	f7fb fb6b 	bl	8012260 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b8a:	51a5      	str	r5, [r4, r6]
 8016b8c:	e6c9      	b.n	8016922 <HAL_UART_IRQHandler+0x72>
 8016b8e:	46c0      	nop			; (mov r8, r8)
 8016b90:	0000080f 	.word	0x0000080f
 8016b94:	10000001 	.word	0x10000001
 8016b98:	04000120 	.word	0x04000120
 8016b9c:	08016899 	.word	0x08016899
 8016ba0:	fffffedf 	.word	0xfffffedf
 8016ba4:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ba8:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bac:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016bb0:	6820      	ldr	r0, [r4, #0]
 8016bb2:	4f17      	ldr	r7, [pc, #92]	; (8016c10 <HAL_UART_IRQHandler+0x360>)
 8016bb4:	6801      	ldr	r1, [r0, #0]
 8016bb6:	4039      	ands	r1, r7
 8016bb8:	6001      	str	r1, [r0, #0]
 8016bba:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bbe:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bc2:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016bc6:	6820      	ldr	r0, [r4, #0]
 8016bc8:	6881      	ldr	r1, [r0, #8]
 8016bca:	43a9      	bics	r1, r5
 8016bcc:	6081      	str	r1, [r0, #8]
 8016bce:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bd2:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bd6:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016bda:	6820      	ldr	r0, [r4, #0]
 8016bdc:	6881      	ldr	r1, [r0, #8]
 8016bde:	4399      	bics	r1, r3
 8016be0:	6081      	str	r1, [r0, #8]
 8016be2:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 8016be6:	334c      	adds	r3, #76	; 0x4c
 8016be8:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016bea:	4643      	mov	r3, r8
 8016bec:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bee:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bf2:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016bf6:	6822      	ldr	r2, [r4, #0]
 8016bf8:	6813      	ldr	r3, [r2, #0]
 8016bfa:	43b3      	bics	r3, r6
 8016bfc:	6013      	str	r3, [r2, #0]
 8016bfe:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016c02:	4663      	mov	r3, ip
 8016c04:	58e0      	ldr	r0, [r4, r3]
 8016c06:	f7fd fdc5 	bl	8014794 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016c0a:	465b      	mov	r3, fp
 8016c0c:	5ae1      	ldrh	r1, [r4, r3]
 8016c0e:	e6b2      	b.n	8016976 <HAL_UART_IRQHandler+0xc6>
 8016c10:	fffffeff 	.word	0xfffffeff

08016c14 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8016c14:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016c16:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8016c18:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8016c1a:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	d002      	beq.n	8016c28 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8016c22:	f7ff fdf5 	bl	8016810 <HAL_UART_RxHalfCpltCallback>
}
 8016c26:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8016c28:	335b      	adds	r3, #91	; 0x5b
 8016c2a:	5ac1      	ldrh	r1, [r0, r3]
 8016c2c:	0849      	lsrs	r1, r1, #1
 8016c2e:	f7ff fe3d 	bl	80168ac <HAL_UARTEx_RxEventCallback>
 8016c32:	e7f8      	b.n	8016c26 <UART_DMARxHalfCplt+0x12>

08016c34 <UART_DMAReceiveCplt>:
{
 8016c34:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016c36:	681b      	ldr	r3, [r3, #0]
{
 8016c38:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	2320      	movs	r3, #32
 8016c3e:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016c40:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016c42:	4011      	ands	r1, r2
 8016c44:	4213      	tst	r3, r2
 8016c46:	d127      	bne.n	8016c98 <UART_DMAReceiveCplt+0x64>
    huart->RxXferCount = 0U;
 8016c48:	225e      	movs	r2, #94	; 0x5e
 8016c4a:	5281      	strh	r1, [r0, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c4c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c50:	3a5d      	subs	r2, #93	; 0x5d
 8016c52:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016c56:	6804      	ldr	r4, [r0, #0]
 8016c58:	4e1c      	ldr	r6, [pc, #112]	; (8016ccc <UART_DMAReceiveCplt+0x98>)
 8016c5a:	6821      	ldr	r1, [r4, #0]
 8016c5c:	4031      	ands	r1, r6
 8016c5e:	6021      	str	r1, [r4, #0]
 8016c60:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c64:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c68:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c6c:	6804      	ldr	r4, [r0, #0]
 8016c6e:	68a1      	ldr	r1, [r4, #8]
 8016c70:	4391      	bics	r1, r2
 8016c72:	60a1      	str	r1, [r4, #8]
 8016c74:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c78:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c7c:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016c80:	2540      	movs	r5, #64	; 0x40
 8016c82:	6801      	ldr	r1, [r0, #0]
 8016c84:	688a      	ldr	r2, [r1, #8]
 8016c86:	43aa      	bics	r2, r5
 8016c88:	608a      	str	r2, [r1, #8]
 8016c8a:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 8016c8e:	228c      	movs	r2, #140	; 0x8c
 8016c90:	5083      	str	r3, [r0, r2]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c92:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8016c94:	2b01      	cmp	r3, #1
 8016c96:	d00c      	beq.n	8016cb2 <UART_DMAReceiveCplt+0x7e>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016c98:	2300      	movs	r3, #0
 8016c9a:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c9c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8016c9e:	2b01      	cmp	r3, #1
 8016ca0:	d002      	beq.n	8016ca8 <UART_DMAReceiveCplt+0x74>
    HAL_UART_RxCpltCallback(huart);
 8016ca2:	f7fb fc2d 	bl	8012500 <HAL_UART_RxCpltCallback>
}
 8016ca6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016ca8:	335b      	adds	r3, #91	; 0x5b
 8016caa:	5ac1      	ldrh	r1, [r0, r3]
 8016cac:	f7ff fdfe 	bl	80168ac <HAL_UARTEx_RxEventCallback>
 8016cb0:	e7f9      	b.n	8016ca6 <UART_DMAReceiveCplt+0x72>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cb2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cb6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016cba:	2410      	movs	r4, #16
 8016cbc:	6802      	ldr	r2, [r0, #0]
 8016cbe:	6813      	ldr	r3, [r2, #0]
 8016cc0:	43a3      	bics	r3, r4
 8016cc2:	6013      	str	r3, [r2, #0]
 8016cc4:	f381 8810 	msr	PRIMASK, r1
}
 8016cc8:	e7e6      	b.n	8016c98 <UART_DMAReceiveCplt+0x64>
 8016cca:	46c0      	nop			; (mov r8, r8)
 8016ccc:	fffffeff 	.word	0xfffffeff

08016cd0 <UART_SetConfig>:
{
 8016cd0:	b570      	push	{r4, r5, r6, lr}
 8016cd2:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016cd4:	6925      	ldr	r5, [r4, #16]
 8016cd6:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016cd8:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016cda:	432a      	orrs	r2, r5
 8016cdc:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016cde:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016ce0:	69c0      	ldr	r0, [r0, #28]
 8016ce2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016ce4:	4d4d      	ldr	r5, [pc, #308]	; (8016e1c <UART_SetConfig+0x14c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016ce6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016ce8:	4029      	ands	r1, r5
 8016cea:	430a      	orrs	r2, r1
 8016cec:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016cee:	685a      	ldr	r2, [r3, #4]
 8016cf0:	494b      	ldr	r1, [pc, #300]	; (8016e20 <UART_SetConfig+0x150>)
    tmpreg |= huart->Init.OneBitSampling;
 8016cf2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016cf4:	400a      	ands	r2, r1
 8016cf6:	68e1      	ldr	r1, [r4, #12]
 8016cf8:	430a      	orrs	r2, r1
 8016cfa:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016cfc:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016cfe:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8016d00:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016d02:	4d48      	ldr	r5, [pc, #288]	; (8016e24 <UART_SetConfig+0x154>)
 8016d04:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016d06:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016d08:	430a      	orrs	r2, r1
 8016d0a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d0e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016d10:	43aa      	bics	r2, r5
 8016d12:	430a      	orrs	r2, r1
 8016d14:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016d16:	4a44      	ldr	r2, [pc, #272]	; (8016e28 <UART_SetConfig+0x158>)
 8016d18:	4293      	cmp	r3, r2
 8016d1a:	d035      	beq.n	8016d88 <UART_SetConfig+0xb8>
 8016d1c:	4a43      	ldr	r2, [pc, #268]	; (8016e2c <UART_SetConfig+0x15c>)
 8016d1e:	4293      	cmp	r3, r2
 8016d20:	d00c      	beq.n	8016d3c <UART_SetConfig+0x6c>
 8016d22:	4a43      	ldr	r2, [pc, #268]	; (8016e30 <UART_SetConfig+0x160>)
 8016d24:	4293      	cmp	r3, r2
 8016d26:	d036      	beq.n	8016d96 <UART_SetConfig+0xc6>
 8016d28:	4a42      	ldr	r2, [pc, #264]	; (8016e34 <UART_SetConfig+0x164>)
 8016d2a:	4293      	cmp	r3, r2
 8016d2c:	d033      	beq.n	8016d96 <UART_SetConfig+0xc6>
    switch (clocksource)
 8016d2e:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8016d30:	4b41      	ldr	r3, [pc, #260]	; (8016e38 <UART_SetConfig+0x168>)
 8016d32:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8016d34:	2300      	movs	r3, #0
 8016d36:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8016d38:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8016d3a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016d3c:	4b3f      	ldr	r3, [pc, #252]	; (8016e3c <UART_SetConfig+0x16c>)
 8016d3e:	4a40      	ldr	r2, [pc, #256]	; (8016e40 <UART_SetConfig+0x170>)
 8016d40:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8016d42:	230c      	movs	r3, #12
 8016d44:	402b      	ands	r3, r5
 8016d46:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016d48:	2380      	movs	r3, #128	; 0x80
 8016d4a:	021b      	lsls	r3, r3, #8
 8016d4c:	4298      	cmp	r0, r3
 8016d4e:	d02f      	beq.n	8016db0 <UART_SetConfig+0xe0>
    switch (clocksource)
 8016d50:	2a04      	cmp	r2, #4
 8016d52:	d056      	beq.n	8016e02 <UART_SetConfig+0x132>
 8016d54:	d851      	bhi.n	8016dfa <UART_SetConfig+0x12a>
 8016d56:	2a00      	cmp	r2, #0
 8016d58:	d021      	beq.n	8016d9e <UART_SetConfig+0xce>
 8016d5a:	2a02      	cmp	r2, #2
 8016d5c:	d1e7      	bne.n	8016d2e <UART_SetConfig+0x5e>
        pclk = (uint32_t) HSI_VALUE;
 8016d5e:	4839      	ldr	r0, [pc, #228]	; (8016e44 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016d60:	4b39      	ldr	r3, [pc, #228]	; (8016e48 <UART_SetConfig+0x178>)
 8016d62:	0049      	lsls	r1, r1, #1
 8016d64:	5ac9      	ldrh	r1, [r1, r3]
 8016d66:	f7f5 fde7 	bl	800c938 <__udivsi3>
 8016d6a:	6865      	ldr	r5, [r4, #4]
 8016d6c:	086b      	lsrs	r3, r5, #1
 8016d6e:	18c0      	adds	r0, r0, r3
 8016d70:	0029      	movs	r1, r5
 8016d72:	f7f5 fde1 	bl	800c938 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016d76:	0002      	movs	r2, r0
 8016d78:	4b34      	ldr	r3, [pc, #208]	; (8016e4c <UART_SetConfig+0x17c>)
 8016d7a:	3a10      	subs	r2, #16
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d8d6      	bhi.n	8016d2e <UART_SetConfig+0x5e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016d80:	6823      	ldr	r3, [r4, #0]
 8016d82:	60d8      	str	r0, [r3, #12]
 8016d84:	2000      	movs	r0, #0
 8016d86:	e7d3      	b.n	8016d30 <UART_SetConfig+0x60>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016d88:	4b2c      	ldr	r3, [pc, #176]	; (8016e3c <UART_SetConfig+0x16c>)
 8016d8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016d8c:	2303      	movs	r3, #3
 8016d8e:	4013      	ands	r3, r2
 8016d90:	3b01      	subs	r3, #1
 8016d92:	2b02      	cmp	r3, #2
 8016d94:	d909      	bls.n	8016daa <UART_SetConfig+0xda>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016d96:	2380      	movs	r3, #128	; 0x80
 8016d98:	021b      	lsls	r3, r3, #8
 8016d9a:	4298      	cmp	r0, r3
 8016d9c:	d03a      	beq.n	8016e14 <UART_SetConfig+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 8016d9e:	f7fe fecd 	bl	8015b3c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8016da2:	2800      	cmp	r0, #0
 8016da4:	d0ee      	beq.n	8016d84 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016da6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016da8:	e7da      	b.n	8016d60 <UART_SetConfig+0x90>
 8016daa:	4a29      	ldr	r2, [pc, #164]	; (8016e50 <UART_SetConfig+0x180>)
 8016dac:	5cd2      	ldrb	r2, [r2, r3]
 8016dae:	e7cb      	b.n	8016d48 <UART_SetConfig+0x78>
    switch (clocksource)
 8016db0:	2a04      	cmp	r2, #4
 8016db2:	d029      	beq.n	8016e08 <UART_SetConfig+0x138>
 8016db4:	d81e      	bhi.n	8016df4 <UART_SetConfig+0x124>
 8016db6:	2a00      	cmp	r2, #0
 8016db8:	d02c      	beq.n	8016e14 <UART_SetConfig+0x144>
 8016dba:	2a02      	cmp	r2, #2
 8016dbc:	d1b7      	bne.n	8016d2e <UART_SetConfig+0x5e>
 8016dbe:	4821      	ldr	r0, [pc, #132]	; (8016e44 <UART_SetConfig+0x174>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016dc0:	4b21      	ldr	r3, [pc, #132]	; (8016e48 <UART_SetConfig+0x178>)
 8016dc2:	0049      	lsls	r1, r1, #1
 8016dc4:	5ac9      	ldrh	r1, [r1, r3]
 8016dc6:	f7f5 fdb7 	bl	800c938 <__udivsi3>
 8016dca:	6865      	ldr	r5, [r4, #4]
 8016dcc:	0040      	lsls	r0, r0, #1
 8016dce:	086b      	lsrs	r3, r5, #1
 8016dd0:	18c0      	adds	r0, r0, r3
 8016dd2:	0029      	movs	r1, r5
 8016dd4:	f7f5 fdb0 	bl	800c938 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016dd8:	0002      	movs	r2, r0
 8016dda:	4b1c      	ldr	r3, [pc, #112]	; (8016e4c <UART_SetConfig+0x17c>)
 8016ddc:	3a10      	subs	r2, #16
 8016dde:	429a      	cmp	r2, r3
 8016de0:	d8a5      	bhi.n	8016d2e <UART_SetConfig+0x5e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016de2:	4b1c      	ldr	r3, [pc, #112]	; (8016e54 <UART_SetConfig+0x184>)
        huart->Instance->BRR = brrtemp;
 8016de4:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016de6:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016de8:	0700      	lsls	r0, r0, #28
 8016dea:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8016dec:	4303      	orrs	r3, r0
 8016dee:	60d3      	str	r3, [r2, #12]
 8016df0:	2000      	movs	r0, #0
 8016df2:	e79d      	b.n	8016d30 <UART_SetConfig+0x60>
    switch (clocksource)
 8016df4:	2a08      	cmp	r2, #8
 8016df6:	d0e3      	beq.n	8016dc0 <UART_SetConfig+0xf0>
 8016df8:	e799      	b.n	8016d2e <UART_SetConfig+0x5e>
    switch (clocksource)
 8016dfa:	0018      	movs	r0, r3
 8016dfc:	2a08      	cmp	r2, #8
 8016dfe:	d0af      	beq.n	8016d60 <UART_SetConfig+0x90>
 8016e00:	e795      	b.n	8016d2e <UART_SetConfig+0x5e>
        pclk = HAL_RCC_GetSysClockFreq();
 8016e02:	f7fe fd89 	bl	8015918 <HAL_RCC_GetSysClockFreq>
        break;
 8016e06:	e7cc      	b.n	8016da2 <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetSysClockFreq();
 8016e08:	f7fe fd86 	bl	8015918 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	d0b9      	beq.n	8016d84 <UART_SetConfig+0xb4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016e10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016e12:	e7d5      	b.n	8016dc0 <UART_SetConfig+0xf0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8016e14:	f7fe fe92 	bl	8015b3c <HAL_RCC_GetPCLK1Freq>
        break;
 8016e18:	e7f8      	b.n	8016e0c <UART_SetConfig+0x13c>
 8016e1a:	46c0      	nop			; (mov r8, r8)
 8016e1c:	cfff69f3 	.word	0xcfff69f3
 8016e20:	ffffcfff 	.word	0xffffcfff
 8016e24:	11fff4ff 	.word	0x11fff4ff
 8016e28:	40013800 	.word	0x40013800
 8016e2c:	40004400 	.word	0x40004400
 8016e30:	40004800 	.word	0x40004800
 8016e34:	40004c00 	.word	0x40004c00
 8016e38:	00010001 	.word	0x00010001
 8016e3c:	40021000 	.word	0x40021000
 8016e40:	0801e188 	.word	0x0801e188
 8016e44:	00f42400 	.word	0x00f42400
 8016e48:	0801e198 	.word	0x0801e198
 8016e4c:	0000ffef 	.word	0x0000ffef
 8016e50:	0801e184 	.word	0x0801e184
 8016e54:	0000fff0 	.word	0x0000fff0

08016e58 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016e58:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 8016e5a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016e5c:	07da      	lsls	r2, r3, #31
 8016e5e:	d506      	bpl.n	8016e6e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016e60:	6801      	ldr	r1, [r0, #0]
 8016e62:	4c28      	ldr	r4, [pc, #160]	; (8016f04 <UART_AdvFeatureConfig+0xac>)
 8016e64:	684a      	ldr	r2, [r1, #4]
 8016e66:	4022      	ands	r2, r4
 8016e68:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8016e6a:	4322      	orrs	r2, r4
 8016e6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016e6e:	079a      	lsls	r2, r3, #30
 8016e70:	d506      	bpl.n	8016e80 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016e72:	6801      	ldr	r1, [r0, #0]
 8016e74:	4c24      	ldr	r4, [pc, #144]	; (8016f08 <UART_AdvFeatureConfig+0xb0>)
 8016e76:	684a      	ldr	r2, [r1, #4]
 8016e78:	4022      	ands	r2, r4
 8016e7a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8016e7c:	4322      	orrs	r2, r4
 8016e7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016e80:	075a      	lsls	r2, r3, #29
 8016e82:	d506      	bpl.n	8016e92 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016e84:	6801      	ldr	r1, [r0, #0]
 8016e86:	4c21      	ldr	r4, [pc, #132]	; (8016f0c <UART_AdvFeatureConfig+0xb4>)
 8016e88:	684a      	ldr	r2, [r1, #4]
 8016e8a:	4022      	ands	r2, r4
 8016e8c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8016e8e:	4322      	orrs	r2, r4
 8016e90:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016e92:	071a      	lsls	r2, r3, #28
 8016e94:	d506      	bpl.n	8016ea4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016e96:	6801      	ldr	r1, [r0, #0]
 8016e98:	4c1d      	ldr	r4, [pc, #116]	; (8016f10 <UART_AdvFeatureConfig+0xb8>)
 8016e9a:	684a      	ldr	r2, [r1, #4]
 8016e9c:	4022      	ands	r2, r4
 8016e9e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8016ea0:	4322      	orrs	r2, r4
 8016ea2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016ea4:	06da      	lsls	r2, r3, #27
 8016ea6:	d506      	bpl.n	8016eb6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016ea8:	6801      	ldr	r1, [r0, #0]
 8016eaa:	4c1a      	ldr	r4, [pc, #104]	; (8016f14 <UART_AdvFeatureConfig+0xbc>)
 8016eac:	688a      	ldr	r2, [r1, #8]
 8016eae:	4022      	ands	r2, r4
 8016eb0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8016eb2:	4322      	orrs	r2, r4
 8016eb4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016eb6:	069a      	lsls	r2, r3, #26
 8016eb8:	d506      	bpl.n	8016ec8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016eba:	6801      	ldr	r1, [r0, #0]
 8016ebc:	4c16      	ldr	r4, [pc, #88]	; (8016f18 <UART_AdvFeatureConfig+0xc0>)
 8016ebe:	688a      	ldr	r2, [r1, #8]
 8016ec0:	4022      	ands	r2, r4
 8016ec2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8016ec4:	4322      	orrs	r2, r4
 8016ec6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016ec8:	065a      	lsls	r2, r3, #25
 8016eca:	d50a      	bpl.n	8016ee2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016ecc:	6801      	ldr	r1, [r0, #0]
 8016ece:	4d13      	ldr	r5, [pc, #76]	; (8016f1c <UART_AdvFeatureConfig+0xc4>)
 8016ed0:	684a      	ldr	r2, [r1, #4]
 8016ed2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8016ed4:	402a      	ands	r2, r5
 8016ed6:	4322      	orrs	r2, r4
 8016ed8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016eda:	2280      	movs	r2, #128	; 0x80
 8016edc:	0352      	lsls	r2, r2, #13
 8016ede:	4294      	cmp	r4, r2
 8016ee0:	d009      	beq.n	8016ef6 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016ee2:	061b      	lsls	r3, r3, #24
 8016ee4:	d506      	bpl.n	8016ef4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016ee6:	6802      	ldr	r2, [r0, #0]
 8016ee8:	490d      	ldr	r1, [pc, #52]	; (8016f20 <UART_AdvFeatureConfig+0xc8>)
 8016eea:	6853      	ldr	r3, [r2, #4]
 8016eec:	400b      	ands	r3, r1
 8016eee:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8016ef0:	430b      	orrs	r3, r1
 8016ef2:	6053      	str	r3, [r2, #4]
}
 8016ef4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016ef6:	684a      	ldr	r2, [r1, #4]
 8016ef8:	4c0a      	ldr	r4, [pc, #40]	; (8016f24 <UART_AdvFeatureConfig+0xcc>)
 8016efa:	4022      	ands	r2, r4
 8016efc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8016efe:	4322      	orrs	r2, r4
 8016f00:	604a      	str	r2, [r1, #4]
 8016f02:	e7ee      	b.n	8016ee2 <UART_AdvFeatureConfig+0x8a>
 8016f04:	fffdffff 	.word	0xfffdffff
 8016f08:	fffeffff 	.word	0xfffeffff
 8016f0c:	fffbffff 	.word	0xfffbffff
 8016f10:	ffff7fff 	.word	0xffff7fff
 8016f14:	ffffefff 	.word	0xffffefff
 8016f18:	ffffdfff 	.word	0xffffdfff
 8016f1c:	ffefffff 	.word	0xffefffff
 8016f20:	fff7ffff 	.word	0xfff7ffff
 8016f24:	ff9fffff 	.word	0xff9fffff

08016f28 <UART_WaitOnFlagUntilTimeout>:
{
 8016f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f2a:	4657      	mov	r7, sl
 8016f2c:	464e      	mov	r6, r9
 8016f2e:	4645      	mov	r5, r8
 8016f30:	46de      	mov	lr, fp
 8016f32:	b5e0      	push	{r5, r6, r7, lr}
 8016f34:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016f36:	2204      	movs	r2, #4
 8016f38:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016f3a:	2280      	movs	r2, #128	; 0x80
 8016f3c:	0112      	lsls	r2, r2, #4
{
 8016f3e:	4699      	mov	r9, r3
 8016f40:	4680      	mov	r8, r0
 8016f42:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016f44:	4693      	mov	fp, r2
{
 8016f46:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016f48:	6803      	ldr	r3, [r0, #0]
 8016f4a:	e001      	b.n	8016f50 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8016f4c:	1c7a      	adds	r2, r7, #1
 8016f4e:	d10d      	bne.n	8016f6c <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016f50:	69dc      	ldr	r4, [r3, #28]
 8016f52:	402c      	ands	r4, r5
 8016f54:	1b64      	subs	r4, r4, r5
 8016f56:	4262      	negs	r2, r4
 8016f58:	4154      	adcs	r4, r2
 8016f5a:	42b4      	cmp	r4, r6
 8016f5c:	d0f6      	beq.n	8016f4c <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8016f5e:	2000      	movs	r0, #0
}
 8016f60:	bcf0      	pop	{r4, r5, r6, r7}
 8016f62:	46bb      	mov	fp, r7
 8016f64:	46b2      	mov	sl, r6
 8016f66:	46a9      	mov	r9, r5
 8016f68:	46a0      	mov	r8, r4
 8016f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016f6c:	f7fc ff5a 	bl	8013e24 <HAL_GetTick>
 8016f70:	464b      	mov	r3, r9
 8016f72:	1ac0      	subs	r0, r0, r3
 8016f74:	42b8      	cmp	r0, r7
 8016f76:	d831      	bhi.n	8016fdc <UART_WaitOnFlagUntilTimeout+0xb4>
 8016f78:	2f00      	cmp	r7, #0
 8016f7a:	d02f      	beq.n	8016fdc <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016f7c:	4643      	mov	r3, r8
 8016f7e:	4651      	mov	r1, sl
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	681a      	ldr	r2, [r3, #0]
 8016f84:	4211      	tst	r1, r2
 8016f86:	d0e3      	beq.n	8016f50 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016f88:	4659      	mov	r1, fp
 8016f8a:	69da      	ldr	r2, [r3, #28]
 8016f8c:	420a      	tst	r2, r1
 8016f8e:	d0df      	beq.n	8016f50 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016f90:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f92:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f96:	2201      	movs	r2, #1
 8016f98:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8016f9c:	4643      	mov	r3, r8
 8016f9e:	6819      	ldr	r1, [r3, #0]
 8016fa0:	4c1c      	ldr	r4, [pc, #112]	; (8017014 <UART_WaitOnFlagUntilTimeout+0xec>)
 8016fa2:	680b      	ldr	r3, [r1, #0]
 8016fa4:	4023      	ands	r3, r4
 8016fa6:	600b      	str	r3, [r1, #0]
 8016fa8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fac:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fb0:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016fb4:	4643      	mov	r3, r8
 8016fb6:	6819      	ldr	r1, [r3, #0]
 8016fb8:	688b      	ldr	r3, [r1, #8]
 8016fba:	4393      	bics	r3, r2
 8016fbc:	608b      	str	r3, [r1, #8]
 8016fbe:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8016fc2:	2320      	movs	r3, #32
 8016fc4:	4641      	mov	r1, r8
 8016fc6:	3287      	adds	r2, #135	; 0x87
 8016fc8:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8016fca:	3204      	adds	r2, #4
 8016fcc:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016fce:	3204      	adds	r2, #4
 8016fd0:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 8016fd2:	2200      	movs	r2, #0
 8016fd4:	3364      	adds	r3, #100	; 0x64
          return HAL_TIMEOUT;
 8016fd6:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8016fd8:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8016fda:	e7c1      	b.n	8016f60 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fdc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fe0:	2201      	movs	r2, #1
 8016fe2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8016fe6:	4643      	mov	r3, r8
 8016fe8:	6819      	ldr	r1, [r3, #0]
 8016fea:	4c0a      	ldr	r4, [pc, #40]	; (8017014 <UART_WaitOnFlagUntilTimeout+0xec>)
 8016fec:	680b      	ldr	r3, [r1, #0]
 8016fee:	4023      	ands	r3, r4
 8016ff0:	600b      	str	r3, [r1, #0]
 8016ff2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ff6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ffa:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016ffe:	4643      	mov	r3, r8
 8017000:	6819      	ldr	r1, [r3, #0]
 8017002:	688b      	ldr	r3, [r1, #8]
 8017004:	4393      	bics	r3, r2
 8017006:	608b      	str	r3, [r1, #8]
 8017008:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 801700c:	2320      	movs	r3, #32
 801700e:	4641      	mov	r1, r8
 8017010:	3287      	adds	r2, #135	; 0x87
 8017012:	e7db      	b.n	8016fcc <UART_WaitOnFlagUntilTimeout+0xa4>
 8017014:	fffffe5f 	.word	0xfffffe5f

08017018 <HAL_UART_Transmit>:
{
 8017018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801701a:	4647      	mov	r7, r8
 801701c:	46ce      	mov	lr, r9
 801701e:	b580      	push	{r7, lr}
 8017020:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8017022:	2388      	movs	r3, #136	; 0x88
 8017024:	58c3      	ldr	r3, [r0, r3]
{
 8017026:	0004      	movs	r4, r0
 8017028:	000d      	movs	r5, r1
 801702a:	0016      	movs	r6, r2
 801702c:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 801702e:	2b20      	cmp	r3, #32
 8017030:	d14d      	bne.n	80170ce <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 8017032:	2900      	cmp	r1, #0
 8017034:	d045      	beq.n	80170c2 <HAL_UART_Transmit+0xaa>
 8017036:	2a00      	cmp	r2, #0
 8017038:	d043      	beq.n	80170c2 <HAL_UART_Transmit+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801703a:	2380      	movs	r3, #128	; 0x80
 801703c:	6882      	ldr	r2, [r0, #8]
 801703e:	015b      	lsls	r3, r3, #5
 8017040:	429a      	cmp	r2, r3
 8017042:	d104      	bne.n	801704e <HAL_UART_Transmit+0x36>
 8017044:	6903      	ldr	r3, [r0, #16]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d101      	bne.n	801704e <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 801704a:	07cb      	lsls	r3, r1, #31
 801704c:	d439      	bmi.n	80170c2 <HAL_UART_Transmit+0xaa>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801704e:	2390      	movs	r3, #144	; 0x90
 8017050:	2200      	movs	r2, #0
 8017052:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017054:	3b08      	subs	r3, #8
 8017056:	3221      	adds	r2, #33	; 0x21
 8017058:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 801705a:	f7fc fee3 	bl	8013e24 <HAL_GetTick>
    huart->TxXferSize  = Size;
 801705e:	2354      	movs	r3, #84	; 0x54
 8017060:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 8017062:	3302      	adds	r3, #2
      pdata16bits = NULL;
 8017064:	2100      	movs	r1, #0
    huart->TxXferCount = Size;
 8017066:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017068:	2380      	movs	r3, #128	; 0x80
 801706a:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 801706c:	4680      	mov	r8, r0
      pdata16bits = NULL;
 801706e:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017070:	015b      	lsls	r3, r3, #5
 8017072:	429a      	cmp	r2, r3
 8017074:	d03c      	beq.n	80170f0 <HAL_UART_Transmit+0xd8>
    while (huart->TxXferCount > 0U)
 8017076:	2356      	movs	r3, #86	; 0x56
 8017078:	5ae3      	ldrh	r3, [r4, r3]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d02b      	beq.n	80170d6 <HAL_UART_Transmit+0xbe>
      huart->TxXferCount--;
 801707e:	2656      	movs	r6, #86	; 0x56
 8017080:	e00a      	b.n	8017098 <HAL_UART_Transmit+0x80>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017082:	782a      	ldrb	r2, [r5, #0]
 8017084:	6823      	ldr	r3, [r4, #0]
        pdata8bits++;
 8017086:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8017088:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 801708a:	5ba2      	ldrh	r2, [r4, r6]
 801708c:	3a01      	subs	r2, #1
 801708e:	b292      	uxth	r2, r2
 8017090:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 8017092:	5ba3      	ldrh	r3, [r4, r6]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d01e      	beq.n	80170d6 <HAL_UART_Transmit+0xbe>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8017098:	4643      	mov	r3, r8
 801709a:	2200      	movs	r2, #0
 801709c:	2180      	movs	r1, #128	; 0x80
 801709e:	0020      	movs	r0, r4
 80170a0:	9700      	str	r7, [sp, #0]
 80170a2:	f7ff ff41 	bl	8016f28 <UART_WaitOnFlagUntilTimeout>
 80170a6:	2800      	cmp	r0, #0
 80170a8:	d113      	bne.n	80170d2 <HAL_UART_Transmit+0xba>
      if (pdata8bits == NULL)
 80170aa:	2d00      	cmp	r5, #0
 80170ac:	d1e9      	bne.n	8017082 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80170ae:	464b      	mov	r3, r9
 80170b0:	881b      	ldrh	r3, [r3, #0]
 80170b2:	6822      	ldr	r2, [r4, #0]
 80170b4:	05db      	lsls	r3, r3, #23
 80170b6:	0ddb      	lsrs	r3, r3, #23
 80170b8:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80170ba:	2302      	movs	r3, #2
 80170bc:	469c      	mov	ip, r3
 80170be:	44e1      	add	r9, ip
 80170c0:	e7e3      	b.n	801708a <HAL_UART_Transmit+0x72>
      return  HAL_ERROR;
 80170c2:	2001      	movs	r0, #1
}
 80170c4:	b003      	add	sp, #12
 80170c6:	bcc0      	pop	{r6, r7}
 80170c8:	46b9      	mov	r9, r7
 80170ca:	46b0      	mov	r8, r6
 80170cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80170ce:	2002      	movs	r0, #2
 80170d0:	e7f8      	b.n	80170c4 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80170d2:	2003      	movs	r0, #3
 80170d4:	e7f6      	b.n	80170c4 <HAL_UART_Transmit+0xac>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80170d6:	4643      	mov	r3, r8
 80170d8:	2200      	movs	r2, #0
 80170da:	2140      	movs	r1, #64	; 0x40
 80170dc:	0020      	movs	r0, r4
 80170de:	9700      	str	r7, [sp, #0]
 80170e0:	f7ff ff22 	bl	8016f28 <UART_WaitOnFlagUntilTimeout>
 80170e4:	2800      	cmp	r0, #0
 80170e6:	d1f4      	bne.n	80170d2 <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 80170e8:	2388      	movs	r3, #136	; 0x88
 80170ea:	2220      	movs	r2, #32
 80170ec:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 80170ee:	e7e9      	b.n	80170c4 <HAL_UART_Transmit+0xac>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80170f0:	6923      	ldr	r3, [r4, #16]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d1bf      	bne.n	8017076 <HAL_UART_Transmit+0x5e>
 80170f6:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80170f8:	2500      	movs	r5, #0
 80170fa:	e7bc      	b.n	8017076 <HAL_UART_Transmit+0x5e>

080170fc <HAL_UART_Receive>:
{
 80170fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170fe:	464f      	mov	r7, r9
 8017100:	4646      	mov	r6, r8
 8017102:	46d6      	mov	lr, sl
 8017104:	b5c0      	push	{r6, r7, lr}
 8017106:	001f      	movs	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8017108:	238c      	movs	r3, #140	; 0x8c
 801710a:	58c3      	ldr	r3, [r0, r3]
{
 801710c:	0004      	movs	r4, r0
 801710e:	000d      	movs	r5, r1
 8017110:	0016      	movs	r6, r2
 8017112:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8017114:	2b20      	cmp	r3, #32
 8017116:	d15a      	bne.n	80171ce <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8017118:	2900      	cmp	r1, #0
 801711a:	d051      	beq.n	80171c0 <HAL_UART_Receive+0xc4>
 801711c:	2a00      	cmp	r2, #0
 801711e:	d04f      	beq.n	80171c0 <HAL_UART_Receive+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017120:	2380      	movs	r3, #128	; 0x80
 8017122:	6882      	ldr	r2, [r0, #8]
 8017124:	015b      	lsls	r3, r3, #5
 8017126:	429a      	cmp	r2, r3
 8017128:	d104      	bne.n	8017134 <HAL_UART_Receive+0x38>
 801712a:	6903      	ldr	r3, [r0, #16]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d101      	bne.n	8017134 <HAL_UART_Receive+0x38>
      if ((((uint32_t)pData) & 1U) != 0U)
 8017130:	07cb      	lsls	r3, r1, #31
 8017132:	d445      	bmi.n	80171c0 <HAL_UART_Receive+0xc4>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017134:	2300      	movs	r3, #0
 8017136:	2290      	movs	r2, #144	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017138:	2122      	movs	r1, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801713a:	50a3      	str	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801713c:	3a04      	subs	r2, #4
 801713e:	50a1      	str	r1, [r4, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017140:	66e3      	str	r3, [r4, #108]	; 0x6c
    tickstart = HAL_GetTick();
 8017142:	f7fc fe6f 	bl	8013e24 <HAL_GetTick>
    huart->RxXferSize  = Size;
 8017146:	235c      	movs	r3, #92	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8017148:	2280      	movs	r2, #128	; 0x80
    huart->RxXferSize  = Size;
 801714a:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 801714c:	3302      	adds	r3, #2
 801714e:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 8017150:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8017152:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 8017154:	0152      	lsls	r2, r2, #5
 8017156:	4293      	cmp	r3, r2
 8017158:	d051      	beq.n	80171fe <HAL_UART_Receive+0x102>
 801715a:	2b00      	cmp	r3, #0
 801715c:	d139      	bne.n	80171d2 <HAL_UART_Receive+0xd6>
 801715e:	6923      	ldr	r3, [r4, #16]
 8017160:	425a      	negs	r2, r3
 8017162:	4153      	adcs	r3, r2
 8017164:	01db      	lsls	r3, r3, #7
 8017166:	4698      	mov	r8, r3
 8017168:	237f      	movs	r3, #127	; 0x7f
 801716a:	469c      	mov	ip, r3
 801716c:	44e0      	add	r8, ip
 801716e:	2360      	movs	r3, #96	; 0x60
 8017170:	4642      	mov	r2, r8
 8017172:	52e2      	strh	r2, [r4, r3]
      pdata16bits = NULL;
 8017174:	2300      	movs	r3, #0
 8017176:	469a      	mov	sl, r3
    while (huart->RxXferCount > 0U)
 8017178:	235e      	movs	r3, #94	; 0x5e
 801717a:	5ae3      	ldrh	r3, [r4, r3]
      huart->RxXferCount--;
 801717c:	265e      	movs	r6, #94	; 0x5e
    while (huart->RxXferCount > 0U)
 801717e:	2b00      	cmp	r3, #0
 8017180:	d109      	bne.n	8017196 <HAL_UART_Receive+0x9a>
 8017182:	e035      	b.n	80171f0 <HAL_UART_Receive+0xf4>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8017184:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8017186:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8017188:	5ba2      	ldrh	r2, [r4, r6]
 801718a:	3a01      	subs	r2, #1
 801718c:	b292      	uxth	r2, r2
 801718e:	53a2      	strh	r2, [r4, r6]
    while (huart->RxXferCount > 0U)
 8017190:	5ba3      	ldrh	r3, [r4, r6]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d02c      	beq.n	80171f0 <HAL_UART_Receive+0xf4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8017196:	464b      	mov	r3, r9
 8017198:	2200      	movs	r2, #0
 801719a:	2120      	movs	r1, #32
 801719c:	0020      	movs	r0, r4
 801719e:	9700      	str	r7, [sp, #0]
 80171a0:	f7ff fec2 	bl	8016f28 <UART_WaitOnFlagUntilTimeout>
 80171a4:	2800      	cmp	r0, #0
 80171a6:	d128      	bne.n	80171fa <HAL_UART_Receive+0xfe>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80171a8:	4642      	mov	r2, r8
 80171aa:	6823      	ldr	r3, [r4, #0]
 80171ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171ae:	4013      	ands	r3, r2
      if (pdata8bits == NULL)
 80171b0:	2d00      	cmp	r5, #0
 80171b2:	d1e7      	bne.n	8017184 <HAL_UART_Receive+0x88>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80171b4:	4652      	mov	r2, sl
 80171b6:	8013      	strh	r3, [r2, #0]
        pdata16bits++;
 80171b8:	2302      	movs	r3, #2
 80171ba:	469c      	mov	ip, r3
 80171bc:	44e2      	add	sl, ip
 80171be:	e7e3      	b.n	8017188 <HAL_UART_Receive+0x8c>
      return  HAL_ERROR;
 80171c0:	2001      	movs	r0, #1
}
 80171c2:	b002      	add	sp, #8
 80171c4:	bce0      	pop	{r5, r6, r7}
 80171c6:	46ba      	mov	sl, r7
 80171c8:	46b1      	mov	r9, r6
 80171ca:	46a8      	mov	r8, r5
 80171cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80171ce:	2002      	movs	r0, #2
 80171d0:	e7f7      	b.n	80171c2 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 80171d2:	2280      	movs	r2, #128	; 0x80
 80171d4:	2100      	movs	r1, #0
 80171d6:	0552      	lsls	r2, r2, #21
 80171d8:	4688      	mov	r8, r1
 80171da:	4293      	cmp	r3, r2
 80171dc:	d1c7      	bne.n	801716e <HAL_UART_Receive+0x72>
 80171de:	6923      	ldr	r3, [r4, #16]
 80171e0:	425a      	negs	r2, r3
 80171e2:	4153      	adcs	r3, r2
 80171e4:	019b      	lsls	r3, r3, #6
 80171e6:	4698      	mov	r8, r3
 80171e8:	233f      	movs	r3, #63	; 0x3f
 80171ea:	469c      	mov	ip, r3
 80171ec:	44e0      	add	r8, ip
 80171ee:	e7be      	b.n	801716e <HAL_UART_Receive+0x72>
    huart->RxState = HAL_UART_STATE_READY;
 80171f0:	238c      	movs	r3, #140	; 0x8c
 80171f2:	2220      	movs	r2, #32
    return HAL_OK;
 80171f4:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 80171f6:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 80171f8:	e7e3      	b.n	80171c2 <HAL_UART_Receive+0xc6>
        return HAL_TIMEOUT;
 80171fa:	2003      	movs	r0, #3
 80171fc:	e7e1      	b.n	80171c2 <HAL_UART_Receive+0xc6>
    UART_MASK_COMPUTATION(huart);
 80171fe:	6923      	ldr	r3, [r4, #16]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d106      	bne.n	8017212 <HAL_UART_Receive+0x116>
 8017204:	2260      	movs	r2, #96	; 0x60
 8017206:	4b07      	ldr	r3, [pc, #28]	; (8017224 <HAL_UART_Receive+0x128>)
 8017208:	46aa      	mov	sl, r5
 801720a:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 801720c:	2500      	movs	r5, #0
 801720e:	52a3      	strh	r3, [r4, r2]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017210:	e7b2      	b.n	8017178 <HAL_UART_Receive+0x7c>
    UART_MASK_COMPUTATION(huart);
 8017212:	2360      	movs	r3, #96	; 0x60
 8017214:	22ff      	movs	r2, #255	; 0xff
 8017216:	52e2      	strh	r2, [r4, r3]
 8017218:	339f      	adds	r3, #159	; 0x9f
 801721a:	4698      	mov	r8, r3
      pdata16bits = NULL;
 801721c:	2300      	movs	r3, #0
 801721e:	469a      	mov	sl, r3
 8017220:	e7aa      	b.n	8017178 <HAL_UART_Receive+0x7c>
 8017222:	46c0      	nop			; (mov r8, r8)
 8017224:	000001ff 	.word	0x000001ff

08017228 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017228:	2200      	movs	r2, #0
 801722a:	2390      	movs	r3, #144	; 0x90
{
 801722c:	b530      	push	{r4, r5, lr}
 801722e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017230:	50c2      	str	r2, [r0, r3]
{
 8017232:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 8017234:	f7fc fdf6 	bl	8013e24 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8017238:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 801723a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801723c:	6811      	ldr	r1, [r2, #0]
 801723e:	0709      	lsls	r1, r1, #28
 8017240:	d40f      	bmi.n	8017262 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017242:	6812      	ldr	r2, [r2, #0]
 8017244:	0752      	lsls	r2, r2, #29
 8017246:	d41b      	bmi.n	8017280 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8017248:	2320      	movs	r3, #32
 801724a:	2288      	movs	r2, #136	; 0x88
 801724c:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 801724e:	3204      	adds	r2, #4
 8017250:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017252:	2300      	movs	r3, #0
  return HAL_OK;
 8017254:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8017256:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017258:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801725a:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 801725c:	54a3      	strb	r3, [r4, r2]
}
 801725e:	b003      	add	sp, #12
 8017260:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017262:	2180      	movs	r1, #128	; 0x80
 8017264:	4b0d      	ldr	r3, [pc, #52]	; (801729c <UART_CheckIdleState+0x74>)
 8017266:	2200      	movs	r2, #0
 8017268:	9300      	str	r3, [sp, #0]
 801726a:	0389      	lsls	r1, r1, #14
 801726c:	0003      	movs	r3, r0
 801726e:	0020      	movs	r0, r4
 8017270:	f7ff fe5a 	bl	8016f28 <UART_WaitOnFlagUntilTimeout>
 8017274:	2800      	cmp	r0, #0
 8017276:	d10e      	bne.n	8017296 <UART_CheckIdleState+0x6e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8017278:	6822      	ldr	r2, [r4, #0]
 801727a:	6812      	ldr	r2, [r2, #0]
 801727c:	0752      	lsls	r2, r2, #29
 801727e:	d5e3      	bpl.n	8017248 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017280:	2180      	movs	r1, #128	; 0x80
 8017282:	4b06      	ldr	r3, [pc, #24]	; (801729c <UART_CheckIdleState+0x74>)
 8017284:	2200      	movs	r2, #0
 8017286:	9300      	str	r3, [sp, #0]
 8017288:	0020      	movs	r0, r4
 801728a:	002b      	movs	r3, r5
 801728c:	03c9      	lsls	r1, r1, #15
 801728e:	f7ff fe4b 	bl	8016f28 <UART_WaitOnFlagUntilTimeout>
 8017292:	2800      	cmp	r0, #0
 8017294:	d0d8      	beq.n	8017248 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8017296:	2003      	movs	r0, #3
 8017298:	e7e1      	b.n	801725e <UART_CheckIdleState+0x36>
 801729a:	46c0      	nop			; (mov r8, r8)
 801729c:	01ffffff 	.word	0x01ffffff

080172a0 <HAL_UART_Init>:
{
 80172a0:	b510      	push	{r4, lr}
 80172a2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80172a4:	d028      	beq.n	80172f8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80172a6:	2388      	movs	r3, #136	; 0x88
 80172a8:	58c3      	ldr	r3, [r0, r3]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d026      	beq.n	80172fc <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 80172ae:	2388      	movs	r3, #136	; 0x88
 80172b0:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80172b2:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80172b4:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80172b6:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80172b8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80172ba:	6813      	ldr	r3, [r2, #0]
 80172bc:	438b      	bics	r3, r1
 80172be:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80172c0:	f7ff fd06 	bl	8016cd0 <UART_SetConfig>
 80172c4:	2801      	cmp	r0, #1
 80172c6:	d017      	beq.n	80172f8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80172c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d110      	bne.n	80172f0 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80172ce:	6823      	ldr	r3, [r4, #0]
 80172d0:	490d      	ldr	r1, [pc, #52]	; (8017308 <HAL_UART_Init+0x68>)
 80172d2:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80172d4:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80172d6:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80172d8:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80172da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80172dc:	689a      	ldr	r2, [r3, #8]
 80172de:	438a      	bics	r2, r1
 80172e0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	3929      	subs	r1, #41	; 0x29
 80172e6:	430a      	orrs	r2, r1
 80172e8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80172ea:	f7ff ff9d 	bl	8017228 <UART_CheckIdleState>
}
 80172ee:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80172f0:	0020      	movs	r0, r4
 80172f2:	f7ff fdb1 	bl	8016e58 <UART_AdvFeatureConfig>
 80172f6:	e7ea      	b.n	80172ce <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80172f8:	2001      	movs	r0, #1
 80172fa:	e7f8      	b.n	80172ee <HAL_UART_Init+0x4e>
    huart->Lock = HAL_UNLOCKED;
 80172fc:	2284      	movs	r2, #132	; 0x84
 80172fe:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8017300:	f7fc fb42 	bl	8013988 <HAL_UART_MspInit>
 8017304:	e7d3      	b.n	80172ae <HAL_UART_Init+0xe>
 8017306:	46c0      	nop			; (mov r8, r8)
 8017308:	ffffb7ff 	.word	0xffffb7ff

0801730c <UART_Start_Receive_DMA>:
{
 801730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801730e:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 8017310:	225c      	movs	r2, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 8017312:	6581      	str	r1, [r0, #88]	; 0x58
{
 8017314:	000d      	movs	r5, r1
  huart->RxXferSize = Size;
 8017316:	5283      	strh	r3, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017318:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801731a:	2790      	movs	r7, #144	; 0x90
 801731c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801731e:	268c      	movs	r6, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017320:	51c2      	str	r2, [r0, r7]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017322:	5181      	str	r1, [r0, r6]
  if (huart->hdmarx != NULL)
 8017324:	315e      	adds	r1, #94	; 0x5e
{
 8017326:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 8017328:	5840      	ldr	r0, [r0, r1]
 801732a:	2800      	cmp	r0, #0
 801732c:	d00d      	beq.n	801734a <UART_Start_Receive_DMA+0x3e>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801732e:	491e      	ldr	r1, [pc, #120]	; (80173a8 <UART_Start_Receive_DMA+0x9c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8017330:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017332:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017334:	491d      	ldr	r1, [pc, #116]	; (80173ac <UART_Start_Receive_DMA+0xa0>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8017336:	002a      	movs	r2, r5
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017338:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801733a:	491d      	ldr	r1, [pc, #116]	; (80173b0 <UART_Start_Receive_DMA+0xa4>)
 801733c:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801733e:	6821      	ldr	r1, [r4, #0]
 8017340:	3124      	adds	r1, #36	; 0x24
 8017342:	f7fd f9df 	bl	8014704 <HAL_DMA_Start_IT>
 8017346:	2800      	cmp	r0, #0
 8017348:	d127      	bne.n	801739a <UART_Start_Receive_DMA+0x8e>
  if (huart->Init.Parity != UART_PARITY_NONE)
 801734a:	6923      	ldr	r3, [r4, #16]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d117      	bne.n	8017380 <UART_Start_Receive_DMA+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017350:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017354:	2301      	movs	r3, #1
 8017356:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801735a:	6821      	ldr	r1, [r4, #0]
 801735c:	688a      	ldr	r2, [r1, #8]
 801735e:	431a      	orrs	r2, r3
 8017360:	608a      	str	r2, [r1, #8]
 8017362:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017366:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801736a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801736e:	2040      	movs	r0, #64	; 0x40
 8017370:	6822      	ldr	r2, [r4, #0]
 8017372:	6893      	ldr	r3, [r2, #8]
 8017374:	4303      	orrs	r3, r0
 8017376:	6093      	str	r3, [r2, #8]
 8017378:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 801737c:	2000      	movs	r0, #0
}
 801737e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017380:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017384:	2301      	movs	r3, #1
 8017386:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801738a:	6822      	ldr	r2, [r4, #0]
 801738c:	33ff      	adds	r3, #255	; 0xff
 801738e:	6810      	ldr	r0, [r2, #0]
 8017390:	4303      	orrs	r3, r0
 8017392:	6013      	str	r3, [r2, #0]
 8017394:	f381 8810 	msr	PRIMASK, r1
}
 8017398:	e7da      	b.n	8017350 <UART_Start_Receive_DMA+0x44>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801739a:	2310      	movs	r3, #16
 801739c:	51e3      	str	r3, [r4, r7]
      huart->RxState = HAL_UART_STATE_READY;
 801739e:	3310      	adds	r3, #16
      return HAL_ERROR;
 80173a0:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 80173a2:	51a3      	str	r3, [r4, r6]
      return HAL_ERROR;
 80173a4:	e7eb      	b.n	801737e <UART_Start_Receive_DMA+0x72>
 80173a6:	46c0      	nop			; (mov r8, r8)
 80173a8:	08016c35 	.word	0x08016c35
 80173ac:	08016c15 	.word	0x08016c15
 80173b0:	08016815 	.word	0x08016815

080173b4 <HAL_UART_Receive_DMA>:
{
 80173b4:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80173b6:	208c      	movs	r0, #140	; 0x8c
 80173b8:	5818      	ldr	r0, [r3, r0]
{
 80173ba:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80173bc:	2820      	cmp	r0, #32
 80173be:	d127      	bne.n	8017410 <HAL_UART_Receive_DMA+0x5c>
    if ((pData == NULL) || (Size == 0U))
 80173c0:	2900      	cmp	r1, #0
 80173c2:	d023      	beq.n	801740c <HAL_UART_Receive_DMA+0x58>
 80173c4:	2a00      	cmp	r2, #0
 80173c6:	d021      	beq.n	801740c <HAL_UART_Receive_DMA+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80173c8:	2080      	movs	r0, #128	; 0x80
 80173ca:	689c      	ldr	r4, [r3, #8]
 80173cc:	0140      	lsls	r0, r0, #5
 80173ce:	4284      	cmp	r4, r0
 80173d0:	d105      	bne.n	80173de <HAL_UART_Receive_DMA+0x2a>
 80173d2:	6918      	ldr	r0, [r3, #16]
 80173d4:	2800      	cmp	r0, #0
 80173d6:	d102      	bne.n	80173de <HAL_UART_Receive_DMA+0x2a>
      return HAL_ERROR;
 80173d8:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 80173da:	07cc      	lsls	r4, r1, #31
 80173dc:	d417      	bmi.n	801740e <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80173de:	2000      	movs	r0, #0
 80173e0:	66d8      	str	r0, [r3, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80173e2:	6818      	ldr	r0, [r3, #0]
 80173e4:	6840      	ldr	r0, [r0, #4]
 80173e6:	0200      	lsls	r0, r0, #8
 80173e8:	d50c      	bpl.n	8017404 <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173ea:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173ee:	2001      	movs	r0, #1
 80173f0:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80173f4:	2080      	movs	r0, #128	; 0x80
 80173f6:	681c      	ldr	r4, [r3, #0]
 80173f8:	04c0      	lsls	r0, r0, #19
 80173fa:	6825      	ldr	r5, [r4, #0]
 80173fc:	4328      	orrs	r0, r5
 80173fe:	6020      	str	r0, [r4, #0]
 8017400:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8017404:	0018      	movs	r0, r3
 8017406:	f7ff ff81 	bl	801730c <UART_Start_Receive_DMA>
 801740a:	e000      	b.n	801740e <HAL_UART_Receive_DMA+0x5a>
      return HAL_ERROR;
 801740c:	2001      	movs	r0, #1
}
 801740e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8017410:	2002      	movs	r0, #2
 8017412:	e7fc      	b.n	801740e <HAL_UART_Receive_DMA+0x5a>

08017414 <UARTEx_SetNbDataToProcess.part.0>:
  * @note The RX FIFO depth and the TX FIFO depth is extracted from
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8017414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017416:	6803      	ldr	r3, [r0, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017418:	4f0b      	ldr	r7, [pc, #44]	; (8017448 <UARTEx_SetNbDataToProcess.part.0+0x34>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801741a:	689c      	ldr	r4, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801741c:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 801741e:	0005      	movs	r5, r0
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017420:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017422:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 8017424:	4e09      	ldr	r6, [pc, #36]	; (801744c <UARTEx_SetNbDataToProcess.part.0+0x38>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017426:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8017428:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801742a:	f7f5 fb0f 	bl	800ca4c <__divsi3>
 801742e:	236a      	movs	r3, #106	; 0x6a
 8017430:	52e8      	strh	r0, [r5, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017432:	0123      	lsls	r3, r4, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017434:	0f5b      	lsrs	r3, r3, #29
 8017436:	5cf8      	ldrb	r0, [r7, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 8017438:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801743a:	00c0      	lsls	r0, r0, #3
 801743c:	f7f5 fb06 	bl	800ca4c <__divsi3>
 8017440:	2368      	movs	r3, #104	; 0x68
 8017442:	52e8      	strh	r0, [r5, r3]
  }
}
 8017444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017446:	46c0      	nop			; (mov r8, r8)
 8017448:	0801e1b8 	.word	0x0801e1b8
 801744c:	0801e1b0 	.word	0x0801e1b0

08017450 <HAL_UARTEx_WakeupCallback>:
}
 8017450:	4770      	bx	lr
 8017452:	46c0      	nop			; (mov r8, r8)

08017454 <HAL_UARTEx_RxFifoFullCallback>:
 8017454:	4770      	bx	lr
 8017456:	46c0      	nop			; (mov r8, r8)

08017458 <HAL_UARTEx_TxFifoEmptyCallback>:
 8017458:	4770      	bx	lr
 801745a:	46c0      	nop			; (mov r8, r8)

0801745c <HAL_UARTEx_DisableFifoMode>:
{
 801745c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 801745e:	2484      	movs	r4, #132	; 0x84
 8017460:	5d03      	ldrb	r3, [r0, r4]
 8017462:	2b01      	cmp	r3, #1
 8017464:	d012      	beq.n	801748c <HAL_UARTEx_DisableFifoMode+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8017466:	2588      	movs	r5, #136	; 0x88
 8017468:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 801746a:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 801746c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801746e:	6803      	ldr	r3, [r0, #0]
 8017470:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8017472:	6819      	ldr	r1, [r3, #0]
 8017474:	43b1      	bics	r1, r6
 8017476:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017478:	4905      	ldr	r1, [pc, #20]	; (8017490 <HAL_UARTEx_DisableFifoMode+0x34>)
 801747a:	400a      	ands	r2, r1
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801747c:	2100      	movs	r1, #0
 801747e:	6641      	str	r1, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017480:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8017482:	2320      	movs	r3, #32
 8017484:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8017486:	5501      	strb	r1, [r0, r4]
  return HAL_OK;
 8017488:	2000      	movs	r0, #0
}
 801748a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 801748c:	2002      	movs	r0, #2
 801748e:	e7fc      	b.n	801748a <HAL_UARTEx_DisableFifoMode+0x2e>
 8017490:	dfffffff 	.word	0xdfffffff

08017494 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8017494:	2384      	movs	r3, #132	; 0x84
{
 8017496:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8017498:	5cc3      	ldrb	r3, [r0, r3]
{
 801749a:	0004      	movs	r4, r0
 801749c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 801749e:	2b01      	cmp	r3, #1
 80174a0:	d01e      	beq.n	80174e0 <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80174a2:	2388      	movs	r3, #136	; 0x88
 80174a4:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80174a6:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80174a8:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80174aa:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80174ac:	682b      	ldr	r3, [r5, #0]
 80174ae:	3923      	subs	r1, #35	; 0x23
 80174b0:	438b      	bics	r3, r1
 80174b2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80174b4:	68ab      	ldr	r3, [r5, #8]
 80174b6:	00db      	lsls	r3, r3, #3
 80174b8:	08d9      	lsrs	r1, r3, #3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80174ba:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80174bc:	4311      	orrs	r1, r2
 80174be:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d00a      	beq.n	80174da <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80174c4:	f7ff ffa6 	bl	8017414 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 80174c8:	2388      	movs	r3, #136	; 0x88
 80174ca:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80174cc:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80174ce:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80174d0:	2200      	movs	r2, #0
  return HAL_OK;
 80174d2:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80174d4:	3b04      	subs	r3, #4
 80174d6:	54e2      	strb	r2, [r4, r3]
}
 80174d8:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 80174da:	4b02      	ldr	r3, [pc, #8]	; (80174e4 <HAL_UARTEx_SetTxFifoThreshold+0x50>)
 80174dc:	6683      	str	r3, [r0, #104]	; 0x68
 80174de:	e7f3      	b.n	80174c8 <HAL_UARTEx_SetTxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 80174e0:	2002      	movs	r0, #2
 80174e2:	e7f9      	b.n	80174d8 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 80174e4:	00010001 	.word	0x00010001

080174e8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80174e8:	2384      	movs	r3, #132	; 0x84
{
 80174ea:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80174ec:	5cc3      	ldrb	r3, [r0, r3]
{
 80174ee:	0004      	movs	r4, r0
 80174f0:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80174f2:	2b01      	cmp	r3, #1
 80174f4:	d01e      	beq.n	8017534 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80174f6:	2388      	movs	r3, #136	; 0x88
 80174f8:	2124      	movs	r1, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80174fa:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80174fc:	50c1      	str	r1, [r0, r3]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80174fe:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8017500:	682b      	ldr	r3, [r5, #0]
 8017502:	3923      	subs	r1, #35	; 0x23
 8017504:	438b      	bics	r3, r1
 8017506:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017508:	68a9      	ldr	r1, [r5, #8]
 801750a:	4b0b      	ldr	r3, [pc, #44]	; (8017538 <HAL_UARTEx_SetRxFifoThreshold+0x50>)
 801750c:	4019      	ands	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801750e:	6e43      	ldr	r3, [r0, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017510:	4311      	orrs	r1, r2
 8017512:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017514:	2b00      	cmp	r3, #0
 8017516:	d00a      	beq.n	801752e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8017518:	f7ff ff7c 	bl	8017414 <UARTEx_SetNbDataToProcess.part.0>
  huart->gState = HAL_UART_STATE_READY;
 801751c:	2388      	movs	r3, #136	; 0x88
 801751e:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017520:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 8017522:	50e2      	str	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8017524:	2200      	movs	r2, #0
  return HAL_OK;
 8017526:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8017528:	3b04      	subs	r3, #4
 801752a:	54e2      	strb	r2, [r4, r3]
}
 801752c:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 801752e:	4b03      	ldr	r3, [pc, #12]	; (801753c <HAL_UARTEx_SetRxFifoThreshold+0x54>)
 8017530:	6683      	str	r3, [r0, #104]	; 0x68
 8017532:	e7f3      	b.n	801751c <HAL_UARTEx_SetRxFifoThreshold+0x34>
  __HAL_LOCK(huart);
 8017534:	2002      	movs	r0, #2
 8017536:	e7f9      	b.n	801752c <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8017538:	f1ffffff 	.word	0xf1ffffff
 801753c:	00010001 	.word	0x00010001

08017540 <atoi>:
 8017540:	b510      	push	{r4, lr}
 8017542:	220a      	movs	r2, #10
 8017544:	2100      	movs	r1, #0
 8017546:	f000 ff81 	bl	801844c <strtol>
 801754a:	bd10      	pop	{r4, pc}

0801754c <malloc>:
 801754c:	b510      	push	{r4, lr}
 801754e:	4b03      	ldr	r3, [pc, #12]	; (801755c <malloc+0x10>)
 8017550:	0001      	movs	r1, r0
 8017552:	6818      	ldr	r0, [r3, #0]
 8017554:	f000 f826 	bl	80175a4 <_malloc_r>
 8017558:	bd10      	pop	{r4, pc}
 801755a:	46c0      	nop			; (mov r8, r8)
 801755c:	200002b4 	.word	0x200002b4

08017560 <sbrk_aligned>:
 8017560:	b570      	push	{r4, r5, r6, lr}
 8017562:	4e0f      	ldr	r6, [pc, #60]	; (80175a0 <sbrk_aligned+0x40>)
 8017564:	000d      	movs	r5, r1
 8017566:	6831      	ldr	r1, [r6, #0]
 8017568:	0004      	movs	r4, r0
 801756a:	2900      	cmp	r1, #0
 801756c:	d102      	bne.n	8017574 <sbrk_aligned+0x14>
 801756e:	f002 f871 	bl	8019654 <_sbrk_r>
 8017572:	6030      	str	r0, [r6, #0]
 8017574:	0029      	movs	r1, r5
 8017576:	0020      	movs	r0, r4
 8017578:	f002 f86c 	bl	8019654 <_sbrk_r>
 801757c:	1c43      	adds	r3, r0, #1
 801757e:	d00a      	beq.n	8017596 <sbrk_aligned+0x36>
 8017580:	2303      	movs	r3, #3
 8017582:	1cc5      	adds	r5, r0, #3
 8017584:	439d      	bics	r5, r3
 8017586:	42a8      	cmp	r0, r5
 8017588:	d007      	beq.n	801759a <sbrk_aligned+0x3a>
 801758a:	1a29      	subs	r1, r5, r0
 801758c:	0020      	movs	r0, r4
 801758e:	f002 f861 	bl	8019654 <_sbrk_r>
 8017592:	3001      	adds	r0, #1
 8017594:	d101      	bne.n	801759a <sbrk_aligned+0x3a>
 8017596:	2501      	movs	r5, #1
 8017598:	426d      	negs	r5, r5
 801759a:	0028      	movs	r0, r5
 801759c:	bd70      	pop	{r4, r5, r6, pc}
 801759e:	46c0      	nop			; (mov r8, r8)
 80175a0:	20004b1c 	.word	0x20004b1c

080175a4 <_malloc_r>:
 80175a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80175a6:	2203      	movs	r2, #3
 80175a8:	1ccb      	adds	r3, r1, #3
 80175aa:	4393      	bics	r3, r2
 80175ac:	3308      	adds	r3, #8
 80175ae:	0006      	movs	r6, r0
 80175b0:	001f      	movs	r7, r3
 80175b2:	2b0c      	cmp	r3, #12
 80175b4:	d238      	bcs.n	8017628 <_malloc_r+0x84>
 80175b6:	270c      	movs	r7, #12
 80175b8:	42b9      	cmp	r1, r7
 80175ba:	d837      	bhi.n	801762c <_malloc_r+0x88>
 80175bc:	0030      	movs	r0, r6
 80175be:	f000 f873 	bl	80176a8 <__malloc_lock>
 80175c2:	4b38      	ldr	r3, [pc, #224]	; (80176a4 <_malloc_r+0x100>)
 80175c4:	9300      	str	r3, [sp, #0]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	001c      	movs	r4, r3
 80175ca:	2c00      	cmp	r4, #0
 80175cc:	d133      	bne.n	8017636 <_malloc_r+0x92>
 80175ce:	0039      	movs	r1, r7
 80175d0:	0030      	movs	r0, r6
 80175d2:	f7ff ffc5 	bl	8017560 <sbrk_aligned>
 80175d6:	0004      	movs	r4, r0
 80175d8:	1c43      	adds	r3, r0, #1
 80175da:	d15e      	bne.n	801769a <_malloc_r+0xf6>
 80175dc:	9b00      	ldr	r3, [sp, #0]
 80175de:	681c      	ldr	r4, [r3, #0]
 80175e0:	0025      	movs	r5, r4
 80175e2:	2d00      	cmp	r5, #0
 80175e4:	d14e      	bne.n	8017684 <_malloc_r+0xe0>
 80175e6:	2c00      	cmp	r4, #0
 80175e8:	d051      	beq.n	801768e <_malloc_r+0xea>
 80175ea:	6823      	ldr	r3, [r4, #0]
 80175ec:	0029      	movs	r1, r5
 80175ee:	18e3      	adds	r3, r4, r3
 80175f0:	0030      	movs	r0, r6
 80175f2:	9301      	str	r3, [sp, #4]
 80175f4:	f002 f82e 	bl	8019654 <_sbrk_r>
 80175f8:	9b01      	ldr	r3, [sp, #4]
 80175fa:	4283      	cmp	r3, r0
 80175fc:	d147      	bne.n	801768e <_malloc_r+0xea>
 80175fe:	6823      	ldr	r3, [r4, #0]
 8017600:	0030      	movs	r0, r6
 8017602:	1aff      	subs	r7, r7, r3
 8017604:	0039      	movs	r1, r7
 8017606:	f7ff ffab 	bl	8017560 <sbrk_aligned>
 801760a:	3001      	adds	r0, #1
 801760c:	d03f      	beq.n	801768e <_malloc_r+0xea>
 801760e:	6823      	ldr	r3, [r4, #0]
 8017610:	19db      	adds	r3, r3, r7
 8017612:	6023      	str	r3, [r4, #0]
 8017614:	9b00      	ldr	r3, [sp, #0]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d040      	beq.n	801769e <_malloc_r+0xfa>
 801761c:	685a      	ldr	r2, [r3, #4]
 801761e:	42a2      	cmp	r2, r4
 8017620:	d133      	bne.n	801768a <_malloc_r+0xe6>
 8017622:	2200      	movs	r2, #0
 8017624:	605a      	str	r2, [r3, #4]
 8017626:	e014      	b.n	8017652 <_malloc_r+0xae>
 8017628:	2b00      	cmp	r3, #0
 801762a:	dac5      	bge.n	80175b8 <_malloc_r+0x14>
 801762c:	230c      	movs	r3, #12
 801762e:	2500      	movs	r5, #0
 8017630:	6033      	str	r3, [r6, #0]
 8017632:	0028      	movs	r0, r5
 8017634:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017636:	6821      	ldr	r1, [r4, #0]
 8017638:	1bc9      	subs	r1, r1, r7
 801763a:	d420      	bmi.n	801767e <_malloc_r+0xda>
 801763c:	290b      	cmp	r1, #11
 801763e:	d918      	bls.n	8017672 <_malloc_r+0xce>
 8017640:	19e2      	adds	r2, r4, r7
 8017642:	6027      	str	r7, [r4, #0]
 8017644:	42a3      	cmp	r3, r4
 8017646:	d112      	bne.n	801766e <_malloc_r+0xca>
 8017648:	9b00      	ldr	r3, [sp, #0]
 801764a:	601a      	str	r2, [r3, #0]
 801764c:	6863      	ldr	r3, [r4, #4]
 801764e:	6011      	str	r1, [r2, #0]
 8017650:	6053      	str	r3, [r2, #4]
 8017652:	0030      	movs	r0, r6
 8017654:	0025      	movs	r5, r4
 8017656:	f000 f82f 	bl	80176b8 <__malloc_unlock>
 801765a:	2207      	movs	r2, #7
 801765c:	350b      	adds	r5, #11
 801765e:	1d23      	adds	r3, r4, #4
 8017660:	4395      	bics	r5, r2
 8017662:	1aea      	subs	r2, r5, r3
 8017664:	429d      	cmp	r5, r3
 8017666:	d0e4      	beq.n	8017632 <_malloc_r+0x8e>
 8017668:	1b5b      	subs	r3, r3, r5
 801766a:	50a3      	str	r3, [r4, r2]
 801766c:	e7e1      	b.n	8017632 <_malloc_r+0x8e>
 801766e:	605a      	str	r2, [r3, #4]
 8017670:	e7ec      	b.n	801764c <_malloc_r+0xa8>
 8017672:	6862      	ldr	r2, [r4, #4]
 8017674:	42a3      	cmp	r3, r4
 8017676:	d1d5      	bne.n	8017624 <_malloc_r+0x80>
 8017678:	9b00      	ldr	r3, [sp, #0]
 801767a:	601a      	str	r2, [r3, #0]
 801767c:	e7e9      	b.n	8017652 <_malloc_r+0xae>
 801767e:	0023      	movs	r3, r4
 8017680:	6864      	ldr	r4, [r4, #4]
 8017682:	e7a2      	b.n	80175ca <_malloc_r+0x26>
 8017684:	002c      	movs	r4, r5
 8017686:	686d      	ldr	r5, [r5, #4]
 8017688:	e7ab      	b.n	80175e2 <_malloc_r+0x3e>
 801768a:	0013      	movs	r3, r2
 801768c:	e7c4      	b.n	8017618 <_malloc_r+0x74>
 801768e:	230c      	movs	r3, #12
 8017690:	0030      	movs	r0, r6
 8017692:	6033      	str	r3, [r6, #0]
 8017694:	f000 f810 	bl	80176b8 <__malloc_unlock>
 8017698:	e7cb      	b.n	8017632 <_malloc_r+0x8e>
 801769a:	6027      	str	r7, [r4, #0]
 801769c:	e7d9      	b.n	8017652 <_malloc_r+0xae>
 801769e:	605b      	str	r3, [r3, #4]
 80176a0:	deff      	udf	#255	; 0xff
 80176a2:	46c0      	nop			; (mov r8, r8)
 80176a4:	20004b18 	.word	0x20004b18

080176a8 <__malloc_lock>:
 80176a8:	b510      	push	{r4, lr}
 80176aa:	4802      	ldr	r0, [pc, #8]	; (80176b4 <__malloc_lock+0xc>)
 80176ac:	f002 f823 	bl	80196f6 <__retarget_lock_acquire_recursive>
 80176b0:	bd10      	pop	{r4, pc}
 80176b2:	46c0      	nop			; (mov r8, r8)
 80176b4:	20004c60 	.word	0x20004c60

080176b8 <__malloc_unlock>:
 80176b8:	b510      	push	{r4, lr}
 80176ba:	4802      	ldr	r0, [pc, #8]	; (80176c4 <__malloc_unlock+0xc>)
 80176bc:	f002 f81c 	bl	80196f8 <__retarget_lock_release_recursive>
 80176c0:	bd10      	pop	{r4, pc}
 80176c2:	46c0      	nop			; (mov r8, r8)
 80176c4:	20004c60 	.word	0x20004c60

080176c8 <sulp>:
 80176c8:	b570      	push	{r4, r5, r6, lr}
 80176ca:	0016      	movs	r6, r2
 80176cc:	000d      	movs	r5, r1
 80176ce:	f003 fe35 	bl	801b33c <__ulp>
 80176d2:	2e00      	cmp	r6, #0
 80176d4:	d00d      	beq.n	80176f2 <sulp+0x2a>
 80176d6:	236b      	movs	r3, #107	; 0x6b
 80176d8:	006a      	lsls	r2, r5, #1
 80176da:	0d52      	lsrs	r2, r2, #21
 80176dc:	1a9b      	subs	r3, r3, r2
 80176de:	2b00      	cmp	r3, #0
 80176e0:	dd07      	ble.n	80176f2 <sulp+0x2a>
 80176e2:	2400      	movs	r4, #0
 80176e4:	4a03      	ldr	r2, [pc, #12]	; (80176f4 <sulp+0x2c>)
 80176e6:	051b      	lsls	r3, r3, #20
 80176e8:	189d      	adds	r5, r3, r2
 80176ea:	002b      	movs	r3, r5
 80176ec:	0022      	movs	r2, r4
 80176ee:	f7f7 f9ed 	bl	800eacc <__aeabi_dmul>
 80176f2:	bd70      	pop	{r4, r5, r6, pc}
 80176f4:	3ff00000 	.word	0x3ff00000

080176f8 <_strtod_l>:
 80176f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176fa:	b0a1      	sub	sp, #132	; 0x84
 80176fc:	9219      	str	r2, [sp, #100]	; 0x64
 80176fe:	2200      	movs	r2, #0
 8017700:	2600      	movs	r6, #0
 8017702:	2700      	movs	r7, #0
 8017704:	9004      	str	r0, [sp, #16]
 8017706:	9107      	str	r1, [sp, #28]
 8017708:	921c      	str	r2, [sp, #112]	; 0x70
 801770a:	911b      	str	r1, [sp, #108]	; 0x6c
 801770c:	780a      	ldrb	r2, [r1, #0]
 801770e:	2a2b      	cmp	r2, #43	; 0x2b
 8017710:	d055      	beq.n	80177be <_strtod_l+0xc6>
 8017712:	d841      	bhi.n	8017798 <_strtod_l+0xa0>
 8017714:	2a0d      	cmp	r2, #13
 8017716:	d83b      	bhi.n	8017790 <_strtod_l+0x98>
 8017718:	2a08      	cmp	r2, #8
 801771a:	d83b      	bhi.n	8017794 <_strtod_l+0x9c>
 801771c:	2a00      	cmp	r2, #0
 801771e:	d044      	beq.n	80177aa <_strtod_l+0xb2>
 8017720:	2200      	movs	r2, #0
 8017722:	920f      	str	r2, [sp, #60]	; 0x3c
 8017724:	2100      	movs	r1, #0
 8017726:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8017728:	9109      	str	r1, [sp, #36]	; 0x24
 801772a:	782a      	ldrb	r2, [r5, #0]
 801772c:	2a30      	cmp	r2, #48	; 0x30
 801772e:	d000      	beq.n	8017732 <_strtod_l+0x3a>
 8017730:	e085      	b.n	801783e <_strtod_l+0x146>
 8017732:	786a      	ldrb	r2, [r5, #1]
 8017734:	3120      	adds	r1, #32
 8017736:	438a      	bics	r2, r1
 8017738:	2a58      	cmp	r2, #88	; 0x58
 801773a:	d000      	beq.n	801773e <_strtod_l+0x46>
 801773c:	e075      	b.n	801782a <_strtod_l+0x132>
 801773e:	9302      	str	r3, [sp, #8]
 8017740:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017742:	4a97      	ldr	r2, [pc, #604]	; (80179a0 <_strtod_l+0x2a8>)
 8017744:	9301      	str	r3, [sp, #4]
 8017746:	ab1c      	add	r3, sp, #112	; 0x70
 8017748:	9300      	str	r3, [sp, #0]
 801774a:	9804      	ldr	r0, [sp, #16]
 801774c:	ab1d      	add	r3, sp, #116	; 0x74
 801774e:	a91b      	add	r1, sp, #108	; 0x6c
 8017750:	f002 ff6a 	bl	801a628 <__gethex>
 8017754:	230f      	movs	r3, #15
 8017756:	0002      	movs	r2, r0
 8017758:	401a      	ands	r2, r3
 801775a:	0004      	movs	r4, r0
 801775c:	9205      	str	r2, [sp, #20]
 801775e:	4218      	tst	r0, r3
 8017760:	d005      	beq.n	801776e <_strtod_l+0x76>
 8017762:	2a06      	cmp	r2, #6
 8017764:	d12d      	bne.n	80177c2 <_strtod_l+0xca>
 8017766:	1c6b      	adds	r3, r5, #1
 8017768:	931b      	str	r3, [sp, #108]	; 0x6c
 801776a:	2300      	movs	r3, #0
 801776c:	930f      	str	r3, [sp, #60]	; 0x3c
 801776e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017770:	2b00      	cmp	r3, #0
 8017772:	d002      	beq.n	801777a <_strtod_l+0x82>
 8017774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017776:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017778:	6013      	str	r3, [r2, #0]
 801777a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801777c:	2b00      	cmp	r3, #0
 801777e:	d01b      	beq.n	80177b8 <_strtod_l+0xc0>
 8017780:	2380      	movs	r3, #128	; 0x80
 8017782:	0032      	movs	r2, r6
 8017784:	061b      	lsls	r3, r3, #24
 8017786:	18fb      	adds	r3, r7, r3
 8017788:	0010      	movs	r0, r2
 801778a:	0019      	movs	r1, r3
 801778c:	b021      	add	sp, #132	; 0x84
 801778e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017790:	2a20      	cmp	r2, #32
 8017792:	d1c5      	bne.n	8017720 <_strtod_l+0x28>
 8017794:	3101      	adds	r1, #1
 8017796:	e7b8      	b.n	801770a <_strtod_l+0x12>
 8017798:	2a2d      	cmp	r2, #45	; 0x2d
 801779a:	d1c1      	bne.n	8017720 <_strtod_l+0x28>
 801779c:	3a2c      	subs	r2, #44	; 0x2c
 801779e:	920f      	str	r2, [sp, #60]	; 0x3c
 80177a0:	1c4a      	adds	r2, r1, #1
 80177a2:	921b      	str	r2, [sp, #108]	; 0x6c
 80177a4:	784a      	ldrb	r2, [r1, #1]
 80177a6:	2a00      	cmp	r2, #0
 80177a8:	d1bc      	bne.n	8017724 <_strtod_l+0x2c>
 80177aa:	9b07      	ldr	r3, [sp, #28]
 80177ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80177ae:	2300      	movs	r3, #0
 80177b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80177b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d1dd      	bne.n	8017774 <_strtod_l+0x7c>
 80177b8:	0032      	movs	r2, r6
 80177ba:	003b      	movs	r3, r7
 80177bc:	e7e4      	b.n	8017788 <_strtod_l+0x90>
 80177be:	2200      	movs	r2, #0
 80177c0:	e7ed      	b.n	801779e <_strtod_l+0xa6>
 80177c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80177c4:	2a00      	cmp	r2, #0
 80177c6:	d007      	beq.n	80177d8 <_strtod_l+0xe0>
 80177c8:	2135      	movs	r1, #53	; 0x35
 80177ca:	a81e      	add	r0, sp, #120	; 0x78
 80177cc:	f003 fea7 	bl	801b51e <__copybits>
 80177d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80177d2:	9804      	ldr	r0, [sp, #16]
 80177d4:	f003 fa70 	bl	801acb8 <_Bfree>
 80177d8:	9805      	ldr	r0, [sp, #20]
 80177da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177dc:	3801      	subs	r0, #1
 80177de:	2804      	cmp	r0, #4
 80177e0:	d806      	bhi.n	80177f0 <_strtod_l+0xf8>
 80177e2:	f7f5 f895 	bl	800c910 <__gnu_thumb1_case_uqi>
 80177e6:	0312      	.short	0x0312
 80177e8:	1e1c      	.short	0x1e1c
 80177ea:	12          	.byte	0x12
 80177eb:	00          	.byte	0x00
 80177ec:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 80177ee:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80177f0:	05e4      	lsls	r4, r4, #23
 80177f2:	d502      	bpl.n	80177fa <_strtod_l+0x102>
 80177f4:	2380      	movs	r3, #128	; 0x80
 80177f6:	061b      	lsls	r3, r3, #24
 80177f8:	431f      	orrs	r7, r3
 80177fa:	4b6a      	ldr	r3, [pc, #424]	; (80179a4 <_strtod_l+0x2ac>)
 80177fc:	423b      	tst	r3, r7
 80177fe:	d1b6      	bne.n	801776e <_strtod_l+0x76>
 8017800:	f001 ff4e 	bl	80196a0 <__errno>
 8017804:	2322      	movs	r3, #34	; 0x22
 8017806:	6003      	str	r3, [r0, #0]
 8017808:	e7b1      	b.n	801776e <_strtod_l+0x76>
 801780a:	4967      	ldr	r1, [pc, #412]	; (80179a8 <_strtod_l+0x2b0>)
 801780c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801780e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8017810:	400a      	ands	r2, r1
 8017812:	4966      	ldr	r1, [pc, #408]	; (80179ac <_strtod_l+0x2b4>)
 8017814:	185b      	adds	r3, r3, r1
 8017816:	051b      	lsls	r3, r3, #20
 8017818:	431a      	orrs	r2, r3
 801781a:	0017      	movs	r7, r2
 801781c:	e7e8      	b.n	80177f0 <_strtod_l+0xf8>
 801781e:	4f61      	ldr	r7, [pc, #388]	; (80179a4 <_strtod_l+0x2ac>)
 8017820:	e7e6      	b.n	80177f0 <_strtod_l+0xf8>
 8017822:	2601      	movs	r6, #1
 8017824:	4f62      	ldr	r7, [pc, #392]	; (80179b0 <_strtod_l+0x2b8>)
 8017826:	4276      	negs	r6, r6
 8017828:	e7e2      	b.n	80177f0 <_strtod_l+0xf8>
 801782a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801782c:	1c5a      	adds	r2, r3, #1
 801782e:	921b      	str	r2, [sp, #108]	; 0x6c
 8017830:	785b      	ldrb	r3, [r3, #1]
 8017832:	2b30      	cmp	r3, #48	; 0x30
 8017834:	d0f9      	beq.n	801782a <_strtod_l+0x132>
 8017836:	2b00      	cmp	r3, #0
 8017838:	d099      	beq.n	801776e <_strtod_l+0x76>
 801783a:	2301      	movs	r3, #1
 801783c:	9309      	str	r3, [sp, #36]	; 0x24
 801783e:	2500      	movs	r5, #0
 8017840:	220a      	movs	r2, #10
 8017842:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017844:	950d      	str	r5, [sp, #52]	; 0x34
 8017846:	9310      	str	r3, [sp, #64]	; 0x40
 8017848:	9508      	str	r5, [sp, #32]
 801784a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801784c:	7804      	ldrb	r4, [r0, #0]
 801784e:	0023      	movs	r3, r4
 8017850:	3b30      	subs	r3, #48	; 0x30
 8017852:	b2d9      	uxtb	r1, r3
 8017854:	2909      	cmp	r1, #9
 8017856:	d927      	bls.n	80178a8 <_strtod_l+0x1b0>
 8017858:	2201      	movs	r2, #1
 801785a:	4956      	ldr	r1, [pc, #344]	; (80179b4 <_strtod_l+0x2bc>)
 801785c:	f001 fe0f 	bl	801947e <strncmp>
 8017860:	2800      	cmp	r0, #0
 8017862:	d031      	beq.n	80178c8 <_strtod_l+0x1d0>
 8017864:	2000      	movs	r0, #0
 8017866:	0023      	movs	r3, r4
 8017868:	4684      	mov	ip, r0
 801786a:	9a08      	ldr	r2, [sp, #32]
 801786c:	900c      	str	r0, [sp, #48]	; 0x30
 801786e:	9205      	str	r2, [sp, #20]
 8017870:	2220      	movs	r2, #32
 8017872:	0019      	movs	r1, r3
 8017874:	4391      	bics	r1, r2
 8017876:	000a      	movs	r2, r1
 8017878:	2100      	movs	r1, #0
 801787a:	9106      	str	r1, [sp, #24]
 801787c:	2a45      	cmp	r2, #69	; 0x45
 801787e:	d000      	beq.n	8017882 <_strtod_l+0x18a>
 8017880:	e0c2      	b.n	8017a08 <_strtod_l+0x310>
 8017882:	9b05      	ldr	r3, [sp, #20]
 8017884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017886:	4303      	orrs	r3, r0
 8017888:	4313      	orrs	r3, r2
 801788a:	428b      	cmp	r3, r1
 801788c:	d08d      	beq.n	80177aa <_strtod_l+0xb2>
 801788e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017890:	9307      	str	r3, [sp, #28]
 8017892:	3301      	adds	r3, #1
 8017894:	931b      	str	r3, [sp, #108]	; 0x6c
 8017896:	9b07      	ldr	r3, [sp, #28]
 8017898:	785b      	ldrb	r3, [r3, #1]
 801789a:	2b2b      	cmp	r3, #43	; 0x2b
 801789c:	d071      	beq.n	8017982 <_strtod_l+0x28a>
 801789e:	000c      	movs	r4, r1
 80178a0:	2b2d      	cmp	r3, #45	; 0x2d
 80178a2:	d174      	bne.n	801798e <_strtod_l+0x296>
 80178a4:	2401      	movs	r4, #1
 80178a6:	e06d      	b.n	8017984 <_strtod_l+0x28c>
 80178a8:	9908      	ldr	r1, [sp, #32]
 80178aa:	2908      	cmp	r1, #8
 80178ac:	dc09      	bgt.n	80178c2 <_strtod_l+0x1ca>
 80178ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80178b0:	4351      	muls	r1, r2
 80178b2:	185b      	adds	r3, r3, r1
 80178b4:	930d      	str	r3, [sp, #52]	; 0x34
 80178b6:	9b08      	ldr	r3, [sp, #32]
 80178b8:	3001      	adds	r0, #1
 80178ba:	3301      	adds	r3, #1
 80178bc:	9308      	str	r3, [sp, #32]
 80178be:	901b      	str	r0, [sp, #108]	; 0x6c
 80178c0:	e7c3      	b.n	801784a <_strtod_l+0x152>
 80178c2:	4355      	muls	r5, r2
 80178c4:	195d      	adds	r5, r3, r5
 80178c6:	e7f6      	b.n	80178b6 <_strtod_l+0x1be>
 80178c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80178ca:	1c5a      	adds	r2, r3, #1
 80178cc:	921b      	str	r2, [sp, #108]	; 0x6c
 80178ce:	9a08      	ldr	r2, [sp, #32]
 80178d0:	785b      	ldrb	r3, [r3, #1]
 80178d2:	2a00      	cmp	r2, #0
 80178d4:	d03a      	beq.n	801794c <_strtod_l+0x254>
 80178d6:	900c      	str	r0, [sp, #48]	; 0x30
 80178d8:	9205      	str	r2, [sp, #20]
 80178da:	001a      	movs	r2, r3
 80178dc:	3a30      	subs	r2, #48	; 0x30
 80178de:	2a09      	cmp	r2, #9
 80178e0:	d912      	bls.n	8017908 <_strtod_l+0x210>
 80178e2:	2201      	movs	r2, #1
 80178e4:	4694      	mov	ip, r2
 80178e6:	e7c3      	b.n	8017870 <_strtod_l+0x178>
 80178e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80178ea:	3001      	adds	r0, #1
 80178ec:	1c5a      	adds	r2, r3, #1
 80178ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80178f0:	785b      	ldrb	r3, [r3, #1]
 80178f2:	2b30      	cmp	r3, #48	; 0x30
 80178f4:	d0f8      	beq.n	80178e8 <_strtod_l+0x1f0>
 80178f6:	001a      	movs	r2, r3
 80178f8:	3a31      	subs	r2, #49	; 0x31
 80178fa:	2a08      	cmp	r2, #8
 80178fc:	d83c      	bhi.n	8017978 <_strtod_l+0x280>
 80178fe:	900c      	str	r0, [sp, #48]	; 0x30
 8017900:	2000      	movs	r0, #0
 8017902:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017904:	9005      	str	r0, [sp, #20]
 8017906:	9210      	str	r2, [sp, #64]	; 0x40
 8017908:	001a      	movs	r2, r3
 801790a:	1c41      	adds	r1, r0, #1
 801790c:	3a30      	subs	r2, #48	; 0x30
 801790e:	2b30      	cmp	r3, #48	; 0x30
 8017910:	d016      	beq.n	8017940 <_strtod_l+0x248>
 8017912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017914:	185b      	adds	r3, r3, r1
 8017916:	930c      	str	r3, [sp, #48]	; 0x30
 8017918:	9b05      	ldr	r3, [sp, #20]
 801791a:	210a      	movs	r1, #10
 801791c:	469c      	mov	ip, r3
 801791e:	4484      	add	ip, r0
 8017920:	4563      	cmp	r3, ip
 8017922:	d115      	bne.n	8017950 <_strtod_l+0x258>
 8017924:	9905      	ldr	r1, [sp, #20]
 8017926:	9b05      	ldr	r3, [sp, #20]
 8017928:	3101      	adds	r1, #1
 801792a:	1809      	adds	r1, r1, r0
 801792c:	181b      	adds	r3, r3, r0
 801792e:	9105      	str	r1, [sp, #20]
 8017930:	2b08      	cmp	r3, #8
 8017932:	dc19      	bgt.n	8017968 <_strtod_l+0x270>
 8017934:	230a      	movs	r3, #10
 8017936:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017938:	434b      	muls	r3, r1
 801793a:	2100      	movs	r1, #0
 801793c:	18d3      	adds	r3, r2, r3
 801793e:	930d      	str	r3, [sp, #52]	; 0x34
 8017940:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017942:	0008      	movs	r0, r1
 8017944:	1c5a      	adds	r2, r3, #1
 8017946:	921b      	str	r2, [sp, #108]	; 0x6c
 8017948:	785b      	ldrb	r3, [r3, #1]
 801794a:	e7c6      	b.n	80178da <_strtod_l+0x1e2>
 801794c:	9808      	ldr	r0, [sp, #32]
 801794e:	e7d0      	b.n	80178f2 <_strtod_l+0x1fa>
 8017950:	1c5c      	adds	r4, r3, #1
 8017952:	2b08      	cmp	r3, #8
 8017954:	dc04      	bgt.n	8017960 <_strtod_l+0x268>
 8017956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017958:	434b      	muls	r3, r1
 801795a:	930d      	str	r3, [sp, #52]	; 0x34
 801795c:	0023      	movs	r3, r4
 801795e:	e7df      	b.n	8017920 <_strtod_l+0x228>
 8017960:	2c10      	cmp	r4, #16
 8017962:	dcfb      	bgt.n	801795c <_strtod_l+0x264>
 8017964:	434d      	muls	r5, r1
 8017966:	e7f9      	b.n	801795c <_strtod_l+0x264>
 8017968:	9b05      	ldr	r3, [sp, #20]
 801796a:	2100      	movs	r1, #0
 801796c:	2b10      	cmp	r3, #16
 801796e:	dce7      	bgt.n	8017940 <_strtod_l+0x248>
 8017970:	230a      	movs	r3, #10
 8017972:	435d      	muls	r5, r3
 8017974:	1955      	adds	r5, r2, r5
 8017976:	e7e3      	b.n	8017940 <_strtod_l+0x248>
 8017978:	2200      	movs	r2, #0
 801797a:	920c      	str	r2, [sp, #48]	; 0x30
 801797c:	9205      	str	r2, [sp, #20]
 801797e:	3201      	adds	r2, #1
 8017980:	e7b0      	b.n	80178e4 <_strtod_l+0x1ec>
 8017982:	2400      	movs	r4, #0
 8017984:	9b07      	ldr	r3, [sp, #28]
 8017986:	3302      	adds	r3, #2
 8017988:	931b      	str	r3, [sp, #108]	; 0x6c
 801798a:	9b07      	ldr	r3, [sp, #28]
 801798c:	789b      	ldrb	r3, [r3, #2]
 801798e:	001a      	movs	r2, r3
 8017990:	3a30      	subs	r2, #48	; 0x30
 8017992:	2a09      	cmp	r2, #9
 8017994:	d914      	bls.n	80179c0 <_strtod_l+0x2c8>
 8017996:	9a07      	ldr	r2, [sp, #28]
 8017998:	921b      	str	r2, [sp, #108]	; 0x6c
 801799a:	2200      	movs	r2, #0
 801799c:	e033      	b.n	8017a06 <_strtod_l+0x30e>
 801799e:	46c0      	nop			; (mov r8, r8)
 80179a0:	0801e1c4 	.word	0x0801e1c4
 80179a4:	7ff00000 	.word	0x7ff00000
 80179a8:	ffefffff 	.word	0xffefffff
 80179ac:	00000433 	.word	0x00000433
 80179b0:	7fffffff 	.word	0x7fffffff
 80179b4:	0801e1c0 	.word	0x0801e1c0
 80179b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80179ba:	1c5a      	adds	r2, r3, #1
 80179bc:	921b      	str	r2, [sp, #108]	; 0x6c
 80179be:	785b      	ldrb	r3, [r3, #1]
 80179c0:	2b30      	cmp	r3, #48	; 0x30
 80179c2:	d0f9      	beq.n	80179b8 <_strtod_l+0x2c0>
 80179c4:	2200      	movs	r2, #0
 80179c6:	9206      	str	r2, [sp, #24]
 80179c8:	001a      	movs	r2, r3
 80179ca:	3a31      	subs	r2, #49	; 0x31
 80179cc:	2a08      	cmp	r2, #8
 80179ce:	d81b      	bhi.n	8017a08 <_strtod_l+0x310>
 80179d0:	3b30      	subs	r3, #48	; 0x30
 80179d2:	930e      	str	r3, [sp, #56]	; 0x38
 80179d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80179d6:	9306      	str	r3, [sp, #24]
 80179d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80179da:	1c59      	adds	r1, r3, #1
 80179dc:	911b      	str	r1, [sp, #108]	; 0x6c
 80179de:	785b      	ldrb	r3, [r3, #1]
 80179e0:	001a      	movs	r2, r3
 80179e2:	3a30      	subs	r2, #48	; 0x30
 80179e4:	2a09      	cmp	r2, #9
 80179e6:	d93a      	bls.n	8017a5e <_strtod_l+0x366>
 80179e8:	9a06      	ldr	r2, [sp, #24]
 80179ea:	1a8a      	subs	r2, r1, r2
 80179ec:	49b2      	ldr	r1, [pc, #712]	; (8017cb8 <_strtod_l+0x5c0>)
 80179ee:	9106      	str	r1, [sp, #24]
 80179f0:	2a08      	cmp	r2, #8
 80179f2:	dc04      	bgt.n	80179fe <_strtod_l+0x306>
 80179f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179f6:	9206      	str	r2, [sp, #24]
 80179f8:	428a      	cmp	r2, r1
 80179fa:	dd00      	ble.n	80179fe <_strtod_l+0x306>
 80179fc:	9106      	str	r1, [sp, #24]
 80179fe:	2c00      	cmp	r4, #0
 8017a00:	d002      	beq.n	8017a08 <_strtod_l+0x310>
 8017a02:	9a06      	ldr	r2, [sp, #24]
 8017a04:	4252      	negs	r2, r2
 8017a06:	9206      	str	r2, [sp, #24]
 8017a08:	9a05      	ldr	r2, [sp, #20]
 8017a0a:	2a00      	cmp	r2, #0
 8017a0c:	d14d      	bne.n	8017aaa <_strtod_l+0x3b2>
 8017a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a10:	4310      	orrs	r0, r2
 8017a12:	d000      	beq.n	8017a16 <_strtod_l+0x31e>
 8017a14:	e6ab      	b.n	801776e <_strtod_l+0x76>
 8017a16:	4662      	mov	r2, ip
 8017a18:	2a00      	cmp	r2, #0
 8017a1a:	d000      	beq.n	8017a1e <_strtod_l+0x326>
 8017a1c:	e6c5      	b.n	80177aa <_strtod_l+0xb2>
 8017a1e:	2b69      	cmp	r3, #105	; 0x69
 8017a20:	d027      	beq.n	8017a72 <_strtod_l+0x37a>
 8017a22:	dc23      	bgt.n	8017a6c <_strtod_l+0x374>
 8017a24:	2b49      	cmp	r3, #73	; 0x49
 8017a26:	d024      	beq.n	8017a72 <_strtod_l+0x37a>
 8017a28:	2b4e      	cmp	r3, #78	; 0x4e
 8017a2a:	d000      	beq.n	8017a2e <_strtod_l+0x336>
 8017a2c:	e6bd      	b.n	80177aa <_strtod_l+0xb2>
 8017a2e:	49a3      	ldr	r1, [pc, #652]	; (8017cbc <_strtod_l+0x5c4>)
 8017a30:	a81b      	add	r0, sp, #108	; 0x6c
 8017a32:	f003 f82f 	bl	801aa94 <__match>
 8017a36:	2800      	cmp	r0, #0
 8017a38:	d100      	bne.n	8017a3c <_strtod_l+0x344>
 8017a3a:	e6b6      	b.n	80177aa <_strtod_l+0xb2>
 8017a3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	2b28      	cmp	r3, #40	; 0x28
 8017a42:	d12c      	bne.n	8017a9e <_strtod_l+0x3a6>
 8017a44:	499e      	ldr	r1, [pc, #632]	; (8017cc0 <_strtod_l+0x5c8>)
 8017a46:	aa1e      	add	r2, sp, #120	; 0x78
 8017a48:	a81b      	add	r0, sp, #108	; 0x6c
 8017a4a:	f003 f837 	bl	801aabc <__hexnan>
 8017a4e:	2805      	cmp	r0, #5
 8017a50:	d125      	bne.n	8017a9e <_strtod_l+0x3a6>
 8017a52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017a54:	4a9b      	ldr	r2, [pc, #620]	; (8017cc4 <_strtod_l+0x5cc>)
 8017a56:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8017a58:	431a      	orrs	r2, r3
 8017a5a:	0017      	movs	r7, r2
 8017a5c:	e687      	b.n	801776e <_strtod_l+0x76>
 8017a5e:	220a      	movs	r2, #10
 8017a60:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017a62:	434a      	muls	r2, r1
 8017a64:	18d2      	adds	r2, r2, r3
 8017a66:	3a30      	subs	r2, #48	; 0x30
 8017a68:	920e      	str	r2, [sp, #56]	; 0x38
 8017a6a:	e7b5      	b.n	80179d8 <_strtod_l+0x2e0>
 8017a6c:	2b6e      	cmp	r3, #110	; 0x6e
 8017a6e:	d0de      	beq.n	8017a2e <_strtod_l+0x336>
 8017a70:	e69b      	b.n	80177aa <_strtod_l+0xb2>
 8017a72:	4995      	ldr	r1, [pc, #596]	; (8017cc8 <_strtod_l+0x5d0>)
 8017a74:	a81b      	add	r0, sp, #108	; 0x6c
 8017a76:	f003 f80d 	bl	801aa94 <__match>
 8017a7a:	2800      	cmp	r0, #0
 8017a7c:	d100      	bne.n	8017a80 <_strtod_l+0x388>
 8017a7e:	e694      	b.n	80177aa <_strtod_l+0xb2>
 8017a80:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017a82:	4992      	ldr	r1, [pc, #584]	; (8017ccc <_strtod_l+0x5d4>)
 8017a84:	3b01      	subs	r3, #1
 8017a86:	a81b      	add	r0, sp, #108	; 0x6c
 8017a88:	931b      	str	r3, [sp, #108]	; 0x6c
 8017a8a:	f003 f803 	bl	801aa94 <__match>
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	d102      	bne.n	8017a98 <_strtod_l+0x3a0>
 8017a92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017a94:	3301      	adds	r3, #1
 8017a96:	931b      	str	r3, [sp, #108]	; 0x6c
 8017a98:	2600      	movs	r6, #0
 8017a9a:	4f8a      	ldr	r7, [pc, #552]	; (8017cc4 <_strtod_l+0x5cc>)
 8017a9c:	e667      	b.n	801776e <_strtod_l+0x76>
 8017a9e:	488c      	ldr	r0, [pc, #560]	; (8017cd0 <_strtod_l+0x5d8>)
 8017aa0:	f001 fe48 	bl	8019734 <nan>
 8017aa4:	0006      	movs	r6, r0
 8017aa6:	000f      	movs	r7, r1
 8017aa8:	e661      	b.n	801776e <_strtod_l+0x76>
 8017aaa:	9b06      	ldr	r3, [sp, #24]
 8017aac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017aae:	1a9b      	subs	r3, r3, r2
 8017ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ab2:	9b08      	ldr	r3, [sp, #32]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d101      	bne.n	8017abc <_strtod_l+0x3c4>
 8017ab8:	9b05      	ldr	r3, [sp, #20]
 8017aba:	9308      	str	r3, [sp, #32]
 8017abc:	9c05      	ldr	r4, [sp, #20]
 8017abe:	2c10      	cmp	r4, #16
 8017ac0:	dd00      	ble.n	8017ac4 <_strtod_l+0x3cc>
 8017ac2:	2410      	movs	r4, #16
 8017ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017ac6:	f7f7 fec9 	bl	800f85c <__aeabi_ui2d>
 8017aca:	9b05      	ldr	r3, [sp, #20]
 8017acc:	0006      	movs	r6, r0
 8017ace:	000f      	movs	r7, r1
 8017ad0:	2b09      	cmp	r3, #9
 8017ad2:	dd15      	ble.n	8017b00 <_strtod_l+0x408>
 8017ad4:	0022      	movs	r2, r4
 8017ad6:	4b7f      	ldr	r3, [pc, #508]	; (8017cd4 <_strtod_l+0x5dc>)
 8017ad8:	3a09      	subs	r2, #9
 8017ada:	00d2      	lsls	r2, r2, #3
 8017adc:	189b      	adds	r3, r3, r2
 8017ade:	681a      	ldr	r2, [r3, #0]
 8017ae0:	685b      	ldr	r3, [r3, #4]
 8017ae2:	f7f6 fff3 	bl	800eacc <__aeabi_dmul>
 8017ae6:	0006      	movs	r6, r0
 8017ae8:	0028      	movs	r0, r5
 8017aea:	000f      	movs	r7, r1
 8017aec:	f7f7 feb6 	bl	800f85c <__aeabi_ui2d>
 8017af0:	0002      	movs	r2, r0
 8017af2:	000b      	movs	r3, r1
 8017af4:	0030      	movs	r0, r6
 8017af6:	0039      	movs	r1, r7
 8017af8:	f7f6 f88e 	bl	800dc18 <__aeabi_dadd>
 8017afc:	0006      	movs	r6, r0
 8017afe:	000f      	movs	r7, r1
 8017b00:	9b05      	ldr	r3, [sp, #20]
 8017b02:	2b0f      	cmp	r3, #15
 8017b04:	dc39      	bgt.n	8017b7a <_strtod_l+0x482>
 8017b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d100      	bne.n	8017b0e <_strtod_l+0x416>
 8017b0c:	e62f      	b.n	801776e <_strtod_l+0x76>
 8017b0e:	dd24      	ble.n	8017b5a <_strtod_l+0x462>
 8017b10:	2b16      	cmp	r3, #22
 8017b12:	dc09      	bgt.n	8017b28 <_strtod_l+0x430>
 8017b14:	496f      	ldr	r1, [pc, #444]	; (8017cd4 <_strtod_l+0x5dc>)
 8017b16:	00db      	lsls	r3, r3, #3
 8017b18:	18c9      	adds	r1, r1, r3
 8017b1a:	0032      	movs	r2, r6
 8017b1c:	6808      	ldr	r0, [r1, #0]
 8017b1e:	6849      	ldr	r1, [r1, #4]
 8017b20:	003b      	movs	r3, r7
 8017b22:	f7f6 ffd3 	bl	800eacc <__aeabi_dmul>
 8017b26:	e7bd      	b.n	8017aa4 <_strtod_l+0x3ac>
 8017b28:	2325      	movs	r3, #37	; 0x25
 8017b2a:	9a05      	ldr	r2, [sp, #20]
 8017b2c:	1a9b      	subs	r3, r3, r2
 8017b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b30:	4293      	cmp	r3, r2
 8017b32:	db22      	blt.n	8017b7a <_strtod_l+0x482>
 8017b34:	240f      	movs	r4, #15
 8017b36:	9b05      	ldr	r3, [sp, #20]
 8017b38:	4d66      	ldr	r5, [pc, #408]	; (8017cd4 <_strtod_l+0x5dc>)
 8017b3a:	1ae4      	subs	r4, r4, r3
 8017b3c:	00e1      	lsls	r1, r4, #3
 8017b3e:	1869      	adds	r1, r5, r1
 8017b40:	0032      	movs	r2, r6
 8017b42:	6808      	ldr	r0, [r1, #0]
 8017b44:	6849      	ldr	r1, [r1, #4]
 8017b46:	003b      	movs	r3, r7
 8017b48:	f7f6 ffc0 	bl	800eacc <__aeabi_dmul>
 8017b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b4e:	1b1c      	subs	r4, r3, r4
 8017b50:	00e4      	lsls	r4, r4, #3
 8017b52:	192d      	adds	r5, r5, r4
 8017b54:	682a      	ldr	r2, [r5, #0]
 8017b56:	686b      	ldr	r3, [r5, #4]
 8017b58:	e7e3      	b.n	8017b22 <_strtod_l+0x42a>
 8017b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b5c:	3316      	adds	r3, #22
 8017b5e:	db0c      	blt.n	8017b7a <_strtod_l+0x482>
 8017b60:	9906      	ldr	r1, [sp, #24]
 8017b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b64:	4b5b      	ldr	r3, [pc, #364]	; (8017cd4 <_strtod_l+0x5dc>)
 8017b66:	1a52      	subs	r2, r2, r1
 8017b68:	00d2      	lsls	r2, r2, #3
 8017b6a:	189b      	adds	r3, r3, r2
 8017b6c:	0030      	movs	r0, r6
 8017b6e:	681a      	ldr	r2, [r3, #0]
 8017b70:	685b      	ldr	r3, [r3, #4]
 8017b72:	0039      	movs	r1, r7
 8017b74:	f7f6 fbb0 	bl	800e2d8 <__aeabi_ddiv>
 8017b78:	e794      	b.n	8017aa4 <_strtod_l+0x3ac>
 8017b7a:	9b05      	ldr	r3, [sp, #20]
 8017b7c:	1b1c      	subs	r4, r3, r4
 8017b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b80:	18e4      	adds	r4, r4, r3
 8017b82:	2c00      	cmp	r4, #0
 8017b84:	dd72      	ble.n	8017c6c <_strtod_l+0x574>
 8017b86:	220f      	movs	r2, #15
 8017b88:	0023      	movs	r3, r4
 8017b8a:	4013      	ands	r3, r2
 8017b8c:	4214      	tst	r4, r2
 8017b8e:	d00a      	beq.n	8017ba6 <_strtod_l+0x4ae>
 8017b90:	4950      	ldr	r1, [pc, #320]	; (8017cd4 <_strtod_l+0x5dc>)
 8017b92:	00db      	lsls	r3, r3, #3
 8017b94:	18c9      	adds	r1, r1, r3
 8017b96:	0032      	movs	r2, r6
 8017b98:	6808      	ldr	r0, [r1, #0]
 8017b9a:	6849      	ldr	r1, [r1, #4]
 8017b9c:	003b      	movs	r3, r7
 8017b9e:	f7f6 ff95 	bl	800eacc <__aeabi_dmul>
 8017ba2:	0006      	movs	r6, r0
 8017ba4:	000f      	movs	r7, r1
 8017ba6:	230f      	movs	r3, #15
 8017ba8:	439c      	bics	r4, r3
 8017baa:	d04a      	beq.n	8017c42 <_strtod_l+0x54a>
 8017bac:	3326      	adds	r3, #38	; 0x26
 8017bae:	33ff      	adds	r3, #255	; 0xff
 8017bb0:	429c      	cmp	r4, r3
 8017bb2:	dd22      	ble.n	8017bfa <_strtod_l+0x502>
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	9305      	str	r3, [sp, #20]
 8017bb8:	9306      	str	r3, [sp, #24]
 8017bba:	930d      	str	r3, [sp, #52]	; 0x34
 8017bbc:	9308      	str	r3, [sp, #32]
 8017bbe:	2322      	movs	r3, #34	; 0x22
 8017bc0:	2600      	movs	r6, #0
 8017bc2:	9a04      	ldr	r2, [sp, #16]
 8017bc4:	4f3f      	ldr	r7, [pc, #252]	; (8017cc4 <_strtod_l+0x5cc>)
 8017bc6:	6013      	str	r3, [r2, #0]
 8017bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017bca:	42b3      	cmp	r3, r6
 8017bcc:	d100      	bne.n	8017bd0 <_strtod_l+0x4d8>
 8017bce:	e5ce      	b.n	801776e <_strtod_l+0x76>
 8017bd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017bd2:	9804      	ldr	r0, [sp, #16]
 8017bd4:	f003 f870 	bl	801acb8 <_Bfree>
 8017bd8:	9908      	ldr	r1, [sp, #32]
 8017bda:	9804      	ldr	r0, [sp, #16]
 8017bdc:	f003 f86c 	bl	801acb8 <_Bfree>
 8017be0:	9906      	ldr	r1, [sp, #24]
 8017be2:	9804      	ldr	r0, [sp, #16]
 8017be4:	f003 f868 	bl	801acb8 <_Bfree>
 8017be8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017bea:	9804      	ldr	r0, [sp, #16]
 8017bec:	f003 f864 	bl	801acb8 <_Bfree>
 8017bf0:	9905      	ldr	r1, [sp, #20]
 8017bf2:	9804      	ldr	r0, [sp, #16]
 8017bf4:	f003 f860 	bl	801acb8 <_Bfree>
 8017bf8:	e5b9      	b.n	801776e <_strtod_l+0x76>
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	0030      	movs	r0, r6
 8017bfe:	0039      	movs	r1, r7
 8017c00:	4d35      	ldr	r5, [pc, #212]	; (8017cd8 <_strtod_l+0x5e0>)
 8017c02:	1124      	asrs	r4, r4, #4
 8017c04:	9307      	str	r3, [sp, #28]
 8017c06:	2c01      	cmp	r4, #1
 8017c08:	dc1e      	bgt.n	8017c48 <_strtod_l+0x550>
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d001      	beq.n	8017c12 <_strtod_l+0x51a>
 8017c0e:	0006      	movs	r6, r0
 8017c10:	000f      	movs	r7, r1
 8017c12:	4b32      	ldr	r3, [pc, #200]	; (8017cdc <_strtod_l+0x5e4>)
 8017c14:	9a07      	ldr	r2, [sp, #28]
 8017c16:	18ff      	adds	r7, r7, r3
 8017c18:	4b2f      	ldr	r3, [pc, #188]	; (8017cd8 <_strtod_l+0x5e0>)
 8017c1a:	00d2      	lsls	r2, r2, #3
 8017c1c:	189d      	adds	r5, r3, r2
 8017c1e:	6828      	ldr	r0, [r5, #0]
 8017c20:	6869      	ldr	r1, [r5, #4]
 8017c22:	0032      	movs	r2, r6
 8017c24:	003b      	movs	r3, r7
 8017c26:	f7f6 ff51 	bl	800eacc <__aeabi_dmul>
 8017c2a:	4b26      	ldr	r3, [pc, #152]	; (8017cc4 <_strtod_l+0x5cc>)
 8017c2c:	4a2c      	ldr	r2, [pc, #176]	; (8017ce0 <_strtod_l+0x5e8>)
 8017c2e:	0006      	movs	r6, r0
 8017c30:	400b      	ands	r3, r1
 8017c32:	4293      	cmp	r3, r2
 8017c34:	d8be      	bhi.n	8017bb4 <_strtod_l+0x4bc>
 8017c36:	4a2b      	ldr	r2, [pc, #172]	; (8017ce4 <_strtod_l+0x5ec>)
 8017c38:	4293      	cmp	r3, r2
 8017c3a:	d913      	bls.n	8017c64 <_strtod_l+0x56c>
 8017c3c:	2601      	movs	r6, #1
 8017c3e:	4f2a      	ldr	r7, [pc, #168]	; (8017ce8 <_strtod_l+0x5f0>)
 8017c40:	4276      	negs	r6, r6
 8017c42:	2300      	movs	r3, #0
 8017c44:	9307      	str	r3, [sp, #28]
 8017c46:	e088      	b.n	8017d5a <_strtod_l+0x662>
 8017c48:	2201      	movs	r2, #1
 8017c4a:	4214      	tst	r4, r2
 8017c4c:	d004      	beq.n	8017c58 <_strtod_l+0x560>
 8017c4e:	682a      	ldr	r2, [r5, #0]
 8017c50:	686b      	ldr	r3, [r5, #4]
 8017c52:	f7f6 ff3b 	bl	800eacc <__aeabi_dmul>
 8017c56:	2301      	movs	r3, #1
 8017c58:	9a07      	ldr	r2, [sp, #28]
 8017c5a:	1064      	asrs	r4, r4, #1
 8017c5c:	3201      	adds	r2, #1
 8017c5e:	9207      	str	r2, [sp, #28]
 8017c60:	3508      	adds	r5, #8
 8017c62:	e7d0      	b.n	8017c06 <_strtod_l+0x50e>
 8017c64:	23d4      	movs	r3, #212	; 0xd4
 8017c66:	049b      	lsls	r3, r3, #18
 8017c68:	18cf      	adds	r7, r1, r3
 8017c6a:	e7ea      	b.n	8017c42 <_strtod_l+0x54a>
 8017c6c:	2c00      	cmp	r4, #0
 8017c6e:	d0e8      	beq.n	8017c42 <_strtod_l+0x54a>
 8017c70:	4264      	negs	r4, r4
 8017c72:	230f      	movs	r3, #15
 8017c74:	0022      	movs	r2, r4
 8017c76:	401a      	ands	r2, r3
 8017c78:	421c      	tst	r4, r3
 8017c7a:	d00a      	beq.n	8017c92 <_strtod_l+0x59a>
 8017c7c:	4b15      	ldr	r3, [pc, #84]	; (8017cd4 <_strtod_l+0x5dc>)
 8017c7e:	00d2      	lsls	r2, r2, #3
 8017c80:	189b      	adds	r3, r3, r2
 8017c82:	0030      	movs	r0, r6
 8017c84:	681a      	ldr	r2, [r3, #0]
 8017c86:	685b      	ldr	r3, [r3, #4]
 8017c88:	0039      	movs	r1, r7
 8017c8a:	f7f6 fb25 	bl	800e2d8 <__aeabi_ddiv>
 8017c8e:	0006      	movs	r6, r0
 8017c90:	000f      	movs	r7, r1
 8017c92:	1124      	asrs	r4, r4, #4
 8017c94:	d0d5      	beq.n	8017c42 <_strtod_l+0x54a>
 8017c96:	2c1f      	cmp	r4, #31
 8017c98:	dd28      	ble.n	8017cec <_strtod_l+0x5f4>
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	9305      	str	r3, [sp, #20]
 8017c9e:	9306      	str	r3, [sp, #24]
 8017ca0:	930d      	str	r3, [sp, #52]	; 0x34
 8017ca2:	9308      	str	r3, [sp, #32]
 8017ca4:	2322      	movs	r3, #34	; 0x22
 8017ca6:	9a04      	ldr	r2, [sp, #16]
 8017ca8:	2600      	movs	r6, #0
 8017caa:	6013      	str	r3, [r2, #0]
 8017cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cae:	2700      	movs	r7, #0
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d18d      	bne.n	8017bd0 <_strtod_l+0x4d8>
 8017cb4:	e55b      	b.n	801776e <_strtod_l+0x76>
 8017cb6:	46c0      	nop			; (mov r8, r8)
 8017cb8:	00004e1f 	.word	0x00004e1f
 8017cbc:	0801e326 	.word	0x0801e326
 8017cc0:	0801e1d8 	.word	0x0801e1d8
 8017cc4:	7ff00000 	.word	0x7ff00000
 8017cc8:	0801e31e 	.word	0x0801e31e
 8017ccc:	0801e40a 	.word	0x0801e40a
 8017cd0:	0801e406 	.word	0x0801e406
 8017cd4:	0801e560 	.word	0x0801e560
 8017cd8:	0801e538 	.word	0x0801e538
 8017cdc:	fcb00000 	.word	0xfcb00000
 8017ce0:	7ca00000 	.word	0x7ca00000
 8017ce4:	7c900000 	.word	0x7c900000
 8017ce8:	7fefffff 	.word	0x7fefffff
 8017cec:	2310      	movs	r3, #16
 8017cee:	0022      	movs	r2, r4
 8017cf0:	401a      	ands	r2, r3
 8017cf2:	9207      	str	r2, [sp, #28]
 8017cf4:	421c      	tst	r4, r3
 8017cf6:	d001      	beq.n	8017cfc <_strtod_l+0x604>
 8017cf8:	335a      	adds	r3, #90	; 0x5a
 8017cfa:	9307      	str	r3, [sp, #28]
 8017cfc:	0030      	movs	r0, r6
 8017cfe:	0039      	movs	r1, r7
 8017d00:	2300      	movs	r3, #0
 8017d02:	4dc4      	ldr	r5, [pc, #784]	; (8018014 <_strtod_l+0x91c>)
 8017d04:	2201      	movs	r2, #1
 8017d06:	4214      	tst	r4, r2
 8017d08:	d004      	beq.n	8017d14 <_strtod_l+0x61c>
 8017d0a:	682a      	ldr	r2, [r5, #0]
 8017d0c:	686b      	ldr	r3, [r5, #4]
 8017d0e:	f7f6 fedd 	bl	800eacc <__aeabi_dmul>
 8017d12:	2301      	movs	r3, #1
 8017d14:	1064      	asrs	r4, r4, #1
 8017d16:	3508      	adds	r5, #8
 8017d18:	2c00      	cmp	r4, #0
 8017d1a:	d1f3      	bne.n	8017d04 <_strtod_l+0x60c>
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d001      	beq.n	8017d24 <_strtod_l+0x62c>
 8017d20:	0006      	movs	r6, r0
 8017d22:	000f      	movs	r7, r1
 8017d24:	9b07      	ldr	r3, [sp, #28]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d00f      	beq.n	8017d4a <_strtod_l+0x652>
 8017d2a:	236b      	movs	r3, #107	; 0x6b
 8017d2c:	007a      	lsls	r2, r7, #1
 8017d2e:	0d52      	lsrs	r2, r2, #21
 8017d30:	0039      	movs	r1, r7
 8017d32:	1a9b      	subs	r3, r3, r2
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	dd08      	ble.n	8017d4a <_strtod_l+0x652>
 8017d38:	2b1f      	cmp	r3, #31
 8017d3a:	dc00      	bgt.n	8017d3e <_strtod_l+0x646>
 8017d3c:	e121      	b.n	8017f82 <_strtod_l+0x88a>
 8017d3e:	2600      	movs	r6, #0
 8017d40:	2b34      	cmp	r3, #52	; 0x34
 8017d42:	dc00      	bgt.n	8017d46 <_strtod_l+0x64e>
 8017d44:	e116      	b.n	8017f74 <_strtod_l+0x87c>
 8017d46:	27dc      	movs	r7, #220	; 0xdc
 8017d48:	04bf      	lsls	r7, r7, #18
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	0030      	movs	r0, r6
 8017d50:	0039      	movs	r1, r7
 8017d52:	f7f4 ff77 	bl	800cc44 <__aeabi_dcmpeq>
 8017d56:	2800      	cmp	r0, #0
 8017d58:	d19f      	bne.n	8017c9a <_strtod_l+0x5a2>
 8017d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017d5c:	9a08      	ldr	r2, [sp, #32]
 8017d5e:	9300      	str	r3, [sp, #0]
 8017d60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017d62:	9b05      	ldr	r3, [sp, #20]
 8017d64:	9804      	ldr	r0, [sp, #16]
 8017d66:	f003 f80f 	bl	801ad88 <__s2b>
 8017d6a:	900d      	str	r0, [sp, #52]	; 0x34
 8017d6c:	2800      	cmp	r0, #0
 8017d6e:	d100      	bne.n	8017d72 <_strtod_l+0x67a>
 8017d70:	e720      	b.n	8017bb4 <_strtod_l+0x4bc>
 8017d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d74:	9906      	ldr	r1, [sp, #24]
 8017d76:	17da      	asrs	r2, r3, #31
 8017d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d7a:	1a5b      	subs	r3, r3, r1
 8017d7c:	401a      	ands	r2, r3
 8017d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d80:	9215      	str	r2, [sp, #84]	; 0x54
 8017d82:	43db      	mvns	r3, r3
 8017d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d86:	17db      	asrs	r3, r3, #31
 8017d88:	401a      	ands	r2, r3
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	9218      	str	r2, [sp, #96]	; 0x60
 8017d8e:	9305      	str	r3, [sp, #20]
 8017d90:	9306      	str	r3, [sp, #24]
 8017d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017d94:	9804      	ldr	r0, [sp, #16]
 8017d96:	6859      	ldr	r1, [r3, #4]
 8017d98:	f002 ff4a 	bl	801ac30 <_Balloc>
 8017d9c:	9008      	str	r0, [sp, #32]
 8017d9e:	2800      	cmp	r0, #0
 8017da0:	d100      	bne.n	8017da4 <_strtod_l+0x6ac>
 8017da2:	e70c      	b.n	8017bbe <_strtod_l+0x4c6>
 8017da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017da6:	300c      	adds	r0, #12
 8017da8:	0019      	movs	r1, r3
 8017daa:	691a      	ldr	r2, [r3, #16]
 8017dac:	310c      	adds	r1, #12
 8017dae:	3202      	adds	r2, #2
 8017db0:	0092      	lsls	r2, r2, #2
 8017db2:	f001 fcb5 	bl	8019720 <memcpy>
 8017db6:	ab1e      	add	r3, sp, #120	; 0x78
 8017db8:	9301      	str	r3, [sp, #4]
 8017dba:	ab1d      	add	r3, sp, #116	; 0x74
 8017dbc:	9300      	str	r3, [sp, #0]
 8017dbe:	0032      	movs	r2, r6
 8017dc0:	003b      	movs	r3, r7
 8017dc2:	9804      	ldr	r0, [sp, #16]
 8017dc4:	9610      	str	r6, [sp, #64]	; 0x40
 8017dc6:	9711      	str	r7, [sp, #68]	; 0x44
 8017dc8:	f003 fb20 	bl	801b40c <__d2b>
 8017dcc:	901c      	str	r0, [sp, #112]	; 0x70
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	d100      	bne.n	8017dd4 <_strtod_l+0x6dc>
 8017dd2:	e6f4      	b.n	8017bbe <_strtod_l+0x4c6>
 8017dd4:	2101      	movs	r1, #1
 8017dd6:	9804      	ldr	r0, [sp, #16]
 8017dd8:	f003 f86a 	bl	801aeb0 <__i2b>
 8017ddc:	9006      	str	r0, [sp, #24]
 8017dde:	2800      	cmp	r0, #0
 8017de0:	d100      	bne.n	8017de4 <_strtod_l+0x6ec>
 8017de2:	e6ec      	b.n	8017bbe <_strtod_l+0x4c6>
 8017de4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017de6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017de8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8017dea:	1ad4      	subs	r4, r2, r3
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	db01      	blt.n	8017df4 <_strtod_l+0x6fc>
 8017df0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017df2:	195d      	adds	r5, r3, r5
 8017df4:	9907      	ldr	r1, [sp, #28]
 8017df6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017df8:	1a5b      	subs	r3, r3, r1
 8017dfa:	2136      	movs	r1, #54	; 0x36
 8017dfc:	189b      	adds	r3, r3, r2
 8017dfe:	1a8a      	subs	r2, r1, r2
 8017e00:	4985      	ldr	r1, [pc, #532]	; (8018018 <_strtod_l+0x920>)
 8017e02:	2001      	movs	r0, #1
 8017e04:	468c      	mov	ip, r1
 8017e06:	2100      	movs	r1, #0
 8017e08:	3b01      	subs	r3, #1
 8017e0a:	9114      	str	r1, [sp, #80]	; 0x50
 8017e0c:	9012      	str	r0, [sp, #72]	; 0x48
 8017e0e:	4563      	cmp	r3, ip
 8017e10:	da07      	bge.n	8017e22 <_strtod_l+0x72a>
 8017e12:	4661      	mov	r1, ip
 8017e14:	1ac9      	subs	r1, r1, r3
 8017e16:	1a52      	subs	r2, r2, r1
 8017e18:	291f      	cmp	r1, #31
 8017e1a:	dd00      	ble.n	8017e1e <_strtod_l+0x726>
 8017e1c:	e0b6      	b.n	8017f8c <_strtod_l+0x894>
 8017e1e:	4088      	lsls	r0, r1
 8017e20:	9012      	str	r0, [sp, #72]	; 0x48
 8017e22:	18ab      	adds	r3, r5, r2
 8017e24:	930c      	str	r3, [sp, #48]	; 0x30
 8017e26:	18a4      	adds	r4, r4, r2
 8017e28:	9b07      	ldr	r3, [sp, #28]
 8017e2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017e2c:	191c      	adds	r4, r3, r4
 8017e2e:	002b      	movs	r3, r5
 8017e30:	4295      	cmp	r5, r2
 8017e32:	dd00      	ble.n	8017e36 <_strtod_l+0x73e>
 8017e34:	0013      	movs	r3, r2
 8017e36:	42a3      	cmp	r3, r4
 8017e38:	dd00      	ble.n	8017e3c <_strtod_l+0x744>
 8017e3a:	0023      	movs	r3, r4
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	dd04      	ble.n	8017e4a <_strtod_l+0x752>
 8017e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017e42:	1ae4      	subs	r4, r4, r3
 8017e44:	1ad2      	subs	r2, r2, r3
 8017e46:	920c      	str	r2, [sp, #48]	; 0x30
 8017e48:	1aed      	subs	r5, r5, r3
 8017e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	dd17      	ble.n	8017e80 <_strtod_l+0x788>
 8017e50:	001a      	movs	r2, r3
 8017e52:	9906      	ldr	r1, [sp, #24]
 8017e54:	9804      	ldr	r0, [sp, #16]
 8017e56:	f003 f8f3 	bl	801b040 <__pow5mult>
 8017e5a:	9006      	str	r0, [sp, #24]
 8017e5c:	2800      	cmp	r0, #0
 8017e5e:	d100      	bne.n	8017e62 <_strtod_l+0x76a>
 8017e60:	e6ad      	b.n	8017bbe <_strtod_l+0x4c6>
 8017e62:	0001      	movs	r1, r0
 8017e64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017e66:	9804      	ldr	r0, [sp, #16]
 8017e68:	f003 f83a 	bl	801aee0 <__multiply>
 8017e6c:	900e      	str	r0, [sp, #56]	; 0x38
 8017e6e:	2800      	cmp	r0, #0
 8017e70:	d100      	bne.n	8017e74 <_strtod_l+0x77c>
 8017e72:	e6a4      	b.n	8017bbe <_strtod_l+0x4c6>
 8017e74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017e76:	9804      	ldr	r0, [sp, #16]
 8017e78:	f002 ff1e 	bl	801acb8 <_Bfree>
 8017e7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e7e:	931c      	str	r3, [sp, #112]	; 0x70
 8017e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	dd00      	ble.n	8017e88 <_strtod_l+0x790>
 8017e86:	e087      	b.n	8017f98 <_strtod_l+0x8a0>
 8017e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	dd08      	ble.n	8017ea0 <_strtod_l+0x7a8>
 8017e8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017e90:	9908      	ldr	r1, [sp, #32]
 8017e92:	9804      	ldr	r0, [sp, #16]
 8017e94:	f003 f8d4 	bl	801b040 <__pow5mult>
 8017e98:	9008      	str	r0, [sp, #32]
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	d100      	bne.n	8017ea0 <_strtod_l+0x7a8>
 8017e9e:	e68e      	b.n	8017bbe <_strtod_l+0x4c6>
 8017ea0:	2c00      	cmp	r4, #0
 8017ea2:	dd08      	ble.n	8017eb6 <_strtod_l+0x7be>
 8017ea4:	0022      	movs	r2, r4
 8017ea6:	9908      	ldr	r1, [sp, #32]
 8017ea8:	9804      	ldr	r0, [sp, #16]
 8017eaa:	f003 f925 	bl	801b0f8 <__lshift>
 8017eae:	9008      	str	r0, [sp, #32]
 8017eb0:	2800      	cmp	r0, #0
 8017eb2:	d100      	bne.n	8017eb6 <_strtod_l+0x7be>
 8017eb4:	e683      	b.n	8017bbe <_strtod_l+0x4c6>
 8017eb6:	2d00      	cmp	r5, #0
 8017eb8:	dd08      	ble.n	8017ecc <_strtod_l+0x7d4>
 8017eba:	002a      	movs	r2, r5
 8017ebc:	9906      	ldr	r1, [sp, #24]
 8017ebe:	9804      	ldr	r0, [sp, #16]
 8017ec0:	f003 f91a 	bl	801b0f8 <__lshift>
 8017ec4:	9006      	str	r0, [sp, #24]
 8017ec6:	2800      	cmp	r0, #0
 8017ec8:	d100      	bne.n	8017ecc <_strtod_l+0x7d4>
 8017eca:	e678      	b.n	8017bbe <_strtod_l+0x4c6>
 8017ecc:	9a08      	ldr	r2, [sp, #32]
 8017ece:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017ed0:	9804      	ldr	r0, [sp, #16]
 8017ed2:	f003 f99b 	bl	801b20c <__mdiff>
 8017ed6:	9005      	str	r0, [sp, #20]
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	d100      	bne.n	8017ede <_strtod_l+0x7e6>
 8017edc:	e66f      	b.n	8017bbe <_strtod_l+0x4c6>
 8017ede:	2200      	movs	r2, #0
 8017ee0:	68c3      	ldr	r3, [r0, #12]
 8017ee2:	9906      	ldr	r1, [sp, #24]
 8017ee4:	60c2      	str	r2, [r0, #12]
 8017ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8017ee8:	f003 f974 	bl	801b1d4 <__mcmp>
 8017eec:	2800      	cmp	r0, #0
 8017eee:	da5d      	bge.n	8017fac <_strtod_l+0x8b4>
 8017ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ef2:	4333      	orrs	r3, r6
 8017ef4:	d000      	beq.n	8017ef8 <_strtod_l+0x800>
 8017ef6:	e088      	b.n	801800a <_strtod_l+0x912>
 8017ef8:	033b      	lsls	r3, r7, #12
 8017efa:	d000      	beq.n	8017efe <_strtod_l+0x806>
 8017efc:	e085      	b.n	801800a <_strtod_l+0x912>
 8017efe:	22d6      	movs	r2, #214	; 0xd6
 8017f00:	4b46      	ldr	r3, [pc, #280]	; (801801c <_strtod_l+0x924>)
 8017f02:	04d2      	lsls	r2, r2, #19
 8017f04:	403b      	ands	r3, r7
 8017f06:	4293      	cmp	r3, r2
 8017f08:	d97f      	bls.n	801800a <_strtod_l+0x912>
 8017f0a:	9b05      	ldr	r3, [sp, #20]
 8017f0c:	695b      	ldr	r3, [r3, #20]
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d103      	bne.n	8017f1a <_strtod_l+0x822>
 8017f12:	9b05      	ldr	r3, [sp, #20]
 8017f14:	691b      	ldr	r3, [r3, #16]
 8017f16:	2b01      	cmp	r3, #1
 8017f18:	dd77      	ble.n	801800a <_strtod_l+0x912>
 8017f1a:	9905      	ldr	r1, [sp, #20]
 8017f1c:	2201      	movs	r2, #1
 8017f1e:	9804      	ldr	r0, [sp, #16]
 8017f20:	f003 f8ea 	bl	801b0f8 <__lshift>
 8017f24:	9906      	ldr	r1, [sp, #24]
 8017f26:	9005      	str	r0, [sp, #20]
 8017f28:	f003 f954 	bl	801b1d4 <__mcmp>
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	dd6c      	ble.n	801800a <_strtod_l+0x912>
 8017f30:	9907      	ldr	r1, [sp, #28]
 8017f32:	003b      	movs	r3, r7
 8017f34:	4a39      	ldr	r2, [pc, #228]	; (801801c <_strtod_l+0x924>)
 8017f36:	2900      	cmp	r1, #0
 8017f38:	d100      	bne.n	8017f3c <_strtod_l+0x844>
 8017f3a:	e094      	b.n	8018066 <_strtod_l+0x96e>
 8017f3c:	0011      	movs	r1, r2
 8017f3e:	20d6      	movs	r0, #214	; 0xd6
 8017f40:	4039      	ands	r1, r7
 8017f42:	04c0      	lsls	r0, r0, #19
 8017f44:	4281      	cmp	r1, r0
 8017f46:	dd00      	ble.n	8017f4a <_strtod_l+0x852>
 8017f48:	e08d      	b.n	8018066 <_strtod_l+0x96e>
 8017f4a:	23dc      	movs	r3, #220	; 0xdc
 8017f4c:	049b      	lsls	r3, r3, #18
 8017f4e:	4299      	cmp	r1, r3
 8017f50:	dc00      	bgt.n	8017f54 <_strtod_l+0x85c>
 8017f52:	e6a7      	b.n	8017ca4 <_strtod_l+0x5ac>
 8017f54:	0030      	movs	r0, r6
 8017f56:	0039      	movs	r1, r7
 8017f58:	4b31      	ldr	r3, [pc, #196]	; (8018020 <_strtod_l+0x928>)
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	f7f6 fdb6 	bl	800eacc <__aeabi_dmul>
 8017f60:	4b2e      	ldr	r3, [pc, #184]	; (801801c <_strtod_l+0x924>)
 8017f62:	0006      	movs	r6, r0
 8017f64:	000f      	movs	r7, r1
 8017f66:	420b      	tst	r3, r1
 8017f68:	d000      	beq.n	8017f6c <_strtod_l+0x874>
 8017f6a:	e631      	b.n	8017bd0 <_strtod_l+0x4d8>
 8017f6c:	2322      	movs	r3, #34	; 0x22
 8017f6e:	9a04      	ldr	r2, [sp, #16]
 8017f70:	6013      	str	r3, [r2, #0]
 8017f72:	e62d      	b.n	8017bd0 <_strtod_l+0x4d8>
 8017f74:	234b      	movs	r3, #75	; 0x4b
 8017f76:	1a9a      	subs	r2, r3, r2
 8017f78:	3b4c      	subs	r3, #76	; 0x4c
 8017f7a:	4093      	lsls	r3, r2
 8017f7c:	4019      	ands	r1, r3
 8017f7e:	000f      	movs	r7, r1
 8017f80:	e6e3      	b.n	8017d4a <_strtod_l+0x652>
 8017f82:	2201      	movs	r2, #1
 8017f84:	4252      	negs	r2, r2
 8017f86:	409a      	lsls	r2, r3
 8017f88:	4016      	ands	r6, r2
 8017f8a:	e6de      	b.n	8017d4a <_strtod_l+0x652>
 8017f8c:	4925      	ldr	r1, [pc, #148]	; (8018024 <_strtod_l+0x92c>)
 8017f8e:	1acb      	subs	r3, r1, r3
 8017f90:	0001      	movs	r1, r0
 8017f92:	4099      	lsls	r1, r3
 8017f94:	9114      	str	r1, [sp, #80]	; 0x50
 8017f96:	e743      	b.n	8017e20 <_strtod_l+0x728>
 8017f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017f9c:	9804      	ldr	r0, [sp, #16]
 8017f9e:	f003 f8ab 	bl	801b0f8 <__lshift>
 8017fa2:	901c      	str	r0, [sp, #112]	; 0x70
 8017fa4:	2800      	cmp	r0, #0
 8017fa6:	d000      	beq.n	8017faa <_strtod_l+0x8b2>
 8017fa8:	e76e      	b.n	8017e88 <_strtod_l+0x790>
 8017faa:	e608      	b.n	8017bbe <_strtod_l+0x4c6>
 8017fac:	970e      	str	r7, [sp, #56]	; 0x38
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d177      	bne.n	80180a2 <_strtod_l+0x9aa>
 8017fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017fb4:	033b      	lsls	r3, r7, #12
 8017fb6:	0b1b      	lsrs	r3, r3, #12
 8017fb8:	2a00      	cmp	r2, #0
 8017fba:	d039      	beq.n	8018030 <_strtod_l+0x938>
 8017fbc:	4a1a      	ldr	r2, [pc, #104]	; (8018028 <_strtod_l+0x930>)
 8017fbe:	4293      	cmp	r3, r2
 8017fc0:	d139      	bne.n	8018036 <_strtod_l+0x93e>
 8017fc2:	2101      	movs	r1, #1
 8017fc4:	9b07      	ldr	r3, [sp, #28]
 8017fc6:	4249      	negs	r1, r1
 8017fc8:	0032      	movs	r2, r6
 8017fca:	0008      	movs	r0, r1
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d00b      	beq.n	8017fe8 <_strtod_l+0x8f0>
 8017fd0:	24d4      	movs	r4, #212	; 0xd4
 8017fd2:	4b12      	ldr	r3, [pc, #72]	; (801801c <_strtod_l+0x924>)
 8017fd4:	0008      	movs	r0, r1
 8017fd6:	403b      	ands	r3, r7
 8017fd8:	04e4      	lsls	r4, r4, #19
 8017fda:	42a3      	cmp	r3, r4
 8017fdc:	d804      	bhi.n	8017fe8 <_strtod_l+0x8f0>
 8017fde:	306c      	adds	r0, #108	; 0x6c
 8017fe0:	0d1b      	lsrs	r3, r3, #20
 8017fe2:	1ac3      	subs	r3, r0, r3
 8017fe4:	4099      	lsls	r1, r3
 8017fe6:	0008      	movs	r0, r1
 8017fe8:	4282      	cmp	r2, r0
 8017fea:	d124      	bne.n	8018036 <_strtod_l+0x93e>
 8017fec:	4b0f      	ldr	r3, [pc, #60]	; (801802c <_strtod_l+0x934>)
 8017fee:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017ff0:	4299      	cmp	r1, r3
 8017ff2:	d102      	bne.n	8017ffa <_strtod_l+0x902>
 8017ff4:	3201      	adds	r2, #1
 8017ff6:	d100      	bne.n	8017ffa <_strtod_l+0x902>
 8017ff8:	e5e1      	b.n	8017bbe <_strtod_l+0x4c6>
 8017ffa:	4b08      	ldr	r3, [pc, #32]	; (801801c <_strtod_l+0x924>)
 8017ffc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017ffe:	2600      	movs	r6, #0
 8018000:	401a      	ands	r2, r3
 8018002:	0013      	movs	r3, r2
 8018004:	2280      	movs	r2, #128	; 0x80
 8018006:	0352      	lsls	r2, r2, #13
 8018008:	189f      	adds	r7, r3, r2
 801800a:	9b07      	ldr	r3, [sp, #28]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d1a1      	bne.n	8017f54 <_strtod_l+0x85c>
 8018010:	e5de      	b.n	8017bd0 <_strtod_l+0x4d8>
 8018012:	46c0      	nop			; (mov r8, r8)
 8018014:	0801e1f0 	.word	0x0801e1f0
 8018018:	fffffc02 	.word	0xfffffc02
 801801c:	7ff00000 	.word	0x7ff00000
 8018020:	39500000 	.word	0x39500000
 8018024:	fffffbe2 	.word	0xfffffbe2
 8018028:	000fffff 	.word	0x000fffff
 801802c:	7fefffff 	.word	0x7fefffff
 8018030:	4333      	orrs	r3, r6
 8018032:	d100      	bne.n	8018036 <_strtod_l+0x93e>
 8018034:	e77c      	b.n	8017f30 <_strtod_l+0x838>
 8018036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018038:	2b00      	cmp	r3, #0
 801803a:	d01d      	beq.n	8018078 <_strtod_l+0x980>
 801803c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801803e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018040:	4213      	tst	r3, r2
 8018042:	d0e2      	beq.n	801800a <_strtod_l+0x912>
 8018044:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018046:	0030      	movs	r0, r6
 8018048:	0039      	movs	r1, r7
 801804a:	9a07      	ldr	r2, [sp, #28]
 801804c:	2b00      	cmp	r3, #0
 801804e:	d017      	beq.n	8018080 <_strtod_l+0x988>
 8018050:	f7ff fb3a 	bl	80176c8 <sulp>
 8018054:	0002      	movs	r2, r0
 8018056:	000b      	movs	r3, r1
 8018058:	9810      	ldr	r0, [sp, #64]	; 0x40
 801805a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801805c:	f7f5 fddc 	bl	800dc18 <__aeabi_dadd>
 8018060:	0006      	movs	r6, r0
 8018062:	000f      	movs	r7, r1
 8018064:	e7d1      	b.n	801800a <_strtod_l+0x912>
 8018066:	2601      	movs	r6, #1
 8018068:	4013      	ands	r3, r2
 801806a:	4a98      	ldr	r2, [pc, #608]	; (80182cc <_strtod_l+0xbd4>)
 801806c:	4276      	negs	r6, r6
 801806e:	189b      	adds	r3, r3, r2
 8018070:	4a97      	ldr	r2, [pc, #604]	; (80182d0 <_strtod_l+0xbd8>)
 8018072:	431a      	orrs	r2, r3
 8018074:	0017      	movs	r7, r2
 8018076:	e7c8      	b.n	801800a <_strtod_l+0x912>
 8018078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801807a:	4233      	tst	r3, r6
 801807c:	d0c5      	beq.n	801800a <_strtod_l+0x912>
 801807e:	e7e1      	b.n	8018044 <_strtod_l+0x94c>
 8018080:	f7ff fb22 	bl	80176c8 <sulp>
 8018084:	0002      	movs	r2, r0
 8018086:	000b      	movs	r3, r1
 8018088:	9810      	ldr	r0, [sp, #64]	; 0x40
 801808a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801808c:	f7f6 ffe0 	bl	800f050 <__aeabi_dsub>
 8018090:	2200      	movs	r2, #0
 8018092:	2300      	movs	r3, #0
 8018094:	0006      	movs	r6, r0
 8018096:	000f      	movs	r7, r1
 8018098:	f7f4 fdd4 	bl	800cc44 <__aeabi_dcmpeq>
 801809c:	2800      	cmp	r0, #0
 801809e:	d0b4      	beq.n	801800a <_strtod_l+0x912>
 80180a0:	e600      	b.n	8017ca4 <_strtod_l+0x5ac>
 80180a2:	9906      	ldr	r1, [sp, #24]
 80180a4:	9805      	ldr	r0, [sp, #20]
 80180a6:	f003 fa11 	bl	801b4cc <__ratio>
 80180aa:	2380      	movs	r3, #128	; 0x80
 80180ac:	2200      	movs	r2, #0
 80180ae:	05db      	lsls	r3, r3, #23
 80180b0:	0004      	movs	r4, r0
 80180b2:	000d      	movs	r5, r1
 80180b4:	f7f4 fdd6 	bl	800cc64 <__aeabi_dcmple>
 80180b8:	2800      	cmp	r0, #0
 80180ba:	d06d      	beq.n	8018198 <_strtod_l+0xaa0>
 80180bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d000      	beq.n	80180c4 <_strtod_l+0x9cc>
 80180c2:	e07e      	b.n	80181c2 <_strtod_l+0xaca>
 80180c4:	2e00      	cmp	r6, #0
 80180c6:	d158      	bne.n	801817a <_strtod_l+0xa82>
 80180c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180ca:	031b      	lsls	r3, r3, #12
 80180cc:	d000      	beq.n	80180d0 <_strtod_l+0x9d8>
 80180ce:	e07f      	b.n	80181d0 <_strtod_l+0xad8>
 80180d0:	2200      	movs	r2, #0
 80180d2:	0020      	movs	r0, r4
 80180d4:	0029      	movs	r1, r5
 80180d6:	4b7f      	ldr	r3, [pc, #508]	; (80182d4 <_strtod_l+0xbdc>)
 80180d8:	f7f4 fdba 	bl	800cc50 <__aeabi_dcmplt>
 80180dc:	2800      	cmp	r0, #0
 80180de:	d158      	bne.n	8018192 <_strtod_l+0xa9a>
 80180e0:	0020      	movs	r0, r4
 80180e2:	0029      	movs	r1, r5
 80180e4:	2200      	movs	r2, #0
 80180e6:	4b7c      	ldr	r3, [pc, #496]	; (80182d8 <_strtod_l+0xbe0>)
 80180e8:	f7f6 fcf0 	bl	800eacc <__aeabi_dmul>
 80180ec:	0004      	movs	r4, r0
 80180ee:	000d      	movs	r5, r1
 80180f0:	2380      	movs	r3, #128	; 0x80
 80180f2:	061b      	lsls	r3, r3, #24
 80180f4:	940a      	str	r4, [sp, #40]	; 0x28
 80180f6:	18eb      	adds	r3, r5, r3
 80180f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80180fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80180fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180fe:	9212      	str	r2, [sp, #72]	; 0x48
 8018100:	9313      	str	r3, [sp, #76]	; 0x4c
 8018102:	4a76      	ldr	r2, [pc, #472]	; (80182dc <_strtod_l+0xbe4>)
 8018104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018106:	4013      	ands	r3, r2
 8018108:	9314      	str	r3, [sp, #80]	; 0x50
 801810a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801810c:	4b74      	ldr	r3, [pc, #464]	; (80182e0 <_strtod_l+0xbe8>)
 801810e:	429a      	cmp	r2, r3
 8018110:	d000      	beq.n	8018114 <_strtod_l+0xa1c>
 8018112:	e091      	b.n	8018238 <_strtod_l+0xb40>
 8018114:	4a73      	ldr	r2, [pc, #460]	; (80182e4 <_strtod_l+0xbec>)
 8018116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018118:	4694      	mov	ip, r2
 801811a:	4463      	add	r3, ip
 801811c:	001f      	movs	r7, r3
 801811e:	0030      	movs	r0, r6
 8018120:	0019      	movs	r1, r3
 8018122:	f003 f90b 	bl	801b33c <__ulp>
 8018126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801812a:	f7f6 fccf 	bl	800eacc <__aeabi_dmul>
 801812e:	0032      	movs	r2, r6
 8018130:	003b      	movs	r3, r7
 8018132:	f7f5 fd71 	bl	800dc18 <__aeabi_dadd>
 8018136:	4a69      	ldr	r2, [pc, #420]	; (80182dc <_strtod_l+0xbe4>)
 8018138:	4b6b      	ldr	r3, [pc, #428]	; (80182e8 <_strtod_l+0xbf0>)
 801813a:	0006      	movs	r6, r0
 801813c:	400a      	ands	r2, r1
 801813e:	429a      	cmp	r2, r3
 8018140:	d949      	bls.n	80181d6 <_strtod_l+0xade>
 8018142:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018144:	4b69      	ldr	r3, [pc, #420]	; (80182ec <_strtod_l+0xbf4>)
 8018146:	429a      	cmp	r2, r3
 8018148:	d103      	bne.n	8018152 <_strtod_l+0xa5a>
 801814a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801814c:	3301      	adds	r3, #1
 801814e:	d100      	bne.n	8018152 <_strtod_l+0xa5a>
 8018150:	e535      	b.n	8017bbe <_strtod_l+0x4c6>
 8018152:	2601      	movs	r6, #1
 8018154:	4f65      	ldr	r7, [pc, #404]	; (80182ec <_strtod_l+0xbf4>)
 8018156:	4276      	negs	r6, r6
 8018158:	991c      	ldr	r1, [sp, #112]	; 0x70
 801815a:	9804      	ldr	r0, [sp, #16]
 801815c:	f002 fdac 	bl	801acb8 <_Bfree>
 8018160:	9908      	ldr	r1, [sp, #32]
 8018162:	9804      	ldr	r0, [sp, #16]
 8018164:	f002 fda8 	bl	801acb8 <_Bfree>
 8018168:	9906      	ldr	r1, [sp, #24]
 801816a:	9804      	ldr	r0, [sp, #16]
 801816c:	f002 fda4 	bl	801acb8 <_Bfree>
 8018170:	9905      	ldr	r1, [sp, #20]
 8018172:	9804      	ldr	r0, [sp, #16]
 8018174:	f002 fda0 	bl	801acb8 <_Bfree>
 8018178:	e60b      	b.n	8017d92 <_strtod_l+0x69a>
 801817a:	2e01      	cmp	r6, #1
 801817c:	d103      	bne.n	8018186 <_strtod_l+0xa8e>
 801817e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018180:	2b00      	cmp	r3, #0
 8018182:	d100      	bne.n	8018186 <_strtod_l+0xa8e>
 8018184:	e58e      	b.n	8017ca4 <_strtod_l+0x5ac>
 8018186:	2300      	movs	r3, #0
 8018188:	4c59      	ldr	r4, [pc, #356]	; (80182f0 <_strtod_l+0xbf8>)
 801818a:	930a      	str	r3, [sp, #40]	; 0x28
 801818c:	940b      	str	r4, [sp, #44]	; 0x2c
 801818e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018190:	e01c      	b.n	80181cc <_strtod_l+0xad4>
 8018192:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018194:	4d50      	ldr	r5, [pc, #320]	; (80182d8 <_strtod_l+0xbe0>)
 8018196:	e7ab      	b.n	80180f0 <_strtod_l+0x9f8>
 8018198:	2200      	movs	r2, #0
 801819a:	0020      	movs	r0, r4
 801819c:	0029      	movs	r1, r5
 801819e:	4b4e      	ldr	r3, [pc, #312]	; (80182d8 <_strtod_l+0xbe0>)
 80181a0:	f7f6 fc94 	bl	800eacc <__aeabi_dmul>
 80181a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181a6:	0004      	movs	r4, r0
 80181a8:	000b      	movs	r3, r1
 80181aa:	000d      	movs	r5, r1
 80181ac:	2a00      	cmp	r2, #0
 80181ae:	d104      	bne.n	80181ba <_strtod_l+0xac2>
 80181b0:	2280      	movs	r2, #128	; 0x80
 80181b2:	0612      	lsls	r2, r2, #24
 80181b4:	900a      	str	r0, [sp, #40]	; 0x28
 80181b6:	188b      	adds	r3, r1, r2
 80181b8:	e79e      	b.n	80180f8 <_strtod_l+0xa00>
 80181ba:	0002      	movs	r2, r0
 80181bc:	920a      	str	r2, [sp, #40]	; 0x28
 80181be:	930b      	str	r3, [sp, #44]	; 0x2c
 80181c0:	e79b      	b.n	80180fa <_strtod_l+0xa02>
 80181c2:	2300      	movs	r3, #0
 80181c4:	4c43      	ldr	r4, [pc, #268]	; (80182d4 <_strtod_l+0xbdc>)
 80181c6:	930a      	str	r3, [sp, #40]	; 0x28
 80181c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80181ca:	2400      	movs	r4, #0
 80181cc:	4d41      	ldr	r5, [pc, #260]	; (80182d4 <_strtod_l+0xbdc>)
 80181ce:	e794      	b.n	80180fa <_strtod_l+0xa02>
 80181d0:	2300      	movs	r3, #0
 80181d2:	4c47      	ldr	r4, [pc, #284]	; (80182f0 <_strtod_l+0xbf8>)
 80181d4:	e7f7      	b.n	80181c6 <_strtod_l+0xace>
 80181d6:	23d4      	movs	r3, #212	; 0xd4
 80181d8:	049b      	lsls	r3, r3, #18
 80181da:	18cf      	adds	r7, r1, r3
 80181dc:	9b07      	ldr	r3, [sp, #28]
 80181de:	970e      	str	r7, [sp, #56]	; 0x38
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d1b9      	bne.n	8018158 <_strtod_l+0xa60>
 80181e4:	4b3d      	ldr	r3, [pc, #244]	; (80182dc <_strtod_l+0xbe4>)
 80181e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80181e8:	403b      	ands	r3, r7
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d1b4      	bne.n	8018158 <_strtod_l+0xa60>
 80181ee:	0020      	movs	r0, r4
 80181f0:	0029      	movs	r1, r5
 80181f2:	f7f4 fdad 	bl	800cd50 <__aeabi_d2lz>
 80181f6:	f7f4 fde7 	bl	800cdc8 <__aeabi_l2d>
 80181fa:	0002      	movs	r2, r0
 80181fc:	000b      	movs	r3, r1
 80181fe:	0020      	movs	r0, r4
 8018200:	0029      	movs	r1, r5
 8018202:	f7f6 ff25 	bl	800f050 <__aeabi_dsub>
 8018206:	033b      	lsls	r3, r7, #12
 8018208:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801820a:	0b1b      	lsrs	r3, r3, #12
 801820c:	4333      	orrs	r3, r6
 801820e:	4313      	orrs	r3, r2
 8018210:	0004      	movs	r4, r0
 8018212:	000d      	movs	r5, r1
 8018214:	4a37      	ldr	r2, [pc, #220]	; (80182f4 <_strtod_l+0xbfc>)
 8018216:	2b00      	cmp	r3, #0
 8018218:	d054      	beq.n	80182c4 <_strtod_l+0xbcc>
 801821a:	4b37      	ldr	r3, [pc, #220]	; (80182f8 <_strtod_l+0xc00>)
 801821c:	f7f4 fd18 	bl	800cc50 <__aeabi_dcmplt>
 8018220:	2800      	cmp	r0, #0
 8018222:	d000      	beq.n	8018226 <_strtod_l+0xb2e>
 8018224:	e4d4      	b.n	8017bd0 <_strtod_l+0x4d8>
 8018226:	0020      	movs	r0, r4
 8018228:	0029      	movs	r1, r5
 801822a:	4a34      	ldr	r2, [pc, #208]	; (80182fc <_strtod_l+0xc04>)
 801822c:	4b2a      	ldr	r3, [pc, #168]	; (80182d8 <_strtod_l+0xbe0>)
 801822e:	f7f4 fd23 	bl	800cc78 <__aeabi_dcmpgt>
 8018232:	2800      	cmp	r0, #0
 8018234:	d090      	beq.n	8018158 <_strtod_l+0xa60>
 8018236:	e4cb      	b.n	8017bd0 <_strtod_l+0x4d8>
 8018238:	9b07      	ldr	r3, [sp, #28]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d02b      	beq.n	8018296 <_strtod_l+0xb9e>
 801823e:	23d4      	movs	r3, #212	; 0xd4
 8018240:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018242:	04db      	lsls	r3, r3, #19
 8018244:	429a      	cmp	r2, r3
 8018246:	d826      	bhi.n	8018296 <_strtod_l+0xb9e>
 8018248:	0020      	movs	r0, r4
 801824a:	0029      	movs	r1, r5
 801824c:	4a2c      	ldr	r2, [pc, #176]	; (8018300 <_strtod_l+0xc08>)
 801824e:	4b2d      	ldr	r3, [pc, #180]	; (8018304 <_strtod_l+0xc0c>)
 8018250:	f7f4 fd08 	bl	800cc64 <__aeabi_dcmple>
 8018254:	2800      	cmp	r0, #0
 8018256:	d017      	beq.n	8018288 <_strtod_l+0xb90>
 8018258:	0020      	movs	r0, r4
 801825a:	0029      	movs	r1, r5
 801825c:	f7f4 fd5a 	bl	800cd14 <__aeabi_d2uiz>
 8018260:	2800      	cmp	r0, #0
 8018262:	d100      	bne.n	8018266 <_strtod_l+0xb6e>
 8018264:	3001      	adds	r0, #1
 8018266:	f7f7 faf9 	bl	800f85c <__aeabi_ui2d>
 801826a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801826c:	0004      	movs	r4, r0
 801826e:	000b      	movs	r3, r1
 8018270:	000d      	movs	r5, r1
 8018272:	2a00      	cmp	r2, #0
 8018274:	d122      	bne.n	80182bc <_strtod_l+0xbc4>
 8018276:	2280      	movs	r2, #128	; 0x80
 8018278:	0612      	lsls	r2, r2, #24
 801827a:	188b      	adds	r3, r1, r2
 801827c:	9016      	str	r0, [sp, #88]	; 0x58
 801827e:	9317      	str	r3, [sp, #92]	; 0x5c
 8018280:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018284:	9212      	str	r2, [sp, #72]	; 0x48
 8018286:	9313      	str	r3, [sp, #76]	; 0x4c
 8018288:	22d6      	movs	r2, #214	; 0xd6
 801828a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801828c:	04d2      	lsls	r2, r2, #19
 801828e:	189b      	adds	r3, r3, r2
 8018290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018292:	1a9b      	subs	r3, r3, r2
 8018294:	9313      	str	r3, [sp, #76]	; 0x4c
 8018296:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018298:	9911      	ldr	r1, [sp, #68]	; 0x44
 801829a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801829c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801829e:	f003 f84d 	bl	801b33c <__ulp>
 80182a2:	0002      	movs	r2, r0
 80182a4:	000b      	movs	r3, r1
 80182a6:	0030      	movs	r0, r6
 80182a8:	0039      	movs	r1, r7
 80182aa:	f7f6 fc0f 	bl	800eacc <__aeabi_dmul>
 80182ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80182b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80182b2:	f7f5 fcb1 	bl	800dc18 <__aeabi_dadd>
 80182b6:	0006      	movs	r6, r0
 80182b8:	000f      	movs	r7, r1
 80182ba:	e78f      	b.n	80181dc <_strtod_l+0xae4>
 80182bc:	0002      	movs	r2, r0
 80182be:	9216      	str	r2, [sp, #88]	; 0x58
 80182c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80182c2:	e7dd      	b.n	8018280 <_strtod_l+0xb88>
 80182c4:	4b10      	ldr	r3, [pc, #64]	; (8018308 <_strtod_l+0xc10>)
 80182c6:	f7f4 fcc3 	bl	800cc50 <__aeabi_dcmplt>
 80182ca:	e7b2      	b.n	8018232 <_strtod_l+0xb3a>
 80182cc:	fff00000 	.word	0xfff00000
 80182d0:	000fffff 	.word	0x000fffff
 80182d4:	3ff00000 	.word	0x3ff00000
 80182d8:	3fe00000 	.word	0x3fe00000
 80182dc:	7ff00000 	.word	0x7ff00000
 80182e0:	7fe00000 	.word	0x7fe00000
 80182e4:	fcb00000 	.word	0xfcb00000
 80182e8:	7c9fffff 	.word	0x7c9fffff
 80182ec:	7fefffff 	.word	0x7fefffff
 80182f0:	bff00000 	.word	0xbff00000
 80182f4:	94a03595 	.word	0x94a03595
 80182f8:	3fdfffff 	.word	0x3fdfffff
 80182fc:	35afe535 	.word	0x35afe535
 8018300:	ffc00000 	.word	0xffc00000
 8018304:	41dfffff 	.word	0x41dfffff
 8018308:	3fcfffff 	.word	0x3fcfffff

0801830c <_strtod_r>:
 801830c:	b510      	push	{r4, lr}
 801830e:	4b02      	ldr	r3, [pc, #8]	; (8018318 <_strtod_r+0xc>)
 8018310:	f7ff f9f2 	bl	80176f8 <_strtod_l>
 8018314:	bd10      	pop	{r4, pc}
 8018316:	46c0      	nop			; (mov r8, r8)
 8018318:	200000fc 	.word	0x200000fc

0801831c <strtod>:
 801831c:	b510      	push	{r4, lr}
 801831e:	4c04      	ldr	r4, [pc, #16]	; (8018330 <strtod+0x14>)
 8018320:	000a      	movs	r2, r1
 8018322:	0001      	movs	r1, r0
 8018324:	4b03      	ldr	r3, [pc, #12]	; (8018334 <strtod+0x18>)
 8018326:	6820      	ldr	r0, [r4, #0]
 8018328:	f7ff f9e6 	bl	80176f8 <_strtod_l>
 801832c:	bd10      	pop	{r4, pc}
 801832e:	46c0      	nop			; (mov r8, r8)
 8018330:	200002b4 	.word	0x200002b4
 8018334:	200000fc 	.word	0x200000fc

08018338 <_strtol_l.constprop.0>:
 8018338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801833a:	b087      	sub	sp, #28
 801833c:	001e      	movs	r6, r3
 801833e:	9005      	str	r0, [sp, #20]
 8018340:	9101      	str	r1, [sp, #4]
 8018342:	9202      	str	r2, [sp, #8]
 8018344:	2b01      	cmp	r3, #1
 8018346:	d048      	beq.n	80183da <_strtol_l.constprop.0+0xa2>
 8018348:	000b      	movs	r3, r1
 801834a:	2e24      	cmp	r6, #36	; 0x24
 801834c:	d845      	bhi.n	80183da <_strtol_l.constprop.0+0xa2>
 801834e:	4a3b      	ldr	r2, [pc, #236]	; (801843c <_strtol_l.constprop.0+0x104>)
 8018350:	2108      	movs	r1, #8
 8018352:	4694      	mov	ip, r2
 8018354:	001a      	movs	r2, r3
 8018356:	4660      	mov	r0, ip
 8018358:	7814      	ldrb	r4, [r2, #0]
 801835a:	3301      	adds	r3, #1
 801835c:	5d00      	ldrb	r0, [r0, r4]
 801835e:	001d      	movs	r5, r3
 8018360:	0007      	movs	r7, r0
 8018362:	400f      	ands	r7, r1
 8018364:	4208      	tst	r0, r1
 8018366:	d1f5      	bne.n	8018354 <_strtol_l.constprop.0+0x1c>
 8018368:	2c2d      	cmp	r4, #45	; 0x2d
 801836a:	d13d      	bne.n	80183e8 <_strtol_l.constprop.0+0xb0>
 801836c:	2701      	movs	r7, #1
 801836e:	781c      	ldrb	r4, [r3, #0]
 8018370:	1c95      	adds	r5, r2, #2
 8018372:	2e00      	cmp	r6, #0
 8018374:	d05e      	beq.n	8018434 <_strtol_l.constprop.0+0xfc>
 8018376:	2e10      	cmp	r6, #16
 8018378:	d109      	bne.n	801838e <_strtol_l.constprop.0+0x56>
 801837a:	2c30      	cmp	r4, #48	; 0x30
 801837c:	d107      	bne.n	801838e <_strtol_l.constprop.0+0x56>
 801837e:	2220      	movs	r2, #32
 8018380:	782b      	ldrb	r3, [r5, #0]
 8018382:	4393      	bics	r3, r2
 8018384:	2b58      	cmp	r3, #88	; 0x58
 8018386:	d150      	bne.n	801842a <_strtol_l.constprop.0+0xf2>
 8018388:	2610      	movs	r6, #16
 801838a:	786c      	ldrb	r4, [r5, #1]
 801838c:	3502      	adds	r5, #2
 801838e:	4b2c      	ldr	r3, [pc, #176]	; (8018440 <_strtol_l.constprop.0+0x108>)
 8018390:	0031      	movs	r1, r6
 8018392:	18fb      	adds	r3, r7, r3
 8018394:	0018      	movs	r0, r3
 8018396:	9303      	str	r3, [sp, #12]
 8018398:	f7f4 fb54 	bl	800ca44 <__aeabi_uidivmod>
 801839c:	2200      	movs	r2, #0
 801839e:	9104      	str	r1, [sp, #16]
 80183a0:	2101      	movs	r1, #1
 80183a2:	4684      	mov	ip, r0
 80183a4:	0010      	movs	r0, r2
 80183a6:	4249      	negs	r1, r1
 80183a8:	0023      	movs	r3, r4
 80183aa:	3b30      	subs	r3, #48	; 0x30
 80183ac:	2b09      	cmp	r3, #9
 80183ae:	d903      	bls.n	80183b8 <_strtol_l.constprop.0+0x80>
 80183b0:	3b11      	subs	r3, #17
 80183b2:	2b19      	cmp	r3, #25
 80183b4:	d81d      	bhi.n	80183f2 <_strtol_l.constprop.0+0xba>
 80183b6:	330a      	adds	r3, #10
 80183b8:	429e      	cmp	r6, r3
 80183ba:	dd1e      	ble.n	80183fa <_strtol_l.constprop.0+0xc2>
 80183bc:	1c54      	adds	r4, r2, #1
 80183be:	d009      	beq.n	80183d4 <_strtol_l.constprop.0+0x9c>
 80183c0:	000a      	movs	r2, r1
 80183c2:	4584      	cmp	ip, r0
 80183c4:	d306      	bcc.n	80183d4 <_strtol_l.constprop.0+0x9c>
 80183c6:	d102      	bne.n	80183ce <_strtol_l.constprop.0+0x96>
 80183c8:	9c04      	ldr	r4, [sp, #16]
 80183ca:	429c      	cmp	r4, r3
 80183cc:	db02      	blt.n	80183d4 <_strtol_l.constprop.0+0x9c>
 80183ce:	2201      	movs	r2, #1
 80183d0:	4370      	muls	r0, r6
 80183d2:	1818      	adds	r0, r3, r0
 80183d4:	782c      	ldrb	r4, [r5, #0]
 80183d6:	3501      	adds	r5, #1
 80183d8:	e7e6      	b.n	80183a8 <_strtol_l.constprop.0+0x70>
 80183da:	f001 f961 	bl	80196a0 <__errno>
 80183de:	2316      	movs	r3, #22
 80183e0:	6003      	str	r3, [r0, #0]
 80183e2:	2000      	movs	r0, #0
 80183e4:	b007      	add	sp, #28
 80183e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183e8:	2c2b      	cmp	r4, #43	; 0x2b
 80183ea:	d1c2      	bne.n	8018372 <_strtol_l.constprop.0+0x3a>
 80183ec:	781c      	ldrb	r4, [r3, #0]
 80183ee:	1c95      	adds	r5, r2, #2
 80183f0:	e7bf      	b.n	8018372 <_strtol_l.constprop.0+0x3a>
 80183f2:	0023      	movs	r3, r4
 80183f4:	3b61      	subs	r3, #97	; 0x61
 80183f6:	2b19      	cmp	r3, #25
 80183f8:	d9dd      	bls.n	80183b6 <_strtol_l.constprop.0+0x7e>
 80183fa:	1c53      	adds	r3, r2, #1
 80183fc:	d109      	bne.n	8018412 <_strtol_l.constprop.0+0xda>
 80183fe:	2322      	movs	r3, #34	; 0x22
 8018400:	9a05      	ldr	r2, [sp, #20]
 8018402:	9803      	ldr	r0, [sp, #12]
 8018404:	6013      	str	r3, [r2, #0]
 8018406:	9b02      	ldr	r3, [sp, #8]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d0eb      	beq.n	80183e4 <_strtol_l.constprop.0+0xac>
 801840c:	1e6b      	subs	r3, r5, #1
 801840e:	9301      	str	r3, [sp, #4]
 8018410:	e007      	b.n	8018422 <_strtol_l.constprop.0+0xea>
 8018412:	2f00      	cmp	r7, #0
 8018414:	d000      	beq.n	8018418 <_strtol_l.constprop.0+0xe0>
 8018416:	4240      	negs	r0, r0
 8018418:	9b02      	ldr	r3, [sp, #8]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d0e2      	beq.n	80183e4 <_strtol_l.constprop.0+0xac>
 801841e:	2a00      	cmp	r2, #0
 8018420:	d1f4      	bne.n	801840c <_strtol_l.constprop.0+0xd4>
 8018422:	9b02      	ldr	r3, [sp, #8]
 8018424:	9a01      	ldr	r2, [sp, #4]
 8018426:	601a      	str	r2, [r3, #0]
 8018428:	e7dc      	b.n	80183e4 <_strtol_l.constprop.0+0xac>
 801842a:	2430      	movs	r4, #48	; 0x30
 801842c:	2e00      	cmp	r6, #0
 801842e:	d1ae      	bne.n	801838e <_strtol_l.constprop.0+0x56>
 8018430:	3608      	adds	r6, #8
 8018432:	e7ac      	b.n	801838e <_strtol_l.constprop.0+0x56>
 8018434:	2c30      	cmp	r4, #48	; 0x30
 8018436:	d0a2      	beq.n	801837e <_strtol_l.constprop.0+0x46>
 8018438:	260a      	movs	r6, #10
 801843a:	e7a8      	b.n	801838e <_strtol_l.constprop.0+0x56>
 801843c:	0801e219 	.word	0x0801e219
 8018440:	7fffffff 	.word	0x7fffffff

08018444 <_strtol_r>:
 8018444:	b510      	push	{r4, lr}
 8018446:	f7ff ff77 	bl	8018338 <_strtol_l.constprop.0>
 801844a:	bd10      	pop	{r4, pc}

0801844c <strtol>:
 801844c:	b510      	push	{r4, lr}
 801844e:	4c04      	ldr	r4, [pc, #16]	; (8018460 <strtol+0x14>)
 8018450:	0013      	movs	r3, r2
 8018452:	000a      	movs	r2, r1
 8018454:	0001      	movs	r1, r0
 8018456:	6820      	ldr	r0, [r4, #0]
 8018458:	f7ff ff6e 	bl	8018338 <_strtol_l.constprop.0>
 801845c:	bd10      	pop	{r4, pc}
 801845e:	46c0      	nop			; (mov r8, r8)
 8018460:	200002b4 	.word	0x200002b4

08018464 <__cvt>:
 8018464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018466:	001e      	movs	r6, r3
 8018468:	2300      	movs	r3, #0
 801846a:	0014      	movs	r4, r2
 801846c:	b08b      	sub	sp, #44	; 0x2c
 801846e:	429e      	cmp	r6, r3
 8018470:	da04      	bge.n	801847c <__cvt+0x18>
 8018472:	2180      	movs	r1, #128	; 0x80
 8018474:	0609      	lsls	r1, r1, #24
 8018476:	1873      	adds	r3, r6, r1
 8018478:	001e      	movs	r6, r3
 801847a:	232d      	movs	r3, #45	; 0x2d
 801847c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801847e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018480:	7013      	strb	r3, [r2, #0]
 8018482:	2320      	movs	r3, #32
 8018484:	2203      	movs	r2, #3
 8018486:	439f      	bics	r7, r3
 8018488:	2f46      	cmp	r7, #70	; 0x46
 801848a:	d007      	beq.n	801849c <__cvt+0x38>
 801848c:	003b      	movs	r3, r7
 801848e:	3b45      	subs	r3, #69	; 0x45
 8018490:	4259      	negs	r1, r3
 8018492:	414b      	adcs	r3, r1
 8018494:	9910      	ldr	r1, [sp, #64]	; 0x40
 8018496:	3a01      	subs	r2, #1
 8018498:	18cb      	adds	r3, r1, r3
 801849a:	9310      	str	r3, [sp, #64]	; 0x40
 801849c:	ab09      	add	r3, sp, #36	; 0x24
 801849e:	9304      	str	r3, [sp, #16]
 80184a0:	ab08      	add	r3, sp, #32
 80184a2:	9303      	str	r3, [sp, #12]
 80184a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80184a6:	9200      	str	r2, [sp, #0]
 80184a8:	9302      	str	r3, [sp, #8]
 80184aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184ac:	0022      	movs	r2, r4
 80184ae:	9301      	str	r3, [sp, #4]
 80184b0:	0033      	movs	r3, r6
 80184b2:	f001 f9f7 	bl	80198a4 <_dtoa_r>
 80184b6:	0005      	movs	r5, r0
 80184b8:	2f47      	cmp	r7, #71	; 0x47
 80184ba:	d102      	bne.n	80184c2 <__cvt+0x5e>
 80184bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80184be:	07db      	lsls	r3, r3, #31
 80184c0:	d528      	bpl.n	8018514 <__cvt+0xb0>
 80184c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184c4:	18eb      	adds	r3, r5, r3
 80184c6:	9307      	str	r3, [sp, #28]
 80184c8:	2f46      	cmp	r7, #70	; 0x46
 80184ca:	d114      	bne.n	80184f6 <__cvt+0x92>
 80184cc:	782b      	ldrb	r3, [r5, #0]
 80184ce:	2b30      	cmp	r3, #48	; 0x30
 80184d0:	d10c      	bne.n	80184ec <__cvt+0x88>
 80184d2:	2200      	movs	r2, #0
 80184d4:	2300      	movs	r3, #0
 80184d6:	0020      	movs	r0, r4
 80184d8:	0031      	movs	r1, r6
 80184da:	f7f4 fbb3 	bl	800cc44 <__aeabi_dcmpeq>
 80184de:	2800      	cmp	r0, #0
 80184e0:	d104      	bne.n	80184ec <__cvt+0x88>
 80184e2:	2301      	movs	r3, #1
 80184e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80184e6:	1a9b      	subs	r3, r3, r2
 80184e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80184ea:	6013      	str	r3, [r2, #0]
 80184ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80184ee:	9a07      	ldr	r2, [sp, #28]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	18d3      	adds	r3, r2, r3
 80184f4:	9307      	str	r3, [sp, #28]
 80184f6:	2200      	movs	r2, #0
 80184f8:	2300      	movs	r3, #0
 80184fa:	0020      	movs	r0, r4
 80184fc:	0031      	movs	r1, r6
 80184fe:	f7f4 fba1 	bl	800cc44 <__aeabi_dcmpeq>
 8018502:	2800      	cmp	r0, #0
 8018504:	d001      	beq.n	801850a <__cvt+0xa6>
 8018506:	9b07      	ldr	r3, [sp, #28]
 8018508:	9309      	str	r3, [sp, #36]	; 0x24
 801850a:	2230      	movs	r2, #48	; 0x30
 801850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801850e:	9907      	ldr	r1, [sp, #28]
 8018510:	428b      	cmp	r3, r1
 8018512:	d306      	bcc.n	8018522 <__cvt+0xbe>
 8018514:	0028      	movs	r0, r5
 8018516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018518:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801851a:	1b5b      	subs	r3, r3, r5
 801851c:	6013      	str	r3, [r2, #0]
 801851e:	b00b      	add	sp, #44	; 0x2c
 8018520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018522:	1c59      	adds	r1, r3, #1
 8018524:	9109      	str	r1, [sp, #36]	; 0x24
 8018526:	701a      	strb	r2, [r3, #0]
 8018528:	e7f0      	b.n	801850c <__cvt+0xa8>

0801852a <__exponent>:
 801852a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801852c:	1c83      	adds	r3, r0, #2
 801852e:	b087      	sub	sp, #28
 8018530:	9303      	str	r3, [sp, #12]
 8018532:	0005      	movs	r5, r0
 8018534:	000c      	movs	r4, r1
 8018536:	232b      	movs	r3, #43	; 0x2b
 8018538:	7002      	strb	r2, [r0, #0]
 801853a:	2900      	cmp	r1, #0
 801853c:	da01      	bge.n	8018542 <__exponent+0x18>
 801853e:	424c      	negs	r4, r1
 8018540:	3302      	adds	r3, #2
 8018542:	706b      	strb	r3, [r5, #1]
 8018544:	2c09      	cmp	r4, #9
 8018546:	dd2f      	ble.n	80185a8 <__exponent+0x7e>
 8018548:	270a      	movs	r7, #10
 801854a:	ab04      	add	r3, sp, #16
 801854c:	1dde      	adds	r6, r3, #7
 801854e:	0020      	movs	r0, r4
 8018550:	0039      	movs	r1, r7
 8018552:	9601      	str	r6, [sp, #4]
 8018554:	f7f4 fb60 	bl	800cc18 <__aeabi_idivmod>
 8018558:	3e01      	subs	r6, #1
 801855a:	3130      	adds	r1, #48	; 0x30
 801855c:	0020      	movs	r0, r4
 801855e:	7031      	strb	r1, [r6, #0]
 8018560:	0039      	movs	r1, r7
 8018562:	9402      	str	r4, [sp, #8]
 8018564:	f7f4 fa72 	bl	800ca4c <__divsi3>
 8018568:	9b02      	ldr	r3, [sp, #8]
 801856a:	0004      	movs	r4, r0
 801856c:	2b63      	cmp	r3, #99	; 0x63
 801856e:	dcee      	bgt.n	801854e <__exponent+0x24>
 8018570:	9b01      	ldr	r3, [sp, #4]
 8018572:	3430      	adds	r4, #48	; 0x30
 8018574:	1e9a      	subs	r2, r3, #2
 8018576:	0013      	movs	r3, r2
 8018578:	9903      	ldr	r1, [sp, #12]
 801857a:	7014      	strb	r4, [r2, #0]
 801857c:	a804      	add	r0, sp, #16
 801857e:	3007      	adds	r0, #7
 8018580:	4298      	cmp	r0, r3
 8018582:	d80c      	bhi.n	801859e <__exponent+0x74>
 8018584:	2300      	movs	r3, #0
 8018586:	4282      	cmp	r2, r0
 8018588:	d804      	bhi.n	8018594 <__exponent+0x6a>
 801858a:	aa04      	add	r2, sp, #16
 801858c:	3309      	adds	r3, #9
 801858e:	189b      	adds	r3, r3, r2
 8018590:	9a01      	ldr	r2, [sp, #4]
 8018592:	1a9b      	subs	r3, r3, r2
 8018594:	9a03      	ldr	r2, [sp, #12]
 8018596:	18d3      	adds	r3, r2, r3
 8018598:	1b58      	subs	r0, r3, r5
 801859a:	b007      	add	sp, #28
 801859c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801859e:	7818      	ldrb	r0, [r3, #0]
 80185a0:	3301      	adds	r3, #1
 80185a2:	7008      	strb	r0, [r1, #0]
 80185a4:	3101      	adds	r1, #1
 80185a6:	e7e9      	b.n	801857c <__exponent+0x52>
 80185a8:	2330      	movs	r3, #48	; 0x30
 80185aa:	3430      	adds	r4, #48	; 0x30
 80185ac:	70ab      	strb	r3, [r5, #2]
 80185ae:	70ec      	strb	r4, [r5, #3]
 80185b0:	1d2b      	adds	r3, r5, #4
 80185b2:	e7f1      	b.n	8018598 <__exponent+0x6e>

080185b4 <_printf_float>:
 80185b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185b6:	b095      	sub	sp, #84	; 0x54
 80185b8:	000c      	movs	r4, r1
 80185ba:	9208      	str	r2, [sp, #32]
 80185bc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80185be:	9309      	str	r3, [sp, #36]	; 0x24
 80185c0:	0007      	movs	r7, r0
 80185c2:	f001 f809 	bl	80195d8 <_localeconv_r>
 80185c6:	6803      	ldr	r3, [r0, #0]
 80185c8:	0018      	movs	r0, r3
 80185ca:	930c      	str	r3, [sp, #48]	; 0x30
 80185cc:	f7f4 f998 	bl	800c900 <strlen>
 80185d0:	2300      	movs	r3, #0
 80185d2:	9312      	str	r3, [sp, #72]	; 0x48
 80185d4:	7e23      	ldrb	r3, [r4, #24]
 80185d6:	2207      	movs	r2, #7
 80185d8:	930a      	str	r3, [sp, #40]	; 0x28
 80185da:	6823      	ldr	r3, [r4, #0]
 80185dc:	900d      	str	r0, [sp, #52]	; 0x34
 80185de:	930b      	str	r3, [sp, #44]	; 0x2c
 80185e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80185e2:	682b      	ldr	r3, [r5, #0]
 80185e4:	05c9      	lsls	r1, r1, #23
 80185e6:	d547      	bpl.n	8018678 <_printf_float+0xc4>
 80185e8:	189b      	adds	r3, r3, r2
 80185ea:	4393      	bics	r3, r2
 80185ec:	001a      	movs	r2, r3
 80185ee:	3208      	adds	r2, #8
 80185f0:	602a      	str	r2, [r5, #0]
 80185f2:	681e      	ldr	r6, [r3, #0]
 80185f4:	685d      	ldr	r5, [r3, #4]
 80185f6:	0032      	movs	r2, r6
 80185f8:	002b      	movs	r3, r5
 80185fa:	64a2      	str	r2, [r4, #72]	; 0x48
 80185fc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80185fe:	2201      	movs	r2, #1
 8018600:	006b      	lsls	r3, r5, #1
 8018602:	085b      	lsrs	r3, r3, #1
 8018604:	930e      	str	r3, [sp, #56]	; 0x38
 8018606:	0030      	movs	r0, r6
 8018608:	4bab      	ldr	r3, [pc, #684]	; (80188b8 <_printf_float+0x304>)
 801860a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801860c:	4252      	negs	r2, r2
 801860e:	f7f7 f8a1 	bl	800f754 <__aeabi_dcmpun>
 8018612:	2800      	cmp	r0, #0
 8018614:	d132      	bne.n	801867c <_printf_float+0xc8>
 8018616:	2201      	movs	r2, #1
 8018618:	0030      	movs	r0, r6
 801861a:	4ba7      	ldr	r3, [pc, #668]	; (80188b8 <_printf_float+0x304>)
 801861c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801861e:	4252      	negs	r2, r2
 8018620:	f7f4 fb20 	bl	800cc64 <__aeabi_dcmple>
 8018624:	2800      	cmp	r0, #0
 8018626:	d129      	bne.n	801867c <_printf_float+0xc8>
 8018628:	2200      	movs	r2, #0
 801862a:	2300      	movs	r3, #0
 801862c:	0030      	movs	r0, r6
 801862e:	0029      	movs	r1, r5
 8018630:	f7f4 fb0e 	bl	800cc50 <__aeabi_dcmplt>
 8018634:	2800      	cmp	r0, #0
 8018636:	d003      	beq.n	8018640 <_printf_float+0x8c>
 8018638:	0023      	movs	r3, r4
 801863a:	222d      	movs	r2, #45	; 0x2d
 801863c:	3343      	adds	r3, #67	; 0x43
 801863e:	701a      	strb	r2, [r3, #0]
 8018640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018642:	4d9e      	ldr	r5, [pc, #632]	; (80188bc <_printf_float+0x308>)
 8018644:	2b47      	cmp	r3, #71	; 0x47
 8018646:	d900      	bls.n	801864a <_printf_float+0x96>
 8018648:	4d9d      	ldr	r5, [pc, #628]	; (80188c0 <_printf_float+0x30c>)
 801864a:	2303      	movs	r3, #3
 801864c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801864e:	6123      	str	r3, [r4, #16]
 8018650:	3301      	adds	r3, #1
 8018652:	439a      	bics	r2, r3
 8018654:	2300      	movs	r3, #0
 8018656:	6022      	str	r2, [r4, #0]
 8018658:	930b      	str	r3, [sp, #44]	; 0x2c
 801865a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801865c:	0021      	movs	r1, r4
 801865e:	9300      	str	r3, [sp, #0]
 8018660:	0038      	movs	r0, r7
 8018662:	9b08      	ldr	r3, [sp, #32]
 8018664:	aa13      	add	r2, sp, #76	; 0x4c
 8018666:	f000 f9fb 	bl	8018a60 <_printf_common>
 801866a:	3001      	adds	r0, #1
 801866c:	d000      	beq.n	8018670 <_printf_float+0xbc>
 801866e:	e0a3      	b.n	80187b8 <_printf_float+0x204>
 8018670:	2001      	movs	r0, #1
 8018672:	4240      	negs	r0, r0
 8018674:	b015      	add	sp, #84	; 0x54
 8018676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018678:	3307      	adds	r3, #7
 801867a:	e7b6      	b.n	80185ea <_printf_float+0x36>
 801867c:	0032      	movs	r2, r6
 801867e:	002b      	movs	r3, r5
 8018680:	0030      	movs	r0, r6
 8018682:	0029      	movs	r1, r5
 8018684:	f7f7 f866 	bl	800f754 <__aeabi_dcmpun>
 8018688:	2800      	cmp	r0, #0
 801868a:	d00b      	beq.n	80186a4 <_printf_float+0xf0>
 801868c:	2d00      	cmp	r5, #0
 801868e:	da03      	bge.n	8018698 <_printf_float+0xe4>
 8018690:	0023      	movs	r3, r4
 8018692:	222d      	movs	r2, #45	; 0x2d
 8018694:	3343      	adds	r3, #67	; 0x43
 8018696:	701a      	strb	r2, [r3, #0]
 8018698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801869a:	4d8a      	ldr	r5, [pc, #552]	; (80188c4 <_printf_float+0x310>)
 801869c:	2b47      	cmp	r3, #71	; 0x47
 801869e:	d9d4      	bls.n	801864a <_printf_float+0x96>
 80186a0:	4d89      	ldr	r5, [pc, #548]	; (80188c8 <_printf_float+0x314>)
 80186a2:	e7d2      	b.n	801864a <_printf_float+0x96>
 80186a4:	2220      	movs	r2, #32
 80186a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80186a8:	6863      	ldr	r3, [r4, #4]
 80186aa:	4391      	bics	r1, r2
 80186ac:	910e      	str	r1, [sp, #56]	; 0x38
 80186ae:	1c5a      	adds	r2, r3, #1
 80186b0:	d14a      	bne.n	8018748 <_printf_float+0x194>
 80186b2:	3307      	adds	r3, #7
 80186b4:	6063      	str	r3, [r4, #4]
 80186b6:	2380      	movs	r3, #128	; 0x80
 80186b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80186ba:	00db      	lsls	r3, r3, #3
 80186bc:	4313      	orrs	r3, r2
 80186be:	2200      	movs	r2, #0
 80186c0:	9206      	str	r2, [sp, #24]
 80186c2:	aa12      	add	r2, sp, #72	; 0x48
 80186c4:	9205      	str	r2, [sp, #20]
 80186c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80186c8:	6023      	str	r3, [r4, #0]
 80186ca:	9204      	str	r2, [sp, #16]
 80186cc:	aa11      	add	r2, sp, #68	; 0x44
 80186ce:	9203      	str	r2, [sp, #12]
 80186d0:	2223      	movs	r2, #35	; 0x23
 80186d2:	a908      	add	r1, sp, #32
 80186d4:	9301      	str	r3, [sp, #4]
 80186d6:	6863      	ldr	r3, [r4, #4]
 80186d8:	1852      	adds	r2, r2, r1
 80186da:	9202      	str	r2, [sp, #8]
 80186dc:	9300      	str	r3, [sp, #0]
 80186de:	0032      	movs	r2, r6
 80186e0:	002b      	movs	r3, r5
 80186e2:	0038      	movs	r0, r7
 80186e4:	f7ff febe 	bl	8018464 <__cvt>
 80186e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186ea:	0005      	movs	r5, r0
 80186ec:	2b47      	cmp	r3, #71	; 0x47
 80186ee:	d109      	bne.n	8018704 <_printf_float+0x150>
 80186f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80186f2:	1cda      	adds	r2, r3, #3
 80186f4:	db02      	blt.n	80186fc <_printf_float+0x148>
 80186f6:	6862      	ldr	r2, [r4, #4]
 80186f8:	4293      	cmp	r3, r2
 80186fa:	dd49      	ble.n	8018790 <_printf_float+0x1dc>
 80186fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186fe:	3b02      	subs	r3, #2
 8018700:	b2db      	uxtb	r3, r3
 8018702:	930a      	str	r3, [sp, #40]	; 0x28
 8018704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018706:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018708:	2b65      	cmp	r3, #101	; 0x65
 801870a:	d824      	bhi.n	8018756 <_printf_float+0x1a2>
 801870c:	0020      	movs	r0, r4
 801870e:	001a      	movs	r2, r3
 8018710:	3901      	subs	r1, #1
 8018712:	3050      	adds	r0, #80	; 0x50
 8018714:	9111      	str	r1, [sp, #68]	; 0x44
 8018716:	f7ff ff08 	bl	801852a <__exponent>
 801871a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801871c:	900b      	str	r0, [sp, #44]	; 0x2c
 801871e:	1813      	adds	r3, r2, r0
 8018720:	6123      	str	r3, [r4, #16]
 8018722:	2a01      	cmp	r2, #1
 8018724:	dc02      	bgt.n	801872c <_printf_float+0x178>
 8018726:	6822      	ldr	r2, [r4, #0]
 8018728:	07d2      	lsls	r2, r2, #31
 801872a:	d501      	bpl.n	8018730 <_printf_float+0x17c>
 801872c:	3301      	adds	r3, #1
 801872e:	6123      	str	r3, [r4, #16]
 8018730:	2323      	movs	r3, #35	; 0x23
 8018732:	aa08      	add	r2, sp, #32
 8018734:	189b      	adds	r3, r3, r2
 8018736:	781b      	ldrb	r3, [r3, #0]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d100      	bne.n	801873e <_printf_float+0x18a>
 801873c:	e78d      	b.n	801865a <_printf_float+0xa6>
 801873e:	0023      	movs	r3, r4
 8018740:	222d      	movs	r2, #45	; 0x2d
 8018742:	3343      	adds	r3, #67	; 0x43
 8018744:	701a      	strb	r2, [r3, #0]
 8018746:	e788      	b.n	801865a <_printf_float+0xa6>
 8018748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801874a:	2a47      	cmp	r2, #71	; 0x47
 801874c:	d1b3      	bne.n	80186b6 <_printf_float+0x102>
 801874e:	2b00      	cmp	r3, #0
 8018750:	d1b1      	bne.n	80186b6 <_printf_float+0x102>
 8018752:	3301      	adds	r3, #1
 8018754:	e7ae      	b.n	80186b4 <_printf_float+0x100>
 8018756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018758:	2b66      	cmp	r3, #102	; 0x66
 801875a:	d11b      	bne.n	8018794 <_printf_float+0x1e0>
 801875c:	6863      	ldr	r3, [r4, #4]
 801875e:	2900      	cmp	r1, #0
 8018760:	dd09      	ble.n	8018776 <_printf_float+0x1c2>
 8018762:	6121      	str	r1, [r4, #16]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d102      	bne.n	801876e <_printf_float+0x1ba>
 8018768:	6822      	ldr	r2, [r4, #0]
 801876a:	07d2      	lsls	r2, r2, #31
 801876c:	d50b      	bpl.n	8018786 <_printf_float+0x1d2>
 801876e:	3301      	adds	r3, #1
 8018770:	185b      	adds	r3, r3, r1
 8018772:	6123      	str	r3, [r4, #16]
 8018774:	e007      	b.n	8018786 <_printf_float+0x1d2>
 8018776:	2b00      	cmp	r3, #0
 8018778:	d103      	bne.n	8018782 <_printf_float+0x1ce>
 801877a:	2201      	movs	r2, #1
 801877c:	6821      	ldr	r1, [r4, #0]
 801877e:	4211      	tst	r1, r2
 8018780:	d000      	beq.n	8018784 <_printf_float+0x1d0>
 8018782:	1c9a      	adds	r2, r3, #2
 8018784:	6122      	str	r2, [r4, #16]
 8018786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018788:	65a3      	str	r3, [r4, #88]	; 0x58
 801878a:	2300      	movs	r3, #0
 801878c:	930b      	str	r3, [sp, #44]	; 0x2c
 801878e:	e7cf      	b.n	8018730 <_printf_float+0x17c>
 8018790:	2367      	movs	r3, #103	; 0x67
 8018792:	930a      	str	r3, [sp, #40]	; 0x28
 8018794:	9911      	ldr	r1, [sp, #68]	; 0x44
 8018796:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018798:	4299      	cmp	r1, r3
 801879a:	db06      	blt.n	80187aa <_printf_float+0x1f6>
 801879c:	6823      	ldr	r3, [r4, #0]
 801879e:	6121      	str	r1, [r4, #16]
 80187a0:	07db      	lsls	r3, r3, #31
 80187a2:	d5f0      	bpl.n	8018786 <_printf_float+0x1d2>
 80187a4:	3101      	adds	r1, #1
 80187a6:	6121      	str	r1, [r4, #16]
 80187a8:	e7ed      	b.n	8018786 <_printf_float+0x1d2>
 80187aa:	2201      	movs	r2, #1
 80187ac:	2900      	cmp	r1, #0
 80187ae:	dc01      	bgt.n	80187b4 <_printf_float+0x200>
 80187b0:	1892      	adds	r2, r2, r2
 80187b2:	1a52      	subs	r2, r2, r1
 80187b4:	189b      	adds	r3, r3, r2
 80187b6:	e7dc      	b.n	8018772 <_printf_float+0x1be>
 80187b8:	6822      	ldr	r2, [r4, #0]
 80187ba:	0553      	lsls	r3, r2, #21
 80187bc:	d408      	bmi.n	80187d0 <_printf_float+0x21c>
 80187be:	6923      	ldr	r3, [r4, #16]
 80187c0:	002a      	movs	r2, r5
 80187c2:	0038      	movs	r0, r7
 80187c4:	9908      	ldr	r1, [sp, #32]
 80187c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80187c8:	47a8      	blx	r5
 80187ca:	3001      	adds	r0, #1
 80187cc:	d12a      	bne.n	8018824 <_printf_float+0x270>
 80187ce:	e74f      	b.n	8018670 <_printf_float+0xbc>
 80187d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80187d2:	2b65      	cmp	r3, #101	; 0x65
 80187d4:	d800      	bhi.n	80187d8 <_printf_float+0x224>
 80187d6:	e0ec      	b.n	80189b2 <_printf_float+0x3fe>
 80187d8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80187da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80187dc:	2200      	movs	r2, #0
 80187de:	2300      	movs	r3, #0
 80187e0:	f7f4 fa30 	bl	800cc44 <__aeabi_dcmpeq>
 80187e4:	2800      	cmp	r0, #0
 80187e6:	d034      	beq.n	8018852 <_printf_float+0x29e>
 80187e8:	2301      	movs	r3, #1
 80187ea:	0038      	movs	r0, r7
 80187ec:	4a37      	ldr	r2, [pc, #220]	; (80188cc <_printf_float+0x318>)
 80187ee:	9908      	ldr	r1, [sp, #32]
 80187f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80187f2:	47a8      	blx	r5
 80187f4:	3001      	adds	r0, #1
 80187f6:	d100      	bne.n	80187fa <_printf_float+0x246>
 80187f8:	e73a      	b.n	8018670 <_printf_float+0xbc>
 80187fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80187fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80187fe:	429a      	cmp	r2, r3
 8018800:	db02      	blt.n	8018808 <_printf_float+0x254>
 8018802:	6823      	ldr	r3, [r4, #0]
 8018804:	07db      	lsls	r3, r3, #31
 8018806:	d50d      	bpl.n	8018824 <_printf_float+0x270>
 8018808:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801880a:	0038      	movs	r0, r7
 801880c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801880e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018810:	9908      	ldr	r1, [sp, #32]
 8018812:	47a8      	blx	r5
 8018814:	2500      	movs	r5, #0
 8018816:	3001      	adds	r0, #1
 8018818:	d100      	bne.n	801881c <_printf_float+0x268>
 801881a:	e729      	b.n	8018670 <_printf_float+0xbc>
 801881c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801881e:	3b01      	subs	r3, #1
 8018820:	42ab      	cmp	r3, r5
 8018822:	dc0a      	bgt.n	801883a <_printf_float+0x286>
 8018824:	6823      	ldr	r3, [r4, #0]
 8018826:	079b      	lsls	r3, r3, #30
 8018828:	d500      	bpl.n	801882c <_printf_float+0x278>
 801882a:	e116      	b.n	8018a5a <_printf_float+0x4a6>
 801882c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801882e:	68e0      	ldr	r0, [r4, #12]
 8018830:	4298      	cmp	r0, r3
 8018832:	db00      	blt.n	8018836 <_printf_float+0x282>
 8018834:	e71e      	b.n	8018674 <_printf_float+0xc0>
 8018836:	0018      	movs	r0, r3
 8018838:	e71c      	b.n	8018674 <_printf_float+0xc0>
 801883a:	0022      	movs	r2, r4
 801883c:	2301      	movs	r3, #1
 801883e:	0038      	movs	r0, r7
 8018840:	9908      	ldr	r1, [sp, #32]
 8018842:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018844:	321a      	adds	r2, #26
 8018846:	47b0      	blx	r6
 8018848:	3001      	adds	r0, #1
 801884a:	d100      	bne.n	801884e <_printf_float+0x29a>
 801884c:	e710      	b.n	8018670 <_printf_float+0xbc>
 801884e:	3501      	adds	r5, #1
 8018850:	e7e4      	b.n	801881c <_printf_float+0x268>
 8018852:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018854:	2b00      	cmp	r3, #0
 8018856:	dc3b      	bgt.n	80188d0 <_printf_float+0x31c>
 8018858:	2301      	movs	r3, #1
 801885a:	0038      	movs	r0, r7
 801885c:	4a1b      	ldr	r2, [pc, #108]	; (80188cc <_printf_float+0x318>)
 801885e:	9908      	ldr	r1, [sp, #32]
 8018860:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018862:	47b0      	blx	r6
 8018864:	3001      	adds	r0, #1
 8018866:	d100      	bne.n	801886a <_printf_float+0x2b6>
 8018868:	e702      	b.n	8018670 <_printf_float+0xbc>
 801886a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801886c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801886e:	4313      	orrs	r3, r2
 8018870:	d102      	bne.n	8018878 <_printf_float+0x2c4>
 8018872:	6823      	ldr	r3, [r4, #0]
 8018874:	07db      	lsls	r3, r3, #31
 8018876:	d5d5      	bpl.n	8018824 <_printf_float+0x270>
 8018878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801887a:	0038      	movs	r0, r7
 801887c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801887e:	9908      	ldr	r1, [sp, #32]
 8018880:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018882:	47b0      	blx	r6
 8018884:	2300      	movs	r3, #0
 8018886:	3001      	adds	r0, #1
 8018888:	d100      	bne.n	801888c <_printf_float+0x2d8>
 801888a:	e6f1      	b.n	8018670 <_printf_float+0xbc>
 801888c:	930a      	str	r3, [sp, #40]	; 0x28
 801888e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018892:	425b      	negs	r3, r3
 8018894:	4293      	cmp	r3, r2
 8018896:	dc01      	bgt.n	801889c <_printf_float+0x2e8>
 8018898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801889a:	e791      	b.n	80187c0 <_printf_float+0x20c>
 801889c:	0022      	movs	r2, r4
 801889e:	2301      	movs	r3, #1
 80188a0:	0038      	movs	r0, r7
 80188a2:	9908      	ldr	r1, [sp, #32]
 80188a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80188a6:	321a      	adds	r2, #26
 80188a8:	47b0      	blx	r6
 80188aa:	3001      	adds	r0, #1
 80188ac:	d100      	bne.n	80188b0 <_printf_float+0x2fc>
 80188ae:	e6df      	b.n	8018670 <_printf_float+0xbc>
 80188b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188b2:	3301      	adds	r3, #1
 80188b4:	e7ea      	b.n	801888c <_printf_float+0x2d8>
 80188b6:	46c0      	nop			; (mov r8, r8)
 80188b8:	7fefffff 	.word	0x7fefffff
 80188bc:	0801e319 	.word	0x0801e319
 80188c0:	0801e31d 	.word	0x0801e31d
 80188c4:	0801e321 	.word	0x0801e321
 80188c8:	0801e325 	.word	0x0801e325
 80188cc:	0801e329 	.word	0x0801e329
 80188d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80188d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80188d4:	920a      	str	r2, [sp, #40]	; 0x28
 80188d6:	429a      	cmp	r2, r3
 80188d8:	dd00      	ble.n	80188dc <_printf_float+0x328>
 80188da:	930a      	str	r3, [sp, #40]	; 0x28
 80188dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188de:	2b00      	cmp	r3, #0
 80188e0:	dc3d      	bgt.n	801895e <_printf_float+0x3aa>
 80188e2:	2300      	movs	r3, #0
 80188e4:	930e      	str	r3, [sp, #56]	; 0x38
 80188e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80188e8:	43db      	mvns	r3, r3
 80188ea:	17db      	asrs	r3, r3, #31
 80188ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80188ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80188f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80188f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80188f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188f6:	4013      	ands	r3, r2
 80188f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80188fa:	1ad3      	subs	r3, r2, r3
 80188fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188fe:	4293      	cmp	r3, r2
 8018900:	dc36      	bgt.n	8018970 <_printf_float+0x3bc>
 8018902:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018904:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018906:	429a      	cmp	r2, r3
 8018908:	db40      	blt.n	801898c <_printf_float+0x3d8>
 801890a:	6823      	ldr	r3, [r4, #0]
 801890c:	07db      	lsls	r3, r3, #31
 801890e:	d43d      	bmi.n	801898c <_printf_float+0x3d8>
 8018910:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018912:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018916:	1af3      	subs	r3, r6, r3
 8018918:	1ab6      	subs	r6, r6, r2
 801891a:	429e      	cmp	r6, r3
 801891c:	dd00      	ble.n	8018920 <_printf_float+0x36c>
 801891e:	001e      	movs	r6, r3
 8018920:	2e00      	cmp	r6, #0
 8018922:	dc3c      	bgt.n	801899e <_printf_float+0x3ea>
 8018924:	2300      	movs	r3, #0
 8018926:	930a      	str	r3, [sp, #40]	; 0x28
 8018928:	43f3      	mvns	r3, r6
 801892a:	17db      	asrs	r3, r3, #31
 801892c:	930b      	str	r3, [sp, #44]	; 0x2c
 801892e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018930:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018932:	1a9b      	subs	r3, r3, r2
 8018934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018936:	4032      	ands	r2, r6
 8018938:	1a9b      	subs	r3, r3, r2
 801893a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801893c:	4293      	cmp	r3, r2
 801893e:	dc00      	bgt.n	8018942 <_printf_float+0x38e>
 8018940:	e770      	b.n	8018824 <_printf_float+0x270>
 8018942:	0022      	movs	r2, r4
 8018944:	2301      	movs	r3, #1
 8018946:	0038      	movs	r0, r7
 8018948:	9908      	ldr	r1, [sp, #32]
 801894a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801894c:	321a      	adds	r2, #26
 801894e:	47a8      	blx	r5
 8018950:	3001      	adds	r0, #1
 8018952:	d100      	bne.n	8018956 <_printf_float+0x3a2>
 8018954:	e68c      	b.n	8018670 <_printf_float+0xbc>
 8018956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018958:	3301      	adds	r3, #1
 801895a:	930a      	str	r3, [sp, #40]	; 0x28
 801895c:	e7e7      	b.n	801892e <_printf_float+0x37a>
 801895e:	002a      	movs	r2, r5
 8018960:	0038      	movs	r0, r7
 8018962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018964:	9908      	ldr	r1, [sp, #32]
 8018966:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018968:	47b0      	blx	r6
 801896a:	3001      	adds	r0, #1
 801896c:	d1b9      	bne.n	80188e2 <_printf_float+0x32e>
 801896e:	e67f      	b.n	8018670 <_printf_float+0xbc>
 8018970:	0022      	movs	r2, r4
 8018972:	2301      	movs	r3, #1
 8018974:	0038      	movs	r0, r7
 8018976:	9908      	ldr	r1, [sp, #32]
 8018978:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801897a:	321a      	adds	r2, #26
 801897c:	47b0      	blx	r6
 801897e:	3001      	adds	r0, #1
 8018980:	d100      	bne.n	8018984 <_printf_float+0x3d0>
 8018982:	e675      	b.n	8018670 <_printf_float+0xbc>
 8018984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018986:	3301      	adds	r3, #1
 8018988:	930e      	str	r3, [sp, #56]	; 0x38
 801898a:	e7b0      	b.n	80188ee <_printf_float+0x33a>
 801898c:	0038      	movs	r0, r7
 801898e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018992:	9908      	ldr	r1, [sp, #32]
 8018994:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018996:	47b0      	blx	r6
 8018998:	3001      	adds	r0, #1
 801899a:	d1b9      	bne.n	8018910 <_printf_float+0x35c>
 801899c:	e668      	b.n	8018670 <_printf_float+0xbc>
 801899e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80189a0:	0038      	movs	r0, r7
 80189a2:	18ea      	adds	r2, r5, r3
 80189a4:	9908      	ldr	r1, [sp, #32]
 80189a6:	0033      	movs	r3, r6
 80189a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80189aa:	47a8      	blx	r5
 80189ac:	3001      	adds	r0, #1
 80189ae:	d1b9      	bne.n	8018924 <_printf_float+0x370>
 80189b0:	e65e      	b.n	8018670 <_printf_float+0xbc>
 80189b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80189b4:	2b01      	cmp	r3, #1
 80189b6:	dc02      	bgt.n	80189be <_printf_float+0x40a>
 80189b8:	2301      	movs	r3, #1
 80189ba:	421a      	tst	r2, r3
 80189bc:	d03a      	beq.n	8018a34 <_printf_float+0x480>
 80189be:	2301      	movs	r3, #1
 80189c0:	002a      	movs	r2, r5
 80189c2:	0038      	movs	r0, r7
 80189c4:	9908      	ldr	r1, [sp, #32]
 80189c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80189c8:	47b0      	blx	r6
 80189ca:	3001      	adds	r0, #1
 80189cc:	d100      	bne.n	80189d0 <_printf_float+0x41c>
 80189ce:	e64f      	b.n	8018670 <_printf_float+0xbc>
 80189d0:	0038      	movs	r0, r7
 80189d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80189d6:	9908      	ldr	r1, [sp, #32]
 80189d8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80189da:	47b0      	blx	r6
 80189dc:	3001      	adds	r0, #1
 80189de:	d100      	bne.n	80189e2 <_printf_float+0x42e>
 80189e0:	e646      	b.n	8018670 <_printf_float+0xbc>
 80189e2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80189e4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80189e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80189e8:	2200      	movs	r2, #0
 80189ea:	001e      	movs	r6, r3
 80189ec:	2300      	movs	r3, #0
 80189ee:	f7f4 f929 	bl	800cc44 <__aeabi_dcmpeq>
 80189f2:	2800      	cmp	r0, #0
 80189f4:	d11c      	bne.n	8018a30 <_printf_float+0x47c>
 80189f6:	0033      	movs	r3, r6
 80189f8:	1c6a      	adds	r2, r5, #1
 80189fa:	3b01      	subs	r3, #1
 80189fc:	0038      	movs	r0, r7
 80189fe:	9908      	ldr	r1, [sp, #32]
 8018a00:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8018a02:	47a8      	blx	r5
 8018a04:	3001      	adds	r0, #1
 8018a06:	d10f      	bne.n	8018a28 <_printf_float+0x474>
 8018a08:	e632      	b.n	8018670 <_printf_float+0xbc>
 8018a0a:	0022      	movs	r2, r4
 8018a0c:	2301      	movs	r3, #1
 8018a0e:	0038      	movs	r0, r7
 8018a10:	9908      	ldr	r1, [sp, #32]
 8018a12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018a14:	321a      	adds	r2, #26
 8018a16:	47b0      	blx	r6
 8018a18:	3001      	adds	r0, #1
 8018a1a:	d100      	bne.n	8018a1e <_printf_float+0x46a>
 8018a1c:	e628      	b.n	8018670 <_printf_float+0xbc>
 8018a1e:	3501      	adds	r5, #1
 8018a20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018a22:	3b01      	subs	r3, #1
 8018a24:	42ab      	cmp	r3, r5
 8018a26:	dcf0      	bgt.n	8018a0a <_printf_float+0x456>
 8018a28:	0022      	movs	r2, r4
 8018a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a2c:	3250      	adds	r2, #80	; 0x50
 8018a2e:	e6c8      	b.n	80187c2 <_printf_float+0x20e>
 8018a30:	2500      	movs	r5, #0
 8018a32:	e7f5      	b.n	8018a20 <_printf_float+0x46c>
 8018a34:	002a      	movs	r2, r5
 8018a36:	e7e1      	b.n	80189fc <_printf_float+0x448>
 8018a38:	0022      	movs	r2, r4
 8018a3a:	2301      	movs	r3, #1
 8018a3c:	0038      	movs	r0, r7
 8018a3e:	9908      	ldr	r1, [sp, #32]
 8018a40:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8018a42:	3219      	adds	r2, #25
 8018a44:	47b0      	blx	r6
 8018a46:	3001      	adds	r0, #1
 8018a48:	d100      	bne.n	8018a4c <_printf_float+0x498>
 8018a4a:	e611      	b.n	8018670 <_printf_float+0xbc>
 8018a4c:	3501      	adds	r5, #1
 8018a4e:	68e3      	ldr	r3, [r4, #12]
 8018a50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018a52:	1a9b      	subs	r3, r3, r2
 8018a54:	42ab      	cmp	r3, r5
 8018a56:	dcef      	bgt.n	8018a38 <_printf_float+0x484>
 8018a58:	e6e8      	b.n	801882c <_printf_float+0x278>
 8018a5a:	2500      	movs	r5, #0
 8018a5c:	e7f7      	b.n	8018a4e <_printf_float+0x49a>
 8018a5e:	46c0      	nop			; (mov r8, r8)

08018a60 <_printf_common>:
 8018a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a62:	0016      	movs	r6, r2
 8018a64:	9301      	str	r3, [sp, #4]
 8018a66:	688a      	ldr	r2, [r1, #8]
 8018a68:	690b      	ldr	r3, [r1, #16]
 8018a6a:	000c      	movs	r4, r1
 8018a6c:	9000      	str	r0, [sp, #0]
 8018a6e:	4293      	cmp	r3, r2
 8018a70:	da00      	bge.n	8018a74 <_printf_common+0x14>
 8018a72:	0013      	movs	r3, r2
 8018a74:	0022      	movs	r2, r4
 8018a76:	6033      	str	r3, [r6, #0]
 8018a78:	3243      	adds	r2, #67	; 0x43
 8018a7a:	7812      	ldrb	r2, [r2, #0]
 8018a7c:	2a00      	cmp	r2, #0
 8018a7e:	d001      	beq.n	8018a84 <_printf_common+0x24>
 8018a80:	3301      	adds	r3, #1
 8018a82:	6033      	str	r3, [r6, #0]
 8018a84:	6823      	ldr	r3, [r4, #0]
 8018a86:	069b      	lsls	r3, r3, #26
 8018a88:	d502      	bpl.n	8018a90 <_printf_common+0x30>
 8018a8a:	6833      	ldr	r3, [r6, #0]
 8018a8c:	3302      	adds	r3, #2
 8018a8e:	6033      	str	r3, [r6, #0]
 8018a90:	6822      	ldr	r2, [r4, #0]
 8018a92:	2306      	movs	r3, #6
 8018a94:	0015      	movs	r5, r2
 8018a96:	401d      	ands	r5, r3
 8018a98:	421a      	tst	r2, r3
 8018a9a:	d027      	beq.n	8018aec <_printf_common+0x8c>
 8018a9c:	0023      	movs	r3, r4
 8018a9e:	3343      	adds	r3, #67	; 0x43
 8018aa0:	781b      	ldrb	r3, [r3, #0]
 8018aa2:	1e5a      	subs	r2, r3, #1
 8018aa4:	4193      	sbcs	r3, r2
 8018aa6:	6822      	ldr	r2, [r4, #0]
 8018aa8:	0692      	lsls	r2, r2, #26
 8018aaa:	d430      	bmi.n	8018b0e <_printf_common+0xae>
 8018aac:	0022      	movs	r2, r4
 8018aae:	9901      	ldr	r1, [sp, #4]
 8018ab0:	9800      	ldr	r0, [sp, #0]
 8018ab2:	9d08      	ldr	r5, [sp, #32]
 8018ab4:	3243      	adds	r2, #67	; 0x43
 8018ab6:	47a8      	blx	r5
 8018ab8:	3001      	adds	r0, #1
 8018aba:	d025      	beq.n	8018b08 <_printf_common+0xa8>
 8018abc:	2206      	movs	r2, #6
 8018abe:	6823      	ldr	r3, [r4, #0]
 8018ac0:	2500      	movs	r5, #0
 8018ac2:	4013      	ands	r3, r2
 8018ac4:	2b04      	cmp	r3, #4
 8018ac6:	d105      	bne.n	8018ad4 <_printf_common+0x74>
 8018ac8:	6833      	ldr	r3, [r6, #0]
 8018aca:	68e5      	ldr	r5, [r4, #12]
 8018acc:	1aed      	subs	r5, r5, r3
 8018ace:	43eb      	mvns	r3, r5
 8018ad0:	17db      	asrs	r3, r3, #31
 8018ad2:	401d      	ands	r5, r3
 8018ad4:	68a3      	ldr	r3, [r4, #8]
 8018ad6:	6922      	ldr	r2, [r4, #16]
 8018ad8:	4293      	cmp	r3, r2
 8018ada:	dd01      	ble.n	8018ae0 <_printf_common+0x80>
 8018adc:	1a9b      	subs	r3, r3, r2
 8018ade:	18ed      	adds	r5, r5, r3
 8018ae0:	2600      	movs	r6, #0
 8018ae2:	42b5      	cmp	r5, r6
 8018ae4:	d120      	bne.n	8018b28 <_printf_common+0xc8>
 8018ae6:	2000      	movs	r0, #0
 8018ae8:	e010      	b.n	8018b0c <_printf_common+0xac>
 8018aea:	3501      	adds	r5, #1
 8018aec:	68e3      	ldr	r3, [r4, #12]
 8018aee:	6832      	ldr	r2, [r6, #0]
 8018af0:	1a9b      	subs	r3, r3, r2
 8018af2:	42ab      	cmp	r3, r5
 8018af4:	ddd2      	ble.n	8018a9c <_printf_common+0x3c>
 8018af6:	0022      	movs	r2, r4
 8018af8:	2301      	movs	r3, #1
 8018afa:	9901      	ldr	r1, [sp, #4]
 8018afc:	9800      	ldr	r0, [sp, #0]
 8018afe:	9f08      	ldr	r7, [sp, #32]
 8018b00:	3219      	adds	r2, #25
 8018b02:	47b8      	blx	r7
 8018b04:	3001      	adds	r0, #1
 8018b06:	d1f0      	bne.n	8018aea <_printf_common+0x8a>
 8018b08:	2001      	movs	r0, #1
 8018b0a:	4240      	negs	r0, r0
 8018b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018b0e:	2030      	movs	r0, #48	; 0x30
 8018b10:	18e1      	adds	r1, r4, r3
 8018b12:	3143      	adds	r1, #67	; 0x43
 8018b14:	7008      	strb	r0, [r1, #0]
 8018b16:	0021      	movs	r1, r4
 8018b18:	1c5a      	adds	r2, r3, #1
 8018b1a:	3145      	adds	r1, #69	; 0x45
 8018b1c:	7809      	ldrb	r1, [r1, #0]
 8018b1e:	18a2      	adds	r2, r4, r2
 8018b20:	3243      	adds	r2, #67	; 0x43
 8018b22:	3302      	adds	r3, #2
 8018b24:	7011      	strb	r1, [r2, #0]
 8018b26:	e7c1      	b.n	8018aac <_printf_common+0x4c>
 8018b28:	0022      	movs	r2, r4
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	9901      	ldr	r1, [sp, #4]
 8018b2e:	9800      	ldr	r0, [sp, #0]
 8018b30:	9f08      	ldr	r7, [sp, #32]
 8018b32:	321a      	adds	r2, #26
 8018b34:	47b8      	blx	r7
 8018b36:	3001      	adds	r0, #1
 8018b38:	d0e6      	beq.n	8018b08 <_printf_common+0xa8>
 8018b3a:	3601      	adds	r6, #1
 8018b3c:	e7d1      	b.n	8018ae2 <_printf_common+0x82>
	...

08018b40 <_printf_i>:
 8018b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b42:	b08b      	sub	sp, #44	; 0x2c
 8018b44:	9206      	str	r2, [sp, #24]
 8018b46:	000a      	movs	r2, r1
 8018b48:	3243      	adds	r2, #67	; 0x43
 8018b4a:	9307      	str	r3, [sp, #28]
 8018b4c:	9005      	str	r0, [sp, #20]
 8018b4e:	9204      	str	r2, [sp, #16]
 8018b50:	7e0a      	ldrb	r2, [r1, #24]
 8018b52:	000c      	movs	r4, r1
 8018b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b56:	2a78      	cmp	r2, #120	; 0x78
 8018b58:	d809      	bhi.n	8018b6e <_printf_i+0x2e>
 8018b5a:	2a62      	cmp	r2, #98	; 0x62
 8018b5c:	d80b      	bhi.n	8018b76 <_printf_i+0x36>
 8018b5e:	2a00      	cmp	r2, #0
 8018b60:	d100      	bne.n	8018b64 <_printf_i+0x24>
 8018b62:	e0be      	b.n	8018ce2 <_printf_i+0x1a2>
 8018b64:	497c      	ldr	r1, [pc, #496]	; (8018d58 <_printf_i+0x218>)
 8018b66:	9103      	str	r1, [sp, #12]
 8018b68:	2a58      	cmp	r2, #88	; 0x58
 8018b6a:	d100      	bne.n	8018b6e <_printf_i+0x2e>
 8018b6c:	e093      	b.n	8018c96 <_printf_i+0x156>
 8018b6e:	0026      	movs	r6, r4
 8018b70:	3642      	adds	r6, #66	; 0x42
 8018b72:	7032      	strb	r2, [r6, #0]
 8018b74:	e022      	b.n	8018bbc <_printf_i+0x7c>
 8018b76:	0010      	movs	r0, r2
 8018b78:	3863      	subs	r0, #99	; 0x63
 8018b7a:	2815      	cmp	r0, #21
 8018b7c:	d8f7      	bhi.n	8018b6e <_printf_i+0x2e>
 8018b7e:	f7f3 fed1 	bl	800c924 <__gnu_thumb1_case_shi>
 8018b82:	0016      	.short	0x0016
 8018b84:	fff6001f 	.word	0xfff6001f
 8018b88:	fff6fff6 	.word	0xfff6fff6
 8018b8c:	001ffff6 	.word	0x001ffff6
 8018b90:	fff6fff6 	.word	0xfff6fff6
 8018b94:	fff6fff6 	.word	0xfff6fff6
 8018b98:	003600a3 	.word	0x003600a3
 8018b9c:	fff60083 	.word	0xfff60083
 8018ba0:	00b4fff6 	.word	0x00b4fff6
 8018ba4:	0036fff6 	.word	0x0036fff6
 8018ba8:	fff6fff6 	.word	0xfff6fff6
 8018bac:	0087      	.short	0x0087
 8018bae:	0026      	movs	r6, r4
 8018bb0:	681a      	ldr	r2, [r3, #0]
 8018bb2:	3642      	adds	r6, #66	; 0x42
 8018bb4:	1d11      	adds	r1, r2, #4
 8018bb6:	6019      	str	r1, [r3, #0]
 8018bb8:	6813      	ldr	r3, [r2, #0]
 8018bba:	7033      	strb	r3, [r6, #0]
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	e0a2      	b.n	8018d06 <_printf_i+0x1c6>
 8018bc0:	6818      	ldr	r0, [r3, #0]
 8018bc2:	6809      	ldr	r1, [r1, #0]
 8018bc4:	1d02      	adds	r2, r0, #4
 8018bc6:	060d      	lsls	r5, r1, #24
 8018bc8:	d50b      	bpl.n	8018be2 <_printf_i+0xa2>
 8018bca:	6805      	ldr	r5, [r0, #0]
 8018bcc:	601a      	str	r2, [r3, #0]
 8018bce:	2d00      	cmp	r5, #0
 8018bd0:	da03      	bge.n	8018bda <_printf_i+0x9a>
 8018bd2:	232d      	movs	r3, #45	; 0x2d
 8018bd4:	9a04      	ldr	r2, [sp, #16]
 8018bd6:	426d      	negs	r5, r5
 8018bd8:	7013      	strb	r3, [r2, #0]
 8018bda:	4b5f      	ldr	r3, [pc, #380]	; (8018d58 <_printf_i+0x218>)
 8018bdc:	270a      	movs	r7, #10
 8018bde:	9303      	str	r3, [sp, #12]
 8018be0:	e01b      	b.n	8018c1a <_printf_i+0xda>
 8018be2:	6805      	ldr	r5, [r0, #0]
 8018be4:	601a      	str	r2, [r3, #0]
 8018be6:	0649      	lsls	r1, r1, #25
 8018be8:	d5f1      	bpl.n	8018bce <_printf_i+0x8e>
 8018bea:	b22d      	sxth	r5, r5
 8018bec:	e7ef      	b.n	8018bce <_printf_i+0x8e>
 8018bee:	680d      	ldr	r5, [r1, #0]
 8018bf0:	6819      	ldr	r1, [r3, #0]
 8018bf2:	1d08      	adds	r0, r1, #4
 8018bf4:	6018      	str	r0, [r3, #0]
 8018bf6:	062e      	lsls	r6, r5, #24
 8018bf8:	d501      	bpl.n	8018bfe <_printf_i+0xbe>
 8018bfa:	680d      	ldr	r5, [r1, #0]
 8018bfc:	e003      	b.n	8018c06 <_printf_i+0xc6>
 8018bfe:	066d      	lsls	r5, r5, #25
 8018c00:	d5fb      	bpl.n	8018bfa <_printf_i+0xba>
 8018c02:	680d      	ldr	r5, [r1, #0]
 8018c04:	b2ad      	uxth	r5, r5
 8018c06:	4b54      	ldr	r3, [pc, #336]	; (8018d58 <_printf_i+0x218>)
 8018c08:	2708      	movs	r7, #8
 8018c0a:	9303      	str	r3, [sp, #12]
 8018c0c:	2a6f      	cmp	r2, #111	; 0x6f
 8018c0e:	d000      	beq.n	8018c12 <_printf_i+0xd2>
 8018c10:	3702      	adds	r7, #2
 8018c12:	0023      	movs	r3, r4
 8018c14:	2200      	movs	r2, #0
 8018c16:	3343      	adds	r3, #67	; 0x43
 8018c18:	701a      	strb	r2, [r3, #0]
 8018c1a:	6863      	ldr	r3, [r4, #4]
 8018c1c:	60a3      	str	r3, [r4, #8]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	db03      	blt.n	8018c2a <_printf_i+0xea>
 8018c22:	2104      	movs	r1, #4
 8018c24:	6822      	ldr	r2, [r4, #0]
 8018c26:	438a      	bics	r2, r1
 8018c28:	6022      	str	r2, [r4, #0]
 8018c2a:	2d00      	cmp	r5, #0
 8018c2c:	d102      	bne.n	8018c34 <_printf_i+0xf4>
 8018c2e:	9e04      	ldr	r6, [sp, #16]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d00c      	beq.n	8018c4e <_printf_i+0x10e>
 8018c34:	9e04      	ldr	r6, [sp, #16]
 8018c36:	0028      	movs	r0, r5
 8018c38:	0039      	movs	r1, r7
 8018c3a:	f7f3 ff03 	bl	800ca44 <__aeabi_uidivmod>
 8018c3e:	9b03      	ldr	r3, [sp, #12]
 8018c40:	3e01      	subs	r6, #1
 8018c42:	5c5b      	ldrb	r3, [r3, r1]
 8018c44:	7033      	strb	r3, [r6, #0]
 8018c46:	002b      	movs	r3, r5
 8018c48:	0005      	movs	r5, r0
 8018c4a:	429f      	cmp	r7, r3
 8018c4c:	d9f3      	bls.n	8018c36 <_printf_i+0xf6>
 8018c4e:	2f08      	cmp	r7, #8
 8018c50:	d109      	bne.n	8018c66 <_printf_i+0x126>
 8018c52:	6823      	ldr	r3, [r4, #0]
 8018c54:	07db      	lsls	r3, r3, #31
 8018c56:	d506      	bpl.n	8018c66 <_printf_i+0x126>
 8018c58:	6862      	ldr	r2, [r4, #4]
 8018c5a:	6923      	ldr	r3, [r4, #16]
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	dc02      	bgt.n	8018c66 <_printf_i+0x126>
 8018c60:	2330      	movs	r3, #48	; 0x30
 8018c62:	3e01      	subs	r6, #1
 8018c64:	7033      	strb	r3, [r6, #0]
 8018c66:	9b04      	ldr	r3, [sp, #16]
 8018c68:	1b9b      	subs	r3, r3, r6
 8018c6a:	6123      	str	r3, [r4, #16]
 8018c6c:	9b07      	ldr	r3, [sp, #28]
 8018c6e:	0021      	movs	r1, r4
 8018c70:	9300      	str	r3, [sp, #0]
 8018c72:	9805      	ldr	r0, [sp, #20]
 8018c74:	9b06      	ldr	r3, [sp, #24]
 8018c76:	aa09      	add	r2, sp, #36	; 0x24
 8018c78:	f7ff fef2 	bl	8018a60 <_printf_common>
 8018c7c:	3001      	adds	r0, #1
 8018c7e:	d147      	bne.n	8018d10 <_printf_i+0x1d0>
 8018c80:	2001      	movs	r0, #1
 8018c82:	4240      	negs	r0, r0
 8018c84:	b00b      	add	sp, #44	; 0x2c
 8018c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c88:	2220      	movs	r2, #32
 8018c8a:	6809      	ldr	r1, [r1, #0]
 8018c8c:	430a      	orrs	r2, r1
 8018c8e:	6022      	str	r2, [r4, #0]
 8018c90:	2278      	movs	r2, #120	; 0x78
 8018c92:	4932      	ldr	r1, [pc, #200]	; (8018d5c <_printf_i+0x21c>)
 8018c94:	9103      	str	r1, [sp, #12]
 8018c96:	0021      	movs	r1, r4
 8018c98:	3145      	adds	r1, #69	; 0x45
 8018c9a:	700a      	strb	r2, [r1, #0]
 8018c9c:	6819      	ldr	r1, [r3, #0]
 8018c9e:	6822      	ldr	r2, [r4, #0]
 8018ca0:	c920      	ldmia	r1!, {r5}
 8018ca2:	0610      	lsls	r0, r2, #24
 8018ca4:	d402      	bmi.n	8018cac <_printf_i+0x16c>
 8018ca6:	0650      	lsls	r0, r2, #25
 8018ca8:	d500      	bpl.n	8018cac <_printf_i+0x16c>
 8018caa:	b2ad      	uxth	r5, r5
 8018cac:	6019      	str	r1, [r3, #0]
 8018cae:	07d3      	lsls	r3, r2, #31
 8018cb0:	d502      	bpl.n	8018cb8 <_printf_i+0x178>
 8018cb2:	2320      	movs	r3, #32
 8018cb4:	4313      	orrs	r3, r2
 8018cb6:	6023      	str	r3, [r4, #0]
 8018cb8:	2710      	movs	r7, #16
 8018cba:	2d00      	cmp	r5, #0
 8018cbc:	d1a9      	bne.n	8018c12 <_printf_i+0xd2>
 8018cbe:	2220      	movs	r2, #32
 8018cc0:	6823      	ldr	r3, [r4, #0]
 8018cc2:	4393      	bics	r3, r2
 8018cc4:	6023      	str	r3, [r4, #0]
 8018cc6:	e7a4      	b.n	8018c12 <_printf_i+0xd2>
 8018cc8:	681a      	ldr	r2, [r3, #0]
 8018cca:	680d      	ldr	r5, [r1, #0]
 8018ccc:	1d10      	adds	r0, r2, #4
 8018cce:	6949      	ldr	r1, [r1, #20]
 8018cd0:	6018      	str	r0, [r3, #0]
 8018cd2:	6813      	ldr	r3, [r2, #0]
 8018cd4:	062e      	lsls	r6, r5, #24
 8018cd6:	d501      	bpl.n	8018cdc <_printf_i+0x19c>
 8018cd8:	6019      	str	r1, [r3, #0]
 8018cda:	e002      	b.n	8018ce2 <_printf_i+0x1a2>
 8018cdc:	066d      	lsls	r5, r5, #25
 8018cde:	d5fb      	bpl.n	8018cd8 <_printf_i+0x198>
 8018ce0:	8019      	strh	r1, [r3, #0]
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	9e04      	ldr	r6, [sp, #16]
 8018ce6:	6123      	str	r3, [r4, #16]
 8018ce8:	e7c0      	b.n	8018c6c <_printf_i+0x12c>
 8018cea:	681a      	ldr	r2, [r3, #0]
 8018cec:	1d11      	adds	r1, r2, #4
 8018cee:	6019      	str	r1, [r3, #0]
 8018cf0:	6816      	ldr	r6, [r2, #0]
 8018cf2:	2100      	movs	r1, #0
 8018cf4:	0030      	movs	r0, r6
 8018cf6:	6862      	ldr	r2, [r4, #4]
 8018cf8:	f000 fd07 	bl	801970a <memchr>
 8018cfc:	2800      	cmp	r0, #0
 8018cfe:	d001      	beq.n	8018d04 <_printf_i+0x1c4>
 8018d00:	1b80      	subs	r0, r0, r6
 8018d02:	6060      	str	r0, [r4, #4]
 8018d04:	6863      	ldr	r3, [r4, #4]
 8018d06:	6123      	str	r3, [r4, #16]
 8018d08:	2300      	movs	r3, #0
 8018d0a:	9a04      	ldr	r2, [sp, #16]
 8018d0c:	7013      	strb	r3, [r2, #0]
 8018d0e:	e7ad      	b.n	8018c6c <_printf_i+0x12c>
 8018d10:	0032      	movs	r2, r6
 8018d12:	6923      	ldr	r3, [r4, #16]
 8018d14:	9906      	ldr	r1, [sp, #24]
 8018d16:	9805      	ldr	r0, [sp, #20]
 8018d18:	9d07      	ldr	r5, [sp, #28]
 8018d1a:	47a8      	blx	r5
 8018d1c:	3001      	adds	r0, #1
 8018d1e:	d0af      	beq.n	8018c80 <_printf_i+0x140>
 8018d20:	6823      	ldr	r3, [r4, #0]
 8018d22:	079b      	lsls	r3, r3, #30
 8018d24:	d415      	bmi.n	8018d52 <_printf_i+0x212>
 8018d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d28:	68e0      	ldr	r0, [r4, #12]
 8018d2a:	4298      	cmp	r0, r3
 8018d2c:	daaa      	bge.n	8018c84 <_printf_i+0x144>
 8018d2e:	0018      	movs	r0, r3
 8018d30:	e7a8      	b.n	8018c84 <_printf_i+0x144>
 8018d32:	0022      	movs	r2, r4
 8018d34:	2301      	movs	r3, #1
 8018d36:	9906      	ldr	r1, [sp, #24]
 8018d38:	9805      	ldr	r0, [sp, #20]
 8018d3a:	9e07      	ldr	r6, [sp, #28]
 8018d3c:	3219      	adds	r2, #25
 8018d3e:	47b0      	blx	r6
 8018d40:	3001      	adds	r0, #1
 8018d42:	d09d      	beq.n	8018c80 <_printf_i+0x140>
 8018d44:	3501      	adds	r5, #1
 8018d46:	68e3      	ldr	r3, [r4, #12]
 8018d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d4a:	1a9b      	subs	r3, r3, r2
 8018d4c:	42ab      	cmp	r3, r5
 8018d4e:	dcf0      	bgt.n	8018d32 <_printf_i+0x1f2>
 8018d50:	e7e9      	b.n	8018d26 <_printf_i+0x1e6>
 8018d52:	2500      	movs	r5, #0
 8018d54:	e7f7      	b.n	8018d46 <_printf_i+0x206>
 8018d56:	46c0      	nop			; (mov r8, r8)
 8018d58:	0801e32b 	.word	0x0801e32b
 8018d5c:	0801e33c 	.word	0x0801e33c

08018d60 <_scanf_float>:
 8018d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d62:	b08b      	sub	sp, #44	; 0x2c
 8018d64:	0016      	movs	r6, r2
 8018d66:	9002      	str	r0, [sp, #8]
 8018d68:	22ae      	movs	r2, #174	; 0xae
 8018d6a:	2000      	movs	r0, #0
 8018d6c:	9307      	str	r3, [sp, #28]
 8018d6e:	688b      	ldr	r3, [r1, #8]
 8018d70:	000f      	movs	r7, r1
 8018d72:	1e59      	subs	r1, r3, #1
 8018d74:	0052      	lsls	r2, r2, #1
 8018d76:	9006      	str	r0, [sp, #24]
 8018d78:	4291      	cmp	r1, r2
 8018d7a:	d905      	bls.n	8018d88 <_scanf_float+0x28>
 8018d7c:	3b5e      	subs	r3, #94	; 0x5e
 8018d7e:	3bff      	subs	r3, #255	; 0xff
 8018d80:	9306      	str	r3, [sp, #24]
 8018d82:	235e      	movs	r3, #94	; 0x5e
 8018d84:	33ff      	adds	r3, #255	; 0xff
 8018d86:	60bb      	str	r3, [r7, #8]
 8018d88:	23f0      	movs	r3, #240	; 0xf0
 8018d8a:	683a      	ldr	r2, [r7, #0]
 8018d8c:	00db      	lsls	r3, r3, #3
 8018d8e:	4313      	orrs	r3, r2
 8018d90:	603b      	str	r3, [r7, #0]
 8018d92:	003b      	movs	r3, r7
 8018d94:	2400      	movs	r4, #0
 8018d96:	331c      	adds	r3, #28
 8018d98:	001d      	movs	r5, r3
 8018d9a:	9304      	str	r3, [sp, #16]
 8018d9c:	9403      	str	r4, [sp, #12]
 8018d9e:	9409      	str	r4, [sp, #36]	; 0x24
 8018da0:	9408      	str	r4, [sp, #32]
 8018da2:	9401      	str	r4, [sp, #4]
 8018da4:	9405      	str	r4, [sp, #20]
 8018da6:	68ba      	ldr	r2, [r7, #8]
 8018da8:	2a00      	cmp	r2, #0
 8018daa:	d00a      	beq.n	8018dc2 <_scanf_float+0x62>
 8018dac:	6833      	ldr	r3, [r6, #0]
 8018dae:	781b      	ldrb	r3, [r3, #0]
 8018db0:	2b4e      	cmp	r3, #78	; 0x4e
 8018db2:	d844      	bhi.n	8018e3e <_scanf_float+0xde>
 8018db4:	0018      	movs	r0, r3
 8018db6:	2b40      	cmp	r3, #64	; 0x40
 8018db8:	d82c      	bhi.n	8018e14 <_scanf_float+0xb4>
 8018dba:	382b      	subs	r0, #43	; 0x2b
 8018dbc:	b2c1      	uxtb	r1, r0
 8018dbe:	290e      	cmp	r1, #14
 8018dc0:	d92a      	bls.n	8018e18 <_scanf_float+0xb8>
 8018dc2:	9b01      	ldr	r3, [sp, #4]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d003      	beq.n	8018dd0 <_scanf_float+0x70>
 8018dc8:	683b      	ldr	r3, [r7, #0]
 8018dca:	4aa3      	ldr	r2, [pc, #652]	; (8019058 <_scanf_float+0x2f8>)
 8018dcc:	4013      	ands	r3, r2
 8018dce:	603b      	str	r3, [r7, #0]
 8018dd0:	9b03      	ldr	r3, [sp, #12]
 8018dd2:	3b01      	subs	r3, #1
 8018dd4:	2b01      	cmp	r3, #1
 8018dd6:	d900      	bls.n	8018dda <_scanf_float+0x7a>
 8018dd8:	e0f9      	b.n	8018fce <_scanf_float+0x26e>
 8018dda:	24be      	movs	r4, #190	; 0xbe
 8018ddc:	0064      	lsls	r4, r4, #1
 8018dde:	9b04      	ldr	r3, [sp, #16]
 8018de0:	429d      	cmp	r5, r3
 8018de2:	d900      	bls.n	8018de6 <_scanf_float+0x86>
 8018de4:	e0e9      	b.n	8018fba <_scanf_float+0x25a>
 8018de6:	2301      	movs	r3, #1
 8018de8:	9303      	str	r3, [sp, #12]
 8018dea:	e183      	b.n	80190f4 <_scanf_float+0x394>
 8018dec:	0018      	movs	r0, r3
 8018dee:	3861      	subs	r0, #97	; 0x61
 8018df0:	280d      	cmp	r0, #13
 8018df2:	d8e6      	bhi.n	8018dc2 <_scanf_float+0x62>
 8018df4:	f7f3 fd96 	bl	800c924 <__gnu_thumb1_case_shi>
 8018df8:	ffe50083 	.word	0xffe50083
 8018dfc:	ffe5ffe5 	.word	0xffe5ffe5
 8018e00:	00a200b6 	.word	0x00a200b6
 8018e04:	ffe5ffe5 	.word	0xffe5ffe5
 8018e08:	ffe50089 	.word	0xffe50089
 8018e0c:	ffe5ffe5 	.word	0xffe5ffe5
 8018e10:	0065ffe5 	.word	0x0065ffe5
 8018e14:	3841      	subs	r0, #65	; 0x41
 8018e16:	e7eb      	b.n	8018df0 <_scanf_float+0x90>
 8018e18:	280e      	cmp	r0, #14
 8018e1a:	d8d2      	bhi.n	8018dc2 <_scanf_float+0x62>
 8018e1c:	f7f3 fd82 	bl	800c924 <__gnu_thumb1_case_shi>
 8018e20:	ffd1004b 	.word	0xffd1004b
 8018e24:	0098004b 	.word	0x0098004b
 8018e28:	0020ffd1 	.word	0x0020ffd1
 8018e2c:	00400040 	.word	0x00400040
 8018e30:	00400040 	.word	0x00400040
 8018e34:	00400040 	.word	0x00400040
 8018e38:	00400040 	.word	0x00400040
 8018e3c:	0040      	.short	0x0040
 8018e3e:	2b6e      	cmp	r3, #110	; 0x6e
 8018e40:	d809      	bhi.n	8018e56 <_scanf_float+0xf6>
 8018e42:	2b60      	cmp	r3, #96	; 0x60
 8018e44:	d8d2      	bhi.n	8018dec <_scanf_float+0x8c>
 8018e46:	2b54      	cmp	r3, #84	; 0x54
 8018e48:	d07d      	beq.n	8018f46 <_scanf_float+0x1e6>
 8018e4a:	2b59      	cmp	r3, #89	; 0x59
 8018e4c:	d1b9      	bne.n	8018dc2 <_scanf_float+0x62>
 8018e4e:	2c07      	cmp	r4, #7
 8018e50:	d1b7      	bne.n	8018dc2 <_scanf_float+0x62>
 8018e52:	2408      	movs	r4, #8
 8018e54:	e02c      	b.n	8018eb0 <_scanf_float+0x150>
 8018e56:	2b74      	cmp	r3, #116	; 0x74
 8018e58:	d075      	beq.n	8018f46 <_scanf_float+0x1e6>
 8018e5a:	2b79      	cmp	r3, #121	; 0x79
 8018e5c:	d0f7      	beq.n	8018e4e <_scanf_float+0xee>
 8018e5e:	e7b0      	b.n	8018dc2 <_scanf_float+0x62>
 8018e60:	6839      	ldr	r1, [r7, #0]
 8018e62:	05c8      	lsls	r0, r1, #23
 8018e64:	d51c      	bpl.n	8018ea0 <_scanf_float+0x140>
 8018e66:	2380      	movs	r3, #128	; 0x80
 8018e68:	4399      	bics	r1, r3
 8018e6a:	9b01      	ldr	r3, [sp, #4]
 8018e6c:	6039      	str	r1, [r7, #0]
 8018e6e:	3301      	adds	r3, #1
 8018e70:	9301      	str	r3, [sp, #4]
 8018e72:	9b06      	ldr	r3, [sp, #24]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d003      	beq.n	8018e80 <_scanf_float+0x120>
 8018e78:	3b01      	subs	r3, #1
 8018e7a:	3201      	adds	r2, #1
 8018e7c:	9306      	str	r3, [sp, #24]
 8018e7e:	60ba      	str	r2, [r7, #8]
 8018e80:	68bb      	ldr	r3, [r7, #8]
 8018e82:	3b01      	subs	r3, #1
 8018e84:	60bb      	str	r3, [r7, #8]
 8018e86:	693b      	ldr	r3, [r7, #16]
 8018e88:	3301      	adds	r3, #1
 8018e8a:	613b      	str	r3, [r7, #16]
 8018e8c:	6873      	ldr	r3, [r6, #4]
 8018e8e:	3b01      	subs	r3, #1
 8018e90:	6073      	str	r3, [r6, #4]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	dc00      	bgt.n	8018e98 <_scanf_float+0x138>
 8018e96:	e086      	b.n	8018fa6 <_scanf_float+0x246>
 8018e98:	6833      	ldr	r3, [r6, #0]
 8018e9a:	3301      	adds	r3, #1
 8018e9c:	6033      	str	r3, [r6, #0]
 8018e9e:	e782      	b.n	8018da6 <_scanf_float+0x46>
 8018ea0:	9a03      	ldr	r2, [sp, #12]
 8018ea2:	1912      	adds	r2, r2, r4
 8018ea4:	2a00      	cmp	r2, #0
 8018ea6:	d18c      	bne.n	8018dc2 <_scanf_float+0x62>
 8018ea8:	683a      	ldr	r2, [r7, #0]
 8018eaa:	496c      	ldr	r1, [pc, #432]	; (801905c <_scanf_float+0x2fc>)
 8018eac:	400a      	ands	r2, r1
 8018eae:	603a      	str	r2, [r7, #0]
 8018eb0:	702b      	strb	r3, [r5, #0]
 8018eb2:	3501      	adds	r5, #1
 8018eb4:	e7e4      	b.n	8018e80 <_scanf_float+0x120>
 8018eb6:	2180      	movs	r1, #128	; 0x80
 8018eb8:	683a      	ldr	r2, [r7, #0]
 8018eba:	420a      	tst	r2, r1
 8018ebc:	d081      	beq.n	8018dc2 <_scanf_float+0x62>
 8018ebe:	438a      	bics	r2, r1
 8018ec0:	e7f5      	b.n	8018eae <_scanf_float+0x14e>
 8018ec2:	9a03      	ldr	r2, [sp, #12]
 8018ec4:	2a00      	cmp	r2, #0
 8018ec6:	d10f      	bne.n	8018ee8 <_scanf_float+0x188>
 8018ec8:	9a01      	ldr	r2, [sp, #4]
 8018eca:	2a00      	cmp	r2, #0
 8018ecc:	d10f      	bne.n	8018eee <_scanf_float+0x18e>
 8018ece:	683a      	ldr	r2, [r7, #0]
 8018ed0:	21e0      	movs	r1, #224	; 0xe0
 8018ed2:	0010      	movs	r0, r2
 8018ed4:	00c9      	lsls	r1, r1, #3
 8018ed6:	4008      	ands	r0, r1
 8018ed8:	4288      	cmp	r0, r1
 8018eda:	d108      	bne.n	8018eee <_scanf_float+0x18e>
 8018edc:	4960      	ldr	r1, [pc, #384]	; (8019060 <_scanf_float+0x300>)
 8018ede:	400a      	ands	r2, r1
 8018ee0:	603a      	str	r2, [r7, #0]
 8018ee2:	2201      	movs	r2, #1
 8018ee4:	9203      	str	r2, [sp, #12]
 8018ee6:	e7e3      	b.n	8018eb0 <_scanf_float+0x150>
 8018ee8:	9a03      	ldr	r2, [sp, #12]
 8018eea:	2a02      	cmp	r2, #2
 8018eec:	d059      	beq.n	8018fa2 <_scanf_float+0x242>
 8018eee:	2c01      	cmp	r4, #1
 8018ef0:	d002      	beq.n	8018ef8 <_scanf_float+0x198>
 8018ef2:	2c04      	cmp	r4, #4
 8018ef4:	d000      	beq.n	8018ef8 <_scanf_float+0x198>
 8018ef6:	e764      	b.n	8018dc2 <_scanf_float+0x62>
 8018ef8:	3401      	adds	r4, #1
 8018efa:	b2e4      	uxtb	r4, r4
 8018efc:	e7d8      	b.n	8018eb0 <_scanf_float+0x150>
 8018efe:	9a03      	ldr	r2, [sp, #12]
 8018f00:	2a01      	cmp	r2, #1
 8018f02:	d000      	beq.n	8018f06 <_scanf_float+0x1a6>
 8018f04:	e75d      	b.n	8018dc2 <_scanf_float+0x62>
 8018f06:	2202      	movs	r2, #2
 8018f08:	e7ec      	b.n	8018ee4 <_scanf_float+0x184>
 8018f0a:	2c00      	cmp	r4, #0
 8018f0c:	d110      	bne.n	8018f30 <_scanf_float+0x1d0>
 8018f0e:	9a01      	ldr	r2, [sp, #4]
 8018f10:	2a00      	cmp	r2, #0
 8018f12:	d000      	beq.n	8018f16 <_scanf_float+0x1b6>
 8018f14:	e758      	b.n	8018dc8 <_scanf_float+0x68>
 8018f16:	683a      	ldr	r2, [r7, #0]
 8018f18:	21e0      	movs	r1, #224	; 0xe0
 8018f1a:	0010      	movs	r0, r2
 8018f1c:	00c9      	lsls	r1, r1, #3
 8018f1e:	4008      	ands	r0, r1
 8018f20:	4288      	cmp	r0, r1
 8018f22:	d000      	beq.n	8018f26 <_scanf_float+0x1c6>
 8018f24:	e754      	b.n	8018dd0 <_scanf_float+0x70>
 8018f26:	494e      	ldr	r1, [pc, #312]	; (8019060 <_scanf_float+0x300>)
 8018f28:	3401      	adds	r4, #1
 8018f2a:	400a      	ands	r2, r1
 8018f2c:	603a      	str	r2, [r7, #0]
 8018f2e:	e7bf      	b.n	8018eb0 <_scanf_float+0x150>
 8018f30:	21fd      	movs	r1, #253	; 0xfd
 8018f32:	1ee2      	subs	r2, r4, #3
 8018f34:	420a      	tst	r2, r1
 8018f36:	d000      	beq.n	8018f3a <_scanf_float+0x1da>
 8018f38:	e743      	b.n	8018dc2 <_scanf_float+0x62>
 8018f3a:	e7dd      	b.n	8018ef8 <_scanf_float+0x198>
 8018f3c:	2c02      	cmp	r4, #2
 8018f3e:	d000      	beq.n	8018f42 <_scanf_float+0x1e2>
 8018f40:	e73f      	b.n	8018dc2 <_scanf_float+0x62>
 8018f42:	2403      	movs	r4, #3
 8018f44:	e7b4      	b.n	8018eb0 <_scanf_float+0x150>
 8018f46:	2c06      	cmp	r4, #6
 8018f48:	d000      	beq.n	8018f4c <_scanf_float+0x1ec>
 8018f4a:	e73a      	b.n	8018dc2 <_scanf_float+0x62>
 8018f4c:	2407      	movs	r4, #7
 8018f4e:	e7af      	b.n	8018eb0 <_scanf_float+0x150>
 8018f50:	683a      	ldr	r2, [r7, #0]
 8018f52:	0591      	lsls	r1, r2, #22
 8018f54:	d400      	bmi.n	8018f58 <_scanf_float+0x1f8>
 8018f56:	e734      	b.n	8018dc2 <_scanf_float+0x62>
 8018f58:	4942      	ldr	r1, [pc, #264]	; (8019064 <_scanf_float+0x304>)
 8018f5a:	400a      	ands	r2, r1
 8018f5c:	603a      	str	r2, [r7, #0]
 8018f5e:	9a01      	ldr	r2, [sp, #4]
 8018f60:	9205      	str	r2, [sp, #20]
 8018f62:	e7a5      	b.n	8018eb0 <_scanf_float+0x150>
 8018f64:	21a0      	movs	r1, #160	; 0xa0
 8018f66:	2080      	movs	r0, #128	; 0x80
 8018f68:	683a      	ldr	r2, [r7, #0]
 8018f6a:	00c9      	lsls	r1, r1, #3
 8018f6c:	4011      	ands	r1, r2
 8018f6e:	00c0      	lsls	r0, r0, #3
 8018f70:	4281      	cmp	r1, r0
 8018f72:	d006      	beq.n	8018f82 <_scanf_float+0x222>
 8018f74:	4202      	tst	r2, r0
 8018f76:	d100      	bne.n	8018f7a <_scanf_float+0x21a>
 8018f78:	e723      	b.n	8018dc2 <_scanf_float+0x62>
 8018f7a:	9901      	ldr	r1, [sp, #4]
 8018f7c:	2900      	cmp	r1, #0
 8018f7e:	d100      	bne.n	8018f82 <_scanf_float+0x222>
 8018f80:	e726      	b.n	8018dd0 <_scanf_float+0x70>
 8018f82:	0591      	lsls	r1, r2, #22
 8018f84:	d404      	bmi.n	8018f90 <_scanf_float+0x230>
 8018f86:	9901      	ldr	r1, [sp, #4]
 8018f88:	9805      	ldr	r0, [sp, #20]
 8018f8a:	9509      	str	r5, [sp, #36]	; 0x24
 8018f8c:	1a09      	subs	r1, r1, r0
 8018f8e:	9108      	str	r1, [sp, #32]
 8018f90:	4933      	ldr	r1, [pc, #204]	; (8019060 <_scanf_float+0x300>)
 8018f92:	400a      	ands	r2, r1
 8018f94:	21c0      	movs	r1, #192	; 0xc0
 8018f96:	0049      	lsls	r1, r1, #1
 8018f98:	430a      	orrs	r2, r1
 8018f9a:	603a      	str	r2, [r7, #0]
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	9201      	str	r2, [sp, #4]
 8018fa0:	e786      	b.n	8018eb0 <_scanf_float+0x150>
 8018fa2:	2203      	movs	r2, #3
 8018fa4:	e79e      	b.n	8018ee4 <_scanf_float+0x184>
 8018fa6:	23c0      	movs	r3, #192	; 0xc0
 8018fa8:	005b      	lsls	r3, r3, #1
 8018faa:	0031      	movs	r1, r6
 8018fac:	58fb      	ldr	r3, [r7, r3]
 8018fae:	9802      	ldr	r0, [sp, #8]
 8018fb0:	4798      	blx	r3
 8018fb2:	2800      	cmp	r0, #0
 8018fb4:	d100      	bne.n	8018fb8 <_scanf_float+0x258>
 8018fb6:	e6f6      	b.n	8018da6 <_scanf_float+0x46>
 8018fb8:	e703      	b.n	8018dc2 <_scanf_float+0x62>
 8018fba:	3d01      	subs	r5, #1
 8018fbc:	593b      	ldr	r3, [r7, r4]
 8018fbe:	0032      	movs	r2, r6
 8018fc0:	7829      	ldrb	r1, [r5, #0]
 8018fc2:	9802      	ldr	r0, [sp, #8]
 8018fc4:	4798      	blx	r3
 8018fc6:	693b      	ldr	r3, [r7, #16]
 8018fc8:	3b01      	subs	r3, #1
 8018fca:	613b      	str	r3, [r7, #16]
 8018fcc:	e707      	b.n	8018dde <_scanf_float+0x7e>
 8018fce:	1e63      	subs	r3, r4, #1
 8018fd0:	2b06      	cmp	r3, #6
 8018fd2:	d80e      	bhi.n	8018ff2 <_scanf_float+0x292>
 8018fd4:	9503      	str	r5, [sp, #12]
 8018fd6:	2c02      	cmp	r4, #2
 8018fd8:	d920      	bls.n	801901c <_scanf_float+0x2bc>
 8018fda:	1b63      	subs	r3, r4, r5
 8018fdc:	b2db      	uxtb	r3, r3
 8018fde:	9306      	str	r3, [sp, #24]
 8018fe0:	9b03      	ldr	r3, [sp, #12]
 8018fe2:	9a06      	ldr	r2, [sp, #24]
 8018fe4:	189b      	adds	r3, r3, r2
 8018fe6:	b2db      	uxtb	r3, r3
 8018fe8:	2b03      	cmp	r3, #3
 8018fea:	d827      	bhi.n	801903c <_scanf_float+0x2dc>
 8018fec:	3c03      	subs	r4, #3
 8018fee:	b2e4      	uxtb	r4, r4
 8018ff0:	1b2d      	subs	r5, r5, r4
 8018ff2:	683b      	ldr	r3, [r7, #0]
 8018ff4:	05da      	lsls	r2, r3, #23
 8018ff6:	d552      	bpl.n	801909e <_scanf_float+0x33e>
 8018ff8:	055b      	lsls	r3, r3, #21
 8018ffa:	d535      	bpl.n	8019068 <_scanf_float+0x308>
 8018ffc:	24be      	movs	r4, #190	; 0xbe
 8018ffe:	0064      	lsls	r4, r4, #1
 8019000:	9b04      	ldr	r3, [sp, #16]
 8019002:	429d      	cmp	r5, r3
 8019004:	d800      	bhi.n	8019008 <_scanf_float+0x2a8>
 8019006:	e6ee      	b.n	8018de6 <_scanf_float+0x86>
 8019008:	3d01      	subs	r5, #1
 801900a:	593b      	ldr	r3, [r7, r4]
 801900c:	0032      	movs	r2, r6
 801900e:	7829      	ldrb	r1, [r5, #0]
 8019010:	9802      	ldr	r0, [sp, #8]
 8019012:	4798      	blx	r3
 8019014:	693b      	ldr	r3, [r7, #16]
 8019016:	3b01      	subs	r3, #1
 8019018:	613b      	str	r3, [r7, #16]
 801901a:	e7f1      	b.n	8019000 <_scanf_float+0x2a0>
 801901c:	24be      	movs	r4, #190	; 0xbe
 801901e:	0064      	lsls	r4, r4, #1
 8019020:	9b04      	ldr	r3, [sp, #16]
 8019022:	429d      	cmp	r5, r3
 8019024:	d800      	bhi.n	8019028 <_scanf_float+0x2c8>
 8019026:	e6de      	b.n	8018de6 <_scanf_float+0x86>
 8019028:	3d01      	subs	r5, #1
 801902a:	593b      	ldr	r3, [r7, r4]
 801902c:	0032      	movs	r2, r6
 801902e:	7829      	ldrb	r1, [r5, #0]
 8019030:	9802      	ldr	r0, [sp, #8]
 8019032:	4798      	blx	r3
 8019034:	693b      	ldr	r3, [r7, #16]
 8019036:	3b01      	subs	r3, #1
 8019038:	613b      	str	r3, [r7, #16]
 801903a:	e7f1      	b.n	8019020 <_scanf_float+0x2c0>
 801903c:	9b03      	ldr	r3, [sp, #12]
 801903e:	0032      	movs	r2, r6
 8019040:	3b01      	subs	r3, #1
 8019042:	7819      	ldrb	r1, [r3, #0]
 8019044:	9303      	str	r3, [sp, #12]
 8019046:	23be      	movs	r3, #190	; 0xbe
 8019048:	005b      	lsls	r3, r3, #1
 801904a:	58fb      	ldr	r3, [r7, r3]
 801904c:	9802      	ldr	r0, [sp, #8]
 801904e:	4798      	blx	r3
 8019050:	693b      	ldr	r3, [r7, #16]
 8019052:	3b01      	subs	r3, #1
 8019054:	613b      	str	r3, [r7, #16]
 8019056:	e7c3      	b.n	8018fe0 <_scanf_float+0x280>
 8019058:	fffffeff 	.word	0xfffffeff
 801905c:	fffffe7f 	.word	0xfffffe7f
 8019060:	fffff87f 	.word	0xfffff87f
 8019064:	fffffd7f 	.word	0xfffffd7f
 8019068:	693b      	ldr	r3, [r7, #16]
 801906a:	1e6c      	subs	r4, r5, #1
 801906c:	7821      	ldrb	r1, [r4, #0]
 801906e:	3b01      	subs	r3, #1
 8019070:	613b      	str	r3, [r7, #16]
 8019072:	2965      	cmp	r1, #101	; 0x65
 8019074:	d00c      	beq.n	8019090 <_scanf_float+0x330>
 8019076:	2945      	cmp	r1, #69	; 0x45
 8019078:	d00a      	beq.n	8019090 <_scanf_float+0x330>
 801907a:	23be      	movs	r3, #190	; 0xbe
 801907c:	005b      	lsls	r3, r3, #1
 801907e:	58fb      	ldr	r3, [r7, r3]
 8019080:	0032      	movs	r2, r6
 8019082:	9802      	ldr	r0, [sp, #8]
 8019084:	4798      	blx	r3
 8019086:	693b      	ldr	r3, [r7, #16]
 8019088:	1eac      	subs	r4, r5, #2
 801908a:	3b01      	subs	r3, #1
 801908c:	7821      	ldrb	r1, [r4, #0]
 801908e:	613b      	str	r3, [r7, #16]
 8019090:	23be      	movs	r3, #190	; 0xbe
 8019092:	005b      	lsls	r3, r3, #1
 8019094:	0032      	movs	r2, r6
 8019096:	58fb      	ldr	r3, [r7, r3]
 8019098:	9802      	ldr	r0, [sp, #8]
 801909a:	4798      	blx	r3
 801909c:	0025      	movs	r5, r4
 801909e:	683a      	ldr	r2, [r7, #0]
 80190a0:	2310      	movs	r3, #16
 80190a2:	0011      	movs	r1, r2
 80190a4:	4019      	ands	r1, r3
 80190a6:	9103      	str	r1, [sp, #12]
 80190a8:	421a      	tst	r2, r3
 80190aa:	d15b      	bne.n	8019164 <_scanf_float+0x404>
 80190ac:	22c0      	movs	r2, #192	; 0xc0
 80190ae:	7029      	strb	r1, [r5, #0]
 80190b0:	683b      	ldr	r3, [r7, #0]
 80190b2:	00d2      	lsls	r2, r2, #3
 80190b4:	4013      	ands	r3, r2
 80190b6:	2280      	movs	r2, #128	; 0x80
 80190b8:	00d2      	lsls	r2, r2, #3
 80190ba:	4293      	cmp	r3, r2
 80190bc:	d11d      	bne.n	80190fa <_scanf_float+0x39a>
 80190be:	9b05      	ldr	r3, [sp, #20]
 80190c0:	9a01      	ldr	r2, [sp, #4]
 80190c2:	9901      	ldr	r1, [sp, #4]
 80190c4:	1a9a      	subs	r2, r3, r2
 80190c6:	428b      	cmp	r3, r1
 80190c8:	d124      	bne.n	8019114 <_scanf_float+0x3b4>
 80190ca:	2200      	movs	r2, #0
 80190cc:	9904      	ldr	r1, [sp, #16]
 80190ce:	9802      	ldr	r0, [sp, #8]
 80190d0:	f7ff f91c 	bl	801830c <_strtod_r>
 80190d4:	9b07      	ldr	r3, [sp, #28]
 80190d6:	683a      	ldr	r2, [r7, #0]
 80190d8:	0004      	movs	r4, r0
 80190da:	000d      	movs	r5, r1
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	0791      	lsls	r1, r2, #30
 80190e0:	d525      	bpl.n	801912e <_scanf_float+0x3ce>
 80190e2:	9907      	ldr	r1, [sp, #28]
 80190e4:	1d1a      	adds	r2, r3, #4
 80190e6:	600a      	str	r2, [r1, #0]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	601c      	str	r4, [r3, #0]
 80190ec:	605d      	str	r5, [r3, #4]
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	3301      	adds	r3, #1
 80190f2:	60fb      	str	r3, [r7, #12]
 80190f4:	9803      	ldr	r0, [sp, #12]
 80190f6:	b00b      	add	sp, #44	; 0x2c
 80190f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190fa:	9b08      	ldr	r3, [sp, #32]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d0e4      	beq.n	80190ca <_scanf_float+0x36a>
 8019100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019102:	9a03      	ldr	r2, [sp, #12]
 8019104:	1c59      	adds	r1, r3, #1
 8019106:	9802      	ldr	r0, [sp, #8]
 8019108:	230a      	movs	r3, #10
 801910a:	f7ff f99b 	bl	8018444 <_strtol_r>
 801910e:	9b08      	ldr	r3, [sp, #32]
 8019110:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019112:	1ac2      	subs	r2, r0, r3
 8019114:	003b      	movs	r3, r7
 8019116:	3370      	adds	r3, #112	; 0x70
 8019118:	33ff      	adds	r3, #255	; 0xff
 801911a:	429d      	cmp	r5, r3
 801911c:	d302      	bcc.n	8019124 <_scanf_float+0x3c4>
 801911e:	003d      	movs	r5, r7
 8019120:	356f      	adds	r5, #111	; 0x6f
 8019122:	35ff      	adds	r5, #255	; 0xff
 8019124:	0028      	movs	r0, r5
 8019126:	4910      	ldr	r1, [pc, #64]	; (8019168 <_scanf_float+0x408>)
 8019128:	f000 f91a 	bl	8019360 <siprintf>
 801912c:	e7cd      	b.n	80190ca <_scanf_float+0x36a>
 801912e:	1d19      	adds	r1, r3, #4
 8019130:	0752      	lsls	r2, r2, #29
 8019132:	d502      	bpl.n	801913a <_scanf_float+0x3da>
 8019134:	9a07      	ldr	r2, [sp, #28]
 8019136:	6011      	str	r1, [r2, #0]
 8019138:	e7d6      	b.n	80190e8 <_scanf_float+0x388>
 801913a:	9a07      	ldr	r2, [sp, #28]
 801913c:	0020      	movs	r0, r4
 801913e:	6011      	str	r1, [r2, #0]
 8019140:	681e      	ldr	r6, [r3, #0]
 8019142:	0022      	movs	r2, r4
 8019144:	002b      	movs	r3, r5
 8019146:	0029      	movs	r1, r5
 8019148:	f7f6 fb04 	bl	800f754 <__aeabi_dcmpun>
 801914c:	2800      	cmp	r0, #0
 801914e:	d004      	beq.n	801915a <_scanf_float+0x3fa>
 8019150:	4806      	ldr	r0, [pc, #24]	; (801916c <_scanf_float+0x40c>)
 8019152:	f000 faf5 	bl	8019740 <nanf>
 8019156:	6030      	str	r0, [r6, #0]
 8019158:	e7c9      	b.n	80190ee <_scanf_float+0x38e>
 801915a:	0020      	movs	r0, r4
 801915c:	0029      	movs	r1, r5
 801915e:	f7f6 fbeb 	bl	800f938 <__aeabi_d2f>
 8019162:	e7f8      	b.n	8019156 <_scanf_float+0x3f6>
 8019164:	2300      	movs	r3, #0
 8019166:	e63f      	b.n	8018de8 <_scanf_float+0x88>
 8019168:	0801e34d 	.word	0x0801e34d
 801916c:	0801e406 	.word	0x0801e406

08019170 <std>:
 8019170:	2300      	movs	r3, #0
 8019172:	b510      	push	{r4, lr}
 8019174:	0004      	movs	r4, r0
 8019176:	6003      	str	r3, [r0, #0]
 8019178:	6043      	str	r3, [r0, #4]
 801917a:	6083      	str	r3, [r0, #8]
 801917c:	8181      	strh	r1, [r0, #12]
 801917e:	6643      	str	r3, [r0, #100]	; 0x64
 8019180:	81c2      	strh	r2, [r0, #14]
 8019182:	6103      	str	r3, [r0, #16]
 8019184:	6143      	str	r3, [r0, #20]
 8019186:	6183      	str	r3, [r0, #24]
 8019188:	0019      	movs	r1, r3
 801918a:	2208      	movs	r2, #8
 801918c:	305c      	adds	r0, #92	; 0x5c
 801918e:	f000 f953 	bl	8019438 <memset>
 8019192:	4b0b      	ldr	r3, [pc, #44]	; (80191c0 <std+0x50>)
 8019194:	6224      	str	r4, [r4, #32]
 8019196:	6263      	str	r3, [r4, #36]	; 0x24
 8019198:	4b0a      	ldr	r3, [pc, #40]	; (80191c4 <std+0x54>)
 801919a:	62a3      	str	r3, [r4, #40]	; 0x28
 801919c:	4b0a      	ldr	r3, [pc, #40]	; (80191c8 <std+0x58>)
 801919e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80191a0:	4b0a      	ldr	r3, [pc, #40]	; (80191cc <std+0x5c>)
 80191a2:	6323      	str	r3, [r4, #48]	; 0x30
 80191a4:	4b0a      	ldr	r3, [pc, #40]	; (80191d0 <std+0x60>)
 80191a6:	429c      	cmp	r4, r3
 80191a8:	d005      	beq.n	80191b6 <std+0x46>
 80191aa:	4b0a      	ldr	r3, [pc, #40]	; (80191d4 <std+0x64>)
 80191ac:	429c      	cmp	r4, r3
 80191ae:	d002      	beq.n	80191b6 <std+0x46>
 80191b0:	4b09      	ldr	r3, [pc, #36]	; (80191d8 <std+0x68>)
 80191b2:	429c      	cmp	r4, r3
 80191b4:	d103      	bne.n	80191be <std+0x4e>
 80191b6:	0020      	movs	r0, r4
 80191b8:	3058      	adds	r0, #88	; 0x58
 80191ba:	f000 fa9b 	bl	80196f4 <__retarget_lock_init_recursive>
 80191be:	bd10      	pop	{r4, pc}
 80191c0:	080193a1 	.word	0x080193a1
 80191c4:	080193c9 	.word	0x080193c9
 80191c8:	08019401 	.word	0x08019401
 80191cc:	0801942d 	.word	0x0801942d
 80191d0:	20004b20 	.word	0x20004b20
 80191d4:	20004b88 	.word	0x20004b88
 80191d8:	20004bf0 	.word	0x20004bf0

080191dc <stdio_exit_handler>:
 80191dc:	b510      	push	{r4, lr}
 80191de:	4a03      	ldr	r2, [pc, #12]	; (80191ec <stdio_exit_handler+0x10>)
 80191e0:	4903      	ldr	r1, [pc, #12]	; (80191f0 <stdio_exit_handler+0x14>)
 80191e2:	4804      	ldr	r0, [pc, #16]	; (80191f4 <stdio_exit_handler+0x18>)
 80191e4:	f000 f86c 	bl	80192c0 <_fwalk_sglue>
 80191e8:	bd10      	pop	{r4, pc}
 80191ea:	46c0      	nop			; (mov r8, r8)
 80191ec:	200000f0 	.word	0x200000f0
 80191f0:	0801b999 	.word	0x0801b999
 80191f4:	20000268 	.word	0x20000268

080191f8 <cleanup_stdio>:
 80191f8:	6841      	ldr	r1, [r0, #4]
 80191fa:	4b0b      	ldr	r3, [pc, #44]	; (8019228 <cleanup_stdio+0x30>)
 80191fc:	b510      	push	{r4, lr}
 80191fe:	0004      	movs	r4, r0
 8019200:	4299      	cmp	r1, r3
 8019202:	d001      	beq.n	8019208 <cleanup_stdio+0x10>
 8019204:	f002 fbc8 	bl	801b998 <_fflush_r>
 8019208:	68a1      	ldr	r1, [r4, #8]
 801920a:	4b08      	ldr	r3, [pc, #32]	; (801922c <cleanup_stdio+0x34>)
 801920c:	4299      	cmp	r1, r3
 801920e:	d002      	beq.n	8019216 <cleanup_stdio+0x1e>
 8019210:	0020      	movs	r0, r4
 8019212:	f002 fbc1 	bl	801b998 <_fflush_r>
 8019216:	68e1      	ldr	r1, [r4, #12]
 8019218:	4b05      	ldr	r3, [pc, #20]	; (8019230 <cleanup_stdio+0x38>)
 801921a:	4299      	cmp	r1, r3
 801921c:	d002      	beq.n	8019224 <cleanup_stdio+0x2c>
 801921e:	0020      	movs	r0, r4
 8019220:	f002 fbba 	bl	801b998 <_fflush_r>
 8019224:	bd10      	pop	{r4, pc}
 8019226:	46c0      	nop			; (mov r8, r8)
 8019228:	20004b20 	.word	0x20004b20
 801922c:	20004b88 	.word	0x20004b88
 8019230:	20004bf0 	.word	0x20004bf0

08019234 <global_stdio_init.part.0>:
 8019234:	b510      	push	{r4, lr}
 8019236:	4b09      	ldr	r3, [pc, #36]	; (801925c <global_stdio_init.part.0+0x28>)
 8019238:	4a09      	ldr	r2, [pc, #36]	; (8019260 <global_stdio_init.part.0+0x2c>)
 801923a:	2104      	movs	r1, #4
 801923c:	601a      	str	r2, [r3, #0]
 801923e:	4809      	ldr	r0, [pc, #36]	; (8019264 <global_stdio_init.part.0+0x30>)
 8019240:	2200      	movs	r2, #0
 8019242:	f7ff ff95 	bl	8019170 <std>
 8019246:	2201      	movs	r2, #1
 8019248:	2109      	movs	r1, #9
 801924a:	4807      	ldr	r0, [pc, #28]	; (8019268 <global_stdio_init.part.0+0x34>)
 801924c:	f7ff ff90 	bl	8019170 <std>
 8019250:	2202      	movs	r2, #2
 8019252:	2112      	movs	r1, #18
 8019254:	4805      	ldr	r0, [pc, #20]	; (801926c <global_stdio_init.part.0+0x38>)
 8019256:	f7ff ff8b 	bl	8019170 <std>
 801925a:	bd10      	pop	{r4, pc}
 801925c:	20004c58 	.word	0x20004c58
 8019260:	080191dd 	.word	0x080191dd
 8019264:	20004b20 	.word	0x20004b20
 8019268:	20004b88 	.word	0x20004b88
 801926c:	20004bf0 	.word	0x20004bf0

08019270 <__sfp_lock_acquire>:
 8019270:	b510      	push	{r4, lr}
 8019272:	4802      	ldr	r0, [pc, #8]	; (801927c <__sfp_lock_acquire+0xc>)
 8019274:	f000 fa3f 	bl	80196f6 <__retarget_lock_acquire_recursive>
 8019278:	bd10      	pop	{r4, pc}
 801927a:	46c0      	nop			; (mov r8, r8)
 801927c:	20004c61 	.word	0x20004c61

08019280 <__sfp_lock_release>:
 8019280:	b510      	push	{r4, lr}
 8019282:	4802      	ldr	r0, [pc, #8]	; (801928c <__sfp_lock_release+0xc>)
 8019284:	f000 fa38 	bl	80196f8 <__retarget_lock_release_recursive>
 8019288:	bd10      	pop	{r4, pc}
 801928a:	46c0      	nop			; (mov r8, r8)
 801928c:	20004c61 	.word	0x20004c61

08019290 <__sinit>:
 8019290:	b510      	push	{r4, lr}
 8019292:	0004      	movs	r4, r0
 8019294:	f7ff ffec 	bl	8019270 <__sfp_lock_acquire>
 8019298:	6a23      	ldr	r3, [r4, #32]
 801929a:	2b00      	cmp	r3, #0
 801929c:	d002      	beq.n	80192a4 <__sinit+0x14>
 801929e:	f7ff ffef 	bl	8019280 <__sfp_lock_release>
 80192a2:	bd10      	pop	{r4, pc}
 80192a4:	4b04      	ldr	r3, [pc, #16]	; (80192b8 <__sinit+0x28>)
 80192a6:	6223      	str	r3, [r4, #32]
 80192a8:	4b04      	ldr	r3, [pc, #16]	; (80192bc <__sinit+0x2c>)
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d1f6      	bne.n	801929e <__sinit+0xe>
 80192b0:	f7ff ffc0 	bl	8019234 <global_stdio_init.part.0>
 80192b4:	e7f3      	b.n	801929e <__sinit+0xe>
 80192b6:	46c0      	nop			; (mov r8, r8)
 80192b8:	080191f9 	.word	0x080191f9
 80192bc:	20004c58 	.word	0x20004c58

080192c0 <_fwalk_sglue>:
 80192c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192c2:	0014      	movs	r4, r2
 80192c4:	2600      	movs	r6, #0
 80192c6:	9000      	str	r0, [sp, #0]
 80192c8:	9101      	str	r1, [sp, #4]
 80192ca:	68a5      	ldr	r5, [r4, #8]
 80192cc:	6867      	ldr	r7, [r4, #4]
 80192ce:	3f01      	subs	r7, #1
 80192d0:	d504      	bpl.n	80192dc <_fwalk_sglue+0x1c>
 80192d2:	6824      	ldr	r4, [r4, #0]
 80192d4:	2c00      	cmp	r4, #0
 80192d6:	d1f8      	bne.n	80192ca <_fwalk_sglue+0xa>
 80192d8:	0030      	movs	r0, r6
 80192da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80192dc:	89ab      	ldrh	r3, [r5, #12]
 80192de:	2b01      	cmp	r3, #1
 80192e0:	d908      	bls.n	80192f4 <_fwalk_sglue+0x34>
 80192e2:	220e      	movs	r2, #14
 80192e4:	5eab      	ldrsh	r3, [r5, r2]
 80192e6:	3301      	adds	r3, #1
 80192e8:	d004      	beq.n	80192f4 <_fwalk_sglue+0x34>
 80192ea:	0029      	movs	r1, r5
 80192ec:	9800      	ldr	r0, [sp, #0]
 80192ee:	9b01      	ldr	r3, [sp, #4]
 80192f0:	4798      	blx	r3
 80192f2:	4306      	orrs	r6, r0
 80192f4:	3568      	adds	r5, #104	; 0x68
 80192f6:	e7ea      	b.n	80192ce <_fwalk_sglue+0xe>

080192f8 <sniprintf>:
 80192f8:	b40c      	push	{r2, r3}
 80192fa:	b530      	push	{r4, r5, lr}
 80192fc:	4b17      	ldr	r3, [pc, #92]	; (801935c <sniprintf+0x64>)
 80192fe:	000c      	movs	r4, r1
 8019300:	681d      	ldr	r5, [r3, #0]
 8019302:	b09d      	sub	sp, #116	; 0x74
 8019304:	2900      	cmp	r1, #0
 8019306:	da08      	bge.n	801931a <sniprintf+0x22>
 8019308:	238b      	movs	r3, #139	; 0x8b
 801930a:	2001      	movs	r0, #1
 801930c:	602b      	str	r3, [r5, #0]
 801930e:	4240      	negs	r0, r0
 8019310:	b01d      	add	sp, #116	; 0x74
 8019312:	bc30      	pop	{r4, r5}
 8019314:	bc08      	pop	{r3}
 8019316:	b002      	add	sp, #8
 8019318:	4718      	bx	r3
 801931a:	2382      	movs	r3, #130	; 0x82
 801931c:	466a      	mov	r2, sp
 801931e:	009b      	lsls	r3, r3, #2
 8019320:	8293      	strh	r3, [r2, #20]
 8019322:	2300      	movs	r3, #0
 8019324:	9002      	str	r0, [sp, #8]
 8019326:	9006      	str	r0, [sp, #24]
 8019328:	4299      	cmp	r1, r3
 801932a:	d000      	beq.n	801932e <sniprintf+0x36>
 801932c:	1e4b      	subs	r3, r1, #1
 801932e:	9304      	str	r3, [sp, #16]
 8019330:	9307      	str	r3, [sp, #28]
 8019332:	2301      	movs	r3, #1
 8019334:	466a      	mov	r2, sp
 8019336:	425b      	negs	r3, r3
 8019338:	82d3      	strh	r3, [r2, #22]
 801933a:	0028      	movs	r0, r5
 801933c:	ab21      	add	r3, sp, #132	; 0x84
 801933e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019340:	a902      	add	r1, sp, #8
 8019342:	9301      	str	r3, [sp, #4]
 8019344:	f002 f99e 	bl	801b684 <_svfiprintf_r>
 8019348:	1c43      	adds	r3, r0, #1
 801934a:	da01      	bge.n	8019350 <sniprintf+0x58>
 801934c:	238b      	movs	r3, #139	; 0x8b
 801934e:	602b      	str	r3, [r5, #0]
 8019350:	2c00      	cmp	r4, #0
 8019352:	d0dd      	beq.n	8019310 <sniprintf+0x18>
 8019354:	2200      	movs	r2, #0
 8019356:	9b02      	ldr	r3, [sp, #8]
 8019358:	701a      	strb	r2, [r3, #0]
 801935a:	e7d9      	b.n	8019310 <sniprintf+0x18>
 801935c:	200002b4 	.word	0x200002b4

08019360 <siprintf>:
 8019360:	b40e      	push	{r1, r2, r3}
 8019362:	b500      	push	{lr}
 8019364:	490b      	ldr	r1, [pc, #44]	; (8019394 <siprintf+0x34>)
 8019366:	b09c      	sub	sp, #112	; 0x70
 8019368:	ab1d      	add	r3, sp, #116	; 0x74
 801936a:	9002      	str	r0, [sp, #8]
 801936c:	9006      	str	r0, [sp, #24]
 801936e:	9107      	str	r1, [sp, #28]
 8019370:	9104      	str	r1, [sp, #16]
 8019372:	4809      	ldr	r0, [pc, #36]	; (8019398 <siprintf+0x38>)
 8019374:	4909      	ldr	r1, [pc, #36]	; (801939c <siprintf+0x3c>)
 8019376:	cb04      	ldmia	r3!, {r2}
 8019378:	9105      	str	r1, [sp, #20]
 801937a:	6800      	ldr	r0, [r0, #0]
 801937c:	a902      	add	r1, sp, #8
 801937e:	9301      	str	r3, [sp, #4]
 8019380:	f002 f980 	bl	801b684 <_svfiprintf_r>
 8019384:	2200      	movs	r2, #0
 8019386:	9b02      	ldr	r3, [sp, #8]
 8019388:	701a      	strb	r2, [r3, #0]
 801938a:	b01c      	add	sp, #112	; 0x70
 801938c:	bc08      	pop	{r3}
 801938e:	b003      	add	sp, #12
 8019390:	4718      	bx	r3
 8019392:	46c0      	nop			; (mov r8, r8)
 8019394:	7fffffff 	.word	0x7fffffff
 8019398:	200002b4 	.word	0x200002b4
 801939c:	ffff0208 	.word	0xffff0208

080193a0 <__sread>:
 80193a0:	b570      	push	{r4, r5, r6, lr}
 80193a2:	000c      	movs	r4, r1
 80193a4:	250e      	movs	r5, #14
 80193a6:	5f49      	ldrsh	r1, [r1, r5]
 80193a8:	f000 f940 	bl	801962c <_read_r>
 80193ac:	2800      	cmp	r0, #0
 80193ae:	db03      	blt.n	80193b8 <__sread+0x18>
 80193b0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80193b2:	181b      	adds	r3, r3, r0
 80193b4:	6563      	str	r3, [r4, #84]	; 0x54
 80193b6:	bd70      	pop	{r4, r5, r6, pc}
 80193b8:	89a3      	ldrh	r3, [r4, #12]
 80193ba:	4a02      	ldr	r2, [pc, #8]	; (80193c4 <__sread+0x24>)
 80193bc:	4013      	ands	r3, r2
 80193be:	81a3      	strh	r3, [r4, #12]
 80193c0:	e7f9      	b.n	80193b6 <__sread+0x16>
 80193c2:	46c0      	nop			; (mov r8, r8)
 80193c4:	ffffefff 	.word	0xffffefff

080193c8 <__swrite>:
 80193c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193ca:	001f      	movs	r7, r3
 80193cc:	898b      	ldrh	r3, [r1, #12]
 80193ce:	0005      	movs	r5, r0
 80193d0:	000c      	movs	r4, r1
 80193d2:	0016      	movs	r6, r2
 80193d4:	05db      	lsls	r3, r3, #23
 80193d6:	d505      	bpl.n	80193e4 <__swrite+0x1c>
 80193d8:	230e      	movs	r3, #14
 80193da:	5ec9      	ldrsh	r1, [r1, r3]
 80193dc:	2200      	movs	r2, #0
 80193de:	2302      	movs	r3, #2
 80193e0:	f000 f910 	bl	8019604 <_lseek_r>
 80193e4:	89a3      	ldrh	r3, [r4, #12]
 80193e6:	4a05      	ldr	r2, [pc, #20]	; (80193fc <__swrite+0x34>)
 80193e8:	0028      	movs	r0, r5
 80193ea:	4013      	ands	r3, r2
 80193ec:	81a3      	strh	r3, [r4, #12]
 80193ee:	0032      	movs	r2, r6
 80193f0:	230e      	movs	r3, #14
 80193f2:	5ee1      	ldrsh	r1, [r4, r3]
 80193f4:	003b      	movs	r3, r7
 80193f6:	f000 f93f 	bl	8019678 <_write_r>
 80193fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193fc:	ffffefff 	.word	0xffffefff

08019400 <__sseek>:
 8019400:	b570      	push	{r4, r5, r6, lr}
 8019402:	000c      	movs	r4, r1
 8019404:	250e      	movs	r5, #14
 8019406:	5f49      	ldrsh	r1, [r1, r5]
 8019408:	f000 f8fc 	bl	8019604 <_lseek_r>
 801940c:	89a3      	ldrh	r3, [r4, #12]
 801940e:	1c42      	adds	r2, r0, #1
 8019410:	d103      	bne.n	801941a <__sseek+0x1a>
 8019412:	4a05      	ldr	r2, [pc, #20]	; (8019428 <__sseek+0x28>)
 8019414:	4013      	ands	r3, r2
 8019416:	81a3      	strh	r3, [r4, #12]
 8019418:	bd70      	pop	{r4, r5, r6, pc}
 801941a:	2280      	movs	r2, #128	; 0x80
 801941c:	0152      	lsls	r2, r2, #5
 801941e:	4313      	orrs	r3, r2
 8019420:	81a3      	strh	r3, [r4, #12]
 8019422:	6560      	str	r0, [r4, #84]	; 0x54
 8019424:	e7f8      	b.n	8019418 <__sseek+0x18>
 8019426:	46c0      	nop			; (mov r8, r8)
 8019428:	ffffefff 	.word	0xffffefff

0801942c <__sclose>:
 801942c:	b510      	push	{r4, lr}
 801942e:	230e      	movs	r3, #14
 8019430:	5ec9      	ldrsh	r1, [r1, r3]
 8019432:	f000 f8d5 	bl	80195e0 <_close_r>
 8019436:	bd10      	pop	{r4, pc}

08019438 <memset>:
 8019438:	0003      	movs	r3, r0
 801943a:	1882      	adds	r2, r0, r2
 801943c:	4293      	cmp	r3, r2
 801943e:	d100      	bne.n	8019442 <memset+0xa>
 8019440:	4770      	bx	lr
 8019442:	7019      	strb	r1, [r3, #0]
 8019444:	3301      	adds	r3, #1
 8019446:	e7f9      	b.n	801943c <memset+0x4>

08019448 <strcat>:
 8019448:	0002      	movs	r2, r0
 801944a:	b510      	push	{r4, lr}
 801944c:	7813      	ldrb	r3, [r2, #0]
 801944e:	0014      	movs	r4, r2
 8019450:	3201      	adds	r2, #1
 8019452:	2b00      	cmp	r3, #0
 8019454:	d1fa      	bne.n	801944c <strcat+0x4>
 8019456:	5cca      	ldrb	r2, [r1, r3]
 8019458:	54e2      	strb	r2, [r4, r3]
 801945a:	3301      	adds	r3, #1
 801945c:	2a00      	cmp	r2, #0
 801945e:	d1fa      	bne.n	8019456 <strcat+0xe>
 8019460:	bd10      	pop	{r4, pc}

08019462 <strchr>:
 8019462:	b2c9      	uxtb	r1, r1
 8019464:	7803      	ldrb	r3, [r0, #0]
 8019466:	2b00      	cmp	r3, #0
 8019468:	d004      	beq.n	8019474 <strchr+0x12>
 801946a:	428b      	cmp	r3, r1
 801946c:	d100      	bne.n	8019470 <strchr+0xe>
 801946e:	4770      	bx	lr
 8019470:	3001      	adds	r0, #1
 8019472:	e7f7      	b.n	8019464 <strchr+0x2>
 8019474:	424b      	negs	r3, r1
 8019476:	4159      	adcs	r1, r3
 8019478:	4249      	negs	r1, r1
 801947a:	4008      	ands	r0, r1
 801947c:	e7f7      	b.n	801946e <strchr+0xc>

0801947e <strncmp>:
 801947e:	b530      	push	{r4, r5, lr}
 8019480:	0005      	movs	r5, r0
 8019482:	1e10      	subs	r0, r2, #0
 8019484:	d00b      	beq.n	801949e <strncmp+0x20>
 8019486:	2400      	movs	r4, #0
 8019488:	3a01      	subs	r2, #1
 801948a:	5d2b      	ldrb	r3, [r5, r4]
 801948c:	5d08      	ldrb	r0, [r1, r4]
 801948e:	4283      	cmp	r3, r0
 8019490:	d104      	bne.n	801949c <strncmp+0x1e>
 8019492:	42a2      	cmp	r2, r4
 8019494:	d002      	beq.n	801949c <strncmp+0x1e>
 8019496:	3401      	adds	r4, #1
 8019498:	2b00      	cmp	r3, #0
 801949a:	d1f6      	bne.n	801948a <strncmp+0xc>
 801949c:	1a18      	subs	r0, r3, r0
 801949e:	bd30      	pop	{r4, r5, pc}

080194a0 <strncpy>:
 80194a0:	0003      	movs	r3, r0
 80194a2:	b530      	push	{r4, r5, lr}
 80194a4:	001d      	movs	r5, r3
 80194a6:	2a00      	cmp	r2, #0
 80194a8:	d006      	beq.n	80194b8 <strncpy+0x18>
 80194aa:	780c      	ldrb	r4, [r1, #0]
 80194ac:	3a01      	subs	r2, #1
 80194ae:	3301      	adds	r3, #1
 80194b0:	702c      	strb	r4, [r5, #0]
 80194b2:	3101      	adds	r1, #1
 80194b4:	2c00      	cmp	r4, #0
 80194b6:	d1f5      	bne.n	80194a4 <strncpy+0x4>
 80194b8:	2100      	movs	r1, #0
 80194ba:	189a      	adds	r2, r3, r2
 80194bc:	4293      	cmp	r3, r2
 80194be:	d100      	bne.n	80194c2 <strncpy+0x22>
 80194c0:	bd30      	pop	{r4, r5, pc}
 80194c2:	7019      	strb	r1, [r3, #0]
 80194c4:	3301      	adds	r3, #1
 80194c6:	e7f9      	b.n	80194bc <strncpy+0x1c>

080194c8 <strtok>:
 80194c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194ca:	4b16      	ldr	r3, [pc, #88]	; (8019524 <strtok+0x5c>)
 80194cc:	0005      	movs	r5, r0
 80194ce:	681f      	ldr	r7, [r3, #0]
 80194d0:	000e      	movs	r6, r1
 80194d2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80194d4:	2c00      	cmp	r4, #0
 80194d6:	d11d      	bne.n	8019514 <strtok+0x4c>
 80194d8:	2050      	movs	r0, #80	; 0x50
 80194da:	f7fe f837 	bl	801754c <malloc>
 80194de:	1e02      	subs	r2, r0, #0
 80194e0:	6478      	str	r0, [r7, #68]	; 0x44
 80194e2:	d104      	bne.n	80194ee <strtok+0x26>
 80194e4:	215b      	movs	r1, #91	; 0x5b
 80194e6:	4b10      	ldr	r3, [pc, #64]	; (8019528 <strtok+0x60>)
 80194e8:	4810      	ldr	r0, [pc, #64]	; (801952c <strtok+0x64>)
 80194ea:	f000 f92d 	bl	8019748 <__assert_func>
 80194ee:	6004      	str	r4, [r0, #0]
 80194f0:	6044      	str	r4, [r0, #4]
 80194f2:	6084      	str	r4, [r0, #8]
 80194f4:	60c4      	str	r4, [r0, #12]
 80194f6:	6104      	str	r4, [r0, #16]
 80194f8:	6144      	str	r4, [r0, #20]
 80194fa:	6184      	str	r4, [r0, #24]
 80194fc:	6284      	str	r4, [r0, #40]	; 0x28
 80194fe:	62c4      	str	r4, [r0, #44]	; 0x2c
 8019500:	6304      	str	r4, [r0, #48]	; 0x30
 8019502:	6344      	str	r4, [r0, #52]	; 0x34
 8019504:	6384      	str	r4, [r0, #56]	; 0x38
 8019506:	63c4      	str	r4, [r0, #60]	; 0x3c
 8019508:	6404      	str	r4, [r0, #64]	; 0x40
 801950a:	6444      	str	r4, [r0, #68]	; 0x44
 801950c:	6484      	str	r4, [r0, #72]	; 0x48
 801950e:	64c4      	str	r4, [r0, #76]	; 0x4c
 8019510:	7704      	strb	r4, [r0, #28]
 8019512:	6244      	str	r4, [r0, #36]	; 0x24
 8019514:	0031      	movs	r1, r6
 8019516:	0028      	movs	r0, r5
 8019518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801951a:	2301      	movs	r3, #1
 801951c:	f000 f808 	bl	8019530 <__strtok_r>
 8019520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019522:	46c0      	nop			; (mov r8, r8)
 8019524:	200002b4 	.word	0x200002b4
 8019528:	0801e352 	.word	0x0801e352
 801952c:	0801e369 	.word	0x0801e369

08019530 <__strtok_r>:
 8019530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019532:	2800      	cmp	r0, #0
 8019534:	d102      	bne.n	801953c <__strtok_r+0xc>
 8019536:	6810      	ldr	r0, [r2, #0]
 8019538:	2800      	cmp	r0, #0
 801953a:	d013      	beq.n	8019564 <__strtok_r+0x34>
 801953c:	0004      	movs	r4, r0
 801953e:	0020      	movs	r0, r4
 8019540:	000e      	movs	r6, r1
 8019542:	7805      	ldrb	r5, [r0, #0]
 8019544:	3401      	adds	r4, #1
 8019546:	7837      	ldrb	r7, [r6, #0]
 8019548:	2f00      	cmp	r7, #0
 801954a:	d104      	bne.n	8019556 <__strtok_r+0x26>
 801954c:	2d00      	cmp	r5, #0
 801954e:	d10f      	bne.n	8019570 <__strtok_r+0x40>
 8019550:	0028      	movs	r0, r5
 8019552:	6015      	str	r5, [r2, #0]
 8019554:	e006      	b.n	8019564 <__strtok_r+0x34>
 8019556:	3601      	adds	r6, #1
 8019558:	42bd      	cmp	r5, r7
 801955a:	d1f4      	bne.n	8019546 <__strtok_r+0x16>
 801955c:	2b00      	cmp	r3, #0
 801955e:	d1ee      	bne.n	801953e <__strtok_r+0xe>
 8019560:	6014      	str	r4, [r2, #0]
 8019562:	7003      	strb	r3, [r0, #0]
 8019564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019566:	002f      	movs	r7, r5
 8019568:	e00f      	b.n	801958a <__strtok_r+0x5a>
 801956a:	3301      	adds	r3, #1
 801956c:	2e00      	cmp	r6, #0
 801956e:	d104      	bne.n	801957a <__strtok_r+0x4a>
 8019570:	0023      	movs	r3, r4
 8019572:	3401      	adds	r4, #1
 8019574:	781d      	ldrb	r5, [r3, #0]
 8019576:	0027      	movs	r7, r4
 8019578:	000b      	movs	r3, r1
 801957a:	781e      	ldrb	r6, [r3, #0]
 801957c:	42b5      	cmp	r5, r6
 801957e:	d1f4      	bne.n	801956a <__strtok_r+0x3a>
 8019580:	2d00      	cmp	r5, #0
 8019582:	d0f0      	beq.n	8019566 <__strtok_r+0x36>
 8019584:	2300      	movs	r3, #0
 8019586:	3c01      	subs	r4, #1
 8019588:	7023      	strb	r3, [r4, #0]
 801958a:	6017      	str	r7, [r2, #0]
 801958c:	e7ea      	b.n	8019564 <__strtok_r+0x34>

0801958e <strtok_r>:
 801958e:	b510      	push	{r4, lr}
 8019590:	2301      	movs	r3, #1
 8019592:	f7ff ffcd 	bl	8019530 <__strtok_r>
 8019596:	bd10      	pop	{r4, pc}

08019598 <strstr>:
 8019598:	780a      	ldrb	r2, [r1, #0]
 801959a:	b530      	push	{r4, r5, lr}
 801959c:	2a00      	cmp	r2, #0
 801959e:	d10c      	bne.n	80195ba <strstr+0x22>
 80195a0:	bd30      	pop	{r4, r5, pc}
 80195a2:	429a      	cmp	r2, r3
 80195a4:	d108      	bne.n	80195b8 <strstr+0x20>
 80195a6:	2301      	movs	r3, #1
 80195a8:	5ccc      	ldrb	r4, [r1, r3]
 80195aa:	2c00      	cmp	r4, #0
 80195ac:	d0f8      	beq.n	80195a0 <strstr+0x8>
 80195ae:	5cc5      	ldrb	r5, [r0, r3]
 80195b0:	42a5      	cmp	r5, r4
 80195b2:	d101      	bne.n	80195b8 <strstr+0x20>
 80195b4:	3301      	adds	r3, #1
 80195b6:	e7f7      	b.n	80195a8 <strstr+0x10>
 80195b8:	3001      	adds	r0, #1
 80195ba:	7803      	ldrb	r3, [r0, #0]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d1f0      	bne.n	80195a2 <strstr+0xa>
 80195c0:	0018      	movs	r0, r3
 80195c2:	e7ed      	b.n	80195a0 <strstr+0x8>

080195c4 <stpcpy>:
 80195c4:	0003      	movs	r3, r0
 80195c6:	780a      	ldrb	r2, [r1, #0]
 80195c8:	0018      	movs	r0, r3
 80195ca:	701a      	strb	r2, [r3, #0]
 80195cc:	3101      	adds	r1, #1
 80195ce:	3301      	adds	r3, #1
 80195d0:	2a00      	cmp	r2, #0
 80195d2:	d1f8      	bne.n	80195c6 <stpcpy+0x2>
 80195d4:	4770      	bx	lr
	...

080195d8 <_localeconv_r>:
 80195d8:	4800      	ldr	r0, [pc, #0]	; (80195dc <_localeconv_r+0x4>)
 80195da:	4770      	bx	lr
 80195dc:	200001ec 	.word	0x200001ec

080195e0 <_close_r>:
 80195e0:	2300      	movs	r3, #0
 80195e2:	b570      	push	{r4, r5, r6, lr}
 80195e4:	4d06      	ldr	r5, [pc, #24]	; (8019600 <_close_r+0x20>)
 80195e6:	0004      	movs	r4, r0
 80195e8:	0008      	movs	r0, r1
 80195ea:	602b      	str	r3, [r5, #0]
 80195ec:	f7fa fb9e 	bl	8013d2c <_close>
 80195f0:	1c43      	adds	r3, r0, #1
 80195f2:	d103      	bne.n	80195fc <_close_r+0x1c>
 80195f4:	682b      	ldr	r3, [r5, #0]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d000      	beq.n	80195fc <_close_r+0x1c>
 80195fa:	6023      	str	r3, [r4, #0]
 80195fc:	bd70      	pop	{r4, r5, r6, pc}
 80195fe:	46c0      	nop			; (mov r8, r8)
 8019600:	20004c5c 	.word	0x20004c5c

08019604 <_lseek_r>:
 8019604:	b570      	push	{r4, r5, r6, lr}
 8019606:	0004      	movs	r4, r0
 8019608:	0008      	movs	r0, r1
 801960a:	0011      	movs	r1, r2
 801960c:	001a      	movs	r2, r3
 801960e:	2300      	movs	r3, #0
 8019610:	4d05      	ldr	r5, [pc, #20]	; (8019628 <_lseek_r+0x24>)
 8019612:	602b      	str	r3, [r5, #0]
 8019614:	f7fa fb96 	bl	8013d44 <_lseek>
 8019618:	1c43      	adds	r3, r0, #1
 801961a:	d103      	bne.n	8019624 <_lseek_r+0x20>
 801961c:	682b      	ldr	r3, [r5, #0]
 801961e:	2b00      	cmp	r3, #0
 8019620:	d000      	beq.n	8019624 <_lseek_r+0x20>
 8019622:	6023      	str	r3, [r4, #0]
 8019624:	bd70      	pop	{r4, r5, r6, pc}
 8019626:	46c0      	nop			; (mov r8, r8)
 8019628:	20004c5c 	.word	0x20004c5c

0801962c <_read_r>:
 801962c:	b570      	push	{r4, r5, r6, lr}
 801962e:	0004      	movs	r4, r0
 8019630:	0008      	movs	r0, r1
 8019632:	0011      	movs	r1, r2
 8019634:	001a      	movs	r2, r3
 8019636:	2300      	movs	r3, #0
 8019638:	4d05      	ldr	r5, [pc, #20]	; (8019650 <_read_r+0x24>)
 801963a:	602b      	str	r3, [r5, #0]
 801963c:	f7fa fb5a 	bl	8013cf4 <_read>
 8019640:	1c43      	adds	r3, r0, #1
 8019642:	d103      	bne.n	801964c <_read_r+0x20>
 8019644:	682b      	ldr	r3, [r5, #0]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d000      	beq.n	801964c <_read_r+0x20>
 801964a:	6023      	str	r3, [r4, #0]
 801964c:	bd70      	pop	{r4, r5, r6, pc}
 801964e:	46c0      	nop			; (mov r8, r8)
 8019650:	20004c5c 	.word	0x20004c5c

08019654 <_sbrk_r>:
 8019654:	2300      	movs	r3, #0
 8019656:	b570      	push	{r4, r5, r6, lr}
 8019658:	4d06      	ldr	r5, [pc, #24]	; (8019674 <_sbrk_r+0x20>)
 801965a:	0004      	movs	r4, r0
 801965c:	0008      	movs	r0, r1
 801965e:	602b      	str	r3, [r5, #0]
 8019660:	f7fa fb72 	bl	8013d48 <_sbrk>
 8019664:	1c43      	adds	r3, r0, #1
 8019666:	d103      	bne.n	8019670 <_sbrk_r+0x1c>
 8019668:	682b      	ldr	r3, [r5, #0]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d000      	beq.n	8019670 <_sbrk_r+0x1c>
 801966e:	6023      	str	r3, [r4, #0]
 8019670:	bd70      	pop	{r4, r5, r6, pc}
 8019672:	46c0      	nop			; (mov r8, r8)
 8019674:	20004c5c 	.word	0x20004c5c

08019678 <_write_r>:
 8019678:	b570      	push	{r4, r5, r6, lr}
 801967a:	0004      	movs	r4, r0
 801967c:	0008      	movs	r0, r1
 801967e:	0011      	movs	r1, r2
 8019680:	001a      	movs	r2, r3
 8019682:	2300      	movs	r3, #0
 8019684:	4d05      	ldr	r5, [pc, #20]	; (801969c <_write_r+0x24>)
 8019686:	602b      	str	r3, [r5, #0]
 8019688:	f7fa fb42 	bl	8013d10 <_write>
 801968c:	1c43      	adds	r3, r0, #1
 801968e:	d103      	bne.n	8019698 <_write_r+0x20>
 8019690:	682b      	ldr	r3, [r5, #0]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d000      	beq.n	8019698 <_write_r+0x20>
 8019696:	6023      	str	r3, [r4, #0]
 8019698:	bd70      	pop	{r4, r5, r6, pc}
 801969a:	46c0      	nop			; (mov r8, r8)
 801969c:	20004c5c 	.word	0x20004c5c

080196a0 <__errno>:
 80196a0:	4b01      	ldr	r3, [pc, #4]	; (80196a8 <__errno+0x8>)
 80196a2:	6818      	ldr	r0, [r3, #0]
 80196a4:	4770      	bx	lr
 80196a6:	46c0      	nop			; (mov r8, r8)
 80196a8:	200002b4 	.word	0x200002b4

080196ac <__libc_init_array>:
 80196ac:	b570      	push	{r4, r5, r6, lr}
 80196ae:	2600      	movs	r6, #0
 80196b0:	4c0c      	ldr	r4, [pc, #48]	; (80196e4 <__libc_init_array+0x38>)
 80196b2:	4d0d      	ldr	r5, [pc, #52]	; (80196e8 <__libc_init_array+0x3c>)
 80196b4:	1b64      	subs	r4, r4, r5
 80196b6:	10a4      	asrs	r4, r4, #2
 80196b8:	42a6      	cmp	r6, r4
 80196ba:	d109      	bne.n	80196d0 <__libc_init_array+0x24>
 80196bc:	2600      	movs	r6, #0
 80196be:	f003 fbef 	bl	801cea0 <_init>
 80196c2:	4c0a      	ldr	r4, [pc, #40]	; (80196ec <__libc_init_array+0x40>)
 80196c4:	4d0a      	ldr	r5, [pc, #40]	; (80196f0 <__libc_init_array+0x44>)
 80196c6:	1b64      	subs	r4, r4, r5
 80196c8:	10a4      	asrs	r4, r4, #2
 80196ca:	42a6      	cmp	r6, r4
 80196cc:	d105      	bne.n	80196da <__libc_init_array+0x2e>
 80196ce:	bd70      	pop	{r4, r5, r6, pc}
 80196d0:	00b3      	lsls	r3, r6, #2
 80196d2:	58eb      	ldr	r3, [r5, r3]
 80196d4:	4798      	blx	r3
 80196d6:	3601      	adds	r6, #1
 80196d8:	e7ee      	b.n	80196b8 <__libc_init_array+0xc>
 80196da:	00b3      	lsls	r3, r6, #2
 80196dc:	58eb      	ldr	r3, [r5, r3]
 80196de:	4798      	blx	r3
 80196e0:	3601      	adds	r6, #1
 80196e2:	e7f2      	b.n	80196ca <__libc_init_array+0x1e>
 80196e4:	0801e678 	.word	0x0801e678
 80196e8:	0801e678 	.word	0x0801e678
 80196ec:	0801e67c 	.word	0x0801e67c
 80196f0:	0801e678 	.word	0x0801e678

080196f4 <__retarget_lock_init_recursive>:
 80196f4:	4770      	bx	lr

080196f6 <__retarget_lock_acquire_recursive>:
 80196f6:	4770      	bx	lr

080196f8 <__retarget_lock_release_recursive>:
 80196f8:	4770      	bx	lr

080196fa <strcpy>:
 80196fa:	0003      	movs	r3, r0
 80196fc:	780a      	ldrb	r2, [r1, #0]
 80196fe:	3101      	adds	r1, #1
 8019700:	701a      	strb	r2, [r3, #0]
 8019702:	3301      	adds	r3, #1
 8019704:	2a00      	cmp	r2, #0
 8019706:	d1f9      	bne.n	80196fc <strcpy+0x2>
 8019708:	4770      	bx	lr

0801970a <memchr>:
 801970a:	b2c9      	uxtb	r1, r1
 801970c:	1882      	adds	r2, r0, r2
 801970e:	4290      	cmp	r0, r2
 8019710:	d101      	bne.n	8019716 <memchr+0xc>
 8019712:	2000      	movs	r0, #0
 8019714:	4770      	bx	lr
 8019716:	7803      	ldrb	r3, [r0, #0]
 8019718:	428b      	cmp	r3, r1
 801971a:	d0fb      	beq.n	8019714 <memchr+0xa>
 801971c:	3001      	adds	r0, #1
 801971e:	e7f6      	b.n	801970e <memchr+0x4>

08019720 <memcpy>:
 8019720:	2300      	movs	r3, #0
 8019722:	b510      	push	{r4, lr}
 8019724:	429a      	cmp	r2, r3
 8019726:	d100      	bne.n	801972a <memcpy+0xa>
 8019728:	bd10      	pop	{r4, pc}
 801972a:	5ccc      	ldrb	r4, [r1, r3]
 801972c:	54c4      	strb	r4, [r0, r3]
 801972e:	3301      	adds	r3, #1
 8019730:	e7f8      	b.n	8019724 <memcpy+0x4>
	...

08019734 <nan>:
 8019734:	2000      	movs	r0, #0
 8019736:	4901      	ldr	r1, [pc, #4]	; (801973c <nan+0x8>)
 8019738:	4770      	bx	lr
 801973a:	46c0      	nop			; (mov r8, r8)
 801973c:	7ff80000 	.word	0x7ff80000

08019740 <nanf>:
 8019740:	4800      	ldr	r0, [pc, #0]	; (8019744 <nanf+0x4>)
 8019742:	4770      	bx	lr
 8019744:	7fc00000 	.word	0x7fc00000

08019748 <__assert_func>:
 8019748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801974a:	0014      	movs	r4, r2
 801974c:	001a      	movs	r2, r3
 801974e:	4b09      	ldr	r3, [pc, #36]	; (8019774 <__assert_func+0x2c>)
 8019750:	0005      	movs	r5, r0
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	000e      	movs	r6, r1
 8019756:	68d8      	ldr	r0, [r3, #12]
 8019758:	4b07      	ldr	r3, [pc, #28]	; (8019778 <__assert_func+0x30>)
 801975a:	2c00      	cmp	r4, #0
 801975c:	d101      	bne.n	8019762 <__assert_func+0x1a>
 801975e:	4b07      	ldr	r3, [pc, #28]	; (801977c <__assert_func+0x34>)
 8019760:	001c      	movs	r4, r3
 8019762:	4907      	ldr	r1, [pc, #28]	; (8019780 <__assert_func+0x38>)
 8019764:	9301      	str	r3, [sp, #4]
 8019766:	9402      	str	r4, [sp, #8]
 8019768:	002b      	movs	r3, r5
 801976a:	9600      	str	r6, [sp, #0]
 801976c:	f002 f940 	bl	801b9f0 <fiprintf>
 8019770:	f002 f961 	bl	801ba36 <abort>
 8019774:	200002b4 	.word	0x200002b4
 8019778:	0801e3cb 	.word	0x0801e3cb
 801977c:	0801e406 	.word	0x0801e406
 8019780:	0801e3d8 	.word	0x0801e3d8

08019784 <quorem>:
 8019784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019786:	6902      	ldr	r2, [r0, #16]
 8019788:	690b      	ldr	r3, [r1, #16]
 801978a:	b089      	sub	sp, #36	; 0x24
 801978c:	0007      	movs	r7, r0
 801978e:	9104      	str	r1, [sp, #16]
 8019790:	2000      	movs	r0, #0
 8019792:	429a      	cmp	r2, r3
 8019794:	db69      	blt.n	801986a <quorem+0xe6>
 8019796:	3b01      	subs	r3, #1
 8019798:	009c      	lsls	r4, r3, #2
 801979a:	9301      	str	r3, [sp, #4]
 801979c:	000b      	movs	r3, r1
 801979e:	3314      	adds	r3, #20
 80197a0:	9306      	str	r3, [sp, #24]
 80197a2:	191b      	adds	r3, r3, r4
 80197a4:	9305      	str	r3, [sp, #20]
 80197a6:	003b      	movs	r3, r7
 80197a8:	3314      	adds	r3, #20
 80197aa:	9303      	str	r3, [sp, #12]
 80197ac:	191c      	adds	r4, r3, r4
 80197ae:	9b05      	ldr	r3, [sp, #20]
 80197b0:	6826      	ldr	r6, [r4, #0]
 80197b2:	681d      	ldr	r5, [r3, #0]
 80197b4:	0030      	movs	r0, r6
 80197b6:	3501      	adds	r5, #1
 80197b8:	0029      	movs	r1, r5
 80197ba:	f7f3 f8bd 	bl	800c938 <__udivsi3>
 80197be:	9002      	str	r0, [sp, #8]
 80197c0:	42ae      	cmp	r6, r5
 80197c2:	d329      	bcc.n	8019818 <quorem+0x94>
 80197c4:	9b06      	ldr	r3, [sp, #24]
 80197c6:	2600      	movs	r6, #0
 80197c8:	469c      	mov	ip, r3
 80197ca:	9d03      	ldr	r5, [sp, #12]
 80197cc:	9606      	str	r6, [sp, #24]
 80197ce:	4662      	mov	r2, ip
 80197d0:	ca08      	ldmia	r2!, {r3}
 80197d2:	6828      	ldr	r0, [r5, #0]
 80197d4:	4694      	mov	ip, r2
 80197d6:	9a02      	ldr	r2, [sp, #8]
 80197d8:	b299      	uxth	r1, r3
 80197da:	4351      	muls	r1, r2
 80197dc:	0c1b      	lsrs	r3, r3, #16
 80197de:	4353      	muls	r3, r2
 80197e0:	1989      	adds	r1, r1, r6
 80197e2:	0c0a      	lsrs	r2, r1, #16
 80197e4:	189b      	adds	r3, r3, r2
 80197e6:	9307      	str	r3, [sp, #28]
 80197e8:	0c1e      	lsrs	r6, r3, #16
 80197ea:	9b06      	ldr	r3, [sp, #24]
 80197ec:	b282      	uxth	r2, r0
 80197ee:	18d2      	adds	r2, r2, r3
 80197f0:	466b      	mov	r3, sp
 80197f2:	b289      	uxth	r1, r1
 80197f4:	8b9b      	ldrh	r3, [r3, #28]
 80197f6:	1a52      	subs	r2, r2, r1
 80197f8:	0c01      	lsrs	r1, r0, #16
 80197fa:	1ac9      	subs	r1, r1, r3
 80197fc:	1413      	asrs	r3, r2, #16
 80197fe:	18cb      	adds	r3, r1, r3
 8019800:	1419      	asrs	r1, r3, #16
 8019802:	b292      	uxth	r2, r2
 8019804:	041b      	lsls	r3, r3, #16
 8019806:	4313      	orrs	r3, r2
 8019808:	c508      	stmia	r5!, {r3}
 801980a:	9b05      	ldr	r3, [sp, #20]
 801980c:	9106      	str	r1, [sp, #24]
 801980e:	4563      	cmp	r3, ip
 8019810:	d2dd      	bcs.n	80197ce <quorem+0x4a>
 8019812:	6823      	ldr	r3, [r4, #0]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d030      	beq.n	801987a <quorem+0xf6>
 8019818:	0038      	movs	r0, r7
 801981a:	9904      	ldr	r1, [sp, #16]
 801981c:	f001 fcda 	bl	801b1d4 <__mcmp>
 8019820:	2800      	cmp	r0, #0
 8019822:	db21      	blt.n	8019868 <quorem+0xe4>
 8019824:	0038      	movs	r0, r7
 8019826:	2600      	movs	r6, #0
 8019828:	9b02      	ldr	r3, [sp, #8]
 801982a:	9c04      	ldr	r4, [sp, #16]
 801982c:	3301      	adds	r3, #1
 801982e:	9302      	str	r3, [sp, #8]
 8019830:	3014      	adds	r0, #20
 8019832:	3414      	adds	r4, #20
 8019834:	6803      	ldr	r3, [r0, #0]
 8019836:	cc02      	ldmia	r4!, {r1}
 8019838:	b29d      	uxth	r5, r3
 801983a:	19ad      	adds	r5, r5, r6
 801983c:	b28a      	uxth	r2, r1
 801983e:	1aaa      	subs	r2, r5, r2
 8019840:	0c09      	lsrs	r1, r1, #16
 8019842:	0c1b      	lsrs	r3, r3, #16
 8019844:	1a5b      	subs	r3, r3, r1
 8019846:	1411      	asrs	r1, r2, #16
 8019848:	185b      	adds	r3, r3, r1
 801984a:	141e      	asrs	r6, r3, #16
 801984c:	b292      	uxth	r2, r2
 801984e:	041b      	lsls	r3, r3, #16
 8019850:	4313      	orrs	r3, r2
 8019852:	c008      	stmia	r0!, {r3}
 8019854:	9b05      	ldr	r3, [sp, #20]
 8019856:	42a3      	cmp	r3, r4
 8019858:	d2ec      	bcs.n	8019834 <quorem+0xb0>
 801985a:	9b01      	ldr	r3, [sp, #4]
 801985c:	9a03      	ldr	r2, [sp, #12]
 801985e:	009b      	lsls	r3, r3, #2
 8019860:	18d3      	adds	r3, r2, r3
 8019862:	681a      	ldr	r2, [r3, #0]
 8019864:	2a00      	cmp	r2, #0
 8019866:	d015      	beq.n	8019894 <quorem+0x110>
 8019868:	9802      	ldr	r0, [sp, #8]
 801986a:	b009      	add	sp, #36	; 0x24
 801986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801986e:	6823      	ldr	r3, [r4, #0]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d106      	bne.n	8019882 <quorem+0xfe>
 8019874:	9b01      	ldr	r3, [sp, #4]
 8019876:	3b01      	subs	r3, #1
 8019878:	9301      	str	r3, [sp, #4]
 801987a:	9b03      	ldr	r3, [sp, #12]
 801987c:	3c04      	subs	r4, #4
 801987e:	42a3      	cmp	r3, r4
 8019880:	d3f5      	bcc.n	801986e <quorem+0xea>
 8019882:	9b01      	ldr	r3, [sp, #4]
 8019884:	613b      	str	r3, [r7, #16]
 8019886:	e7c7      	b.n	8019818 <quorem+0x94>
 8019888:	681a      	ldr	r2, [r3, #0]
 801988a:	2a00      	cmp	r2, #0
 801988c:	d106      	bne.n	801989c <quorem+0x118>
 801988e:	9a01      	ldr	r2, [sp, #4]
 8019890:	3a01      	subs	r2, #1
 8019892:	9201      	str	r2, [sp, #4]
 8019894:	9a03      	ldr	r2, [sp, #12]
 8019896:	3b04      	subs	r3, #4
 8019898:	429a      	cmp	r2, r3
 801989a:	d3f5      	bcc.n	8019888 <quorem+0x104>
 801989c:	9b01      	ldr	r3, [sp, #4]
 801989e:	613b      	str	r3, [r7, #16]
 80198a0:	e7e2      	b.n	8019868 <quorem+0xe4>
	...

080198a4 <_dtoa_r>:
 80198a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198a6:	0014      	movs	r4, r2
 80198a8:	001d      	movs	r5, r3
 80198aa:	69c6      	ldr	r6, [r0, #28]
 80198ac:	b09d      	sub	sp, #116	; 0x74
 80198ae:	9408      	str	r4, [sp, #32]
 80198b0:	9509      	str	r5, [sp, #36]	; 0x24
 80198b2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80198b4:	9004      	str	r0, [sp, #16]
 80198b6:	2e00      	cmp	r6, #0
 80198b8:	d10f      	bne.n	80198da <_dtoa_r+0x36>
 80198ba:	2010      	movs	r0, #16
 80198bc:	f7fd fe46 	bl	801754c <malloc>
 80198c0:	9b04      	ldr	r3, [sp, #16]
 80198c2:	1e02      	subs	r2, r0, #0
 80198c4:	61d8      	str	r0, [r3, #28]
 80198c6:	d104      	bne.n	80198d2 <_dtoa_r+0x2e>
 80198c8:	21ef      	movs	r1, #239	; 0xef
 80198ca:	4bc6      	ldr	r3, [pc, #792]	; (8019be4 <_dtoa_r+0x340>)
 80198cc:	48c6      	ldr	r0, [pc, #792]	; (8019be8 <_dtoa_r+0x344>)
 80198ce:	f7ff ff3b 	bl	8019748 <__assert_func>
 80198d2:	6046      	str	r6, [r0, #4]
 80198d4:	6086      	str	r6, [r0, #8]
 80198d6:	6006      	str	r6, [r0, #0]
 80198d8:	60c6      	str	r6, [r0, #12]
 80198da:	9b04      	ldr	r3, [sp, #16]
 80198dc:	69db      	ldr	r3, [r3, #28]
 80198de:	6819      	ldr	r1, [r3, #0]
 80198e0:	2900      	cmp	r1, #0
 80198e2:	d00b      	beq.n	80198fc <_dtoa_r+0x58>
 80198e4:	685a      	ldr	r2, [r3, #4]
 80198e6:	2301      	movs	r3, #1
 80198e8:	4093      	lsls	r3, r2
 80198ea:	604a      	str	r2, [r1, #4]
 80198ec:	608b      	str	r3, [r1, #8]
 80198ee:	9804      	ldr	r0, [sp, #16]
 80198f0:	f001 f9e2 	bl	801acb8 <_Bfree>
 80198f4:	2200      	movs	r2, #0
 80198f6:	9b04      	ldr	r3, [sp, #16]
 80198f8:	69db      	ldr	r3, [r3, #28]
 80198fa:	601a      	str	r2, [r3, #0]
 80198fc:	2d00      	cmp	r5, #0
 80198fe:	da1e      	bge.n	801993e <_dtoa_r+0x9a>
 8019900:	2301      	movs	r3, #1
 8019902:	603b      	str	r3, [r7, #0]
 8019904:	006b      	lsls	r3, r5, #1
 8019906:	085b      	lsrs	r3, r3, #1
 8019908:	9309      	str	r3, [sp, #36]	; 0x24
 801990a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801990c:	4bb7      	ldr	r3, [pc, #732]	; (8019bec <_dtoa_r+0x348>)
 801990e:	4ab7      	ldr	r2, [pc, #732]	; (8019bec <_dtoa_r+0x348>)
 8019910:	403b      	ands	r3, r7
 8019912:	4293      	cmp	r3, r2
 8019914:	d116      	bne.n	8019944 <_dtoa_r+0xa0>
 8019916:	4bb6      	ldr	r3, [pc, #728]	; (8019bf0 <_dtoa_r+0x34c>)
 8019918:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801991a:	6013      	str	r3, [r2, #0]
 801991c:	033b      	lsls	r3, r7, #12
 801991e:	0b1b      	lsrs	r3, r3, #12
 8019920:	4323      	orrs	r3, r4
 8019922:	d101      	bne.n	8019928 <_dtoa_r+0x84>
 8019924:	f000 fdb5 	bl	801a492 <_dtoa_r+0xbee>
 8019928:	4bb2      	ldr	r3, [pc, #712]	; (8019bf4 <_dtoa_r+0x350>)
 801992a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801992c:	9306      	str	r3, [sp, #24]
 801992e:	2a00      	cmp	r2, #0
 8019930:	d002      	beq.n	8019938 <_dtoa_r+0x94>
 8019932:	4bb1      	ldr	r3, [pc, #708]	; (8019bf8 <_dtoa_r+0x354>)
 8019934:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019936:	6013      	str	r3, [r2, #0]
 8019938:	9806      	ldr	r0, [sp, #24]
 801993a:	b01d      	add	sp, #116	; 0x74
 801993c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801993e:	2300      	movs	r3, #0
 8019940:	603b      	str	r3, [r7, #0]
 8019942:	e7e2      	b.n	801990a <_dtoa_r+0x66>
 8019944:	9a08      	ldr	r2, [sp, #32]
 8019946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019948:	9210      	str	r2, [sp, #64]	; 0x40
 801994a:	9311      	str	r3, [sp, #68]	; 0x44
 801994c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801994e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019950:	2200      	movs	r2, #0
 8019952:	2300      	movs	r3, #0
 8019954:	f7f3 f976 	bl	800cc44 <__aeabi_dcmpeq>
 8019958:	1e06      	subs	r6, r0, #0
 801995a:	d009      	beq.n	8019970 <_dtoa_r+0xcc>
 801995c:	2301      	movs	r3, #1
 801995e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019960:	6013      	str	r3, [r2, #0]
 8019962:	4ba6      	ldr	r3, [pc, #664]	; (8019bfc <_dtoa_r+0x358>)
 8019964:	9306      	str	r3, [sp, #24]
 8019966:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019968:	2b00      	cmp	r3, #0
 801996a:	d0e5      	beq.n	8019938 <_dtoa_r+0x94>
 801996c:	4ba4      	ldr	r3, [pc, #656]	; (8019c00 <_dtoa_r+0x35c>)
 801996e:	e7e1      	b.n	8019934 <_dtoa_r+0x90>
 8019970:	ab1a      	add	r3, sp, #104	; 0x68
 8019972:	9301      	str	r3, [sp, #4]
 8019974:	ab1b      	add	r3, sp, #108	; 0x6c
 8019976:	9300      	str	r3, [sp, #0]
 8019978:	9804      	ldr	r0, [sp, #16]
 801997a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801997c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801997e:	f001 fd45 	bl	801b40c <__d2b>
 8019982:	007a      	lsls	r2, r7, #1
 8019984:	9005      	str	r0, [sp, #20]
 8019986:	0d52      	lsrs	r2, r2, #21
 8019988:	d100      	bne.n	801998c <_dtoa_r+0xe8>
 801998a:	e07b      	b.n	8019a84 <_dtoa_r+0x1e0>
 801998c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801998e:	9617      	str	r6, [sp, #92]	; 0x5c
 8019990:	0319      	lsls	r1, r3, #12
 8019992:	4b9c      	ldr	r3, [pc, #624]	; (8019c04 <_dtoa_r+0x360>)
 8019994:	0b09      	lsrs	r1, r1, #12
 8019996:	430b      	orrs	r3, r1
 8019998:	499b      	ldr	r1, [pc, #620]	; (8019c08 <_dtoa_r+0x364>)
 801999a:	1857      	adds	r7, r2, r1
 801999c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801999e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80199a0:	0019      	movs	r1, r3
 80199a2:	2200      	movs	r2, #0
 80199a4:	4b99      	ldr	r3, [pc, #612]	; (8019c0c <_dtoa_r+0x368>)
 80199a6:	f7f5 fb53 	bl	800f050 <__aeabi_dsub>
 80199aa:	4a99      	ldr	r2, [pc, #612]	; (8019c10 <_dtoa_r+0x36c>)
 80199ac:	4b99      	ldr	r3, [pc, #612]	; (8019c14 <_dtoa_r+0x370>)
 80199ae:	f7f5 f88d 	bl	800eacc <__aeabi_dmul>
 80199b2:	4a99      	ldr	r2, [pc, #612]	; (8019c18 <_dtoa_r+0x374>)
 80199b4:	4b99      	ldr	r3, [pc, #612]	; (8019c1c <_dtoa_r+0x378>)
 80199b6:	f7f4 f92f 	bl	800dc18 <__aeabi_dadd>
 80199ba:	0004      	movs	r4, r0
 80199bc:	0038      	movs	r0, r7
 80199be:	000d      	movs	r5, r1
 80199c0:	f7f5 ff1c 	bl	800f7fc <__aeabi_i2d>
 80199c4:	4a96      	ldr	r2, [pc, #600]	; (8019c20 <_dtoa_r+0x37c>)
 80199c6:	4b97      	ldr	r3, [pc, #604]	; (8019c24 <_dtoa_r+0x380>)
 80199c8:	f7f5 f880 	bl	800eacc <__aeabi_dmul>
 80199cc:	0002      	movs	r2, r0
 80199ce:	000b      	movs	r3, r1
 80199d0:	0020      	movs	r0, r4
 80199d2:	0029      	movs	r1, r5
 80199d4:	f7f4 f920 	bl	800dc18 <__aeabi_dadd>
 80199d8:	0004      	movs	r4, r0
 80199da:	000d      	movs	r5, r1
 80199dc:	f7f5 fed8 	bl	800f790 <__aeabi_d2iz>
 80199e0:	2200      	movs	r2, #0
 80199e2:	9003      	str	r0, [sp, #12]
 80199e4:	2300      	movs	r3, #0
 80199e6:	0020      	movs	r0, r4
 80199e8:	0029      	movs	r1, r5
 80199ea:	f7f3 f931 	bl	800cc50 <__aeabi_dcmplt>
 80199ee:	2800      	cmp	r0, #0
 80199f0:	d00b      	beq.n	8019a0a <_dtoa_r+0x166>
 80199f2:	9803      	ldr	r0, [sp, #12]
 80199f4:	f7f5 ff02 	bl	800f7fc <__aeabi_i2d>
 80199f8:	002b      	movs	r3, r5
 80199fa:	0022      	movs	r2, r4
 80199fc:	f7f3 f922 	bl	800cc44 <__aeabi_dcmpeq>
 8019a00:	4243      	negs	r3, r0
 8019a02:	4158      	adcs	r0, r3
 8019a04:	9b03      	ldr	r3, [sp, #12]
 8019a06:	1a1b      	subs	r3, r3, r0
 8019a08:	9303      	str	r3, [sp, #12]
 8019a0a:	2301      	movs	r3, #1
 8019a0c:	9316      	str	r3, [sp, #88]	; 0x58
 8019a0e:	9b03      	ldr	r3, [sp, #12]
 8019a10:	2b16      	cmp	r3, #22
 8019a12:	d810      	bhi.n	8019a36 <_dtoa_r+0x192>
 8019a14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019a16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019a18:	9a03      	ldr	r2, [sp, #12]
 8019a1a:	4b83      	ldr	r3, [pc, #524]	; (8019c28 <_dtoa_r+0x384>)
 8019a1c:	00d2      	lsls	r2, r2, #3
 8019a1e:	189b      	adds	r3, r3, r2
 8019a20:	681a      	ldr	r2, [r3, #0]
 8019a22:	685b      	ldr	r3, [r3, #4]
 8019a24:	f7f3 f914 	bl	800cc50 <__aeabi_dcmplt>
 8019a28:	2800      	cmp	r0, #0
 8019a2a:	d047      	beq.n	8019abc <_dtoa_r+0x218>
 8019a2c:	9b03      	ldr	r3, [sp, #12]
 8019a2e:	3b01      	subs	r3, #1
 8019a30:	9303      	str	r3, [sp, #12]
 8019a32:	2300      	movs	r3, #0
 8019a34:	9316      	str	r3, [sp, #88]	; 0x58
 8019a36:	2200      	movs	r2, #0
 8019a38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019a3a:	920a      	str	r2, [sp, #40]	; 0x28
 8019a3c:	1bdb      	subs	r3, r3, r7
 8019a3e:	1e5a      	subs	r2, r3, #1
 8019a40:	d53e      	bpl.n	8019ac0 <_dtoa_r+0x21c>
 8019a42:	2201      	movs	r2, #1
 8019a44:	1ad3      	subs	r3, r2, r3
 8019a46:	930a      	str	r3, [sp, #40]	; 0x28
 8019a48:	2300      	movs	r3, #0
 8019a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8019a4c:	9b03      	ldr	r3, [sp, #12]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	db38      	blt.n	8019ac4 <_dtoa_r+0x220>
 8019a52:	9a03      	ldr	r2, [sp, #12]
 8019a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a56:	4694      	mov	ip, r2
 8019a58:	4463      	add	r3, ip
 8019a5a:	930c      	str	r3, [sp, #48]	; 0x30
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	9213      	str	r2, [sp, #76]	; 0x4c
 8019a60:	930d      	str	r3, [sp, #52]	; 0x34
 8019a62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019a64:	2401      	movs	r4, #1
 8019a66:	2b09      	cmp	r3, #9
 8019a68:	d867      	bhi.n	8019b3a <_dtoa_r+0x296>
 8019a6a:	2b05      	cmp	r3, #5
 8019a6c:	dd02      	ble.n	8019a74 <_dtoa_r+0x1d0>
 8019a6e:	2400      	movs	r4, #0
 8019a70:	3b04      	subs	r3, #4
 8019a72:	9322      	str	r3, [sp, #136]	; 0x88
 8019a74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019a76:	1e98      	subs	r0, r3, #2
 8019a78:	2803      	cmp	r0, #3
 8019a7a:	d867      	bhi.n	8019b4c <_dtoa_r+0x2a8>
 8019a7c:	f7f2 ff48 	bl	800c910 <__gnu_thumb1_case_uqi>
 8019a80:	5b383a2b 	.word	0x5b383a2b
 8019a84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019a86:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8019a88:	18f6      	adds	r6, r6, r3
 8019a8a:	4b68      	ldr	r3, [pc, #416]	; (8019c2c <_dtoa_r+0x388>)
 8019a8c:	18f2      	adds	r2, r6, r3
 8019a8e:	2a20      	cmp	r2, #32
 8019a90:	dd0f      	ble.n	8019ab2 <_dtoa_r+0x20e>
 8019a92:	2340      	movs	r3, #64	; 0x40
 8019a94:	1a9b      	subs	r3, r3, r2
 8019a96:	409f      	lsls	r7, r3
 8019a98:	4b65      	ldr	r3, [pc, #404]	; (8019c30 <_dtoa_r+0x38c>)
 8019a9a:	0038      	movs	r0, r7
 8019a9c:	18f3      	adds	r3, r6, r3
 8019a9e:	40dc      	lsrs	r4, r3
 8019aa0:	4320      	orrs	r0, r4
 8019aa2:	f7f5 fedb 	bl	800f85c <__aeabi_ui2d>
 8019aa6:	2201      	movs	r2, #1
 8019aa8:	4b62      	ldr	r3, [pc, #392]	; (8019c34 <_dtoa_r+0x390>)
 8019aaa:	1e77      	subs	r7, r6, #1
 8019aac:	18cb      	adds	r3, r1, r3
 8019aae:	9217      	str	r2, [sp, #92]	; 0x5c
 8019ab0:	e776      	b.n	80199a0 <_dtoa_r+0xfc>
 8019ab2:	2320      	movs	r3, #32
 8019ab4:	0020      	movs	r0, r4
 8019ab6:	1a9b      	subs	r3, r3, r2
 8019ab8:	4098      	lsls	r0, r3
 8019aba:	e7f2      	b.n	8019aa2 <_dtoa_r+0x1fe>
 8019abc:	9016      	str	r0, [sp, #88]	; 0x58
 8019abe:	e7ba      	b.n	8019a36 <_dtoa_r+0x192>
 8019ac0:	920c      	str	r2, [sp, #48]	; 0x30
 8019ac2:	e7c3      	b.n	8019a4c <_dtoa_r+0x1a8>
 8019ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ac6:	9a03      	ldr	r2, [sp, #12]
 8019ac8:	1a9b      	subs	r3, r3, r2
 8019aca:	930a      	str	r3, [sp, #40]	; 0x28
 8019acc:	4253      	negs	r3, r2
 8019ace:	930d      	str	r3, [sp, #52]	; 0x34
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	9313      	str	r3, [sp, #76]	; 0x4c
 8019ad4:	e7c5      	b.n	8019a62 <_dtoa_r+0x1be>
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019adc:	930b      	str	r3, [sp, #44]	; 0x2c
 8019ade:	9307      	str	r3, [sp, #28]
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	dc13      	bgt.n	8019b0c <_dtoa_r+0x268>
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	001a      	movs	r2, r3
 8019ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8019aea:	9307      	str	r3, [sp, #28]
 8019aec:	9223      	str	r2, [sp, #140]	; 0x8c
 8019aee:	e00d      	b.n	8019b0c <_dtoa_r+0x268>
 8019af0:	2301      	movs	r3, #1
 8019af2:	e7f1      	b.n	8019ad8 <_dtoa_r+0x234>
 8019af4:	2300      	movs	r3, #0
 8019af6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8019af8:	930f      	str	r3, [sp, #60]	; 0x3c
 8019afa:	4694      	mov	ip, r2
 8019afc:	9b03      	ldr	r3, [sp, #12]
 8019afe:	4463      	add	r3, ip
 8019b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b02:	3301      	adds	r3, #1
 8019b04:	9307      	str	r3, [sp, #28]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	dc00      	bgt.n	8019b0c <_dtoa_r+0x268>
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	9a04      	ldr	r2, [sp, #16]
 8019b0e:	2100      	movs	r1, #0
 8019b10:	69d0      	ldr	r0, [r2, #28]
 8019b12:	2204      	movs	r2, #4
 8019b14:	0015      	movs	r5, r2
 8019b16:	3514      	adds	r5, #20
 8019b18:	429d      	cmp	r5, r3
 8019b1a:	d91b      	bls.n	8019b54 <_dtoa_r+0x2b0>
 8019b1c:	6041      	str	r1, [r0, #4]
 8019b1e:	9804      	ldr	r0, [sp, #16]
 8019b20:	f001 f886 	bl	801ac30 <_Balloc>
 8019b24:	9006      	str	r0, [sp, #24]
 8019b26:	2800      	cmp	r0, #0
 8019b28:	d117      	bne.n	8019b5a <_dtoa_r+0x2b6>
 8019b2a:	21b0      	movs	r1, #176	; 0xb0
 8019b2c:	4b42      	ldr	r3, [pc, #264]	; (8019c38 <_dtoa_r+0x394>)
 8019b2e:	482e      	ldr	r0, [pc, #184]	; (8019be8 <_dtoa_r+0x344>)
 8019b30:	9a06      	ldr	r2, [sp, #24]
 8019b32:	31ff      	adds	r1, #255	; 0xff
 8019b34:	e6cb      	b.n	80198ce <_dtoa_r+0x2a>
 8019b36:	2301      	movs	r3, #1
 8019b38:	e7dd      	b.n	8019af6 <_dtoa_r+0x252>
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	940f      	str	r4, [sp, #60]	; 0x3c
 8019b3e:	9322      	str	r3, [sp, #136]	; 0x88
 8019b40:	3b01      	subs	r3, #1
 8019b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8019b44:	9307      	str	r3, [sp, #28]
 8019b46:	2200      	movs	r2, #0
 8019b48:	3313      	adds	r3, #19
 8019b4a:	e7cf      	b.n	8019aec <_dtoa_r+0x248>
 8019b4c:	2301      	movs	r3, #1
 8019b4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019b50:	3b02      	subs	r3, #2
 8019b52:	e7f6      	b.n	8019b42 <_dtoa_r+0x29e>
 8019b54:	3101      	adds	r1, #1
 8019b56:	0052      	lsls	r2, r2, #1
 8019b58:	e7dc      	b.n	8019b14 <_dtoa_r+0x270>
 8019b5a:	9b04      	ldr	r3, [sp, #16]
 8019b5c:	9a06      	ldr	r2, [sp, #24]
 8019b5e:	69db      	ldr	r3, [r3, #28]
 8019b60:	601a      	str	r2, [r3, #0]
 8019b62:	9b07      	ldr	r3, [sp, #28]
 8019b64:	2b0e      	cmp	r3, #14
 8019b66:	d900      	bls.n	8019b6a <_dtoa_r+0x2c6>
 8019b68:	e0e5      	b.n	8019d36 <_dtoa_r+0x492>
 8019b6a:	2c00      	cmp	r4, #0
 8019b6c:	d100      	bne.n	8019b70 <_dtoa_r+0x2cc>
 8019b6e:	e0e2      	b.n	8019d36 <_dtoa_r+0x492>
 8019b70:	9b03      	ldr	r3, [sp, #12]
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	dd64      	ble.n	8019c40 <_dtoa_r+0x39c>
 8019b76:	210f      	movs	r1, #15
 8019b78:	9a03      	ldr	r2, [sp, #12]
 8019b7a:	4b2b      	ldr	r3, [pc, #172]	; (8019c28 <_dtoa_r+0x384>)
 8019b7c:	400a      	ands	r2, r1
 8019b7e:	00d2      	lsls	r2, r2, #3
 8019b80:	189b      	adds	r3, r3, r2
 8019b82:	681e      	ldr	r6, [r3, #0]
 8019b84:	685f      	ldr	r7, [r3, #4]
 8019b86:	9b03      	ldr	r3, [sp, #12]
 8019b88:	2402      	movs	r4, #2
 8019b8a:	111d      	asrs	r5, r3, #4
 8019b8c:	05db      	lsls	r3, r3, #23
 8019b8e:	d50a      	bpl.n	8019ba6 <_dtoa_r+0x302>
 8019b90:	4b2a      	ldr	r3, [pc, #168]	; (8019c3c <_dtoa_r+0x398>)
 8019b92:	400d      	ands	r5, r1
 8019b94:	6a1a      	ldr	r2, [r3, #32]
 8019b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b98:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019b9a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019b9c:	f7f4 fb9c 	bl	800e2d8 <__aeabi_ddiv>
 8019ba0:	9008      	str	r0, [sp, #32]
 8019ba2:	9109      	str	r1, [sp, #36]	; 0x24
 8019ba4:	3401      	adds	r4, #1
 8019ba6:	4b25      	ldr	r3, [pc, #148]	; (8019c3c <_dtoa_r+0x398>)
 8019ba8:	930e      	str	r3, [sp, #56]	; 0x38
 8019baa:	2d00      	cmp	r5, #0
 8019bac:	d108      	bne.n	8019bc0 <_dtoa_r+0x31c>
 8019bae:	9808      	ldr	r0, [sp, #32]
 8019bb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019bb2:	0032      	movs	r2, r6
 8019bb4:	003b      	movs	r3, r7
 8019bb6:	f7f4 fb8f 	bl	800e2d8 <__aeabi_ddiv>
 8019bba:	9008      	str	r0, [sp, #32]
 8019bbc:	9109      	str	r1, [sp, #36]	; 0x24
 8019bbe:	e05a      	b.n	8019c76 <_dtoa_r+0x3d2>
 8019bc0:	2301      	movs	r3, #1
 8019bc2:	421d      	tst	r5, r3
 8019bc4:	d009      	beq.n	8019bda <_dtoa_r+0x336>
 8019bc6:	18e4      	adds	r4, r4, r3
 8019bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019bca:	0030      	movs	r0, r6
 8019bcc:	681a      	ldr	r2, [r3, #0]
 8019bce:	685b      	ldr	r3, [r3, #4]
 8019bd0:	0039      	movs	r1, r7
 8019bd2:	f7f4 ff7b 	bl	800eacc <__aeabi_dmul>
 8019bd6:	0006      	movs	r6, r0
 8019bd8:	000f      	movs	r7, r1
 8019bda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019bdc:	106d      	asrs	r5, r5, #1
 8019bde:	3308      	adds	r3, #8
 8019be0:	e7e2      	b.n	8019ba8 <_dtoa_r+0x304>
 8019be2:	46c0      	nop			; (mov r8, r8)
 8019be4:	0801e352 	.word	0x0801e352
 8019be8:	0801e414 	.word	0x0801e414
 8019bec:	7ff00000 	.word	0x7ff00000
 8019bf0:	0000270f 	.word	0x0000270f
 8019bf4:	0801e410 	.word	0x0801e410
 8019bf8:	0801e413 	.word	0x0801e413
 8019bfc:	0801e329 	.word	0x0801e329
 8019c00:	0801e32a 	.word	0x0801e32a
 8019c04:	3ff00000 	.word	0x3ff00000
 8019c08:	fffffc01 	.word	0xfffffc01
 8019c0c:	3ff80000 	.word	0x3ff80000
 8019c10:	636f4361 	.word	0x636f4361
 8019c14:	3fd287a7 	.word	0x3fd287a7
 8019c18:	8b60c8b3 	.word	0x8b60c8b3
 8019c1c:	3fc68a28 	.word	0x3fc68a28
 8019c20:	509f79fb 	.word	0x509f79fb
 8019c24:	3fd34413 	.word	0x3fd34413
 8019c28:	0801e560 	.word	0x0801e560
 8019c2c:	00000432 	.word	0x00000432
 8019c30:	00000412 	.word	0x00000412
 8019c34:	fe100000 	.word	0xfe100000
 8019c38:	0801e46c 	.word	0x0801e46c
 8019c3c:	0801e538 	.word	0x0801e538
 8019c40:	9b03      	ldr	r3, [sp, #12]
 8019c42:	2402      	movs	r4, #2
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d016      	beq.n	8019c76 <_dtoa_r+0x3d2>
 8019c48:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019c4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8019c4c:	220f      	movs	r2, #15
 8019c4e:	425d      	negs	r5, r3
 8019c50:	402a      	ands	r2, r5
 8019c52:	4bdd      	ldr	r3, [pc, #884]	; (8019fc8 <_dtoa_r+0x724>)
 8019c54:	00d2      	lsls	r2, r2, #3
 8019c56:	189b      	adds	r3, r3, r2
 8019c58:	681a      	ldr	r2, [r3, #0]
 8019c5a:	685b      	ldr	r3, [r3, #4]
 8019c5c:	f7f4 ff36 	bl	800eacc <__aeabi_dmul>
 8019c60:	2701      	movs	r7, #1
 8019c62:	2300      	movs	r3, #0
 8019c64:	9008      	str	r0, [sp, #32]
 8019c66:	9109      	str	r1, [sp, #36]	; 0x24
 8019c68:	4ed8      	ldr	r6, [pc, #864]	; (8019fcc <_dtoa_r+0x728>)
 8019c6a:	112d      	asrs	r5, r5, #4
 8019c6c:	2d00      	cmp	r5, #0
 8019c6e:	d000      	beq.n	8019c72 <_dtoa_r+0x3ce>
 8019c70:	e091      	b.n	8019d96 <_dtoa_r+0x4f2>
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d1a1      	bne.n	8019bba <_dtoa_r+0x316>
 8019c76:	9e08      	ldr	r6, [sp, #32]
 8019c78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019c7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d100      	bne.n	8019c82 <_dtoa_r+0x3de>
 8019c80:	e094      	b.n	8019dac <_dtoa_r+0x508>
 8019c82:	2200      	movs	r2, #0
 8019c84:	0030      	movs	r0, r6
 8019c86:	0039      	movs	r1, r7
 8019c88:	4bd1      	ldr	r3, [pc, #836]	; (8019fd0 <_dtoa_r+0x72c>)
 8019c8a:	f7f2 ffe1 	bl	800cc50 <__aeabi_dcmplt>
 8019c8e:	2800      	cmp	r0, #0
 8019c90:	d100      	bne.n	8019c94 <_dtoa_r+0x3f0>
 8019c92:	e08b      	b.n	8019dac <_dtoa_r+0x508>
 8019c94:	9b07      	ldr	r3, [sp, #28]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d100      	bne.n	8019c9c <_dtoa_r+0x3f8>
 8019c9a:	e087      	b.n	8019dac <_dtoa_r+0x508>
 8019c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	dd45      	ble.n	8019d2e <_dtoa_r+0x48a>
 8019ca2:	9b03      	ldr	r3, [sp, #12]
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	3b01      	subs	r3, #1
 8019ca8:	930e      	str	r3, [sp, #56]	; 0x38
 8019caa:	0030      	movs	r0, r6
 8019cac:	4bc9      	ldr	r3, [pc, #804]	; (8019fd4 <_dtoa_r+0x730>)
 8019cae:	0039      	movs	r1, r7
 8019cb0:	f7f4 ff0c 	bl	800eacc <__aeabi_dmul>
 8019cb4:	9008      	str	r0, [sp, #32]
 8019cb6:	9109      	str	r1, [sp, #36]	; 0x24
 8019cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019cba:	3401      	adds	r4, #1
 8019cbc:	0020      	movs	r0, r4
 8019cbe:	9e08      	ldr	r6, [sp, #32]
 8019cc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019cc2:	9312      	str	r3, [sp, #72]	; 0x48
 8019cc4:	f7f5 fd9a 	bl	800f7fc <__aeabi_i2d>
 8019cc8:	0032      	movs	r2, r6
 8019cca:	003b      	movs	r3, r7
 8019ccc:	f7f4 fefe 	bl	800eacc <__aeabi_dmul>
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	4bc1      	ldr	r3, [pc, #772]	; (8019fd8 <_dtoa_r+0x734>)
 8019cd4:	f7f3 ffa0 	bl	800dc18 <__aeabi_dadd>
 8019cd8:	4ac0      	ldr	r2, [pc, #768]	; (8019fdc <_dtoa_r+0x738>)
 8019cda:	9014      	str	r0, [sp, #80]	; 0x50
 8019cdc:	9115      	str	r1, [sp, #84]	; 0x54
 8019cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ce0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019ce2:	4694      	mov	ip, r2
 8019ce4:	9308      	str	r3, [sp, #32]
 8019ce6:	9409      	str	r4, [sp, #36]	; 0x24
 8019ce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cea:	4463      	add	r3, ip
 8019cec:	9318      	str	r3, [sp, #96]	; 0x60
 8019cee:	9309      	str	r3, [sp, #36]	; 0x24
 8019cf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d15e      	bne.n	8019db4 <_dtoa_r+0x510>
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	4bb9      	ldr	r3, [pc, #740]	; (8019fe0 <_dtoa_r+0x73c>)
 8019cfa:	0030      	movs	r0, r6
 8019cfc:	0039      	movs	r1, r7
 8019cfe:	f7f5 f9a7 	bl	800f050 <__aeabi_dsub>
 8019d02:	9a08      	ldr	r2, [sp, #32]
 8019d04:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019d06:	0004      	movs	r4, r0
 8019d08:	000d      	movs	r5, r1
 8019d0a:	f7f2 ffb5 	bl	800cc78 <__aeabi_dcmpgt>
 8019d0e:	2800      	cmp	r0, #0
 8019d10:	d000      	beq.n	8019d14 <_dtoa_r+0x470>
 8019d12:	e2b3      	b.n	801a27c <_dtoa_r+0x9d8>
 8019d14:	48b3      	ldr	r0, [pc, #716]	; (8019fe4 <_dtoa_r+0x740>)
 8019d16:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019d18:	4684      	mov	ip, r0
 8019d1a:	4461      	add	r1, ip
 8019d1c:	000b      	movs	r3, r1
 8019d1e:	0020      	movs	r0, r4
 8019d20:	0029      	movs	r1, r5
 8019d22:	9a08      	ldr	r2, [sp, #32]
 8019d24:	f7f2 ff94 	bl	800cc50 <__aeabi_dcmplt>
 8019d28:	2800      	cmp	r0, #0
 8019d2a:	d000      	beq.n	8019d2e <_dtoa_r+0x48a>
 8019d2c:	e2a3      	b.n	801a276 <_dtoa_r+0x9d2>
 8019d2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d30:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019d32:	9308      	str	r3, [sp, #32]
 8019d34:	9409      	str	r4, [sp, #36]	; 0x24
 8019d36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	da00      	bge.n	8019d3e <_dtoa_r+0x49a>
 8019d3c:	e179      	b.n	801a032 <_dtoa_r+0x78e>
 8019d3e:	9a03      	ldr	r2, [sp, #12]
 8019d40:	2a0e      	cmp	r2, #14
 8019d42:	dd00      	ble.n	8019d46 <_dtoa_r+0x4a2>
 8019d44:	e175      	b.n	801a032 <_dtoa_r+0x78e>
 8019d46:	4ba0      	ldr	r3, [pc, #640]	; (8019fc8 <_dtoa_r+0x724>)
 8019d48:	00d2      	lsls	r2, r2, #3
 8019d4a:	189b      	adds	r3, r3, r2
 8019d4c:	681e      	ldr	r6, [r3, #0]
 8019d4e:	685f      	ldr	r7, [r3, #4]
 8019d50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	db00      	blt.n	8019d58 <_dtoa_r+0x4b4>
 8019d56:	e0e5      	b.n	8019f24 <_dtoa_r+0x680>
 8019d58:	9b07      	ldr	r3, [sp, #28]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	dd00      	ble.n	8019d60 <_dtoa_r+0x4bc>
 8019d5e:	e0e1      	b.n	8019f24 <_dtoa_r+0x680>
 8019d60:	d000      	beq.n	8019d64 <_dtoa_r+0x4c0>
 8019d62:	e288      	b.n	801a276 <_dtoa_r+0x9d2>
 8019d64:	2200      	movs	r2, #0
 8019d66:	0030      	movs	r0, r6
 8019d68:	0039      	movs	r1, r7
 8019d6a:	4b9d      	ldr	r3, [pc, #628]	; (8019fe0 <_dtoa_r+0x73c>)
 8019d6c:	f7f4 feae 	bl	800eacc <__aeabi_dmul>
 8019d70:	9a08      	ldr	r2, [sp, #32]
 8019d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d74:	f7f2 ff8a 	bl	800cc8c <__aeabi_dcmpge>
 8019d78:	9e07      	ldr	r6, [sp, #28]
 8019d7a:	0037      	movs	r7, r6
 8019d7c:	2800      	cmp	r0, #0
 8019d7e:	d000      	beq.n	8019d82 <_dtoa_r+0x4de>
 8019d80:	e25f      	b.n	801a242 <_dtoa_r+0x99e>
 8019d82:	9b06      	ldr	r3, [sp, #24]
 8019d84:	9a06      	ldr	r2, [sp, #24]
 8019d86:	3301      	adds	r3, #1
 8019d88:	9308      	str	r3, [sp, #32]
 8019d8a:	2331      	movs	r3, #49	; 0x31
 8019d8c:	7013      	strb	r3, [r2, #0]
 8019d8e:	9b03      	ldr	r3, [sp, #12]
 8019d90:	3301      	adds	r3, #1
 8019d92:	9303      	str	r3, [sp, #12]
 8019d94:	e25a      	b.n	801a24c <_dtoa_r+0x9a8>
 8019d96:	423d      	tst	r5, r7
 8019d98:	d005      	beq.n	8019da6 <_dtoa_r+0x502>
 8019d9a:	6832      	ldr	r2, [r6, #0]
 8019d9c:	6873      	ldr	r3, [r6, #4]
 8019d9e:	f7f4 fe95 	bl	800eacc <__aeabi_dmul>
 8019da2:	003b      	movs	r3, r7
 8019da4:	3401      	adds	r4, #1
 8019da6:	106d      	asrs	r5, r5, #1
 8019da8:	3608      	adds	r6, #8
 8019daa:	e75f      	b.n	8019c6c <_dtoa_r+0x3c8>
 8019dac:	9b03      	ldr	r3, [sp, #12]
 8019dae:	930e      	str	r3, [sp, #56]	; 0x38
 8019db0:	9b07      	ldr	r3, [sp, #28]
 8019db2:	e783      	b.n	8019cbc <_dtoa_r+0x418>
 8019db4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019db6:	4b84      	ldr	r3, [pc, #528]	; (8019fc8 <_dtoa_r+0x724>)
 8019db8:	3a01      	subs	r2, #1
 8019dba:	00d2      	lsls	r2, r2, #3
 8019dbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8019dbe:	189b      	adds	r3, r3, r2
 8019dc0:	9c08      	ldr	r4, [sp, #32]
 8019dc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019dc4:	681a      	ldr	r2, [r3, #0]
 8019dc6:	685b      	ldr	r3, [r3, #4]
 8019dc8:	2900      	cmp	r1, #0
 8019dca:	d051      	beq.n	8019e70 <_dtoa_r+0x5cc>
 8019dcc:	2000      	movs	r0, #0
 8019dce:	4986      	ldr	r1, [pc, #536]	; (8019fe8 <_dtoa_r+0x744>)
 8019dd0:	f7f4 fa82 	bl	800e2d8 <__aeabi_ddiv>
 8019dd4:	0022      	movs	r2, r4
 8019dd6:	002b      	movs	r3, r5
 8019dd8:	f7f5 f93a 	bl	800f050 <__aeabi_dsub>
 8019ddc:	9a06      	ldr	r2, [sp, #24]
 8019dde:	0004      	movs	r4, r0
 8019de0:	4694      	mov	ip, r2
 8019de2:	000d      	movs	r5, r1
 8019de4:	9b06      	ldr	r3, [sp, #24]
 8019de6:	9314      	str	r3, [sp, #80]	; 0x50
 8019de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019dea:	4463      	add	r3, ip
 8019dec:	9318      	str	r3, [sp, #96]	; 0x60
 8019dee:	0039      	movs	r1, r7
 8019df0:	0030      	movs	r0, r6
 8019df2:	f7f5 fccd 	bl	800f790 <__aeabi_d2iz>
 8019df6:	9012      	str	r0, [sp, #72]	; 0x48
 8019df8:	f7f5 fd00 	bl	800f7fc <__aeabi_i2d>
 8019dfc:	0002      	movs	r2, r0
 8019dfe:	000b      	movs	r3, r1
 8019e00:	0030      	movs	r0, r6
 8019e02:	0039      	movs	r1, r7
 8019e04:	f7f5 f924 	bl	800f050 <__aeabi_dsub>
 8019e08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019e0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019e0c:	3301      	adds	r3, #1
 8019e0e:	9308      	str	r3, [sp, #32]
 8019e10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019e12:	0006      	movs	r6, r0
 8019e14:	3330      	adds	r3, #48	; 0x30
 8019e16:	7013      	strb	r3, [r2, #0]
 8019e18:	0022      	movs	r2, r4
 8019e1a:	002b      	movs	r3, r5
 8019e1c:	000f      	movs	r7, r1
 8019e1e:	f7f2 ff17 	bl	800cc50 <__aeabi_dcmplt>
 8019e22:	2800      	cmp	r0, #0
 8019e24:	d174      	bne.n	8019f10 <_dtoa_r+0x66c>
 8019e26:	0032      	movs	r2, r6
 8019e28:	003b      	movs	r3, r7
 8019e2a:	2000      	movs	r0, #0
 8019e2c:	4968      	ldr	r1, [pc, #416]	; (8019fd0 <_dtoa_r+0x72c>)
 8019e2e:	f7f5 f90f 	bl	800f050 <__aeabi_dsub>
 8019e32:	0022      	movs	r2, r4
 8019e34:	002b      	movs	r3, r5
 8019e36:	f7f2 ff0b 	bl	800cc50 <__aeabi_dcmplt>
 8019e3a:	2800      	cmp	r0, #0
 8019e3c:	d000      	beq.n	8019e40 <_dtoa_r+0x59c>
 8019e3e:	e0d7      	b.n	8019ff0 <_dtoa_r+0x74c>
 8019e40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019e42:	9a08      	ldr	r2, [sp, #32]
 8019e44:	4293      	cmp	r3, r2
 8019e46:	d100      	bne.n	8019e4a <_dtoa_r+0x5a6>
 8019e48:	e771      	b.n	8019d2e <_dtoa_r+0x48a>
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	0020      	movs	r0, r4
 8019e4e:	0029      	movs	r1, r5
 8019e50:	4b60      	ldr	r3, [pc, #384]	; (8019fd4 <_dtoa_r+0x730>)
 8019e52:	f7f4 fe3b 	bl	800eacc <__aeabi_dmul>
 8019e56:	4b5f      	ldr	r3, [pc, #380]	; (8019fd4 <_dtoa_r+0x730>)
 8019e58:	0004      	movs	r4, r0
 8019e5a:	000d      	movs	r5, r1
 8019e5c:	0030      	movs	r0, r6
 8019e5e:	0039      	movs	r1, r7
 8019e60:	2200      	movs	r2, #0
 8019e62:	f7f4 fe33 	bl	800eacc <__aeabi_dmul>
 8019e66:	9b08      	ldr	r3, [sp, #32]
 8019e68:	0006      	movs	r6, r0
 8019e6a:	000f      	movs	r7, r1
 8019e6c:	9314      	str	r3, [sp, #80]	; 0x50
 8019e6e:	e7be      	b.n	8019dee <_dtoa_r+0x54a>
 8019e70:	0020      	movs	r0, r4
 8019e72:	0029      	movs	r1, r5
 8019e74:	f7f4 fe2a 	bl	800eacc <__aeabi_dmul>
 8019e78:	9a06      	ldr	r2, [sp, #24]
 8019e7a:	9b06      	ldr	r3, [sp, #24]
 8019e7c:	4694      	mov	ip, r2
 8019e7e:	9308      	str	r3, [sp, #32]
 8019e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019e82:	9014      	str	r0, [sp, #80]	; 0x50
 8019e84:	9115      	str	r1, [sp, #84]	; 0x54
 8019e86:	4463      	add	r3, ip
 8019e88:	9319      	str	r3, [sp, #100]	; 0x64
 8019e8a:	0030      	movs	r0, r6
 8019e8c:	0039      	movs	r1, r7
 8019e8e:	f7f5 fc7f 	bl	800f790 <__aeabi_d2iz>
 8019e92:	9018      	str	r0, [sp, #96]	; 0x60
 8019e94:	f7f5 fcb2 	bl	800f7fc <__aeabi_i2d>
 8019e98:	0002      	movs	r2, r0
 8019e9a:	000b      	movs	r3, r1
 8019e9c:	0030      	movs	r0, r6
 8019e9e:	0039      	movs	r1, r7
 8019ea0:	f7f5 f8d6 	bl	800f050 <__aeabi_dsub>
 8019ea4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8019ea6:	9b08      	ldr	r3, [sp, #32]
 8019ea8:	3630      	adds	r6, #48	; 0x30
 8019eaa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019eac:	701e      	strb	r6, [r3, #0]
 8019eae:	3301      	adds	r3, #1
 8019eb0:	0004      	movs	r4, r0
 8019eb2:	000d      	movs	r5, r1
 8019eb4:	9308      	str	r3, [sp, #32]
 8019eb6:	4293      	cmp	r3, r2
 8019eb8:	d12d      	bne.n	8019f16 <_dtoa_r+0x672>
 8019eba:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019ebc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019ebe:	9a06      	ldr	r2, [sp, #24]
 8019ec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019ec2:	4694      	mov	ip, r2
 8019ec4:	4463      	add	r3, ip
 8019ec6:	2200      	movs	r2, #0
 8019ec8:	9308      	str	r3, [sp, #32]
 8019eca:	4b47      	ldr	r3, [pc, #284]	; (8019fe8 <_dtoa_r+0x744>)
 8019ecc:	f7f3 fea4 	bl	800dc18 <__aeabi_dadd>
 8019ed0:	0002      	movs	r2, r0
 8019ed2:	000b      	movs	r3, r1
 8019ed4:	0020      	movs	r0, r4
 8019ed6:	0029      	movs	r1, r5
 8019ed8:	f7f2 fece 	bl	800cc78 <__aeabi_dcmpgt>
 8019edc:	2800      	cmp	r0, #0
 8019ede:	d000      	beq.n	8019ee2 <_dtoa_r+0x63e>
 8019ee0:	e086      	b.n	8019ff0 <_dtoa_r+0x74c>
 8019ee2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019ee4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019ee6:	2000      	movs	r0, #0
 8019ee8:	493f      	ldr	r1, [pc, #252]	; (8019fe8 <_dtoa_r+0x744>)
 8019eea:	f7f5 f8b1 	bl	800f050 <__aeabi_dsub>
 8019eee:	0002      	movs	r2, r0
 8019ef0:	000b      	movs	r3, r1
 8019ef2:	0020      	movs	r0, r4
 8019ef4:	0029      	movs	r1, r5
 8019ef6:	f7f2 feab 	bl	800cc50 <__aeabi_dcmplt>
 8019efa:	2800      	cmp	r0, #0
 8019efc:	d100      	bne.n	8019f00 <_dtoa_r+0x65c>
 8019efe:	e716      	b.n	8019d2e <_dtoa_r+0x48a>
 8019f00:	9b08      	ldr	r3, [sp, #32]
 8019f02:	001a      	movs	r2, r3
 8019f04:	3a01      	subs	r2, #1
 8019f06:	9208      	str	r2, [sp, #32]
 8019f08:	7812      	ldrb	r2, [r2, #0]
 8019f0a:	2a30      	cmp	r2, #48	; 0x30
 8019f0c:	d0f8      	beq.n	8019f00 <_dtoa_r+0x65c>
 8019f0e:	9308      	str	r3, [sp, #32]
 8019f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f12:	9303      	str	r3, [sp, #12]
 8019f14:	e046      	b.n	8019fa4 <_dtoa_r+0x700>
 8019f16:	2200      	movs	r2, #0
 8019f18:	4b2e      	ldr	r3, [pc, #184]	; (8019fd4 <_dtoa_r+0x730>)
 8019f1a:	f7f4 fdd7 	bl	800eacc <__aeabi_dmul>
 8019f1e:	0006      	movs	r6, r0
 8019f20:	000f      	movs	r7, r1
 8019f22:	e7b2      	b.n	8019e8a <_dtoa_r+0x5e6>
 8019f24:	9b06      	ldr	r3, [sp, #24]
 8019f26:	9a06      	ldr	r2, [sp, #24]
 8019f28:	930a      	str	r3, [sp, #40]	; 0x28
 8019f2a:	9b07      	ldr	r3, [sp, #28]
 8019f2c:	9c08      	ldr	r4, [sp, #32]
 8019f2e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8019f30:	3b01      	subs	r3, #1
 8019f32:	189b      	adds	r3, r3, r2
 8019f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8019f36:	0032      	movs	r2, r6
 8019f38:	003b      	movs	r3, r7
 8019f3a:	0020      	movs	r0, r4
 8019f3c:	0029      	movs	r1, r5
 8019f3e:	f7f4 f9cb 	bl	800e2d8 <__aeabi_ddiv>
 8019f42:	f7f5 fc25 	bl	800f790 <__aeabi_d2iz>
 8019f46:	9007      	str	r0, [sp, #28]
 8019f48:	f7f5 fc58 	bl	800f7fc <__aeabi_i2d>
 8019f4c:	0032      	movs	r2, r6
 8019f4e:	003b      	movs	r3, r7
 8019f50:	f7f4 fdbc 	bl	800eacc <__aeabi_dmul>
 8019f54:	0002      	movs	r2, r0
 8019f56:	000b      	movs	r3, r1
 8019f58:	0020      	movs	r0, r4
 8019f5a:	0029      	movs	r1, r5
 8019f5c:	f7f5 f878 	bl	800f050 <__aeabi_dsub>
 8019f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f62:	001a      	movs	r2, r3
 8019f64:	3201      	adds	r2, #1
 8019f66:	920a      	str	r2, [sp, #40]	; 0x28
 8019f68:	9208      	str	r2, [sp, #32]
 8019f6a:	9a07      	ldr	r2, [sp, #28]
 8019f6c:	3230      	adds	r2, #48	; 0x30
 8019f6e:	701a      	strb	r2, [r3, #0]
 8019f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019f72:	429a      	cmp	r2, r3
 8019f74:	d14f      	bne.n	801a016 <_dtoa_r+0x772>
 8019f76:	0002      	movs	r2, r0
 8019f78:	000b      	movs	r3, r1
 8019f7a:	f7f3 fe4d 	bl	800dc18 <__aeabi_dadd>
 8019f7e:	0032      	movs	r2, r6
 8019f80:	003b      	movs	r3, r7
 8019f82:	0004      	movs	r4, r0
 8019f84:	000d      	movs	r5, r1
 8019f86:	f7f2 fe77 	bl	800cc78 <__aeabi_dcmpgt>
 8019f8a:	2800      	cmp	r0, #0
 8019f8c:	d12e      	bne.n	8019fec <_dtoa_r+0x748>
 8019f8e:	0032      	movs	r2, r6
 8019f90:	003b      	movs	r3, r7
 8019f92:	0020      	movs	r0, r4
 8019f94:	0029      	movs	r1, r5
 8019f96:	f7f2 fe55 	bl	800cc44 <__aeabi_dcmpeq>
 8019f9a:	2800      	cmp	r0, #0
 8019f9c:	d002      	beq.n	8019fa4 <_dtoa_r+0x700>
 8019f9e:	9b07      	ldr	r3, [sp, #28]
 8019fa0:	07de      	lsls	r6, r3, #31
 8019fa2:	d423      	bmi.n	8019fec <_dtoa_r+0x748>
 8019fa4:	9905      	ldr	r1, [sp, #20]
 8019fa6:	9804      	ldr	r0, [sp, #16]
 8019fa8:	f000 fe86 	bl	801acb8 <_Bfree>
 8019fac:	2300      	movs	r3, #0
 8019fae:	9a08      	ldr	r2, [sp, #32]
 8019fb0:	7013      	strb	r3, [r2, #0]
 8019fb2:	9b03      	ldr	r3, [sp, #12]
 8019fb4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019fb6:	3301      	adds	r3, #1
 8019fb8:	6013      	str	r3, [r2, #0]
 8019fba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d100      	bne.n	8019fc2 <_dtoa_r+0x71e>
 8019fc0:	e4ba      	b.n	8019938 <_dtoa_r+0x94>
 8019fc2:	9a08      	ldr	r2, [sp, #32]
 8019fc4:	601a      	str	r2, [r3, #0]
 8019fc6:	e4b7      	b.n	8019938 <_dtoa_r+0x94>
 8019fc8:	0801e560 	.word	0x0801e560
 8019fcc:	0801e538 	.word	0x0801e538
 8019fd0:	3ff00000 	.word	0x3ff00000
 8019fd4:	40240000 	.word	0x40240000
 8019fd8:	401c0000 	.word	0x401c0000
 8019fdc:	fcc00000 	.word	0xfcc00000
 8019fe0:	40140000 	.word	0x40140000
 8019fe4:	7cc00000 	.word	0x7cc00000
 8019fe8:	3fe00000 	.word	0x3fe00000
 8019fec:	9b03      	ldr	r3, [sp, #12]
 8019fee:	930e      	str	r3, [sp, #56]	; 0x38
 8019ff0:	9b08      	ldr	r3, [sp, #32]
 8019ff2:	9308      	str	r3, [sp, #32]
 8019ff4:	3b01      	subs	r3, #1
 8019ff6:	781a      	ldrb	r2, [r3, #0]
 8019ff8:	2a39      	cmp	r2, #57	; 0x39
 8019ffa:	d108      	bne.n	801a00e <_dtoa_r+0x76a>
 8019ffc:	9a06      	ldr	r2, [sp, #24]
 8019ffe:	429a      	cmp	r2, r3
 801a000:	d1f7      	bne.n	8019ff2 <_dtoa_r+0x74e>
 801a002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a004:	9906      	ldr	r1, [sp, #24]
 801a006:	3201      	adds	r2, #1
 801a008:	920e      	str	r2, [sp, #56]	; 0x38
 801a00a:	2230      	movs	r2, #48	; 0x30
 801a00c:	700a      	strb	r2, [r1, #0]
 801a00e:	781a      	ldrb	r2, [r3, #0]
 801a010:	3201      	adds	r2, #1
 801a012:	701a      	strb	r2, [r3, #0]
 801a014:	e77c      	b.n	8019f10 <_dtoa_r+0x66c>
 801a016:	2200      	movs	r2, #0
 801a018:	4ba9      	ldr	r3, [pc, #676]	; (801a2c0 <_dtoa_r+0xa1c>)
 801a01a:	f7f4 fd57 	bl	800eacc <__aeabi_dmul>
 801a01e:	2200      	movs	r2, #0
 801a020:	2300      	movs	r3, #0
 801a022:	0004      	movs	r4, r0
 801a024:	000d      	movs	r5, r1
 801a026:	f7f2 fe0d 	bl	800cc44 <__aeabi_dcmpeq>
 801a02a:	2800      	cmp	r0, #0
 801a02c:	d100      	bne.n	801a030 <_dtoa_r+0x78c>
 801a02e:	e782      	b.n	8019f36 <_dtoa_r+0x692>
 801a030:	e7b8      	b.n	8019fa4 <_dtoa_r+0x700>
 801a032:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801a034:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a036:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a038:	2f00      	cmp	r7, #0
 801a03a:	d012      	beq.n	801a062 <_dtoa_r+0x7be>
 801a03c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801a03e:	2a01      	cmp	r2, #1
 801a040:	dc6e      	bgt.n	801a120 <_dtoa_r+0x87c>
 801a042:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a044:	2a00      	cmp	r2, #0
 801a046:	d065      	beq.n	801a114 <_dtoa_r+0x870>
 801a048:	4a9e      	ldr	r2, [pc, #632]	; (801a2c4 <_dtoa_r+0xa20>)
 801a04a:	189b      	adds	r3, r3, r2
 801a04c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a04e:	2101      	movs	r1, #1
 801a050:	18d2      	adds	r2, r2, r3
 801a052:	920a      	str	r2, [sp, #40]	; 0x28
 801a054:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a056:	9804      	ldr	r0, [sp, #16]
 801a058:	18d3      	adds	r3, r2, r3
 801a05a:	930c      	str	r3, [sp, #48]	; 0x30
 801a05c:	f000 ff28 	bl	801aeb0 <__i2b>
 801a060:	0007      	movs	r7, r0
 801a062:	2c00      	cmp	r4, #0
 801a064:	d00e      	beq.n	801a084 <_dtoa_r+0x7e0>
 801a066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a068:	2b00      	cmp	r3, #0
 801a06a:	dd0b      	ble.n	801a084 <_dtoa_r+0x7e0>
 801a06c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a06e:	0023      	movs	r3, r4
 801a070:	4294      	cmp	r4, r2
 801a072:	dd00      	ble.n	801a076 <_dtoa_r+0x7d2>
 801a074:	0013      	movs	r3, r2
 801a076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a078:	1ae4      	subs	r4, r4, r3
 801a07a:	1ad2      	subs	r2, r2, r3
 801a07c:	920a      	str	r2, [sp, #40]	; 0x28
 801a07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a080:	1ad3      	subs	r3, r2, r3
 801a082:	930c      	str	r3, [sp, #48]	; 0x30
 801a084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a086:	2b00      	cmp	r3, #0
 801a088:	d01e      	beq.n	801a0c8 <_dtoa_r+0x824>
 801a08a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d05c      	beq.n	801a14a <_dtoa_r+0x8a6>
 801a090:	2d00      	cmp	r5, #0
 801a092:	dd10      	ble.n	801a0b6 <_dtoa_r+0x812>
 801a094:	0039      	movs	r1, r7
 801a096:	002a      	movs	r2, r5
 801a098:	9804      	ldr	r0, [sp, #16]
 801a09a:	f000 ffd1 	bl	801b040 <__pow5mult>
 801a09e:	9a05      	ldr	r2, [sp, #20]
 801a0a0:	0001      	movs	r1, r0
 801a0a2:	0007      	movs	r7, r0
 801a0a4:	9804      	ldr	r0, [sp, #16]
 801a0a6:	f000 ff1b 	bl	801aee0 <__multiply>
 801a0aa:	0006      	movs	r6, r0
 801a0ac:	9905      	ldr	r1, [sp, #20]
 801a0ae:	9804      	ldr	r0, [sp, #16]
 801a0b0:	f000 fe02 	bl	801acb8 <_Bfree>
 801a0b4:	9605      	str	r6, [sp, #20]
 801a0b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0b8:	1b5a      	subs	r2, r3, r5
 801a0ba:	42ab      	cmp	r3, r5
 801a0bc:	d004      	beq.n	801a0c8 <_dtoa_r+0x824>
 801a0be:	9905      	ldr	r1, [sp, #20]
 801a0c0:	9804      	ldr	r0, [sp, #16]
 801a0c2:	f000 ffbd 	bl	801b040 <__pow5mult>
 801a0c6:	9005      	str	r0, [sp, #20]
 801a0c8:	2101      	movs	r1, #1
 801a0ca:	9804      	ldr	r0, [sp, #16]
 801a0cc:	f000 fef0 	bl	801aeb0 <__i2b>
 801a0d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a0d2:	0006      	movs	r6, r0
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	dd3a      	ble.n	801a14e <_dtoa_r+0x8aa>
 801a0d8:	001a      	movs	r2, r3
 801a0da:	0001      	movs	r1, r0
 801a0dc:	9804      	ldr	r0, [sp, #16]
 801a0de:	f000 ffaf 	bl	801b040 <__pow5mult>
 801a0e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a0e4:	0006      	movs	r6, r0
 801a0e6:	2500      	movs	r5, #0
 801a0e8:	2b01      	cmp	r3, #1
 801a0ea:	dc38      	bgt.n	801a15e <_dtoa_r+0x8ba>
 801a0ec:	2500      	movs	r5, #0
 801a0ee:	9b08      	ldr	r3, [sp, #32]
 801a0f0:	42ab      	cmp	r3, r5
 801a0f2:	d130      	bne.n	801a156 <_dtoa_r+0x8b2>
 801a0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0f6:	031b      	lsls	r3, r3, #12
 801a0f8:	42ab      	cmp	r3, r5
 801a0fa:	d12c      	bne.n	801a156 <_dtoa_r+0x8b2>
 801a0fc:	4b72      	ldr	r3, [pc, #456]	; (801a2c8 <_dtoa_r+0xa24>)
 801a0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a100:	4213      	tst	r3, r2
 801a102:	d028      	beq.n	801a156 <_dtoa_r+0x8b2>
 801a104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a106:	3501      	adds	r5, #1
 801a108:	3301      	adds	r3, #1
 801a10a:	930a      	str	r3, [sp, #40]	; 0x28
 801a10c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a10e:	3301      	adds	r3, #1
 801a110:	930c      	str	r3, [sp, #48]	; 0x30
 801a112:	e020      	b.n	801a156 <_dtoa_r+0x8b2>
 801a114:	2336      	movs	r3, #54	; 0x36
 801a116:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a118:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a11a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a11c:	1a9b      	subs	r3, r3, r2
 801a11e:	e795      	b.n	801a04c <_dtoa_r+0x7a8>
 801a120:	9b07      	ldr	r3, [sp, #28]
 801a122:	1e5d      	subs	r5, r3, #1
 801a124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a126:	42ab      	cmp	r3, r5
 801a128:	db07      	blt.n	801a13a <_dtoa_r+0x896>
 801a12a:	1b5d      	subs	r5, r3, r5
 801a12c:	9b07      	ldr	r3, [sp, #28]
 801a12e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a130:	2b00      	cmp	r3, #0
 801a132:	da8b      	bge.n	801a04c <_dtoa_r+0x7a8>
 801a134:	1ae4      	subs	r4, r4, r3
 801a136:	2300      	movs	r3, #0
 801a138:	e788      	b.n	801a04c <_dtoa_r+0x7a8>
 801a13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a13c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a13e:	1aeb      	subs	r3, r5, r3
 801a140:	18d3      	adds	r3, r2, r3
 801a142:	950d      	str	r5, [sp, #52]	; 0x34
 801a144:	9313      	str	r3, [sp, #76]	; 0x4c
 801a146:	2500      	movs	r5, #0
 801a148:	e7f0      	b.n	801a12c <_dtoa_r+0x888>
 801a14a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a14c:	e7b7      	b.n	801a0be <_dtoa_r+0x81a>
 801a14e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a150:	2500      	movs	r5, #0
 801a152:	2b01      	cmp	r3, #1
 801a154:	ddca      	ble.n	801a0ec <_dtoa_r+0x848>
 801a156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a158:	2001      	movs	r0, #1
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d008      	beq.n	801a170 <_dtoa_r+0x8cc>
 801a15e:	6933      	ldr	r3, [r6, #16]
 801a160:	3303      	adds	r3, #3
 801a162:	009b      	lsls	r3, r3, #2
 801a164:	18f3      	adds	r3, r6, r3
 801a166:	6858      	ldr	r0, [r3, #4]
 801a168:	f000 fe5a 	bl	801ae20 <__hi0bits>
 801a16c:	2320      	movs	r3, #32
 801a16e:	1a18      	subs	r0, r3, r0
 801a170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a172:	1818      	adds	r0, r3, r0
 801a174:	0002      	movs	r2, r0
 801a176:	231f      	movs	r3, #31
 801a178:	401a      	ands	r2, r3
 801a17a:	4218      	tst	r0, r3
 801a17c:	d047      	beq.n	801a20e <_dtoa_r+0x96a>
 801a17e:	3301      	adds	r3, #1
 801a180:	1a9b      	subs	r3, r3, r2
 801a182:	2b04      	cmp	r3, #4
 801a184:	dd3f      	ble.n	801a206 <_dtoa_r+0x962>
 801a186:	231c      	movs	r3, #28
 801a188:	1a9b      	subs	r3, r3, r2
 801a18a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a18c:	18e4      	adds	r4, r4, r3
 801a18e:	18d2      	adds	r2, r2, r3
 801a190:	920a      	str	r2, [sp, #40]	; 0x28
 801a192:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a194:	18d3      	adds	r3, r2, r3
 801a196:	930c      	str	r3, [sp, #48]	; 0x30
 801a198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	dd05      	ble.n	801a1aa <_dtoa_r+0x906>
 801a19e:	001a      	movs	r2, r3
 801a1a0:	9905      	ldr	r1, [sp, #20]
 801a1a2:	9804      	ldr	r0, [sp, #16]
 801a1a4:	f000 ffa8 	bl	801b0f8 <__lshift>
 801a1a8:	9005      	str	r0, [sp, #20]
 801a1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	dd05      	ble.n	801a1bc <_dtoa_r+0x918>
 801a1b0:	0031      	movs	r1, r6
 801a1b2:	001a      	movs	r2, r3
 801a1b4:	9804      	ldr	r0, [sp, #16]
 801a1b6:	f000 ff9f 	bl	801b0f8 <__lshift>
 801a1ba:	0006      	movs	r6, r0
 801a1bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d027      	beq.n	801a212 <_dtoa_r+0x96e>
 801a1c2:	0031      	movs	r1, r6
 801a1c4:	9805      	ldr	r0, [sp, #20]
 801a1c6:	f001 f805 	bl	801b1d4 <__mcmp>
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	da21      	bge.n	801a212 <_dtoa_r+0x96e>
 801a1ce:	9b03      	ldr	r3, [sp, #12]
 801a1d0:	220a      	movs	r2, #10
 801a1d2:	3b01      	subs	r3, #1
 801a1d4:	9303      	str	r3, [sp, #12]
 801a1d6:	9905      	ldr	r1, [sp, #20]
 801a1d8:	2300      	movs	r3, #0
 801a1da:	9804      	ldr	r0, [sp, #16]
 801a1dc:	f000 fd90 	bl	801ad00 <__multadd>
 801a1e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a1e2:	9005      	str	r0, [sp, #20]
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d100      	bne.n	801a1ea <_dtoa_r+0x946>
 801a1e8:	e15d      	b.n	801a4a6 <_dtoa_r+0xc02>
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	0039      	movs	r1, r7
 801a1ee:	220a      	movs	r2, #10
 801a1f0:	9804      	ldr	r0, [sp, #16]
 801a1f2:	f000 fd85 	bl	801ad00 <__multadd>
 801a1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1f8:	0007      	movs	r7, r0
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	dc49      	bgt.n	801a292 <_dtoa_r+0x9ee>
 801a1fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a200:	2b02      	cmp	r3, #2
 801a202:	dc0e      	bgt.n	801a222 <_dtoa_r+0x97e>
 801a204:	e045      	b.n	801a292 <_dtoa_r+0x9ee>
 801a206:	2b04      	cmp	r3, #4
 801a208:	d0c6      	beq.n	801a198 <_dtoa_r+0x8f4>
 801a20a:	331c      	adds	r3, #28
 801a20c:	e7bd      	b.n	801a18a <_dtoa_r+0x8e6>
 801a20e:	0013      	movs	r3, r2
 801a210:	e7fb      	b.n	801a20a <_dtoa_r+0x966>
 801a212:	9b07      	ldr	r3, [sp, #28]
 801a214:	2b00      	cmp	r3, #0
 801a216:	dc36      	bgt.n	801a286 <_dtoa_r+0x9e2>
 801a218:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a21a:	2b02      	cmp	r3, #2
 801a21c:	dd33      	ble.n	801a286 <_dtoa_r+0x9e2>
 801a21e:	9b07      	ldr	r3, [sp, #28]
 801a220:	930b      	str	r3, [sp, #44]	; 0x2c
 801a222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a224:	2b00      	cmp	r3, #0
 801a226:	d10c      	bne.n	801a242 <_dtoa_r+0x99e>
 801a228:	0031      	movs	r1, r6
 801a22a:	2205      	movs	r2, #5
 801a22c:	9804      	ldr	r0, [sp, #16]
 801a22e:	f000 fd67 	bl	801ad00 <__multadd>
 801a232:	0006      	movs	r6, r0
 801a234:	0001      	movs	r1, r0
 801a236:	9805      	ldr	r0, [sp, #20]
 801a238:	f000 ffcc 	bl	801b1d4 <__mcmp>
 801a23c:	2800      	cmp	r0, #0
 801a23e:	dd00      	ble.n	801a242 <_dtoa_r+0x99e>
 801a240:	e59f      	b.n	8019d82 <_dtoa_r+0x4de>
 801a242:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801a244:	43db      	mvns	r3, r3
 801a246:	9303      	str	r3, [sp, #12]
 801a248:	9b06      	ldr	r3, [sp, #24]
 801a24a:	9308      	str	r3, [sp, #32]
 801a24c:	2500      	movs	r5, #0
 801a24e:	0031      	movs	r1, r6
 801a250:	9804      	ldr	r0, [sp, #16]
 801a252:	f000 fd31 	bl	801acb8 <_Bfree>
 801a256:	2f00      	cmp	r7, #0
 801a258:	d100      	bne.n	801a25c <_dtoa_r+0x9b8>
 801a25a:	e6a3      	b.n	8019fa4 <_dtoa_r+0x700>
 801a25c:	2d00      	cmp	r5, #0
 801a25e:	d005      	beq.n	801a26c <_dtoa_r+0x9c8>
 801a260:	42bd      	cmp	r5, r7
 801a262:	d003      	beq.n	801a26c <_dtoa_r+0x9c8>
 801a264:	0029      	movs	r1, r5
 801a266:	9804      	ldr	r0, [sp, #16]
 801a268:	f000 fd26 	bl	801acb8 <_Bfree>
 801a26c:	0039      	movs	r1, r7
 801a26e:	9804      	ldr	r0, [sp, #16]
 801a270:	f000 fd22 	bl	801acb8 <_Bfree>
 801a274:	e696      	b.n	8019fa4 <_dtoa_r+0x700>
 801a276:	2600      	movs	r6, #0
 801a278:	0037      	movs	r7, r6
 801a27a:	e7e2      	b.n	801a242 <_dtoa_r+0x99e>
 801a27c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a27e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801a280:	9303      	str	r3, [sp, #12]
 801a282:	0037      	movs	r7, r6
 801a284:	e57d      	b.n	8019d82 <_dtoa_r+0x4de>
 801a286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d100      	bne.n	801a28e <_dtoa_r+0x9ea>
 801a28c:	e0c3      	b.n	801a416 <_dtoa_r+0xb72>
 801a28e:	9b07      	ldr	r3, [sp, #28]
 801a290:	930b      	str	r3, [sp, #44]	; 0x2c
 801a292:	2c00      	cmp	r4, #0
 801a294:	dd05      	ble.n	801a2a2 <_dtoa_r+0x9fe>
 801a296:	0039      	movs	r1, r7
 801a298:	0022      	movs	r2, r4
 801a29a:	9804      	ldr	r0, [sp, #16]
 801a29c:	f000 ff2c 	bl	801b0f8 <__lshift>
 801a2a0:	0007      	movs	r7, r0
 801a2a2:	0038      	movs	r0, r7
 801a2a4:	2d00      	cmp	r5, #0
 801a2a6:	d024      	beq.n	801a2f2 <_dtoa_r+0xa4e>
 801a2a8:	6879      	ldr	r1, [r7, #4]
 801a2aa:	9804      	ldr	r0, [sp, #16]
 801a2ac:	f000 fcc0 	bl	801ac30 <_Balloc>
 801a2b0:	1e04      	subs	r4, r0, #0
 801a2b2:	d111      	bne.n	801a2d8 <_dtoa_r+0xa34>
 801a2b4:	0022      	movs	r2, r4
 801a2b6:	4b05      	ldr	r3, [pc, #20]	; (801a2cc <_dtoa_r+0xa28>)
 801a2b8:	4805      	ldr	r0, [pc, #20]	; (801a2d0 <_dtoa_r+0xa2c>)
 801a2ba:	4906      	ldr	r1, [pc, #24]	; (801a2d4 <_dtoa_r+0xa30>)
 801a2bc:	f7ff fb07 	bl	80198ce <_dtoa_r+0x2a>
 801a2c0:	40240000 	.word	0x40240000
 801a2c4:	00000433 	.word	0x00000433
 801a2c8:	7ff00000 	.word	0x7ff00000
 801a2cc:	0801e46c 	.word	0x0801e46c
 801a2d0:	0801e414 	.word	0x0801e414
 801a2d4:	000002ef 	.word	0x000002ef
 801a2d8:	0039      	movs	r1, r7
 801a2da:	693a      	ldr	r2, [r7, #16]
 801a2dc:	310c      	adds	r1, #12
 801a2de:	3202      	adds	r2, #2
 801a2e0:	0092      	lsls	r2, r2, #2
 801a2e2:	300c      	adds	r0, #12
 801a2e4:	f7ff fa1c 	bl	8019720 <memcpy>
 801a2e8:	2201      	movs	r2, #1
 801a2ea:	0021      	movs	r1, r4
 801a2ec:	9804      	ldr	r0, [sp, #16]
 801a2ee:	f000 ff03 	bl	801b0f8 <__lshift>
 801a2f2:	9b06      	ldr	r3, [sp, #24]
 801a2f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a2f6:	9307      	str	r3, [sp, #28]
 801a2f8:	3b01      	subs	r3, #1
 801a2fa:	189b      	adds	r3, r3, r2
 801a2fc:	2201      	movs	r2, #1
 801a2fe:	003d      	movs	r5, r7
 801a300:	0007      	movs	r7, r0
 801a302:	930e      	str	r3, [sp, #56]	; 0x38
 801a304:	9b08      	ldr	r3, [sp, #32]
 801a306:	4013      	ands	r3, r2
 801a308:	930d      	str	r3, [sp, #52]	; 0x34
 801a30a:	0031      	movs	r1, r6
 801a30c:	9805      	ldr	r0, [sp, #20]
 801a30e:	f7ff fa39 	bl	8019784 <quorem>
 801a312:	0029      	movs	r1, r5
 801a314:	0004      	movs	r4, r0
 801a316:	900b      	str	r0, [sp, #44]	; 0x2c
 801a318:	9805      	ldr	r0, [sp, #20]
 801a31a:	f000 ff5b 	bl	801b1d4 <__mcmp>
 801a31e:	003a      	movs	r2, r7
 801a320:	900c      	str	r0, [sp, #48]	; 0x30
 801a322:	0031      	movs	r1, r6
 801a324:	9804      	ldr	r0, [sp, #16]
 801a326:	f000 ff71 	bl	801b20c <__mdiff>
 801a32a:	2201      	movs	r2, #1
 801a32c:	68c3      	ldr	r3, [r0, #12]
 801a32e:	3430      	adds	r4, #48	; 0x30
 801a330:	9008      	str	r0, [sp, #32]
 801a332:	920a      	str	r2, [sp, #40]	; 0x28
 801a334:	2b00      	cmp	r3, #0
 801a336:	d104      	bne.n	801a342 <_dtoa_r+0xa9e>
 801a338:	0001      	movs	r1, r0
 801a33a:	9805      	ldr	r0, [sp, #20]
 801a33c:	f000 ff4a 	bl	801b1d4 <__mcmp>
 801a340:	900a      	str	r0, [sp, #40]	; 0x28
 801a342:	9908      	ldr	r1, [sp, #32]
 801a344:	9804      	ldr	r0, [sp, #16]
 801a346:	f000 fcb7 	bl	801acb8 <_Bfree>
 801a34a:	9b07      	ldr	r3, [sp, #28]
 801a34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a34e:	3301      	adds	r3, #1
 801a350:	9308      	str	r3, [sp, #32]
 801a352:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a354:	4313      	orrs	r3, r2
 801a356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a358:	4313      	orrs	r3, r2
 801a35a:	d109      	bne.n	801a370 <_dtoa_r+0xacc>
 801a35c:	2c39      	cmp	r4, #57	; 0x39
 801a35e:	d022      	beq.n	801a3a6 <_dtoa_r+0xb02>
 801a360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a362:	2b00      	cmp	r3, #0
 801a364:	dd01      	ble.n	801a36a <_dtoa_r+0xac6>
 801a366:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a368:	3431      	adds	r4, #49	; 0x31
 801a36a:	9b07      	ldr	r3, [sp, #28]
 801a36c:	701c      	strb	r4, [r3, #0]
 801a36e:	e76e      	b.n	801a24e <_dtoa_r+0x9aa>
 801a370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a372:	2b00      	cmp	r3, #0
 801a374:	db04      	blt.n	801a380 <_dtoa_r+0xadc>
 801a376:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801a378:	4313      	orrs	r3, r2
 801a37a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a37c:	4313      	orrs	r3, r2
 801a37e:	d11e      	bne.n	801a3be <_dtoa_r+0xb1a>
 801a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a382:	2b00      	cmp	r3, #0
 801a384:	ddf1      	ble.n	801a36a <_dtoa_r+0xac6>
 801a386:	9905      	ldr	r1, [sp, #20]
 801a388:	2201      	movs	r2, #1
 801a38a:	9804      	ldr	r0, [sp, #16]
 801a38c:	f000 feb4 	bl	801b0f8 <__lshift>
 801a390:	0031      	movs	r1, r6
 801a392:	9005      	str	r0, [sp, #20]
 801a394:	f000 ff1e 	bl	801b1d4 <__mcmp>
 801a398:	2800      	cmp	r0, #0
 801a39a:	dc02      	bgt.n	801a3a2 <_dtoa_r+0xafe>
 801a39c:	d1e5      	bne.n	801a36a <_dtoa_r+0xac6>
 801a39e:	07e3      	lsls	r3, r4, #31
 801a3a0:	d5e3      	bpl.n	801a36a <_dtoa_r+0xac6>
 801a3a2:	2c39      	cmp	r4, #57	; 0x39
 801a3a4:	d1df      	bne.n	801a366 <_dtoa_r+0xac2>
 801a3a6:	2339      	movs	r3, #57	; 0x39
 801a3a8:	9a07      	ldr	r2, [sp, #28]
 801a3aa:	7013      	strb	r3, [r2, #0]
 801a3ac:	9b08      	ldr	r3, [sp, #32]
 801a3ae:	9308      	str	r3, [sp, #32]
 801a3b0:	3b01      	subs	r3, #1
 801a3b2:	781a      	ldrb	r2, [r3, #0]
 801a3b4:	2a39      	cmp	r2, #57	; 0x39
 801a3b6:	d063      	beq.n	801a480 <_dtoa_r+0xbdc>
 801a3b8:	3201      	adds	r2, #1
 801a3ba:	701a      	strb	r2, [r3, #0]
 801a3bc:	e747      	b.n	801a24e <_dtoa_r+0x9aa>
 801a3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	dd03      	ble.n	801a3cc <_dtoa_r+0xb28>
 801a3c4:	2c39      	cmp	r4, #57	; 0x39
 801a3c6:	d0ee      	beq.n	801a3a6 <_dtoa_r+0xb02>
 801a3c8:	3401      	adds	r4, #1
 801a3ca:	e7ce      	b.n	801a36a <_dtoa_r+0xac6>
 801a3cc:	9b07      	ldr	r3, [sp, #28]
 801a3ce:	9a07      	ldr	r2, [sp, #28]
 801a3d0:	701c      	strb	r4, [r3, #0]
 801a3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a3d4:	4293      	cmp	r3, r2
 801a3d6:	d03e      	beq.n	801a456 <_dtoa_r+0xbb2>
 801a3d8:	2300      	movs	r3, #0
 801a3da:	220a      	movs	r2, #10
 801a3dc:	9905      	ldr	r1, [sp, #20]
 801a3de:	9804      	ldr	r0, [sp, #16]
 801a3e0:	f000 fc8e 	bl	801ad00 <__multadd>
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	9005      	str	r0, [sp, #20]
 801a3e8:	220a      	movs	r2, #10
 801a3ea:	0029      	movs	r1, r5
 801a3ec:	9804      	ldr	r0, [sp, #16]
 801a3ee:	42bd      	cmp	r5, r7
 801a3f0:	d106      	bne.n	801a400 <_dtoa_r+0xb5c>
 801a3f2:	f000 fc85 	bl	801ad00 <__multadd>
 801a3f6:	0005      	movs	r5, r0
 801a3f8:	0007      	movs	r7, r0
 801a3fa:	9b08      	ldr	r3, [sp, #32]
 801a3fc:	9307      	str	r3, [sp, #28]
 801a3fe:	e784      	b.n	801a30a <_dtoa_r+0xa66>
 801a400:	f000 fc7e 	bl	801ad00 <__multadd>
 801a404:	0039      	movs	r1, r7
 801a406:	0005      	movs	r5, r0
 801a408:	2300      	movs	r3, #0
 801a40a:	220a      	movs	r2, #10
 801a40c:	9804      	ldr	r0, [sp, #16]
 801a40e:	f000 fc77 	bl	801ad00 <__multadd>
 801a412:	0007      	movs	r7, r0
 801a414:	e7f1      	b.n	801a3fa <_dtoa_r+0xb56>
 801a416:	9b07      	ldr	r3, [sp, #28]
 801a418:	930b      	str	r3, [sp, #44]	; 0x2c
 801a41a:	2500      	movs	r5, #0
 801a41c:	0031      	movs	r1, r6
 801a41e:	9805      	ldr	r0, [sp, #20]
 801a420:	f7ff f9b0 	bl	8019784 <quorem>
 801a424:	9b06      	ldr	r3, [sp, #24]
 801a426:	3030      	adds	r0, #48	; 0x30
 801a428:	5558      	strb	r0, [r3, r5]
 801a42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a42c:	3501      	adds	r5, #1
 801a42e:	0004      	movs	r4, r0
 801a430:	42ab      	cmp	r3, r5
 801a432:	dd07      	ble.n	801a444 <_dtoa_r+0xba0>
 801a434:	2300      	movs	r3, #0
 801a436:	220a      	movs	r2, #10
 801a438:	9905      	ldr	r1, [sp, #20]
 801a43a:	9804      	ldr	r0, [sp, #16]
 801a43c:	f000 fc60 	bl	801ad00 <__multadd>
 801a440:	9005      	str	r0, [sp, #20]
 801a442:	e7eb      	b.n	801a41c <_dtoa_r+0xb78>
 801a444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a446:	2301      	movs	r3, #1
 801a448:	2a00      	cmp	r2, #0
 801a44a:	dd00      	ble.n	801a44e <_dtoa_r+0xbaa>
 801a44c:	0013      	movs	r3, r2
 801a44e:	2500      	movs	r5, #0
 801a450:	9a06      	ldr	r2, [sp, #24]
 801a452:	18d3      	adds	r3, r2, r3
 801a454:	9308      	str	r3, [sp, #32]
 801a456:	9905      	ldr	r1, [sp, #20]
 801a458:	2201      	movs	r2, #1
 801a45a:	9804      	ldr	r0, [sp, #16]
 801a45c:	f000 fe4c 	bl	801b0f8 <__lshift>
 801a460:	0031      	movs	r1, r6
 801a462:	9005      	str	r0, [sp, #20]
 801a464:	f000 feb6 	bl	801b1d4 <__mcmp>
 801a468:	2800      	cmp	r0, #0
 801a46a:	dc9f      	bgt.n	801a3ac <_dtoa_r+0xb08>
 801a46c:	d101      	bne.n	801a472 <_dtoa_r+0xbce>
 801a46e:	07e4      	lsls	r4, r4, #31
 801a470:	d49c      	bmi.n	801a3ac <_dtoa_r+0xb08>
 801a472:	9b08      	ldr	r3, [sp, #32]
 801a474:	9308      	str	r3, [sp, #32]
 801a476:	3b01      	subs	r3, #1
 801a478:	781a      	ldrb	r2, [r3, #0]
 801a47a:	2a30      	cmp	r2, #48	; 0x30
 801a47c:	d0fa      	beq.n	801a474 <_dtoa_r+0xbd0>
 801a47e:	e6e6      	b.n	801a24e <_dtoa_r+0x9aa>
 801a480:	9a06      	ldr	r2, [sp, #24]
 801a482:	429a      	cmp	r2, r3
 801a484:	d193      	bne.n	801a3ae <_dtoa_r+0xb0a>
 801a486:	9b03      	ldr	r3, [sp, #12]
 801a488:	3301      	adds	r3, #1
 801a48a:	9303      	str	r3, [sp, #12]
 801a48c:	2331      	movs	r3, #49	; 0x31
 801a48e:	7013      	strb	r3, [r2, #0]
 801a490:	e6dd      	b.n	801a24e <_dtoa_r+0x9aa>
 801a492:	4b09      	ldr	r3, [pc, #36]	; (801a4b8 <_dtoa_r+0xc14>)
 801a494:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801a496:	9306      	str	r3, [sp, #24]
 801a498:	4b08      	ldr	r3, [pc, #32]	; (801a4bc <_dtoa_r+0xc18>)
 801a49a:	2a00      	cmp	r2, #0
 801a49c:	d001      	beq.n	801a4a2 <_dtoa_r+0xbfe>
 801a49e:	f7ff fa49 	bl	8019934 <_dtoa_r+0x90>
 801a4a2:	f7ff fa49 	bl	8019938 <_dtoa_r+0x94>
 801a4a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	dcb6      	bgt.n	801a41a <_dtoa_r+0xb76>
 801a4ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a4ae:	2b02      	cmp	r3, #2
 801a4b0:	dd00      	ble.n	801a4b4 <_dtoa_r+0xc10>
 801a4b2:	e6b6      	b.n	801a222 <_dtoa_r+0x97e>
 801a4b4:	e7b1      	b.n	801a41a <_dtoa_r+0xb76>
 801a4b6:	46c0      	nop			; (mov r8, r8)
 801a4b8:	0801e407 	.word	0x0801e407
 801a4bc:	0801e40f 	.word	0x0801e40f

0801a4c0 <_free_r>:
 801a4c0:	b570      	push	{r4, r5, r6, lr}
 801a4c2:	0005      	movs	r5, r0
 801a4c4:	2900      	cmp	r1, #0
 801a4c6:	d010      	beq.n	801a4ea <_free_r+0x2a>
 801a4c8:	1f0c      	subs	r4, r1, #4
 801a4ca:	6823      	ldr	r3, [r4, #0]
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	da00      	bge.n	801a4d2 <_free_r+0x12>
 801a4d0:	18e4      	adds	r4, r4, r3
 801a4d2:	0028      	movs	r0, r5
 801a4d4:	f7fd f8e8 	bl	80176a8 <__malloc_lock>
 801a4d8:	4a1d      	ldr	r2, [pc, #116]	; (801a550 <_free_r+0x90>)
 801a4da:	6813      	ldr	r3, [r2, #0]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d105      	bne.n	801a4ec <_free_r+0x2c>
 801a4e0:	6063      	str	r3, [r4, #4]
 801a4e2:	6014      	str	r4, [r2, #0]
 801a4e4:	0028      	movs	r0, r5
 801a4e6:	f7fd f8e7 	bl	80176b8 <__malloc_unlock>
 801a4ea:	bd70      	pop	{r4, r5, r6, pc}
 801a4ec:	42a3      	cmp	r3, r4
 801a4ee:	d908      	bls.n	801a502 <_free_r+0x42>
 801a4f0:	6820      	ldr	r0, [r4, #0]
 801a4f2:	1821      	adds	r1, r4, r0
 801a4f4:	428b      	cmp	r3, r1
 801a4f6:	d1f3      	bne.n	801a4e0 <_free_r+0x20>
 801a4f8:	6819      	ldr	r1, [r3, #0]
 801a4fa:	685b      	ldr	r3, [r3, #4]
 801a4fc:	1809      	adds	r1, r1, r0
 801a4fe:	6021      	str	r1, [r4, #0]
 801a500:	e7ee      	b.n	801a4e0 <_free_r+0x20>
 801a502:	001a      	movs	r2, r3
 801a504:	685b      	ldr	r3, [r3, #4]
 801a506:	2b00      	cmp	r3, #0
 801a508:	d001      	beq.n	801a50e <_free_r+0x4e>
 801a50a:	42a3      	cmp	r3, r4
 801a50c:	d9f9      	bls.n	801a502 <_free_r+0x42>
 801a50e:	6811      	ldr	r1, [r2, #0]
 801a510:	1850      	adds	r0, r2, r1
 801a512:	42a0      	cmp	r0, r4
 801a514:	d10b      	bne.n	801a52e <_free_r+0x6e>
 801a516:	6820      	ldr	r0, [r4, #0]
 801a518:	1809      	adds	r1, r1, r0
 801a51a:	1850      	adds	r0, r2, r1
 801a51c:	6011      	str	r1, [r2, #0]
 801a51e:	4283      	cmp	r3, r0
 801a520:	d1e0      	bne.n	801a4e4 <_free_r+0x24>
 801a522:	6818      	ldr	r0, [r3, #0]
 801a524:	685b      	ldr	r3, [r3, #4]
 801a526:	1841      	adds	r1, r0, r1
 801a528:	6011      	str	r1, [r2, #0]
 801a52a:	6053      	str	r3, [r2, #4]
 801a52c:	e7da      	b.n	801a4e4 <_free_r+0x24>
 801a52e:	42a0      	cmp	r0, r4
 801a530:	d902      	bls.n	801a538 <_free_r+0x78>
 801a532:	230c      	movs	r3, #12
 801a534:	602b      	str	r3, [r5, #0]
 801a536:	e7d5      	b.n	801a4e4 <_free_r+0x24>
 801a538:	6820      	ldr	r0, [r4, #0]
 801a53a:	1821      	adds	r1, r4, r0
 801a53c:	428b      	cmp	r3, r1
 801a53e:	d103      	bne.n	801a548 <_free_r+0x88>
 801a540:	6819      	ldr	r1, [r3, #0]
 801a542:	685b      	ldr	r3, [r3, #4]
 801a544:	1809      	adds	r1, r1, r0
 801a546:	6021      	str	r1, [r4, #0]
 801a548:	6063      	str	r3, [r4, #4]
 801a54a:	6054      	str	r4, [r2, #4]
 801a54c:	e7ca      	b.n	801a4e4 <_free_r+0x24>
 801a54e:	46c0      	nop			; (mov r8, r8)
 801a550:	20004b18 	.word	0x20004b18

0801a554 <rshift>:
 801a554:	0002      	movs	r2, r0
 801a556:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a558:	6904      	ldr	r4, [r0, #16]
 801a55a:	114b      	asrs	r3, r1, #5
 801a55c:	b085      	sub	sp, #20
 801a55e:	3214      	adds	r2, #20
 801a560:	9302      	str	r3, [sp, #8]
 801a562:	114d      	asrs	r5, r1, #5
 801a564:	0013      	movs	r3, r2
 801a566:	42ac      	cmp	r4, r5
 801a568:	dd32      	ble.n	801a5d0 <rshift+0x7c>
 801a56a:	261f      	movs	r6, #31
 801a56c:	000f      	movs	r7, r1
 801a56e:	114b      	asrs	r3, r1, #5
 801a570:	009b      	lsls	r3, r3, #2
 801a572:	00a5      	lsls	r5, r4, #2
 801a574:	18d3      	adds	r3, r2, r3
 801a576:	4037      	ands	r7, r6
 801a578:	1955      	adds	r5, r2, r5
 801a57a:	9300      	str	r3, [sp, #0]
 801a57c:	9701      	str	r7, [sp, #4]
 801a57e:	4231      	tst	r1, r6
 801a580:	d10d      	bne.n	801a59e <rshift+0x4a>
 801a582:	0016      	movs	r6, r2
 801a584:	0019      	movs	r1, r3
 801a586:	428d      	cmp	r5, r1
 801a588:	d836      	bhi.n	801a5f8 <rshift+0xa4>
 801a58a:	9900      	ldr	r1, [sp, #0]
 801a58c:	2300      	movs	r3, #0
 801a58e:	3903      	subs	r1, #3
 801a590:	428d      	cmp	r5, r1
 801a592:	d302      	bcc.n	801a59a <rshift+0x46>
 801a594:	9b02      	ldr	r3, [sp, #8]
 801a596:	1ae4      	subs	r4, r4, r3
 801a598:	00a3      	lsls	r3, r4, #2
 801a59a:	18d3      	adds	r3, r2, r3
 801a59c:	e018      	b.n	801a5d0 <rshift+0x7c>
 801a59e:	2120      	movs	r1, #32
 801a5a0:	9e01      	ldr	r6, [sp, #4]
 801a5a2:	9f01      	ldr	r7, [sp, #4]
 801a5a4:	1b89      	subs	r1, r1, r6
 801a5a6:	9e00      	ldr	r6, [sp, #0]
 801a5a8:	9103      	str	r1, [sp, #12]
 801a5aa:	ce02      	ldmia	r6!, {r1}
 801a5ac:	4694      	mov	ip, r2
 801a5ae:	40f9      	lsrs	r1, r7
 801a5b0:	42b5      	cmp	r5, r6
 801a5b2:	d816      	bhi.n	801a5e2 <rshift+0x8e>
 801a5b4:	9e00      	ldr	r6, [sp, #0]
 801a5b6:	2300      	movs	r3, #0
 801a5b8:	3601      	adds	r6, #1
 801a5ba:	42b5      	cmp	r5, r6
 801a5bc:	d303      	bcc.n	801a5c6 <rshift+0x72>
 801a5be:	9b02      	ldr	r3, [sp, #8]
 801a5c0:	1ae3      	subs	r3, r4, r3
 801a5c2:	009b      	lsls	r3, r3, #2
 801a5c4:	3b04      	subs	r3, #4
 801a5c6:	18d3      	adds	r3, r2, r3
 801a5c8:	6019      	str	r1, [r3, #0]
 801a5ca:	2900      	cmp	r1, #0
 801a5cc:	d000      	beq.n	801a5d0 <rshift+0x7c>
 801a5ce:	3304      	adds	r3, #4
 801a5d0:	1a99      	subs	r1, r3, r2
 801a5d2:	1089      	asrs	r1, r1, #2
 801a5d4:	6101      	str	r1, [r0, #16]
 801a5d6:	4293      	cmp	r3, r2
 801a5d8:	d101      	bne.n	801a5de <rshift+0x8a>
 801a5da:	2300      	movs	r3, #0
 801a5dc:	6143      	str	r3, [r0, #20]
 801a5de:	b005      	add	sp, #20
 801a5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5e2:	6837      	ldr	r7, [r6, #0]
 801a5e4:	9b03      	ldr	r3, [sp, #12]
 801a5e6:	409f      	lsls	r7, r3
 801a5e8:	430f      	orrs	r7, r1
 801a5ea:	4661      	mov	r1, ip
 801a5ec:	c180      	stmia	r1!, {r7}
 801a5ee:	468c      	mov	ip, r1
 801a5f0:	9b01      	ldr	r3, [sp, #4]
 801a5f2:	ce02      	ldmia	r6!, {r1}
 801a5f4:	40d9      	lsrs	r1, r3
 801a5f6:	e7db      	b.n	801a5b0 <rshift+0x5c>
 801a5f8:	c980      	ldmia	r1!, {r7}
 801a5fa:	c680      	stmia	r6!, {r7}
 801a5fc:	e7c3      	b.n	801a586 <rshift+0x32>

0801a5fe <__hexdig_fun>:
 801a5fe:	0002      	movs	r2, r0
 801a600:	3a30      	subs	r2, #48	; 0x30
 801a602:	0003      	movs	r3, r0
 801a604:	2a09      	cmp	r2, #9
 801a606:	d802      	bhi.n	801a60e <__hexdig_fun+0x10>
 801a608:	3b20      	subs	r3, #32
 801a60a:	b2d8      	uxtb	r0, r3
 801a60c:	4770      	bx	lr
 801a60e:	0002      	movs	r2, r0
 801a610:	3a61      	subs	r2, #97	; 0x61
 801a612:	2a05      	cmp	r2, #5
 801a614:	d801      	bhi.n	801a61a <__hexdig_fun+0x1c>
 801a616:	3b47      	subs	r3, #71	; 0x47
 801a618:	e7f7      	b.n	801a60a <__hexdig_fun+0xc>
 801a61a:	001a      	movs	r2, r3
 801a61c:	3a41      	subs	r2, #65	; 0x41
 801a61e:	2000      	movs	r0, #0
 801a620:	2a05      	cmp	r2, #5
 801a622:	d8f3      	bhi.n	801a60c <__hexdig_fun+0xe>
 801a624:	3b27      	subs	r3, #39	; 0x27
 801a626:	e7f0      	b.n	801a60a <__hexdig_fun+0xc>

0801a628 <__gethex>:
 801a628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a62a:	b089      	sub	sp, #36	; 0x24
 801a62c:	9307      	str	r3, [sp, #28]
 801a62e:	2302      	movs	r3, #2
 801a630:	9201      	str	r2, [sp, #4]
 801a632:	680a      	ldr	r2, [r1, #0]
 801a634:	425b      	negs	r3, r3
 801a636:	9003      	str	r0, [sp, #12]
 801a638:	9106      	str	r1, [sp, #24]
 801a63a:	1c96      	adds	r6, r2, #2
 801a63c:	1a9b      	subs	r3, r3, r2
 801a63e:	199a      	adds	r2, r3, r6
 801a640:	9600      	str	r6, [sp, #0]
 801a642:	9205      	str	r2, [sp, #20]
 801a644:	9a00      	ldr	r2, [sp, #0]
 801a646:	3601      	adds	r6, #1
 801a648:	7810      	ldrb	r0, [r2, #0]
 801a64a:	2830      	cmp	r0, #48	; 0x30
 801a64c:	d0f7      	beq.n	801a63e <__gethex+0x16>
 801a64e:	f7ff ffd6 	bl	801a5fe <__hexdig_fun>
 801a652:	2300      	movs	r3, #0
 801a654:	001d      	movs	r5, r3
 801a656:	9302      	str	r3, [sp, #8]
 801a658:	4298      	cmp	r0, r3
 801a65a:	d11d      	bne.n	801a698 <__gethex+0x70>
 801a65c:	2201      	movs	r2, #1
 801a65e:	49a6      	ldr	r1, [pc, #664]	; (801a8f8 <__gethex+0x2d0>)
 801a660:	9800      	ldr	r0, [sp, #0]
 801a662:	f7fe ff0c 	bl	801947e <strncmp>
 801a666:	0007      	movs	r7, r0
 801a668:	42a8      	cmp	r0, r5
 801a66a:	d169      	bne.n	801a740 <__gethex+0x118>
 801a66c:	9b00      	ldr	r3, [sp, #0]
 801a66e:	0034      	movs	r4, r6
 801a670:	7858      	ldrb	r0, [r3, #1]
 801a672:	f7ff ffc4 	bl	801a5fe <__hexdig_fun>
 801a676:	2301      	movs	r3, #1
 801a678:	9302      	str	r3, [sp, #8]
 801a67a:	42a8      	cmp	r0, r5
 801a67c:	d02f      	beq.n	801a6de <__gethex+0xb6>
 801a67e:	9600      	str	r6, [sp, #0]
 801a680:	9b00      	ldr	r3, [sp, #0]
 801a682:	7818      	ldrb	r0, [r3, #0]
 801a684:	2830      	cmp	r0, #48	; 0x30
 801a686:	d009      	beq.n	801a69c <__gethex+0x74>
 801a688:	f7ff ffb9 	bl	801a5fe <__hexdig_fun>
 801a68c:	4242      	negs	r2, r0
 801a68e:	4142      	adcs	r2, r0
 801a690:	2301      	movs	r3, #1
 801a692:	0035      	movs	r5, r6
 801a694:	9202      	str	r2, [sp, #8]
 801a696:	9305      	str	r3, [sp, #20]
 801a698:	9c00      	ldr	r4, [sp, #0]
 801a69a:	e004      	b.n	801a6a6 <__gethex+0x7e>
 801a69c:	9b00      	ldr	r3, [sp, #0]
 801a69e:	3301      	adds	r3, #1
 801a6a0:	9300      	str	r3, [sp, #0]
 801a6a2:	e7ed      	b.n	801a680 <__gethex+0x58>
 801a6a4:	3401      	adds	r4, #1
 801a6a6:	7820      	ldrb	r0, [r4, #0]
 801a6a8:	f7ff ffa9 	bl	801a5fe <__hexdig_fun>
 801a6ac:	1e07      	subs	r7, r0, #0
 801a6ae:	d1f9      	bne.n	801a6a4 <__gethex+0x7c>
 801a6b0:	2201      	movs	r2, #1
 801a6b2:	0020      	movs	r0, r4
 801a6b4:	4990      	ldr	r1, [pc, #576]	; (801a8f8 <__gethex+0x2d0>)
 801a6b6:	f7fe fee2 	bl	801947e <strncmp>
 801a6ba:	2800      	cmp	r0, #0
 801a6bc:	d10d      	bne.n	801a6da <__gethex+0xb2>
 801a6be:	2d00      	cmp	r5, #0
 801a6c0:	d106      	bne.n	801a6d0 <__gethex+0xa8>
 801a6c2:	3401      	adds	r4, #1
 801a6c4:	0025      	movs	r5, r4
 801a6c6:	7820      	ldrb	r0, [r4, #0]
 801a6c8:	f7ff ff99 	bl	801a5fe <__hexdig_fun>
 801a6cc:	2800      	cmp	r0, #0
 801a6ce:	d102      	bne.n	801a6d6 <__gethex+0xae>
 801a6d0:	1b2d      	subs	r5, r5, r4
 801a6d2:	00af      	lsls	r7, r5, #2
 801a6d4:	e003      	b.n	801a6de <__gethex+0xb6>
 801a6d6:	3401      	adds	r4, #1
 801a6d8:	e7f5      	b.n	801a6c6 <__gethex+0x9e>
 801a6da:	2d00      	cmp	r5, #0
 801a6dc:	d1f8      	bne.n	801a6d0 <__gethex+0xa8>
 801a6de:	2220      	movs	r2, #32
 801a6e0:	7823      	ldrb	r3, [r4, #0]
 801a6e2:	0026      	movs	r6, r4
 801a6e4:	4393      	bics	r3, r2
 801a6e6:	2b50      	cmp	r3, #80	; 0x50
 801a6e8:	d11d      	bne.n	801a726 <__gethex+0xfe>
 801a6ea:	7863      	ldrb	r3, [r4, #1]
 801a6ec:	2b2b      	cmp	r3, #43	; 0x2b
 801a6ee:	d02c      	beq.n	801a74a <__gethex+0x122>
 801a6f0:	2b2d      	cmp	r3, #45	; 0x2d
 801a6f2:	d02e      	beq.n	801a752 <__gethex+0x12a>
 801a6f4:	2300      	movs	r3, #0
 801a6f6:	1c66      	adds	r6, r4, #1
 801a6f8:	9304      	str	r3, [sp, #16]
 801a6fa:	7830      	ldrb	r0, [r6, #0]
 801a6fc:	f7ff ff7f 	bl	801a5fe <__hexdig_fun>
 801a700:	1e43      	subs	r3, r0, #1
 801a702:	b2db      	uxtb	r3, r3
 801a704:	2b18      	cmp	r3, #24
 801a706:	d82b      	bhi.n	801a760 <__gethex+0x138>
 801a708:	3810      	subs	r0, #16
 801a70a:	0005      	movs	r5, r0
 801a70c:	7870      	ldrb	r0, [r6, #1]
 801a70e:	f7ff ff76 	bl	801a5fe <__hexdig_fun>
 801a712:	1e43      	subs	r3, r0, #1
 801a714:	b2db      	uxtb	r3, r3
 801a716:	3601      	adds	r6, #1
 801a718:	2b18      	cmp	r3, #24
 801a71a:	d91c      	bls.n	801a756 <__gethex+0x12e>
 801a71c:	9b04      	ldr	r3, [sp, #16]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d000      	beq.n	801a724 <__gethex+0xfc>
 801a722:	426d      	negs	r5, r5
 801a724:	197f      	adds	r7, r7, r5
 801a726:	9b06      	ldr	r3, [sp, #24]
 801a728:	601e      	str	r6, [r3, #0]
 801a72a:	9b02      	ldr	r3, [sp, #8]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d019      	beq.n	801a764 <__gethex+0x13c>
 801a730:	2600      	movs	r6, #0
 801a732:	9b05      	ldr	r3, [sp, #20]
 801a734:	42b3      	cmp	r3, r6
 801a736:	d100      	bne.n	801a73a <__gethex+0x112>
 801a738:	3606      	adds	r6, #6
 801a73a:	0030      	movs	r0, r6
 801a73c:	b009      	add	sp, #36	; 0x24
 801a73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a740:	2301      	movs	r3, #1
 801a742:	2700      	movs	r7, #0
 801a744:	9c00      	ldr	r4, [sp, #0]
 801a746:	9302      	str	r3, [sp, #8]
 801a748:	e7c9      	b.n	801a6de <__gethex+0xb6>
 801a74a:	2300      	movs	r3, #0
 801a74c:	9304      	str	r3, [sp, #16]
 801a74e:	1ca6      	adds	r6, r4, #2
 801a750:	e7d3      	b.n	801a6fa <__gethex+0xd2>
 801a752:	2301      	movs	r3, #1
 801a754:	e7fa      	b.n	801a74c <__gethex+0x124>
 801a756:	230a      	movs	r3, #10
 801a758:	435d      	muls	r5, r3
 801a75a:	182d      	adds	r5, r5, r0
 801a75c:	3d10      	subs	r5, #16
 801a75e:	e7d5      	b.n	801a70c <__gethex+0xe4>
 801a760:	0026      	movs	r6, r4
 801a762:	e7e0      	b.n	801a726 <__gethex+0xfe>
 801a764:	9b00      	ldr	r3, [sp, #0]
 801a766:	9902      	ldr	r1, [sp, #8]
 801a768:	1ae3      	subs	r3, r4, r3
 801a76a:	3b01      	subs	r3, #1
 801a76c:	2b07      	cmp	r3, #7
 801a76e:	dc0a      	bgt.n	801a786 <__gethex+0x15e>
 801a770:	9803      	ldr	r0, [sp, #12]
 801a772:	f000 fa5d 	bl	801ac30 <_Balloc>
 801a776:	1e05      	subs	r5, r0, #0
 801a778:	d108      	bne.n	801a78c <__gethex+0x164>
 801a77a:	002a      	movs	r2, r5
 801a77c:	21e4      	movs	r1, #228	; 0xe4
 801a77e:	4b5f      	ldr	r3, [pc, #380]	; (801a8fc <__gethex+0x2d4>)
 801a780:	485f      	ldr	r0, [pc, #380]	; (801a900 <__gethex+0x2d8>)
 801a782:	f7fe ffe1 	bl	8019748 <__assert_func>
 801a786:	3101      	adds	r1, #1
 801a788:	105b      	asrs	r3, r3, #1
 801a78a:	e7ef      	b.n	801a76c <__gethex+0x144>
 801a78c:	0003      	movs	r3, r0
 801a78e:	3314      	adds	r3, #20
 801a790:	9302      	str	r3, [sp, #8]
 801a792:	9305      	str	r3, [sp, #20]
 801a794:	2300      	movs	r3, #0
 801a796:	001e      	movs	r6, r3
 801a798:	9304      	str	r3, [sp, #16]
 801a79a:	9b00      	ldr	r3, [sp, #0]
 801a79c:	42a3      	cmp	r3, r4
 801a79e:	d33f      	bcc.n	801a820 <__gethex+0x1f8>
 801a7a0:	9c05      	ldr	r4, [sp, #20]
 801a7a2:	9b02      	ldr	r3, [sp, #8]
 801a7a4:	c440      	stmia	r4!, {r6}
 801a7a6:	1ae4      	subs	r4, r4, r3
 801a7a8:	10a4      	asrs	r4, r4, #2
 801a7aa:	0030      	movs	r0, r6
 801a7ac:	612c      	str	r4, [r5, #16]
 801a7ae:	f000 fb37 	bl	801ae20 <__hi0bits>
 801a7b2:	9b01      	ldr	r3, [sp, #4]
 801a7b4:	0164      	lsls	r4, r4, #5
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	1a26      	subs	r6, r4, r0
 801a7ba:	9300      	str	r3, [sp, #0]
 801a7bc:	429e      	cmp	r6, r3
 801a7be:	dd51      	ble.n	801a864 <__gethex+0x23c>
 801a7c0:	1af6      	subs	r6, r6, r3
 801a7c2:	0031      	movs	r1, r6
 801a7c4:	0028      	movs	r0, r5
 801a7c6:	f000 fecb 	bl	801b560 <__any_on>
 801a7ca:	1e04      	subs	r4, r0, #0
 801a7cc:	d016      	beq.n	801a7fc <__gethex+0x1d4>
 801a7ce:	2401      	movs	r4, #1
 801a7d0:	231f      	movs	r3, #31
 801a7d2:	0020      	movs	r0, r4
 801a7d4:	1e72      	subs	r2, r6, #1
 801a7d6:	4013      	ands	r3, r2
 801a7d8:	4098      	lsls	r0, r3
 801a7da:	0003      	movs	r3, r0
 801a7dc:	1151      	asrs	r1, r2, #5
 801a7de:	9802      	ldr	r0, [sp, #8]
 801a7e0:	0089      	lsls	r1, r1, #2
 801a7e2:	5809      	ldr	r1, [r1, r0]
 801a7e4:	4219      	tst	r1, r3
 801a7e6:	d009      	beq.n	801a7fc <__gethex+0x1d4>
 801a7e8:	42a2      	cmp	r2, r4
 801a7ea:	dd06      	ble.n	801a7fa <__gethex+0x1d2>
 801a7ec:	0028      	movs	r0, r5
 801a7ee:	1eb1      	subs	r1, r6, #2
 801a7f0:	f000 feb6 	bl	801b560 <__any_on>
 801a7f4:	3402      	adds	r4, #2
 801a7f6:	2800      	cmp	r0, #0
 801a7f8:	d100      	bne.n	801a7fc <__gethex+0x1d4>
 801a7fa:	2402      	movs	r4, #2
 801a7fc:	0031      	movs	r1, r6
 801a7fe:	0028      	movs	r0, r5
 801a800:	f7ff fea8 	bl	801a554 <rshift>
 801a804:	19bf      	adds	r7, r7, r6
 801a806:	9b01      	ldr	r3, [sp, #4]
 801a808:	689b      	ldr	r3, [r3, #8]
 801a80a:	42bb      	cmp	r3, r7
 801a80c:	da3a      	bge.n	801a884 <__gethex+0x25c>
 801a80e:	0029      	movs	r1, r5
 801a810:	9803      	ldr	r0, [sp, #12]
 801a812:	f000 fa51 	bl	801acb8 <_Bfree>
 801a816:	2300      	movs	r3, #0
 801a818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a81a:	26a3      	movs	r6, #163	; 0xa3
 801a81c:	6013      	str	r3, [r2, #0]
 801a81e:	e78c      	b.n	801a73a <__gethex+0x112>
 801a820:	3c01      	subs	r4, #1
 801a822:	7823      	ldrb	r3, [r4, #0]
 801a824:	2b2e      	cmp	r3, #46	; 0x2e
 801a826:	d012      	beq.n	801a84e <__gethex+0x226>
 801a828:	9b04      	ldr	r3, [sp, #16]
 801a82a:	2b20      	cmp	r3, #32
 801a82c:	d104      	bne.n	801a838 <__gethex+0x210>
 801a82e:	9b05      	ldr	r3, [sp, #20]
 801a830:	c340      	stmia	r3!, {r6}
 801a832:	2600      	movs	r6, #0
 801a834:	9305      	str	r3, [sp, #20]
 801a836:	9604      	str	r6, [sp, #16]
 801a838:	7820      	ldrb	r0, [r4, #0]
 801a83a:	f7ff fee0 	bl	801a5fe <__hexdig_fun>
 801a83e:	230f      	movs	r3, #15
 801a840:	4018      	ands	r0, r3
 801a842:	9b04      	ldr	r3, [sp, #16]
 801a844:	4098      	lsls	r0, r3
 801a846:	3304      	adds	r3, #4
 801a848:	4306      	orrs	r6, r0
 801a84a:	9304      	str	r3, [sp, #16]
 801a84c:	e7a5      	b.n	801a79a <__gethex+0x172>
 801a84e:	9b00      	ldr	r3, [sp, #0]
 801a850:	42a3      	cmp	r3, r4
 801a852:	d8e9      	bhi.n	801a828 <__gethex+0x200>
 801a854:	2201      	movs	r2, #1
 801a856:	0020      	movs	r0, r4
 801a858:	4927      	ldr	r1, [pc, #156]	; (801a8f8 <__gethex+0x2d0>)
 801a85a:	f7fe fe10 	bl	801947e <strncmp>
 801a85e:	2800      	cmp	r0, #0
 801a860:	d1e2      	bne.n	801a828 <__gethex+0x200>
 801a862:	e79a      	b.n	801a79a <__gethex+0x172>
 801a864:	9b00      	ldr	r3, [sp, #0]
 801a866:	2400      	movs	r4, #0
 801a868:	429e      	cmp	r6, r3
 801a86a:	dacc      	bge.n	801a806 <__gethex+0x1de>
 801a86c:	1b9e      	subs	r6, r3, r6
 801a86e:	0029      	movs	r1, r5
 801a870:	0032      	movs	r2, r6
 801a872:	9803      	ldr	r0, [sp, #12]
 801a874:	f000 fc40 	bl	801b0f8 <__lshift>
 801a878:	0003      	movs	r3, r0
 801a87a:	3314      	adds	r3, #20
 801a87c:	0005      	movs	r5, r0
 801a87e:	1bbf      	subs	r7, r7, r6
 801a880:	9302      	str	r3, [sp, #8]
 801a882:	e7c0      	b.n	801a806 <__gethex+0x1de>
 801a884:	9b01      	ldr	r3, [sp, #4]
 801a886:	685e      	ldr	r6, [r3, #4]
 801a888:	42be      	cmp	r6, r7
 801a88a:	dd70      	ble.n	801a96e <__gethex+0x346>
 801a88c:	9b00      	ldr	r3, [sp, #0]
 801a88e:	1bf6      	subs	r6, r6, r7
 801a890:	42b3      	cmp	r3, r6
 801a892:	dc37      	bgt.n	801a904 <__gethex+0x2dc>
 801a894:	9b01      	ldr	r3, [sp, #4]
 801a896:	68db      	ldr	r3, [r3, #12]
 801a898:	2b02      	cmp	r3, #2
 801a89a:	d024      	beq.n	801a8e6 <__gethex+0x2be>
 801a89c:	2b03      	cmp	r3, #3
 801a89e:	d026      	beq.n	801a8ee <__gethex+0x2c6>
 801a8a0:	2b01      	cmp	r3, #1
 801a8a2:	d117      	bne.n	801a8d4 <__gethex+0x2ac>
 801a8a4:	9b00      	ldr	r3, [sp, #0]
 801a8a6:	42b3      	cmp	r3, r6
 801a8a8:	d114      	bne.n	801a8d4 <__gethex+0x2ac>
 801a8aa:	2b01      	cmp	r3, #1
 801a8ac:	d10b      	bne.n	801a8c6 <__gethex+0x29e>
 801a8ae:	9b01      	ldr	r3, [sp, #4]
 801a8b0:	9a07      	ldr	r2, [sp, #28]
 801a8b2:	685b      	ldr	r3, [r3, #4]
 801a8b4:	2662      	movs	r6, #98	; 0x62
 801a8b6:	6013      	str	r3, [r2, #0]
 801a8b8:	2301      	movs	r3, #1
 801a8ba:	9a02      	ldr	r2, [sp, #8]
 801a8bc:	612b      	str	r3, [r5, #16]
 801a8be:	6013      	str	r3, [r2, #0]
 801a8c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a8c2:	601d      	str	r5, [r3, #0]
 801a8c4:	e739      	b.n	801a73a <__gethex+0x112>
 801a8c6:	9900      	ldr	r1, [sp, #0]
 801a8c8:	0028      	movs	r0, r5
 801a8ca:	3901      	subs	r1, #1
 801a8cc:	f000 fe48 	bl	801b560 <__any_on>
 801a8d0:	2800      	cmp	r0, #0
 801a8d2:	d1ec      	bne.n	801a8ae <__gethex+0x286>
 801a8d4:	0029      	movs	r1, r5
 801a8d6:	9803      	ldr	r0, [sp, #12]
 801a8d8:	f000 f9ee 	bl	801acb8 <_Bfree>
 801a8dc:	2300      	movs	r3, #0
 801a8de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a8e0:	2650      	movs	r6, #80	; 0x50
 801a8e2:	6013      	str	r3, [r2, #0]
 801a8e4:	e729      	b.n	801a73a <__gethex+0x112>
 801a8e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d1f3      	bne.n	801a8d4 <__gethex+0x2ac>
 801a8ec:	e7df      	b.n	801a8ae <__gethex+0x286>
 801a8ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d1dc      	bne.n	801a8ae <__gethex+0x286>
 801a8f4:	e7ee      	b.n	801a8d4 <__gethex+0x2ac>
 801a8f6:	46c0      	nop			; (mov r8, r8)
 801a8f8:	0801e1c0 	.word	0x0801e1c0
 801a8fc:	0801e46c 	.word	0x0801e46c
 801a900:	0801e47d 	.word	0x0801e47d
 801a904:	1e77      	subs	r7, r6, #1
 801a906:	2c00      	cmp	r4, #0
 801a908:	d12f      	bne.n	801a96a <__gethex+0x342>
 801a90a:	2f00      	cmp	r7, #0
 801a90c:	d004      	beq.n	801a918 <__gethex+0x2f0>
 801a90e:	0039      	movs	r1, r7
 801a910:	0028      	movs	r0, r5
 801a912:	f000 fe25 	bl	801b560 <__any_on>
 801a916:	0004      	movs	r4, r0
 801a918:	231f      	movs	r3, #31
 801a91a:	117a      	asrs	r2, r7, #5
 801a91c:	401f      	ands	r7, r3
 801a91e:	3b1e      	subs	r3, #30
 801a920:	40bb      	lsls	r3, r7
 801a922:	9902      	ldr	r1, [sp, #8]
 801a924:	0092      	lsls	r2, r2, #2
 801a926:	5852      	ldr	r2, [r2, r1]
 801a928:	421a      	tst	r2, r3
 801a92a:	d001      	beq.n	801a930 <__gethex+0x308>
 801a92c:	2302      	movs	r3, #2
 801a92e:	431c      	orrs	r4, r3
 801a930:	9b00      	ldr	r3, [sp, #0]
 801a932:	0031      	movs	r1, r6
 801a934:	1b9b      	subs	r3, r3, r6
 801a936:	2602      	movs	r6, #2
 801a938:	0028      	movs	r0, r5
 801a93a:	9300      	str	r3, [sp, #0]
 801a93c:	f7ff fe0a 	bl	801a554 <rshift>
 801a940:	9b01      	ldr	r3, [sp, #4]
 801a942:	685f      	ldr	r7, [r3, #4]
 801a944:	2c00      	cmp	r4, #0
 801a946:	d041      	beq.n	801a9cc <__gethex+0x3a4>
 801a948:	9b01      	ldr	r3, [sp, #4]
 801a94a:	68db      	ldr	r3, [r3, #12]
 801a94c:	2b02      	cmp	r3, #2
 801a94e:	d010      	beq.n	801a972 <__gethex+0x34a>
 801a950:	2b03      	cmp	r3, #3
 801a952:	d012      	beq.n	801a97a <__gethex+0x352>
 801a954:	2b01      	cmp	r3, #1
 801a956:	d106      	bne.n	801a966 <__gethex+0x33e>
 801a958:	07a2      	lsls	r2, r4, #30
 801a95a:	d504      	bpl.n	801a966 <__gethex+0x33e>
 801a95c:	9a02      	ldr	r2, [sp, #8]
 801a95e:	6812      	ldr	r2, [r2, #0]
 801a960:	4314      	orrs	r4, r2
 801a962:	421c      	tst	r4, r3
 801a964:	d10c      	bne.n	801a980 <__gethex+0x358>
 801a966:	2310      	movs	r3, #16
 801a968:	e02f      	b.n	801a9ca <__gethex+0x3a2>
 801a96a:	2401      	movs	r4, #1
 801a96c:	e7d4      	b.n	801a918 <__gethex+0x2f0>
 801a96e:	2601      	movs	r6, #1
 801a970:	e7e8      	b.n	801a944 <__gethex+0x31c>
 801a972:	2301      	movs	r3, #1
 801a974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a976:	1a9b      	subs	r3, r3, r2
 801a978:	930f      	str	r3, [sp, #60]	; 0x3c
 801a97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d0f2      	beq.n	801a966 <__gethex+0x33e>
 801a980:	692b      	ldr	r3, [r5, #16]
 801a982:	2000      	movs	r0, #0
 801a984:	9302      	str	r3, [sp, #8]
 801a986:	009b      	lsls	r3, r3, #2
 801a988:	9304      	str	r3, [sp, #16]
 801a98a:	002b      	movs	r3, r5
 801a98c:	9a04      	ldr	r2, [sp, #16]
 801a98e:	3314      	adds	r3, #20
 801a990:	1899      	adds	r1, r3, r2
 801a992:	681a      	ldr	r2, [r3, #0]
 801a994:	1c54      	adds	r4, r2, #1
 801a996:	d01e      	beq.n	801a9d6 <__gethex+0x3ae>
 801a998:	3201      	adds	r2, #1
 801a99a:	601a      	str	r2, [r3, #0]
 801a99c:	002b      	movs	r3, r5
 801a99e:	3314      	adds	r3, #20
 801a9a0:	2e02      	cmp	r6, #2
 801a9a2:	d141      	bne.n	801aa28 <__gethex+0x400>
 801a9a4:	9a01      	ldr	r2, [sp, #4]
 801a9a6:	9900      	ldr	r1, [sp, #0]
 801a9a8:	6812      	ldr	r2, [r2, #0]
 801a9aa:	3a01      	subs	r2, #1
 801a9ac:	428a      	cmp	r2, r1
 801a9ae:	d10b      	bne.n	801a9c8 <__gethex+0x3a0>
 801a9b0:	221f      	movs	r2, #31
 801a9b2:	9800      	ldr	r0, [sp, #0]
 801a9b4:	1149      	asrs	r1, r1, #5
 801a9b6:	4002      	ands	r2, r0
 801a9b8:	2001      	movs	r0, #1
 801a9ba:	0004      	movs	r4, r0
 801a9bc:	4094      	lsls	r4, r2
 801a9be:	0089      	lsls	r1, r1, #2
 801a9c0:	58cb      	ldr	r3, [r1, r3]
 801a9c2:	4223      	tst	r3, r4
 801a9c4:	d000      	beq.n	801a9c8 <__gethex+0x3a0>
 801a9c6:	2601      	movs	r6, #1
 801a9c8:	2320      	movs	r3, #32
 801a9ca:	431e      	orrs	r6, r3
 801a9cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a9ce:	601d      	str	r5, [r3, #0]
 801a9d0:	9b07      	ldr	r3, [sp, #28]
 801a9d2:	601f      	str	r7, [r3, #0]
 801a9d4:	e6b1      	b.n	801a73a <__gethex+0x112>
 801a9d6:	c301      	stmia	r3!, {r0}
 801a9d8:	4299      	cmp	r1, r3
 801a9da:	d8da      	bhi.n	801a992 <__gethex+0x36a>
 801a9dc:	68ab      	ldr	r3, [r5, #8]
 801a9de:	9a02      	ldr	r2, [sp, #8]
 801a9e0:	429a      	cmp	r2, r3
 801a9e2:	db18      	blt.n	801aa16 <__gethex+0x3ee>
 801a9e4:	6869      	ldr	r1, [r5, #4]
 801a9e6:	9803      	ldr	r0, [sp, #12]
 801a9e8:	3101      	adds	r1, #1
 801a9ea:	f000 f921 	bl	801ac30 <_Balloc>
 801a9ee:	1e04      	subs	r4, r0, #0
 801a9f0:	d104      	bne.n	801a9fc <__gethex+0x3d4>
 801a9f2:	0022      	movs	r2, r4
 801a9f4:	2184      	movs	r1, #132	; 0x84
 801a9f6:	4b1c      	ldr	r3, [pc, #112]	; (801aa68 <__gethex+0x440>)
 801a9f8:	481c      	ldr	r0, [pc, #112]	; (801aa6c <__gethex+0x444>)
 801a9fa:	e6c2      	b.n	801a782 <__gethex+0x15a>
 801a9fc:	0029      	movs	r1, r5
 801a9fe:	692a      	ldr	r2, [r5, #16]
 801aa00:	310c      	adds	r1, #12
 801aa02:	3202      	adds	r2, #2
 801aa04:	0092      	lsls	r2, r2, #2
 801aa06:	300c      	adds	r0, #12
 801aa08:	f7fe fe8a 	bl	8019720 <memcpy>
 801aa0c:	0029      	movs	r1, r5
 801aa0e:	9803      	ldr	r0, [sp, #12]
 801aa10:	f000 f952 	bl	801acb8 <_Bfree>
 801aa14:	0025      	movs	r5, r4
 801aa16:	692b      	ldr	r3, [r5, #16]
 801aa18:	1c5a      	adds	r2, r3, #1
 801aa1a:	612a      	str	r2, [r5, #16]
 801aa1c:	2201      	movs	r2, #1
 801aa1e:	3304      	adds	r3, #4
 801aa20:	009b      	lsls	r3, r3, #2
 801aa22:	18eb      	adds	r3, r5, r3
 801aa24:	605a      	str	r2, [r3, #4]
 801aa26:	e7b9      	b.n	801a99c <__gethex+0x374>
 801aa28:	692a      	ldr	r2, [r5, #16]
 801aa2a:	9902      	ldr	r1, [sp, #8]
 801aa2c:	428a      	cmp	r2, r1
 801aa2e:	dd09      	ble.n	801aa44 <__gethex+0x41c>
 801aa30:	2101      	movs	r1, #1
 801aa32:	0028      	movs	r0, r5
 801aa34:	f7ff fd8e 	bl	801a554 <rshift>
 801aa38:	9b01      	ldr	r3, [sp, #4]
 801aa3a:	3701      	adds	r7, #1
 801aa3c:	689b      	ldr	r3, [r3, #8]
 801aa3e:	42bb      	cmp	r3, r7
 801aa40:	dac1      	bge.n	801a9c6 <__gethex+0x39e>
 801aa42:	e6e4      	b.n	801a80e <__gethex+0x1e6>
 801aa44:	221f      	movs	r2, #31
 801aa46:	9c00      	ldr	r4, [sp, #0]
 801aa48:	9900      	ldr	r1, [sp, #0]
 801aa4a:	2601      	movs	r6, #1
 801aa4c:	4014      	ands	r4, r2
 801aa4e:	4211      	tst	r1, r2
 801aa50:	d0ba      	beq.n	801a9c8 <__gethex+0x3a0>
 801aa52:	9a04      	ldr	r2, [sp, #16]
 801aa54:	189b      	adds	r3, r3, r2
 801aa56:	3b04      	subs	r3, #4
 801aa58:	6818      	ldr	r0, [r3, #0]
 801aa5a:	f000 f9e1 	bl	801ae20 <__hi0bits>
 801aa5e:	2320      	movs	r3, #32
 801aa60:	1b1b      	subs	r3, r3, r4
 801aa62:	4298      	cmp	r0, r3
 801aa64:	dbe4      	blt.n	801aa30 <__gethex+0x408>
 801aa66:	e7af      	b.n	801a9c8 <__gethex+0x3a0>
 801aa68:	0801e46c 	.word	0x0801e46c
 801aa6c:	0801e47d 	.word	0x0801e47d

0801aa70 <L_shift>:
 801aa70:	2308      	movs	r3, #8
 801aa72:	b570      	push	{r4, r5, r6, lr}
 801aa74:	2520      	movs	r5, #32
 801aa76:	1a9a      	subs	r2, r3, r2
 801aa78:	0092      	lsls	r2, r2, #2
 801aa7a:	1aad      	subs	r5, r5, r2
 801aa7c:	6843      	ldr	r3, [r0, #4]
 801aa7e:	6804      	ldr	r4, [r0, #0]
 801aa80:	001e      	movs	r6, r3
 801aa82:	40ae      	lsls	r6, r5
 801aa84:	40d3      	lsrs	r3, r2
 801aa86:	4334      	orrs	r4, r6
 801aa88:	6004      	str	r4, [r0, #0]
 801aa8a:	6043      	str	r3, [r0, #4]
 801aa8c:	3004      	adds	r0, #4
 801aa8e:	4288      	cmp	r0, r1
 801aa90:	d3f4      	bcc.n	801aa7c <L_shift+0xc>
 801aa92:	bd70      	pop	{r4, r5, r6, pc}

0801aa94 <__match>:
 801aa94:	b530      	push	{r4, r5, lr}
 801aa96:	6803      	ldr	r3, [r0, #0]
 801aa98:	780c      	ldrb	r4, [r1, #0]
 801aa9a:	3301      	adds	r3, #1
 801aa9c:	2c00      	cmp	r4, #0
 801aa9e:	d102      	bne.n	801aaa6 <__match+0x12>
 801aaa0:	6003      	str	r3, [r0, #0]
 801aaa2:	2001      	movs	r0, #1
 801aaa4:	bd30      	pop	{r4, r5, pc}
 801aaa6:	781a      	ldrb	r2, [r3, #0]
 801aaa8:	0015      	movs	r5, r2
 801aaaa:	3d41      	subs	r5, #65	; 0x41
 801aaac:	2d19      	cmp	r5, #25
 801aaae:	d800      	bhi.n	801aab2 <__match+0x1e>
 801aab0:	3220      	adds	r2, #32
 801aab2:	3101      	adds	r1, #1
 801aab4:	42a2      	cmp	r2, r4
 801aab6:	d0ef      	beq.n	801aa98 <__match+0x4>
 801aab8:	2000      	movs	r0, #0
 801aaba:	e7f3      	b.n	801aaa4 <__match+0x10>

0801aabc <__hexnan>:
 801aabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aabe:	680b      	ldr	r3, [r1, #0]
 801aac0:	b08b      	sub	sp, #44	; 0x2c
 801aac2:	9201      	str	r2, [sp, #4]
 801aac4:	9901      	ldr	r1, [sp, #4]
 801aac6:	115a      	asrs	r2, r3, #5
 801aac8:	0092      	lsls	r2, r2, #2
 801aaca:	188a      	adds	r2, r1, r2
 801aacc:	9202      	str	r2, [sp, #8]
 801aace:	0019      	movs	r1, r3
 801aad0:	221f      	movs	r2, #31
 801aad2:	4011      	ands	r1, r2
 801aad4:	9008      	str	r0, [sp, #32]
 801aad6:	9106      	str	r1, [sp, #24]
 801aad8:	4213      	tst	r3, r2
 801aada:	d002      	beq.n	801aae2 <__hexnan+0x26>
 801aadc:	9b02      	ldr	r3, [sp, #8]
 801aade:	3304      	adds	r3, #4
 801aae0:	9302      	str	r3, [sp, #8]
 801aae2:	9b02      	ldr	r3, [sp, #8]
 801aae4:	2500      	movs	r5, #0
 801aae6:	1f1f      	subs	r7, r3, #4
 801aae8:	003e      	movs	r6, r7
 801aaea:	003c      	movs	r4, r7
 801aaec:	9b08      	ldr	r3, [sp, #32]
 801aaee:	603d      	str	r5, [r7, #0]
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	9507      	str	r5, [sp, #28]
 801aaf4:	9305      	str	r3, [sp, #20]
 801aaf6:	9503      	str	r5, [sp, #12]
 801aaf8:	9b05      	ldr	r3, [sp, #20]
 801aafa:	3301      	adds	r3, #1
 801aafc:	9309      	str	r3, [sp, #36]	; 0x24
 801aafe:	9b05      	ldr	r3, [sp, #20]
 801ab00:	785b      	ldrb	r3, [r3, #1]
 801ab02:	9304      	str	r3, [sp, #16]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d028      	beq.n	801ab5a <__hexnan+0x9e>
 801ab08:	9804      	ldr	r0, [sp, #16]
 801ab0a:	f7ff fd78 	bl	801a5fe <__hexdig_fun>
 801ab0e:	2800      	cmp	r0, #0
 801ab10:	d154      	bne.n	801abbc <__hexnan+0x100>
 801ab12:	9b04      	ldr	r3, [sp, #16]
 801ab14:	2b20      	cmp	r3, #32
 801ab16:	d819      	bhi.n	801ab4c <__hexnan+0x90>
 801ab18:	9b03      	ldr	r3, [sp, #12]
 801ab1a:	9a07      	ldr	r2, [sp, #28]
 801ab1c:	4293      	cmp	r3, r2
 801ab1e:	dd12      	ble.n	801ab46 <__hexnan+0x8a>
 801ab20:	42b4      	cmp	r4, r6
 801ab22:	d206      	bcs.n	801ab32 <__hexnan+0x76>
 801ab24:	2d07      	cmp	r5, #7
 801ab26:	dc04      	bgt.n	801ab32 <__hexnan+0x76>
 801ab28:	002a      	movs	r2, r5
 801ab2a:	0031      	movs	r1, r6
 801ab2c:	0020      	movs	r0, r4
 801ab2e:	f7ff ff9f 	bl	801aa70 <L_shift>
 801ab32:	9b01      	ldr	r3, [sp, #4]
 801ab34:	2508      	movs	r5, #8
 801ab36:	429c      	cmp	r4, r3
 801ab38:	d905      	bls.n	801ab46 <__hexnan+0x8a>
 801ab3a:	1f26      	subs	r6, r4, #4
 801ab3c:	2500      	movs	r5, #0
 801ab3e:	0034      	movs	r4, r6
 801ab40:	9b03      	ldr	r3, [sp, #12]
 801ab42:	6035      	str	r5, [r6, #0]
 801ab44:	9307      	str	r3, [sp, #28]
 801ab46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab48:	9305      	str	r3, [sp, #20]
 801ab4a:	e7d5      	b.n	801aaf8 <__hexnan+0x3c>
 801ab4c:	9b04      	ldr	r3, [sp, #16]
 801ab4e:	2b29      	cmp	r3, #41	; 0x29
 801ab50:	d159      	bne.n	801ac06 <__hexnan+0x14a>
 801ab52:	9b05      	ldr	r3, [sp, #20]
 801ab54:	9a08      	ldr	r2, [sp, #32]
 801ab56:	3302      	adds	r3, #2
 801ab58:	6013      	str	r3, [r2, #0]
 801ab5a:	9b03      	ldr	r3, [sp, #12]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d052      	beq.n	801ac06 <__hexnan+0x14a>
 801ab60:	42b4      	cmp	r4, r6
 801ab62:	d206      	bcs.n	801ab72 <__hexnan+0xb6>
 801ab64:	2d07      	cmp	r5, #7
 801ab66:	dc04      	bgt.n	801ab72 <__hexnan+0xb6>
 801ab68:	002a      	movs	r2, r5
 801ab6a:	0031      	movs	r1, r6
 801ab6c:	0020      	movs	r0, r4
 801ab6e:	f7ff ff7f 	bl	801aa70 <L_shift>
 801ab72:	9b01      	ldr	r3, [sp, #4]
 801ab74:	429c      	cmp	r4, r3
 801ab76:	d935      	bls.n	801abe4 <__hexnan+0x128>
 801ab78:	001a      	movs	r2, r3
 801ab7a:	0023      	movs	r3, r4
 801ab7c:	cb02      	ldmia	r3!, {r1}
 801ab7e:	c202      	stmia	r2!, {r1}
 801ab80:	429f      	cmp	r7, r3
 801ab82:	d2fb      	bcs.n	801ab7c <__hexnan+0xc0>
 801ab84:	9b02      	ldr	r3, [sp, #8]
 801ab86:	1c62      	adds	r2, r4, #1
 801ab88:	1ed9      	subs	r1, r3, #3
 801ab8a:	2304      	movs	r3, #4
 801ab8c:	4291      	cmp	r1, r2
 801ab8e:	d305      	bcc.n	801ab9c <__hexnan+0xe0>
 801ab90:	9b02      	ldr	r3, [sp, #8]
 801ab92:	3b04      	subs	r3, #4
 801ab94:	1b1b      	subs	r3, r3, r4
 801ab96:	089b      	lsrs	r3, r3, #2
 801ab98:	3301      	adds	r3, #1
 801ab9a:	009b      	lsls	r3, r3, #2
 801ab9c:	9a01      	ldr	r2, [sp, #4]
 801ab9e:	18d3      	adds	r3, r2, r3
 801aba0:	2200      	movs	r2, #0
 801aba2:	c304      	stmia	r3!, {r2}
 801aba4:	429f      	cmp	r7, r3
 801aba6:	d2fc      	bcs.n	801aba2 <__hexnan+0xe6>
 801aba8:	683b      	ldr	r3, [r7, #0]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d104      	bne.n	801abb8 <__hexnan+0xfc>
 801abae:	9b01      	ldr	r3, [sp, #4]
 801abb0:	429f      	cmp	r7, r3
 801abb2:	d126      	bne.n	801ac02 <__hexnan+0x146>
 801abb4:	2301      	movs	r3, #1
 801abb6:	603b      	str	r3, [r7, #0]
 801abb8:	2005      	movs	r0, #5
 801abba:	e025      	b.n	801ac08 <__hexnan+0x14c>
 801abbc:	9b03      	ldr	r3, [sp, #12]
 801abbe:	3501      	adds	r5, #1
 801abc0:	3301      	adds	r3, #1
 801abc2:	9303      	str	r3, [sp, #12]
 801abc4:	2d08      	cmp	r5, #8
 801abc6:	dd06      	ble.n	801abd6 <__hexnan+0x11a>
 801abc8:	9b01      	ldr	r3, [sp, #4]
 801abca:	429c      	cmp	r4, r3
 801abcc:	d9bb      	bls.n	801ab46 <__hexnan+0x8a>
 801abce:	2300      	movs	r3, #0
 801abd0:	2501      	movs	r5, #1
 801abd2:	3c04      	subs	r4, #4
 801abd4:	6023      	str	r3, [r4, #0]
 801abd6:	220f      	movs	r2, #15
 801abd8:	6823      	ldr	r3, [r4, #0]
 801abda:	4010      	ands	r0, r2
 801abdc:	011b      	lsls	r3, r3, #4
 801abde:	4303      	orrs	r3, r0
 801abe0:	6023      	str	r3, [r4, #0]
 801abe2:	e7b0      	b.n	801ab46 <__hexnan+0x8a>
 801abe4:	9b06      	ldr	r3, [sp, #24]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d0de      	beq.n	801aba8 <__hexnan+0xec>
 801abea:	2320      	movs	r3, #32
 801abec:	9a06      	ldr	r2, [sp, #24]
 801abee:	9902      	ldr	r1, [sp, #8]
 801abf0:	1a9b      	subs	r3, r3, r2
 801abf2:	2201      	movs	r2, #1
 801abf4:	4252      	negs	r2, r2
 801abf6:	40da      	lsrs	r2, r3
 801abf8:	3904      	subs	r1, #4
 801abfa:	680b      	ldr	r3, [r1, #0]
 801abfc:	4013      	ands	r3, r2
 801abfe:	600b      	str	r3, [r1, #0]
 801ac00:	e7d2      	b.n	801aba8 <__hexnan+0xec>
 801ac02:	3f04      	subs	r7, #4
 801ac04:	e7d0      	b.n	801aba8 <__hexnan+0xec>
 801ac06:	2004      	movs	r0, #4
 801ac08:	b00b      	add	sp, #44	; 0x2c
 801ac0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ac0c <__ascii_mbtowc>:
 801ac0c:	b082      	sub	sp, #8
 801ac0e:	2900      	cmp	r1, #0
 801ac10:	d100      	bne.n	801ac14 <__ascii_mbtowc+0x8>
 801ac12:	a901      	add	r1, sp, #4
 801ac14:	1e10      	subs	r0, r2, #0
 801ac16:	d006      	beq.n	801ac26 <__ascii_mbtowc+0x1a>
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d006      	beq.n	801ac2a <__ascii_mbtowc+0x1e>
 801ac1c:	7813      	ldrb	r3, [r2, #0]
 801ac1e:	600b      	str	r3, [r1, #0]
 801ac20:	7810      	ldrb	r0, [r2, #0]
 801ac22:	1e43      	subs	r3, r0, #1
 801ac24:	4198      	sbcs	r0, r3
 801ac26:	b002      	add	sp, #8
 801ac28:	4770      	bx	lr
 801ac2a:	2002      	movs	r0, #2
 801ac2c:	4240      	negs	r0, r0
 801ac2e:	e7fa      	b.n	801ac26 <__ascii_mbtowc+0x1a>

0801ac30 <_Balloc>:
 801ac30:	b570      	push	{r4, r5, r6, lr}
 801ac32:	69c5      	ldr	r5, [r0, #28]
 801ac34:	0006      	movs	r6, r0
 801ac36:	000c      	movs	r4, r1
 801ac38:	2d00      	cmp	r5, #0
 801ac3a:	d10e      	bne.n	801ac5a <_Balloc+0x2a>
 801ac3c:	2010      	movs	r0, #16
 801ac3e:	f7fc fc85 	bl	801754c <malloc>
 801ac42:	1e02      	subs	r2, r0, #0
 801ac44:	61f0      	str	r0, [r6, #28]
 801ac46:	d104      	bne.n	801ac52 <_Balloc+0x22>
 801ac48:	216b      	movs	r1, #107	; 0x6b
 801ac4a:	4b19      	ldr	r3, [pc, #100]	; (801acb0 <_Balloc+0x80>)
 801ac4c:	4819      	ldr	r0, [pc, #100]	; (801acb4 <_Balloc+0x84>)
 801ac4e:	f7fe fd7b 	bl	8019748 <__assert_func>
 801ac52:	6045      	str	r5, [r0, #4]
 801ac54:	6085      	str	r5, [r0, #8]
 801ac56:	6005      	str	r5, [r0, #0]
 801ac58:	60c5      	str	r5, [r0, #12]
 801ac5a:	69f5      	ldr	r5, [r6, #28]
 801ac5c:	68eb      	ldr	r3, [r5, #12]
 801ac5e:	2b00      	cmp	r3, #0
 801ac60:	d013      	beq.n	801ac8a <_Balloc+0x5a>
 801ac62:	69f3      	ldr	r3, [r6, #28]
 801ac64:	00a2      	lsls	r2, r4, #2
 801ac66:	68db      	ldr	r3, [r3, #12]
 801ac68:	189b      	adds	r3, r3, r2
 801ac6a:	6818      	ldr	r0, [r3, #0]
 801ac6c:	2800      	cmp	r0, #0
 801ac6e:	d118      	bne.n	801aca2 <_Balloc+0x72>
 801ac70:	2101      	movs	r1, #1
 801ac72:	000d      	movs	r5, r1
 801ac74:	40a5      	lsls	r5, r4
 801ac76:	1d6a      	adds	r2, r5, #5
 801ac78:	0030      	movs	r0, r6
 801ac7a:	0092      	lsls	r2, r2, #2
 801ac7c:	f000 fee2 	bl	801ba44 <_calloc_r>
 801ac80:	2800      	cmp	r0, #0
 801ac82:	d00c      	beq.n	801ac9e <_Balloc+0x6e>
 801ac84:	6044      	str	r4, [r0, #4]
 801ac86:	6085      	str	r5, [r0, #8]
 801ac88:	e00d      	b.n	801aca6 <_Balloc+0x76>
 801ac8a:	2221      	movs	r2, #33	; 0x21
 801ac8c:	2104      	movs	r1, #4
 801ac8e:	0030      	movs	r0, r6
 801ac90:	f000 fed8 	bl	801ba44 <_calloc_r>
 801ac94:	69f3      	ldr	r3, [r6, #28]
 801ac96:	60e8      	str	r0, [r5, #12]
 801ac98:	68db      	ldr	r3, [r3, #12]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d1e1      	bne.n	801ac62 <_Balloc+0x32>
 801ac9e:	2000      	movs	r0, #0
 801aca0:	bd70      	pop	{r4, r5, r6, pc}
 801aca2:	6802      	ldr	r2, [r0, #0]
 801aca4:	601a      	str	r2, [r3, #0]
 801aca6:	2300      	movs	r3, #0
 801aca8:	6103      	str	r3, [r0, #16]
 801acaa:	60c3      	str	r3, [r0, #12]
 801acac:	e7f8      	b.n	801aca0 <_Balloc+0x70>
 801acae:	46c0      	nop			; (mov r8, r8)
 801acb0:	0801e352 	.word	0x0801e352
 801acb4:	0801e4dd 	.word	0x0801e4dd

0801acb8 <_Bfree>:
 801acb8:	b570      	push	{r4, r5, r6, lr}
 801acba:	69c6      	ldr	r6, [r0, #28]
 801acbc:	0005      	movs	r5, r0
 801acbe:	000c      	movs	r4, r1
 801acc0:	2e00      	cmp	r6, #0
 801acc2:	d10e      	bne.n	801ace2 <_Bfree+0x2a>
 801acc4:	2010      	movs	r0, #16
 801acc6:	f7fc fc41 	bl	801754c <malloc>
 801acca:	1e02      	subs	r2, r0, #0
 801accc:	61e8      	str	r0, [r5, #28]
 801acce:	d104      	bne.n	801acda <_Bfree+0x22>
 801acd0:	218f      	movs	r1, #143	; 0x8f
 801acd2:	4b09      	ldr	r3, [pc, #36]	; (801acf8 <_Bfree+0x40>)
 801acd4:	4809      	ldr	r0, [pc, #36]	; (801acfc <_Bfree+0x44>)
 801acd6:	f7fe fd37 	bl	8019748 <__assert_func>
 801acda:	6046      	str	r6, [r0, #4]
 801acdc:	6086      	str	r6, [r0, #8]
 801acde:	6006      	str	r6, [r0, #0]
 801ace0:	60c6      	str	r6, [r0, #12]
 801ace2:	2c00      	cmp	r4, #0
 801ace4:	d007      	beq.n	801acf6 <_Bfree+0x3e>
 801ace6:	69eb      	ldr	r3, [r5, #28]
 801ace8:	6862      	ldr	r2, [r4, #4]
 801acea:	68db      	ldr	r3, [r3, #12]
 801acec:	0092      	lsls	r2, r2, #2
 801acee:	189b      	adds	r3, r3, r2
 801acf0:	681a      	ldr	r2, [r3, #0]
 801acf2:	6022      	str	r2, [r4, #0]
 801acf4:	601c      	str	r4, [r3, #0]
 801acf6:	bd70      	pop	{r4, r5, r6, pc}
 801acf8:	0801e352 	.word	0x0801e352
 801acfc:	0801e4dd 	.word	0x0801e4dd

0801ad00 <__multadd>:
 801ad00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad02:	000e      	movs	r6, r1
 801ad04:	9001      	str	r0, [sp, #4]
 801ad06:	000c      	movs	r4, r1
 801ad08:	001d      	movs	r5, r3
 801ad0a:	2000      	movs	r0, #0
 801ad0c:	690f      	ldr	r7, [r1, #16]
 801ad0e:	3614      	adds	r6, #20
 801ad10:	6833      	ldr	r3, [r6, #0]
 801ad12:	3001      	adds	r0, #1
 801ad14:	b299      	uxth	r1, r3
 801ad16:	4351      	muls	r1, r2
 801ad18:	0c1b      	lsrs	r3, r3, #16
 801ad1a:	4353      	muls	r3, r2
 801ad1c:	1949      	adds	r1, r1, r5
 801ad1e:	0c0d      	lsrs	r5, r1, #16
 801ad20:	195b      	adds	r3, r3, r5
 801ad22:	0c1d      	lsrs	r5, r3, #16
 801ad24:	b289      	uxth	r1, r1
 801ad26:	041b      	lsls	r3, r3, #16
 801ad28:	185b      	adds	r3, r3, r1
 801ad2a:	c608      	stmia	r6!, {r3}
 801ad2c:	4287      	cmp	r7, r0
 801ad2e:	dcef      	bgt.n	801ad10 <__multadd+0x10>
 801ad30:	2d00      	cmp	r5, #0
 801ad32:	d022      	beq.n	801ad7a <__multadd+0x7a>
 801ad34:	68a3      	ldr	r3, [r4, #8]
 801ad36:	42bb      	cmp	r3, r7
 801ad38:	dc19      	bgt.n	801ad6e <__multadd+0x6e>
 801ad3a:	6861      	ldr	r1, [r4, #4]
 801ad3c:	9801      	ldr	r0, [sp, #4]
 801ad3e:	3101      	adds	r1, #1
 801ad40:	f7ff ff76 	bl	801ac30 <_Balloc>
 801ad44:	1e06      	subs	r6, r0, #0
 801ad46:	d105      	bne.n	801ad54 <__multadd+0x54>
 801ad48:	0032      	movs	r2, r6
 801ad4a:	21ba      	movs	r1, #186	; 0xba
 801ad4c:	4b0c      	ldr	r3, [pc, #48]	; (801ad80 <__multadd+0x80>)
 801ad4e:	480d      	ldr	r0, [pc, #52]	; (801ad84 <__multadd+0x84>)
 801ad50:	f7fe fcfa 	bl	8019748 <__assert_func>
 801ad54:	0021      	movs	r1, r4
 801ad56:	6922      	ldr	r2, [r4, #16]
 801ad58:	310c      	adds	r1, #12
 801ad5a:	3202      	adds	r2, #2
 801ad5c:	0092      	lsls	r2, r2, #2
 801ad5e:	300c      	adds	r0, #12
 801ad60:	f7fe fcde 	bl	8019720 <memcpy>
 801ad64:	0021      	movs	r1, r4
 801ad66:	9801      	ldr	r0, [sp, #4]
 801ad68:	f7ff ffa6 	bl	801acb8 <_Bfree>
 801ad6c:	0034      	movs	r4, r6
 801ad6e:	1d3b      	adds	r3, r7, #4
 801ad70:	009b      	lsls	r3, r3, #2
 801ad72:	18e3      	adds	r3, r4, r3
 801ad74:	605d      	str	r5, [r3, #4]
 801ad76:	1c7b      	adds	r3, r7, #1
 801ad78:	6123      	str	r3, [r4, #16]
 801ad7a:	0020      	movs	r0, r4
 801ad7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ad7e:	46c0      	nop			; (mov r8, r8)
 801ad80:	0801e46c 	.word	0x0801e46c
 801ad84:	0801e4dd 	.word	0x0801e4dd

0801ad88 <__s2b>:
 801ad88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad8a:	0006      	movs	r6, r0
 801ad8c:	0018      	movs	r0, r3
 801ad8e:	000c      	movs	r4, r1
 801ad90:	3008      	adds	r0, #8
 801ad92:	2109      	movs	r1, #9
 801ad94:	9301      	str	r3, [sp, #4]
 801ad96:	0015      	movs	r5, r2
 801ad98:	f7f1 fe58 	bl	800ca4c <__divsi3>
 801ad9c:	2301      	movs	r3, #1
 801ad9e:	2100      	movs	r1, #0
 801ada0:	4283      	cmp	r3, r0
 801ada2:	db0a      	blt.n	801adba <__s2b+0x32>
 801ada4:	0030      	movs	r0, r6
 801ada6:	f7ff ff43 	bl	801ac30 <_Balloc>
 801adaa:	1e01      	subs	r1, r0, #0
 801adac:	d108      	bne.n	801adc0 <__s2b+0x38>
 801adae:	000a      	movs	r2, r1
 801adb0:	4b19      	ldr	r3, [pc, #100]	; (801ae18 <__s2b+0x90>)
 801adb2:	481a      	ldr	r0, [pc, #104]	; (801ae1c <__s2b+0x94>)
 801adb4:	31d3      	adds	r1, #211	; 0xd3
 801adb6:	f7fe fcc7 	bl	8019748 <__assert_func>
 801adba:	005b      	lsls	r3, r3, #1
 801adbc:	3101      	adds	r1, #1
 801adbe:	e7ef      	b.n	801ada0 <__s2b+0x18>
 801adc0:	9b08      	ldr	r3, [sp, #32]
 801adc2:	6143      	str	r3, [r0, #20]
 801adc4:	2301      	movs	r3, #1
 801adc6:	6103      	str	r3, [r0, #16]
 801adc8:	2d09      	cmp	r5, #9
 801adca:	dd18      	ble.n	801adfe <__s2b+0x76>
 801adcc:	0023      	movs	r3, r4
 801adce:	3309      	adds	r3, #9
 801add0:	001f      	movs	r7, r3
 801add2:	9300      	str	r3, [sp, #0]
 801add4:	1964      	adds	r4, r4, r5
 801add6:	783b      	ldrb	r3, [r7, #0]
 801add8:	220a      	movs	r2, #10
 801adda:	0030      	movs	r0, r6
 801addc:	3b30      	subs	r3, #48	; 0x30
 801adde:	f7ff ff8f 	bl	801ad00 <__multadd>
 801ade2:	3701      	adds	r7, #1
 801ade4:	0001      	movs	r1, r0
 801ade6:	42a7      	cmp	r7, r4
 801ade8:	d1f5      	bne.n	801add6 <__s2b+0x4e>
 801adea:	002c      	movs	r4, r5
 801adec:	9b00      	ldr	r3, [sp, #0]
 801adee:	3c08      	subs	r4, #8
 801adf0:	191c      	adds	r4, r3, r4
 801adf2:	002f      	movs	r7, r5
 801adf4:	9b01      	ldr	r3, [sp, #4]
 801adf6:	429f      	cmp	r7, r3
 801adf8:	db04      	blt.n	801ae04 <__s2b+0x7c>
 801adfa:	0008      	movs	r0, r1
 801adfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801adfe:	2509      	movs	r5, #9
 801ae00:	340a      	adds	r4, #10
 801ae02:	e7f6      	b.n	801adf2 <__s2b+0x6a>
 801ae04:	1b63      	subs	r3, r4, r5
 801ae06:	5ddb      	ldrb	r3, [r3, r7]
 801ae08:	220a      	movs	r2, #10
 801ae0a:	0030      	movs	r0, r6
 801ae0c:	3b30      	subs	r3, #48	; 0x30
 801ae0e:	f7ff ff77 	bl	801ad00 <__multadd>
 801ae12:	3701      	adds	r7, #1
 801ae14:	0001      	movs	r1, r0
 801ae16:	e7ed      	b.n	801adf4 <__s2b+0x6c>
 801ae18:	0801e46c 	.word	0x0801e46c
 801ae1c:	0801e4dd 	.word	0x0801e4dd

0801ae20 <__hi0bits>:
 801ae20:	0003      	movs	r3, r0
 801ae22:	0c02      	lsrs	r2, r0, #16
 801ae24:	2000      	movs	r0, #0
 801ae26:	4282      	cmp	r2, r0
 801ae28:	d101      	bne.n	801ae2e <__hi0bits+0xe>
 801ae2a:	041b      	lsls	r3, r3, #16
 801ae2c:	3010      	adds	r0, #16
 801ae2e:	0e1a      	lsrs	r2, r3, #24
 801ae30:	d101      	bne.n	801ae36 <__hi0bits+0x16>
 801ae32:	3008      	adds	r0, #8
 801ae34:	021b      	lsls	r3, r3, #8
 801ae36:	0f1a      	lsrs	r2, r3, #28
 801ae38:	d101      	bne.n	801ae3e <__hi0bits+0x1e>
 801ae3a:	3004      	adds	r0, #4
 801ae3c:	011b      	lsls	r3, r3, #4
 801ae3e:	0f9a      	lsrs	r2, r3, #30
 801ae40:	d101      	bne.n	801ae46 <__hi0bits+0x26>
 801ae42:	3002      	adds	r0, #2
 801ae44:	009b      	lsls	r3, r3, #2
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	db03      	blt.n	801ae52 <__hi0bits+0x32>
 801ae4a:	3001      	adds	r0, #1
 801ae4c:	005b      	lsls	r3, r3, #1
 801ae4e:	d400      	bmi.n	801ae52 <__hi0bits+0x32>
 801ae50:	2020      	movs	r0, #32
 801ae52:	4770      	bx	lr

0801ae54 <__lo0bits>:
 801ae54:	6803      	ldr	r3, [r0, #0]
 801ae56:	0001      	movs	r1, r0
 801ae58:	2207      	movs	r2, #7
 801ae5a:	0018      	movs	r0, r3
 801ae5c:	4010      	ands	r0, r2
 801ae5e:	4213      	tst	r3, r2
 801ae60:	d00d      	beq.n	801ae7e <__lo0bits+0x2a>
 801ae62:	3a06      	subs	r2, #6
 801ae64:	2000      	movs	r0, #0
 801ae66:	4213      	tst	r3, r2
 801ae68:	d105      	bne.n	801ae76 <__lo0bits+0x22>
 801ae6a:	3002      	adds	r0, #2
 801ae6c:	4203      	tst	r3, r0
 801ae6e:	d003      	beq.n	801ae78 <__lo0bits+0x24>
 801ae70:	40d3      	lsrs	r3, r2
 801ae72:	0010      	movs	r0, r2
 801ae74:	600b      	str	r3, [r1, #0]
 801ae76:	4770      	bx	lr
 801ae78:	089b      	lsrs	r3, r3, #2
 801ae7a:	600b      	str	r3, [r1, #0]
 801ae7c:	e7fb      	b.n	801ae76 <__lo0bits+0x22>
 801ae7e:	b29a      	uxth	r2, r3
 801ae80:	2a00      	cmp	r2, #0
 801ae82:	d101      	bne.n	801ae88 <__lo0bits+0x34>
 801ae84:	2010      	movs	r0, #16
 801ae86:	0c1b      	lsrs	r3, r3, #16
 801ae88:	b2da      	uxtb	r2, r3
 801ae8a:	2a00      	cmp	r2, #0
 801ae8c:	d101      	bne.n	801ae92 <__lo0bits+0x3e>
 801ae8e:	3008      	adds	r0, #8
 801ae90:	0a1b      	lsrs	r3, r3, #8
 801ae92:	071a      	lsls	r2, r3, #28
 801ae94:	d101      	bne.n	801ae9a <__lo0bits+0x46>
 801ae96:	3004      	adds	r0, #4
 801ae98:	091b      	lsrs	r3, r3, #4
 801ae9a:	079a      	lsls	r2, r3, #30
 801ae9c:	d101      	bne.n	801aea2 <__lo0bits+0x4e>
 801ae9e:	3002      	adds	r0, #2
 801aea0:	089b      	lsrs	r3, r3, #2
 801aea2:	07da      	lsls	r2, r3, #31
 801aea4:	d4e9      	bmi.n	801ae7a <__lo0bits+0x26>
 801aea6:	3001      	adds	r0, #1
 801aea8:	085b      	lsrs	r3, r3, #1
 801aeaa:	d1e6      	bne.n	801ae7a <__lo0bits+0x26>
 801aeac:	2020      	movs	r0, #32
 801aeae:	e7e2      	b.n	801ae76 <__lo0bits+0x22>

0801aeb0 <__i2b>:
 801aeb0:	b510      	push	{r4, lr}
 801aeb2:	000c      	movs	r4, r1
 801aeb4:	2101      	movs	r1, #1
 801aeb6:	f7ff febb 	bl	801ac30 <_Balloc>
 801aeba:	2800      	cmp	r0, #0
 801aebc:	d107      	bne.n	801aece <__i2b+0x1e>
 801aebe:	2146      	movs	r1, #70	; 0x46
 801aec0:	4c05      	ldr	r4, [pc, #20]	; (801aed8 <__i2b+0x28>)
 801aec2:	0002      	movs	r2, r0
 801aec4:	4b05      	ldr	r3, [pc, #20]	; (801aedc <__i2b+0x2c>)
 801aec6:	0020      	movs	r0, r4
 801aec8:	31ff      	adds	r1, #255	; 0xff
 801aeca:	f7fe fc3d 	bl	8019748 <__assert_func>
 801aece:	2301      	movs	r3, #1
 801aed0:	6144      	str	r4, [r0, #20]
 801aed2:	6103      	str	r3, [r0, #16]
 801aed4:	bd10      	pop	{r4, pc}
 801aed6:	46c0      	nop			; (mov r8, r8)
 801aed8:	0801e4dd 	.word	0x0801e4dd
 801aedc:	0801e46c 	.word	0x0801e46c

0801aee0 <__multiply>:
 801aee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aee2:	0015      	movs	r5, r2
 801aee4:	690a      	ldr	r2, [r1, #16]
 801aee6:	692b      	ldr	r3, [r5, #16]
 801aee8:	000c      	movs	r4, r1
 801aeea:	b08b      	sub	sp, #44	; 0x2c
 801aeec:	429a      	cmp	r2, r3
 801aeee:	da01      	bge.n	801aef4 <__multiply+0x14>
 801aef0:	002c      	movs	r4, r5
 801aef2:	000d      	movs	r5, r1
 801aef4:	6927      	ldr	r7, [r4, #16]
 801aef6:	692e      	ldr	r6, [r5, #16]
 801aef8:	6861      	ldr	r1, [r4, #4]
 801aefa:	19bb      	adds	r3, r7, r6
 801aefc:	9303      	str	r3, [sp, #12]
 801aefe:	68a3      	ldr	r3, [r4, #8]
 801af00:	19ba      	adds	r2, r7, r6
 801af02:	4293      	cmp	r3, r2
 801af04:	da00      	bge.n	801af08 <__multiply+0x28>
 801af06:	3101      	adds	r1, #1
 801af08:	f7ff fe92 	bl	801ac30 <_Balloc>
 801af0c:	9002      	str	r0, [sp, #8]
 801af0e:	2800      	cmp	r0, #0
 801af10:	d106      	bne.n	801af20 <__multiply+0x40>
 801af12:	21b1      	movs	r1, #177	; 0xb1
 801af14:	4b48      	ldr	r3, [pc, #288]	; (801b038 <__multiply+0x158>)
 801af16:	4849      	ldr	r0, [pc, #292]	; (801b03c <__multiply+0x15c>)
 801af18:	9a02      	ldr	r2, [sp, #8]
 801af1a:	0049      	lsls	r1, r1, #1
 801af1c:	f7fe fc14 	bl	8019748 <__assert_func>
 801af20:	9b02      	ldr	r3, [sp, #8]
 801af22:	2200      	movs	r2, #0
 801af24:	3314      	adds	r3, #20
 801af26:	469c      	mov	ip, r3
 801af28:	19bb      	adds	r3, r7, r6
 801af2a:	009b      	lsls	r3, r3, #2
 801af2c:	4463      	add	r3, ip
 801af2e:	9304      	str	r3, [sp, #16]
 801af30:	4663      	mov	r3, ip
 801af32:	9904      	ldr	r1, [sp, #16]
 801af34:	428b      	cmp	r3, r1
 801af36:	d32a      	bcc.n	801af8e <__multiply+0xae>
 801af38:	0023      	movs	r3, r4
 801af3a:	00bf      	lsls	r7, r7, #2
 801af3c:	3314      	adds	r3, #20
 801af3e:	3514      	adds	r5, #20
 801af40:	9308      	str	r3, [sp, #32]
 801af42:	00b6      	lsls	r6, r6, #2
 801af44:	19db      	adds	r3, r3, r7
 801af46:	9305      	str	r3, [sp, #20]
 801af48:	19ab      	adds	r3, r5, r6
 801af4a:	9309      	str	r3, [sp, #36]	; 0x24
 801af4c:	2304      	movs	r3, #4
 801af4e:	9306      	str	r3, [sp, #24]
 801af50:	0023      	movs	r3, r4
 801af52:	9a05      	ldr	r2, [sp, #20]
 801af54:	3315      	adds	r3, #21
 801af56:	9501      	str	r5, [sp, #4]
 801af58:	429a      	cmp	r2, r3
 801af5a:	d305      	bcc.n	801af68 <__multiply+0x88>
 801af5c:	1b13      	subs	r3, r2, r4
 801af5e:	3b15      	subs	r3, #21
 801af60:	089b      	lsrs	r3, r3, #2
 801af62:	3301      	adds	r3, #1
 801af64:	009b      	lsls	r3, r3, #2
 801af66:	9306      	str	r3, [sp, #24]
 801af68:	9b01      	ldr	r3, [sp, #4]
 801af6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af6c:	4293      	cmp	r3, r2
 801af6e:	d310      	bcc.n	801af92 <__multiply+0xb2>
 801af70:	9b03      	ldr	r3, [sp, #12]
 801af72:	2b00      	cmp	r3, #0
 801af74:	dd05      	ble.n	801af82 <__multiply+0xa2>
 801af76:	9b04      	ldr	r3, [sp, #16]
 801af78:	3b04      	subs	r3, #4
 801af7a:	9304      	str	r3, [sp, #16]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d056      	beq.n	801b030 <__multiply+0x150>
 801af82:	9b02      	ldr	r3, [sp, #8]
 801af84:	9a03      	ldr	r2, [sp, #12]
 801af86:	0018      	movs	r0, r3
 801af88:	611a      	str	r2, [r3, #16]
 801af8a:	b00b      	add	sp, #44	; 0x2c
 801af8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af8e:	c304      	stmia	r3!, {r2}
 801af90:	e7cf      	b.n	801af32 <__multiply+0x52>
 801af92:	9b01      	ldr	r3, [sp, #4]
 801af94:	6818      	ldr	r0, [r3, #0]
 801af96:	b280      	uxth	r0, r0
 801af98:	2800      	cmp	r0, #0
 801af9a:	d01e      	beq.n	801afda <__multiply+0xfa>
 801af9c:	4667      	mov	r7, ip
 801af9e:	2500      	movs	r5, #0
 801afa0:	9e08      	ldr	r6, [sp, #32]
 801afa2:	ce02      	ldmia	r6!, {r1}
 801afa4:	683b      	ldr	r3, [r7, #0]
 801afa6:	9307      	str	r3, [sp, #28]
 801afa8:	b28b      	uxth	r3, r1
 801afaa:	4343      	muls	r3, r0
 801afac:	001a      	movs	r2, r3
 801afae:	466b      	mov	r3, sp
 801afb0:	8b9b      	ldrh	r3, [r3, #28]
 801afb2:	18d3      	adds	r3, r2, r3
 801afb4:	195b      	adds	r3, r3, r5
 801afb6:	0c0d      	lsrs	r5, r1, #16
 801afb8:	4345      	muls	r5, r0
 801afba:	9a07      	ldr	r2, [sp, #28]
 801afbc:	0c11      	lsrs	r1, r2, #16
 801afbe:	1869      	adds	r1, r5, r1
 801afc0:	0c1a      	lsrs	r2, r3, #16
 801afc2:	188a      	adds	r2, r1, r2
 801afc4:	b29b      	uxth	r3, r3
 801afc6:	0c15      	lsrs	r5, r2, #16
 801afc8:	0412      	lsls	r2, r2, #16
 801afca:	431a      	orrs	r2, r3
 801afcc:	9b05      	ldr	r3, [sp, #20]
 801afce:	c704      	stmia	r7!, {r2}
 801afd0:	42b3      	cmp	r3, r6
 801afd2:	d8e6      	bhi.n	801afa2 <__multiply+0xc2>
 801afd4:	4663      	mov	r3, ip
 801afd6:	9a06      	ldr	r2, [sp, #24]
 801afd8:	509d      	str	r5, [r3, r2]
 801afda:	9b01      	ldr	r3, [sp, #4]
 801afdc:	6818      	ldr	r0, [r3, #0]
 801afde:	0c00      	lsrs	r0, r0, #16
 801afe0:	d020      	beq.n	801b024 <__multiply+0x144>
 801afe2:	4663      	mov	r3, ip
 801afe4:	0025      	movs	r5, r4
 801afe6:	4661      	mov	r1, ip
 801afe8:	2700      	movs	r7, #0
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	3514      	adds	r5, #20
 801afee:	682a      	ldr	r2, [r5, #0]
 801aff0:	680e      	ldr	r6, [r1, #0]
 801aff2:	b292      	uxth	r2, r2
 801aff4:	4342      	muls	r2, r0
 801aff6:	0c36      	lsrs	r6, r6, #16
 801aff8:	1992      	adds	r2, r2, r6
 801affa:	19d2      	adds	r2, r2, r7
 801affc:	0416      	lsls	r6, r2, #16
 801affe:	b29b      	uxth	r3, r3
 801b000:	431e      	orrs	r6, r3
 801b002:	600e      	str	r6, [r1, #0]
 801b004:	cd40      	ldmia	r5!, {r6}
 801b006:	684b      	ldr	r3, [r1, #4]
 801b008:	0c36      	lsrs	r6, r6, #16
 801b00a:	4346      	muls	r6, r0
 801b00c:	b29b      	uxth	r3, r3
 801b00e:	0c12      	lsrs	r2, r2, #16
 801b010:	18f3      	adds	r3, r6, r3
 801b012:	189b      	adds	r3, r3, r2
 801b014:	9a05      	ldr	r2, [sp, #20]
 801b016:	0c1f      	lsrs	r7, r3, #16
 801b018:	3104      	adds	r1, #4
 801b01a:	42aa      	cmp	r2, r5
 801b01c:	d8e7      	bhi.n	801afee <__multiply+0x10e>
 801b01e:	4662      	mov	r2, ip
 801b020:	9906      	ldr	r1, [sp, #24]
 801b022:	5053      	str	r3, [r2, r1]
 801b024:	9b01      	ldr	r3, [sp, #4]
 801b026:	3304      	adds	r3, #4
 801b028:	9301      	str	r3, [sp, #4]
 801b02a:	2304      	movs	r3, #4
 801b02c:	449c      	add	ip, r3
 801b02e:	e79b      	b.n	801af68 <__multiply+0x88>
 801b030:	9b03      	ldr	r3, [sp, #12]
 801b032:	3b01      	subs	r3, #1
 801b034:	9303      	str	r3, [sp, #12]
 801b036:	e79b      	b.n	801af70 <__multiply+0x90>
 801b038:	0801e46c 	.word	0x0801e46c
 801b03c:	0801e4dd 	.word	0x0801e4dd

0801b040 <__pow5mult>:
 801b040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b042:	2303      	movs	r3, #3
 801b044:	0015      	movs	r5, r2
 801b046:	0007      	movs	r7, r0
 801b048:	000e      	movs	r6, r1
 801b04a:	401a      	ands	r2, r3
 801b04c:	421d      	tst	r5, r3
 801b04e:	d008      	beq.n	801b062 <__pow5mult+0x22>
 801b050:	4925      	ldr	r1, [pc, #148]	; (801b0e8 <__pow5mult+0xa8>)
 801b052:	3a01      	subs	r2, #1
 801b054:	0092      	lsls	r2, r2, #2
 801b056:	5852      	ldr	r2, [r2, r1]
 801b058:	2300      	movs	r3, #0
 801b05a:	0031      	movs	r1, r6
 801b05c:	f7ff fe50 	bl	801ad00 <__multadd>
 801b060:	0006      	movs	r6, r0
 801b062:	10ad      	asrs	r5, r5, #2
 801b064:	d03d      	beq.n	801b0e2 <__pow5mult+0xa2>
 801b066:	69fc      	ldr	r4, [r7, #28]
 801b068:	2c00      	cmp	r4, #0
 801b06a:	d10f      	bne.n	801b08c <__pow5mult+0x4c>
 801b06c:	2010      	movs	r0, #16
 801b06e:	f7fc fa6d 	bl	801754c <malloc>
 801b072:	1e02      	subs	r2, r0, #0
 801b074:	61f8      	str	r0, [r7, #28]
 801b076:	d105      	bne.n	801b084 <__pow5mult+0x44>
 801b078:	21b4      	movs	r1, #180	; 0xb4
 801b07a:	4b1c      	ldr	r3, [pc, #112]	; (801b0ec <__pow5mult+0xac>)
 801b07c:	481c      	ldr	r0, [pc, #112]	; (801b0f0 <__pow5mult+0xb0>)
 801b07e:	31ff      	adds	r1, #255	; 0xff
 801b080:	f7fe fb62 	bl	8019748 <__assert_func>
 801b084:	6044      	str	r4, [r0, #4]
 801b086:	6084      	str	r4, [r0, #8]
 801b088:	6004      	str	r4, [r0, #0]
 801b08a:	60c4      	str	r4, [r0, #12]
 801b08c:	69fb      	ldr	r3, [r7, #28]
 801b08e:	689c      	ldr	r4, [r3, #8]
 801b090:	9301      	str	r3, [sp, #4]
 801b092:	2c00      	cmp	r4, #0
 801b094:	d108      	bne.n	801b0a8 <__pow5mult+0x68>
 801b096:	0038      	movs	r0, r7
 801b098:	4916      	ldr	r1, [pc, #88]	; (801b0f4 <__pow5mult+0xb4>)
 801b09a:	f7ff ff09 	bl	801aeb0 <__i2b>
 801b09e:	9b01      	ldr	r3, [sp, #4]
 801b0a0:	0004      	movs	r4, r0
 801b0a2:	6098      	str	r0, [r3, #8]
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	6003      	str	r3, [r0, #0]
 801b0a8:	2301      	movs	r3, #1
 801b0aa:	421d      	tst	r5, r3
 801b0ac:	d00a      	beq.n	801b0c4 <__pow5mult+0x84>
 801b0ae:	0031      	movs	r1, r6
 801b0b0:	0022      	movs	r2, r4
 801b0b2:	0038      	movs	r0, r7
 801b0b4:	f7ff ff14 	bl	801aee0 <__multiply>
 801b0b8:	0031      	movs	r1, r6
 801b0ba:	9001      	str	r0, [sp, #4]
 801b0bc:	0038      	movs	r0, r7
 801b0be:	f7ff fdfb 	bl	801acb8 <_Bfree>
 801b0c2:	9e01      	ldr	r6, [sp, #4]
 801b0c4:	106d      	asrs	r5, r5, #1
 801b0c6:	d00c      	beq.n	801b0e2 <__pow5mult+0xa2>
 801b0c8:	6820      	ldr	r0, [r4, #0]
 801b0ca:	2800      	cmp	r0, #0
 801b0cc:	d107      	bne.n	801b0de <__pow5mult+0x9e>
 801b0ce:	0022      	movs	r2, r4
 801b0d0:	0021      	movs	r1, r4
 801b0d2:	0038      	movs	r0, r7
 801b0d4:	f7ff ff04 	bl	801aee0 <__multiply>
 801b0d8:	2300      	movs	r3, #0
 801b0da:	6020      	str	r0, [r4, #0]
 801b0dc:	6003      	str	r3, [r0, #0]
 801b0de:	0004      	movs	r4, r0
 801b0e0:	e7e2      	b.n	801b0a8 <__pow5mult+0x68>
 801b0e2:	0030      	movs	r0, r6
 801b0e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b0e6:	46c0      	nop			; (mov r8, r8)
 801b0e8:	0801e628 	.word	0x0801e628
 801b0ec:	0801e352 	.word	0x0801e352
 801b0f0:	0801e4dd 	.word	0x0801e4dd
 801b0f4:	00000271 	.word	0x00000271

0801b0f8 <__lshift>:
 801b0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0fa:	000c      	movs	r4, r1
 801b0fc:	0017      	movs	r7, r2
 801b0fe:	6923      	ldr	r3, [r4, #16]
 801b100:	1155      	asrs	r5, r2, #5
 801b102:	b087      	sub	sp, #28
 801b104:	18eb      	adds	r3, r5, r3
 801b106:	9302      	str	r3, [sp, #8]
 801b108:	3301      	adds	r3, #1
 801b10a:	9301      	str	r3, [sp, #4]
 801b10c:	6849      	ldr	r1, [r1, #4]
 801b10e:	68a3      	ldr	r3, [r4, #8]
 801b110:	9004      	str	r0, [sp, #16]
 801b112:	9a01      	ldr	r2, [sp, #4]
 801b114:	4293      	cmp	r3, r2
 801b116:	db10      	blt.n	801b13a <__lshift+0x42>
 801b118:	9804      	ldr	r0, [sp, #16]
 801b11a:	f7ff fd89 	bl	801ac30 <_Balloc>
 801b11e:	2300      	movs	r3, #0
 801b120:	0002      	movs	r2, r0
 801b122:	0006      	movs	r6, r0
 801b124:	0019      	movs	r1, r3
 801b126:	3214      	adds	r2, #20
 801b128:	4298      	cmp	r0, r3
 801b12a:	d10c      	bne.n	801b146 <__lshift+0x4e>
 801b12c:	31df      	adds	r1, #223	; 0xdf
 801b12e:	0032      	movs	r2, r6
 801b130:	4b26      	ldr	r3, [pc, #152]	; (801b1cc <__lshift+0xd4>)
 801b132:	4827      	ldr	r0, [pc, #156]	; (801b1d0 <__lshift+0xd8>)
 801b134:	31ff      	adds	r1, #255	; 0xff
 801b136:	f7fe fb07 	bl	8019748 <__assert_func>
 801b13a:	3101      	adds	r1, #1
 801b13c:	005b      	lsls	r3, r3, #1
 801b13e:	e7e8      	b.n	801b112 <__lshift+0x1a>
 801b140:	0098      	lsls	r0, r3, #2
 801b142:	5011      	str	r1, [r2, r0]
 801b144:	3301      	adds	r3, #1
 801b146:	42ab      	cmp	r3, r5
 801b148:	dbfa      	blt.n	801b140 <__lshift+0x48>
 801b14a:	43eb      	mvns	r3, r5
 801b14c:	17db      	asrs	r3, r3, #31
 801b14e:	401d      	ands	r5, r3
 801b150:	211f      	movs	r1, #31
 801b152:	0023      	movs	r3, r4
 801b154:	0038      	movs	r0, r7
 801b156:	00ad      	lsls	r5, r5, #2
 801b158:	1955      	adds	r5, r2, r5
 801b15a:	6922      	ldr	r2, [r4, #16]
 801b15c:	3314      	adds	r3, #20
 801b15e:	0092      	lsls	r2, r2, #2
 801b160:	4008      	ands	r0, r1
 801b162:	4684      	mov	ip, r0
 801b164:	189a      	adds	r2, r3, r2
 801b166:	420f      	tst	r7, r1
 801b168:	d02a      	beq.n	801b1c0 <__lshift+0xc8>
 801b16a:	3101      	adds	r1, #1
 801b16c:	1a09      	subs	r1, r1, r0
 801b16e:	9105      	str	r1, [sp, #20]
 801b170:	2100      	movs	r1, #0
 801b172:	9503      	str	r5, [sp, #12]
 801b174:	4667      	mov	r7, ip
 801b176:	6818      	ldr	r0, [r3, #0]
 801b178:	40b8      	lsls	r0, r7
 801b17a:	4308      	orrs	r0, r1
 801b17c:	9903      	ldr	r1, [sp, #12]
 801b17e:	c101      	stmia	r1!, {r0}
 801b180:	9103      	str	r1, [sp, #12]
 801b182:	9805      	ldr	r0, [sp, #20]
 801b184:	cb02      	ldmia	r3!, {r1}
 801b186:	40c1      	lsrs	r1, r0
 801b188:	429a      	cmp	r2, r3
 801b18a:	d8f3      	bhi.n	801b174 <__lshift+0x7c>
 801b18c:	0020      	movs	r0, r4
 801b18e:	3015      	adds	r0, #21
 801b190:	2304      	movs	r3, #4
 801b192:	4282      	cmp	r2, r0
 801b194:	d304      	bcc.n	801b1a0 <__lshift+0xa8>
 801b196:	1b13      	subs	r3, r2, r4
 801b198:	3b15      	subs	r3, #21
 801b19a:	089b      	lsrs	r3, r3, #2
 801b19c:	3301      	adds	r3, #1
 801b19e:	009b      	lsls	r3, r3, #2
 801b1a0:	50e9      	str	r1, [r5, r3]
 801b1a2:	2900      	cmp	r1, #0
 801b1a4:	d002      	beq.n	801b1ac <__lshift+0xb4>
 801b1a6:	9b02      	ldr	r3, [sp, #8]
 801b1a8:	3302      	adds	r3, #2
 801b1aa:	9301      	str	r3, [sp, #4]
 801b1ac:	9b01      	ldr	r3, [sp, #4]
 801b1ae:	9804      	ldr	r0, [sp, #16]
 801b1b0:	3b01      	subs	r3, #1
 801b1b2:	0021      	movs	r1, r4
 801b1b4:	6133      	str	r3, [r6, #16]
 801b1b6:	f7ff fd7f 	bl	801acb8 <_Bfree>
 801b1ba:	0030      	movs	r0, r6
 801b1bc:	b007      	add	sp, #28
 801b1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b1c0:	cb02      	ldmia	r3!, {r1}
 801b1c2:	c502      	stmia	r5!, {r1}
 801b1c4:	429a      	cmp	r2, r3
 801b1c6:	d8fb      	bhi.n	801b1c0 <__lshift+0xc8>
 801b1c8:	e7f0      	b.n	801b1ac <__lshift+0xb4>
 801b1ca:	46c0      	nop			; (mov r8, r8)
 801b1cc:	0801e46c 	.word	0x0801e46c
 801b1d0:	0801e4dd 	.word	0x0801e4dd

0801b1d4 <__mcmp>:
 801b1d4:	b530      	push	{r4, r5, lr}
 801b1d6:	690b      	ldr	r3, [r1, #16]
 801b1d8:	6904      	ldr	r4, [r0, #16]
 801b1da:	0002      	movs	r2, r0
 801b1dc:	1ae0      	subs	r0, r4, r3
 801b1de:	429c      	cmp	r4, r3
 801b1e0:	d10e      	bne.n	801b200 <__mcmp+0x2c>
 801b1e2:	3214      	adds	r2, #20
 801b1e4:	009b      	lsls	r3, r3, #2
 801b1e6:	3114      	adds	r1, #20
 801b1e8:	0014      	movs	r4, r2
 801b1ea:	18c9      	adds	r1, r1, r3
 801b1ec:	18d2      	adds	r2, r2, r3
 801b1ee:	3a04      	subs	r2, #4
 801b1f0:	3904      	subs	r1, #4
 801b1f2:	6815      	ldr	r5, [r2, #0]
 801b1f4:	680b      	ldr	r3, [r1, #0]
 801b1f6:	429d      	cmp	r5, r3
 801b1f8:	d003      	beq.n	801b202 <__mcmp+0x2e>
 801b1fa:	2001      	movs	r0, #1
 801b1fc:	429d      	cmp	r5, r3
 801b1fe:	d303      	bcc.n	801b208 <__mcmp+0x34>
 801b200:	bd30      	pop	{r4, r5, pc}
 801b202:	4294      	cmp	r4, r2
 801b204:	d3f3      	bcc.n	801b1ee <__mcmp+0x1a>
 801b206:	e7fb      	b.n	801b200 <__mcmp+0x2c>
 801b208:	4240      	negs	r0, r0
 801b20a:	e7f9      	b.n	801b200 <__mcmp+0x2c>

0801b20c <__mdiff>:
 801b20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b20e:	000e      	movs	r6, r1
 801b210:	0007      	movs	r7, r0
 801b212:	0011      	movs	r1, r2
 801b214:	0030      	movs	r0, r6
 801b216:	b087      	sub	sp, #28
 801b218:	0014      	movs	r4, r2
 801b21a:	f7ff ffdb 	bl	801b1d4 <__mcmp>
 801b21e:	1e05      	subs	r5, r0, #0
 801b220:	d110      	bne.n	801b244 <__mdiff+0x38>
 801b222:	0001      	movs	r1, r0
 801b224:	0038      	movs	r0, r7
 801b226:	f7ff fd03 	bl	801ac30 <_Balloc>
 801b22a:	1e02      	subs	r2, r0, #0
 801b22c:	d104      	bne.n	801b238 <__mdiff+0x2c>
 801b22e:	4b3f      	ldr	r3, [pc, #252]	; (801b32c <__mdiff+0x120>)
 801b230:	483f      	ldr	r0, [pc, #252]	; (801b330 <__mdiff+0x124>)
 801b232:	4940      	ldr	r1, [pc, #256]	; (801b334 <__mdiff+0x128>)
 801b234:	f7fe fa88 	bl	8019748 <__assert_func>
 801b238:	2301      	movs	r3, #1
 801b23a:	6145      	str	r5, [r0, #20]
 801b23c:	6103      	str	r3, [r0, #16]
 801b23e:	0010      	movs	r0, r2
 801b240:	b007      	add	sp, #28
 801b242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b244:	2301      	movs	r3, #1
 801b246:	9301      	str	r3, [sp, #4]
 801b248:	2800      	cmp	r0, #0
 801b24a:	db04      	blt.n	801b256 <__mdiff+0x4a>
 801b24c:	0023      	movs	r3, r4
 801b24e:	0034      	movs	r4, r6
 801b250:	001e      	movs	r6, r3
 801b252:	2300      	movs	r3, #0
 801b254:	9301      	str	r3, [sp, #4]
 801b256:	0038      	movs	r0, r7
 801b258:	6861      	ldr	r1, [r4, #4]
 801b25a:	f7ff fce9 	bl	801ac30 <_Balloc>
 801b25e:	1e02      	subs	r2, r0, #0
 801b260:	d103      	bne.n	801b26a <__mdiff+0x5e>
 801b262:	4b32      	ldr	r3, [pc, #200]	; (801b32c <__mdiff+0x120>)
 801b264:	4832      	ldr	r0, [pc, #200]	; (801b330 <__mdiff+0x124>)
 801b266:	4934      	ldr	r1, [pc, #208]	; (801b338 <__mdiff+0x12c>)
 801b268:	e7e4      	b.n	801b234 <__mdiff+0x28>
 801b26a:	9b01      	ldr	r3, [sp, #4]
 801b26c:	2700      	movs	r7, #0
 801b26e:	60c3      	str	r3, [r0, #12]
 801b270:	6920      	ldr	r0, [r4, #16]
 801b272:	3414      	adds	r4, #20
 801b274:	0083      	lsls	r3, r0, #2
 801b276:	18e3      	adds	r3, r4, r3
 801b278:	0021      	movs	r1, r4
 801b27a:	9401      	str	r4, [sp, #4]
 801b27c:	0034      	movs	r4, r6
 801b27e:	9302      	str	r3, [sp, #8]
 801b280:	6933      	ldr	r3, [r6, #16]
 801b282:	3414      	adds	r4, #20
 801b284:	009b      	lsls	r3, r3, #2
 801b286:	18e3      	adds	r3, r4, r3
 801b288:	9303      	str	r3, [sp, #12]
 801b28a:	0013      	movs	r3, r2
 801b28c:	3314      	adds	r3, #20
 801b28e:	469c      	mov	ip, r3
 801b290:	9305      	str	r3, [sp, #20]
 801b292:	9104      	str	r1, [sp, #16]
 801b294:	9b04      	ldr	r3, [sp, #16]
 801b296:	cc02      	ldmia	r4!, {r1}
 801b298:	cb20      	ldmia	r3!, {r5}
 801b29a:	9304      	str	r3, [sp, #16]
 801b29c:	b2ab      	uxth	r3, r5
 801b29e:	19df      	adds	r7, r3, r7
 801b2a0:	b28b      	uxth	r3, r1
 801b2a2:	1afb      	subs	r3, r7, r3
 801b2a4:	0c09      	lsrs	r1, r1, #16
 801b2a6:	0c2d      	lsrs	r5, r5, #16
 801b2a8:	1a6d      	subs	r5, r5, r1
 801b2aa:	1419      	asrs	r1, r3, #16
 801b2ac:	1869      	adds	r1, r5, r1
 801b2ae:	b29b      	uxth	r3, r3
 801b2b0:	140f      	asrs	r7, r1, #16
 801b2b2:	0409      	lsls	r1, r1, #16
 801b2b4:	4319      	orrs	r1, r3
 801b2b6:	4663      	mov	r3, ip
 801b2b8:	c302      	stmia	r3!, {r1}
 801b2ba:	469c      	mov	ip, r3
 801b2bc:	9b03      	ldr	r3, [sp, #12]
 801b2be:	42a3      	cmp	r3, r4
 801b2c0:	d8e8      	bhi.n	801b294 <__mdiff+0x88>
 801b2c2:	0031      	movs	r1, r6
 801b2c4:	9c03      	ldr	r4, [sp, #12]
 801b2c6:	3115      	adds	r1, #21
 801b2c8:	2304      	movs	r3, #4
 801b2ca:	428c      	cmp	r4, r1
 801b2cc:	d304      	bcc.n	801b2d8 <__mdiff+0xcc>
 801b2ce:	1ba3      	subs	r3, r4, r6
 801b2d0:	3b15      	subs	r3, #21
 801b2d2:	089b      	lsrs	r3, r3, #2
 801b2d4:	3301      	adds	r3, #1
 801b2d6:	009b      	lsls	r3, r3, #2
 801b2d8:	9901      	ldr	r1, [sp, #4]
 801b2da:	18cd      	adds	r5, r1, r3
 801b2dc:	9905      	ldr	r1, [sp, #20]
 801b2de:	002e      	movs	r6, r5
 801b2e0:	18cb      	adds	r3, r1, r3
 801b2e2:	469c      	mov	ip, r3
 801b2e4:	9902      	ldr	r1, [sp, #8]
 801b2e6:	428e      	cmp	r6, r1
 801b2e8:	d310      	bcc.n	801b30c <__mdiff+0x100>
 801b2ea:	9e02      	ldr	r6, [sp, #8]
 801b2ec:	1ee9      	subs	r1, r5, #3
 801b2ee:	2400      	movs	r4, #0
 801b2f0:	428e      	cmp	r6, r1
 801b2f2:	d304      	bcc.n	801b2fe <__mdiff+0xf2>
 801b2f4:	0031      	movs	r1, r6
 801b2f6:	3103      	adds	r1, #3
 801b2f8:	1b49      	subs	r1, r1, r5
 801b2fa:	0889      	lsrs	r1, r1, #2
 801b2fc:	008c      	lsls	r4, r1, #2
 801b2fe:	191b      	adds	r3, r3, r4
 801b300:	3b04      	subs	r3, #4
 801b302:	6819      	ldr	r1, [r3, #0]
 801b304:	2900      	cmp	r1, #0
 801b306:	d00f      	beq.n	801b328 <__mdiff+0x11c>
 801b308:	6110      	str	r0, [r2, #16]
 801b30a:	e798      	b.n	801b23e <__mdiff+0x32>
 801b30c:	ce02      	ldmia	r6!, {r1}
 801b30e:	b28c      	uxth	r4, r1
 801b310:	19e4      	adds	r4, r4, r7
 801b312:	0c0f      	lsrs	r7, r1, #16
 801b314:	1421      	asrs	r1, r4, #16
 801b316:	1879      	adds	r1, r7, r1
 801b318:	b2a4      	uxth	r4, r4
 801b31a:	140f      	asrs	r7, r1, #16
 801b31c:	0409      	lsls	r1, r1, #16
 801b31e:	4321      	orrs	r1, r4
 801b320:	4664      	mov	r4, ip
 801b322:	c402      	stmia	r4!, {r1}
 801b324:	46a4      	mov	ip, r4
 801b326:	e7dd      	b.n	801b2e4 <__mdiff+0xd8>
 801b328:	3801      	subs	r0, #1
 801b32a:	e7e9      	b.n	801b300 <__mdiff+0xf4>
 801b32c:	0801e46c 	.word	0x0801e46c
 801b330:	0801e4dd 	.word	0x0801e4dd
 801b334:	00000237 	.word	0x00000237
 801b338:	00000245 	.word	0x00000245

0801b33c <__ulp>:
 801b33c:	2000      	movs	r0, #0
 801b33e:	4b0b      	ldr	r3, [pc, #44]	; (801b36c <__ulp+0x30>)
 801b340:	4019      	ands	r1, r3
 801b342:	4b0b      	ldr	r3, [pc, #44]	; (801b370 <__ulp+0x34>)
 801b344:	18c9      	adds	r1, r1, r3
 801b346:	4281      	cmp	r1, r0
 801b348:	dc06      	bgt.n	801b358 <__ulp+0x1c>
 801b34a:	4249      	negs	r1, r1
 801b34c:	150b      	asrs	r3, r1, #20
 801b34e:	2b13      	cmp	r3, #19
 801b350:	dc03      	bgt.n	801b35a <__ulp+0x1e>
 801b352:	2180      	movs	r1, #128	; 0x80
 801b354:	0309      	lsls	r1, r1, #12
 801b356:	4119      	asrs	r1, r3
 801b358:	4770      	bx	lr
 801b35a:	3b14      	subs	r3, #20
 801b35c:	2001      	movs	r0, #1
 801b35e:	2b1e      	cmp	r3, #30
 801b360:	dc02      	bgt.n	801b368 <__ulp+0x2c>
 801b362:	2080      	movs	r0, #128	; 0x80
 801b364:	0600      	lsls	r0, r0, #24
 801b366:	40d8      	lsrs	r0, r3
 801b368:	2100      	movs	r1, #0
 801b36a:	e7f5      	b.n	801b358 <__ulp+0x1c>
 801b36c:	7ff00000 	.word	0x7ff00000
 801b370:	fcc00000 	.word	0xfcc00000

0801b374 <__b2d>:
 801b374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b376:	0006      	movs	r6, r0
 801b378:	6903      	ldr	r3, [r0, #16]
 801b37a:	3614      	adds	r6, #20
 801b37c:	009b      	lsls	r3, r3, #2
 801b37e:	18f3      	adds	r3, r6, r3
 801b380:	1f1d      	subs	r5, r3, #4
 801b382:	682c      	ldr	r4, [r5, #0]
 801b384:	000f      	movs	r7, r1
 801b386:	0020      	movs	r0, r4
 801b388:	9301      	str	r3, [sp, #4]
 801b38a:	f7ff fd49 	bl	801ae20 <__hi0bits>
 801b38e:	2220      	movs	r2, #32
 801b390:	1a12      	subs	r2, r2, r0
 801b392:	603a      	str	r2, [r7, #0]
 801b394:	0003      	movs	r3, r0
 801b396:	4a1c      	ldr	r2, [pc, #112]	; (801b408 <__b2d+0x94>)
 801b398:	280a      	cmp	r0, #10
 801b39a:	dc15      	bgt.n	801b3c8 <__b2d+0x54>
 801b39c:	210b      	movs	r1, #11
 801b39e:	0027      	movs	r7, r4
 801b3a0:	1a09      	subs	r1, r1, r0
 801b3a2:	40cf      	lsrs	r7, r1
 801b3a4:	433a      	orrs	r2, r7
 801b3a6:	468c      	mov	ip, r1
 801b3a8:	0011      	movs	r1, r2
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	42ae      	cmp	r6, r5
 801b3ae:	d202      	bcs.n	801b3b6 <__b2d+0x42>
 801b3b0:	9a01      	ldr	r2, [sp, #4]
 801b3b2:	3a08      	subs	r2, #8
 801b3b4:	6812      	ldr	r2, [r2, #0]
 801b3b6:	3315      	adds	r3, #21
 801b3b8:	409c      	lsls	r4, r3
 801b3ba:	4663      	mov	r3, ip
 801b3bc:	0027      	movs	r7, r4
 801b3be:	40da      	lsrs	r2, r3
 801b3c0:	4317      	orrs	r7, r2
 801b3c2:	0038      	movs	r0, r7
 801b3c4:	b003      	add	sp, #12
 801b3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3c8:	2700      	movs	r7, #0
 801b3ca:	42ae      	cmp	r6, r5
 801b3cc:	d202      	bcs.n	801b3d4 <__b2d+0x60>
 801b3ce:	9d01      	ldr	r5, [sp, #4]
 801b3d0:	3d08      	subs	r5, #8
 801b3d2:	682f      	ldr	r7, [r5, #0]
 801b3d4:	210b      	movs	r1, #11
 801b3d6:	4249      	negs	r1, r1
 801b3d8:	468c      	mov	ip, r1
 801b3da:	449c      	add	ip, r3
 801b3dc:	2b0b      	cmp	r3, #11
 801b3de:	d010      	beq.n	801b402 <__b2d+0x8e>
 801b3e0:	4661      	mov	r1, ip
 801b3e2:	2320      	movs	r3, #32
 801b3e4:	408c      	lsls	r4, r1
 801b3e6:	1a5b      	subs	r3, r3, r1
 801b3e8:	0039      	movs	r1, r7
 801b3ea:	40d9      	lsrs	r1, r3
 801b3ec:	430c      	orrs	r4, r1
 801b3ee:	4322      	orrs	r2, r4
 801b3f0:	0011      	movs	r1, r2
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	42b5      	cmp	r5, r6
 801b3f6:	d901      	bls.n	801b3fc <__b2d+0x88>
 801b3f8:	3d04      	subs	r5, #4
 801b3fa:	682a      	ldr	r2, [r5, #0]
 801b3fc:	4664      	mov	r4, ip
 801b3fe:	40a7      	lsls	r7, r4
 801b400:	e7dd      	b.n	801b3be <__b2d+0x4a>
 801b402:	4322      	orrs	r2, r4
 801b404:	0011      	movs	r1, r2
 801b406:	e7dc      	b.n	801b3c2 <__b2d+0x4e>
 801b408:	3ff00000 	.word	0x3ff00000

0801b40c <__d2b>:
 801b40c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b40e:	2101      	movs	r1, #1
 801b410:	0014      	movs	r4, r2
 801b412:	001d      	movs	r5, r3
 801b414:	9f08      	ldr	r7, [sp, #32]
 801b416:	f7ff fc0b 	bl	801ac30 <_Balloc>
 801b41a:	1e06      	subs	r6, r0, #0
 801b41c:	d105      	bne.n	801b42a <__d2b+0x1e>
 801b41e:	0032      	movs	r2, r6
 801b420:	4b24      	ldr	r3, [pc, #144]	; (801b4b4 <__d2b+0xa8>)
 801b422:	4825      	ldr	r0, [pc, #148]	; (801b4b8 <__d2b+0xac>)
 801b424:	4925      	ldr	r1, [pc, #148]	; (801b4bc <__d2b+0xb0>)
 801b426:	f7fe f98f 	bl	8019748 <__assert_func>
 801b42a:	032b      	lsls	r3, r5, #12
 801b42c:	006d      	lsls	r5, r5, #1
 801b42e:	0b1b      	lsrs	r3, r3, #12
 801b430:	0d6d      	lsrs	r5, r5, #21
 801b432:	d125      	bne.n	801b480 <__d2b+0x74>
 801b434:	9301      	str	r3, [sp, #4]
 801b436:	2c00      	cmp	r4, #0
 801b438:	d028      	beq.n	801b48c <__d2b+0x80>
 801b43a:	4668      	mov	r0, sp
 801b43c:	9400      	str	r4, [sp, #0]
 801b43e:	f7ff fd09 	bl	801ae54 <__lo0bits>
 801b442:	9b01      	ldr	r3, [sp, #4]
 801b444:	9900      	ldr	r1, [sp, #0]
 801b446:	2800      	cmp	r0, #0
 801b448:	d01e      	beq.n	801b488 <__d2b+0x7c>
 801b44a:	2220      	movs	r2, #32
 801b44c:	001c      	movs	r4, r3
 801b44e:	1a12      	subs	r2, r2, r0
 801b450:	4094      	lsls	r4, r2
 801b452:	0022      	movs	r2, r4
 801b454:	40c3      	lsrs	r3, r0
 801b456:	430a      	orrs	r2, r1
 801b458:	6172      	str	r2, [r6, #20]
 801b45a:	9301      	str	r3, [sp, #4]
 801b45c:	9c01      	ldr	r4, [sp, #4]
 801b45e:	61b4      	str	r4, [r6, #24]
 801b460:	1e63      	subs	r3, r4, #1
 801b462:	419c      	sbcs	r4, r3
 801b464:	3401      	adds	r4, #1
 801b466:	6134      	str	r4, [r6, #16]
 801b468:	2d00      	cmp	r5, #0
 801b46a:	d017      	beq.n	801b49c <__d2b+0x90>
 801b46c:	2435      	movs	r4, #53	; 0x35
 801b46e:	4b14      	ldr	r3, [pc, #80]	; (801b4c0 <__d2b+0xb4>)
 801b470:	18ed      	adds	r5, r5, r3
 801b472:	182d      	adds	r5, r5, r0
 801b474:	603d      	str	r5, [r7, #0]
 801b476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b478:	1a24      	subs	r4, r4, r0
 801b47a:	601c      	str	r4, [r3, #0]
 801b47c:	0030      	movs	r0, r6
 801b47e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b480:	2280      	movs	r2, #128	; 0x80
 801b482:	0352      	lsls	r2, r2, #13
 801b484:	4313      	orrs	r3, r2
 801b486:	e7d5      	b.n	801b434 <__d2b+0x28>
 801b488:	6171      	str	r1, [r6, #20]
 801b48a:	e7e7      	b.n	801b45c <__d2b+0x50>
 801b48c:	a801      	add	r0, sp, #4
 801b48e:	f7ff fce1 	bl	801ae54 <__lo0bits>
 801b492:	9b01      	ldr	r3, [sp, #4]
 801b494:	2401      	movs	r4, #1
 801b496:	6173      	str	r3, [r6, #20]
 801b498:	3020      	adds	r0, #32
 801b49a:	e7e4      	b.n	801b466 <__d2b+0x5a>
 801b49c:	4b09      	ldr	r3, [pc, #36]	; (801b4c4 <__d2b+0xb8>)
 801b49e:	18c0      	adds	r0, r0, r3
 801b4a0:	4b09      	ldr	r3, [pc, #36]	; (801b4c8 <__d2b+0xbc>)
 801b4a2:	6038      	str	r0, [r7, #0]
 801b4a4:	18e3      	adds	r3, r4, r3
 801b4a6:	009b      	lsls	r3, r3, #2
 801b4a8:	18f3      	adds	r3, r6, r3
 801b4aa:	6958      	ldr	r0, [r3, #20]
 801b4ac:	f7ff fcb8 	bl	801ae20 <__hi0bits>
 801b4b0:	0164      	lsls	r4, r4, #5
 801b4b2:	e7e0      	b.n	801b476 <__d2b+0x6a>
 801b4b4:	0801e46c 	.word	0x0801e46c
 801b4b8:	0801e4dd 	.word	0x0801e4dd
 801b4bc:	0000030f 	.word	0x0000030f
 801b4c0:	fffffbcd 	.word	0xfffffbcd
 801b4c4:	fffffbce 	.word	0xfffffbce
 801b4c8:	3fffffff 	.word	0x3fffffff

0801b4cc <__ratio>:
 801b4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4ce:	b087      	sub	sp, #28
 801b4d0:	000f      	movs	r7, r1
 801b4d2:	a904      	add	r1, sp, #16
 801b4d4:	0006      	movs	r6, r0
 801b4d6:	f7ff ff4d 	bl	801b374 <__b2d>
 801b4da:	9000      	str	r0, [sp, #0]
 801b4dc:	9101      	str	r1, [sp, #4]
 801b4de:	9c00      	ldr	r4, [sp, #0]
 801b4e0:	9d01      	ldr	r5, [sp, #4]
 801b4e2:	0038      	movs	r0, r7
 801b4e4:	a905      	add	r1, sp, #20
 801b4e6:	f7ff ff45 	bl	801b374 <__b2d>
 801b4ea:	9002      	str	r0, [sp, #8]
 801b4ec:	9103      	str	r1, [sp, #12]
 801b4ee:	9a02      	ldr	r2, [sp, #8]
 801b4f0:	9b03      	ldr	r3, [sp, #12]
 801b4f2:	6930      	ldr	r0, [r6, #16]
 801b4f4:	6939      	ldr	r1, [r7, #16]
 801b4f6:	9e04      	ldr	r6, [sp, #16]
 801b4f8:	1a40      	subs	r0, r0, r1
 801b4fa:	9905      	ldr	r1, [sp, #20]
 801b4fc:	0140      	lsls	r0, r0, #5
 801b4fe:	1a71      	subs	r1, r6, r1
 801b500:	1841      	adds	r1, r0, r1
 801b502:	0508      	lsls	r0, r1, #20
 801b504:	2900      	cmp	r1, #0
 801b506:	dd07      	ble.n	801b518 <__ratio+0x4c>
 801b508:	9901      	ldr	r1, [sp, #4]
 801b50a:	1845      	adds	r5, r0, r1
 801b50c:	0020      	movs	r0, r4
 801b50e:	0029      	movs	r1, r5
 801b510:	f7f2 fee2 	bl	800e2d8 <__aeabi_ddiv>
 801b514:	b007      	add	sp, #28
 801b516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b518:	9903      	ldr	r1, [sp, #12]
 801b51a:	1a0b      	subs	r3, r1, r0
 801b51c:	e7f6      	b.n	801b50c <__ratio+0x40>

0801b51e <__copybits>:
 801b51e:	b570      	push	{r4, r5, r6, lr}
 801b520:	0014      	movs	r4, r2
 801b522:	0005      	movs	r5, r0
 801b524:	3901      	subs	r1, #1
 801b526:	6913      	ldr	r3, [r2, #16]
 801b528:	1149      	asrs	r1, r1, #5
 801b52a:	3101      	adds	r1, #1
 801b52c:	0089      	lsls	r1, r1, #2
 801b52e:	3414      	adds	r4, #20
 801b530:	009b      	lsls	r3, r3, #2
 801b532:	1841      	adds	r1, r0, r1
 801b534:	18e3      	adds	r3, r4, r3
 801b536:	42a3      	cmp	r3, r4
 801b538:	d80d      	bhi.n	801b556 <__copybits+0x38>
 801b53a:	0014      	movs	r4, r2
 801b53c:	3411      	adds	r4, #17
 801b53e:	2500      	movs	r5, #0
 801b540:	429c      	cmp	r4, r3
 801b542:	d803      	bhi.n	801b54c <__copybits+0x2e>
 801b544:	1a9b      	subs	r3, r3, r2
 801b546:	3b11      	subs	r3, #17
 801b548:	089b      	lsrs	r3, r3, #2
 801b54a:	009d      	lsls	r5, r3, #2
 801b54c:	2300      	movs	r3, #0
 801b54e:	1940      	adds	r0, r0, r5
 801b550:	4281      	cmp	r1, r0
 801b552:	d803      	bhi.n	801b55c <__copybits+0x3e>
 801b554:	bd70      	pop	{r4, r5, r6, pc}
 801b556:	cc40      	ldmia	r4!, {r6}
 801b558:	c540      	stmia	r5!, {r6}
 801b55a:	e7ec      	b.n	801b536 <__copybits+0x18>
 801b55c:	c008      	stmia	r0!, {r3}
 801b55e:	e7f7      	b.n	801b550 <__copybits+0x32>

0801b560 <__any_on>:
 801b560:	0002      	movs	r2, r0
 801b562:	6900      	ldr	r0, [r0, #16]
 801b564:	b510      	push	{r4, lr}
 801b566:	3214      	adds	r2, #20
 801b568:	114b      	asrs	r3, r1, #5
 801b56a:	4298      	cmp	r0, r3
 801b56c:	db13      	blt.n	801b596 <__any_on+0x36>
 801b56e:	dd0c      	ble.n	801b58a <__any_on+0x2a>
 801b570:	241f      	movs	r4, #31
 801b572:	0008      	movs	r0, r1
 801b574:	4020      	ands	r0, r4
 801b576:	4221      	tst	r1, r4
 801b578:	d007      	beq.n	801b58a <__any_on+0x2a>
 801b57a:	0099      	lsls	r1, r3, #2
 801b57c:	588c      	ldr	r4, [r1, r2]
 801b57e:	0021      	movs	r1, r4
 801b580:	40c1      	lsrs	r1, r0
 801b582:	4081      	lsls	r1, r0
 801b584:	2001      	movs	r0, #1
 801b586:	428c      	cmp	r4, r1
 801b588:	d104      	bne.n	801b594 <__any_on+0x34>
 801b58a:	009b      	lsls	r3, r3, #2
 801b58c:	18d3      	adds	r3, r2, r3
 801b58e:	4293      	cmp	r3, r2
 801b590:	d803      	bhi.n	801b59a <__any_on+0x3a>
 801b592:	2000      	movs	r0, #0
 801b594:	bd10      	pop	{r4, pc}
 801b596:	0003      	movs	r3, r0
 801b598:	e7f7      	b.n	801b58a <__any_on+0x2a>
 801b59a:	3b04      	subs	r3, #4
 801b59c:	6819      	ldr	r1, [r3, #0]
 801b59e:	2900      	cmp	r1, #0
 801b5a0:	d0f5      	beq.n	801b58e <__any_on+0x2e>
 801b5a2:	2001      	movs	r0, #1
 801b5a4:	e7f6      	b.n	801b594 <__any_on+0x34>

0801b5a6 <__ascii_wctomb>:
 801b5a6:	0003      	movs	r3, r0
 801b5a8:	1e08      	subs	r0, r1, #0
 801b5aa:	d005      	beq.n	801b5b8 <__ascii_wctomb+0x12>
 801b5ac:	2aff      	cmp	r2, #255	; 0xff
 801b5ae:	d904      	bls.n	801b5ba <__ascii_wctomb+0x14>
 801b5b0:	228a      	movs	r2, #138	; 0x8a
 801b5b2:	2001      	movs	r0, #1
 801b5b4:	601a      	str	r2, [r3, #0]
 801b5b6:	4240      	negs	r0, r0
 801b5b8:	4770      	bx	lr
 801b5ba:	2001      	movs	r0, #1
 801b5bc:	700a      	strb	r2, [r1, #0]
 801b5be:	e7fb      	b.n	801b5b8 <__ascii_wctomb+0x12>

0801b5c0 <__ssputs_r>:
 801b5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5c2:	b085      	sub	sp, #20
 801b5c4:	9301      	str	r3, [sp, #4]
 801b5c6:	9203      	str	r2, [sp, #12]
 801b5c8:	688e      	ldr	r6, [r1, #8]
 801b5ca:	9a01      	ldr	r2, [sp, #4]
 801b5cc:	0007      	movs	r7, r0
 801b5ce:	000c      	movs	r4, r1
 801b5d0:	680b      	ldr	r3, [r1, #0]
 801b5d2:	4296      	cmp	r6, r2
 801b5d4:	d831      	bhi.n	801b63a <__ssputs_r+0x7a>
 801b5d6:	898a      	ldrh	r2, [r1, #12]
 801b5d8:	2190      	movs	r1, #144	; 0x90
 801b5da:	00c9      	lsls	r1, r1, #3
 801b5dc:	420a      	tst	r2, r1
 801b5de:	d029      	beq.n	801b634 <__ssputs_r+0x74>
 801b5e0:	2003      	movs	r0, #3
 801b5e2:	6921      	ldr	r1, [r4, #16]
 801b5e4:	1a5b      	subs	r3, r3, r1
 801b5e6:	9302      	str	r3, [sp, #8]
 801b5e8:	6963      	ldr	r3, [r4, #20]
 801b5ea:	4343      	muls	r3, r0
 801b5ec:	0fdd      	lsrs	r5, r3, #31
 801b5ee:	18ed      	adds	r5, r5, r3
 801b5f0:	9b01      	ldr	r3, [sp, #4]
 801b5f2:	9802      	ldr	r0, [sp, #8]
 801b5f4:	3301      	adds	r3, #1
 801b5f6:	181b      	adds	r3, r3, r0
 801b5f8:	106d      	asrs	r5, r5, #1
 801b5fa:	42ab      	cmp	r3, r5
 801b5fc:	d900      	bls.n	801b600 <__ssputs_r+0x40>
 801b5fe:	001d      	movs	r5, r3
 801b600:	0552      	lsls	r2, r2, #21
 801b602:	d529      	bpl.n	801b658 <__ssputs_r+0x98>
 801b604:	0029      	movs	r1, r5
 801b606:	0038      	movs	r0, r7
 801b608:	f7fb ffcc 	bl	80175a4 <_malloc_r>
 801b60c:	1e06      	subs	r6, r0, #0
 801b60e:	d02d      	beq.n	801b66c <__ssputs_r+0xac>
 801b610:	9a02      	ldr	r2, [sp, #8]
 801b612:	6921      	ldr	r1, [r4, #16]
 801b614:	f7fe f884 	bl	8019720 <memcpy>
 801b618:	89a2      	ldrh	r2, [r4, #12]
 801b61a:	4b19      	ldr	r3, [pc, #100]	; (801b680 <__ssputs_r+0xc0>)
 801b61c:	401a      	ands	r2, r3
 801b61e:	2380      	movs	r3, #128	; 0x80
 801b620:	4313      	orrs	r3, r2
 801b622:	81a3      	strh	r3, [r4, #12]
 801b624:	9b02      	ldr	r3, [sp, #8]
 801b626:	6126      	str	r6, [r4, #16]
 801b628:	18f6      	adds	r6, r6, r3
 801b62a:	6026      	str	r6, [r4, #0]
 801b62c:	6165      	str	r5, [r4, #20]
 801b62e:	9e01      	ldr	r6, [sp, #4]
 801b630:	1aed      	subs	r5, r5, r3
 801b632:	60a5      	str	r5, [r4, #8]
 801b634:	9b01      	ldr	r3, [sp, #4]
 801b636:	429e      	cmp	r6, r3
 801b638:	d900      	bls.n	801b63c <__ssputs_r+0x7c>
 801b63a:	9e01      	ldr	r6, [sp, #4]
 801b63c:	0032      	movs	r2, r6
 801b63e:	9903      	ldr	r1, [sp, #12]
 801b640:	6820      	ldr	r0, [r4, #0]
 801b642:	f000 f9e5 	bl	801ba10 <memmove>
 801b646:	2000      	movs	r0, #0
 801b648:	68a3      	ldr	r3, [r4, #8]
 801b64a:	1b9b      	subs	r3, r3, r6
 801b64c:	60a3      	str	r3, [r4, #8]
 801b64e:	6823      	ldr	r3, [r4, #0]
 801b650:	199b      	adds	r3, r3, r6
 801b652:	6023      	str	r3, [r4, #0]
 801b654:	b005      	add	sp, #20
 801b656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b658:	002a      	movs	r2, r5
 801b65a:	0038      	movs	r0, r7
 801b65c:	f000 fa1f 	bl	801ba9e <_realloc_r>
 801b660:	1e06      	subs	r6, r0, #0
 801b662:	d1df      	bne.n	801b624 <__ssputs_r+0x64>
 801b664:	0038      	movs	r0, r7
 801b666:	6921      	ldr	r1, [r4, #16]
 801b668:	f7fe ff2a 	bl	801a4c0 <_free_r>
 801b66c:	230c      	movs	r3, #12
 801b66e:	2001      	movs	r0, #1
 801b670:	603b      	str	r3, [r7, #0]
 801b672:	89a2      	ldrh	r2, [r4, #12]
 801b674:	3334      	adds	r3, #52	; 0x34
 801b676:	4313      	orrs	r3, r2
 801b678:	81a3      	strh	r3, [r4, #12]
 801b67a:	4240      	negs	r0, r0
 801b67c:	e7ea      	b.n	801b654 <__ssputs_r+0x94>
 801b67e:	46c0      	nop			; (mov r8, r8)
 801b680:	fffffb7f 	.word	0xfffffb7f

0801b684 <_svfiprintf_r>:
 801b684:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b686:	b0a1      	sub	sp, #132	; 0x84
 801b688:	9003      	str	r0, [sp, #12]
 801b68a:	001d      	movs	r5, r3
 801b68c:	898b      	ldrh	r3, [r1, #12]
 801b68e:	000f      	movs	r7, r1
 801b690:	0016      	movs	r6, r2
 801b692:	061b      	lsls	r3, r3, #24
 801b694:	d511      	bpl.n	801b6ba <_svfiprintf_r+0x36>
 801b696:	690b      	ldr	r3, [r1, #16]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d10e      	bne.n	801b6ba <_svfiprintf_r+0x36>
 801b69c:	2140      	movs	r1, #64	; 0x40
 801b69e:	f7fb ff81 	bl	80175a4 <_malloc_r>
 801b6a2:	6038      	str	r0, [r7, #0]
 801b6a4:	6138      	str	r0, [r7, #16]
 801b6a6:	2800      	cmp	r0, #0
 801b6a8:	d105      	bne.n	801b6b6 <_svfiprintf_r+0x32>
 801b6aa:	230c      	movs	r3, #12
 801b6ac:	9a03      	ldr	r2, [sp, #12]
 801b6ae:	3801      	subs	r0, #1
 801b6b0:	6013      	str	r3, [r2, #0]
 801b6b2:	b021      	add	sp, #132	; 0x84
 801b6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6b6:	2340      	movs	r3, #64	; 0x40
 801b6b8:	617b      	str	r3, [r7, #20]
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	ac08      	add	r4, sp, #32
 801b6be:	6163      	str	r3, [r4, #20]
 801b6c0:	3320      	adds	r3, #32
 801b6c2:	7663      	strb	r3, [r4, #25]
 801b6c4:	3310      	adds	r3, #16
 801b6c6:	76a3      	strb	r3, [r4, #26]
 801b6c8:	9507      	str	r5, [sp, #28]
 801b6ca:	0035      	movs	r5, r6
 801b6cc:	782b      	ldrb	r3, [r5, #0]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d001      	beq.n	801b6d6 <_svfiprintf_r+0x52>
 801b6d2:	2b25      	cmp	r3, #37	; 0x25
 801b6d4:	d148      	bne.n	801b768 <_svfiprintf_r+0xe4>
 801b6d6:	1bab      	subs	r3, r5, r6
 801b6d8:	9305      	str	r3, [sp, #20]
 801b6da:	42b5      	cmp	r5, r6
 801b6dc:	d00b      	beq.n	801b6f6 <_svfiprintf_r+0x72>
 801b6de:	0032      	movs	r2, r6
 801b6e0:	0039      	movs	r1, r7
 801b6e2:	9803      	ldr	r0, [sp, #12]
 801b6e4:	f7ff ff6c 	bl	801b5c0 <__ssputs_r>
 801b6e8:	3001      	adds	r0, #1
 801b6ea:	d100      	bne.n	801b6ee <_svfiprintf_r+0x6a>
 801b6ec:	e0af      	b.n	801b84e <_svfiprintf_r+0x1ca>
 801b6ee:	6963      	ldr	r3, [r4, #20]
 801b6f0:	9a05      	ldr	r2, [sp, #20]
 801b6f2:	189b      	adds	r3, r3, r2
 801b6f4:	6163      	str	r3, [r4, #20]
 801b6f6:	782b      	ldrb	r3, [r5, #0]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d100      	bne.n	801b6fe <_svfiprintf_r+0x7a>
 801b6fc:	e0a7      	b.n	801b84e <_svfiprintf_r+0x1ca>
 801b6fe:	2201      	movs	r2, #1
 801b700:	2300      	movs	r3, #0
 801b702:	4252      	negs	r2, r2
 801b704:	6062      	str	r2, [r4, #4]
 801b706:	a904      	add	r1, sp, #16
 801b708:	3254      	adds	r2, #84	; 0x54
 801b70a:	1852      	adds	r2, r2, r1
 801b70c:	1c6e      	adds	r6, r5, #1
 801b70e:	6023      	str	r3, [r4, #0]
 801b710:	60e3      	str	r3, [r4, #12]
 801b712:	60a3      	str	r3, [r4, #8]
 801b714:	7013      	strb	r3, [r2, #0]
 801b716:	65a3      	str	r3, [r4, #88]	; 0x58
 801b718:	4b55      	ldr	r3, [pc, #340]	; (801b870 <_svfiprintf_r+0x1ec>)
 801b71a:	2205      	movs	r2, #5
 801b71c:	0018      	movs	r0, r3
 801b71e:	7831      	ldrb	r1, [r6, #0]
 801b720:	9305      	str	r3, [sp, #20]
 801b722:	f7fd fff2 	bl	801970a <memchr>
 801b726:	1c75      	adds	r5, r6, #1
 801b728:	2800      	cmp	r0, #0
 801b72a:	d11f      	bne.n	801b76c <_svfiprintf_r+0xe8>
 801b72c:	6822      	ldr	r2, [r4, #0]
 801b72e:	06d3      	lsls	r3, r2, #27
 801b730:	d504      	bpl.n	801b73c <_svfiprintf_r+0xb8>
 801b732:	2353      	movs	r3, #83	; 0x53
 801b734:	a904      	add	r1, sp, #16
 801b736:	185b      	adds	r3, r3, r1
 801b738:	2120      	movs	r1, #32
 801b73a:	7019      	strb	r1, [r3, #0]
 801b73c:	0713      	lsls	r3, r2, #28
 801b73e:	d504      	bpl.n	801b74a <_svfiprintf_r+0xc6>
 801b740:	2353      	movs	r3, #83	; 0x53
 801b742:	a904      	add	r1, sp, #16
 801b744:	185b      	adds	r3, r3, r1
 801b746:	212b      	movs	r1, #43	; 0x2b
 801b748:	7019      	strb	r1, [r3, #0]
 801b74a:	7833      	ldrb	r3, [r6, #0]
 801b74c:	2b2a      	cmp	r3, #42	; 0x2a
 801b74e:	d016      	beq.n	801b77e <_svfiprintf_r+0xfa>
 801b750:	0035      	movs	r5, r6
 801b752:	2100      	movs	r1, #0
 801b754:	200a      	movs	r0, #10
 801b756:	68e3      	ldr	r3, [r4, #12]
 801b758:	782a      	ldrb	r2, [r5, #0]
 801b75a:	1c6e      	adds	r6, r5, #1
 801b75c:	3a30      	subs	r2, #48	; 0x30
 801b75e:	2a09      	cmp	r2, #9
 801b760:	d94e      	bls.n	801b800 <_svfiprintf_r+0x17c>
 801b762:	2900      	cmp	r1, #0
 801b764:	d111      	bne.n	801b78a <_svfiprintf_r+0x106>
 801b766:	e017      	b.n	801b798 <_svfiprintf_r+0x114>
 801b768:	3501      	adds	r5, #1
 801b76a:	e7af      	b.n	801b6cc <_svfiprintf_r+0x48>
 801b76c:	9b05      	ldr	r3, [sp, #20]
 801b76e:	6822      	ldr	r2, [r4, #0]
 801b770:	1ac0      	subs	r0, r0, r3
 801b772:	2301      	movs	r3, #1
 801b774:	4083      	lsls	r3, r0
 801b776:	4313      	orrs	r3, r2
 801b778:	002e      	movs	r6, r5
 801b77a:	6023      	str	r3, [r4, #0]
 801b77c:	e7cc      	b.n	801b718 <_svfiprintf_r+0x94>
 801b77e:	9b07      	ldr	r3, [sp, #28]
 801b780:	1d19      	adds	r1, r3, #4
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	9107      	str	r1, [sp, #28]
 801b786:	2b00      	cmp	r3, #0
 801b788:	db01      	blt.n	801b78e <_svfiprintf_r+0x10a>
 801b78a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b78c:	e004      	b.n	801b798 <_svfiprintf_r+0x114>
 801b78e:	425b      	negs	r3, r3
 801b790:	60e3      	str	r3, [r4, #12]
 801b792:	2302      	movs	r3, #2
 801b794:	4313      	orrs	r3, r2
 801b796:	6023      	str	r3, [r4, #0]
 801b798:	782b      	ldrb	r3, [r5, #0]
 801b79a:	2b2e      	cmp	r3, #46	; 0x2e
 801b79c:	d10a      	bne.n	801b7b4 <_svfiprintf_r+0x130>
 801b79e:	786b      	ldrb	r3, [r5, #1]
 801b7a0:	2b2a      	cmp	r3, #42	; 0x2a
 801b7a2:	d135      	bne.n	801b810 <_svfiprintf_r+0x18c>
 801b7a4:	9b07      	ldr	r3, [sp, #28]
 801b7a6:	3502      	adds	r5, #2
 801b7a8:	1d1a      	adds	r2, r3, #4
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	9207      	str	r2, [sp, #28]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	db2b      	blt.n	801b80a <_svfiprintf_r+0x186>
 801b7b2:	9309      	str	r3, [sp, #36]	; 0x24
 801b7b4:	4e2f      	ldr	r6, [pc, #188]	; (801b874 <_svfiprintf_r+0x1f0>)
 801b7b6:	2203      	movs	r2, #3
 801b7b8:	0030      	movs	r0, r6
 801b7ba:	7829      	ldrb	r1, [r5, #0]
 801b7bc:	f7fd ffa5 	bl	801970a <memchr>
 801b7c0:	2800      	cmp	r0, #0
 801b7c2:	d006      	beq.n	801b7d2 <_svfiprintf_r+0x14e>
 801b7c4:	2340      	movs	r3, #64	; 0x40
 801b7c6:	1b80      	subs	r0, r0, r6
 801b7c8:	4083      	lsls	r3, r0
 801b7ca:	6822      	ldr	r2, [r4, #0]
 801b7cc:	3501      	adds	r5, #1
 801b7ce:	4313      	orrs	r3, r2
 801b7d0:	6023      	str	r3, [r4, #0]
 801b7d2:	7829      	ldrb	r1, [r5, #0]
 801b7d4:	2206      	movs	r2, #6
 801b7d6:	4828      	ldr	r0, [pc, #160]	; (801b878 <_svfiprintf_r+0x1f4>)
 801b7d8:	1c6e      	adds	r6, r5, #1
 801b7da:	7621      	strb	r1, [r4, #24]
 801b7dc:	f7fd ff95 	bl	801970a <memchr>
 801b7e0:	2800      	cmp	r0, #0
 801b7e2:	d03c      	beq.n	801b85e <_svfiprintf_r+0x1da>
 801b7e4:	4b25      	ldr	r3, [pc, #148]	; (801b87c <_svfiprintf_r+0x1f8>)
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d125      	bne.n	801b836 <_svfiprintf_r+0x1b2>
 801b7ea:	2207      	movs	r2, #7
 801b7ec:	9b07      	ldr	r3, [sp, #28]
 801b7ee:	3307      	adds	r3, #7
 801b7f0:	4393      	bics	r3, r2
 801b7f2:	3308      	adds	r3, #8
 801b7f4:	9307      	str	r3, [sp, #28]
 801b7f6:	6963      	ldr	r3, [r4, #20]
 801b7f8:	9a04      	ldr	r2, [sp, #16]
 801b7fa:	189b      	adds	r3, r3, r2
 801b7fc:	6163      	str	r3, [r4, #20]
 801b7fe:	e764      	b.n	801b6ca <_svfiprintf_r+0x46>
 801b800:	4343      	muls	r3, r0
 801b802:	0035      	movs	r5, r6
 801b804:	2101      	movs	r1, #1
 801b806:	189b      	adds	r3, r3, r2
 801b808:	e7a6      	b.n	801b758 <_svfiprintf_r+0xd4>
 801b80a:	2301      	movs	r3, #1
 801b80c:	425b      	negs	r3, r3
 801b80e:	e7d0      	b.n	801b7b2 <_svfiprintf_r+0x12e>
 801b810:	2300      	movs	r3, #0
 801b812:	200a      	movs	r0, #10
 801b814:	001a      	movs	r2, r3
 801b816:	3501      	adds	r5, #1
 801b818:	6063      	str	r3, [r4, #4]
 801b81a:	7829      	ldrb	r1, [r5, #0]
 801b81c:	1c6e      	adds	r6, r5, #1
 801b81e:	3930      	subs	r1, #48	; 0x30
 801b820:	2909      	cmp	r1, #9
 801b822:	d903      	bls.n	801b82c <_svfiprintf_r+0x1a8>
 801b824:	2b00      	cmp	r3, #0
 801b826:	d0c5      	beq.n	801b7b4 <_svfiprintf_r+0x130>
 801b828:	9209      	str	r2, [sp, #36]	; 0x24
 801b82a:	e7c3      	b.n	801b7b4 <_svfiprintf_r+0x130>
 801b82c:	4342      	muls	r2, r0
 801b82e:	0035      	movs	r5, r6
 801b830:	2301      	movs	r3, #1
 801b832:	1852      	adds	r2, r2, r1
 801b834:	e7f1      	b.n	801b81a <_svfiprintf_r+0x196>
 801b836:	aa07      	add	r2, sp, #28
 801b838:	9200      	str	r2, [sp, #0]
 801b83a:	0021      	movs	r1, r4
 801b83c:	003a      	movs	r2, r7
 801b83e:	4b10      	ldr	r3, [pc, #64]	; (801b880 <_svfiprintf_r+0x1fc>)
 801b840:	9803      	ldr	r0, [sp, #12]
 801b842:	f7fc feb7 	bl	80185b4 <_printf_float>
 801b846:	9004      	str	r0, [sp, #16]
 801b848:	9b04      	ldr	r3, [sp, #16]
 801b84a:	3301      	adds	r3, #1
 801b84c:	d1d3      	bne.n	801b7f6 <_svfiprintf_r+0x172>
 801b84e:	89bb      	ldrh	r3, [r7, #12]
 801b850:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b852:	065b      	lsls	r3, r3, #25
 801b854:	d400      	bmi.n	801b858 <_svfiprintf_r+0x1d4>
 801b856:	e72c      	b.n	801b6b2 <_svfiprintf_r+0x2e>
 801b858:	2001      	movs	r0, #1
 801b85a:	4240      	negs	r0, r0
 801b85c:	e729      	b.n	801b6b2 <_svfiprintf_r+0x2e>
 801b85e:	aa07      	add	r2, sp, #28
 801b860:	9200      	str	r2, [sp, #0]
 801b862:	0021      	movs	r1, r4
 801b864:	003a      	movs	r2, r7
 801b866:	4b06      	ldr	r3, [pc, #24]	; (801b880 <_svfiprintf_r+0x1fc>)
 801b868:	9803      	ldr	r0, [sp, #12]
 801b86a:	f7fd f969 	bl	8018b40 <_printf_i>
 801b86e:	e7ea      	b.n	801b846 <_svfiprintf_r+0x1c2>
 801b870:	0801e634 	.word	0x0801e634
 801b874:	0801e63a 	.word	0x0801e63a
 801b878:	0801e63e 	.word	0x0801e63e
 801b87c:	080185b5 	.word	0x080185b5
 801b880:	0801b5c1 	.word	0x0801b5c1

0801b884 <__sflush_r>:
 801b884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b886:	898b      	ldrh	r3, [r1, #12]
 801b888:	0005      	movs	r5, r0
 801b88a:	000c      	movs	r4, r1
 801b88c:	071a      	lsls	r2, r3, #28
 801b88e:	d45c      	bmi.n	801b94a <__sflush_r+0xc6>
 801b890:	684a      	ldr	r2, [r1, #4]
 801b892:	2a00      	cmp	r2, #0
 801b894:	dc04      	bgt.n	801b8a0 <__sflush_r+0x1c>
 801b896:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801b898:	2a00      	cmp	r2, #0
 801b89a:	dc01      	bgt.n	801b8a0 <__sflush_r+0x1c>
 801b89c:	2000      	movs	r0, #0
 801b89e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801b8a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801b8a2:	2f00      	cmp	r7, #0
 801b8a4:	d0fa      	beq.n	801b89c <__sflush_r+0x18>
 801b8a6:	2200      	movs	r2, #0
 801b8a8:	2080      	movs	r0, #128	; 0x80
 801b8aa:	682e      	ldr	r6, [r5, #0]
 801b8ac:	602a      	str	r2, [r5, #0]
 801b8ae:	001a      	movs	r2, r3
 801b8b0:	0140      	lsls	r0, r0, #5
 801b8b2:	6a21      	ldr	r1, [r4, #32]
 801b8b4:	4002      	ands	r2, r0
 801b8b6:	4203      	tst	r3, r0
 801b8b8:	d034      	beq.n	801b924 <__sflush_r+0xa0>
 801b8ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b8bc:	89a3      	ldrh	r3, [r4, #12]
 801b8be:	075b      	lsls	r3, r3, #29
 801b8c0:	d506      	bpl.n	801b8d0 <__sflush_r+0x4c>
 801b8c2:	6863      	ldr	r3, [r4, #4]
 801b8c4:	1ac0      	subs	r0, r0, r3
 801b8c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d001      	beq.n	801b8d0 <__sflush_r+0x4c>
 801b8cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b8ce:	1ac0      	subs	r0, r0, r3
 801b8d0:	0002      	movs	r2, r0
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	0028      	movs	r0, r5
 801b8d6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801b8d8:	6a21      	ldr	r1, [r4, #32]
 801b8da:	47b8      	blx	r7
 801b8dc:	89a2      	ldrh	r2, [r4, #12]
 801b8de:	1c43      	adds	r3, r0, #1
 801b8e0:	d106      	bne.n	801b8f0 <__sflush_r+0x6c>
 801b8e2:	6829      	ldr	r1, [r5, #0]
 801b8e4:	291d      	cmp	r1, #29
 801b8e6:	d82c      	bhi.n	801b942 <__sflush_r+0xbe>
 801b8e8:	4b2a      	ldr	r3, [pc, #168]	; (801b994 <__sflush_r+0x110>)
 801b8ea:	410b      	asrs	r3, r1
 801b8ec:	07db      	lsls	r3, r3, #31
 801b8ee:	d428      	bmi.n	801b942 <__sflush_r+0xbe>
 801b8f0:	2300      	movs	r3, #0
 801b8f2:	6063      	str	r3, [r4, #4]
 801b8f4:	6923      	ldr	r3, [r4, #16]
 801b8f6:	6023      	str	r3, [r4, #0]
 801b8f8:	04d2      	lsls	r2, r2, #19
 801b8fa:	d505      	bpl.n	801b908 <__sflush_r+0x84>
 801b8fc:	1c43      	adds	r3, r0, #1
 801b8fe:	d102      	bne.n	801b906 <__sflush_r+0x82>
 801b900:	682b      	ldr	r3, [r5, #0]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d100      	bne.n	801b908 <__sflush_r+0x84>
 801b906:	6560      	str	r0, [r4, #84]	; 0x54
 801b908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b90a:	602e      	str	r6, [r5, #0]
 801b90c:	2900      	cmp	r1, #0
 801b90e:	d0c5      	beq.n	801b89c <__sflush_r+0x18>
 801b910:	0023      	movs	r3, r4
 801b912:	3344      	adds	r3, #68	; 0x44
 801b914:	4299      	cmp	r1, r3
 801b916:	d002      	beq.n	801b91e <__sflush_r+0x9a>
 801b918:	0028      	movs	r0, r5
 801b91a:	f7fe fdd1 	bl	801a4c0 <_free_r>
 801b91e:	2000      	movs	r0, #0
 801b920:	6360      	str	r0, [r4, #52]	; 0x34
 801b922:	e7bc      	b.n	801b89e <__sflush_r+0x1a>
 801b924:	2301      	movs	r3, #1
 801b926:	0028      	movs	r0, r5
 801b928:	47b8      	blx	r7
 801b92a:	1c43      	adds	r3, r0, #1
 801b92c:	d1c6      	bne.n	801b8bc <__sflush_r+0x38>
 801b92e:	682b      	ldr	r3, [r5, #0]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d0c3      	beq.n	801b8bc <__sflush_r+0x38>
 801b934:	2b1d      	cmp	r3, #29
 801b936:	d001      	beq.n	801b93c <__sflush_r+0xb8>
 801b938:	2b16      	cmp	r3, #22
 801b93a:	d101      	bne.n	801b940 <__sflush_r+0xbc>
 801b93c:	602e      	str	r6, [r5, #0]
 801b93e:	e7ad      	b.n	801b89c <__sflush_r+0x18>
 801b940:	89a2      	ldrh	r2, [r4, #12]
 801b942:	2340      	movs	r3, #64	; 0x40
 801b944:	4313      	orrs	r3, r2
 801b946:	81a3      	strh	r3, [r4, #12]
 801b948:	e7a9      	b.n	801b89e <__sflush_r+0x1a>
 801b94a:	690e      	ldr	r6, [r1, #16]
 801b94c:	2e00      	cmp	r6, #0
 801b94e:	d0a5      	beq.n	801b89c <__sflush_r+0x18>
 801b950:	680f      	ldr	r7, [r1, #0]
 801b952:	600e      	str	r6, [r1, #0]
 801b954:	1bba      	subs	r2, r7, r6
 801b956:	9201      	str	r2, [sp, #4]
 801b958:	2200      	movs	r2, #0
 801b95a:	079b      	lsls	r3, r3, #30
 801b95c:	d100      	bne.n	801b960 <__sflush_r+0xdc>
 801b95e:	694a      	ldr	r2, [r1, #20]
 801b960:	60a2      	str	r2, [r4, #8]
 801b962:	9b01      	ldr	r3, [sp, #4]
 801b964:	2b00      	cmp	r3, #0
 801b966:	dd99      	ble.n	801b89c <__sflush_r+0x18>
 801b968:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b96a:	0032      	movs	r2, r6
 801b96c:	001f      	movs	r7, r3
 801b96e:	0028      	movs	r0, r5
 801b970:	9b01      	ldr	r3, [sp, #4]
 801b972:	6a21      	ldr	r1, [r4, #32]
 801b974:	47b8      	blx	r7
 801b976:	2800      	cmp	r0, #0
 801b978:	dc06      	bgt.n	801b988 <__sflush_r+0x104>
 801b97a:	2340      	movs	r3, #64	; 0x40
 801b97c:	2001      	movs	r0, #1
 801b97e:	89a2      	ldrh	r2, [r4, #12]
 801b980:	4240      	negs	r0, r0
 801b982:	4313      	orrs	r3, r2
 801b984:	81a3      	strh	r3, [r4, #12]
 801b986:	e78a      	b.n	801b89e <__sflush_r+0x1a>
 801b988:	9b01      	ldr	r3, [sp, #4]
 801b98a:	1836      	adds	r6, r6, r0
 801b98c:	1a1b      	subs	r3, r3, r0
 801b98e:	9301      	str	r3, [sp, #4]
 801b990:	e7e7      	b.n	801b962 <__sflush_r+0xde>
 801b992:	46c0      	nop			; (mov r8, r8)
 801b994:	dfbffffe 	.word	0xdfbffffe

0801b998 <_fflush_r>:
 801b998:	690b      	ldr	r3, [r1, #16]
 801b99a:	b570      	push	{r4, r5, r6, lr}
 801b99c:	0005      	movs	r5, r0
 801b99e:	000c      	movs	r4, r1
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d102      	bne.n	801b9aa <_fflush_r+0x12>
 801b9a4:	2500      	movs	r5, #0
 801b9a6:	0028      	movs	r0, r5
 801b9a8:	bd70      	pop	{r4, r5, r6, pc}
 801b9aa:	2800      	cmp	r0, #0
 801b9ac:	d004      	beq.n	801b9b8 <_fflush_r+0x20>
 801b9ae:	6a03      	ldr	r3, [r0, #32]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d101      	bne.n	801b9b8 <_fflush_r+0x20>
 801b9b4:	f7fd fc6c 	bl	8019290 <__sinit>
 801b9b8:	220c      	movs	r2, #12
 801b9ba:	5ea3      	ldrsh	r3, [r4, r2]
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d0f1      	beq.n	801b9a4 <_fflush_r+0xc>
 801b9c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b9c2:	07d2      	lsls	r2, r2, #31
 801b9c4:	d404      	bmi.n	801b9d0 <_fflush_r+0x38>
 801b9c6:	059b      	lsls	r3, r3, #22
 801b9c8:	d402      	bmi.n	801b9d0 <_fflush_r+0x38>
 801b9ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9cc:	f7fd fe93 	bl	80196f6 <__retarget_lock_acquire_recursive>
 801b9d0:	0028      	movs	r0, r5
 801b9d2:	0021      	movs	r1, r4
 801b9d4:	f7ff ff56 	bl	801b884 <__sflush_r>
 801b9d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9da:	0005      	movs	r5, r0
 801b9dc:	07db      	lsls	r3, r3, #31
 801b9de:	d4e2      	bmi.n	801b9a6 <_fflush_r+0xe>
 801b9e0:	89a3      	ldrh	r3, [r4, #12]
 801b9e2:	059b      	lsls	r3, r3, #22
 801b9e4:	d4df      	bmi.n	801b9a6 <_fflush_r+0xe>
 801b9e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9e8:	f7fd fe86 	bl	80196f8 <__retarget_lock_release_recursive>
 801b9ec:	e7db      	b.n	801b9a6 <_fflush_r+0xe>
	...

0801b9f0 <fiprintf>:
 801b9f0:	b40e      	push	{r1, r2, r3}
 801b9f2:	b517      	push	{r0, r1, r2, r4, lr}
 801b9f4:	4c05      	ldr	r4, [pc, #20]	; (801ba0c <fiprintf+0x1c>)
 801b9f6:	ab05      	add	r3, sp, #20
 801b9f8:	cb04      	ldmia	r3!, {r2}
 801b9fa:	0001      	movs	r1, r0
 801b9fc:	6820      	ldr	r0, [r4, #0]
 801b9fe:	9301      	str	r3, [sp, #4]
 801ba00:	f000 f8a4 	bl	801bb4c <_vfiprintf_r>
 801ba04:	bc1e      	pop	{r1, r2, r3, r4}
 801ba06:	bc08      	pop	{r3}
 801ba08:	b003      	add	sp, #12
 801ba0a:	4718      	bx	r3
 801ba0c:	200002b4 	.word	0x200002b4

0801ba10 <memmove>:
 801ba10:	b510      	push	{r4, lr}
 801ba12:	4288      	cmp	r0, r1
 801ba14:	d902      	bls.n	801ba1c <memmove+0xc>
 801ba16:	188b      	adds	r3, r1, r2
 801ba18:	4298      	cmp	r0, r3
 801ba1a:	d303      	bcc.n	801ba24 <memmove+0x14>
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	e007      	b.n	801ba30 <memmove+0x20>
 801ba20:	5c8b      	ldrb	r3, [r1, r2]
 801ba22:	5483      	strb	r3, [r0, r2]
 801ba24:	3a01      	subs	r2, #1
 801ba26:	d2fb      	bcs.n	801ba20 <memmove+0x10>
 801ba28:	bd10      	pop	{r4, pc}
 801ba2a:	5ccc      	ldrb	r4, [r1, r3]
 801ba2c:	54c4      	strb	r4, [r0, r3]
 801ba2e:	3301      	adds	r3, #1
 801ba30:	429a      	cmp	r2, r3
 801ba32:	d1fa      	bne.n	801ba2a <memmove+0x1a>
 801ba34:	e7f8      	b.n	801ba28 <memmove+0x18>

0801ba36 <abort>:
 801ba36:	2006      	movs	r0, #6
 801ba38:	b510      	push	{r4, lr}
 801ba3a:	f000 fa73 	bl	801bf24 <raise>
 801ba3e:	2001      	movs	r0, #1
 801ba40:	f7f8 f952 	bl	8013ce8 <_exit>

0801ba44 <_calloc_r>:
 801ba44:	b570      	push	{r4, r5, r6, lr}
 801ba46:	0c0b      	lsrs	r3, r1, #16
 801ba48:	0c15      	lsrs	r5, r2, #16
 801ba4a:	2b00      	cmp	r3, #0
 801ba4c:	d11e      	bne.n	801ba8c <_calloc_r+0x48>
 801ba4e:	2d00      	cmp	r5, #0
 801ba50:	d10c      	bne.n	801ba6c <_calloc_r+0x28>
 801ba52:	b289      	uxth	r1, r1
 801ba54:	b294      	uxth	r4, r2
 801ba56:	434c      	muls	r4, r1
 801ba58:	0021      	movs	r1, r4
 801ba5a:	f7fb fda3 	bl	80175a4 <_malloc_r>
 801ba5e:	1e05      	subs	r5, r0, #0
 801ba60:	d01b      	beq.n	801ba9a <_calloc_r+0x56>
 801ba62:	0022      	movs	r2, r4
 801ba64:	2100      	movs	r1, #0
 801ba66:	f7fd fce7 	bl	8019438 <memset>
 801ba6a:	e016      	b.n	801ba9a <_calloc_r+0x56>
 801ba6c:	1c2b      	adds	r3, r5, #0
 801ba6e:	1c0c      	adds	r4, r1, #0
 801ba70:	b289      	uxth	r1, r1
 801ba72:	b292      	uxth	r2, r2
 801ba74:	434a      	muls	r2, r1
 801ba76:	b2a1      	uxth	r1, r4
 801ba78:	b29c      	uxth	r4, r3
 801ba7a:	434c      	muls	r4, r1
 801ba7c:	0c13      	lsrs	r3, r2, #16
 801ba7e:	18e4      	adds	r4, r4, r3
 801ba80:	0c23      	lsrs	r3, r4, #16
 801ba82:	d107      	bne.n	801ba94 <_calloc_r+0x50>
 801ba84:	0424      	lsls	r4, r4, #16
 801ba86:	b292      	uxth	r2, r2
 801ba88:	4314      	orrs	r4, r2
 801ba8a:	e7e5      	b.n	801ba58 <_calloc_r+0x14>
 801ba8c:	2d00      	cmp	r5, #0
 801ba8e:	d101      	bne.n	801ba94 <_calloc_r+0x50>
 801ba90:	1c14      	adds	r4, r2, #0
 801ba92:	e7ed      	b.n	801ba70 <_calloc_r+0x2c>
 801ba94:	230c      	movs	r3, #12
 801ba96:	2500      	movs	r5, #0
 801ba98:	6003      	str	r3, [r0, #0]
 801ba9a:	0028      	movs	r0, r5
 801ba9c:	bd70      	pop	{r4, r5, r6, pc}

0801ba9e <_realloc_r>:
 801ba9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801baa0:	0007      	movs	r7, r0
 801baa2:	000e      	movs	r6, r1
 801baa4:	0014      	movs	r4, r2
 801baa6:	2900      	cmp	r1, #0
 801baa8:	d105      	bne.n	801bab6 <_realloc_r+0x18>
 801baaa:	0011      	movs	r1, r2
 801baac:	f7fb fd7a 	bl	80175a4 <_malloc_r>
 801bab0:	0005      	movs	r5, r0
 801bab2:	0028      	movs	r0, r5
 801bab4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bab6:	2a00      	cmp	r2, #0
 801bab8:	d103      	bne.n	801bac2 <_realloc_r+0x24>
 801baba:	f7fe fd01 	bl	801a4c0 <_free_r>
 801babe:	0025      	movs	r5, r4
 801bac0:	e7f7      	b.n	801bab2 <_realloc_r+0x14>
 801bac2:	f000 fa4f 	bl	801bf64 <_malloc_usable_size_r>
 801bac6:	9001      	str	r0, [sp, #4]
 801bac8:	4284      	cmp	r4, r0
 801baca:	d803      	bhi.n	801bad4 <_realloc_r+0x36>
 801bacc:	0035      	movs	r5, r6
 801bace:	0843      	lsrs	r3, r0, #1
 801bad0:	42a3      	cmp	r3, r4
 801bad2:	d3ee      	bcc.n	801bab2 <_realloc_r+0x14>
 801bad4:	0021      	movs	r1, r4
 801bad6:	0038      	movs	r0, r7
 801bad8:	f7fb fd64 	bl	80175a4 <_malloc_r>
 801badc:	1e05      	subs	r5, r0, #0
 801bade:	d0e8      	beq.n	801bab2 <_realloc_r+0x14>
 801bae0:	9b01      	ldr	r3, [sp, #4]
 801bae2:	0022      	movs	r2, r4
 801bae4:	429c      	cmp	r4, r3
 801bae6:	d900      	bls.n	801baea <_realloc_r+0x4c>
 801bae8:	001a      	movs	r2, r3
 801baea:	0031      	movs	r1, r6
 801baec:	0028      	movs	r0, r5
 801baee:	f7fd fe17 	bl	8019720 <memcpy>
 801baf2:	0031      	movs	r1, r6
 801baf4:	0038      	movs	r0, r7
 801baf6:	f7fe fce3 	bl	801a4c0 <_free_r>
 801bafa:	e7da      	b.n	801bab2 <_realloc_r+0x14>

0801bafc <__sfputc_r>:
 801bafc:	6893      	ldr	r3, [r2, #8]
 801bafe:	b510      	push	{r4, lr}
 801bb00:	3b01      	subs	r3, #1
 801bb02:	6093      	str	r3, [r2, #8]
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	da04      	bge.n	801bb12 <__sfputc_r+0x16>
 801bb08:	6994      	ldr	r4, [r2, #24]
 801bb0a:	42a3      	cmp	r3, r4
 801bb0c:	db07      	blt.n	801bb1e <__sfputc_r+0x22>
 801bb0e:	290a      	cmp	r1, #10
 801bb10:	d005      	beq.n	801bb1e <__sfputc_r+0x22>
 801bb12:	6813      	ldr	r3, [r2, #0]
 801bb14:	1c58      	adds	r0, r3, #1
 801bb16:	6010      	str	r0, [r2, #0]
 801bb18:	7019      	strb	r1, [r3, #0]
 801bb1a:	0008      	movs	r0, r1
 801bb1c:	bd10      	pop	{r4, pc}
 801bb1e:	f000 f931 	bl	801bd84 <__swbuf_r>
 801bb22:	0001      	movs	r1, r0
 801bb24:	e7f9      	b.n	801bb1a <__sfputc_r+0x1e>

0801bb26 <__sfputs_r>:
 801bb26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb28:	0006      	movs	r6, r0
 801bb2a:	000f      	movs	r7, r1
 801bb2c:	0014      	movs	r4, r2
 801bb2e:	18d5      	adds	r5, r2, r3
 801bb30:	42ac      	cmp	r4, r5
 801bb32:	d101      	bne.n	801bb38 <__sfputs_r+0x12>
 801bb34:	2000      	movs	r0, #0
 801bb36:	e007      	b.n	801bb48 <__sfputs_r+0x22>
 801bb38:	7821      	ldrb	r1, [r4, #0]
 801bb3a:	003a      	movs	r2, r7
 801bb3c:	0030      	movs	r0, r6
 801bb3e:	f7ff ffdd 	bl	801bafc <__sfputc_r>
 801bb42:	3401      	adds	r4, #1
 801bb44:	1c43      	adds	r3, r0, #1
 801bb46:	d1f3      	bne.n	801bb30 <__sfputs_r+0xa>
 801bb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bb4c <_vfiprintf_r>:
 801bb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb4e:	b0a1      	sub	sp, #132	; 0x84
 801bb50:	000f      	movs	r7, r1
 801bb52:	0015      	movs	r5, r2
 801bb54:	001e      	movs	r6, r3
 801bb56:	9003      	str	r0, [sp, #12]
 801bb58:	2800      	cmp	r0, #0
 801bb5a:	d004      	beq.n	801bb66 <_vfiprintf_r+0x1a>
 801bb5c:	6a03      	ldr	r3, [r0, #32]
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d101      	bne.n	801bb66 <_vfiprintf_r+0x1a>
 801bb62:	f7fd fb95 	bl	8019290 <__sinit>
 801bb66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bb68:	07db      	lsls	r3, r3, #31
 801bb6a:	d405      	bmi.n	801bb78 <_vfiprintf_r+0x2c>
 801bb6c:	89bb      	ldrh	r3, [r7, #12]
 801bb6e:	059b      	lsls	r3, r3, #22
 801bb70:	d402      	bmi.n	801bb78 <_vfiprintf_r+0x2c>
 801bb72:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bb74:	f7fd fdbf 	bl	80196f6 <__retarget_lock_acquire_recursive>
 801bb78:	89bb      	ldrh	r3, [r7, #12]
 801bb7a:	071b      	lsls	r3, r3, #28
 801bb7c:	d502      	bpl.n	801bb84 <_vfiprintf_r+0x38>
 801bb7e:	693b      	ldr	r3, [r7, #16]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d113      	bne.n	801bbac <_vfiprintf_r+0x60>
 801bb84:	0039      	movs	r1, r7
 801bb86:	9803      	ldr	r0, [sp, #12]
 801bb88:	f000 f93e 	bl	801be08 <__swsetup_r>
 801bb8c:	2800      	cmp	r0, #0
 801bb8e:	d00d      	beq.n	801bbac <_vfiprintf_r+0x60>
 801bb90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bb92:	07db      	lsls	r3, r3, #31
 801bb94:	d503      	bpl.n	801bb9e <_vfiprintf_r+0x52>
 801bb96:	2001      	movs	r0, #1
 801bb98:	4240      	negs	r0, r0
 801bb9a:	b021      	add	sp, #132	; 0x84
 801bb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb9e:	89bb      	ldrh	r3, [r7, #12]
 801bba0:	059b      	lsls	r3, r3, #22
 801bba2:	d4f8      	bmi.n	801bb96 <_vfiprintf_r+0x4a>
 801bba4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bba6:	f7fd fda7 	bl	80196f8 <__retarget_lock_release_recursive>
 801bbaa:	e7f4      	b.n	801bb96 <_vfiprintf_r+0x4a>
 801bbac:	2300      	movs	r3, #0
 801bbae:	ac08      	add	r4, sp, #32
 801bbb0:	6163      	str	r3, [r4, #20]
 801bbb2:	3320      	adds	r3, #32
 801bbb4:	7663      	strb	r3, [r4, #25]
 801bbb6:	3310      	adds	r3, #16
 801bbb8:	76a3      	strb	r3, [r4, #26]
 801bbba:	9607      	str	r6, [sp, #28]
 801bbbc:	002e      	movs	r6, r5
 801bbbe:	7833      	ldrb	r3, [r6, #0]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d001      	beq.n	801bbc8 <_vfiprintf_r+0x7c>
 801bbc4:	2b25      	cmp	r3, #37	; 0x25
 801bbc6:	d148      	bne.n	801bc5a <_vfiprintf_r+0x10e>
 801bbc8:	1b73      	subs	r3, r6, r5
 801bbca:	9305      	str	r3, [sp, #20]
 801bbcc:	42ae      	cmp	r6, r5
 801bbce:	d00b      	beq.n	801bbe8 <_vfiprintf_r+0x9c>
 801bbd0:	002a      	movs	r2, r5
 801bbd2:	0039      	movs	r1, r7
 801bbd4:	9803      	ldr	r0, [sp, #12]
 801bbd6:	f7ff ffa6 	bl	801bb26 <__sfputs_r>
 801bbda:	3001      	adds	r0, #1
 801bbdc:	d100      	bne.n	801bbe0 <_vfiprintf_r+0x94>
 801bbde:	e0af      	b.n	801bd40 <_vfiprintf_r+0x1f4>
 801bbe0:	6963      	ldr	r3, [r4, #20]
 801bbe2:	9a05      	ldr	r2, [sp, #20]
 801bbe4:	189b      	adds	r3, r3, r2
 801bbe6:	6163      	str	r3, [r4, #20]
 801bbe8:	7833      	ldrb	r3, [r6, #0]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d100      	bne.n	801bbf0 <_vfiprintf_r+0xa4>
 801bbee:	e0a7      	b.n	801bd40 <_vfiprintf_r+0x1f4>
 801bbf0:	2201      	movs	r2, #1
 801bbf2:	2300      	movs	r3, #0
 801bbf4:	4252      	negs	r2, r2
 801bbf6:	6062      	str	r2, [r4, #4]
 801bbf8:	a904      	add	r1, sp, #16
 801bbfa:	3254      	adds	r2, #84	; 0x54
 801bbfc:	1852      	adds	r2, r2, r1
 801bbfe:	1c75      	adds	r5, r6, #1
 801bc00:	6023      	str	r3, [r4, #0]
 801bc02:	60e3      	str	r3, [r4, #12]
 801bc04:	60a3      	str	r3, [r4, #8]
 801bc06:	7013      	strb	r3, [r2, #0]
 801bc08:	65a3      	str	r3, [r4, #88]	; 0x58
 801bc0a:	4b59      	ldr	r3, [pc, #356]	; (801bd70 <_vfiprintf_r+0x224>)
 801bc0c:	2205      	movs	r2, #5
 801bc0e:	0018      	movs	r0, r3
 801bc10:	7829      	ldrb	r1, [r5, #0]
 801bc12:	9305      	str	r3, [sp, #20]
 801bc14:	f7fd fd79 	bl	801970a <memchr>
 801bc18:	1c6e      	adds	r6, r5, #1
 801bc1a:	2800      	cmp	r0, #0
 801bc1c:	d11f      	bne.n	801bc5e <_vfiprintf_r+0x112>
 801bc1e:	6822      	ldr	r2, [r4, #0]
 801bc20:	06d3      	lsls	r3, r2, #27
 801bc22:	d504      	bpl.n	801bc2e <_vfiprintf_r+0xe2>
 801bc24:	2353      	movs	r3, #83	; 0x53
 801bc26:	a904      	add	r1, sp, #16
 801bc28:	185b      	adds	r3, r3, r1
 801bc2a:	2120      	movs	r1, #32
 801bc2c:	7019      	strb	r1, [r3, #0]
 801bc2e:	0713      	lsls	r3, r2, #28
 801bc30:	d504      	bpl.n	801bc3c <_vfiprintf_r+0xf0>
 801bc32:	2353      	movs	r3, #83	; 0x53
 801bc34:	a904      	add	r1, sp, #16
 801bc36:	185b      	adds	r3, r3, r1
 801bc38:	212b      	movs	r1, #43	; 0x2b
 801bc3a:	7019      	strb	r1, [r3, #0]
 801bc3c:	782b      	ldrb	r3, [r5, #0]
 801bc3e:	2b2a      	cmp	r3, #42	; 0x2a
 801bc40:	d016      	beq.n	801bc70 <_vfiprintf_r+0x124>
 801bc42:	002e      	movs	r6, r5
 801bc44:	2100      	movs	r1, #0
 801bc46:	200a      	movs	r0, #10
 801bc48:	68e3      	ldr	r3, [r4, #12]
 801bc4a:	7832      	ldrb	r2, [r6, #0]
 801bc4c:	1c75      	adds	r5, r6, #1
 801bc4e:	3a30      	subs	r2, #48	; 0x30
 801bc50:	2a09      	cmp	r2, #9
 801bc52:	d94e      	bls.n	801bcf2 <_vfiprintf_r+0x1a6>
 801bc54:	2900      	cmp	r1, #0
 801bc56:	d111      	bne.n	801bc7c <_vfiprintf_r+0x130>
 801bc58:	e017      	b.n	801bc8a <_vfiprintf_r+0x13e>
 801bc5a:	3601      	adds	r6, #1
 801bc5c:	e7af      	b.n	801bbbe <_vfiprintf_r+0x72>
 801bc5e:	9b05      	ldr	r3, [sp, #20]
 801bc60:	6822      	ldr	r2, [r4, #0]
 801bc62:	1ac0      	subs	r0, r0, r3
 801bc64:	2301      	movs	r3, #1
 801bc66:	4083      	lsls	r3, r0
 801bc68:	4313      	orrs	r3, r2
 801bc6a:	0035      	movs	r5, r6
 801bc6c:	6023      	str	r3, [r4, #0]
 801bc6e:	e7cc      	b.n	801bc0a <_vfiprintf_r+0xbe>
 801bc70:	9b07      	ldr	r3, [sp, #28]
 801bc72:	1d19      	adds	r1, r3, #4
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	9107      	str	r1, [sp, #28]
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	db01      	blt.n	801bc80 <_vfiprintf_r+0x134>
 801bc7c:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc7e:	e004      	b.n	801bc8a <_vfiprintf_r+0x13e>
 801bc80:	425b      	negs	r3, r3
 801bc82:	60e3      	str	r3, [r4, #12]
 801bc84:	2302      	movs	r3, #2
 801bc86:	4313      	orrs	r3, r2
 801bc88:	6023      	str	r3, [r4, #0]
 801bc8a:	7833      	ldrb	r3, [r6, #0]
 801bc8c:	2b2e      	cmp	r3, #46	; 0x2e
 801bc8e:	d10a      	bne.n	801bca6 <_vfiprintf_r+0x15a>
 801bc90:	7873      	ldrb	r3, [r6, #1]
 801bc92:	2b2a      	cmp	r3, #42	; 0x2a
 801bc94:	d135      	bne.n	801bd02 <_vfiprintf_r+0x1b6>
 801bc96:	9b07      	ldr	r3, [sp, #28]
 801bc98:	3602      	adds	r6, #2
 801bc9a:	1d1a      	adds	r2, r3, #4
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	9207      	str	r2, [sp, #28]
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	db2b      	blt.n	801bcfc <_vfiprintf_r+0x1b0>
 801bca4:	9309      	str	r3, [sp, #36]	; 0x24
 801bca6:	4d33      	ldr	r5, [pc, #204]	; (801bd74 <_vfiprintf_r+0x228>)
 801bca8:	2203      	movs	r2, #3
 801bcaa:	0028      	movs	r0, r5
 801bcac:	7831      	ldrb	r1, [r6, #0]
 801bcae:	f7fd fd2c 	bl	801970a <memchr>
 801bcb2:	2800      	cmp	r0, #0
 801bcb4:	d006      	beq.n	801bcc4 <_vfiprintf_r+0x178>
 801bcb6:	2340      	movs	r3, #64	; 0x40
 801bcb8:	1b40      	subs	r0, r0, r5
 801bcba:	4083      	lsls	r3, r0
 801bcbc:	6822      	ldr	r2, [r4, #0]
 801bcbe:	3601      	adds	r6, #1
 801bcc0:	4313      	orrs	r3, r2
 801bcc2:	6023      	str	r3, [r4, #0]
 801bcc4:	7831      	ldrb	r1, [r6, #0]
 801bcc6:	2206      	movs	r2, #6
 801bcc8:	482b      	ldr	r0, [pc, #172]	; (801bd78 <_vfiprintf_r+0x22c>)
 801bcca:	1c75      	adds	r5, r6, #1
 801bccc:	7621      	strb	r1, [r4, #24]
 801bcce:	f7fd fd1c 	bl	801970a <memchr>
 801bcd2:	2800      	cmp	r0, #0
 801bcd4:	d043      	beq.n	801bd5e <_vfiprintf_r+0x212>
 801bcd6:	4b29      	ldr	r3, [pc, #164]	; (801bd7c <_vfiprintf_r+0x230>)
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d125      	bne.n	801bd28 <_vfiprintf_r+0x1dc>
 801bcdc:	2207      	movs	r2, #7
 801bcde:	9b07      	ldr	r3, [sp, #28]
 801bce0:	3307      	adds	r3, #7
 801bce2:	4393      	bics	r3, r2
 801bce4:	3308      	adds	r3, #8
 801bce6:	9307      	str	r3, [sp, #28]
 801bce8:	6963      	ldr	r3, [r4, #20]
 801bcea:	9a04      	ldr	r2, [sp, #16]
 801bcec:	189b      	adds	r3, r3, r2
 801bcee:	6163      	str	r3, [r4, #20]
 801bcf0:	e764      	b.n	801bbbc <_vfiprintf_r+0x70>
 801bcf2:	4343      	muls	r3, r0
 801bcf4:	002e      	movs	r6, r5
 801bcf6:	2101      	movs	r1, #1
 801bcf8:	189b      	adds	r3, r3, r2
 801bcfa:	e7a6      	b.n	801bc4a <_vfiprintf_r+0xfe>
 801bcfc:	2301      	movs	r3, #1
 801bcfe:	425b      	negs	r3, r3
 801bd00:	e7d0      	b.n	801bca4 <_vfiprintf_r+0x158>
 801bd02:	2300      	movs	r3, #0
 801bd04:	200a      	movs	r0, #10
 801bd06:	001a      	movs	r2, r3
 801bd08:	3601      	adds	r6, #1
 801bd0a:	6063      	str	r3, [r4, #4]
 801bd0c:	7831      	ldrb	r1, [r6, #0]
 801bd0e:	1c75      	adds	r5, r6, #1
 801bd10:	3930      	subs	r1, #48	; 0x30
 801bd12:	2909      	cmp	r1, #9
 801bd14:	d903      	bls.n	801bd1e <_vfiprintf_r+0x1d2>
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d0c5      	beq.n	801bca6 <_vfiprintf_r+0x15a>
 801bd1a:	9209      	str	r2, [sp, #36]	; 0x24
 801bd1c:	e7c3      	b.n	801bca6 <_vfiprintf_r+0x15a>
 801bd1e:	4342      	muls	r2, r0
 801bd20:	002e      	movs	r6, r5
 801bd22:	2301      	movs	r3, #1
 801bd24:	1852      	adds	r2, r2, r1
 801bd26:	e7f1      	b.n	801bd0c <_vfiprintf_r+0x1c0>
 801bd28:	aa07      	add	r2, sp, #28
 801bd2a:	9200      	str	r2, [sp, #0]
 801bd2c:	0021      	movs	r1, r4
 801bd2e:	003a      	movs	r2, r7
 801bd30:	4b13      	ldr	r3, [pc, #76]	; (801bd80 <_vfiprintf_r+0x234>)
 801bd32:	9803      	ldr	r0, [sp, #12]
 801bd34:	f7fc fc3e 	bl	80185b4 <_printf_float>
 801bd38:	9004      	str	r0, [sp, #16]
 801bd3a:	9b04      	ldr	r3, [sp, #16]
 801bd3c:	3301      	adds	r3, #1
 801bd3e:	d1d3      	bne.n	801bce8 <_vfiprintf_r+0x19c>
 801bd40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd42:	07db      	lsls	r3, r3, #31
 801bd44:	d405      	bmi.n	801bd52 <_vfiprintf_r+0x206>
 801bd46:	89bb      	ldrh	r3, [r7, #12]
 801bd48:	059b      	lsls	r3, r3, #22
 801bd4a:	d402      	bmi.n	801bd52 <_vfiprintf_r+0x206>
 801bd4c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801bd4e:	f7fd fcd3 	bl	80196f8 <__retarget_lock_release_recursive>
 801bd52:	89bb      	ldrh	r3, [r7, #12]
 801bd54:	065b      	lsls	r3, r3, #25
 801bd56:	d500      	bpl.n	801bd5a <_vfiprintf_r+0x20e>
 801bd58:	e71d      	b.n	801bb96 <_vfiprintf_r+0x4a>
 801bd5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bd5c:	e71d      	b.n	801bb9a <_vfiprintf_r+0x4e>
 801bd5e:	aa07      	add	r2, sp, #28
 801bd60:	9200      	str	r2, [sp, #0]
 801bd62:	0021      	movs	r1, r4
 801bd64:	003a      	movs	r2, r7
 801bd66:	4b06      	ldr	r3, [pc, #24]	; (801bd80 <_vfiprintf_r+0x234>)
 801bd68:	9803      	ldr	r0, [sp, #12]
 801bd6a:	f7fc fee9 	bl	8018b40 <_printf_i>
 801bd6e:	e7e3      	b.n	801bd38 <_vfiprintf_r+0x1ec>
 801bd70:	0801e634 	.word	0x0801e634
 801bd74:	0801e63a 	.word	0x0801e63a
 801bd78:	0801e63e 	.word	0x0801e63e
 801bd7c:	080185b5 	.word	0x080185b5
 801bd80:	0801bb27 	.word	0x0801bb27

0801bd84 <__swbuf_r>:
 801bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd86:	0006      	movs	r6, r0
 801bd88:	000d      	movs	r5, r1
 801bd8a:	0014      	movs	r4, r2
 801bd8c:	2800      	cmp	r0, #0
 801bd8e:	d004      	beq.n	801bd9a <__swbuf_r+0x16>
 801bd90:	6a03      	ldr	r3, [r0, #32]
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d101      	bne.n	801bd9a <__swbuf_r+0x16>
 801bd96:	f7fd fa7b 	bl	8019290 <__sinit>
 801bd9a:	69a3      	ldr	r3, [r4, #24]
 801bd9c:	60a3      	str	r3, [r4, #8]
 801bd9e:	89a3      	ldrh	r3, [r4, #12]
 801bda0:	071b      	lsls	r3, r3, #28
 801bda2:	d528      	bpl.n	801bdf6 <__swbuf_r+0x72>
 801bda4:	6923      	ldr	r3, [r4, #16]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d025      	beq.n	801bdf6 <__swbuf_r+0x72>
 801bdaa:	6923      	ldr	r3, [r4, #16]
 801bdac:	6820      	ldr	r0, [r4, #0]
 801bdae:	b2ef      	uxtb	r7, r5
 801bdb0:	1ac0      	subs	r0, r0, r3
 801bdb2:	6963      	ldr	r3, [r4, #20]
 801bdb4:	b2ed      	uxtb	r5, r5
 801bdb6:	4283      	cmp	r3, r0
 801bdb8:	dc05      	bgt.n	801bdc6 <__swbuf_r+0x42>
 801bdba:	0021      	movs	r1, r4
 801bdbc:	0030      	movs	r0, r6
 801bdbe:	f7ff fdeb 	bl	801b998 <_fflush_r>
 801bdc2:	2800      	cmp	r0, #0
 801bdc4:	d11d      	bne.n	801be02 <__swbuf_r+0x7e>
 801bdc6:	68a3      	ldr	r3, [r4, #8]
 801bdc8:	3001      	adds	r0, #1
 801bdca:	3b01      	subs	r3, #1
 801bdcc:	60a3      	str	r3, [r4, #8]
 801bdce:	6823      	ldr	r3, [r4, #0]
 801bdd0:	1c5a      	adds	r2, r3, #1
 801bdd2:	6022      	str	r2, [r4, #0]
 801bdd4:	701f      	strb	r7, [r3, #0]
 801bdd6:	6963      	ldr	r3, [r4, #20]
 801bdd8:	4283      	cmp	r3, r0
 801bdda:	d004      	beq.n	801bde6 <__swbuf_r+0x62>
 801bddc:	89a3      	ldrh	r3, [r4, #12]
 801bdde:	07db      	lsls	r3, r3, #31
 801bde0:	d507      	bpl.n	801bdf2 <__swbuf_r+0x6e>
 801bde2:	2d0a      	cmp	r5, #10
 801bde4:	d105      	bne.n	801bdf2 <__swbuf_r+0x6e>
 801bde6:	0021      	movs	r1, r4
 801bde8:	0030      	movs	r0, r6
 801bdea:	f7ff fdd5 	bl	801b998 <_fflush_r>
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	d107      	bne.n	801be02 <__swbuf_r+0x7e>
 801bdf2:	0028      	movs	r0, r5
 801bdf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bdf6:	0021      	movs	r1, r4
 801bdf8:	0030      	movs	r0, r6
 801bdfa:	f000 f805 	bl	801be08 <__swsetup_r>
 801bdfe:	2800      	cmp	r0, #0
 801be00:	d0d3      	beq.n	801bdaa <__swbuf_r+0x26>
 801be02:	2501      	movs	r5, #1
 801be04:	426d      	negs	r5, r5
 801be06:	e7f4      	b.n	801bdf2 <__swbuf_r+0x6e>

0801be08 <__swsetup_r>:
 801be08:	4b30      	ldr	r3, [pc, #192]	; (801becc <__swsetup_r+0xc4>)
 801be0a:	b570      	push	{r4, r5, r6, lr}
 801be0c:	0005      	movs	r5, r0
 801be0e:	6818      	ldr	r0, [r3, #0]
 801be10:	000c      	movs	r4, r1
 801be12:	2800      	cmp	r0, #0
 801be14:	d004      	beq.n	801be20 <__swsetup_r+0x18>
 801be16:	6a03      	ldr	r3, [r0, #32]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d101      	bne.n	801be20 <__swsetup_r+0x18>
 801be1c:	f7fd fa38 	bl	8019290 <__sinit>
 801be20:	230c      	movs	r3, #12
 801be22:	5ee2      	ldrsh	r2, [r4, r3]
 801be24:	b293      	uxth	r3, r2
 801be26:	0711      	lsls	r1, r2, #28
 801be28:	d423      	bmi.n	801be72 <__swsetup_r+0x6a>
 801be2a:	06d9      	lsls	r1, r3, #27
 801be2c:	d407      	bmi.n	801be3e <__swsetup_r+0x36>
 801be2e:	2309      	movs	r3, #9
 801be30:	2001      	movs	r0, #1
 801be32:	602b      	str	r3, [r5, #0]
 801be34:	3337      	adds	r3, #55	; 0x37
 801be36:	4313      	orrs	r3, r2
 801be38:	81a3      	strh	r3, [r4, #12]
 801be3a:	4240      	negs	r0, r0
 801be3c:	bd70      	pop	{r4, r5, r6, pc}
 801be3e:	075b      	lsls	r3, r3, #29
 801be40:	d513      	bpl.n	801be6a <__swsetup_r+0x62>
 801be42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801be44:	2900      	cmp	r1, #0
 801be46:	d008      	beq.n	801be5a <__swsetup_r+0x52>
 801be48:	0023      	movs	r3, r4
 801be4a:	3344      	adds	r3, #68	; 0x44
 801be4c:	4299      	cmp	r1, r3
 801be4e:	d002      	beq.n	801be56 <__swsetup_r+0x4e>
 801be50:	0028      	movs	r0, r5
 801be52:	f7fe fb35 	bl	801a4c0 <_free_r>
 801be56:	2300      	movs	r3, #0
 801be58:	6363      	str	r3, [r4, #52]	; 0x34
 801be5a:	2224      	movs	r2, #36	; 0x24
 801be5c:	89a3      	ldrh	r3, [r4, #12]
 801be5e:	4393      	bics	r3, r2
 801be60:	81a3      	strh	r3, [r4, #12]
 801be62:	2300      	movs	r3, #0
 801be64:	6063      	str	r3, [r4, #4]
 801be66:	6923      	ldr	r3, [r4, #16]
 801be68:	6023      	str	r3, [r4, #0]
 801be6a:	2308      	movs	r3, #8
 801be6c:	89a2      	ldrh	r2, [r4, #12]
 801be6e:	4313      	orrs	r3, r2
 801be70:	81a3      	strh	r3, [r4, #12]
 801be72:	6923      	ldr	r3, [r4, #16]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d10b      	bne.n	801be90 <__swsetup_r+0x88>
 801be78:	21a0      	movs	r1, #160	; 0xa0
 801be7a:	2280      	movs	r2, #128	; 0x80
 801be7c:	89a3      	ldrh	r3, [r4, #12]
 801be7e:	0089      	lsls	r1, r1, #2
 801be80:	0092      	lsls	r2, r2, #2
 801be82:	400b      	ands	r3, r1
 801be84:	4293      	cmp	r3, r2
 801be86:	d003      	beq.n	801be90 <__swsetup_r+0x88>
 801be88:	0021      	movs	r1, r4
 801be8a:	0028      	movs	r0, r5
 801be8c:	f000 f89a 	bl	801bfc4 <__smakebuf_r>
 801be90:	220c      	movs	r2, #12
 801be92:	5ea3      	ldrsh	r3, [r4, r2]
 801be94:	2001      	movs	r0, #1
 801be96:	001a      	movs	r2, r3
 801be98:	b299      	uxth	r1, r3
 801be9a:	4002      	ands	r2, r0
 801be9c:	4203      	tst	r3, r0
 801be9e:	d00f      	beq.n	801bec0 <__swsetup_r+0xb8>
 801bea0:	2200      	movs	r2, #0
 801bea2:	60a2      	str	r2, [r4, #8]
 801bea4:	6962      	ldr	r2, [r4, #20]
 801bea6:	4252      	negs	r2, r2
 801bea8:	61a2      	str	r2, [r4, #24]
 801beaa:	2000      	movs	r0, #0
 801beac:	6922      	ldr	r2, [r4, #16]
 801beae:	4282      	cmp	r2, r0
 801beb0:	d1c4      	bne.n	801be3c <__swsetup_r+0x34>
 801beb2:	0609      	lsls	r1, r1, #24
 801beb4:	d5c2      	bpl.n	801be3c <__swsetup_r+0x34>
 801beb6:	2240      	movs	r2, #64	; 0x40
 801beb8:	4313      	orrs	r3, r2
 801beba:	81a3      	strh	r3, [r4, #12]
 801bebc:	3801      	subs	r0, #1
 801bebe:	e7bd      	b.n	801be3c <__swsetup_r+0x34>
 801bec0:	0788      	lsls	r0, r1, #30
 801bec2:	d400      	bmi.n	801bec6 <__swsetup_r+0xbe>
 801bec4:	6962      	ldr	r2, [r4, #20]
 801bec6:	60a2      	str	r2, [r4, #8]
 801bec8:	e7ef      	b.n	801beaa <__swsetup_r+0xa2>
 801beca:	46c0      	nop			; (mov r8, r8)
 801becc:	200002b4 	.word	0x200002b4

0801bed0 <_raise_r>:
 801bed0:	b570      	push	{r4, r5, r6, lr}
 801bed2:	0004      	movs	r4, r0
 801bed4:	000d      	movs	r5, r1
 801bed6:	291f      	cmp	r1, #31
 801bed8:	d904      	bls.n	801bee4 <_raise_r+0x14>
 801beda:	2316      	movs	r3, #22
 801bedc:	6003      	str	r3, [r0, #0]
 801bede:	2001      	movs	r0, #1
 801bee0:	4240      	negs	r0, r0
 801bee2:	bd70      	pop	{r4, r5, r6, pc}
 801bee4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801bee6:	2b00      	cmp	r3, #0
 801bee8:	d004      	beq.n	801bef4 <_raise_r+0x24>
 801beea:	008a      	lsls	r2, r1, #2
 801beec:	189b      	adds	r3, r3, r2
 801beee:	681a      	ldr	r2, [r3, #0]
 801bef0:	2a00      	cmp	r2, #0
 801bef2:	d108      	bne.n	801bf06 <_raise_r+0x36>
 801bef4:	0020      	movs	r0, r4
 801bef6:	f000 f831 	bl	801bf5c <_getpid_r>
 801befa:	002a      	movs	r2, r5
 801befc:	0001      	movs	r1, r0
 801befe:	0020      	movs	r0, r4
 801bf00:	f000 f81a 	bl	801bf38 <_kill_r>
 801bf04:	e7ed      	b.n	801bee2 <_raise_r+0x12>
 801bf06:	2000      	movs	r0, #0
 801bf08:	2a01      	cmp	r2, #1
 801bf0a:	d0ea      	beq.n	801bee2 <_raise_r+0x12>
 801bf0c:	1c51      	adds	r1, r2, #1
 801bf0e:	d103      	bne.n	801bf18 <_raise_r+0x48>
 801bf10:	2316      	movs	r3, #22
 801bf12:	3001      	adds	r0, #1
 801bf14:	6023      	str	r3, [r4, #0]
 801bf16:	e7e4      	b.n	801bee2 <_raise_r+0x12>
 801bf18:	2400      	movs	r4, #0
 801bf1a:	0028      	movs	r0, r5
 801bf1c:	601c      	str	r4, [r3, #0]
 801bf1e:	4790      	blx	r2
 801bf20:	0020      	movs	r0, r4
 801bf22:	e7de      	b.n	801bee2 <_raise_r+0x12>

0801bf24 <raise>:
 801bf24:	b510      	push	{r4, lr}
 801bf26:	4b03      	ldr	r3, [pc, #12]	; (801bf34 <raise+0x10>)
 801bf28:	0001      	movs	r1, r0
 801bf2a:	6818      	ldr	r0, [r3, #0]
 801bf2c:	f7ff ffd0 	bl	801bed0 <_raise_r>
 801bf30:	bd10      	pop	{r4, pc}
 801bf32:	46c0      	nop			; (mov r8, r8)
 801bf34:	200002b4 	.word	0x200002b4

0801bf38 <_kill_r>:
 801bf38:	2300      	movs	r3, #0
 801bf3a:	b570      	push	{r4, r5, r6, lr}
 801bf3c:	4d06      	ldr	r5, [pc, #24]	; (801bf58 <_kill_r+0x20>)
 801bf3e:	0004      	movs	r4, r0
 801bf40:	0008      	movs	r0, r1
 801bf42:	0011      	movs	r1, r2
 801bf44:	602b      	str	r3, [r5, #0]
 801bf46:	f7f7 fec7 	bl	8013cd8 <_kill>
 801bf4a:	1c43      	adds	r3, r0, #1
 801bf4c:	d103      	bne.n	801bf56 <_kill_r+0x1e>
 801bf4e:	682b      	ldr	r3, [r5, #0]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d000      	beq.n	801bf56 <_kill_r+0x1e>
 801bf54:	6023      	str	r3, [r4, #0]
 801bf56:	bd70      	pop	{r4, r5, r6, pc}
 801bf58:	20004c5c 	.word	0x20004c5c

0801bf5c <_getpid_r>:
 801bf5c:	b510      	push	{r4, lr}
 801bf5e:	f7f7 feb9 	bl	8013cd4 <_getpid>
 801bf62:	bd10      	pop	{r4, pc}

0801bf64 <_malloc_usable_size_r>:
 801bf64:	1f0b      	subs	r3, r1, #4
 801bf66:	681b      	ldr	r3, [r3, #0]
 801bf68:	1f18      	subs	r0, r3, #4
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	da01      	bge.n	801bf72 <_malloc_usable_size_r+0xe>
 801bf6e:	580b      	ldr	r3, [r1, r0]
 801bf70:	18c0      	adds	r0, r0, r3
 801bf72:	4770      	bx	lr

0801bf74 <__swhatbuf_r>:
 801bf74:	b570      	push	{r4, r5, r6, lr}
 801bf76:	000e      	movs	r6, r1
 801bf78:	001d      	movs	r5, r3
 801bf7a:	230e      	movs	r3, #14
 801bf7c:	5ec9      	ldrsh	r1, [r1, r3]
 801bf7e:	0014      	movs	r4, r2
 801bf80:	b096      	sub	sp, #88	; 0x58
 801bf82:	2900      	cmp	r1, #0
 801bf84:	da0c      	bge.n	801bfa0 <__swhatbuf_r+0x2c>
 801bf86:	89b2      	ldrh	r2, [r6, #12]
 801bf88:	2380      	movs	r3, #128	; 0x80
 801bf8a:	0011      	movs	r1, r2
 801bf8c:	4019      	ands	r1, r3
 801bf8e:	421a      	tst	r2, r3
 801bf90:	d013      	beq.n	801bfba <__swhatbuf_r+0x46>
 801bf92:	2100      	movs	r1, #0
 801bf94:	3b40      	subs	r3, #64	; 0x40
 801bf96:	2000      	movs	r0, #0
 801bf98:	6029      	str	r1, [r5, #0]
 801bf9a:	6023      	str	r3, [r4, #0]
 801bf9c:	b016      	add	sp, #88	; 0x58
 801bf9e:	bd70      	pop	{r4, r5, r6, pc}
 801bfa0:	466a      	mov	r2, sp
 801bfa2:	f000 f84d 	bl	801c040 <_fstat_r>
 801bfa6:	2800      	cmp	r0, #0
 801bfa8:	dbed      	blt.n	801bf86 <__swhatbuf_r+0x12>
 801bfaa:	23f0      	movs	r3, #240	; 0xf0
 801bfac:	9901      	ldr	r1, [sp, #4]
 801bfae:	021b      	lsls	r3, r3, #8
 801bfb0:	4019      	ands	r1, r3
 801bfb2:	4b03      	ldr	r3, [pc, #12]	; (801bfc0 <__swhatbuf_r+0x4c>)
 801bfb4:	18c9      	adds	r1, r1, r3
 801bfb6:	424b      	negs	r3, r1
 801bfb8:	4159      	adcs	r1, r3
 801bfba:	2380      	movs	r3, #128	; 0x80
 801bfbc:	00db      	lsls	r3, r3, #3
 801bfbe:	e7ea      	b.n	801bf96 <__swhatbuf_r+0x22>
 801bfc0:	ffffe000 	.word	0xffffe000

0801bfc4 <__smakebuf_r>:
 801bfc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bfc6:	2602      	movs	r6, #2
 801bfc8:	898b      	ldrh	r3, [r1, #12]
 801bfca:	0005      	movs	r5, r0
 801bfcc:	000c      	movs	r4, r1
 801bfce:	4233      	tst	r3, r6
 801bfd0:	d006      	beq.n	801bfe0 <__smakebuf_r+0x1c>
 801bfd2:	0023      	movs	r3, r4
 801bfd4:	3347      	adds	r3, #71	; 0x47
 801bfd6:	6023      	str	r3, [r4, #0]
 801bfd8:	6123      	str	r3, [r4, #16]
 801bfda:	2301      	movs	r3, #1
 801bfdc:	6163      	str	r3, [r4, #20]
 801bfde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801bfe0:	466a      	mov	r2, sp
 801bfe2:	ab01      	add	r3, sp, #4
 801bfe4:	f7ff ffc6 	bl	801bf74 <__swhatbuf_r>
 801bfe8:	9900      	ldr	r1, [sp, #0]
 801bfea:	0007      	movs	r7, r0
 801bfec:	0028      	movs	r0, r5
 801bfee:	f7fb fad9 	bl	80175a4 <_malloc_r>
 801bff2:	2800      	cmp	r0, #0
 801bff4:	d108      	bne.n	801c008 <__smakebuf_r+0x44>
 801bff6:	220c      	movs	r2, #12
 801bff8:	5ea3      	ldrsh	r3, [r4, r2]
 801bffa:	059a      	lsls	r2, r3, #22
 801bffc:	d4ef      	bmi.n	801bfde <__smakebuf_r+0x1a>
 801bffe:	2203      	movs	r2, #3
 801c000:	4393      	bics	r3, r2
 801c002:	431e      	orrs	r6, r3
 801c004:	81a6      	strh	r6, [r4, #12]
 801c006:	e7e4      	b.n	801bfd2 <__smakebuf_r+0xe>
 801c008:	2380      	movs	r3, #128	; 0x80
 801c00a:	89a2      	ldrh	r2, [r4, #12]
 801c00c:	6020      	str	r0, [r4, #0]
 801c00e:	4313      	orrs	r3, r2
 801c010:	81a3      	strh	r3, [r4, #12]
 801c012:	9b00      	ldr	r3, [sp, #0]
 801c014:	6120      	str	r0, [r4, #16]
 801c016:	6163      	str	r3, [r4, #20]
 801c018:	9b01      	ldr	r3, [sp, #4]
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d00c      	beq.n	801c038 <__smakebuf_r+0x74>
 801c01e:	0028      	movs	r0, r5
 801c020:	230e      	movs	r3, #14
 801c022:	5ee1      	ldrsh	r1, [r4, r3]
 801c024:	f000 f81e 	bl	801c064 <_isatty_r>
 801c028:	2800      	cmp	r0, #0
 801c02a:	d005      	beq.n	801c038 <__smakebuf_r+0x74>
 801c02c:	2303      	movs	r3, #3
 801c02e:	89a2      	ldrh	r2, [r4, #12]
 801c030:	439a      	bics	r2, r3
 801c032:	3b02      	subs	r3, #2
 801c034:	4313      	orrs	r3, r2
 801c036:	81a3      	strh	r3, [r4, #12]
 801c038:	89a3      	ldrh	r3, [r4, #12]
 801c03a:	433b      	orrs	r3, r7
 801c03c:	81a3      	strh	r3, [r4, #12]
 801c03e:	e7ce      	b.n	801bfde <__smakebuf_r+0x1a>

0801c040 <_fstat_r>:
 801c040:	2300      	movs	r3, #0
 801c042:	b570      	push	{r4, r5, r6, lr}
 801c044:	4d06      	ldr	r5, [pc, #24]	; (801c060 <_fstat_r+0x20>)
 801c046:	0004      	movs	r4, r0
 801c048:	0008      	movs	r0, r1
 801c04a:	0011      	movs	r1, r2
 801c04c:	602b      	str	r3, [r5, #0]
 801c04e:	f7f7 fe71 	bl	8013d34 <_fstat>
 801c052:	1c43      	adds	r3, r0, #1
 801c054:	d103      	bne.n	801c05e <_fstat_r+0x1e>
 801c056:	682b      	ldr	r3, [r5, #0]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d000      	beq.n	801c05e <_fstat_r+0x1e>
 801c05c:	6023      	str	r3, [r4, #0]
 801c05e:	bd70      	pop	{r4, r5, r6, pc}
 801c060:	20004c5c 	.word	0x20004c5c

0801c064 <_isatty_r>:
 801c064:	2300      	movs	r3, #0
 801c066:	b570      	push	{r4, r5, r6, lr}
 801c068:	4d06      	ldr	r5, [pc, #24]	; (801c084 <_isatty_r+0x20>)
 801c06a:	0004      	movs	r4, r0
 801c06c:	0008      	movs	r0, r1
 801c06e:	602b      	str	r3, [r5, #0]
 801c070:	f7f7 fe66 	bl	8013d40 <_isatty>
 801c074:	1c43      	adds	r3, r0, #1
 801c076:	d103      	bne.n	801c080 <_isatty_r+0x1c>
 801c078:	682b      	ldr	r3, [r5, #0]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d000      	beq.n	801c080 <_isatty_r+0x1c>
 801c07e:	6023      	str	r3, [r4, #0]
 801c080:	bd70      	pop	{r4, r5, r6, pc}
 801c082:	46c0      	nop			; (mov r8, r8)
 801c084:	20004c5c 	.word	0x20004c5c

0801c088 <pow>:
 801c088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c08a:	0014      	movs	r4, r2
 801c08c:	001d      	movs	r5, r3
 801c08e:	9000      	str	r0, [sp, #0]
 801c090:	9101      	str	r1, [sp, #4]
 801c092:	f000 f86f 	bl	801c174 <__ieee754_pow>
 801c096:	0022      	movs	r2, r4
 801c098:	0006      	movs	r6, r0
 801c09a:	000f      	movs	r7, r1
 801c09c:	002b      	movs	r3, r5
 801c09e:	0020      	movs	r0, r4
 801c0a0:	0029      	movs	r1, r5
 801c0a2:	f7f3 fb57 	bl	800f754 <__aeabi_dcmpun>
 801c0a6:	2800      	cmp	r0, #0
 801c0a8:	d13f      	bne.n	801c12a <pow+0xa2>
 801c0aa:	9800      	ldr	r0, [sp, #0]
 801c0ac:	9901      	ldr	r1, [sp, #4]
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	f7f0 fdc7 	bl	800cc44 <__aeabi_dcmpeq>
 801c0b6:	2800      	cmp	r0, #0
 801c0b8:	d019      	beq.n	801c0ee <pow+0x66>
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	2300      	movs	r3, #0
 801c0be:	0020      	movs	r0, r4
 801c0c0:	0029      	movs	r1, r5
 801c0c2:	f7f0 fdbf 	bl	800cc44 <__aeabi_dcmpeq>
 801c0c6:	2800      	cmp	r0, #0
 801c0c8:	d146      	bne.n	801c158 <pow+0xd0>
 801c0ca:	0020      	movs	r0, r4
 801c0cc:	0029      	movs	r1, r5
 801c0ce:	f000 f849 	bl	801c164 <finite>
 801c0d2:	2800      	cmp	r0, #0
 801c0d4:	d029      	beq.n	801c12a <pow+0xa2>
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	2300      	movs	r3, #0
 801c0da:	0020      	movs	r0, r4
 801c0dc:	0029      	movs	r1, r5
 801c0de:	f7f0 fdb7 	bl	800cc50 <__aeabi_dcmplt>
 801c0e2:	2800      	cmp	r0, #0
 801c0e4:	d021      	beq.n	801c12a <pow+0xa2>
 801c0e6:	f7fd fadb 	bl	80196a0 <__errno>
 801c0ea:	2322      	movs	r3, #34	; 0x22
 801c0ec:	e01c      	b.n	801c128 <pow+0xa0>
 801c0ee:	0030      	movs	r0, r6
 801c0f0:	0039      	movs	r1, r7
 801c0f2:	f000 f837 	bl	801c164 <finite>
 801c0f6:	2800      	cmp	r0, #0
 801c0f8:	d11b      	bne.n	801c132 <pow+0xaa>
 801c0fa:	9800      	ldr	r0, [sp, #0]
 801c0fc:	9901      	ldr	r1, [sp, #4]
 801c0fe:	f000 f831 	bl	801c164 <finite>
 801c102:	2800      	cmp	r0, #0
 801c104:	d015      	beq.n	801c132 <pow+0xaa>
 801c106:	0020      	movs	r0, r4
 801c108:	0029      	movs	r1, r5
 801c10a:	f000 f82b 	bl	801c164 <finite>
 801c10e:	2800      	cmp	r0, #0
 801c110:	d00f      	beq.n	801c132 <pow+0xaa>
 801c112:	0032      	movs	r2, r6
 801c114:	003b      	movs	r3, r7
 801c116:	0030      	movs	r0, r6
 801c118:	0039      	movs	r1, r7
 801c11a:	f7f3 fb1b 	bl	800f754 <__aeabi_dcmpun>
 801c11e:	2800      	cmp	r0, #0
 801c120:	d0e1      	beq.n	801c0e6 <pow+0x5e>
 801c122:	f7fd fabd 	bl	80196a0 <__errno>
 801c126:	2321      	movs	r3, #33	; 0x21
 801c128:	6003      	str	r3, [r0, #0]
 801c12a:	0030      	movs	r0, r6
 801c12c:	0039      	movs	r1, r7
 801c12e:	b003      	add	sp, #12
 801c130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c132:	2200      	movs	r2, #0
 801c134:	2300      	movs	r3, #0
 801c136:	0030      	movs	r0, r6
 801c138:	0039      	movs	r1, r7
 801c13a:	f7f0 fd83 	bl	800cc44 <__aeabi_dcmpeq>
 801c13e:	2800      	cmp	r0, #0
 801c140:	d0f3      	beq.n	801c12a <pow+0xa2>
 801c142:	9800      	ldr	r0, [sp, #0]
 801c144:	9901      	ldr	r1, [sp, #4]
 801c146:	f000 f80d 	bl	801c164 <finite>
 801c14a:	2800      	cmp	r0, #0
 801c14c:	d0ed      	beq.n	801c12a <pow+0xa2>
 801c14e:	0020      	movs	r0, r4
 801c150:	0029      	movs	r1, r5
 801c152:	f000 f807 	bl	801c164 <finite>
 801c156:	e7c4      	b.n	801c0e2 <pow+0x5a>
 801c158:	2600      	movs	r6, #0
 801c15a:	4f01      	ldr	r7, [pc, #4]	; (801c160 <pow+0xd8>)
 801c15c:	e7e5      	b.n	801c12a <pow+0xa2>
 801c15e:	46c0      	nop			; (mov r8, r8)
 801c160:	3ff00000 	.word	0x3ff00000

0801c164 <finite>:
 801c164:	4b02      	ldr	r3, [pc, #8]	; (801c170 <finite+0xc>)
 801c166:	0048      	lsls	r0, r1, #1
 801c168:	0840      	lsrs	r0, r0, #1
 801c16a:	18c0      	adds	r0, r0, r3
 801c16c:	0fc0      	lsrs	r0, r0, #31
 801c16e:	4770      	bx	lr
 801c170:	80100000 	.word	0x80100000

0801c174 <__ieee754_pow>:
 801c174:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c176:	b095      	sub	sp, #84	; 0x54
 801c178:	9202      	str	r2, [sp, #8]
 801c17a:	9303      	str	r3, [sp, #12]
 801c17c:	9b03      	ldr	r3, [sp, #12]
 801c17e:	9a03      	ldr	r2, [sp, #12]
 801c180:	9304      	str	r3, [sp, #16]
 801c182:	9b02      	ldr	r3, [sp, #8]
 801c184:	0056      	lsls	r6, r2, #1
 801c186:	001a      	movs	r2, r3
 801c188:	0876      	lsrs	r6, r6, #1
 801c18a:	0007      	movs	r7, r0
 801c18c:	000d      	movs	r5, r1
 801c18e:	4332      	orrs	r2, r6
 801c190:	d119      	bne.n	801c1c6 <__ieee754_pow+0x52>
 801c192:	2180      	movs	r1, #128	; 0x80
 801c194:	0309      	lsls	r1, r1, #12
 801c196:	4069      	eors	r1, r5
 801c198:	0002      	movs	r2, r0
 801c19a:	000b      	movs	r3, r1
 801c19c:	1892      	adds	r2, r2, r2
 801c19e:	415b      	adcs	r3, r3
 801c1a0:	4989      	ldr	r1, [pc, #548]	; (801c3c8 <__ieee754_pow+0x254>)
 801c1a2:	428b      	cmp	r3, r1
 801c1a4:	d806      	bhi.n	801c1b4 <__ieee754_pow+0x40>
 801c1a6:	d001      	beq.n	801c1ac <__ieee754_pow+0x38>
 801c1a8:	f000 fcb6 	bl	801cb18 <__ieee754_pow+0x9a4>
 801c1ac:	2a00      	cmp	r2, #0
 801c1ae:	d101      	bne.n	801c1b4 <__ieee754_pow+0x40>
 801c1b0:	f000 fcb2 	bl	801cb18 <__ieee754_pow+0x9a4>
 801c1b4:	9a02      	ldr	r2, [sp, #8]
 801c1b6:	9b03      	ldr	r3, [sp, #12]
 801c1b8:	0038      	movs	r0, r7
 801c1ba:	0029      	movs	r1, r5
 801c1bc:	f7f1 fd2c 	bl	800dc18 <__aeabi_dadd>
 801c1c0:	9000      	str	r0, [sp, #0]
 801c1c2:	9101      	str	r1, [sp, #4]
 801c1c4:	e0ad      	b.n	801c322 <__ieee754_pow+0x1ae>
 801c1c6:	4a81      	ldr	r2, [pc, #516]	; (801c3cc <__ieee754_pow+0x258>)
 801c1c8:	004c      	lsls	r4, r1, #1
 801c1ca:	9108      	str	r1, [sp, #32]
 801c1cc:	9000      	str	r0, [sp, #0]
 801c1ce:	0864      	lsrs	r4, r4, #1
 801c1d0:	4294      	cmp	r4, r2
 801c1d2:	dc08      	bgt.n	801c1e6 <__ieee754_pow+0x72>
 801c1d4:	d101      	bne.n	801c1da <__ieee754_pow+0x66>
 801c1d6:	2800      	cmp	r0, #0
 801c1d8:	d1ec      	bne.n	801c1b4 <__ieee754_pow+0x40>
 801c1da:	4a7c      	ldr	r2, [pc, #496]	; (801c3cc <__ieee754_pow+0x258>)
 801c1dc:	4296      	cmp	r6, r2
 801c1de:	dc02      	bgt.n	801c1e6 <__ieee754_pow+0x72>
 801c1e0:	d10c      	bne.n	801c1fc <__ieee754_pow+0x88>
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d00a      	beq.n	801c1fc <__ieee754_pow+0x88>
 801c1e6:	4b7a      	ldr	r3, [pc, #488]	; (801c3d0 <__ieee754_pow+0x25c>)
 801c1e8:	18eb      	adds	r3, r5, r3
 801c1ea:	433b      	orrs	r3, r7
 801c1ec:	d1e2      	bne.n	801c1b4 <__ieee754_pow+0x40>
 801c1ee:	2180      	movs	r1, #128	; 0x80
 801c1f0:	9803      	ldr	r0, [sp, #12]
 801c1f2:	0309      	lsls	r1, r1, #12
 801c1f4:	4048      	eors	r0, r1
 801c1f6:	0003      	movs	r3, r0
 801c1f8:	9a02      	ldr	r2, [sp, #8]
 801c1fa:	e7cf      	b.n	801c19c <__ieee754_pow+0x28>
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	9206      	str	r2, [sp, #24]
 801c200:	2d00      	cmp	r5, #0
 801c202:	da69      	bge.n	801c2d8 <__ieee754_pow+0x164>
 801c204:	4a73      	ldr	r2, [pc, #460]	; (801c3d4 <__ieee754_pow+0x260>)
 801c206:	4296      	cmp	r6, r2
 801c208:	dc64      	bgt.n	801c2d4 <__ieee754_pow+0x160>
 801c20a:	4a73      	ldr	r2, [pc, #460]	; (801c3d8 <__ieee754_pow+0x264>)
 801c20c:	4296      	cmp	r6, r2
 801c20e:	dd11      	ble.n	801c234 <__ieee754_pow+0xc0>
 801c210:	4972      	ldr	r1, [pc, #456]	; (801c3dc <__ieee754_pow+0x268>)
 801c212:	1532      	asrs	r2, r6, #20
 801c214:	1852      	adds	r2, r2, r1
 801c216:	2a14      	cmp	r2, #20
 801c218:	dd3c      	ble.n	801c294 <__ieee754_pow+0x120>
 801c21a:	2134      	movs	r1, #52	; 0x34
 801c21c:	1a89      	subs	r1, r1, r2
 801c21e:	9a02      	ldr	r2, [sp, #8]
 801c220:	40ca      	lsrs	r2, r1
 801c222:	0010      	movs	r0, r2
 801c224:	4088      	lsls	r0, r1
 801c226:	4298      	cmp	r0, r3
 801c228:	d104      	bne.n	801c234 <__ieee754_pow+0xc0>
 801c22a:	2101      	movs	r1, #1
 801c22c:	400a      	ands	r2, r1
 801c22e:	1849      	adds	r1, r1, r1
 801c230:	1a8a      	subs	r2, r1, r2
 801c232:	9206      	str	r2, [sp, #24]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d03c      	beq.n	801c2b2 <__ieee754_pow+0x13e>
 801c238:	0038      	movs	r0, r7
 801c23a:	0029      	movs	r1, r5
 801c23c:	f000 fca4 	bl	801cb88 <fabs>
 801c240:	9000      	str	r0, [sp, #0]
 801c242:	9101      	str	r1, [sp, #4]
 801c244:	2f00      	cmp	r7, #0
 801c246:	d000      	beq.n	801c24a <__ieee754_pow+0xd6>
 801c248:	e094      	b.n	801c374 <__ieee754_pow+0x200>
 801c24a:	2c00      	cmp	r4, #0
 801c24c:	d005      	beq.n	801c25a <__ieee754_pow+0xe6>
 801c24e:	4a64      	ldr	r2, [pc, #400]	; (801c3e0 <__ieee754_pow+0x26c>)
 801c250:	00ab      	lsls	r3, r5, #2
 801c252:	089b      	lsrs	r3, r3, #2
 801c254:	4293      	cmp	r3, r2
 801c256:	d000      	beq.n	801c25a <__ieee754_pow+0xe6>
 801c258:	e08c      	b.n	801c374 <__ieee754_pow+0x200>
 801c25a:	9b04      	ldr	r3, [sp, #16]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	da07      	bge.n	801c270 <__ieee754_pow+0xfc>
 801c260:	9a00      	ldr	r2, [sp, #0]
 801c262:	9b01      	ldr	r3, [sp, #4]
 801c264:	2000      	movs	r0, #0
 801c266:	495e      	ldr	r1, [pc, #376]	; (801c3e0 <__ieee754_pow+0x26c>)
 801c268:	f7f2 f836 	bl	800e2d8 <__aeabi_ddiv>
 801c26c:	9000      	str	r0, [sp, #0]
 801c26e:	9101      	str	r1, [sp, #4]
 801c270:	9b08      	ldr	r3, [sp, #32]
 801c272:	2b00      	cmp	r3, #0
 801c274:	da55      	bge.n	801c322 <__ieee754_pow+0x1ae>
 801c276:	4b56      	ldr	r3, [pc, #344]	; (801c3d0 <__ieee754_pow+0x25c>)
 801c278:	18e4      	adds	r4, r4, r3
 801c27a:	9b06      	ldr	r3, [sp, #24]
 801c27c:	431c      	orrs	r4, r3
 801c27e:	d000      	beq.n	801c282 <__ieee754_pow+0x10e>
 801c280:	e06c      	b.n	801c35c <__ieee754_pow+0x1e8>
 801c282:	9a00      	ldr	r2, [sp, #0]
 801c284:	9b01      	ldr	r3, [sp, #4]
 801c286:	0010      	movs	r0, r2
 801c288:	0019      	movs	r1, r3
 801c28a:	f7f2 fee1 	bl	800f050 <__aeabi_dsub>
 801c28e:	0002      	movs	r2, r0
 801c290:	000b      	movs	r3, r1
 801c292:	e01c      	b.n	801c2ce <__ieee754_pow+0x15a>
 801c294:	2b00      	cmp	r3, #0
 801c296:	d1cf      	bne.n	801c238 <__ieee754_pow+0xc4>
 801c298:	3314      	adds	r3, #20
 801c29a:	1a9a      	subs	r2, r3, r2
 801c29c:	0033      	movs	r3, r6
 801c29e:	4113      	asrs	r3, r2
 801c2a0:	0019      	movs	r1, r3
 801c2a2:	4091      	lsls	r1, r2
 801c2a4:	42b1      	cmp	r1, r6
 801c2a6:	d104      	bne.n	801c2b2 <__ieee754_pow+0x13e>
 801c2a8:	2201      	movs	r2, #1
 801c2aa:	4013      	ands	r3, r2
 801c2ac:	1892      	adds	r2, r2, r2
 801c2ae:	1ad3      	subs	r3, r2, r3
 801c2b0:	9306      	str	r3, [sp, #24]
 801c2b2:	4b4b      	ldr	r3, [pc, #300]	; (801c3e0 <__ieee754_pow+0x26c>)
 801c2b4:	429e      	cmp	r6, r3
 801c2b6:	d138      	bne.n	801c32a <__ieee754_pow+0x1b6>
 801c2b8:	0038      	movs	r0, r7
 801c2ba:	0029      	movs	r1, r5
 801c2bc:	9b04      	ldr	r3, [sp, #16]
 801c2be:	9000      	str	r0, [sp, #0]
 801c2c0:	9101      	str	r1, [sp, #4]
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	da2d      	bge.n	801c322 <__ieee754_pow+0x1ae>
 801c2c6:	003a      	movs	r2, r7
 801c2c8:	002b      	movs	r3, r5
 801c2ca:	2000      	movs	r0, #0
 801c2cc:	4944      	ldr	r1, [pc, #272]	; (801c3e0 <__ieee754_pow+0x26c>)
 801c2ce:	f7f2 f803 	bl	800e2d8 <__aeabi_ddiv>
 801c2d2:	e775      	b.n	801c1c0 <__ieee754_pow+0x4c>
 801c2d4:	2202      	movs	r2, #2
 801c2d6:	9206      	str	r2, [sp, #24]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d1ad      	bne.n	801c238 <__ieee754_pow+0xc4>
 801c2dc:	4b3b      	ldr	r3, [pc, #236]	; (801c3cc <__ieee754_pow+0x258>)
 801c2de:	429e      	cmp	r6, r3
 801c2e0:	d1e7      	bne.n	801c2b2 <__ieee754_pow+0x13e>
 801c2e2:	4b3b      	ldr	r3, [pc, #236]	; (801c3d0 <__ieee754_pow+0x25c>)
 801c2e4:	18e3      	adds	r3, r4, r3
 801c2e6:	433b      	orrs	r3, r7
 801c2e8:	d101      	bne.n	801c2ee <__ieee754_pow+0x17a>
 801c2ea:	f000 fc15 	bl	801cb18 <__ieee754_pow+0x9a4>
 801c2ee:	4b3a      	ldr	r3, [pc, #232]	; (801c3d8 <__ieee754_pow+0x264>)
 801c2f0:	429c      	cmp	r4, r3
 801c2f2:	dd09      	ble.n	801c308 <__ieee754_pow+0x194>
 801c2f4:	9b04      	ldr	r3, [sp, #16]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	da01      	bge.n	801c2fe <__ieee754_pow+0x18a>
 801c2fa:	f000 fc11 	bl	801cb20 <__ieee754_pow+0x9ac>
 801c2fe:	9b02      	ldr	r3, [sp, #8]
 801c300:	9c03      	ldr	r4, [sp, #12]
 801c302:	9300      	str	r3, [sp, #0]
 801c304:	9401      	str	r4, [sp, #4]
 801c306:	e00c      	b.n	801c322 <__ieee754_pow+0x1ae>
 801c308:	9b04      	ldr	r3, [sp, #16]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	db01      	blt.n	801c312 <__ieee754_pow+0x19e>
 801c30e:	f000 fc07 	bl	801cb20 <__ieee754_pow+0x9ac>
 801c312:	2280      	movs	r2, #128	; 0x80
 801c314:	0612      	lsls	r2, r2, #24
 801c316:	4694      	mov	ip, r2
 801c318:	9b02      	ldr	r3, [sp, #8]
 801c31a:	9300      	str	r3, [sp, #0]
 801c31c:	9b03      	ldr	r3, [sp, #12]
 801c31e:	4463      	add	r3, ip
 801c320:	9301      	str	r3, [sp, #4]
 801c322:	9800      	ldr	r0, [sp, #0]
 801c324:	9901      	ldr	r1, [sp, #4]
 801c326:	b015      	add	sp, #84	; 0x54
 801c328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c32a:	2380      	movs	r3, #128	; 0x80
 801c32c:	9a04      	ldr	r2, [sp, #16]
 801c32e:	05db      	lsls	r3, r3, #23
 801c330:	429a      	cmp	r2, r3
 801c332:	d106      	bne.n	801c342 <__ieee754_pow+0x1ce>
 801c334:	003a      	movs	r2, r7
 801c336:	002b      	movs	r3, r5
 801c338:	0038      	movs	r0, r7
 801c33a:	0029      	movs	r1, r5
 801c33c:	f7f2 fbc6 	bl	800eacc <__aeabi_dmul>
 801c340:	e73e      	b.n	801c1c0 <__ieee754_pow+0x4c>
 801c342:	4b28      	ldr	r3, [pc, #160]	; (801c3e4 <__ieee754_pow+0x270>)
 801c344:	9a04      	ldr	r2, [sp, #16]
 801c346:	429a      	cmp	r2, r3
 801c348:	d000      	beq.n	801c34c <__ieee754_pow+0x1d8>
 801c34a:	e775      	b.n	801c238 <__ieee754_pow+0xc4>
 801c34c:	2d00      	cmp	r5, #0
 801c34e:	da00      	bge.n	801c352 <__ieee754_pow+0x1de>
 801c350:	e772      	b.n	801c238 <__ieee754_pow+0xc4>
 801c352:	0038      	movs	r0, r7
 801c354:	0029      	movs	r1, r5
 801c356:	f000 fcb7 	bl	801ccc8 <__ieee754_sqrt>
 801c35a:	e731      	b.n	801c1c0 <__ieee754_pow+0x4c>
 801c35c:	9b06      	ldr	r3, [sp, #24]
 801c35e:	2b01      	cmp	r3, #1
 801c360:	d1df      	bne.n	801c322 <__ieee754_pow+0x1ae>
 801c362:	9800      	ldr	r0, [sp, #0]
 801c364:	2180      	movs	r1, #128	; 0x80
 801c366:	0002      	movs	r2, r0
 801c368:	9801      	ldr	r0, [sp, #4]
 801c36a:	0609      	lsls	r1, r1, #24
 801c36c:	1843      	adds	r3, r0, r1
 801c36e:	9200      	str	r2, [sp, #0]
 801c370:	9301      	str	r3, [sp, #4]
 801c372:	e7d6      	b.n	801c322 <__ieee754_pow+0x1ae>
 801c374:	0feb      	lsrs	r3, r5, #31
 801c376:	3b01      	subs	r3, #1
 801c378:	930e      	str	r3, [sp, #56]	; 0x38
 801c37a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c37c:	9b06      	ldr	r3, [sp, #24]
 801c37e:	4313      	orrs	r3, r2
 801c380:	d104      	bne.n	801c38c <__ieee754_pow+0x218>
 801c382:	003a      	movs	r2, r7
 801c384:	002b      	movs	r3, r5
 801c386:	0038      	movs	r0, r7
 801c388:	0029      	movs	r1, r5
 801c38a:	e77e      	b.n	801c28a <__ieee754_pow+0x116>
 801c38c:	4b16      	ldr	r3, [pc, #88]	; (801c3e8 <__ieee754_pow+0x274>)
 801c38e:	429e      	cmp	r6, r3
 801c390:	dc00      	bgt.n	801c394 <__ieee754_pow+0x220>
 801c392:	e0f1      	b.n	801c578 <__ieee754_pow+0x404>
 801c394:	4b15      	ldr	r3, [pc, #84]	; (801c3ec <__ieee754_pow+0x278>)
 801c396:	429e      	cmp	r6, r3
 801c398:	dd09      	ble.n	801c3ae <__ieee754_pow+0x23a>
 801c39a:	4b0f      	ldr	r3, [pc, #60]	; (801c3d8 <__ieee754_pow+0x264>)
 801c39c:	429c      	cmp	r4, r3
 801c39e:	dc0c      	bgt.n	801c3ba <__ieee754_pow+0x246>
 801c3a0:	9b04      	ldr	r3, [sp, #16]
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	da0c      	bge.n	801c3c0 <__ieee754_pow+0x24c>
 801c3a6:	2000      	movs	r0, #0
 801c3a8:	f000 fc86 	bl	801ccb8 <__math_oflow>
 801c3ac:	e708      	b.n	801c1c0 <__ieee754_pow+0x4c>
 801c3ae:	4b10      	ldr	r3, [pc, #64]	; (801c3f0 <__ieee754_pow+0x27c>)
 801c3b0:	429c      	cmp	r4, r3
 801c3b2:	ddf5      	ble.n	801c3a0 <__ieee754_pow+0x22c>
 801c3b4:	4b0a      	ldr	r3, [pc, #40]	; (801c3e0 <__ieee754_pow+0x26c>)
 801c3b6:	429c      	cmp	r4, r3
 801c3b8:	dd1c      	ble.n	801c3f4 <__ieee754_pow+0x280>
 801c3ba:	9b04      	ldr	r3, [sp, #16]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	dcf2      	bgt.n	801c3a6 <__ieee754_pow+0x232>
 801c3c0:	2000      	movs	r0, #0
 801c3c2:	f000 fc72 	bl	801ccaa <__math_uflow>
 801c3c6:	e6fb      	b.n	801c1c0 <__ieee754_pow+0x4c>
 801c3c8:	fff00000 	.word	0xfff00000
 801c3cc:	7ff00000 	.word	0x7ff00000
 801c3d0:	c0100000 	.word	0xc0100000
 801c3d4:	433fffff 	.word	0x433fffff
 801c3d8:	3fefffff 	.word	0x3fefffff
 801c3dc:	fffffc01 	.word	0xfffffc01
 801c3e0:	3ff00000 	.word	0x3ff00000
 801c3e4:	3fe00000 	.word	0x3fe00000
 801c3e8:	41e00000 	.word	0x41e00000
 801c3ec:	43f00000 	.word	0x43f00000
 801c3f0:	3feffffe 	.word	0x3feffffe
 801c3f4:	2200      	movs	r2, #0
 801c3f6:	9800      	ldr	r0, [sp, #0]
 801c3f8:	9901      	ldr	r1, [sp, #4]
 801c3fa:	4b53      	ldr	r3, [pc, #332]	; (801c548 <__ieee754_pow+0x3d4>)
 801c3fc:	f7f2 fe28 	bl	800f050 <__aeabi_dsub>
 801c400:	22c0      	movs	r2, #192	; 0xc0
 801c402:	4b52      	ldr	r3, [pc, #328]	; (801c54c <__ieee754_pow+0x3d8>)
 801c404:	05d2      	lsls	r2, r2, #23
 801c406:	0004      	movs	r4, r0
 801c408:	000d      	movs	r5, r1
 801c40a:	f7f2 fb5f 	bl	800eacc <__aeabi_dmul>
 801c40e:	4a50      	ldr	r2, [pc, #320]	; (801c550 <__ieee754_pow+0x3dc>)
 801c410:	0006      	movs	r6, r0
 801c412:	000f      	movs	r7, r1
 801c414:	0020      	movs	r0, r4
 801c416:	0029      	movs	r1, r5
 801c418:	4b4e      	ldr	r3, [pc, #312]	; (801c554 <__ieee754_pow+0x3e0>)
 801c41a:	f7f2 fb57 	bl	800eacc <__aeabi_dmul>
 801c41e:	2200      	movs	r2, #0
 801c420:	9000      	str	r0, [sp, #0]
 801c422:	9101      	str	r1, [sp, #4]
 801c424:	4b4c      	ldr	r3, [pc, #304]	; (801c558 <__ieee754_pow+0x3e4>)
 801c426:	0020      	movs	r0, r4
 801c428:	0029      	movs	r1, r5
 801c42a:	f7f2 fb4f 	bl	800eacc <__aeabi_dmul>
 801c42e:	0002      	movs	r2, r0
 801c430:	000b      	movs	r3, r1
 801c432:	484a      	ldr	r0, [pc, #296]	; (801c55c <__ieee754_pow+0x3e8>)
 801c434:	494a      	ldr	r1, [pc, #296]	; (801c560 <__ieee754_pow+0x3ec>)
 801c436:	f7f2 fe0b 	bl	800f050 <__aeabi_dsub>
 801c43a:	0022      	movs	r2, r4
 801c43c:	002b      	movs	r3, r5
 801c43e:	f7f2 fb45 	bl	800eacc <__aeabi_dmul>
 801c442:	0002      	movs	r2, r0
 801c444:	000b      	movs	r3, r1
 801c446:	2000      	movs	r0, #0
 801c448:	4946      	ldr	r1, [pc, #280]	; (801c564 <__ieee754_pow+0x3f0>)
 801c44a:	f7f2 fe01 	bl	800f050 <__aeabi_dsub>
 801c44e:	0022      	movs	r2, r4
 801c450:	002b      	movs	r3, r5
 801c452:	9004      	str	r0, [sp, #16]
 801c454:	9105      	str	r1, [sp, #20]
 801c456:	0020      	movs	r0, r4
 801c458:	0029      	movs	r1, r5
 801c45a:	f7f2 fb37 	bl	800eacc <__aeabi_dmul>
 801c45e:	0002      	movs	r2, r0
 801c460:	000b      	movs	r3, r1
 801c462:	9804      	ldr	r0, [sp, #16]
 801c464:	9905      	ldr	r1, [sp, #20]
 801c466:	f7f2 fb31 	bl	800eacc <__aeabi_dmul>
 801c46a:	4a3f      	ldr	r2, [pc, #252]	; (801c568 <__ieee754_pow+0x3f4>)
 801c46c:	4b37      	ldr	r3, [pc, #220]	; (801c54c <__ieee754_pow+0x3d8>)
 801c46e:	f7f2 fb2d 	bl	800eacc <__aeabi_dmul>
 801c472:	0002      	movs	r2, r0
 801c474:	000b      	movs	r3, r1
 801c476:	9800      	ldr	r0, [sp, #0]
 801c478:	9901      	ldr	r1, [sp, #4]
 801c47a:	f7f2 fde9 	bl	800f050 <__aeabi_dsub>
 801c47e:	0002      	movs	r2, r0
 801c480:	000b      	movs	r3, r1
 801c482:	0004      	movs	r4, r0
 801c484:	000d      	movs	r5, r1
 801c486:	0030      	movs	r0, r6
 801c488:	0039      	movs	r1, r7
 801c48a:	f7f1 fbc5 	bl	800dc18 <__aeabi_dadd>
 801c48e:	2000      	movs	r0, #0
 801c490:	0032      	movs	r2, r6
 801c492:	003b      	movs	r3, r7
 801c494:	9004      	str	r0, [sp, #16]
 801c496:	9105      	str	r1, [sp, #20]
 801c498:	f7f2 fdda 	bl	800f050 <__aeabi_dsub>
 801c49c:	0002      	movs	r2, r0
 801c49e:	000b      	movs	r3, r1
 801c4a0:	0020      	movs	r0, r4
 801c4a2:	0029      	movs	r1, r5
 801c4a4:	f7f2 fdd4 	bl	800f050 <__aeabi_dsub>
 801c4a8:	9b06      	ldr	r3, [sp, #24]
 801c4aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c4ac:	3b01      	subs	r3, #1
 801c4ae:	0006      	movs	r6, r0
 801c4b0:	000f      	movs	r7, r1
 801c4b2:	4313      	orrs	r3, r2
 801c4b4:	d000      	beq.n	801c4b8 <__ieee754_pow+0x344>
 801c4b6:	e1dc      	b.n	801c872 <__ieee754_pow+0x6fe>
 801c4b8:	2300      	movs	r3, #0
 801c4ba:	4c2c      	ldr	r4, [pc, #176]	; (801c56c <__ieee754_pow+0x3f8>)
 801c4bc:	9300      	str	r3, [sp, #0]
 801c4be:	9401      	str	r4, [sp, #4]
 801c4c0:	9c02      	ldr	r4, [sp, #8]
 801c4c2:	9d03      	ldr	r5, [sp, #12]
 801c4c4:	9802      	ldr	r0, [sp, #8]
 801c4c6:	9903      	ldr	r1, [sp, #12]
 801c4c8:	2400      	movs	r4, #0
 801c4ca:	002b      	movs	r3, r5
 801c4cc:	0022      	movs	r2, r4
 801c4ce:	f7f2 fdbf 	bl	800f050 <__aeabi_dsub>
 801c4d2:	9a04      	ldr	r2, [sp, #16]
 801c4d4:	9b05      	ldr	r3, [sp, #20]
 801c4d6:	f7f2 faf9 	bl	800eacc <__aeabi_dmul>
 801c4da:	9a02      	ldr	r2, [sp, #8]
 801c4dc:	9b03      	ldr	r3, [sp, #12]
 801c4de:	9006      	str	r0, [sp, #24]
 801c4e0:	9107      	str	r1, [sp, #28]
 801c4e2:	0030      	movs	r0, r6
 801c4e4:	0039      	movs	r1, r7
 801c4e6:	f7f2 faf1 	bl	800eacc <__aeabi_dmul>
 801c4ea:	0002      	movs	r2, r0
 801c4ec:	000b      	movs	r3, r1
 801c4ee:	9806      	ldr	r0, [sp, #24]
 801c4f0:	9907      	ldr	r1, [sp, #28]
 801c4f2:	f7f1 fb91 	bl	800dc18 <__aeabi_dadd>
 801c4f6:	0022      	movs	r2, r4
 801c4f8:	002b      	movs	r3, r5
 801c4fa:	0006      	movs	r6, r0
 801c4fc:	000f      	movs	r7, r1
 801c4fe:	9804      	ldr	r0, [sp, #16]
 801c500:	9905      	ldr	r1, [sp, #20]
 801c502:	f7f2 fae3 	bl	800eacc <__aeabi_dmul>
 801c506:	0003      	movs	r3, r0
 801c508:	000c      	movs	r4, r1
 801c50a:	9004      	str	r0, [sp, #16]
 801c50c:	9105      	str	r1, [sp, #20]
 801c50e:	9306      	str	r3, [sp, #24]
 801c510:	9407      	str	r4, [sp, #28]
 801c512:	0002      	movs	r2, r0
 801c514:	000b      	movs	r3, r1
 801c516:	0030      	movs	r0, r6
 801c518:	0039      	movs	r1, r7
 801c51a:	f7f1 fb7d 	bl	800dc18 <__aeabi_dadd>
 801c51e:	4b14      	ldr	r3, [pc, #80]	; (801c570 <__ieee754_pow+0x3fc>)
 801c520:	0005      	movs	r5, r0
 801c522:	000c      	movs	r4, r1
 801c524:	9108      	str	r1, [sp, #32]
 801c526:	4299      	cmp	r1, r3
 801c528:	dc00      	bgt.n	801c52c <__ieee754_pow+0x3b8>
 801c52a:	e2d4      	b.n	801cad6 <__ieee754_pow+0x962>
 801c52c:	4b11      	ldr	r3, [pc, #68]	; (801c574 <__ieee754_pow+0x400>)
 801c52e:	18cb      	adds	r3, r1, r3
 801c530:	4303      	orrs	r3, r0
 801c532:	d100      	bne.n	801c536 <__ieee754_pow+0x3c2>
 801c534:	e1d6      	b.n	801c8e4 <__ieee754_pow+0x770>
 801c536:	9800      	ldr	r0, [sp, #0]
 801c538:	9901      	ldr	r1, [sp, #4]
 801c53a:	2300      	movs	r3, #0
 801c53c:	2200      	movs	r2, #0
 801c53e:	f7f0 fb87 	bl	800cc50 <__aeabi_dcmplt>
 801c542:	1e43      	subs	r3, r0, #1
 801c544:	4198      	sbcs	r0, r3
 801c546:	e72f      	b.n	801c3a8 <__ieee754_pow+0x234>
 801c548:	3ff00000 	.word	0x3ff00000
 801c54c:	3ff71547 	.word	0x3ff71547
 801c550:	f85ddf44 	.word	0xf85ddf44
 801c554:	3e54ae0b 	.word	0x3e54ae0b
 801c558:	3fd00000 	.word	0x3fd00000
 801c55c:	55555555 	.word	0x55555555
 801c560:	3fd55555 	.word	0x3fd55555
 801c564:	3fe00000 	.word	0x3fe00000
 801c568:	652b82fe 	.word	0x652b82fe
 801c56c:	bff00000 	.word	0xbff00000
 801c570:	408fffff 	.word	0x408fffff
 801c574:	bf700000 	.word	0xbf700000
 801c578:	4bbf      	ldr	r3, [pc, #764]	; (801c878 <__ieee754_pow+0x704>)
 801c57a:	2200      	movs	r2, #0
 801c57c:	422b      	tst	r3, r5
 801c57e:	d10a      	bne.n	801c596 <__ieee754_pow+0x422>
 801c580:	9800      	ldr	r0, [sp, #0]
 801c582:	9901      	ldr	r1, [sp, #4]
 801c584:	2200      	movs	r2, #0
 801c586:	4bbd      	ldr	r3, [pc, #756]	; (801c87c <__ieee754_pow+0x708>)
 801c588:	f7f2 faa0 	bl	800eacc <__aeabi_dmul>
 801c58c:	2235      	movs	r2, #53	; 0x35
 801c58e:	9000      	str	r0, [sp, #0]
 801c590:	9101      	str	r1, [sp, #4]
 801c592:	9c01      	ldr	r4, [sp, #4]
 801c594:	4252      	negs	r2, r2
 801c596:	49ba      	ldr	r1, [pc, #744]	; (801c880 <__ieee754_pow+0x70c>)
 801c598:	1523      	asrs	r3, r4, #20
 801c59a:	185b      	adds	r3, r3, r1
 801c59c:	189b      	adds	r3, r3, r2
 801c59e:	0324      	lsls	r4, r4, #12
 801c5a0:	4db8      	ldr	r5, [pc, #736]	; (801c884 <__ieee754_pow+0x710>)
 801c5a2:	930d      	str	r3, [sp, #52]	; 0x34
 801c5a4:	4bb8      	ldr	r3, [pc, #736]	; (801c888 <__ieee754_pow+0x714>)
 801c5a6:	0b22      	lsrs	r2, r4, #12
 801c5a8:	4315      	orrs	r5, r2
 801c5aa:	2400      	movs	r4, #0
 801c5ac:	429a      	cmp	r2, r3
 801c5ae:	dd09      	ble.n	801c5c4 <__ieee754_pow+0x450>
 801c5b0:	4bb6      	ldr	r3, [pc, #728]	; (801c88c <__ieee754_pow+0x718>)
 801c5b2:	3401      	adds	r4, #1
 801c5b4:	429a      	cmp	r2, r3
 801c5b6:	dd05      	ble.n	801c5c4 <__ieee754_pow+0x450>
 801c5b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c5ba:	191b      	adds	r3, r3, r4
 801c5bc:	2400      	movs	r4, #0
 801c5be:	930d      	str	r3, [sp, #52]	; 0x34
 801c5c0:	4bb3      	ldr	r3, [pc, #716]	; (801c890 <__ieee754_pow+0x71c>)
 801c5c2:	18ed      	adds	r5, r5, r3
 801c5c4:	4bb3      	ldr	r3, [pc, #716]	; (801c894 <__ieee754_pow+0x720>)
 801c5c6:	00e2      	lsls	r2, r4, #3
 801c5c8:	189b      	adds	r3, r3, r2
 801c5ca:	9800      	ldr	r0, [sp, #0]
 801c5cc:	9901      	ldr	r1, [sp, #4]
 801c5ce:	920f      	str	r2, [sp, #60]	; 0x3c
 801c5d0:	0029      	movs	r1, r5
 801c5d2:	681a      	ldr	r2, [r3, #0]
 801c5d4:	685b      	ldr	r3, [r3, #4]
 801c5d6:	0006      	movs	r6, r0
 801c5d8:	920a      	str	r2, [sp, #40]	; 0x28
 801c5da:	930b      	str	r3, [sp, #44]	; 0x2c
 801c5dc:	f7f2 fd38 	bl	800f050 <__aeabi_dsub>
 801c5e0:	0032      	movs	r2, r6
 801c5e2:	002b      	movs	r3, r5
 801c5e4:	9010      	str	r0, [sp, #64]	; 0x40
 801c5e6:	9111      	str	r1, [sp, #68]	; 0x44
 801c5e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c5ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c5ec:	f7f1 fb14 	bl	800dc18 <__aeabi_dadd>
 801c5f0:	0002      	movs	r2, r0
 801c5f2:	000b      	movs	r3, r1
 801c5f4:	2000      	movs	r0, #0
 801c5f6:	49a3      	ldr	r1, [pc, #652]	; (801c884 <__ieee754_pow+0x710>)
 801c5f8:	f7f1 fe6e 	bl	800e2d8 <__aeabi_ddiv>
 801c5fc:	0002      	movs	r2, r0
 801c5fe:	000b      	movs	r3, r1
 801c600:	9012      	str	r0, [sp, #72]	; 0x48
 801c602:	9113      	str	r1, [sp, #76]	; 0x4c
 801c604:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c606:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c608:	f7f2 fa60 	bl	800eacc <__aeabi_dmul>
 801c60c:	9008      	str	r0, [sp, #32]
 801c60e:	9109      	str	r1, [sp, #36]	; 0x24
 801c610:	9a08      	ldr	r2, [sp, #32]
 801c612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c614:	9204      	str	r2, [sp, #16]
 801c616:	9305      	str	r3, [sp, #20]
 801c618:	2300      	movs	r3, #0
 801c61a:	2180      	movs	r1, #128	; 0x80
 801c61c:	2080      	movs	r0, #128	; 0x80
 801c61e:	9304      	str	r3, [sp, #16]
 801c620:	9a04      	ldr	r2, [sp, #16]
 801c622:	9b05      	ldr	r3, [sp, #20]
 801c624:	9200      	str	r2, [sp, #0]
 801c626:	9301      	str	r3, [sp, #4]
 801c628:	2200      	movs	r2, #0
 801c62a:	002f      	movs	r7, r5
 801c62c:	0589      	lsls	r1, r1, #22
 801c62e:	106d      	asrs	r5, r5, #1
 801c630:	4329      	orrs	r1, r5
 801c632:	0300      	lsls	r0, r0, #12
 801c634:	1809      	adds	r1, r1, r0
 801c636:	04a0      	lsls	r0, r4, #18
 801c638:	180b      	adds	r3, r1, r0
 801c63a:	9800      	ldr	r0, [sp, #0]
 801c63c:	9901      	ldr	r1, [sp, #4]
 801c63e:	0014      	movs	r4, r2
 801c640:	001d      	movs	r5, r3
 801c642:	f7f2 fa43 	bl	800eacc <__aeabi_dmul>
 801c646:	0002      	movs	r2, r0
 801c648:	000b      	movs	r3, r1
 801c64a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c64c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c64e:	f7f2 fcff 	bl	800f050 <__aeabi_dsub>
 801c652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c654:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c656:	9010      	str	r0, [sp, #64]	; 0x40
 801c658:	9111      	str	r1, [sp, #68]	; 0x44
 801c65a:	0020      	movs	r0, r4
 801c65c:	0029      	movs	r1, r5
 801c65e:	f7f2 fcf7 	bl	800f050 <__aeabi_dsub>
 801c662:	0002      	movs	r2, r0
 801c664:	000b      	movs	r3, r1
 801c666:	0030      	movs	r0, r6
 801c668:	0039      	movs	r1, r7
 801c66a:	f7f2 fcf1 	bl	800f050 <__aeabi_dsub>
 801c66e:	9a00      	ldr	r2, [sp, #0]
 801c670:	9b01      	ldr	r3, [sp, #4]
 801c672:	f7f2 fa2b 	bl	800eacc <__aeabi_dmul>
 801c676:	0002      	movs	r2, r0
 801c678:	000b      	movs	r3, r1
 801c67a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c67c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c67e:	f7f2 fce7 	bl	800f050 <__aeabi_dsub>
 801c682:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c686:	f7f2 fa21 	bl	800eacc <__aeabi_dmul>
 801c68a:	9a08      	ldr	r2, [sp, #32]
 801c68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c68e:	900a      	str	r0, [sp, #40]	; 0x28
 801c690:	910b      	str	r1, [sp, #44]	; 0x2c
 801c692:	0010      	movs	r0, r2
 801c694:	0019      	movs	r1, r3
 801c696:	f7f2 fa19 	bl	800eacc <__aeabi_dmul>
 801c69a:	0006      	movs	r6, r0
 801c69c:	000f      	movs	r7, r1
 801c69e:	4a7e      	ldr	r2, [pc, #504]	; (801c898 <__ieee754_pow+0x724>)
 801c6a0:	4b7e      	ldr	r3, [pc, #504]	; (801c89c <__ieee754_pow+0x728>)
 801c6a2:	f7f2 fa13 	bl	800eacc <__aeabi_dmul>
 801c6a6:	4a7e      	ldr	r2, [pc, #504]	; (801c8a0 <__ieee754_pow+0x72c>)
 801c6a8:	4b7e      	ldr	r3, [pc, #504]	; (801c8a4 <__ieee754_pow+0x730>)
 801c6aa:	f7f1 fab5 	bl	800dc18 <__aeabi_dadd>
 801c6ae:	0032      	movs	r2, r6
 801c6b0:	003b      	movs	r3, r7
 801c6b2:	f7f2 fa0b 	bl	800eacc <__aeabi_dmul>
 801c6b6:	4a7c      	ldr	r2, [pc, #496]	; (801c8a8 <__ieee754_pow+0x734>)
 801c6b8:	4b7c      	ldr	r3, [pc, #496]	; (801c8ac <__ieee754_pow+0x738>)
 801c6ba:	f7f1 faad 	bl	800dc18 <__aeabi_dadd>
 801c6be:	0032      	movs	r2, r6
 801c6c0:	003b      	movs	r3, r7
 801c6c2:	f7f2 fa03 	bl	800eacc <__aeabi_dmul>
 801c6c6:	4a7a      	ldr	r2, [pc, #488]	; (801c8b0 <__ieee754_pow+0x73c>)
 801c6c8:	4b7a      	ldr	r3, [pc, #488]	; (801c8b4 <__ieee754_pow+0x740>)
 801c6ca:	f7f1 faa5 	bl	800dc18 <__aeabi_dadd>
 801c6ce:	0032      	movs	r2, r6
 801c6d0:	003b      	movs	r3, r7
 801c6d2:	f7f2 f9fb 	bl	800eacc <__aeabi_dmul>
 801c6d6:	4a78      	ldr	r2, [pc, #480]	; (801c8b8 <__ieee754_pow+0x744>)
 801c6d8:	4b78      	ldr	r3, [pc, #480]	; (801c8bc <__ieee754_pow+0x748>)
 801c6da:	f7f1 fa9d 	bl	800dc18 <__aeabi_dadd>
 801c6de:	0032      	movs	r2, r6
 801c6e0:	003b      	movs	r3, r7
 801c6e2:	f7f2 f9f3 	bl	800eacc <__aeabi_dmul>
 801c6e6:	4a76      	ldr	r2, [pc, #472]	; (801c8c0 <__ieee754_pow+0x74c>)
 801c6e8:	4b76      	ldr	r3, [pc, #472]	; (801c8c4 <__ieee754_pow+0x750>)
 801c6ea:	f7f1 fa95 	bl	800dc18 <__aeabi_dadd>
 801c6ee:	0032      	movs	r2, r6
 801c6f0:	0004      	movs	r4, r0
 801c6f2:	000d      	movs	r5, r1
 801c6f4:	003b      	movs	r3, r7
 801c6f6:	0030      	movs	r0, r6
 801c6f8:	0039      	movs	r1, r7
 801c6fa:	f7f2 f9e7 	bl	800eacc <__aeabi_dmul>
 801c6fe:	0002      	movs	r2, r0
 801c700:	000b      	movs	r3, r1
 801c702:	0020      	movs	r0, r4
 801c704:	0029      	movs	r1, r5
 801c706:	f7f2 f9e1 	bl	800eacc <__aeabi_dmul>
 801c70a:	9a00      	ldr	r2, [sp, #0]
 801c70c:	9b01      	ldr	r3, [sp, #4]
 801c70e:	0004      	movs	r4, r0
 801c710:	000d      	movs	r5, r1
 801c712:	9808      	ldr	r0, [sp, #32]
 801c714:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c716:	f7f1 fa7f 	bl	800dc18 <__aeabi_dadd>
 801c71a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c71e:	f7f2 f9d5 	bl	800eacc <__aeabi_dmul>
 801c722:	0022      	movs	r2, r4
 801c724:	002b      	movs	r3, r5
 801c726:	f7f1 fa77 	bl	800dc18 <__aeabi_dadd>
 801c72a:	9a00      	ldr	r2, [sp, #0]
 801c72c:	9b01      	ldr	r3, [sp, #4]
 801c72e:	9010      	str	r0, [sp, #64]	; 0x40
 801c730:	9111      	str	r1, [sp, #68]	; 0x44
 801c732:	0010      	movs	r0, r2
 801c734:	0019      	movs	r1, r3
 801c736:	f7f2 f9c9 	bl	800eacc <__aeabi_dmul>
 801c73a:	2200      	movs	r2, #0
 801c73c:	4b62      	ldr	r3, [pc, #392]	; (801c8c8 <__ieee754_pow+0x754>)
 801c73e:	0004      	movs	r4, r0
 801c740:	000d      	movs	r5, r1
 801c742:	f7f1 fa69 	bl	800dc18 <__aeabi_dadd>
 801c746:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c74a:	f7f1 fa65 	bl	800dc18 <__aeabi_dadd>
 801c74e:	2000      	movs	r0, #0
 801c750:	000f      	movs	r7, r1
 801c752:	0006      	movs	r6, r0
 801c754:	0002      	movs	r2, r0
 801c756:	000b      	movs	r3, r1
 801c758:	9800      	ldr	r0, [sp, #0]
 801c75a:	9901      	ldr	r1, [sp, #4]
 801c75c:	f7f2 f9b6 	bl	800eacc <__aeabi_dmul>
 801c760:	2200      	movs	r2, #0
 801c762:	9000      	str	r0, [sp, #0]
 801c764:	9101      	str	r1, [sp, #4]
 801c766:	4b58      	ldr	r3, [pc, #352]	; (801c8c8 <__ieee754_pow+0x754>)
 801c768:	0030      	movs	r0, r6
 801c76a:	0039      	movs	r1, r7
 801c76c:	f7f2 fc70 	bl	800f050 <__aeabi_dsub>
 801c770:	0022      	movs	r2, r4
 801c772:	002b      	movs	r3, r5
 801c774:	f7f2 fc6c 	bl	800f050 <__aeabi_dsub>
 801c778:	0002      	movs	r2, r0
 801c77a:	000b      	movs	r3, r1
 801c77c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c77e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c780:	f7f2 fc66 	bl	800f050 <__aeabi_dsub>
 801c784:	9a08      	ldr	r2, [sp, #32]
 801c786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c788:	f7f2 f9a0 	bl	800eacc <__aeabi_dmul>
 801c78c:	0032      	movs	r2, r6
 801c78e:	0004      	movs	r4, r0
 801c790:	000d      	movs	r5, r1
 801c792:	980a      	ldr	r0, [sp, #40]	; 0x28
 801c794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c796:	003b      	movs	r3, r7
 801c798:	f7f2 f998 	bl	800eacc <__aeabi_dmul>
 801c79c:	0002      	movs	r2, r0
 801c79e:	000b      	movs	r3, r1
 801c7a0:	0020      	movs	r0, r4
 801c7a2:	0029      	movs	r1, r5
 801c7a4:	f7f1 fa38 	bl	800dc18 <__aeabi_dadd>
 801c7a8:	0004      	movs	r4, r0
 801c7aa:	000d      	movs	r5, r1
 801c7ac:	0002      	movs	r2, r0
 801c7ae:	000b      	movs	r3, r1
 801c7b0:	9800      	ldr	r0, [sp, #0]
 801c7b2:	9901      	ldr	r1, [sp, #4]
 801c7b4:	f7f1 fa30 	bl	800dc18 <__aeabi_dadd>
 801c7b8:	22e0      	movs	r2, #224	; 0xe0
 801c7ba:	2000      	movs	r0, #0
 801c7bc:	4b43      	ldr	r3, [pc, #268]	; (801c8cc <__ieee754_pow+0x758>)
 801c7be:	0612      	lsls	r2, r2, #24
 801c7c0:	0006      	movs	r6, r0
 801c7c2:	000f      	movs	r7, r1
 801c7c4:	f7f2 f982 	bl	800eacc <__aeabi_dmul>
 801c7c8:	9008      	str	r0, [sp, #32]
 801c7ca:	9109      	str	r1, [sp, #36]	; 0x24
 801c7cc:	9a00      	ldr	r2, [sp, #0]
 801c7ce:	9b01      	ldr	r3, [sp, #4]
 801c7d0:	0030      	movs	r0, r6
 801c7d2:	0039      	movs	r1, r7
 801c7d4:	f7f2 fc3c 	bl	800f050 <__aeabi_dsub>
 801c7d8:	0002      	movs	r2, r0
 801c7da:	000b      	movs	r3, r1
 801c7dc:	0020      	movs	r0, r4
 801c7de:	0029      	movs	r1, r5
 801c7e0:	f7f2 fc36 	bl	800f050 <__aeabi_dsub>
 801c7e4:	4a3a      	ldr	r2, [pc, #232]	; (801c8d0 <__ieee754_pow+0x75c>)
 801c7e6:	4b39      	ldr	r3, [pc, #228]	; (801c8cc <__ieee754_pow+0x758>)
 801c7e8:	f7f2 f970 	bl	800eacc <__aeabi_dmul>
 801c7ec:	4a39      	ldr	r2, [pc, #228]	; (801c8d4 <__ieee754_pow+0x760>)
 801c7ee:	0004      	movs	r4, r0
 801c7f0:	000d      	movs	r5, r1
 801c7f2:	0030      	movs	r0, r6
 801c7f4:	0039      	movs	r1, r7
 801c7f6:	4b38      	ldr	r3, [pc, #224]	; (801c8d8 <__ieee754_pow+0x764>)
 801c7f8:	f7f2 f968 	bl	800eacc <__aeabi_dmul>
 801c7fc:	0002      	movs	r2, r0
 801c7fe:	000b      	movs	r3, r1
 801c800:	0020      	movs	r0, r4
 801c802:	0029      	movs	r1, r5
 801c804:	f7f1 fa08 	bl	800dc18 <__aeabi_dadd>
 801c808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c80a:	4b34      	ldr	r3, [pc, #208]	; (801c8dc <__ieee754_pow+0x768>)
 801c80c:	189b      	adds	r3, r3, r2
 801c80e:	681a      	ldr	r2, [r3, #0]
 801c810:	685b      	ldr	r3, [r3, #4]
 801c812:	f7f1 fa01 	bl	800dc18 <__aeabi_dadd>
 801c816:	9000      	str	r0, [sp, #0]
 801c818:	9101      	str	r1, [sp, #4]
 801c81a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c81c:	f7f2 ffee 	bl	800f7fc <__aeabi_i2d>
 801c820:	0004      	movs	r4, r0
 801c822:	000d      	movs	r5, r1
 801c824:	9808      	ldr	r0, [sp, #32]
 801c826:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c82a:	4b2d      	ldr	r3, [pc, #180]	; (801c8e0 <__ieee754_pow+0x76c>)
 801c82c:	189b      	adds	r3, r3, r2
 801c82e:	681e      	ldr	r6, [r3, #0]
 801c830:	685f      	ldr	r7, [r3, #4]
 801c832:	9a00      	ldr	r2, [sp, #0]
 801c834:	9b01      	ldr	r3, [sp, #4]
 801c836:	f7f1 f9ef 	bl	800dc18 <__aeabi_dadd>
 801c83a:	0032      	movs	r2, r6
 801c83c:	003b      	movs	r3, r7
 801c83e:	f7f1 f9eb 	bl	800dc18 <__aeabi_dadd>
 801c842:	0022      	movs	r2, r4
 801c844:	002b      	movs	r3, r5
 801c846:	f7f1 f9e7 	bl	800dc18 <__aeabi_dadd>
 801c84a:	2000      	movs	r0, #0
 801c84c:	0022      	movs	r2, r4
 801c84e:	002b      	movs	r3, r5
 801c850:	9004      	str	r0, [sp, #16]
 801c852:	9105      	str	r1, [sp, #20]
 801c854:	f7f2 fbfc 	bl	800f050 <__aeabi_dsub>
 801c858:	0032      	movs	r2, r6
 801c85a:	003b      	movs	r3, r7
 801c85c:	f7f2 fbf8 	bl	800f050 <__aeabi_dsub>
 801c860:	9a08      	ldr	r2, [sp, #32]
 801c862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c864:	f7f2 fbf4 	bl	800f050 <__aeabi_dsub>
 801c868:	0002      	movs	r2, r0
 801c86a:	000b      	movs	r3, r1
 801c86c:	9800      	ldr	r0, [sp, #0]
 801c86e:	9901      	ldr	r1, [sp, #4]
 801c870:	e618      	b.n	801c4a4 <__ieee754_pow+0x330>
 801c872:	2300      	movs	r3, #0
 801c874:	4c03      	ldr	r4, [pc, #12]	; (801c884 <__ieee754_pow+0x710>)
 801c876:	e621      	b.n	801c4bc <__ieee754_pow+0x348>
 801c878:	7ff00000 	.word	0x7ff00000
 801c87c:	43400000 	.word	0x43400000
 801c880:	fffffc01 	.word	0xfffffc01
 801c884:	3ff00000 	.word	0x3ff00000
 801c888:	0003988e 	.word	0x0003988e
 801c88c:	000bb679 	.word	0x000bb679
 801c890:	fff00000 	.word	0xfff00000
 801c894:	0801e648 	.word	0x0801e648
 801c898:	4a454eef 	.word	0x4a454eef
 801c89c:	3fca7e28 	.word	0x3fca7e28
 801c8a0:	93c9db65 	.word	0x93c9db65
 801c8a4:	3fcd864a 	.word	0x3fcd864a
 801c8a8:	a91d4101 	.word	0xa91d4101
 801c8ac:	3fd17460 	.word	0x3fd17460
 801c8b0:	518f264d 	.word	0x518f264d
 801c8b4:	3fd55555 	.word	0x3fd55555
 801c8b8:	db6fabff 	.word	0xdb6fabff
 801c8bc:	3fdb6db6 	.word	0x3fdb6db6
 801c8c0:	33333303 	.word	0x33333303
 801c8c4:	3fe33333 	.word	0x3fe33333
 801c8c8:	40080000 	.word	0x40080000
 801c8cc:	3feec709 	.word	0x3feec709
 801c8d0:	dc3a03fd 	.word	0xdc3a03fd
 801c8d4:	145b01f5 	.word	0x145b01f5
 801c8d8:	be3e2fe0 	.word	0xbe3e2fe0
 801c8dc:	0801e668 	.word	0x0801e668
 801c8e0:	0801e658 	.word	0x0801e658
 801c8e4:	4a90      	ldr	r2, [pc, #576]	; (801cb28 <__ieee754_pow+0x9b4>)
 801c8e6:	4b91      	ldr	r3, [pc, #580]	; (801cb2c <__ieee754_pow+0x9b8>)
 801c8e8:	0030      	movs	r0, r6
 801c8ea:	0039      	movs	r1, r7
 801c8ec:	f7f1 f994 	bl	800dc18 <__aeabi_dadd>
 801c8f0:	9a04      	ldr	r2, [sp, #16]
 801c8f2:	9b05      	ldr	r3, [sp, #20]
 801c8f4:	9002      	str	r0, [sp, #8]
 801c8f6:	9103      	str	r1, [sp, #12]
 801c8f8:	0028      	movs	r0, r5
 801c8fa:	0021      	movs	r1, r4
 801c8fc:	f7f2 fba8 	bl	800f050 <__aeabi_dsub>
 801c900:	0002      	movs	r2, r0
 801c902:	000b      	movs	r3, r1
 801c904:	9802      	ldr	r0, [sp, #8]
 801c906:	9903      	ldr	r1, [sp, #12]
 801c908:	f7f0 f9b6 	bl	800cc78 <__aeabi_dcmpgt>
 801c90c:	2800      	cmp	r0, #0
 801c90e:	d000      	beq.n	801c912 <__ieee754_pow+0x79e>
 801c910:	e611      	b.n	801c536 <__ieee754_pow+0x3c2>
 801c912:	2100      	movs	r1, #0
 801c914:	4a86      	ldr	r2, [pc, #536]	; (801cb30 <__ieee754_pow+0x9bc>)
 801c916:	0063      	lsls	r3, r4, #1
 801c918:	085b      	lsrs	r3, r3, #1
 801c91a:	9102      	str	r1, [sp, #8]
 801c91c:	4293      	cmp	r3, r2
 801c91e:	dd25      	ble.n	801c96c <__ieee754_pow+0x7f8>
 801c920:	4a84      	ldr	r2, [pc, #528]	; (801cb34 <__ieee754_pow+0x9c0>)
 801c922:	151b      	asrs	r3, r3, #20
 801c924:	189b      	adds	r3, r3, r2
 801c926:	2280      	movs	r2, #128	; 0x80
 801c928:	0352      	lsls	r2, r2, #13
 801c92a:	0011      	movs	r1, r2
 801c92c:	4119      	asrs	r1, r3
 801c92e:	190b      	adds	r3, r1, r4
 801c930:	005c      	lsls	r4, r3, #1
 801c932:	4981      	ldr	r1, [pc, #516]	; (801cb38 <__ieee754_pow+0x9c4>)
 801c934:	4d81      	ldr	r5, [pc, #516]	; (801cb3c <__ieee754_pow+0x9c8>)
 801c936:	0d64      	lsrs	r4, r4, #21
 801c938:	1864      	adds	r4, r4, r1
 801c93a:	4125      	asrs	r5, r4
 801c93c:	401d      	ands	r5, r3
 801c93e:	031b      	lsls	r3, r3, #12
 801c940:	0b1b      	lsrs	r3, r3, #12
 801c942:	4313      	orrs	r3, r2
 801c944:	2214      	movs	r2, #20
 801c946:	1b12      	subs	r2, r2, r4
 801c948:	4113      	asrs	r3, r2
 801c94a:	9302      	str	r3, [sp, #8]
 801c94c:	9b08      	ldr	r3, [sp, #32]
 801c94e:	2000      	movs	r0, #0
 801c950:	0029      	movs	r1, r5
 801c952:	2b00      	cmp	r3, #0
 801c954:	da02      	bge.n	801c95c <__ieee754_pow+0x7e8>
 801c956:	9b02      	ldr	r3, [sp, #8]
 801c958:	425b      	negs	r3, r3
 801c95a:	9302      	str	r3, [sp, #8]
 801c95c:	0002      	movs	r2, r0
 801c95e:	000b      	movs	r3, r1
 801c960:	9804      	ldr	r0, [sp, #16]
 801c962:	9905      	ldr	r1, [sp, #20]
 801c964:	f7f2 fb74 	bl	800f050 <__aeabi_dsub>
 801c968:	9006      	str	r0, [sp, #24]
 801c96a:	9107      	str	r1, [sp, #28]
 801c96c:	9806      	ldr	r0, [sp, #24]
 801c96e:	9907      	ldr	r1, [sp, #28]
 801c970:	0032      	movs	r2, r6
 801c972:	003b      	movs	r3, r7
 801c974:	f7f1 f950 	bl	800dc18 <__aeabi_dadd>
 801c978:	2000      	movs	r0, #0
 801c97a:	2200      	movs	r2, #0
 801c97c:	4b70      	ldr	r3, [pc, #448]	; (801cb40 <__ieee754_pow+0x9cc>)
 801c97e:	9004      	str	r0, [sp, #16]
 801c980:	9105      	str	r1, [sp, #20]
 801c982:	f7f2 f8a3 	bl	800eacc <__aeabi_dmul>
 801c986:	9a06      	ldr	r2, [sp, #24]
 801c988:	9b07      	ldr	r3, [sp, #28]
 801c98a:	9008      	str	r0, [sp, #32]
 801c98c:	9109      	str	r1, [sp, #36]	; 0x24
 801c98e:	9804      	ldr	r0, [sp, #16]
 801c990:	9905      	ldr	r1, [sp, #20]
 801c992:	f7f2 fb5d 	bl	800f050 <__aeabi_dsub>
 801c996:	0002      	movs	r2, r0
 801c998:	000b      	movs	r3, r1
 801c99a:	0030      	movs	r0, r6
 801c99c:	0039      	movs	r1, r7
 801c99e:	f7f2 fb57 	bl	800f050 <__aeabi_dsub>
 801c9a2:	4a68      	ldr	r2, [pc, #416]	; (801cb44 <__ieee754_pow+0x9d0>)
 801c9a4:	4b68      	ldr	r3, [pc, #416]	; (801cb48 <__ieee754_pow+0x9d4>)
 801c9a6:	f7f2 f891 	bl	800eacc <__aeabi_dmul>
 801c9aa:	4a68      	ldr	r2, [pc, #416]	; (801cb4c <__ieee754_pow+0x9d8>)
 801c9ac:	0004      	movs	r4, r0
 801c9ae:	000d      	movs	r5, r1
 801c9b0:	9804      	ldr	r0, [sp, #16]
 801c9b2:	9905      	ldr	r1, [sp, #20]
 801c9b4:	4b66      	ldr	r3, [pc, #408]	; (801cb50 <__ieee754_pow+0x9dc>)
 801c9b6:	f7f2 f889 	bl	800eacc <__aeabi_dmul>
 801c9ba:	0002      	movs	r2, r0
 801c9bc:	000b      	movs	r3, r1
 801c9be:	0020      	movs	r0, r4
 801c9c0:	0029      	movs	r1, r5
 801c9c2:	f7f1 f929 	bl	800dc18 <__aeabi_dadd>
 801c9c6:	0004      	movs	r4, r0
 801c9c8:	000d      	movs	r5, r1
 801c9ca:	0002      	movs	r2, r0
 801c9cc:	000b      	movs	r3, r1
 801c9ce:	9808      	ldr	r0, [sp, #32]
 801c9d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c9d2:	f7f1 f921 	bl	800dc18 <__aeabi_dadd>
 801c9d6:	9a08      	ldr	r2, [sp, #32]
 801c9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9da:	0006      	movs	r6, r0
 801c9dc:	000f      	movs	r7, r1
 801c9de:	f7f2 fb37 	bl	800f050 <__aeabi_dsub>
 801c9e2:	0002      	movs	r2, r0
 801c9e4:	000b      	movs	r3, r1
 801c9e6:	0020      	movs	r0, r4
 801c9e8:	0029      	movs	r1, r5
 801c9ea:	f7f2 fb31 	bl	800f050 <__aeabi_dsub>
 801c9ee:	0032      	movs	r2, r6
 801c9f0:	9004      	str	r0, [sp, #16]
 801c9f2:	9105      	str	r1, [sp, #20]
 801c9f4:	003b      	movs	r3, r7
 801c9f6:	0030      	movs	r0, r6
 801c9f8:	0039      	movs	r1, r7
 801c9fa:	f7f2 f867 	bl	800eacc <__aeabi_dmul>
 801c9fe:	0004      	movs	r4, r0
 801ca00:	000d      	movs	r5, r1
 801ca02:	4a54      	ldr	r2, [pc, #336]	; (801cb54 <__ieee754_pow+0x9e0>)
 801ca04:	4b54      	ldr	r3, [pc, #336]	; (801cb58 <__ieee754_pow+0x9e4>)
 801ca06:	f7f2 f861 	bl	800eacc <__aeabi_dmul>
 801ca0a:	4a54      	ldr	r2, [pc, #336]	; (801cb5c <__ieee754_pow+0x9e8>)
 801ca0c:	4b54      	ldr	r3, [pc, #336]	; (801cb60 <__ieee754_pow+0x9ec>)
 801ca0e:	f7f2 fb1f 	bl	800f050 <__aeabi_dsub>
 801ca12:	0022      	movs	r2, r4
 801ca14:	002b      	movs	r3, r5
 801ca16:	f7f2 f859 	bl	800eacc <__aeabi_dmul>
 801ca1a:	4a52      	ldr	r2, [pc, #328]	; (801cb64 <__ieee754_pow+0x9f0>)
 801ca1c:	4b52      	ldr	r3, [pc, #328]	; (801cb68 <__ieee754_pow+0x9f4>)
 801ca1e:	f7f1 f8fb 	bl	800dc18 <__aeabi_dadd>
 801ca22:	0022      	movs	r2, r4
 801ca24:	002b      	movs	r3, r5
 801ca26:	f7f2 f851 	bl	800eacc <__aeabi_dmul>
 801ca2a:	4a50      	ldr	r2, [pc, #320]	; (801cb6c <__ieee754_pow+0x9f8>)
 801ca2c:	4b50      	ldr	r3, [pc, #320]	; (801cb70 <__ieee754_pow+0x9fc>)
 801ca2e:	f7f2 fb0f 	bl	800f050 <__aeabi_dsub>
 801ca32:	0022      	movs	r2, r4
 801ca34:	002b      	movs	r3, r5
 801ca36:	f7f2 f849 	bl	800eacc <__aeabi_dmul>
 801ca3a:	4a4e      	ldr	r2, [pc, #312]	; (801cb74 <__ieee754_pow+0xa00>)
 801ca3c:	4b4e      	ldr	r3, [pc, #312]	; (801cb78 <__ieee754_pow+0xa04>)
 801ca3e:	f7f1 f8eb 	bl	800dc18 <__aeabi_dadd>
 801ca42:	0022      	movs	r2, r4
 801ca44:	002b      	movs	r3, r5
 801ca46:	f7f2 f841 	bl	800eacc <__aeabi_dmul>
 801ca4a:	0002      	movs	r2, r0
 801ca4c:	000b      	movs	r3, r1
 801ca4e:	0030      	movs	r0, r6
 801ca50:	0039      	movs	r1, r7
 801ca52:	f7f2 fafd 	bl	800f050 <__aeabi_dsub>
 801ca56:	0004      	movs	r4, r0
 801ca58:	000d      	movs	r5, r1
 801ca5a:	0002      	movs	r2, r0
 801ca5c:	000b      	movs	r3, r1
 801ca5e:	0030      	movs	r0, r6
 801ca60:	0039      	movs	r1, r7
 801ca62:	f7f2 f833 	bl	800eacc <__aeabi_dmul>
 801ca66:	2380      	movs	r3, #128	; 0x80
 801ca68:	9006      	str	r0, [sp, #24]
 801ca6a:	9107      	str	r1, [sp, #28]
 801ca6c:	2200      	movs	r2, #0
 801ca6e:	0020      	movs	r0, r4
 801ca70:	0029      	movs	r1, r5
 801ca72:	05db      	lsls	r3, r3, #23
 801ca74:	f7f2 faec 	bl	800f050 <__aeabi_dsub>
 801ca78:	0002      	movs	r2, r0
 801ca7a:	000b      	movs	r3, r1
 801ca7c:	9806      	ldr	r0, [sp, #24]
 801ca7e:	9907      	ldr	r1, [sp, #28]
 801ca80:	f7f1 fc2a 	bl	800e2d8 <__aeabi_ddiv>
 801ca84:	9a04      	ldr	r2, [sp, #16]
 801ca86:	9b05      	ldr	r3, [sp, #20]
 801ca88:	0004      	movs	r4, r0
 801ca8a:	000d      	movs	r5, r1
 801ca8c:	0030      	movs	r0, r6
 801ca8e:	0039      	movs	r1, r7
 801ca90:	f7f2 f81c 	bl	800eacc <__aeabi_dmul>
 801ca94:	9a04      	ldr	r2, [sp, #16]
 801ca96:	9b05      	ldr	r3, [sp, #20]
 801ca98:	f7f1 f8be 	bl	800dc18 <__aeabi_dadd>
 801ca9c:	0002      	movs	r2, r0
 801ca9e:	000b      	movs	r3, r1
 801caa0:	0020      	movs	r0, r4
 801caa2:	0029      	movs	r1, r5
 801caa4:	f7f2 fad4 	bl	800f050 <__aeabi_dsub>
 801caa8:	0032      	movs	r2, r6
 801caaa:	003b      	movs	r3, r7
 801caac:	f7f2 fad0 	bl	800f050 <__aeabi_dsub>
 801cab0:	0002      	movs	r2, r0
 801cab2:	000b      	movs	r3, r1
 801cab4:	2000      	movs	r0, #0
 801cab6:	4931      	ldr	r1, [pc, #196]	; (801cb7c <__ieee754_pow+0xa08>)
 801cab8:	f7f2 faca 	bl	800f050 <__aeabi_dsub>
 801cabc:	9b02      	ldr	r3, [sp, #8]
 801cabe:	051b      	lsls	r3, r3, #20
 801cac0:	185b      	adds	r3, r3, r1
 801cac2:	151a      	asrs	r2, r3, #20
 801cac4:	2a00      	cmp	r2, #0
 801cac6:	dc25      	bgt.n	801cb14 <__ieee754_pow+0x9a0>
 801cac8:	9a02      	ldr	r2, [sp, #8]
 801caca:	f000 f861 	bl	801cb90 <scalbn>
 801cace:	9a00      	ldr	r2, [sp, #0]
 801cad0:	9b01      	ldr	r3, [sp, #4]
 801cad2:	f7ff fc33 	bl	801c33c <__ieee754_pow+0x1c8>
 801cad6:	4a2a      	ldr	r2, [pc, #168]	; (801cb80 <__ieee754_pow+0xa0c>)
 801cad8:	004b      	lsls	r3, r1, #1
 801cada:	085b      	lsrs	r3, r3, #1
 801cadc:	4293      	cmp	r3, r2
 801cade:	dc00      	bgt.n	801cae2 <__ieee754_pow+0x96e>
 801cae0:	e717      	b.n	801c912 <__ieee754_pow+0x79e>
 801cae2:	4b28      	ldr	r3, [pc, #160]	; (801cb84 <__ieee754_pow+0xa10>)
 801cae4:	18cb      	adds	r3, r1, r3
 801cae6:	4303      	orrs	r3, r0
 801cae8:	d008      	beq.n	801cafc <__ieee754_pow+0x988>
 801caea:	9800      	ldr	r0, [sp, #0]
 801caec:	9901      	ldr	r1, [sp, #4]
 801caee:	2300      	movs	r3, #0
 801caf0:	2200      	movs	r2, #0
 801caf2:	f7f0 f8ad 	bl	800cc50 <__aeabi_dcmplt>
 801caf6:	1e43      	subs	r3, r0, #1
 801caf8:	4198      	sbcs	r0, r3
 801cafa:	e462      	b.n	801c3c2 <__ieee754_pow+0x24e>
 801cafc:	9a04      	ldr	r2, [sp, #16]
 801cafe:	9b05      	ldr	r3, [sp, #20]
 801cb00:	f7f2 faa6 	bl	800f050 <__aeabi_dsub>
 801cb04:	0032      	movs	r2, r6
 801cb06:	003b      	movs	r3, r7
 801cb08:	f7f0 f8c0 	bl	800cc8c <__aeabi_dcmpge>
 801cb0c:	2800      	cmp	r0, #0
 801cb0e:	d100      	bne.n	801cb12 <__ieee754_pow+0x99e>
 801cb10:	e6ff      	b.n	801c912 <__ieee754_pow+0x79e>
 801cb12:	e7ea      	b.n	801caea <__ieee754_pow+0x976>
 801cb14:	0019      	movs	r1, r3
 801cb16:	e7da      	b.n	801cace <__ieee754_pow+0x95a>
 801cb18:	2300      	movs	r3, #0
 801cb1a:	4c18      	ldr	r4, [pc, #96]	; (801cb7c <__ieee754_pow+0xa08>)
 801cb1c:	f7ff fbf1 	bl	801c302 <__ieee754_pow+0x18e>
 801cb20:	2300      	movs	r3, #0
 801cb22:	2400      	movs	r4, #0
 801cb24:	f7ff fbed 	bl	801c302 <__ieee754_pow+0x18e>
 801cb28:	652b82fe 	.word	0x652b82fe
 801cb2c:	3c971547 	.word	0x3c971547
 801cb30:	3fe00000 	.word	0x3fe00000
 801cb34:	fffffc02 	.word	0xfffffc02
 801cb38:	fffffc01 	.word	0xfffffc01
 801cb3c:	fff00000 	.word	0xfff00000
 801cb40:	3fe62e43 	.word	0x3fe62e43
 801cb44:	fefa39ef 	.word	0xfefa39ef
 801cb48:	3fe62e42 	.word	0x3fe62e42
 801cb4c:	0ca86c39 	.word	0x0ca86c39
 801cb50:	be205c61 	.word	0xbe205c61
 801cb54:	72bea4d0 	.word	0x72bea4d0
 801cb58:	3e663769 	.word	0x3e663769
 801cb5c:	c5d26bf1 	.word	0xc5d26bf1
 801cb60:	3ebbbd41 	.word	0x3ebbbd41
 801cb64:	af25de2c 	.word	0xaf25de2c
 801cb68:	3f11566a 	.word	0x3f11566a
 801cb6c:	16bebd93 	.word	0x16bebd93
 801cb70:	3f66c16c 	.word	0x3f66c16c
 801cb74:	5555553e 	.word	0x5555553e
 801cb78:	3fc55555 	.word	0x3fc55555
 801cb7c:	3ff00000 	.word	0x3ff00000
 801cb80:	4090cbff 	.word	0x4090cbff
 801cb84:	3f6f3400 	.word	0x3f6f3400

0801cb88 <fabs>:
 801cb88:	0049      	lsls	r1, r1, #1
 801cb8a:	084b      	lsrs	r3, r1, #1
 801cb8c:	0019      	movs	r1, r3
 801cb8e:	4770      	bx	lr

0801cb90 <scalbn>:
 801cb90:	b570      	push	{r4, r5, r6, lr}
 801cb92:	0014      	movs	r4, r2
 801cb94:	004a      	lsls	r2, r1, #1
 801cb96:	000b      	movs	r3, r1
 801cb98:	0d52      	lsrs	r2, r2, #21
 801cb9a:	d10f      	bne.n	801cbbc <scalbn+0x2c>
 801cb9c:	004b      	lsls	r3, r1, #1
 801cb9e:	085b      	lsrs	r3, r3, #1
 801cba0:	4303      	orrs	r3, r0
 801cba2:	d011      	beq.n	801cbc8 <scalbn+0x38>
 801cba4:	4b22      	ldr	r3, [pc, #136]	; (801cc30 <scalbn+0xa0>)
 801cba6:	2200      	movs	r2, #0
 801cba8:	f7f1 ff90 	bl	800eacc <__aeabi_dmul>
 801cbac:	4b21      	ldr	r3, [pc, #132]	; (801cc34 <scalbn+0xa4>)
 801cbae:	429c      	cmp	r4, r3
 801cbb0:	da0b      	bge.n	801cbca <scalbn+0x3a>
 801cbb2:	4a21      	ldr	r2, [pc, #132]	; (801cc38 <scalbn+0xa8>)
 801cbb4:	4b21      	ldr	r3, [pc, #132]	; (801cc3c <scalbn+0xac>)
 801cbb6:	f7f1 ff89 	bl	800eacc <__aeabi_dmul>
 801cbba:	e005      	b.n	801cbc8 <scalbn+0x38>
 801cbbc:	4d20      	ldr	r5, [pc, #128]	; (801cc40 <scalbn+0xb0>)
 801cbbe:	42aa      	cmp	r2, r5
 801cbc0:	d107      	bne.n	801cbd2 <scalbn+0x42>
 801cbc2:	0002      	movs	r2, r0
 801cbc4:	f7f1 f828 	bl	800dc18 <__aeabi_dadd>
 801cbc8:	bd70      	pop	{r4, r5, r6, pc}
 801cbca:	000b      	movs	r3, r1
 801cbcc:	004a      	lsls	r2, r1, #1
 801cbce:	0d52      	lsrs	r2, r2, #21
 801cbd0:	3a36      	subs	r2, #54	; 0x36
 801cbd2:	4d1c      	ldr	r5, [pc, #112]	; (801cc44 <scalbn+0xb4>)
 801cbd4:	42ac      	cmp	r4, r5
 801cbd6:	dd0a      	ble.n	801cbee <scalbn+0x5e>
 801cbd8:	4c1b      	ldr	r4, [pc, #108]	; (801cc48 <scalbn+0xb8>)
 801cbda:	4d1c      	ldr	r5, [pc, #112]	; (801cc4c <scalbn+0xbc>)
 801cbdc:	2900      	cmp	r1, #0
 801cbde:	da01      	bge.n	801cbe4 <scalbn+0x54>
 801cbe0:	4c19      	ldr	r4, [pc, #100]	; (801cc48 <scalbn+0xb8>)
 801cbe2:	4d1b      	ldr	r5, [pc, #108]	; (801cc50 <scalbn+0xc0>)
 801cbe4:	4a18      	ldr	r2, [pc, #96]	; (801cc48 <scalbn+0xb8>)
 801cbe6:	4b19      	ldr	r3, [pc, #100]	; (801cc4c <scalbn+0xbc>)
 801cbe8:	0020      	movs	r0, r4
 801cbea:	0029      	movs	r1, r5
 801cbec:	e7e3      	b.n	801cbb6 <scalbn+0x26>
 801cbee:	18a2      	adds	r2, r4, r2
 801cbf0:	4c18      	ldr	r4, [pc, #96]	; (801cc54 <scalbn+0xc4>)
 801cbf2:	42a2      	cmp	r2, r4
 801cbf4:	dcf0      	bgt.n	801cbd8 <scalbn+0x48>
 801cbf6:	2a00      	cmp	r2, #0
 801cbf8:	dd05      	ble.n	801cc06 <scalbn+0x76>
 801cbfa:	4c17      	ldr	r4, [pc, #92]	; (801cc58 <scalbn+0xc8>)
 801cbfc:	0512      	lsls	r2, r2, #20
 801cbfe:	4023      	ands	r3, r4
 801cc00:	4313      	orrs	r3, r2
 801cc02:	0019      	movs	r1, r3
 801cc04:	e7e0      	b.n	801cbc8 <scalbn+0x38>
 801cc06:	0014      	movs	r4, r2
 801cc08:	3435      	adds	r4, #53	; 0x35
 801cc0a:	da08      	bge.n	801cc1e <scalbn+0x8e>
 801cc0c:	4c0a      	ldr	r4, [pc, #40]	; (801cc38 <scalbn+0xa8>)
 801cc0e:	4d0b      	ldr	r5, [pc, #44]	; (801cc3c <scalbn+0xac>)
 801cc10:	2900      	cmp	r1, #0
 801cc12:	da01      	bge.n	801cc18 <scalbn+0x88>
 801cc14:	4c08      	ldr	r4, [pc, #32]	; (801cc38 <scalbn+0xa8>)
 801cc16:	4d11      	ldr	r5, [pc, #68]	; (801cc5c <scalbn+0xcc>)
 801cc18:	4a07      	ldr	r2, [pc, #28]	; (801cc38 <scalbn+0xa8>)
 801cc1a:	4b08      	ldr	r3, [pc, #32]	; (801cc3c <scalbn+0xac>)
 801cc1c:	e7e4      	b.n	801cbe8 <scalbn+0x58>
 801cc1e:	4c0e      	ldr	r4, [pc, #56]	; (801cc58 <scalbn+0xc8>)
 801cc20:	3236      	adds	r2, #54	; 0x36
 801cc22:	4023      	ands	r3, r4
 801cc24:	0512      	lsls	r2, r2, #20
 801cc26:	431a      	orrs	r2, r3
 801cc28:	0011      	movs	r1, r2
 801cc2a:	4b0d      	ldr	r3, [pc, #52]	; (801cc60 <scalbn+0xd0>)
 801cc2c:	2200      	movs	r2, #0
 801cc2e:	e7c2      	b.n	801cbb6 <scalbn+0x26>
 801cc30:	43500000 	.word	0x43500000
 801cc34:	ffff3cb0 	.word	0xffff3cb0
 801cc38:	c2f8f359 	.word	0xc2f8f359
 801cc3c:	01a56e1f 	.word	0x01a56e1f
 801cc40:	000007ff 	.word	0x000007ff
 801cc44:	0000c350 	.word	0x0000c350
 801cc48:	8800759c 	.word	0x8800759c
 801cc4c:	7e37e43c 	.word	0x7e37e43c
 801cc50:	fe37e43c 	.word	0xfe37e43c
 801cc54:	000007fe 	.word	0x000007fe
 801cc58:	800fffff 	.word	0x800fffff
 801cc5c:	81a56e1f 	.word	0x81a56e1f
 801cc60:	3c900000 	.word	0x3c900000

0801cc64 <with_errno>:
 801cc64:	b570      	push	{r4, r5, r6, lr}
 801cc66:	000d      	movs	r5, r1
 801cc68:	0016      	movs	r6, r2
 801cc6a:	0004      	movs	r4, r0
 801cc6c:	f7fc fd18 	bl	80196a0 <__errno>
 801cc70:	0029      	movs	r1, r5
 801cc72:	6006      	str	r6, [r0, #0]
 801cc74:	0020      	movs	r0, r4
 801cc76:	bd70      	pop	{r4, r5, r6, pc}

0801cc78 <xflow>:
 801cc78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cc7a:	0015      	movs	r5, r2
 801cc7c:	001c      	movs	r4, r3
 801cc7e:	2800      	cmp	r0, #0
 801cc80:	d010      	beq.n	801cca4 <xflow+0x2c>
 801cc82:	2380      	movs	r3, #128	; 0x80
 801cc84:	0010      	movs	r0, r2
 801cc86:	061b      	lsls	r3, r3, #24
 801cc88:	18e1      	adds	r1, r4, r3
 801cc8a:	9000      	str	r0, [sp, #0]
 801cc8c:	9101      	str	r1, [sp, #4]
 801cc8e:	9a00      	ldr	r2, [sp, #0]
 801cc90:	9b01      	ldr	r3, [sp, #4]
 801cc92:	0028      	movs	r0, r5
 801cc94:	0021      	movs	r1, r4
 801cc96:	f7f1 ff19 	bl	800eacc <__aeabi_dmul>
 801cc9a:	2222      	movs	r2, #34	; 0x22
 801cc9c:	f7ff ffe2 	bl	801cc64 <with_errno>
 801cca0:	b003      	add	sp, #12
 801cca2:	bd30      	pop	{r4, r5, pc}
 801cca4:	0010      	movs	r0, r2
 801cca6:	0019      	movs	r1, r3
 801cca8:	e7ef      	b.n	801cc8a <xflow+0x12>

0801ccaa <__math_uflow>:
 801ccaa:	2380      	movs	r3, #128	; 0x80
 801ccac:	b510      	push	{r4, lr}
 801ccae:	2200      	movs	r2, #0
 801ccb0:	055b      	lsls	r3, r3, #21
 801ccb2:	f7ff ffe1 	bl	801cc78 <xflow>
 801ccb6:	bd10      	pop	{r4, pc}

0801ccb8 <__math_oflow>:
 801ccb8:	23e0      	movs	r3, #224	; 0xe0
 801ccba:	b510      	push	{r4, lr}
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	05db      	lsls	r3, r3, #23
 801ccc0:	f7ff ffda 	bl	801cc78 <xflow>
 801ccc4:	bd10      	pop	{r4, pc}
	...

0801ccc8 <__ieee754_sqrt>:
 801ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccca:	000a      	movs	r2, r1
 801cccc:	000c      	movs	r4, r1
 801ccce:	496f      	ldr	r1, [pc, #444]	; (801ce8c <__ieee754_sqrt+0x1c4>)
 801ccd0:	0005      	movs	r5, r0
 801ccd2:	0003      	movs	r3, r0
 801ccd4:	0008      	movs	r0, r1
 801ccd6:	b087      	sub	sp, #28
 801ccd8:	4020      	ands	r0, r4
 801ccda:	4288      	cmp	r0, r1
 801ccdc:	d111      	bne.n	801cd02 <__ieee754_sqrt+0x3a>
 801ccde:	002a      	movs	r2, r5
 801cce0:	0023      	movs	r3, r4
 801cce2:	0028      	movs	r0, r5
 801cce4:	0021      	movs	r1, r4
 801cce6:	f7f1 fef1 	bl	800eacc <__aeabi_dmul>
 801ccea:	0002      	movs	r2, r0
 801ccec:	000b      	movs	r3, r1
 801ccee:	0028      	movs	r0, r5
 801ccf0:	0021      	movs	r1, r4
 801ccf2:	f7f0 ff91 	bl	800dc18 <__aeabi_dadd>
 801ccf6:	0005      	movs	r5, r0
 801ccf8:	000c      	movs	r4, r1
 801ccfa:	0028      	movs	r0, r5
 801ccfc:	0021      	movs	r1, r4
 801ccfe:	b007      	add	sp, #28
 801cd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd02:	2c00      	cmp	r4, #0
 801cd04:	dc12      	bgt.n	801cd2c <__ieee754_sqrt+0x64>
 801cd06:	0061      	lsls	r1, r4, #1
 801cd08:	0849      	lsrs	r1, r1, #1
 801cd0a:	4329      	orrs	r1, r5
 801cd0c:	d0f5      	beq.n	801ccfa <__ieee754_sqrt+0x32>
 801cd0e:	2100      	movs	r1, #0
 801cd10:	428c      	cmp	r4, r1
 801cd12:	d100      	bne.n	801cd16 <__ieee754_sqrt+0x4e>
 801cd14:	e09f      	b.n	801ce56 <__ieee754_sqrt+0x18e>
 801cd16:	002a      	movs	r2, r5
 801cd18:	0023      	movs	r3, r4
 801cd1a:	0028      	movs	r0, r5
 801cd1c:	0021      	movs	r1, r4
 801cd1e:	f7f2 f997 	bl	800f050 <__aeabi_dsub>
 801cd22:	0002      	movs	r2, r0
 801cd24:	000b      	movs	r3, r1
 801cd26:	f7f1 fad7 	bl	800e2d8 <__aeabi_ddiv>
 801cd2a:	e7e4      	b.n	801ccf6 <__ieee754_sqrt+0x2e>
 801cd2c:	1521      	asrs	r1, r4, #20
 801cd2e:	d100      	bne.n	801cd32 <__ieee754_sqrt+0x6a>
 801cd30:	e091      	b.n	801ce56 <__ieee754_sqrt+0x18e>
 801cd32:	4857      	ldr	r0, [pc, #348]	; (801ce90 <__ieee754_sqrt+0x1c8>)
 801cd34:	0312      	lsls	r2, r2, #12
 801cd36:	180c      	adds	r4, r1, r0
 801cd38:	2080      	movs	r0, #128	; 0x80
 801cd3a:	0b12      	lsrs	r2, r2, #12
 801cd3c:	0340      	lsls	r0, r0, #13
 801cd3e:	4310      	orrs	r0, r2
 801cd40:	07c9      	lsls	r1, r1, #31
 801cd42:	d403      	bmi.n	801cd4c <__ieee754_sqrt+0x84>
 801cd44:	0fda      	lsrs	r2, r3, #31
 801cd46:	0040      	lsls	r0, r0, #1
 801cd48:	1810      	adds	r0, r2, r0
 801cd4a:	005b      	lsls	r3, r3, #1
 801cd4c:	2500      	movs	r5, #0
 801cd4e:	1062      	asrs	r2, r4, #1
 801cd50:	0040      	lsls	r0, r0, #1
 801cd52:	2480      	movs	r4, #128	; 0x80
 801cd54:	9205      	str	r2, [sp, #20]
 801cd56:	0fda      	lsrs	r2, r3, #31
 801cd58:	1812      	adds	r2, r2, r0
 801cd5a:	0029      	movs	r1, r5
 801cd5c:	2016      	movs	r0, #22
 801cd5e:	005b      	lsls	r3, r3, #1
 801cd60:	03a4      	lsls	r4, r4, #14
 801cd62:	190e      	adds	r6, r1, r4
 801cd64:	4296      	cmp	r6, r2
 801cd66:	dc02      	bgt.n	801cd6e <__ieee754_sqrt+0xa6>
 801cd68:	1931      	adds	r1, r6, r4
 801cd6a:	1b92      	subs	r2, r2, r6
 801cd6c:	192d      	adds	r5, r5, r4
 801cd6e:	0fde      	lsrs	r6, r3, #31
 801cd70:	0052      	lsls	r2, r2, #1
 801cd72:	3801      	subs	r0, #1
 801cd74:	18b2      	adds	r2, r6, r2
 801cd76:	005b      	lsls	r3, r3, #1
 801cd78:	0864      	lsrs	r4, r4, #1
 801cd7a:	2800      	cmp	r0, #0
 801cd7c:	d1f1      	bne.n	801cd62 <__ieee754_sqrt+0x9a>
 801cd7e:	2620      	movs	r6, #32
 801cd80:	2780      	movs	r7, #128	; 0x80
 801cd82:	0004      	movs	r4, r0
 801cd84:	9604      	str	r6, [sp, #16]
 801cd86:	063f      	lsls	r7, r7, #24
 801cd88:	183e      	adds	r6, r7, r0
 801cd8a:	46b4      	mov	ip, r6
 801cd8c:	428a      	cmp	r2, r1
 801cd8e:	dc02      	bgt.n	801cd96 <__ieee754_sqrt+0xce>
 801cd90:	d114      	bne.n	801cdbc <__ieee754_sqrt+0xf4>
 801cd92:	429e      	cmp	r6, r3
 801cd94:	d812      	bhi.n	801cdbc <__ieee754_sqrt+0xf4>
 801cd96:	4660      	mov	r0, ip
 801cd98:	4666      	mov	r6, ip
 801cd9a:	19c0      	adds	r0, r0, r7
 801cd9c:	9100      	str	r1, [sp, #0]
 801cd9e:	2e00      	cmp	r6, #0
 801cda0:	da03      	bge.n	801cdaa <__ieee754_sqrt+0xe2>
 801cda2:	43c6      	mvns	r6, r0
 801cda4:	0ff6      	lsrs	r6, r6, #31
 801cda6:	198e      	adds	r6, r1, r6
 801cda8:	9600      	str	r6, [sp, #0]
 801cdaa:	1a52      	subs	r2, r2, r1
 801cdac:	4563      	cmp	r3, ip
 801cdae:	4189      	sbcs	r1, r1
 801cdb0:	4249      	negs	r1, r1
 801cdb2:	1a52      	subs	r2, r2, r1
 801cdb4:	4661      	mov	r1, ip
 801cdb6:	1a5b      	subs	r3, r3, r1
 801cdb8:	9900      	ldr	r1, [sp, #0]
 801cdba:	19e4      	adds	r4, r4, r7
 801cdbc:	0fde      	lsrs	r6, r3, #31
 801cdbe:	0052      	lsls	r2, r2, #1
 801cdc0:	18b2      	adds	r2, r6, r2
 801cdc2:	9e04      	ldr	r6, [sp, #16]
 801cdc4:	005b      	lsls	r3, r3, #1
 801cdc6:	3e01      	subs	r6, #1
 801cdc8:	087f      	lsrs	r7, r7, #1
 801cdca:	9604      	str	r6, [sp, #16]
 801cdcc:	2e00      	cmp	r6, #0
 801cdce:	d1db      	bne.n	801cd88 <__ieee754_sqrt+0xc0>
 801cdd0:	431a      	orrs	r2, r3
 801cdd2:	d01f      	beq.n	801ce14 <__ieee754_sqrt+0x14c>
 801cdd4:	4e2f      	ldr	r6, [pc, #188]	; (801ce94 <__ieee754_sqrt+0x1cc>)
 801cdd6:	4f30      	ldr	r7, [pc, #192]	; (801ce98 <__ieee754_sqrt+0x1d0>)
 801cdd8:	6830      	ldr	r0, [r6, #0]
 801cdda:	6871      	ldr	r1, [r6, #4]
 801cddc:	683a      	ldr	r2, [r7, #0]
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	9200      	str	r2, [sp, #0]
 801cde2:	9301      	str	r3, [sp, #4]
 801cde4:	6832      	ldr	r2, [r6, #0]
 801cde6:	6873      	ldr	r3, [r6, #4]
 801cde8:	9202      	str	r2, [sp, #8]
 801cdea:	9303      	str	r3, [sp, #12]
 801cdec:	9a00      	ldr	r2, [sp, #0]
 801cdee:	9b01      	ldr	r3, [sp, #4]
 801cdf0:	f7f2 f92e 	bl	800f050 <__aeabi_dsub>
 801cdf4:	0002      	movs	r2, r0
 801cdf6:	000b      	movs	r3, r1
 801cdf8:	9802      	ldr	r0, [sp, #8]
 801cdfa:	9903      	ldr	r1, [sp, #12]
 801cdfc:	f7ef ff32 	bl	800cc64 <__aeabi_dcmple>
 801ce00:	2800      	cmp	r0, #0
 801ce02:	d007      	beq.n	801ce14 <__ieee754_sqrt+0x14c>
 801ce04:	6830      	ldr	r0, [r6, #0]
 801ce06:	6871      	ldr	r1, [r6, #4]
 801ce08:	683a      	ldr	r2, [r7, #0]
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	1c67      	adds	r7, r4, #1
 801ce0e:	d127      	bne.n	801ce60 <__ieee754_sqrt+0x198>
 801ce10:	9c04      	ldr	r4, [sp, #16]
 801ce12:	3501      	adds	r5, #1
 801ce14:	4b21      	ldr	r3, [pc, #132]	; (801ce9c <__ieee754_sqrt+0x1d4>)
 801ce16:	1069      	asrs	r1, r5, #1
 801ce18:	18c9      	adds	r1, r1, r3
 801ce1a:	0864      	lsrs	r4, r4, #1
 801ce1c:	07ed      	lsls	r5, r5, #31
 801ce1e:	d502      	bpl.n	801ce26 <__ieee754_sqrt+0x15e>
 801ce20:	2380      	movs	r3, #128	; 0x80
 801ce22:	061b      	lsls	r3, r3, #24
 801ce24:	431c      	orrs	r4, r3
 801ce26:	9b05      	ldr	r3, [sp, #20]
 801ce28:	0025      	movs	r5, r4
 801ce2a:	0518      	lsls	r0, r3, #20
 801ce2c:	1843      	adds	r3, r0, r1
 801ce2e:	001c      	movs	r4, r3
 801ce30:	e763      	b.n	801ccfa <__ieee754_sqrt+0x32>
 801ce32:	0ada      	lsrs	r2, r3, #11
 801ce34:	3815      	subs	r0, #21
 801ce36:	055b      	lsls	r3, r3, #21
 801ce38:	2a00      	cmp	r2, #0
 801ce3a:	d0fa      	beq.n	801ce32 <__ieee754_sqrt+0x16a>
 801ce3c:	2480      	movs	r4, #128	; 0x80
 801ce3e:	0364      	lsls	r4, r4, #13
 801ce40:	4222      	tst	r2, r4
 801ce42:	d00a      	beq.n	801ce5a <__ieee754_sqrt+0x192>
 801ce44:	2420      	movs	r4, #32
 801ce46:	001e      	movs	r6, r3
 801ce48:	1a64      	subs	r4, r4, r1
 801ce4a:	40e6      	lsrs	r6, r4
 801ce4c:	1e4d      	subs	r5, r1, #1
 801ce4e:	408b      	lsls	r3, r1
 801ce50:	4332      	orrs	r2, r6
 801ce52:	1b41      	subs	r1, r0, r5
 801ce54:	e76d      	b.n	801cd32 <__ieee754_sqrt+0x6a>
 801ce56:	2000      	movs	r0, #0
 801ce58:	e7ee      	b.n	801ce38 <__ieee754_sqrt+0x170>
 801ce5a:	0052      	lsls	r2, r2, #1
 801ce5c:	3101      	adds	r1, #1
 801ce5e:	e7ef      	b.n	801ce40 <__ieee754_sqrt+0x178>
 801ce60:	f7f0 feda 	bl	800dc18 <__aeabi_dadd>
 801ce64:	6877      	ldr	r7, [r6, #4]
 801ce66:	6836      	ldr	r6, [r6, #0]
 801ce68:	0002      	movs	r2, r0
 801ce6a:	000b      	movs	r3, r1
 801ce6c:	0030      	movs	r0, r6
 801ce6e:	0039      	movs	r1, r7
 801ce70:	f7ef feee 	bl	800cc50 <__aeabi_dcmplt>
 801ce74:	2800      	cmp	r0, #0
 801ce76:	d004      	beq.n	801ce82 <__ieee754_sqrt+0x1ba>
 801ce78:	3402      	adds	r4, #2
 801ce7a:	4263      	negs	r3, r4
 801ce7c:	4163      	adcs	r3, r4
 801ce7e:	18ed      	adds	r5, r5, r3
 801ce80:	e7c8      	b.n	801ce14 <__ieee754_sqrt+0x14c>
 801ce82:	2301      	movs	r3, #1
 801ce84:	3401      	adds	r4, #1
 801ce86:	439c      	bics	r4, r3
 801ce88:	e7c4      	b.n	801ce14 <__ieee754_sqrt+0x14c>
 801ce8a:	46c0      	nop			; (mov r8, r8)
 801ce8c:	7ff00000 	.word	0x7ff00000
 801ce90:	fffffc01 	.word	0xfffffc01
 801ce94:	200002b8 	.word	0x200002b8
 801ce98:	200002c0 	.word	0x200002c0
 801ce9c:	3fe00000 	.word	0x3fe00000

0801cea0 <_init>:
 801cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cea2:	46c0      	nop			; (mov r8, r8)
 801cea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cea6:	bc08      	pop	{r3}
 801cea8:	469e      	mov	lr, r3
 801ceaa:	4770      	bx	lr

0801ceac <_fini>:
 801ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceae:	46c0      	nop			; (mov r8, r8)
 801ceb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ceb2:	bc08      	pop	{r3}
 801ceb4:	469e      	mov	lr, r3
 801ceb6:	4770      	bx	lr
